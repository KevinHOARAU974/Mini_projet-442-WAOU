
Mini_Projet_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000151a0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002d58  08015370  08015370  00025370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080180c8  080180c8  00030158  2**0
                  CONTENTS
  4 .ARM          00000008  080180c8  080180c8  000280c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080180d0  080180d0  00030158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080180d0  080180d0  000280d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080180d4  080180d4  000280d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000158  20000000  080180d8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000093ac  20000158  08018230  00030158  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  20009504  08018230  00039504  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030158  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003481b  00000000  00000000  00030188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006ae0  00000000  00000000  000649a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002bb8  00000000  00000000  0006b488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000028f8  00000000  00000000  0006e040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030a5c  00000000  00000000  00070938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00034d7e  00000000  00000000  000a1394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00119126  00000000  00000000  000d6112  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001ef238  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bbb8  00000000  00000000  001ef288  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000158 	.word	0x20000158
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08015358 	.word	0x08015358

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000015c 	.word	0x2000015c
 800020c:	08015358 	.word	0x08015358

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80005b8:	bf00      	nop
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr

080005c2 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80005c2:	b480      	push	{r7}
 80005c4:	b083      	sub	sp, #12
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	6078      	str	r0, [r7, #4]
 80005ca:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80005cc:	bf00      	nop
 80005ce:	370c      	adds	r7, #12
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr

080005d8 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80005dc:	bf00      	nop
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
	...

080005e8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005e8:	b480      	push	{r7}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	60f8      	str	r0, [r7, #12]
 80005f0:	60b9      	str	r1, [r7, #8]
 80005f2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	4a07      	ldr	r2, [pc, #28]	; (8000614 <vApplicationGetIdleTaskMemory+0x2c>)
 80005f8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005fa:	68bb      	ldr	r3, [r7, #8]
 80005fc:	4a06      	ldr	r2, [pc, #24]	; (8000618 <vApplicationGetIdleTaskMemory+0x30>)
 80005fe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	2280      	movs	r2, #128	; 0x80
 8000604:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000606:	bf00      	nop
 8000608:	3714      	adds	r7, #20
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	20000174 	.word	0x20000174
 8000618:	200001c8 	.word	0x200001c8

0800061c <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8000626:	20c8      	movs	r0, #200	; 0xc8
 8000628:	f002 fcce 	bl	8002fc8 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 800062c:	f000 fa7a 	bl	8000b24 <ft5336_I2C_InitializeIfRequired>
}
 8000630:	bf00      	nop
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}

08000638 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8000642:	bf00      	nop
 8000644:	370c      	adds	r7, #12
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr

0800064e <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 800064e:	b580      	push	{r7, lr}
 8000650:	b084      	sub	sp, #16
 8000652:	af00      	add	r7, sp, #0
 8000654:	4603      	mov	r3, r0
 8000656:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8000658:	2300      	movs	r3, #0
 800065a:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 800065c:	2300      	movs	r3, #0
 800065e:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8000660:	2300      	movs	r3, #0
 8000662:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000664:	f000 fa5e 	bl	8000b24 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000668:	2300      	movs	r3, #0
 800066a:	73fb      	strb	r3, [r7, #15]
 800066c:	e010      	b.n	8000690 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 800066e:	88fb      	ldrh	r3, [r7, #6]
 8000670:	b2db      	uxtb	r3, r3
 8000672:	21a8      	movs	r1, #168	; 0xa8
 8000674:	4618      	mov	r0, r3
 8000676:	f002 fc89 	bl	8002f8c <TS_IO_Read>
 800067a:	4603      	mov	r3, r0
 800067c:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 800067e:	7b7b      	ldrb	r3, [r7, #13]
 8000680:	b2db      	uxtb	r3, r3
 8000682:	2b51      	cmp	r3, #81	; 0x51
 8000684:	d101      	bne.n	800068a <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8000686:	2301      	movs	r3, #1
 8000688:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800068a:	7bfb      	ldrb	r3, [r7, #15]
 800068c:	3301      	adds	r3, #1
 800068e:	73fb      	strb	r3, [r7, #15]
 8000690:	7bfb      	ldrb	r3, [r7, #15]
 8000692:	2b02      	cmp	r3, #2
 8000694:	d802      	bhi.n	800069c <ft5336_ReadID+0x4e>
 8000696:	7bbb      	ldrb	r3, [r7, #14]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d0e8      	beq.n	800066e <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 800069c:	7b7b      	ldrb	r3, [r7, #13]
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	b29b      	uxth	r3, r3
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	3710      	adds	r7, #16
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}

080006aa <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 80006aa:	b580      	push	{r7, lr}
 80006ac:	b082      	sub	sp, #8
 80006ae:	af00      	add	r7, sp, #0
 80006b0:	4603      	mov	r3, r0
 80006b2:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 80006b4:	88fb      	ldrh	r3, [r7, #6]
 80006b6:	4618      	mov	r0, r3
 80006b8:	f000 fa44 	bl	8000b44 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 80006bc:	88fb      	ldrh	r3, [r7, #6]
 80006be:	4618      	mov	r0, r3
 80006c0:	f000 f932 	bl	8000928 <ft5336_TS_DisableIT>
}
 80006c4:	bf00      	nop
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}

080006cc <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80006da:	88fb      	ldrh	r3, [r7, #6]
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	2102      	movs	r1, #2
 80006e0:	4618      	mov	r0, r3
 80006e2:	f002 fc53 	bl	8002f8c <TS_IO_Read>
 80006e6:	4603      	mov	r3, r0
 80006e8:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 80006ea:	7bfb      	ldrb	r3, [r7, #15]
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	f003 030f 	and.w	r3, r3, #15
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 80006f6:	7bfb      	ldrb	r3, [r7, #15]
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	2b05      	cmp	r3, #5
 80006fc:	d901      	bls.n	8000702 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8000702:	7bfb      	ldrb	r3, [r7, #15]
 8000704:	b2da      	uxtb	r2, r3
 8000706:	4b05      	ldr	r3, [pc, #20]	; (800071c <ft5336_TS_DetectTouch+0x50>)
 8000708:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 800070a:	4b04      	ldr	r3, [pc, #16]	; (800071c <ft5336_TS_DetectTouch+0x50>)
 800070c:	2200      	movs	r2, #0
 800070e:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8000710:	7bfb      	ldrb	r3, [r7, #15]
 8000712:	b2db      	uxtb	r3, r3
}
 8000714:	4618      	mov	r0, r3
 8000716:	3710      	adds	r7, #16
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	200003c8 	.word	0x200003c8

08000720 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b086      	sub	sp, #24
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	60b9      	str	r1, [r7, #8]
 800072a:	607a      	str	r2, [r7, #4]
 800072c:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 800072e:	2300      	movs	r3, #0
 8000730:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8000732:	2300      	movs	r3, #0
 8000734:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 800073a:	2300      	movs	r3, #0
 800073c:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 800073e:	2300      	movs	r3, #0
 8000740:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8000742:	4b6d      	ldr	r3, [pc, #436]	; (80008f8 <ft5336_TS_GetXY+0x1d8>)
 8000744:	789a      	ldrb	r2, [r3, #2]
 8000746:	4b6c      	ldr	r3, [pc, #432]	; (80008f8 <ft5336_TS_GetXY+0x1d8>)
 8000748:	785b      	ldrb	r3, [r3, #1]
 800074a:	429a      	cmp	r2, r3
 800074c:	f080 80cf 	bcs.w	80008ee <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8000750:	4b69      	ldr	r3, [pc, #420]	; (80008f8 <ft5336_TS_GetXY+0x1d8>)
 8000752:	789b      	ldrb	r3, [r3, #2]
 8000754:	2b09      	cmp	r3, #9
 8000756:	d871      	bhi.n	800083c <ft5336_TS_GetXY+0x11c>
 8000758:	a201      	add	r2, pc, #4	; (adr r2, 8000760 <ft5336_TS_GetXY+0x40>)
 800075a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800075e:	bf00      	nop
 8000760:	08000789 	.word	0x08000789
 8000764:	0800079b 	.word	0x0800079b
 8000768:	080007ad 	.word	0x080007ad
 800076c:	080007bf 	.word	0x080007bf
 8000770:	080007d1 	.word	0x080007d1
 8000774:	080007e3 	.word	0x080007e3
 8000778:	080007f5 	.word	0x080007f5
 800077c:	08000807 	.word	0x08000807
 8000780:	08000819 	.word	0x08000819
 8000784:	0800082b 	.word	0x0800082b
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8000788:	2304      	movs	r3, #4
 800078a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 800078c:	2303      	movs	r3, #3
 800078e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8000790:	2306      	movs	r3, #6
 8000792:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8000794:	2305      	movs	r3, #5
 8000796:	753b      	strb	r3, [r7, #20]
      break;
 8000798:	e051      	b.n	800083e <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 800079a:	230a      	movs	r3, #10
 800079c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 800079e:	2309      	movs	r3, #9
 80007a0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 80007a2:	230c      	movs	r3, #12
 80007a4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 80007a6:	230b      	movs	r3, #11
 80007a8:	753b      	strb	r3, [r7, #20]
      break;
 80007aa:	e048      	b.n	800083e <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 80007ac:	2310      	movs	r3, #16
 80007ae:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 80007b0:	230f      	movs	r3, #15
 80007b2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 80007b4:	2312      	movs	r3, #18
 80007b6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 80007b8:	2311      	movs	r3, #17
 80007ba:	753b      	strb	r3, [r7, #20]
      break;
 80007bc:	e03f      	b.n	800083e <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 80007be:	2316      	movs	r3, #22
 80007c0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 80007c2:	2315      	movs	r3, #21
 80007c4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 80007c6:	2318      	movs	r3, #24
 80007c8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 80007ca:	2317      	movs	r3, #23
 80007cc:	753b      	strb	r3, [r7, #20]
      break;
 80007ce:	e036      	b.n	800083e <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 80007d0:	231c      	movs	r3, #28
 80007d2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 80007d4:	231b      	movs	r3, #27
 80007d6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 80007d8:	231e      	movs	r3, #30
 80007da:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 80007dc:	231d      	movs	r3, #29
 80007de:	753b      	strb	r3, [r7, #20]
      break;
 80007e0:	e02d      	b.n	800083e <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 80007e2:	2322      	movs	r3, #34	; 0x22
 80007e4:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 80007e6:	2321      	movs	r3, #33	; 0x21
 80007e8:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 80007ea:	2324      	movs	r3, #36	; 0x24
 80007ec:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 80007ee:	2323      	movs	r3, #35	; 0x23
 80007f0:	753b      	strb	r3, [r7, #20]
      break;
 80007f2:	e024      	b.n	800083e <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 80007f4:	2328      	movs	r3, #40	; 0x28
 80007f6:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 80007f8:	2327      	movs	r3, #39	; 0x27
 80007fa:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 80007fc:	232a      	movs	r3, #42	; 0x2a
 80007fe:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8000800:	2329      	movs	r3, #41	; 0x29
 8000802:	753b      	strb	r3, [r7, #20]
      break;
 8000804:	e01b      	b.n	800083e <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8000806:	232e      	movs	r3, #46	; 0x2e
 8000808:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 800080a:	232d      	movs	r3, #45	; 0x2d
 800080c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 800080e:	2330      	movs	r3, #48	; 0x30
 8000810:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 8000812:	232f      	movs	r3, #47	; 0x2f
 8000814:	753b      	strb	r3, [r7, #20]
      break;
 8000816:	e012      	b.n	800083e <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8000818:	2334      	movs	r3, #52	; 0x34
 800081a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 800081c:	2333      	movs	r3, #51	; 0x33
 800081e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8000820:	2336      	movs	r3, #54	; 0x36
 8000822:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8000824:	2335      	movs	r3, #53	; 0x35
 8000826:	753b      	strb	r3, [r7, #20]
      break;
 8000828:	e009      	b.n	800083e <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 800082a:	233a      	movs	r3, #58	; 0x3a
 800082c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 800082e:	2339      	movs	r3, #57	; 0x39
 8000830:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8000832:	233c      	movs	r3, #60	; 0x3c
 8000834:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8000836:	233b      	movs	r3, #59	; 0x3b
 8000838:	753b      	strb	r3, [r7, #20]
      break;
 800083a:	e000      	b.n	800083e <ft5336_TS_GetXY+0x11e>

    default :
      break;
 800083c:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 800083e:	89fb      	ldrh	r3, [r7, #14]
 8000840:	b2db      	uxtb	r3, r3
 8000842:	7dfa      	ldrb	r2, [r7, #23]
 8000844:	4611      	mov	r1, r2
 8000846:	4618      	mov	r0, r3
 8000848:	f002 fba0 	bl	8002f8c <TS_IO_Read>
 800084c:	4603      	mov	r3, r0
 800084e:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000850:	7cfb      	ldrb	r3, [r7, #19]
 8000852:	b2db      	uxtb	r3, r3
 8000854:	b29a      	uxth	r2, r3
 8000856:	4b29      	ldr	r3, [pc, #164]	; (80008fc <ft5336_TS_GetXY+0x1dc>)
 8000858:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800085a:	89fb      	ldrh	r3, [r7, #14]
 800085c:	b2db      	uxtb	r3, r3
 800085e:	7dba      	ldrb	r2, [r7, #22]
 8000860:	4611      	mov	r1, r2
 8000862:	4618      	mov	r0, r3
 8000864:	f002 fb92 	bl	8002f8c <TS_IO_Read>
 8000868:	4603      	mov	r3, r0
 800086a:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800086c:	7cfb      	ldrb	r3, [r7, #19]
 800086e:	b2db      	uxtb	r3, r3
 8000870:	021b      	lsls	r3, r3, #8
 8000872:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000876:	b21a      	sxth	r2, r3
 8000878:	4b20      	ldr	r3, [pc, #128]	; (80008fc <ft5336_TS_GetXY+0x1dc>)
 800087a:	881b      	ldrh	r3, [r3, #0]
 800087c:	b21b      	sxth	r3, r3
 800087e:	4313      	orrs	r3, r2
 8000880:	b21b      	sxth	r3, r3
 8000882:	b29a      	uxth	r2, r3
 8000884:	4b1d      	ldr	r3, [pc, #116]	; (80008fc <ft5336_TS_GetXY+0x1dc>)
 8000886:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8000888:	4b1c      	ldr	r3, [pc, #112]	; (80008fc <ft5336_TS_GetXY+0x1dc>)
 800088a:	881a      	ldrh	r2, [r3, #0]
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8000890:	89fb      	ldrh	r3, [r7, #14]
 8000892:	b2db      	uxtb	r3, r3
 8000894:	7d7a      	ldrb	r2, [r7, #21]
 8000896:	4611      	mov	r1, r2
 8000898:	4618      	mov	r0, r3
 800089a:	f002 fb77 	bl	8002f8c <TS_IO_Read>
 800089e:	4603      	mov	r3, r0
 80008a0:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80008a2:	7cfb      	ldrb	r3, [r7, #19]
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	b29a      	uxth	r2, r3
 80008a8:	4b14      	ldr	r3, [pc, #80]	; (80008fc <ft5336_TS_GetXY+0x1dc>)
 80008aa:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 80008ac:	89fb      	ldrh	r3, [r7, #14]
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	7d3a      	ldrb	r2, [r7, #20]
 80008b2:	4611      	mov	r1, r2
 80008b4:	4618      	mov	r0, r3
 80008b6:	f002 fb69 	bl	8002f8c <TS_IO_Read>
 80008ba:	4603      	mov	r3, r0
 80008bc:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80008be:	7cfb      	ldrb	r3, [r7, #19]
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	021b      	lsls	r3, r3, #8
 80008c4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80008c8:	b21a      	sxth	r2, r3
 80008ca:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <ft5336_TS_GetXY+0x1dc>)
 80008cc:	881b      	ldrh	r3, [r3, #0]
 80008ce:	b21b      	sxth	r3, r3
 80008d0:	4313      	orrs	r3, r2
 80008d2:	b21b      	sxth	r3, r3
 80008d4:	b29a      	uxth	r2, r3
 80008d6:	4b09      	ldr	r3, [pc, #36]	; (80008fc <ft5336_TS_GetXY+0x1dc>)
 80008d8:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 80008da:	4b08      	ldr	r3, [pc, #32]	; (80008fc <ft5336_TS_GetXY+0x1dc>)
 80008dc:	881a      	ldrh	r2, [r3, #0]
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 80008e2:	4b05      	ldr	r3, [pc, #20]	; (80008f8 <ft5336_TS_GetXY+0x1d8>)
 80008e4:	789b      	ldrb	r3, [r3, #2]
 80008e6:	3301      	adds	r3, #1
 80008e8:	b2da      	uxtb	r2, r3
 80008ea:	4b03      	ldr	r3, [pc, #12]	; (80008f8 <ft5336_TS_GetXY+0x1d8>)
 80008ec:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 80008ee:	bf00      	nop
 80008f0:	3718      	adds	r7, #24
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	200003c8 	.word	0x200003c8
 80008fc:	200003cc 	.word	0x200003cc

08000900 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 800090a:	2300      	movs	r3, #0
 800090c:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800090e:	2301      	movs	r3, #1
 8000910:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8000912:	88fb      	ldrh	r3, [r7, #6]
 8000914:	b2db      	uxtb	r3, r3
 8000916:	7bfa      	ldrb	r2, [r7, #15]
 8000918:	21a4      	movs	r1, #164	; 0xa4
 800091a:	4618      	mov	r0, r3
 800091c:	f002 fb1c 	bl	8002f58 <TS_IO_Write>
}
 8000920:	bf00      	nop
 8000922:	3710      	adds	r7, #16
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}

08000928 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8000932:	2300      	movs	r3, #0
 8000934:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8000936:	2300      	movs	r3, #0
 8000938:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800093a:	88fb      	ldrh	r3, [r7, #6]
 800093c:	b2db      	uxtb	r3, r3
 800093e:	7bfa      	ldrb	r2, [r7, #15]
 8000940:	21a4      	movs	r1, #164	; 0xa4
 8000942:	4618      	mov	r0, r3
 8000944:	f002 fb08 	bl	8002f58 <TS_IO_Write>
}
 8000948:	bf00      	nop
 800094a:	3710      	adds	r7, #16
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}

08000950 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 800095a:	2300      	movs	r3, #0
}
 800095c:	4618      	mov	r0, r3
 800095e:	370c      	adds	r7, #12
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr

08000968 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8000972:	bf00      	nop
 8000974:	370c      	adds	r7, #12
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr

0800097e <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 800097e:	b580      	push	{r7, lr}
 8000980:	b084      	sub	sp, #16
 8000982:	af00      	add	r7, sp, #0
 8000984:	4603      	mov	r3, r0
 8000986:	6039      	str	r1, [r7, #0]
 8000988:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 800098a:	2300      	movs	r3, #0
 800098c:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 800098e:	88fb      	ldrh	r3, [r7, #6]
 8000990:	b2db      	uxtb	r3, r3
 8000992:	2101      	movs	r1, #1
 8000994:	4618      	mov	r0, r3
 8000996:	f002 faf9 	bl	8002f8c <TS_IO_Read>
 800099a:	4603      	mov	r3, r0
 800099c:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 800099e:	7bfb      	ldrb	r3, [r7, #15]
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	461a      	mov	r2, r3
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	601a      	str	r2, [r3, #0]
}
 80009a8:	bf00      	nop
 80009aa:	3710      	adds	r7, #16
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b086      	sub	sp, #24
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	60b9      	str	r1, [r7, #8]
 80009b8:	607a      	str	r2, [r7, #4]
 80009ba:	603b      	str	r3, [r7, #0]
 80009bc:	4603      	mov	r3, r0
 80009be:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80009c0:	2300      	movs	r3, #0
 80009c2:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 80009d0:	4b4d      	ldr	r3, [pc, #308]	; (8000b08 <ft5336_TS_GetTouchInfo+0x158>)
 80009d2:	785b      	ldrb	r3, [r3, #1]
 80009d4:	461a      	mov	r2, r3
 80009d6:	68bb      	ldr	r3, [r7, #8]
 80009d8:	4293      	cmp	r3, r2
 80009da:	f080 8090 	bcs.w	8000afe <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 80009de:	68bb      	ldr	r3, [r7, #8]
 80009e0:	2b09      	cmp	r3, #9
 80009e2:	d85d      	bhi.n	8000aa0 <ft5336_TS_GetTouchInfo+0xf0>
 80009e4:	a201      	add	r2, pc, #4	; (adr r2, 80009ec <ft5336_TS_GetTouchInfo+0x3c>)
 80009e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009ea:	bf00      	nop
 80009ec:	08000a15 	.word	0x08000a15
 80009f0:	08000a23 	.word	0x08000a23
 80009f4:	08000a31 	.word	0x08000a31
 80009f8:	08000a3f 	.word	0x08000a3f
 80009fc:	08000a4d 	.word	0x08000a4d
 8000a00:	08000a5b 	.word	0x08000a5b
 8000a04:	08000a69 	.word	0x08000a69
 8000a08:	08000a77 	.word	0x08000a77
 8000a0c:	08000a85 	.word	0x08000a85
 8000a10:	08000a93 	.word	0x08000a93
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 8000a14:	2303      	movs	r3, #3
 8000a16:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 8000a18:	2307      	movs	r3, #7
 8000a1a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 8000a1c:	2308      	movs	r3, #8
 8000a1e:	757b      	strb	r3, [r7, #21]
      break;
 8000a20:	e03f      	b.n	8000aa2 <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 8000a22:	2309      	movs	r3, #9
 8000a24:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 8000a26:	230d      	movs	r3, #13
 8000a28:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 8000a2a:	230e      	movs	r3, #14
 8000a2c:	757b      	strb	r3, [r7, #21]
      break;
 8000a2e:	e038      	b.n	8000aa2 <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 8000a30:	230f      	movs	r3, #15
 8000a32:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8000a34:	2313      	movs	r3, #19
 8000a36:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 8000a38:	2314      	movs	r3, #20
 8000a3a:	757b      	strb	r3, [r7, #21]
      break;
 8000a3c:	e031      	b.n	8000aa2 <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 8000a3e:	2315      	movs	r3, #21
 8000a40:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 8000a42:	2319      	movs	r3, #25
 8000a44:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 8000a46:	231a      	movs	r3, #26
 8000a48:	757b      	strb	r3, [r7, #21]
      break;
 8000a4a:	e02a      	b.n	8000aa2 <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 8000a4c:	231b      	movs	r3, #27
 8000a4e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 8000a50:	231f      	movs	r3, #31
 8000a52:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8000a54:	2320      	movs	r3, #32
 8000a56:	757b      	strb	r3, [r7, #21]
      break;
 8000a58:	e023      	b.n	8000aa2 <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 8000a5a:	2321      	movs	r3, #33	; 0x21
 8000a5c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 8000a5e:	2325      	movs	r3, #37	; 0x25
 8000a60:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 8000a62:	2326      	movs	r3, #38	; 0x26
 8000a64:	757b      	strb	r3, [r7, #21]
      break;
 8000a66:	e01c      	b.n	8000aa2 <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 8000a68:	2327      	movs	r3, #39	; 0x27
 8000a6a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8000a6c:	232b      	movs	r3, #43	; 0x2b
 8000a6e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8000a70:	232c      	movs	r3, #44	; 0x2c
 8000a72:	757b      	strb	r3, [r7, #21]
      break;
 8000a74:	e015      	b.n	8000aa2 <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 8000a76:	232d      	movs	r3, #45	; 0x2d
 8000a78:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 8000a7a:	2331      	movs	r3, #49	; 0x31
 8000a7c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 8000a7e:	2332      	movs	r3, #50	; 0x32
 8000a80:	757b      	strb	r3, [r7, #21]
      break;
 8000a82:	e00e      	b.n	8000aa2 <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8000a84:	2333      	movs	r3, #51	; 0x33
 8000a86:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 8000a88:	2337      	movs	r3, #55	; 0x37
 8000a8a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8000a8c:	2338      	movs	r3, #56	; 0x38
 8000a8e:	757b      	strb	r3, [r7, #21]
      break;
 8000a90:	e007      	b.n	8000aa2 <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 8000a92:	2339      	movs	r3, #57	; 0x39
 8000a94:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 8000a96:	233d      	movs	r3, #61	; 0x3d
 8000a98:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 8000a9a:	233e      	movs	r3, #62	; 0x3e
 8000a9c:	757b      	strb	r3, [r7, #21]
      break;
 8000a9e:	e000      	b.n	8000aa2 <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 8000aa0:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000aa2:	89fb      	ldrh	r3, [r7, #14]
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	7dfa      	ldrb	r2, [r7, #23]
 8000aa8:	4611      	mov	r1, r2
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f002 fa6e 	bl	8002f8c <TS_IO_Read>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8000ab4:	7d3b      	ldrb	r3, [r7, #20]
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	119b      	asrs	r3, r3, #6
 8000aba:	f003 0203 	and.w	r2, r3, #3
 8000abe:	6a3b      	ldr	r3, [r7, #32]
 8000ac0:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8000ac2:	89fb      	ldrh	r3, [r7, #14]
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	7dba      	ldrb	r2, [r7, #22]
 8000ac8:	4611      	mov	r1, r2
 8000aca:	4618      	mov	r0, r3
 8000acc:	f002 fa5e 	bl	8002f8c <TS_IO_Read>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8000ad4:	7d3b      	ldrb	r3, [r7, #20]
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	461a      	mov	r2, r3
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8000ade:	89fb      	ldrh	r3, [r7, #14]
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	7d7a      	ldrb	r2, [r7, #21]
 8000ae4:	4611      	mov	r1, r2
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f002 fa50 	bl	8002f8c <TS_IO_Read>
 8000aec:	4603      	mov	r3, r0
 8000aee:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8000af0:	7d3b      	ldrb	r3, [r7, #20]
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	111b      	asrs	r3, r3, #4
 8000af6:	f003 0204 	and.w	r2, r3, #4
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 8000afe:	bf00      	nop
 8000b00:	3718      	adds	r7, #24
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	200003c8 	.word	0x200003c8

08000b0c <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8000b10:	4b03      	ldr	r3, [pc, #12]	; (8000b20 <ft5336_Get_I2C_InitializedStatus+0x14>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	200003c8 	.word	0x200003c8

08000b24 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8000b28:	f7ff fff0 	bl	8000b0c <ft5336_Get_I2C_InitializedStatus>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d104      	bne.n	8000b3c <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8000b32:	f002 fa07 	bl	8002f44 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8000b36:	4b02      	ldr	r3, [pc, #8]	; (8000b40 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8000b38:	2201      	movs	r2, #1
 8000b3a:	701a      	strb	r2, [r3, #0]
  }
}
 8000b3c:	bf00      	nop
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	200003c8 	.word	0x200003c8

08000b44 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b085      	sub	sp, #20
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8000b52:	68fb      	ldr	r3, [r7, #12]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3714      	adds	r7, #20
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000b64:	f3bf 8f4f 	dsb	sy
}
 8000b68:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b6a:	f3bf 8f6f 	isb	sy
}
 8000b6e:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000b70:	4b0d      	ldr	r3, [pc, #52]	; (8000ba8 <SCB_EnableICache+0x48>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000b78:	f3bf 8f4f 	dsb	sy
}
 8000b7c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b7e:	f3bf 8f6f 	isb	sy
}
 8000b82:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000b84:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <SCB_EnableICache+0x48>)
 8000b86:	695b      	ldr	r3, [r3, #20]
 8000b88:	4a07      	ldr	r2, [pc, #28]	; (8000ba8 <SCB_EnableICache+0x48>)
 8000b8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b8e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b90:	f3bf 8f4f 	dsb	sy
}
 8000b94:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b96:	f3bf 8f6f 	isb	sy
}
 8000b9a:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b085      	sub	sp, #20
 8000bb0:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000bb2:	4b1f      	ldr	r3, [pc, #124]	; (8000c30 <SCB_EnableDCache+0x84>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000bba:	f3bf 8f4f 	dsb	sy
}
 8000bbe:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000bc0:	4b1b      	ldr	r3, [pc, #108]	; (8000c30 <SCB_EnableDCache+0x84>)
 8000bc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000bc6:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	0b5b      	lsrs	r3, r3, #13
 8000bcc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000bd0:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	08db      	lsrs	r3, r3, #3
 8000bd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000bda:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	015a      	lsls	r2, r3, #5
 8000be0:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000be4:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000be6:	68ba      	ldr	r2, [r7, #8]
 8000be8:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000bea:	4911      	ldr	r1, [pc, #68]	; (8000c30 <SCB_EnableDCache+0x84>)
 8000bec:	4313      	orrs	r3, r2
 8000bee:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	1e5a      	subs	r2, r3, #1
 8000bf6:	60ba      	str	r2, [r7, #8]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d1ef      	bne.n	8000bdc <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	1e5a      	subs	r2, r3, #1
 8000c00:	60fa      	str	r2, [r7, #12]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d1e5      	bne.n	8000bd2 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000c06:	f3bf 8f4f 	dsb	sy
}
 8000c0a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000c0c:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <SCB_EnableDCache+0x84>)
 8000c0e:	695b      	ldr	r3, [r3, #20]
 8000c10:	4a07      	ldr	r2, [pc, #28]	; (8000c30 <SCB_EnableDCache+0x84>)
 8000c12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c16:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c18:	f3bf 8f4f 	dsb	sy
}
 8000c1c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c1e:	f3bf 8f6f 	isb	sy
}
 8000c22:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000c24:	bf00      	nop
 8000c26:	3714      	adds	r7, #20
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <InCircle>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t InCircle(Point xy, Point Circle, uint8_t Radius) {
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60f8      	str	r0, [r7, #12]
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	4613      	mov	r3, r2
 8000c40:	71fb      	strb	r3, [r7, #7]
	return ((xy.X - Circle.X) * (xy.X - Circle.X)
 8000c42:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000c46:	461a      	mov	r2, r3
 8000c48:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000c52:	4611      	mov	r1, r2
 8000c54:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000c58:	1a8a      	subs	r2, r1, r2
 8000c5a:	fb03 f202 	mul.w	r2, r3, r2
			+ (xy.Y - Circle.Y) * (xy.Y - Circle.Y)) <= Radius*Radius;
 8000c5e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c62:	4619      	mov	r1, r3
 8000c64:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000c68:	1acb      	subs	r3, r1, r3
 8000c6a:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8000c6e:	4608      	mov	r0, r1
 8000c70:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8000c74:	1a41      	subs	r1, r0, r1
 8000c76:	fb01 f303 	mul.w	r3, r1, r3
 8000c7a:	441a      	add	r2, r3
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	79f9      	ldrb	r1, [r7, #7]
 8000c80:	fb01 f303 	mul.w	r3, r1, r3
 8000c84:	429a      	cmp	r2, r3
 8000c86:	bfd4      	ite	le
 8000c88:	2301      	movle	r3, #1
 8000c8a:	2300      	movgt	r3, #0
 8000c8c:	b2db      	uxtb	r3, r3
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3714      	adds	r7, #20
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
	...

08000c9c <DrawVPButton>:

void DrawVPButton(){
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
	BSP_LCD_SetFont(&Font24);
 8000ca0:	4813      	ldr	r0, [pc, #76]	; (8000cf0 <DrawVPButton+0x54>)
 8000ca2:	f002 fee1 	bl	8003a68 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000ca6:	f04f 30ff 	mov.w	r0, #4294967295
 8000caa:	f002 feab 	bl	8003a04 <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle( VOLUME_PLUS_X, VOLUME_PLUS_Y, R/2);
 8000cae:	f002 fe11 	bl	80038d4 <BSP_LCD_GetXSize>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	b29b      	uxth	r3, r3
 8000cb6:	3b28      	subs	r3, #40	; 0x28
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	220f      	movs	r2, #15
 8000cbc:	2132      	movs	r1, #50	; 0x32
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f003 f9b0 	bl	8004024 <BSP_LCD_FillCircle>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000cc4:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000cc8:	f002 fe9c 	bl	8003a04 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8000ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd0:	f002 feb0 	bl	8003a34 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayChar(VOLUME_PLUS_X-15, VOLUME_PLUS_Y-11, (char)"+");
 8000cd4:	f002 fdfe 	bl	80038d4 <BSP_LCD_GetXSize>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	b29b      	uxth	r3, r3
 8000cdc:	3b37      	subs	r3, #55	; 0x37
 8000cde:	b29b      	uxth	r3, r3
 8000ce0:	4a04      	ldr	r2, [pc, #16]	; (8000cf4 <DrawVPButton+0x58>)
 8000ce2:	b2d2      	uxtb	r2, r2
 8000ce4:	2127      	movs	r1, #39	; 0x27
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f002 ff00 	bl	8003aec <BSP_LCD_DisplayChar>
}
 8000cec:	bf00      	nop
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	2000008c 	.word	0x2000008c
 8000cf4:	0801538c 	.word	0x0801538c

08000cf8 <DrawVMButton>:

void DrawVMButton(){
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
	BSP_LCD_SetFont(&Font24);
 8000cfc:	4813      	ldr	r0, [pc, #76]	; (8000d4c <DrawVMButton+0x54>)
 8000cfe:	f002 feb3 	bl	8003a68 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000d02:	f04f 30ff 	mov.w	r0, #4294967295
 8000d06:	f002 fe7d 	bl	8003a04 <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle( VOLUME_MOINS_X, VOLUME_MOINS_Y, R/2);
 8000d0a:	f002 fde3 	bl	80038d4 <BSP_LCD_GetXSize>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	b29b      	uxth	r3, r3
 8000d12:	3b28      	subs	r3, #40	; 0x28
 8000d14:	b29b      	uxth	r3, r3
 8000d16:	220f      	movs	r2, #15
 8000d18:	2164      	movs	r1, #100	; 0x64
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f003 f982 	bl	8004024 <BSP_LCD_FillCircle>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000d20:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000d24:	f002 fe6e 	bl	8003a04 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8000d28:	f04f 30ff 	mov.w	r0, #4294967295
 8000d2c:	f002 fe82 	bl	8003a34 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayChar(VOLUME_MOINS_X-15, VOLUME_MOINS_Y-11, (char)"-");
 8000d30:	f002 fdd0 	bl	80038d4 <BSP_LCD_GetXSize>
 8000d34:	4603      	mov	r3, r0
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	3b37      	subs	r3, #55	; 0x37
 8000d3a:	b29b      	uxth	r3, r3
 8000d3c:	4a04      	ldr	r2, [pc, #16]	; (8000d50 <DrawVMButton+0x58>)
 8000d3e:	b2d2      	uxtb	r2, r2
 8000d40:	2159      	movs	r1, #89	; 0x59
 8000d42:	4618      	mov	r0, r3
 8000d44:	f002 fed2 	bl	8003aec <BSP_LCD_DisplayChar>
}
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	2000008c 	.word	0x2000008c
 8000d50:	08015390 	.word	0x08015390

08000d54 <DrawPlayButton>:

void DrawPlayButton(uint32_t Color){
 8000d54:	b590      	push	{r4, r7, lr}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
	BSP_LCD_SetFont(&Font24);
 8000d5c:	4821      	ldr	r0, [pc, #132]	; (8000de4 <DrawPlayButton+0x90>)
 8000d5e:	f002 fe83 	bl	8003a68 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(Color);
 8000d62:	6878      	ldr	r0, [r7, #4]
 8000d64:	f002 fe4e 	bl	8003a04 <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle( PLAY_BUTTON_X, PLAY_BUTTON_Y, R);
 8000d68:	f002 fdb4 	bl	80038d4 <BSP_LCD_GetXSize>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	085b      	lsrs	r3, r3, #1
 8000d70:	b29c      	uxth	r4, r3
 8000d72:	f002 fdc3 	bl	80038fc <BSP_LCD_GetYSize>
 8000d76:	4603      	mov	r3, r0
 8000d78:	089b      	lsrs	r3, r3, #2
 8000d7a:	b29b      	uxth	r3, r3
 8000d7c:	221e      	movs	r2, #30
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4620      	mov	r0, r4
 8000d82:	f003 f94f 	bl	8004024 <BSP_LCD_FillCircle>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000d86:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000d8a:	f002 fe3b 	bl	8003a04 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(Color);
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f002 fe50 	bl	8003a34 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayChar(PLAY_BUTTON_X-15, PLAY_BUTTON_Y-11, (char)'|');
 8000d94:	f002 fd9e 	bl	80038d4 <BSP_LCD_GetXSize>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	085b      	lsrs	r3, r3, #1
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	3b0f      	subs	r3, #15
 8000da0:	b29c      	uxth	r4, r3
 8000da2:	f002 fdab 	bl	80038fc <BSP_LCD_GetYSize>
 8000da6:	4603      	mov	r3, r0
 8000da8:	089b      	lsrs	r3, r3, #2
 8000daa:	b29b      	uxth	r3, r3
 8000dac:	3b0b      	subs	r3, #11
 8000dae:	b29b      	uxth	r3, r3
 8000db0:	227c      	movs	r2, #124	; 0x7c
 8000db2:	4619      	mov	r1, r3
 8000db4:	4620      	mov	r0, r4
 8000db6:	f002 fe99 	bl	8003aec <BSP_LCD_DisplayChar>
	BSP_LCD_DisplayChar(PLAY_BUTTON_X, PLAY_BUTTON_Y-11, (char)'>');
 8000dba:	f002 fd8b 	bl	80038d4 <BSP_LCD_GetXSize>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	085b      	lsrs	r3, r3, #1
 8000dc2:	b29c      	uxth	r4, r3
 8000dc4:	f002 fd9a 	bl	80038fc <BSP_LCD_GetYSize>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	089b      	lsrs	r3, r3, #2
 8000dcc:	b29b      	uxth	r3, r3
 8000dce:	3b0b      	subs	r3, #11
 8000dd0:	b29b      	uxth	r3, r3
 8000dd2:	223e      	movs	r2, #62	; 0x3e
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4620      	mov	r0, r4
 8000dd8:	f002 fe88 	bl	8003aec <BSP_LCD_DisplayChar>
}
 8000ddc:	bf00      	nop
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd90      	pop	{r4, r7, pc}
 8000de4:	2000008c 	.word	0x2000008c

08000de8 <DrawPauseButton>:

void DrawPauseButton(uint32_t Color){
 8000de8:	b590      	push	{r4, r7, lr}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
	BSP_LCD_SetFont(&Font24);
 8000df0:	4826      	ldr	r0, [pc, #152]	; (8000e8c <DrawPauseButton+0xa4>)
 8000df2:	f002 fe39 	bl	8003a68 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(Color);
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f002 fe04 	bl	8003a04 <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle( PAUSE_BUTTON_X, PAUSE_BUTTON_Y, R);
 8000dfc:	f002 fd6a 	bl	80038d4 <BSP_LCD_GetXSize>
 8000e00:	4603      	mov	r3, r0
 8000e02:	085b      	lsrs	r3, r3, #1
 8000e04:	b29c      	uxth	r4, r3
 8000e06:	f002 fd79 	bl	80038fc <BSP_LCD_GetYSize>
 8000e0a:	4602      	mov	r2, r0
 8000e0c:	4613      	mov	r3, r2
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	4413      	add	r3, r2
 8000e12:	089b      	lsrs	r3, r3, #2
 8000e14:	b29b      	uxth	r3, r3
 8000e16:	221e      	movs	r2, #30
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4620      	mov	r0, r4
 8000e1c:	f003 f902 	bl	8004024 <BSP_LCD_FillCircle>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000e20:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000e24:	f002 fdee 	bl	8003a04 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(Color);
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	f002 fe03 	bl	8003a34 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayChar(PAUSE_BUTTON_X-15, PAUSE_BUTTON_Y-11, (char)'|');
 8000e2e:	f002 fd51 	bl	80038d4 <BSP_LCD_GetXSize>
 8000e32:	4603      	mov	r3, r0
 8000e34:	085b      	lsrs	r3, r3, #1
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	3b0f      	subs	r3, #15
 8000e3a:	b29c      	uxth	r4, r3
 8000e3c:	f002 fd5e 	bl	80038fc <BSP_LCD_GetYSize>
 8000e40:	4602      	mov	r2, r0
 8000e42:	4613      	mov	r3, r2
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	4413      	add	r3, r2
 8000e48:	089b      	lsrs	r3, r3, #2
 8000e4a:	b29b      	uxth	r3, r3
 8000e4c:	3b0b      	subs	r3, #11
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	227c      	movs	r2, #124	; 0x7c
 8000e52:	4619      	mov	r1, r3
 8000e54:	4620      	mov	r0, r4
 8000e56:	f002 fe49 	bl	8003aec <BSP_LCD_DisplayChar>
	BSP_LCD_DisplayChar(PAUSE_BUTTON_X, PAUSE_BUTTON_Y-11, (char)'|');
 8000e5a:	f002 fd3b 	bl	80038d4 <BSP_LCD_GetXSize>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	085b      	lsrs	r3, r3, #1
 8000e62:	b29c      	uxth	r4, r3
 8000e64:	f002 fd4a 	bl	80038fc <BSP_LCD_GetYSize>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	4413      	add	r3, r2
 8000e70:	089b      	lsrs	r3, r3, #2
 8000e72:	b29b      	uxth	r3, r3
 8000e74:	3b0b      	subs	r3, #11
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	227c      	movs	r2, #124	; 0x7c
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4620      	mov	r0, r4
 8000e7e:	f002 fe35 	bl	8003aec <BSP_LCD_DisplayChar>
}
 8000e82:	bf00      	nop
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd90      	pop	{r4, r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	2000008c 	.word	0x2000008c

08000e90 <DrawONButton>:

void DrawONButton(){
 8000e90:	b598      	push	{r3, r4, r7, lr}
 8000e92:	af00      	add	r7, sp, #0
	BSP_LCD_Clear(LCD_COLOR_BLACK);
 8000e94:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000e98:	f002 fe00 	bl	8003a9c <BSP_LCD_Clear>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea0:	f002 fdb0 	bl	8003a04 <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle(ON_X, ON_Y, R);
 8000ea4:	f002 fd16 	bl	80038d4 <BSP_LCD_GetXSize>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	085b      	lsrs	r3, r3, #1
 8000eac:	b29c      	uxth	r4, r3
 8000eae:	f002 fd25 	bl	80038fc <BSP_LCD_GetYSize>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	085b      	lsrs	r3, r3, #1
 8000eb6:	b29b      	uxth	r3, r3
 8000eb8:	221e      	movs	r2, #30
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	f003 f8b1 	bl	8004024 <BSP_LCD_FillCircle>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000ec2:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000ec6:	f002 fd9d 	bl	8003a04 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8000eca:	f04f 30ff 	mov.w	r0, #4294967295
 8000ece:	f002 fdb1 	bl	8003a34 <BSP_LCD_SetBackColor>
	BSP_LCD_SetFont(&Font24);
 8000ed2:	4815      	ldr	r0, [pc, #84]	; (8000f28 <DrawONButton+0x98>)
 8000ed4:	f002 fdc8 	bl	8003a68 <BSP_LCD_SetFont>
	BSP_LCD_DisplayChar(ON_X-14, ON_Y-11,(char)'O');
 8000ed8:	f002 fcfc 	bl	80038d4 <BSP_LCD_GetXSize>
 8000edc:	4603      	mov	r3, r0
 8000ede:	085b      	lsrs	r3, r3, #1
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	3b0e      	subs	r3, #14
 8000ee4:	b29c      	uxth	r4, r3
 8000ee6:	f002 fd09 	bl	80038fc <BSP_LCD_GetYSize>
 8000eea:	4603      	mov	r3, r0
 8000eec:	085b      	lsrs	r3, r3, #1
 8000eee:	b29b      	uxth	r3, r3
 8000ef0:	3b0b      	subs	r3, #11
 8000ef2:	b29b      	uxth	r3, r3
 8000ef4:	224f      	movs	r2, #79	; 0x4f
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4620      	mov	r0, r4
 8000efa:	f002 fdf7 	bl	8003aec <BSP_LCD_DisplayChar>
	BSP_LCD_DisplayChar(ON_X+1, ON_Y-11,(char)'N');
 8000efe:	f002 fce9 	bl	80038d4 <BSP_LCD_GetXSize>
 8000f02:	4603      	mov	r3, r0
 8000f04:	085b      	lsrs	r3, r3, #1
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	3301      	adds	r3, #1
 8000f0a:	b29c      	uxth	r4, r3
 8000f0c:	f002 fcf6 	bl	80038fc <BSP_LCD_GetYSize>
 8000f10:	4603      	mov	r3, r0
 8000f12:	085b      	lsrs	r3, r3, #1
 8000f14:	b29b      	uxth	r3, r3
 8000f16:	3b0b      	subs	r3, #11
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	224e      	movs	r2, #78	; 0x4e
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4620      	mov	r0, r4
 8000f20:	f002 fde4 	bl	8003aec <BSP_LCD_DisplayChar>
}
 8000f24:	bf00      	nop
 8000f26:	bd98      	pop	{r3, r4, r7, pc}
 8000f28:	2000008c 	.word	0x2000008c

08000f2c <DrawDebutButton>:


void DrawDebutButton(){
 8000f2c:	b598      	push	{r3, r4, r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
	BSP_LCD_SetFont(&Font24);
 8000f30:	4822      	ldr	r0, [pc, #136]	; (8000fbc <DrawDebutButton+0x90>)
 8000f32:	f002 fd99 	bl	8003a68 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8000f36:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8000f3a:	f002 fd63 	bl	8003a04 <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle( DEBUT_BUTTON_X, DEBUT_BUTTON_Y, R);
 8000f3e:	f002 fcc9 	bl	80038d4 <BSP_LCD_GetXSize>
 8000f42:	4603      	mov	r3, r0
 8000f44:	085b      	lsrs	r3, r3, #1
 8000f46:	b29c      	uxth	r4, r3
 8000f48:	f002 fcd8 	bl	80038fc <BSP_LCD_GetYSize>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	085b      	lsrs	r3, r3, #1
 8000f50:	b29b      	uxth	r3, r3
 8000f52:	221e      	movs	r2, #30
 8000f54:	4619      	mov	r1, r3
 8000f56:	4620      	mov	r0, r4
 8000f58:	f003 f864 	bl	8004024 <BSP_LCD_FillCircle>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000f5c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000f60:	f002 fd50 	bl	8003a04 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_GREEN);
 8000f64:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8000f68:	f002 fd64 	bl	8003a34 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayChar(DEBUT_BUTTON_X-15, DEBUT_BUTTON_Y-11, (char)'<');
 8000f6c:	f002 fcb2 	bl	80038d4 <BSP_LCD_GetXSize>
 8000f70:	4603      	mov	r3, r0
 8000f72:	085b      	lsrs	r3, r3, #1
 8000f74:	b29b      	uxth	r3, r3
 8000f76:	3b0f      	subs	r3, #15
 8000f78:	b29c      	uxth	r4, r3
 8000f7a:	f002 fcbf 	bl	80038fc <BSP_LCD_GetYSize>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	085b      	lsrs	r3, r3, #1
 8000f82:	b29b      	uxth	r3, r3
 8000f84:	3b0b      	subs	r3, #11
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	223c      	movs	r2, #60	; 0x3c
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4620      	mov	r0, r4
 8000f8e:	f002 fdad 	bl	8003aec <BSP_LCD_DisplayChar>
	BSP_LCD_DisplayChar(DEBUT_BUTTON_X-8, DEBUT_BUTTON_Y-11, (char)'-');
 8000f92:	f002 fc9f 	bl	80038d4 <BSP_LCD_GetXSize>
 8000f96:	4603      	mov	r3, r0
 8000f98:	085b      	lsrs	r3, r3, #1
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	3b08      	subs	r3, #8
 8000f9e:	b29c      	uxth	r4, r3
 8000fa0:	f002 fcac 	bl	80038fc <BSP_LCD_GetYSize>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	085b      	lsrs	r3, r3, #1
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	3b0b      	subs	r3, #11
 8000fac:	b29b      	uxth	r3, r3
 8000fae:	222d      	movs	r2, #45	; 0x2d
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4620      	mov	r0, r4
 8000fb4:	f002 fd9a 	bl	8003aec <BSP_LCD_DisplayChar>
}
 8000fb8:	bf00      	nop
 8000fba:	bd98      	pop	{r3, r4, r7, pc}
 8000fbc:	2000008c 	.word	0x2000008c

08000fc0 <DrawAvanceButton>:

void DrawAvanceButton(){
 8000fc0:	b598      	push	{r3, r4, r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
	BSP_LCD_SetFont(&Font24);
 8000fc4:	4827      	ldr	r0, [pc, #156]	; (8001064 <DrawAvanceButton+0xa4>)
 8000fc6:	f002 fd4f 	bl	8003a68 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 8000fca:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 8000fce:	f002 fd19 	bl	8003a04 <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle( AVANCE_BUTTON_X, AVANCE_BUTTON_Y, R);
 8000fd2:	f002 fc7f 	bl	80038d4 <BSP_LCD_GetXSize>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	4613      	mov	r3, r2
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	4413      	add	r3, r2
 8000fde:	089b      	lsrs	r3, r3, #2
 8000fe0:	b29c      	uxth	r4, r3
 8000fe2:	f002 fc8b 	bl	80038fc <BSP_LCD_GetYSize>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	085b      	lsrs	r3, r3, #1
 8000fea:	b29b      	uxth	r3, r3
 8000fec:	221e      	movs	r2, #30
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4620      	mov	r0, r4
 8000ff2:	f003 f817 	bl	8004024 <BSP_LCD_FillCircle>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000ff6:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000ffa:	f002 fd03 	bl	8003a04 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_YELLOW);
 8000ffe:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 8001002:	f002 fd17 	bl	8003a34 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayChar(AVANCE_BUTTON_X-14, AVANCE_BUTTON_Y-11, (char)'>');
 8001006:	f002 fc65 	bl	80038d4 <BSP_LCD_GetXSize>
 800100a:	4602      	mov	r2, r0
 800100c:	4613      	mov	r3, r2
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	4413      	add	r3, r2
 8001012:	089b      	lsrs	r3, r3, #2
 8001014:	b29b      	uxth	r3, r3
 8001016:	3b0e      	subs	r3, #14
 8001018:	b29c      	uxth	r4, r3
 800101a:	f002 fc6f 	bl	80038fc <BSP_LCD_GetYSize>
 800101e:	4603      	mov	r3, r0
 8001020:	085b      	lsrs	r3, r3, #1
 8001022:	b29b      	uxth	r3, r3
 8001024:	3b0b      	subs	r3, #11
 8001026:	b29b      	uxth	r3, r3
 8001028:	223e      	movs	r2, #62	; 0x3e
 800102a:	4619      	mov	r1, r3
 800102c:	4620      	mov	r0, r4
 800102e:	f002 fd5d 	bl	8003aec <BSP_LCD_DisplayChar>
	BSP_LCD_DisplayChar(AVANCE_BUTTON_X-6, AVANCE_BUTTON_Y-11, (char)'>');
 8001032:	f002 fc4f 	bl	80038d4 <BSP_LCD_GetXSize>
 8001036:	4602      	mov	r2, r0
 8001038:	4613      	mov	r3, r2
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	4413      	add	r3, r2
 800103e:	089b      	lsrs	r3, r3, #2
 8001040:	b29b      	uxth	r3, r3
 8001042:	3b06      	subs	r3, #6
 8001044:	b29c      	uxth	r4, r3
 8001046:	f002 fc59 	bl	80038fc <BSP_LCD_GetYSize>
 800104a:	4603      	mov	r3, r0
 800104c:	085b      	lsrs	r3, r3, #1
 800104e:	b29b      	uxth	r3, r3
 8001050:	3b0b      	subs	r3, #11
 8001052:	b29b      	uxth	r3, r3
 8001054:	223e      	movs	r2, #62	; 0x3e
 8001056:	4619      	mov	r1, r3
 8001058:	4620      	mov	r0, r4
 800105a:	f002 fd47 	bl	8003aec <BSP_LCD_DisplayChar>
}
 800105e:	bf00      	nop
 8001060:	bd98      	pop	{r3, r4, r7, pc}
 8001062:	bf00      	nop
 8001064:	2000008c 	.word	0x2000008c

08001068 <DrawReculeButton>:

void DrawReculeButton(){
 8001068:	b598      	push	{r3, r4, r7, lr}
 800106a:	af00      	add	r7, sp, #0
	BSP_LCD_SetFont(&Font24);
 800106c:	4822      	ldr	r0, [pc, #136]	; (80010f8 <DrawReculeButton+0x90>)
 800106e:	f002 fcfb 	bl	8003a68 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 8001072:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 8001076:	f002 fcc5 	bl	8003a04 <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle( RECULE_BUTTON_X, RECULE_BUTTON_Y, R);
 800107a:	f002 fc2b 	bl	80038d4 <BSP_LCD_GetXSize>
 800107e:	4603      	mov	r3, r0
 8001080:	089b      	lsrs	r3, r3, #2
 8001082:	b29c      	uxth	r4, r3
 8001084:	f002 fc3a 	bl	80038fc <BSP_LCD_GetYSize>
 8001088:	4603      	mov	r3, r0
 800108a:	085b      	lsrs	r3, r3, #1
 800108c:	b29b      	uxth	r3, r3
 800108e:	221e      	movs	r2, #30
 8001090:	4619      	mov	r1, r3
 8001092:	4620      	mov	r0, r4
 8001094:	f002 ffc6 	bl	8004024 <BSP_LCD_FillCircle>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001098:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800109c:	f002 fcb2 	bl	8003a04 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_YELLOW);
 80010a0:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 80010a4:	f002 fcc6 	bl	8003a34 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayChar(RECULE_BUTTON_X-14, RECULE_BUTTON_Y-11, (char)'<');
 80010a8:	f002 fc14 	bl	80038d4 <BSP_LCD_GetXSize>
 80010ac:	4603      	mov	r3, r0
 80010ae:	089b      	lsrs	r3, r3, #2
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	3b0e      	subs	r3, #14
 80010b4:	b29c      	uxth	r4, r3
 80010b6:	f002 fc21 	bl	80038fc <BSP_LCD_GetYSize>
 80010ba:	4603      	mov	r3, r0
 80010bc:	085b      	lsrs	r3, r3, #1
 80010be:	b29b      	uxth	r3, r3
 80010c0:	3b0b      	subs	r3, #11
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	223c      	movs	r2, #60	; 0x3c
 80010c6:	4619      	mov	r1, r3
 80010c8:	4620      	mov	r0, r4
 80010ca:	f002 fd0f 	bl	8003aec <BSP_LCD_DisplayChar>
	BSP_LCD_DisplayChar(RECULE_BUTTON_X-6, RECULE_BUTTON_Y-11, (char)'<');
 80010ce:	f002 fc01 	bl	80038d4 <BSP_LCD_GetXSize>
 80010d2:	4603      	mov	r3, r0
 80010d4:	089b      	lsrs	r3, r3, #2
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	3b06      	subs	r3, #6
 80010da:	b29c      	uxth	r4, r3
 80010dc:	f002 fc0e 	bl	80038fc <BSP_LCD_GetYSize>
 80010e0:	4603      	mov	r3, r0
 80010e2:	085b      	lsrs	r3, r3, #1
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	3b0b      	subs	r3, #11
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	223c      	movs	r2, #60	; 0x3c
 80010ec:	4619      	mov	r1, r3
 80010ee:	4620      	mov	r0, r4
 80010f0:	f002 fcfc 	bl	8003aec <BSP_LCD_DisplayChar>
}
 80010f4:	bf00      	nop
 80010f6:	bd98      	pop	{r3, r4, r7, pc}
 80010f8:	2000008c 	.word	0x2000008c

080010fc <DrawOFFButton>:

void DrawOFFButton(){
 80010fc:	b598      	push	{r3, r4, r7, lr}
 80010fe:	af00      	add	r7, sp, #0
	BSP_LCD_Clear(LCD_COLOR_BLACK);
 8001100:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001104:	f002 fcca 	bl	8003a9c <BSP_LCD_Clear>
	BSP_LCD_SetTextColor(LCD_COLOR_ORANGE);
 8001108:	4829      	ldr	r0, [pc, #164]	; (80011b0 <DrawOFFButton+0xb4>)
 800110a:	f002 fc7b 	bl	8003a04 <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle(OFF_X, OFF_Y, R/2);
 800110e:	f002 fbe1 	bl	80038d4 <BSP_LCD_GetXSize>
 8001112:	4603      	mov	r3, r0
 8001114:	b29b      	uxth	r3, r3
 8001116:	3b1e      	subs	r3, #30
 8001118:	b29c      	uxth	r4, r3
 800111a:	f002 fbef 	bl	80038fc <BSP_LCD_GetYSize>
 800111e:	4603      	mov	r3, r0
 8001120:	b29b      	uxth	r3, r3
 8001122:	3b1e      	subs	r3, #30
 8001124:	b29b      	uxth	r3, r3
 8001126:	220f      	movs	r2, #15
 8001128:	4619      	mov	r1, r3
 800112a:	4620      	mov	r0, r4
 800112c:	f002 ff7a 	bl	8004024 <BSP_LCD_FillCircle>
	BSP_LCD_SetBackColor(LCD_COLOR_ORANGE);
 8001130:	481f      	ldr	r0, [pc, #124]	; (80011b0 <DrawOFFButton+0xb4>)
 8001132:	f002 fc7f 	bl	8003a34 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001136:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800113a:	f002 fc63 	bl	8003a04 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font16);
 800113e:	481d      	ldr	r0, [pc, #116]	; (80011b4 <DrawOFFButton+0xb8>)
 8001140:	f002 fc92 	bl	8003a68 <BSP_LCD_SetFont>
	BSP_LCD_DisplayChar(OFF_X-14, OFF_Y-7,(char)'O');
 8001144:	f002 fbc6 	bl	80038d4 <BSP_LCD_GetXSize>
 8001148:	4603      	mov	r3, r0
 800114a:	b29b      	uxth	r3, r3
 800114c:	3b2c      	subs	r3, #44	; 0x2c
 800114e:	b29c      	uxth	r4, r3
 8001150:	f002 fbd4 	bl	80038fc <BSP_LCD_GetYSize>
 8001154:	4603      	mov	r3, r0
 8001156:	b29b      	uxth	r3, r3
 8001158:	3b25      	subs	r3, #37	; 0x25
 800115a:	b29b      	uxth	r3, r3
 800115c:	224f      	movs	r2, #79	; 0x4f
 800115e:	4619      	mov	r1, r3
 8001160:	4620      	mov	r0, r4
 8001162:	f002 fcc3 	bl	8003aec <BSP_LCD_DisplayChar>
	BSP_LCD_DisplayChar(OFF_X-4, OFF_Y-7,(char)'F');
 8001166:	f002 fbb5 	bl	80038d4 <BSP_LCD_GetXSize>
 800116a:	4603      	mov	r3, r0
 800116c:	b29b      	uxth	r3, r3
 800116e:	3b22      	subs	r3, #34	; 0x22
 8001170:	b29c      	uxth	r4, r3
 8001172:	f002 fbc3 	bl	80038fc <BSP_LCD_GetYSize>
 8001176:	4603      	mov	r3, r0
 8001178:	b29b      	uxth	r3, r3
 800117a:	3b25      	subs	r3, #37	; 0x25
 800117c:	b29b      	uxth	r3, r3
 800117e:	2246      	movs	r2, #70	; 0x46
 8001180:	4619      	mov	r1, r3
 8001182:	4620      	mov	r0, r4
 8001184:	f002 fcb2 	bl	8003aec <BSP_LCD_DisplayChar>
	BSP_LCD_DisplayChar(OFF_X+6, OFF_Y-7,(char)'F');
 8001188:	f002 fba4 	bl	80038d4 <BSP_LCD_GetXSize>
 800118c:	4603      	mov	r3, r0
 800118e:	b29b      	uxth	r3, r3
 8001190:	3b18      	subs	r3, #24
 8001192:	b29c      	uxth	r4, r3
 8001194:	f002 fbb2 	bl	80038fc <BSP_LCD_GetYSize>
 8001198:	4603      	mov	r3, r0
 800119a:	b29b      	uxth	r3, r3
 800119c:	3b25      	subs	r3, #37	; 0x25
 800119e:	b29b      	uxth	r3, r3
 80011a0:	2246      	movs	r2, #70	; 0x46
 80011a2:	4619      	mov	r1, r3
 80011a4:	4620      	mov	r0, r4
 80011a6:	f002 fca1 	bl	8003aec <BSP_LCD_DisplayChar>
}
 80011aa:	bf00      	nop
 80011ac:	bd98      	pop	{r3, r4, r7, pc}
 80011ae:	bf00      	nop
 80011b0:	ffffa500 	.word	0xffffa500
 80011b4:	20000094 	.word	0x20000094

080011b8 <SD_Init>:

void SD_Init() {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
	if (f_mount(&SDFatFS, (TCHAR const*) SDPath, 0) != FR_OK) {
 80011bc:	2200      	movs	r2, #0
 80011be:	4909      	ldr	r1, [pc, #36]	; (80011e4 <SD_Init+0x2c>)
 80011c0:	4809      	ldr	r0, [pc, #36]	; (80011e8 <SD_Init+0x30>)
 80011c2:	f00f fd31 	bl	8010c28 <f_mount>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d002      	beq.n	80011d2 <SD_Init+0x1a>
		Error_Handler();
 80011cc:	f001 fcea 	bl	8002ba4 <Error_Handler>
	} else {
		BSP_LCD_DisplayStringAt(0, 40, (uint8_t*) "SD - Mount Ok", CENTER_MODE);
	}
}
 80011d0:	e005      	b.n	80011de <SD_Init+0x26>
		BSP_LCD_DisplayStringAt(0, 40, (uint8_t*) "SD - Mount Ok", CENTER_MODE);
 80011d2:	2301      	movs	r3, #1
 80011d4:	4a05      	ldr	r2, [pc, #20]	; (80011ec <SD_Init+0x34>)
 80011d6:	2128      	movs	r1, #40	; 0x28
 80011d8:	2000      	movs	r0, #0
 80011da:	f002 fccb 	bl	8003b74 <BSP_LCD_DisplayStringAt>
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000ec8 	.word	0x20000ec8
 80011e8:	20000ecc 	.word	0x20000ecc
 80011ec:	08015394 	.word	0x08015394

080011f0 <Audio_Init>:


void Audio_Init(uint32_t freq) {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af02      	add	r7, sp, #8
 80011f6:	6078      	str	r0, [r7, #4]
	static int init=0;
	if (BSP_AUDIO_IN_OUT_Init(INPUT_DEVICE_INPUT_LINE_1,
 80011f8:	2302      	movs	r3, #2
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	2310      	movs	r3, #16
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	2102      	movs	r1, #2
 8001202:	f44f 7040 	mov.w	r0, #768	; 0x300
 8001206:	f002 f8d3 	bl	80033b0 <BSP_AUDIO_IN_OUT_Init>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d109      	bne.n	8001224 <Audio_Init+0x34>
	OUTPUT_DEVICE_HEADPHONE, freq,
	Audio_bit_res,
	Audio_chan) == AUDIO_OK) {
		if (init==0){
 8001210:	4b18      	ldr	r3, [pc, #96]	; (8001274 <Audio_Init+0x84>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d105      	bne.n	8001224 <Audio_Init+0x34>
		BSP_LCD_DisplayStringAt(0, 20, (uint8_t*) "Init Audio - OK",
 8001218:	2301      	movs	r3, #1
 800121a:	4a17      	ldr	r2, [pc, #92]	; (8001278 <Audio_Init+0x88>)
 800121c:	2114      	movs	r1, #20
 800121e:	2000      	movs	r0, #0
 8001220:	f002 fca8 	bl	8003b74 <BSP_LCD_DisplayStringAt>
		}
	}

	/* Initialize SDRAM buffers */
//	memset((uint16_t*) AUDIO_BUFFER_IN, 0, AUDIO_BLOCK_SIZE * 2);
	memset((uint16_t*) AUDIO_BUFFER_OUT, 0, AUDIO_BLOCK_SIZE * 2);
 8001224:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001228:	2100      	movs	r1, #0
 800122a:	4814      	ldr	r0, [pc, #80]	; (800127c <Audio_Init+0x8c>)
 800122c:	f013 fc2c 	bl	8014a88 <memset>
//	memset((uint16_t*) AUDIO_BUFFER_READ, 0, AUDIO_BLOCK_SIZE * 2);

	/* Start Recording */
//	BSP_AUDIO_OUT_SetVolume(20);
	/* Start Playback */
	BSP_AUDIO_OUT_SetAudioFrameSlot(CODEC_AUDIOFRAME_SLOT_02);
 8001230:	2005      	movs	r0, #5
 8001232:	f001 ff2b 	bl	800308c <BSP_AUDIO_OUT_SetAudioFrameSlot>
	if (BSP_AUDIO_OUT_Play((uint16_t*) AUDIO_BUFFER_OUT,
 8001236:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800123a:	4810      	ldr	r0, [pc, #64]	; (800127c <Audio_Init+0x8c>)
 800123c:	f001 fed0 	bl	8002fe0 <BSP_AUDIO_OUT_Play>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d112      	bne.n	800126c <Audio_Init+0x7c>
	AUDIO_BLOCK_SIZE * 2) == AUDIO_OK) {

		if (init==0){
 8001246:	4b0b      	ldr	r3, [pc, #44]	; (8001274 <Audio_Init+0x84>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d10e      	bne.n	800126c <Audio_Init+0x7c>
		sprintf(text,"Aud_freq= %u",(int)freq);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	461a      	mov	r2, r3
 8001252:	490b      	ldr	r1, [pc, #44]	; (8001280 <Audio_Init+0x90>)
 8001254:	480b      	ldr	r0, [pc, #44]	; (8001284 <Audio_Init+0x94>)
 8001256:	f013 fc1f 	bl	8014a98 <siprintf>
		BSP_LCD_DisplayStringAt(0, 30, (uint8_t*)text,
 800125a:	2301      	movs	r3, #1
 800125c:	4a09      	ldr	r2, [pc, #36]	; (8001284 <Audio_Init+0x94>)
 800125e:	211e      	movs	r1, #30
 8001260:	2000      	movs	r0, #0
 8001262:	f002 fc87 	bl	8003b74 <BSP_LCD_DisplayStringAt>
				CENTER_MODE);
		init=1;
 8001266:	4b03      	ldr	r3, [pc, #12]	; (8001274 <Audio_Init+0x84>)
 8001268:	2201      	movs	r2, #1
 800126a:	601a      	str	r2, [r3, #0]
		}
	}

}
 800126c:	bf00      	nop
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	20000994 	.word	0x20000994
 8001278:	080153a4 	.word	0x080153a4
 800127c:	c007fc00 	.word	0xc007fc00
 8001280:	080153b4 	.word	0x080153b4
 8001284:	20000964 	.word	0x20000964

08001288 <LCD_Init>:



void LCD_Init() {
 8001288:	b598      	push	{r3, r4, r7, lr}
 800128a:	af00      	add	r7, sp, #0
	BSP_LCD_Init();
 800128c:	f002 fab2 	bl	80037f4 <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8001290:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8001294:	2000      	movs	r0, #0
 8001296:	f002 fb45 	bl	8003924 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_LayerDefaultInit(1,
	LCD_FB_START_ADDRESS + BSP_LCD_GetXSize() * BSP_LCD_GetYSize() * 4);
 800129a:	f002 fb1b 	bl	80038d4 <BSP_LCD_GetXSize>
 800129e:	4604      	mov	r4, r0
 80012a0:	f002 fb2c 	bl	80038fc <BSP_LCD_GetYSize>
 80012a4:	4603      	mov	r3, r0
 80012a6:	fb04 f303 	mul.w	r3, r4, r3
 80012aa:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
	BSP_LCD_LayerDefaultInit(1,
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	4619      	mov	r1, r3
 80012b2:	2001      	movs	r0, #1
 80012b4:	f002 fb36 	bl	8003924 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_DisplayOn();
 80012b8:	f002 ff54 	bl	8004164 <BSP_LCD_DisplayOn>
	BSP_LCD_SelectLayer(1);
 80012bc:	2001      	movs	r0, #1
 80012be:	f002 fb91 	bl	80039e4 <BSP_LCD_SelectLayer>
	BSP_LCD_Clear(LCD_COLOR_BLACK);
 80012c2:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80012c6:	f002 fbe9 	bl	8003a9c <BSP_LCD_Clear>
	BSP_LCD_SetFont(&Font12);
 80012ca:	481f      	ldr	r0, [pc, #124]	; (8001348 <LCD_Init+0xc0>)
 80012cc:	f002 fbcc 	bl	8003a68 <BSP_LCD_SetFont>
	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 80012d0:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80012d4:	f002 fbae 	bl	8003a34 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_LIGHTBLUE);
 80012d8:	481c      	ldr	r0, [pc, #112]	; (800134c <LCD_Init+0xc4>)
 80012da:	f002 fb93 	bl	8003a04 <BSP_LCD_SetTextColor>
	if (BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize()) != TS_OK) {
 80012de:	f002 faf9 	bl	80038d4 <BSP_LCD_GetXSize>
 80012e2:	4603      	mov	r3, r0
 80012e4:	b29c      	uxth	r4, r3
 80012e6:	f002 fb09 	bl	80038fc <BSP_LCD_GetYSize>
 80012ea:	4603      	mov	r3, r0
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	4619      	mov	r1, r3
 80012f0:	4620      	mov	r0, r4
 80012f2:	f003 fb05 	bl	8004900 <BSP_TS_Init>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d01d      	beq.n	8001338 <LCD_Init+0xb0>
		BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 80012fc:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001300:	f002 fb98 	bl	8003a34 <BSP_LCD_SetBackColor>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001304:	4812      	ldr	r0, [pc, #72]	; (8001350 <LCD_Init+0xc8>)
 8001306:	f002 fb7d 	bl	8003a04 <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 95, (uint8_t*) "ERROR",
 800130a:	f002 faf7 	bl	80038fc <BSP_LCD_GetYSize>
 800130e:	4603      	mov	r3, r0
 8001310:	b29b      	uxth	r3, r3
 8001312:	3b5f      	subs	r3, #95	; 0x5f
 8001314:	b299      	uxth	r1, r3
 8001316:	2301      	movs	r3, #1
 8001318:	4a0e      	ldr	r2, [pc, #56]	; (8001354 <LCD_Init+0xcc>)
 800131a:	2000      	movs	r0, #0
 800131c:	f002 fc2a 	bl	8003b74 <BSP_LCD_DisplayStringAt>
				CENTER_MODE);
		BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80,
 8001320:	f002 faec 	bl	80038fc <BSP_LCD_GetYSize>
 8001324:	4603      	mov	r3, r0
 8001326:	b29b      	uxth	r3, r3
 8001328:	3b50      	subs	r3, #80	; 0x50
 800132a:	b299      	uxth	r1, r3
 800132c:	2301      	movs	r3, #1
 800132e:	4a0a      	ldr	r2, [pc, #40]	; (8001358 <LCD_Init+0xd0>)
 8001330:	2000      	movs	r0, #0
 8001332:	f002 fc1f 	bl	8003b74 <BSP_LCD_DisplayStringAt>
				(uint8_t*) "Touchscreen cannot be initialized", CENTER_MODE);
	} else {
		BSP_LCD_DisplayStringAt(0, 10, (uint8_t*) "Init Ecran - OK",
				CENTER_MODE);
	}
}
 8001336:	e005      	b.n	8001344 <LCD_Init+0xbc>
		BSP_LCD_DisplayStringAt(0, 10, (uint8_t*) "Init Ecran - OK",
 8001338:	2301      	movs	r3, #1
 800133a:	4a08      	ldr	r2, [pc, #32]	; (800135c <LCD_Init+0xd4>)
 800133c:	210a      	movs	r1, #10
 800133e:	2000      	movs	r0, #0
 8001340:	f002 fc18 	bl	8003b74 <BSP_LCD_DisplayStringAt>
}
 8001344:	bf00      	nop
 8001346:	bd98      	pop	{r3, r4, r7, pc}
 8001348:	2000009c 	.word	0x2000009c
 800134c:	ff8080ff 	.word	0xff8080ff
 8001350:	ffff0000 	.word	0xffff0000
 8001354:	080153c4 	.word	0x080153c4
 8001358:	080153cc 	.word	0x080153cc
 800135c:	080153f0 	.word	0x080153f0

08001360 <read_header>:

void read_header(){
 8001360:	b580      	push	{r7, lr}
 8001362:	b08a      	sub	sp, #40	; 0x28
 8001364:	af00      	add	r7, sp, #0

	uint32_t data=0;
 8001366:	2300      	movs	r3, #0
 8001368:	613b      	str	r3, [r7, #16]
	float nombre_secondes;
	float minutes;
	float secondes;

	//Lecture du nombre d'octets
	f_lseek(&SDFile,04);
 800136a:	2104      	movs	r1, #4
 800136c:	4839      	ldr	r0, [pc, #228]	; (8001454 <read_header+0xf4>)
 800136e:	f010 f8aa 	bl	80114c6 <f_lseek>
	f_read(&SDFile, &data, 4, (void*) &bytesread);
 8001372:	f107 030c 	add.w	r3, r7, #12
 8001376:	f107 0110 	add.w	r1, r7, #16
 800137a:	2204      	movs	r2, #4
 800137c:	4835      	ldr	r0, [pc, #212]	; (8001454 <read_header+0xf4>)
 800137e:	f00f fe7c 	bl	801107a <f_read>
//	taille_fichier=((data|MASK_32_TO_8_0)<<24)|((data|MASK_32_TO_8_1)<<8)|((data|MASK_32_TO_8_2)>>8)|((data|MASK_32_TO_8_3)>>24);
	taille_octet=data;
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	627b      	str	r3, [r7, #36]	; 0x24
	nb_bl=data/512;
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	0a5b      	lsrs	r3, r3, #9
 800138a:	623b      	str	r3, [r7, #32]
	NB_Bloc=(uint32_t)nb_bl;
 800138c:	4a32      	ldr	r2, [pc, #200]	; (8001458 <read_header+0xf8>)
 800138e:	6a3b      	ldr	r3, [r7, #32]
 8001390:	6013      	str	r3, [r2, #0]
	data=0;
 8001392:	2300      	movs	r3, #0
 8001394:	613b      	str	r3, [r7, #16]

	//Lecture de la fréquence d'échantillonnage
	f_lseek(&SDFile,24);
 8001396:	2118      	movs	r1, #24
 8001398:	482e      	ldr	r0, [pc, #184]	; (8001454 <read_header+0xf4>)
 800139a:	f010 f894 	bl	80114c6 <f_lseek>
	f_read(&SDFile, &data, 4 , (void*) &bytesread);
 800139e:	f107 030c 	add.w	r3, r7, #12
 80013a2:	f107 0110 	add.w	r1, r7, #16
 80013a6:	2204      	movs	r2, #4
 80013a8:	482a      	ldr	r0, [pc, #168]	; (8001454 <read_header+0xf4>)
 80013aa:	f00f fe66 	bl	801107a <f_read>
//	freq=((data2|MASK_32_TO_8_0)<<24)|((data2|MASK_32_TO_8_1)<<8)|((data2|MASK_32_TO_8_2)>>8)|((data2|MASK_32_TO_8_3)>>24);
	freq_audio=data;
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	4a2a      	ldr	r2, [pc, #168]	; (800145c <read_header+0xfc>)
 80013b2:	6013      	str	r3, [r2, #0]

	//Nombre d'octets par secondes
	f_lseek(&SDFile,28);
 80013b4:	211c      	movs	r1, #28
 80013b6:	4827      	ldr	r0, [pc, #156]	; (8001454 <read_header+0xf4>)
 80013b8:	f010 f885 	bl	80114c6 <f_lseek>
	f_read(&SDFile, (uint8_t*)&data, 4, (void*) &bytesread);
 80013bc:	f107 030c 	add.w	r3, r7, #12
 80013c0:	f107 0110 	add.w	r1, r7, #16
 80013c4:	2204      	movs	r2, #4
 80013c6:	4823      	ldr	r0, [pc, #140]	; (8001454 <read_header+0xf4>)
 80013c8:	f00f fe57 	bl	801107a <f_read>
	Nb_octets_seconde=data;
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	4a24      	ldr	r2, [pc, #144]	; (8001460 <read_header+0x100>)
 80013d0:	6013      	str	r3, [r2, #0]


	nombre_secondes=taille_octet/Nb_octets_seconde;
 80013d2:	4b23      	ldr	r3, [pc, #140]	; (8001460 <read_header+0x100>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80013dc:	ee07 3a90 	vmov	s15, r3
 80013e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013e4:	edc7 7a07 	vstr	s15, [r7, #28]
	minutes=nombre_secondes/60;
 80013e8:	ed97 7a07 	vldr	s14, [r7, #28]
 80013ec:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8001464 <read_header+0x104>
 80013f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013f4:	edc7 7a06 	vstr	s15, [r7, #24]
	secondes=((uint32_t)nombre_secondes)%60;
 80013f8:	edd7 7a07 	vldr	s15, [r7, #28]
 80013fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001400:	ee17 1a90 	vmov	r1, s15
 8001404:	4b18      	ldr	r3, [pc, #96]	; (8001468 <read_header+0x108>)
 8001406:	fba3 2301 	umull	r2, r3, r3, r1
 800140a:	095a      	lsrs	r2, r3, #5
 800140c:	4613      	mov	r3, r2
 800140e:	011b      	lsls	r3, r3, #4
 8001410:	1a9b      	subs	r3, r3, r2
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	1aca      	subs	r2, r1, r3
 8001416:	ee07 2a90 	vmov	s15, r2
 800141a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800141e:	edc7 7a05 	vstr	s15, [r7, #20]
	sprintf(duree_total,"%u:%2u",(uint8_t)minutes,(uint8_t)secondes);
 8001422:	edd7 7a06 	vldr	s15, [r7, #24]
 8001426:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800142a:	edc7 7a01 	vstr	s15, [r7, #4]
 800142e:	793b      	ldrb	r3, [r7, #4]
 8001430:	b2db      	uxtb	r3, r3
 8001432:	461a      	mov	r2, r3
 8001434:	edd7 7a05 	vldr	s15, [r7, #20]
 8001438:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800143c:	edc7 7a01 	vstr	s15, [r7, #4]
 8001440:	793b      	ldrb	r3, [r7, #4]
 8001442:	b2db      	uxtb	r3, r3
 8001444:	4909      	ldr	r1, [pc, #36]	; (800146c <read_header+0x10c>)
 8001446:	480a      	ldr	r0, [pc, #40]	; (8001470 <read_header+0x110>)
 8001448:	f013 fb26 	bl	8014a98 <siprintf>



	}
 800144c:	bf00      	nop
 800144e:	3728      	adds	r7, #40	; 0x28
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20001100 	.word	0x20001100
 8001458:	20000958 	.word	0x20000958
 800145c:	20000960 	.word	0x20000960
 8001460:	20000028 	.word	0x20000028
 8001464:	42700000 	.word	0x42700000
 8001468:	88888889 	.word	0x88888889
 800146c:	08015400 	.word	0x08015400
 8001470:	20000984 	.word	0x20000984

08001474 <Charge_Wave>:

void Charge_Wave(uint8_t action){
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	71fb      	strb	r3, [r7, #7]

	if (action==1){
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d112      	bne.n	80014aa <Charge_Wave+0x36>
		if (indice<MAX_MUSIQUE-1)
 8001484:	4b25      	ldr	r3, [pc, #148]	; (800151c <Charge_Wave+0xa8>)
 8001486:	f993 3000 	ldrsb.w	r3, [r3]
 800148a:	2b04      	cmp	r3, #4
 800148c:	dc09      	bgt.n	80014a2 <Charge_Wave+0x2e>
			indice++;
 800148e:	4b23      	ldr	r3, [pc, #140]	; (800151c <Charge_Wave+0xa8>)
 8001490:	f993 3000 	ldrsb.w	r3, [r3]
 8001494:	b2db      	uxtb	r3, r3
 8001496:	3301      	adds	r3, #1
 8001498:	b2db      	uxtb	r3, r3
 800149a:	b25a      	sxtb	r2, r3
 800149c:	4b1f      	ldr	r3, [pc, #124]	; (800151c <Charge_Wave+0xa8>)
 800149e:	701a      	strb	r2, [r3, #0]
 80014a0:	e018      	b.n	80014d4 <Charge_Wave+0x60>
		else
			indice=5;
 80014a2:	4b1e      	ldr	r3, [pc, #120]	; (800151c <Charge_Wave+0xa8>)
 80014a4:	2205      	movs	r2, #5
 80014a6:	701a      	strb	r2, [r3, #0]
 80014a8:	e014      	b.n	80014d4 <Charge_Wave+0x60>
	}
	else if (action==0){
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d111      	bne.n	80014d4 <Charge_Wave+0x60>
		if (indice>0)
 80014b0:	4b1a      	ldr	r3, [pc, #104]	; (800151c <Charge_Wave+0xa8>)
 80014b2:	f993 3000 	ldrsb.w	r3, [r3]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	dd09      	ble.n	80014ce <Charge_Wave+0x5a>
			indice--;
 80014ba:	4b18      	ldr	r3, [pc, #96]	; (800151c <Charge_Wave+0xa8>)
 80014bc:	f993 3000 	ldrsb.w	r3, [r3]
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	3b01      	subs	r3, #1
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	b25a      	sxtb	r2, r3
 80014c8:	4b14      	ldr	r3, [pc, #80]	; (800151c <Charge_Wave+0xa8>)
 80014ca:	701a      	strb	r2, [r3, #0]
 80014cc:	e002      	b.n	80014d4 <Charge_Wave+0x60>
		else
			indice=0;
 80014ce:	4b13      	ldr	r3, [pc, #76]	; (800151c <Charge_Wave+0xa8>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	701a      	strb	r2, [r3, #0]
	}
	f_close(&SDFile);
 80014d4:	4812      	ldr	r0, [pc, #72]	; (8001520 <Charge_Wave+0xac>)
 80014d6:	f00f ffc7 	bl	8011468 <f_close>
	f_open(&SDFile, musique[indice], FA_READ);
 80014da:	4b10      	ldr	r3, [pc, #64]	; (800151c <Charge_Wave+0xa8>)
 80014dc:	f993 3000 	ldrsb.w	r3, [r3]
 80014e0:	461a      	mov	r2, r3
 80014e2:	4613      	mov	r3, r2
 80014e4:	011b      	lsls	r3, r3, #4
 80014e6:	1a9b      	subs	r3, r3, r2
 80014e8:	4a0e      	ldr	r2, [pc, #56]	; (8001524 <Charge_Wave+0xb0>)
 80014ea:	4413      	add	r3, r2
 80014ec:	2201      	movs	r2, #1
 80014ee:	4619      	mov	r1, r3
 80014f0:	480b      	ldr	r0, [pc, #44]	; (8001520 <Charge_Wave+0xac>)
 80014f2:	f00f fbfd 	bl	8010cf0 <f_open>
	read_header();
 80014f6:	f7ff ff33 	bl	8001360 <read_header>
	Audio_Init(freq_audio);
 80014fa:	4b0b      	ldr	r3, [pc, #44]	; (8001528 <Charge_Wave+0xb4>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff fe76 	bl	80011f0 <Audio_Init>
	f_lseek(&SDFile, 44);
 8001504:	212c      	movs	r1, #44	; 0x2c
 8001506:	4806      	ldr	r0, [pc, #24]	; (8001520 <Charge_Wave+0xac>)
 8001508:	f00f ffdd 	bl	80114c6 <f_lseek>
	Bloc_Cursor=0;
 800150c:	4b07      	ldr	r3, [pc, #28]	; (800152c <Charge_Wave+0xb8>)
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]

}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	2000002c 	.word	0x2000002c
 8001520:	20001100 	.word	0x20001100
 8001524:	20000030 	.word	0x20000030
 8001528:	20000960 	.word	0x20000960
 800152c:	2000095c 	.word	0x2000095c

08001530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001530:	b5b0      	push	{r4, r5, r7, lr}
 8001532:	b09a      	sub	sp, #104	; 0x68
 8001534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8001536:	f7ff fb13 	bl	8000b60 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800153a:	f7ff fb37 	bl	8000bac <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800153e:	f005 fef4 	bl	800732a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001542:	f000 f877 	bl	8001634 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001546:	f000 f8e5 	bl	8001714 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800154a:	f000 fc23 	bl	8001d94 <MX_GPIO_Init>
  MX_DMA_Init();
 800154e:	f000 fb63 	bl	8001c18 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 8001552:	f000 fb11 	bl	8001b78 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8001556:	f00d fb69 	bl	800ec2c <MX_FATFS_Init>
  MX_FMC_Init();
 800155a:	f000 fb93 	bl	8001c84 <MX_FMC_Init>
  MX_LTDC_Init();
 800155e:	f000 f9e1 	bl	8001924 <MX_LTDC_Init>
  MX_USART1_UART_Init();
 8001562:	f000 fb29 	bl	8001bb8 <MX_USART1_UART_Init>
  MX_DMA2D_Init();
 8001566:	f000 f9ab 	bl	80018c0 <MX_DMA2D_Init>
  MX_SAI2_Init();
 800156a:	f000 fa5d 	bl	8001a28 <MX_SAI2_Init>
  MX_ADC1_Init();
 800156e:	f000 f903 	bl	8001778 <MX_ADC1_Init>
  MX_ADC3_Init();
 8001572:	f000 f953 	bl	800181c <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */
	LCD_Init();
 8001576:	f7ff fe87 	bl	8001288 <LCD_Init>
	Audio_Init(Audio_freq);
 800157a:	f64b 3080 	movw	r0, #48000	; 0xbb80
 800157e:	f7ff fe37 	bl	80011f0 <Audio_Init>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of WakeUp */
  osMessageQDef(WakeUp, 1, uint8_t);
 8001582:	4b24      	ldr	r3, [pc, #144]	; (8001614 <main+0xe4>)
 8001584:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8001588:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800158a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  WakeUpHandle = osMessageCreate(osMessageQ(WakeUp), NULL);
 800158e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001592:	2100      	movs	r1, #0
 8001594:	4618      	mov	r0, r3
 8001596:	f010 fc06 	bl	8011da6 <osMessageCreate>
 800159a:	4603      	mov	r3, r0
 800159c:	4a1e      	ldr	r2, [pc, #120]	; (8001618 <main+0xe8>)
 800159e:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Affichage */
  osThreadDef(Affichage, Affichage_Ecran, osPriorityIdle, 0, 2048);
 80015a0:	4b1e      	ldr	r3, [pc, #120]	; (800161c <main+0xec>)
 80015a2:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80015a6:	461d      	mov	r5, r3
 80015a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  AffichageHandle = osThreadCreate(osThread(Affichage), NULL);
 80015b4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80015b8:	2100      	movs	r1, #0
 80015ba:	4618      	mov	r0, r3
 80015bc:	f010 faca 	bl	8011b54 <osThreadCreate>
 80015c0:	4603      	mov	r3, r0
 80015c2:	4a17      	ldr	r2, [pc, #92]	; (8001620 <main+0xf0>)
 80015c4:	6013      	str	r3, [r2, #0]

  /* definition and creation of SD */
  osThreadDef(SD, StartSD, osPriorityHigh, 0, 512);
 80015c6:	4b17      	ldr	r3, [pc, #92]	; (8001624 <main+0xf4>)
 80015c8:	f107 0420 	add.w	r4, r7, #32
 80015cc:	461d      	mov	r5, r3
 80015ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SDHandle = osThreadCreate(osThread(SD), NULL);
 80015da:	f107 0320 	add.w	r3, r7, #32
 80015de:	2100      	movs	r1, #0
 80015e0:	4618      	mov	r0, r3
 80015e2:	f010 fab7 	bl	8011b54 <osThreadCreate>
 80015e6:	4603      	mov	r3, r0
 80015e8:	4a0f      	ldr	r2, [pc, #60]	; (8001628 <main+0xf8>)
 80015ea:	6013      	str	r3, [r2, #0]

  /* definition and creation of Play_wav */
  osThreadDef(Play_wav, Play_Wave, osPriorityHigh, 0, 256);
 80015ec:	4b0f      	ldr	r3, [pc, #60]	; (800162c <main+0xfc>)
 80015ee:	1d3c      	adds	r4, r7, #4
 80015f0:	461d      	mov	r5, r3
 80015f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Play_wavHandle = osThreadCreate(osThread(Play_wav), NULL);
 80015fe:	1d3b      	adds	r3, r7, #4
 8001600:	2100      	movs	r1, #0
 8001602:	4618      	mov	r0, r3
 8001604:	f010 faa6 	bl	8011b54 <osThreadCreate>
 8001608:	4603      	mov	r3, r0
 800160a:	4a09      	ldr	r2, [pc, #36]	; (8001630 <main+0x100>)
 800160c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800160e:	f010 fa7e 	bl	8011b0e <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001612:	e7fe      	b.n	8001612 <main+0xe2>
 8001614:	08015408 	.word	0x08015408
 8001618:	20000950 	.word	0x20000950
 800161c:	08015418 	.word	0x08015418
 8001620:	20000944 	.word	0x20000944
 8001624:	08015434 	.word	0x08015434
 8001628:	20000948 	.word	0x20000948
 800162c:	08015450 	.word	0x08015450
 8001630:	2000094c 	.word	0x2000094c

08001634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b094      	sub	sp, #80	; 0x50
 8001638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800163a:	f107 0320 	add.w	r3, r7, #32
 800163e:	2230      	movs	r2, #48	; 0x30
 8001640:	2100      	movs	r1, #0
 8001642:	4618      	mov	r0, r3
 8001644:	f013 fa20 	bl	8014a88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001648:	f107 030c 	add.w	r3, r7, #12
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	609a      	str	r2, [r3, #8]
 8001654:	60da      	str	r2, [r3, #12]
 8001656:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001658:	f008 fcca 	bl	8009ff0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800165c:	4b2b      	ldr	r3, [pc, #172]	; (800170c <SystemClock_Config+0xd8>)
 800165e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001660:	4a2a      	ldr	r2, [pc, #168]	; (800170c <SystemClock_Config+0xd8>)
 8001662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001666:	6413      	str	r3, [r2, #64]	; 0x40
 8001668:	4b28      	ldr	r3, [pc, #160]	; (800170c <SystemClock_Config+0xd8>)
 800166a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001670:	60bb      	str	r3, [r7, #8]
 8001672:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001674:	4b26      	ldr	r3, [pc, #152]	; (8001710 <SystemClock_Config+0xdc>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a25      	ldr	r2, [pc, #148]	; (8001710 <SystemClock_Config+0xdc>)
 800167a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800167e:	6013      	str	r3, [r2, #0]
 8001680:	4b23      	ldr	r3, [pc, #140]	; (8001710 <SystemClock_Config+0xdc>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001688:	607b      	str	r3, [r7, #4]
 800168a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800168c:	2301      	movs	r3, #1
 800168e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001690:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001694:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001696:	2302      	movs	r3, #2
 8001698:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800169a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800169e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80016a0:	2319      	movs	r3, #25
 80016a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 80016a4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80016a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016aa:	2302      	movs	r3, #2
 80016ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80016ae:	2309      	movs	r3, #9
 80016b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016b2:	f107 0320 	add.w	r3, r7, #32
 80016b6:	4618      	mov	r0, r3
 80016b8:	f008 fcfa 	bl	800a0b0 <HAL_RCC_OscConfig>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80016c2:	f001 fa6f 	bl	8002ba4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80016c6:	f008 fca3 	bl	800a010 <HAL_PWREx_EnableOverDrive>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80016d0:	f001 fa68 	bl	8002ba4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016d4:	230f      	movs	r3, #15
 80016d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016d8:	2302      	movs	r3, #2
 80016da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016dc:	2300      	movs	r3, #0
 80016de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80016e0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80016e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80016e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80016ec:	f107 030c 	add.w	r3, r7, #12
 80016f0:	2106      	movs	r1, #6
 80016f2:	4618      	mov	r0, r3
 80016f4:	f008 ff80 	bl	800a5f8 <HAL_RCC_ClockConfig>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80016fe:	f001 fa51 	bl	8002ba4 <Error_Handler>
  }
}
 8001702:	bf00      	nop
 8001704:	3750      	adds	r7, #80	; 0x50
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40023800 	.word	0x40023800
 8001710:	40007000 	.word	0x40007000

08001714 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b0a2      	sub	sp, #136	; 0x88
 8001718:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800171a:	1d3b      	adds	r3, r7, #4
 800171c:	2284      	movs	r2, #132	; 0x84
 800171e:	2100      	movs	r1, #0
 8001720:	4618      	mov	r0, r3
 8001722:	f013 f9b1 	bl	8014a88 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 8001726:	4b13      	ldr	r3, [pc, #76]	; (8001774 <PeriphCommonClock_Config+0x60>)
 8001728:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800172a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800172e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8001730:	2305      	movs	r3, #5
 8001732:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001734:	2302      	movs	r3, #2
 8001736:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001738:	2303      	movs	r3, #3
 800173a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800173c:	2301      	movs	r3, #1
 800173e:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001740:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001744:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8001746:	2300      	movs	r3, #0
 8001748:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800174a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800174e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8001752:	2300      	movs	r3, #0
 8001754:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001758:	1d3b      	adds	r3, r7, #4
 800175a:	4618      	mov	r0, r3
 800175c:	f009 f964 	bl	800aa28 <HAL_RCCEx_PeriphCLKConfig>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8001766:	f001 fa1d 	bl	8002ba4 <Error_Handler>
  }
}
 800176a:	bf00      	nop
 800176c:	3788      	adds	r7, #136	; 0x88
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	00b00008 	.word	0x00b00008

08001778 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800177e:	463b      	mov	r3, r7
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	605a      	str	r2, [r3, #4]
 8001786:	609a      	str	r2, [r3, #8]
 8001788:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800178a:	4b21      	ldr	r3, [pc, #132]	; (8001810 <MX_ADC1_Init+0x98>)
 800178c:	4a21      	ldr	r2, [pc, #132]	; (8001814 <MX_ADC1_Init+0x9c>)
 800178e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001790:	4b1f      	ldr	r3, [pc, #124]	; (8001810 <MX_ADC1_Init+0x98>)
 8001792:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001796:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001798:	4b1d      	ldr	r3, [pc, #116]	; (8001810 <MX_ADC1_Init+0x98>)
 800179a:	2200      	movs	r2, #0
 800179c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800179e:	4b1c      	ldr	r3, [pc, #112]	; (8001810 <MX_ADC1_Init+0x98>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80017a4:	4b1a      	ldr	r3, [pc, #104]	; (8001810 <MX_ADC1_Init+0x98>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017aa:	4b19      	ldr	r3, [pc, #100]	; (8001810 <MX_ADC1_Init+0x98>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017b2:	4b17      	ldr	r3, [pc, #92]	; (8001810 <MX_ADC1_Init+0x98>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017b8:	4b15      	ldr	r3, [pc, #84]	; (8001810 <MX_ADC1_Init+0x98>)
 80017ba:	4a17      	ldr	r2, [pc, #92]	; (8001818 <MX_ADC1_Init+0xa0>)
 80017bc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017be:	4b14      	ldr	r3, [pc, #80]	; (8001810 <MX_ADC1_Init+0x98>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80017c4:	4b12      	ldr	r3, [pc, #72]	; (8001810 <MX_ADC1_Init+0x98>)
 80017c6:	2201      	movs	r2, #1
 80017c8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80017ca:	4b11      	ldr	r3, [pc, #68]	; (8001810 <MX_ADC1_Init+0x98>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017d2:	4b0f      	ldr	r3, [pc, #60]	; (8001810 <MX_ADC1_Init+0x98>)
 80017d4:	2201      	movs	r2, #1
 80017d6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017d8:	480d      	ldr	r0, [pc, #52]	; (8001810 <MX_ADC1_Init+0x98>)
 80017da:	f005 fdf7 	bl	80073cc <HAL_ADC_Init>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80017e4:	f001 f9de 	bl	8002ba4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017ec:	2301      	movs	r3, #1
 80017ee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80017f0:	2300      	movs	r3, #0
 80017f2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017f4:	463b      	mov	r3, r7
 80017f6:	4619      	mov	r1, r3
 80017f8:	4805      	ldr	r0, [pc, #20]	; (8001810 <MX_ADC1_Init+0x98>)
 80017fa:	f005 fe2b 	bl	8007454 <HAL_ADC_ConfigChannel>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001804:	f001 f9ce 	bl	8002ba4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001808:	bf00      	nop
 800180a:	3710      	adds	r7, #16
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	200003d0 	.word	0x200003d0
 8001814:	40012000 	.word	0x40012000
 8001818:	0f000001 	.word	0x0f000001

0800181c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001822:	463b      	mov	r3, r7
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800182e:	4b21      	ldr	r3, [pc, #132]	; (80018b4 <MX_ADC3_Init+0x98>)
 8001830:	4a21      	ldr	r2, [pc, #132]	; (80018b8 <MX_ADC3_Init+0x9c>)
 8001832:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001834:	4b1f      	ldr	r3, [pc, #124]	; (80018b4 <MX_ADC3_Init+0x98>)
 8001836:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800183a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800183c:	4b1d      	ldr	r3, [pc, #116]	; (80018b4 <MX_ADC3_Init+0x98>)
 800183e:	2200      	movs	r2, #0
 8001840:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001842:	4b1c      	ldr	r3, [pc, #112]	; (80018b4 <MX_ADC3_Init+0x98>)
 8001844:	2200      	movs	r2, #0
 8001846:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001848:	4b1a      	ldr	r3, [pc, #104]	; (80018b4 <MX_ADC3_Init+0x98>)
 800184a:	2200      	movs	r2, #0
 800184c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800184e:	4b19      	ldr	r3, [pc, #100]	; (80018b4 <MX_ADC3_Init+0x98>)
 8001850:	2200      	movs	r2, #0
 8001852:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001856:	4b17      	ldr	r3, [pc, #92]	; (80018b4 <MX_ADC3_Init+0x98>)
 8001858:	2200      	movs	r2, #0
 800185a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800185c:	4b15      	ldr	r3, [pc, #84]	; (80018b4 <MX_ADC3_Init+0x98>)
 800185e:	4a17      	ldr	r2, [pc, #92]	; (80018bc <MX_ADC3_Init+0xa0>)
 8001860:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001862:	4b14      	ldr	r3, [pc, #80]	; (80018b4 <MX_ADC3_Init+0x98>)
 8001864:	2200      	movs	r2, #0
 8001866:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001868:	4b12      	ldr	r3, [pc, #72]	; (80018b4 <MX_ADC3_Init+0x98>)
 800186a:	2201      	movs	r2, #1
 800186c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800186e:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <MX_ADC3_Init+0x98>)
 8001870:	2200      	movs	r2, #0
 8001872:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001876:	4b0f      	ldr	r3, [pc, #60]	; (80018b4 <MX_ADC3_Init+0x98>)
 8001878:	2201      	movs	r2, #1
 800187a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800187c:	480d      	ldr	r0, [pc, #52]	; (80018b4 <MX_ADC3_Init+0x98>)
 800187e:	f005 fda5 	bl	80073cc <HAL_ADC_Init>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001888:	f001 f98c 	bl	8002ba4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800188c:	2306      	movs	r3, #6
 800188e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001890:	2301      	movs	r3, #1
 8001892:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001894:	2300      	movs	r3, #0
 8001896:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001898:	463b      	mov	r3, r7
 800189a:	4619      	mov	r1, r3
 800189c:	4805      	ldr	r0, [pc, #20]	; (80018b4 <MX_ADC3_Init+0x98>)
 800189e:	f005 fdd9 	bl	8007454 <HAL_ADC_ConfigChannel>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80018a8:	f001 f97c 	bl	8002ba4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80018ac:	bf00      	nop
 80018ae:	3710      	adds	r7, #16
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20000418 	.word	0x20000418
 80018b8:	40012200 	.word	0x40012200
 80018bc:	0f000001 	.word	0x0f000001

080018c0 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80018c4:	4b15      	ldr	r3, [pc, #84]	; (800191c <MX_DMA2D_Init+0x5c>)
 80018c6:	4a16      	ldr	r2, [pc, #88]	; (8001920 <MX_DMA2D_Init+0x60>)
 80018c8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80018ca:	4b14      	ldr	r3, [pc, #80]	; (800191c <MX_DMA2D_Init+0x5c>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80018d0:	4b12      	ldr	r3, [pc, #72]	; (800191c <MX_DMA2D_Init+0x5c>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80018d6:	4b11      	ldr	r3, [pc, #68]	; (800191c <MX_DMA2D_Init+0x5c>)
 80018d8:	2200      	movs	r2, #0
 80018da:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80018dc:	4b0f      	ldr	r3, [pc, #60]	; (800191c <MX_DMA2D_Init+0x5c>)
 80018de:	2200      	movs	r2, #0
 80018e0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80018e2:	4b0e      	ldr	r3, [pc, #56]	; (800191c <MX_DMA2D_Init+0x5c>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80018e8:	4b0c      	ldr	r3, [pc, #48]	; (800191c <MX_DMA2D_Init+0x5c>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80018ee:	4b0b      	ldr	r3, [pc, #44]	; (800191c <MX_DMA2D_Init+0x5c>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80018f4:	4809      	ldr	r0, [pc, #36]	; (800191c <MX_DMA2D_Init+0x5c>)
 80018f6:	f006 fce3 	bl	80082c0 <HAL_DMA2D_Init>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001900:	f001 f950 	bl	8002ba4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001904:	2101      	movs	r1, #1
 8001906:	4805      	ldr	r0, [pc, #20]	; (800191c <MX_DMA2D_Init+0x5c>)
 8001908:	f006 fe38 	bl	800857c <HAL_DMA2D_ConfigLayer>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001912:	f001 f947 	bl	8002ba4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	20000460 	.word	0x20000460
 8001920:	4002b000 	.word	0x4002b000

08001924 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b08e      	sub	sp, #56	; 0x38
 8001928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800192a:	1d3b      	adds	r3, r7, #4
 800192c:	2234      	movs	r2, #52	; 0x34
 800192e:	2100      	movs	r1, #0
 8001930:	4618      	mov	r0, r3
 8001932:	f013 f8a9 	bl	8014a88 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001936:	4b3a      	ldr	r3, [pc, #232]	; (8001a20 <MX_LTDC_Init+0xfc>)
 8001938:	4a3a      	ldr	r2, [pc, #232]	; (8001a24 <MX_LTDC_Init+0x100>)
 800193a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800193c:	4b38      	ldr	r3, [pc, #224]	; (8001a20 <MX_LTDC_Init+0xfc>)
 800193e:	2200      	movs	r2, #0
 8001940:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001942:	4b37      	ldr	r3, [pc, #220]	; (8001a20 <MX_LTDC_Init+0xfc>)
 8001944:	2200      	movs	r2, #0
 8001946:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001948:	4b35      	ldr	r3, [pc, #212]	; (8001a20 <MX_LTDC_Init+0xfc>)
 800194a:	2200      	movs	r2, #0
 800194c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800194e:	4b34      	ldr	r3, [pc, #208]	; (8001a20 <MX_LTDC_Init+0xfc>)
 8001950:	2200      	movs	r2, #0
 8001952:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8001954:	4b32      	ldr	r3, [pc, #200]	; (8001a20 <MX_LTDC_Init+0xfc>)
 8001956:	2228      	movs	r2, #40	; 0x28
 8001958:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 800195a:	4b31      	ldr	r3, [pc, #196]	; (8001a20 <MX_LTDC_Init+0xfc>)
 800195c:	2209      	movs	r2, #9
 800195e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8001960:	4b2f      	ldr	r3, [pc, #188]	; (8001a20 <MX_LTDC_Init+0xfc>)
 8001962:	2235      	movs	r2, #53	; 0x35
 8001964:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8001966:	4b2e      	ldr	r3, [pc, #184]	; (8001a20 <MX_LTDC_Init+0xfc>)
 8001968:	220b      	movs	r2, #11
 800196a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 800196c:	4b2c      	ldr	r3, [pc, #176]	; (8001a20 <MX_LTDC_Init+0xfc>)
 800196e:	f240 2215 	movw	r2, #533	; 0x215
 8001972:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001974:	4b2a      	ldr	r3, [pc, #168]	; (8001a20 <MX_LTDC_Init+0xfc>)
 8001976:	f240 121b 	movw	r2, #283	; 0x11b
 800197a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 800197c:	4b28      	ldr	r3, [pc, #160]	; (8001a20 <MX_LTDC_Init+0xfc>)
 800197e:	f240 2235 	movw	r2, #565	; 0x235
 8001982:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001984:	4b26      	ldr	r3, [pc, #152]	; (8001a20 <MX_LTDC_Init+0xfc>)
 8001986:	f240 121d 	movw	r2, #285	; 0x11d
 800198a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800198c:	4b24      	ldr	r3, [pc, #144]	; (8001a20 <MX_LTDC_Init+0xfc>)
 800198e:	2200      	movs	r2, #0
 8001990:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001994:	4b22      	ldr	r3, [pc, #136]	; (8001a20 <MX_LTDC_Init+0xfc>)
 8001996:	2200      	movs	r2, #0
 8001998:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800199c:	4b20      	ldr	r3, [pc, #128]	; (8001a20 <MX_LTDC_Init+0xfc>)
 800199e:	2200      	movs	r2, #0
 80019a0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80019a4:	481e      	ldr	r0, [pc, #120]	; (8001a20 <MX_LTDC_Init+0xfc>)
 80019a6:	f007 ffab 	bl	8009900 <HAL_LTDC_Init>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80019b0:	f001 f8f8 	bl	8002ba4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80019b4:	2300      	movs	r3, #0
 80019b6:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80019b8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80019bc:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80019be:	2300      	movs	r3, #0
 80019c0:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 80019c2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80019c6:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80019c8:	2302      	movs	r3, #2
 80019ca:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80019cc:	23ff      	movs	r3, #255	; 0xff
 80019ce:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80019d0:	2300      	movs	r3, #0
 80019d2:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80019d4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80019d8:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80019da:	2307      	movs	r3, #7
 80019dc:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 80019de:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80019e2:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 80019e4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80019e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 80019ea:	f44f 7388 	mov.w	r3, #272	; 0x110
 80019ee:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80019f0:	2300      	movs	r3, #0
 80019f2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80019f6:	2300      	movs	r3, #0
 80019f8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80019fc:	2300      	movs	r3, #0
 80019fe:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001a02:	1d3b      	adds	r3, r7, #4
 8001a04:	2200      	movs	r2, #0
 8001a06:	4619      	mov	r1, r3
 8001a08:	4805      	ldr	r0, [pc, #20]	; (8001a20 <MX_LTDC_Init+0xfc>)
 8001a0a:	f008 f90b 	bl	8009c24 <HAL_LTDC_ConfigLayer>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001a14:	f001 f8c6 	bl	8002ba4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001a18:	bf00      	nop
 8001a1a:	3738      	adds	r7, #56	; 0x38
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	200004a0 	.word	0x200004a0
 8001a24:	40016800 	.word	0x40016800

08001a28 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001a2c:	4b4e      	ldr	r3, [pc, #312]	; (8001b68 <MX_SAI2_Init+0x140>)
 8001a2e:	4a4f      	ldr	r2, [pc, #316]	; (8001b6c <MX_SAI2_Init+0x144>)
 8001a30:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001a32:	4b4d      	ldr	r3, [pc, #308]	; (8001b68 <MX_SAI2_Init+0x140>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001a38:	4b4b      	ldr	r3, [pc, #300]	; (8001b68 <MX_SAI2_Init+0x140>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8001a3e:	4b4a      	ldr	r3, [pc, #296]	; (8001b68 <MX_SAI2_Init+0x140>)
 8001a40:	2240      	movs	r2, #64	; 0x40
 8001a42:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001a44:	4b48      	ldr	r3, [pc, #288]	; (8001b68 <MX_SAI2_Init+0x140>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001a4a:	4b47      	ldr	r3, [pc, #284]	; (8001b68 <MX_SAI2_Init+0x140>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001a50:	4b45      	ldr	r3, [pc, #276]	; (8001b68 <MX_SAI2_Init+0x140>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001a56:	4b44      	ldr	r3, [pc, #272]	; (8001b68 <MX_SAI2_Init+0x140>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001a5c:	4b42      	ldr	r3, [pc, #264]	; (8001b68 <MX_SAI2_Init+0x140>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001a62:	4b41      	ldr	r3, [pc, #260]	; (8001b68 <MX_SAI2_Init+0x140>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8001a68:	4b3f      	ldr	r3, [pc, #252]	; (8001b68 <MX_SAI2_Init+0x140>)
 8001a6a:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001a6e:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001a70:	4b3d      	ldr	r3, [pc, #244]	; (8001b68 <MX_SAI2_Init+0x140>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001a76:	4b3c      	ldr	r3, [pc, #240]	; (8001b68 <MX_SAI2_Init+0x140>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001a7c:	4b3a      	ldr	r3, [pc, #232]	; (8001b68 <MX_SAI2_Init+0x140>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001a82:	4b39      	ldr	r3, [pc, #228]	; (8001b68 <MX_SAI2_Init+0x140>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001a88:	4b37      	ldr	r3, [pc, #220]	; (8001b68 <MX_SAI2_Init+0x140>)
 8001a8a:	2208      	movs	r2, #8
 8001a8c:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001a8e:	4b36      	ldr	r3, [pc, #216]	; (8001b68 <MX_SAI2_Init+0x140>)
 8001a90:	2201      	movs	r2, #1
 8001a92:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001a94:	4b34      	ldr	r3, [pc, #208]	; (8001b68 <MX_SAI2_Init+0x140>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001a9a:	4b33      	ldr	r3, [pc, #204]	; (8001b68 <MX_SAI2_Init+0x140>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001aa0:	4b31      	ldr	r3, [pc, #196]	; (8001b68 <MX_SAI2_Init+0x140>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001aa6:	4b30      	ldr	r3, [pc, #192]	; (8001b68 <MX_SAI2_Init+0x140>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001aac:	4b2e      	ldr	r3, [pc, #184]	; (8001b68 <MX_SAI2_Init+0x140>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8001ab2:	4b2d      	ldr	r3, [pc, #180]	; (8001b68 <MX_SAI2_Init+0x140>)
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001ab8:	4b2b      	ldr	r3, [pc, #172]	; (8001b68 <MX_SAI2_Init+0x140>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001abe:	482a      	ldr	r0, [pc, #168]	; (8001b68 <MX_SAI2_Init+0x140>)
 8001ac0:	f009 fdf2 	bl	800b6a8 <HAL_SAI_Init>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <MX_SAI2_Init+0xa6>
  {
    Error_Handler();
 8001aca:	f001 f86b 	bl	8002ba4 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001ace:	4b28      	ldr	r3, [pc, #160]	; (8001b70 <MX_SAI2_Init+0x148>)
 8001ad0:	4a28      	ldr	r2, [pc, #160]	; (8001b74 <MX_SAI2_Init+0x14c>)
 8001ad2:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001ad4:	4b26      	ldr	r3, [pc, #152]	; (8001b70 <MX_SAI2_Init+0x148>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001ada:	4b25      	ldr	r3, [pc, #148]	; (8001b70 <MX_SAI2_Init+0x148>)
 8001adc:	2203      	movs	r2, #3
 8001ade:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8001ae0:	4b23      	ldr	r3, [pc, #140]	; (8001b70 <MX_SAI2_Init+0x148>)
 8001ae2:	2240      	movs	r2, #64	; 0x40
 8001ae4:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001ae6:	4b22      	ldr	r3, [pc, #136]	; (8001b70 <MX_SAI2_Init+0x148>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001aec:	4b20      	ldr	r3, [pc, #128]	; (8001b70 <MX_SAI2_Init+0x148>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001af2:	4b1f      	ldr	r3, [pc, #124]	; (8001b70 <MX_SAI2_Init+0x148>)
 8001af4:	2201      	movs	r2, #1
 8001af6:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001af8:	4b1d      	ldr	r3, [pc, #116]	; (8001b70 <MX_SAI2_Init+0x148>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001afe:	4b1c      	ldr	r3, [pc, #112]	; (8001b70 <MX_SAI2_Init+0x148>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001b04:	4b1a      	ldr	r3, [pc, #104]	; (8001b70 <MX_SAI2_Init+0x148>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001b0a:	4b19      	ldr	r3, [pc, #100]	; (8001b70 <MX_SAI2_Init+0x148>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001b10:	4b17      	ldr	r3, [pc, #92]	; (8001b70 <MX_SAI2_Init+0x148>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001b16:	4b16      	ldr	r3, [pc, #88]	; (8001b70 <MX_SAI2_Init+0x148>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8001b1c:	4b14      	ldr	r3, [pc, #80]	; (8001b70 <MX_SAI2_Init+0x148>)
 8001b1e:	2208      	movs	r2, #8
 8001b20:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8001b22:	4b13      	ldr	r3, [pc, #76]	; (8001b70 <MX_SAI2_Init+0x148>)
 8001b24:	2201      	movs	r2, #1
 8001b26:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001b28:	4b11      	ldr	r3, [pc, #68]	; (8001b70 <MX_SAI2_Init+0x148>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001b2e:	4b10      	ldr	r3, [pc, #64]	; (8001b70 <MX_SAI2_Init+0x148>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001b34:	4b0e      	ldr	r3, [pc, #56]	; (8001b70 <MX_SAI2_Init+0x148>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001b3a:	4b0d      	ldr	r3, [pc, #52]	; (8001b70 <MX_SAI2_Init+0x148>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001b40:	4b0b      	ldr	r3, [pc, #44]	; (8001b70 <MX_SAI2_Init+0x148>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8001b46:	4b0a      	ldr	r3, [pc, #40]	; (8001b70 <MX_SAI2_Init+0x148>)
 8001b48:	2201      	movs	r2, #1
 8001b4a:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8001b4c:	4b08      	ldr	r3, [pc, #32]	; (8001b70 <MX_SAI2_Init+0x148>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001b52:	4807      	ldr	r0, [pc, #28]	; (8001b70 <MX_SAI2_Init+0x148>)
 8001b54:	f009 fda8 	bl	800b6a8 <HAL_SAI_Init>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <MX_SAI2_Init+0x13a>
  {
    Error_Handler();
 8001b5e:	f001 f821 	bl	8002ba4 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001b62:	bf00      	nop
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	20000548 	.word	0x20000548
 8001b6c:	40015c04 	.word	0x40015c04
 8001b70:	200005cc 	.word	0x200005cc
 8001b74:	40015c24 	.word	0x40015c24

08001b78 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001b7c:	4b0c      	ldr	r3, [pc, #48]	; (8001bb0 <MX_SDMMC1_SD_Init+0x38>)
 8001b7e:	4a0d      	ldr	r2, [pc, #52]	; (8001bb4 <MX_SDMMC1_SD_Init+0x3c>)
 8001b80:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001b82:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <MX_SDMMC1_SD_Init+0x38>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001b88:	4b09      	ldr	r3, [pc, #36]	; (8001bb0 <MX_SDMMC1_SD_Init+0x38>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001b8e:	4b08      	ldr	r3, [pc, #32]	; (8001bb0 <MX_SDMMC1_SD_Init+0x38>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001b94:	4b06      	ldr	r3, [pc, #24]	; (8001bb0 <MX_SDMMC1_SD_Init+0x38>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001b9a:	4b05      	ldr	r3, [pc, #20]	; (8001bb0 <MX_SDMMC1_SD_Init+0x38>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001ba0:	4b03      	ldr	r3, [pc, #12]	; (8001bb0 <MX_SDMMC1_SD_Init+0x38>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001ba6:	bf00      	nop
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	20000710 	.word	0x20000710
 8001bb4:	40012c00 	.word	0x40012c00

08001bb8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001bbc:	4b14      	ldr	r3, [pc, #80]	; (8001c10 <MX_USART1_UART_Init+0x58>)
 8001bbe:	4a15      	ldr	r2, [pc, #84]	; (8001c14 <MX_USART1_UART_Init+0x5c>)
 8001bc0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001bc2:	4b13      	ldr	r3, [pc, #76]	; (8001c10 <MX_USART1_UART_Init+0x58>)
 8001bc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bc8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bca:	4b11      	ldr	r3, [pc, #68]	; (8001c10 <MX_USART1_UART_Init+0x58>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001bd0:	4b0f      	ldr	r3, [pc, #60]	; (8001c10 <MX_USART1_UART_Init+0x58>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001bd6:	4b0e      	ldr	r3, [pc, #56]	; (8001c10 <MX_USART1_UART_Init+0x58>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bdc:	4b0c      	ldr	r3, [pc, #48]	; (8001c10 <MX_USART1_UART_Init+0x58>)
 8001bde:	220c      	movs	r2, #12
 8001be0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001be2:	4b0b      	ldr	r3, [pc, #44]	; (8001c10 <MX_USART1_UART_Init+0x58>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001be8:	4b09      	ldr	r3, [pc, #36]	; (8001c10 <MX_USART1_UART_Init+0x58>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bee:	4b08      	ldr	r3, [pc, #32]	; (8001c10 <MX_USART1_UART_Init+0x58>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bf4:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <MX_USART1_UART_Init+0x58>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bfa:	4805      	ldr	r0, [pc, #20]	; (8001c10 <MX_USART1_UART_Init+0x58>)
 8001bfc:	f00b fd90 	bl	800d720 <HAL_UART_Init>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001c06:	f000 ffcd 	bl	8002ba4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	20000854 	.word	0x20000854
 8001c14:	40011000 	.word	0x40011000

08001c18 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001c1e:	4b18      	ldr	r3, [pc, #96]	; (8001c80 <MX_DMA_Init+0x68>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	4a17      	ldr	r2, [pc, #92]	; (8001c80 <MX_DMA_Init+0x68>)
 8001c24:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c28:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2a:	4b15      	ldr	r3, [pc, #84]	; (8001c80 <MX_DMA_Init+0x68>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c32:	607b      	str	r3, [r7, #4]
 8001c34:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8001c36:	2200      	movs	r2, #0
 8001c38:	2105      	movs	r1, #5
 8001c3a:	203b      	movs	r0, #59	; 0x3b
 8001c3c:	f005 ff12 	bl	8007a64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001c40:	203b      	movs	r0, #59	; 0x3b
 8001c42:	f005 ff2b 	bl	8007a9c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8001c46:	2200      	movs	r2, #0
 8001c48:	2105      	movs	r1, #5
 8001c4a:	203c      	movs	r0, #60	; 0x3c
 8001c4c:	f005 ff0a 	bl	8007a64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8001c50:	203c      	movs	r0, #60	; 0x3c
 8001c52:	f005 ff23 	bl	8007a9c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8001c56:	2200      	movs	r2, #0
 8001c58:	2105      	movs	r1, #5
 8001c5a:	2045      	movs	r0, #69	; 0x45
 8001c5c:	f005 ff02 	bl	8007a64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001c60:	2045      	movs	r0, #69	; 0x45
 8001c62:	f005 ff1b 	bl	8007a9c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8001c66:	2200      	movs	r2, #0
 8001c68:	2105      	movs	r1, #5
 8001c6a:	2046      	movs	r0, #70	; 0x46
 8001c6c:	f005 fefa 	bl	8007a64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001c70:	2046      	movs	r0, #70	; 0x46
 8001c72:	f005 ff13 	bl	8007a9c <HAL_NVIC_EnableIRQ>

}
 8001c76:	bf00      	nop
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40023800 	.word	0x40023800

08001c84 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b088      	sub	sp, #32
 8001c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001c8a:	1d3b      	adds	r3, r7, #4
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	605a      	str	r2, [r3, #4]
 8001c92:	609a      	str	r2, [r3, #8]
 8001c94:	60da      	str	r2, [r3, #12]
 8001c96:	611a      	str	r2, [r3, #16]
 8001c98:	615a      	str	r2, [r3, #20]
 8001c9a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001c9c:	4b3a      	ldr	r3, [pc, #232]	; (8001d88 <MX_FMC_Init+0x104>)
 8001c9e:	4a3b      	ldr	r2, [pc, #236]	; (8001d8c <MX_FMC_Init+0x108>)
 8001ca0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001ca2:	4b39      	ldr	r3, [pc, #228]	; (8001d88 <MX_FMC_Init+0x104>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001ca8:	4b37      	ldr	r3, [pc, #220]	; (8001d88 <MX_FMC_Init+0x104>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001cae:	4b36      	ldr	r3, [pc, #216]	; (8001d88 <MX_FMC_Init+0x104>)
 8001cb0:	2204      	movs	r2, #4
 8001cb2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001cb4:	4b34      	ldr	r3, [pc, #208]	; (8001d88 <MX_FMC_Init+0x104>)
 8001cb6:	2210      	movs	r2, #16
 8001cb8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001cba:	4b33      	ldr	r3, [pc, #204]	; (8001d88 <MX_FMC_Init+0x104>)
 8001cbc:	2240      	movs	r2, #64	; 0x40
 8001cbe:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8001cc0:	4b31      	ldr	r3, [pc, #196]	; (8001d88 <MX_FMC_Init+0x104>)
 8001cc2:	2280      	movs	r2, #128	; 0x80
 8001cc4:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001cc6:	4b30      	ldr	r3, [pc, #192]	; (8001d88 <MX_FMC_Init+0x104>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8001ccc:	4b2e      	ldr	r3, [pc, #184]	; (8001d88 <MX_FMC_Init+0x104>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001cd2:	4b2d      	ldr	r3, [pc, #180]	; (8001d88 <MX_FMC_Init+0x104>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001cd8:	4b2b      	ldr	r3, [pc, #172]	; (8001d88 <MX_FMC_Init+0x104>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8001cde:	2310      	movs	r3, #16
 8001ce0:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8001ce2:	2310      	movs	r3, #16
 8001ce4:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8001ce6:	2310      	movs	r3, #16
 8001ce8:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8001cea:	2310      	movs	r3, #16
 8001cec:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8001cee:	2310      	movs	r3, #16
 8001cf0:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8001cf2:	2310      	movs	r3, #16
 8001cf4:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8001cf6:	2310      	movs	r3, #16
 8001cf8:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001cfa:	1d3b      	adds	r3, r7, #4
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4822      	ldr	r0, [pc, #136]	; (8001d88 <MX_FMC_Init+0x104>)
 8001d00:	f00b f99e 	bl	800d040 <HAL_SDRAM_Init>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8001d0a:	f000 ff4b 	bl	8002ba4 <Error_Handler>
  }

  /** Perform the SDRAM2 memory initialization sequence
  */
  hsdram2.Instance = FMC_SDRAM_DEVICE;
 8001d0e:	4b20      	ldr	r3, [pc, #128]	; (8001d90 <MX_FMC_Init+0x10c>)
 8001d10:	4a1e      	ldr	r2, [pc, #120]	; (8001d8c <MX_FMC_Init+0x108>)
 8001d12:	601a      	str	r2, [r3, #0]
  /* hsdram2.Init */
  hsdram2.Init.SDBank = FMC_SDRAM_BANK2;
 8001d14:	4b1e      	ldr	r3, [pc, #120]	; (8001d90 <MX_FMC_Init+0x10c>)
 8001d16:	2201      	movs	r2, #1
 8001d18:	605a      	str	r2, [r3, #4]
  hsdram2.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001d1a:	4b1d      	ldr	r3, [pc, #116]	; (8001d90 <MX_FMC_Init+0x10c>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	609a      	str	r2, [r3, #8]
  hsdram2.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001d20:	4b1b      	ldr	r3, [pc, #108]	; (8001d90 <MX_FMC_Init+0x10c>)
 8001d22:	2204      	movs	r2, #4
 8001d24:	60da      	str	r2, [r3, #12]
  hsdram2.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001d26:	4b1a      	ldr	r3, [pc, #104]	; (8001d90 <MX_FMC_Init+0x10c>)
 8001d28:	2210      	movs	r2, #16
 8001d2a:	611a      	str	r2, [r3, #16]
  hsdram2.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001d2c:	4b18      	ldr	r3, [pc, #96]	; (8001d90 <MX_FMC_Init+0x10c>)
 8001d2e:	2240      	movs	r2, #64	; 0x40
 8001d30:	615a      	str	r2, [r3, #20]
  hsdram2.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8001d32:	4b17      	ldr	r3, [pc, #92]	; (8001d90 <MX_FMC_Init+0x10c>)
 8001d34:	2280      	movs	r2, #128	; 0x80
 8001d36:	619a      	str	r2, [r3, #24]
  hsdram2.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001d38:	4b15      	ldr	r3, [pc, #84]	; (8001d90 <MX_FMC_Init+0x10c>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	61da      	str	r2, [r3, #28]
  hsdram2.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8001d3e:	4b14      	ldr	r3, [pc, #80]	; (8001d90 <MX_FMC_Init+0x10c>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	621a      	str	r2, [r3, #32]
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001d44:	4b12      	ldr	r3, [pc, #72]	; (8001d90 <MX_FMC_Init+0x10c>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram2.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001d4a:	4b11      	ldr	r3, [pc, #68]	; (8001d90 <MX_FMC_Init+0x10c>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8001d50:	2310      	movs	r3, #16
 8001d52:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8001d54:	2310      	movs	r3, #16
 8001d56:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8001d58:	2310      	movs	r3, #16
 8001d5a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8001d5c:	2310      	movs	r3, #16
 8001d5e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8001d60:	2310      	movs	r3, #16
 8001d62:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8001d64:	2310      	movs	r3, #16
 8001d66:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8001d68:	2310      	movs	r3, #16
 8001d6a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
 8001d6c:	1d3b      	adds	r3, r7, #4
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4807      	ldr	r0, [pc, #28]	; (8001d90 <MX_FMC_Init+0x10c>)
 8001d72:	f00b f965 	bl	800d040 <HAL_SDRAM_Init>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <MX_FMC_Init+0xfc>
  {
    Error_Handler( );
 8001d7c:	f000 ff12 	bl	8002ba4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001d80:	bf00      	nop
 8001d82:	3720      	adds	r7, #32
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	200008dc 	.word	0x200008dc
 8001d8c:	a0000140 	.word	0xa0000140
 8001d90:	20000910 	.word	0x20000910

08001d94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b090      	sub	sp, #64	; 0x40
 8001d98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]
 8001da2:	605a      	str	r2, [r3, #4]
 8001da4:	609a      	str	r2, [r3, #8]
 8001da6:	60da      	str	r2, [r3, #12]
 8001da8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001daa:	4bae      	ldr	r3, [pc, #696]	; (8002064 <MX_GPIO_Init+0x2d0>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	4aad      	ldr	r2, [pc, #692]	; (8002064 <MX_GPIO_Init+0x2d0>)
 8001db0:	f043 0310 	orr.w	r3, r3, #16
 8001db4:	6313      	str	r3, [r2, #48]	; 0x30
 8001db6:	4bab      	ldr	r3, [pc, #684]	; (8002064 <MX_GPIO_Init+0x2d0>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	f003 0310 	and.w	r3, r3, #16
 8001dbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001dc2:	4ba8      	ldr	r3, [pc, #672]	; (8002064 <MX_GPIO_Init+0x2d0>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	4aa7      	ldr	r2, [pc, #668]	; (8002064 <MX_GPIO_Init+0x2d0>)
 8001dc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dce:	4ba5      	ldr	r3, [pc, #660]	; (8002064 <MX_GPIO_Init+0x2d0>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dd6:	627b      	str	r3, [r7, #36]	; 0x24
 8001dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dda:	4ba2      	ldr	r3, [pc, #648]	; (8002064 <MX_GPIO_Init+0x2d0>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	4aa1      	ldr	r2, [pc, #644]	; (8002064 <MX_GPIO_Init+0x2d0>)
 8001de0:	f043 0302 	orr.w	r3, r3, #2
 8001de4:	6313      	str	r3, [r2, #48]	; 0x30
 8001de6:	4b9f      	ldr	r3, [pc, #636]	; (8002064 <MX_GPIO_Init+0x2d0>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	623b      	str	r3, [r7, #32]
 8001df0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001df2:	4b9c      	ldr	r3, [pc, #624]	; (8002064 <MX_GPIO_Init+0x2d0>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	4a9b      	ldr	r2, [pc, #620]	; (8002064 <MX_GPIO_Init+0x2d0>)
 8001df8:	f043 0308 	orr.w	r3, r3, #8
 8001dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dfe:	4b99      	ldr	r3, [pc, #612]	; (8002064 <MX_GPIO_Init+0x2d0>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	f003 0308 	and.w	r3, r3, #8
 8001e06:	61fb      	str	r3, [r7, #28]
 8001e08:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e0a:	4b96      	ldr	r3, [pc, #600]	; (8002064 <MX_GPIO_Init+0x2d0>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	4a95      	ldr	r2, [pc, #596]	; (8002064 <MX_GPIO_Init+0x2d0>)
 8001e10:	f043 0304 	orr.w	r3, r3, #4
 8001e14:	6313      	str	r3, [r2, #48]	; 0x30
 8001e16:	4b93      	ldr	r3, [pc, #588]	; (8002064 <MX_GPIO_Init+0x2d0>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	f003 0304 	and.w	r3, r3, #4
 8001e1e:	61bb      	str	r3, [r7, #24]
 8001e20:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e22:	4b90      	ldr	r3, [pc, #576]	; (8002064 <MX_GPIO_Init+0x2d0>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	4a8f      	ldr	r2, [pc, #572]	; (8002064 <MX_GPIO_Init+0x2d0>)
 8001e28:	f043 0301 	orr.w	r3, r3, #1
 8001e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2e:	4b8d      	ldr	r3, [pc, #564]	; (8002064 <MX_GPIO_Init+0x2d0>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	617b      	str	r3, [r7, #20]
 8001e38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001e3a:	4b8a      	ldr	r3, [pc, #552]	; (8002064 <MX_GPIO_Init+0x2d0>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	4a89      	ldr	r2, [pc, #548]	; (8002064 <MX_GPIO_Init+0x2d0>)
 8001e40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e44:	6313      	str	r3, [r2, #48]	; 0x30
 8001e46:	4b87      	ldr	r3, [pc, #540]	; (8002064 <MX_GPIO_Init+0x2d0>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e4e:	613b      	str	r3, [r7, #16]
 8001e50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001e52:	4b84      	ldr	r3, [pc, #528]	; (8002064 <MX_GPIO_Init+0x2d0>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e56:	4a83      	ldr	r2, [pc, #524]	; (8002064 <MX_GPIO_Init+0x2d0>)
 8001e58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e5e:	4b81      	ldr	r3, [pc, #516]	; (8002064 <MX_GPIO_Init+0x2d0>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e66:	60fb      	str	r3, [r7, #12]
 8001e68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001e6a:	4b7e      	ldr	r3, [pc, #504]	; (8002064 <MX_GPIO_Init+0x2d0>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	4a7d      	ldr	r2, [pc, #500]	; (8002064 <MX_GPIO_Init+0x2d0>)
 8001e70:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e74:	6313      	str	r3, [r2, #48]	; 0x30
 8001e76:	4b7b      	ldr	r3, [pc, #492]	; (8002064 <MX_GPIO_Init+0x2d0>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e7e:	60bb      	str	r3, [r7, #8]
 8001e80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e82:	4b78      	ldr	r3, [pc, #480]	; (8002064 <MX_GPIO_Init+0x2d0>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e86:	4a77      	ldr	r2, [pc, #476]	; (8002064 <MX_GPIO_Init+0x2d0>)
 8001e88:	f043 0320 	orr.w	r3, r3, #32
 8001e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e8e:	4b75      	ldr	r3, [pc, #468]	; (8002064 <MX_GPIO_Init+0x2d0>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e92:	f003 0320 	and.w	r3, r3, #32
 8001e96:	607b      	str	r3, [r7, #4]
 8001e98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e9a:	4b72      	ldr	r3, [pc, #456]	; (8002064 <MX_GPIO_Init+0x2d0>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	4a71      	ldr	r2, [pc, #452]	; (8002064 <MX_GPIO_Init+0x2d0>)
 8001ea0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea6:	4b6f      	ldr	r3, [pc, #444]	; (8002064 <MX_GPIO_Init+0x2d0>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eae:	603b      	str	r3, [r7, #0]
 8001eb0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	2120      	movs	r1, #32
 8001eb6:	486c      	ldr	r0, [pc, #432]	; (8002068 <MX_GPIO_Init+0x2d4>)
 8001eb8:	f006 ff5e 	bl	8008d78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f241 010c 	movw	r1, #4108	; 0x100c
 8001ec2:	486a      	ldr	r0, [pc, #424]	; (800206c <MX_GPIO_Init+0x2d8>)
 8001ec4:	f006 ff58 	bl	8008d78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8001ec8:	2200      	movs	r2, #0
 8001eca:	2108      	movs	r1, #8
 8001ecc:	4868      	ldr	r0, [pc, #416]	; (8002070 <MX_GPIO_Init+0x2dc>)
 8001ece:	f006 ff53 	bl	8008d78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, DCMI_PWR_EN_Pin|LED2_Pin|LED1_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 8001ed8:	4866      	ldr	r0, [pc, #408]	; (8002074 <MX_GPIO_Init+0x2e0>)
 8001eda:	f006 ff4d 	bl	8008d78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001ede:	2200      	movs	r2, #0
 8001ee0:	21c8      	movs	r1, #200	; 0xc8
 8001ee2:	4865      	ldr	r0, [pc, #404]	; (8002078 <MX_GPIO_Init+0x2e4>)
 8001ee4:	f006 ff48 	bl	8008d78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001ee8:	2308      	movs	r3, #8
 8001eea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eec:	2300      	movs	r3, #0
 8001eee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001ef4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4860      	ldr	r0, [pc, #384]	; (800207c <MX_GPIO_Init+0x2e8>)
 8001efc:	f006 fc6c 	bl	80087d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001f00:	2304      	movs	r3, #4
 8001f02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f04:	2302      	movs	r3, #2
 8001f06:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001f10:	2309      	movs	r3, #9
 8001f12:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001f14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4858      	ldr	r0, [pc, #352]	; (800207c <MX_GPIO_Init+0x2e8>)
 8001f1c:	f006 fc5c 	bl	80087d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001f20:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8001f24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f26:	2302      	movs	r3, #2
 8001f28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f32:	230b      	movs	r3, #11
 8001f34:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	484e      	ldr	r0, [pc, #312]	; (8002078 <MX_GPIO_Init+0x2e4>)
 8001f3e:	f006 fc4b 	bl	80087d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8001f42:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f48:	2312      	movs	r3, #18
 8001f4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f50:	2300      	movs	r3, #0
 8001f52:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f54:	2304      	movs	r3, #4
 8001f56:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	4848      	ldr	r0, [pc, #288]	; (8002080 <MX_GPIO_Init+0x2ec>)
 8001f60:	f006 fc3a 	bl	80087d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8001f64:	2310      	movs	r3, #16
 8001f66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f68:	2302      	movs	r3, #2
 8001f6a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f70:	2300      	movs	r3, #0
 8001f72:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f74:	2302      	movs	r3, #2
 8001f76:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8001f78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4840      	ldr	r0, [pc, #256]	; (8002080 <MX_GPIO_Init+0x2ec>)
 8001f80:	f006 fc2a 	bl	80087d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8001f84:	2380      	movs	r3, #128	; 0x80
 8001f86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f88:	2302      	movs	r3, #2
 8001f8a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f90:	2300      	movs	r3, #0
 8001f92:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8001f94:	2308      	movs	r3, #8
 8001f96:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8001f98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4832      	ldr	r0, [pc, #200]	; (8002068 <MX_GPIO_Init+0x2d4>)
 8001fa0:	f006 fc1a 	bl	80087d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8001fa4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001faa:	2302      	movs	r3, #2
 8001fac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8001fba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4830      	ldr	r0, [pc, #192]	; (8002084 <MX_GPIO_Init+0x2f0>)
 8001fc2:	f006 fc09 	bl	80087d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8001fc6:	2360      	movs	r3, #96	; 0x60
 8001fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fca:	2302      	movs	r3, #2
 8001fcc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001fd6:	230d      	movs	r3, #13
 8001fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fde:	4619      	mov	r1, r3
 8001fe0:	4826      	ldr	r0, [pc, #152]	; (800207c <MX_GPIO_Init+0x2e8>)
 8001fe2:	f006 fbf9 	bl	80087d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001fe6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fec:	2300      	movs	r3, #0
 8001fee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001ff4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4823      	ldr	r0, [pc, #140]	; (8002088 <MX_GPIO_Init+0x2f4>)
 8001ffc:	f006 fbec 	bl	80087d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8002000:	2340      	movs	r3, #64	; 0x40
 8002002:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002004:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002008:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200a:	2300      	movs	r3, #0
 800200c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800200e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002012:	4619      	mov	r1, r3
 8002014:	4814      	ldr	r0, [pc, #80]	; (8002068 <MX_GPIO_Init+0x2d4>)
 8002016:	f006 fbdf 	bl	80087d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 800201a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800201e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002020:	2302      	movs	r3, #2
 8002022:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002024:	2300      	movs	r3, #0
 8002026:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002028:	2303      	movs	r3, #3
 800202a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800202c:	230a      	movs	r3, #10
 800202e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002030:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002034:	4619      	mov	r1, r3
 8002036:	4813      	ldr	r0, [pc, #76]	; (8002084 <MX_GPIO_Init+0x2f0>)
 8002038:	f006 fbce 	bl	80087d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800203c:	2320      	movs	r3, #32
 800203e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002040:	2301      	movs	r3, #1
 8002042:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002044:	2300      	movs	r3, #0
 8002046:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002048:	2300      	movs	r3, #0
 800204a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800204c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002050:	4619      	mov	r1, r3
 8002052:	4805      	ldr	r0, [pc, #20]	; (8002068 <MX_GPIO_Init+0x2d4>)
 8002054:	f006 fbc0 	bl	80087d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8002058:	2308      	movs	r3, #8
 800205a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205c:	2302      	movs	r3, #2
 800205e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002060:	2300      	movs	r3, #0
 8002062:	e013      	b.n	800208c <MX_GPIO_Init+0x2f8>
 8002064:	40023800 	.word	0x40023800
 8002068:	40020c00 	.word	0x40020c00
 800206c:	40022000 	.word	0x40022000
 8002070:	40022800 	.word	0x40022800
 8002074:	40021c00 	.word	0x40021c00
 8002078:	40021800 	.word	0x40021800
 800207c:	40021000 	.word	0x40021000
 8002080:	40020400 	.word	0x40020400
 8002084:	40020000 	.word	0x40020000
 8002088:	40022400 	.word	0x40022400
 800208c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800208e:	2300      	movs	r3, #0
 8002090:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002092:	230d      	movs	r3, #13
 8002094:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8002096:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800209a:	4619      	mov	r1, r3
 800209c:	48bb      	ldr	r0, [pc, #748]	; (800238c <MX_GPIO_Init+0x5f8>)
 800209e:	f006 fb9b 	bl	80087d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 80020a2:	f241 030c 	movw	r3, #4108	; 0x100c
 80020a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020a8:	2301      	movs	r3, #1
 80020aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ac:	2300      	movs	r3, #0
 80020ae:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b0:	2300      	movs	r3, #0
 80020b2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80020b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020b8:	4619      	mov	r1, r3
 80020ba:	48b5      	ldr	r0, [pc, #724]	; (8002390 <MX_GPIO_Init+0x5fc>)
 80020bc:	f006 fb8c 	bl	80087d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80020c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020c6:	2300      	movs	r3, #0
 80020c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ca:	2300      	movs	r3, #0
 80020cc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80020ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020d2:	4619      	mov	r1, r3
 80020d4:	48af      	ldr	r0, [pc, #700]	; (8002394 <MX_GPIO_Init+0x600>)
 80020d6:	f006 fb7f 	bl	80087d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80020da:	2308      	movs	r3, #8
 80020dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020de:	2301      	movs	r3, #1
 80020e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e2:	2300      	movs	r3, #0
 80020e4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e6:	2300      	movs	r3, #0
 80020e8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80020ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020ee:	4619      	mov	r1, r3
 80020f0:	48a9      	ldr	r0, [pc, #676]	; (8002398 <MX_GPIO_Init+0x604>)
 80020f2:	f006 fb71 	bl	80087d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80020f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fc:	2302      	movs	r3, #2
 80020fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002100:	2300      	movs	r3, #0
 8002102:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002104:	2300      	movs	r3, #0
 8002106:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002108:	230d      	movs	r3, #13
 800210a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800210c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002110:	4619      	mov	r1, r3
 8002112:	48a2      	ldr	r0, [pc, #648]	; (800239c <MX_GPIO_Init+0x608>)
 8002114:	f006 fb60 	bl	80087d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002118:	2310      	movs	r3, #16
 800211a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800211c:	2300      	movs	r3, #0
 800211e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002120:	2300      	movs	r3, #0
 8002122:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002124:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002128:	4619      	mov	r1, r3
 800212a:	4898      	ldr	r0, [pc, #608]	; (800238c <MX_GPIO_Init+0x5f8>)
 800212c:	f006 fb54 	bl	80087d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8002130:	f248 0304 	movw	r3, #32772	; 0x8004
 8002134:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002136:	2300      	movs	r3, #0
 8002138:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213a:	2300      	movs	r3, #0
 800213c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800213e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002142:	4619      	mov	r1, r3
 8002144:	4896      	ldr	r0, [pc, #600]	; (80023a0 <MX_GPIO_Init+0x60c>)
 8002146:	f006 fb47 	bl	80087d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 800214a:	2302      	movs	r3, #2
 800214c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214e:	2302      	movs	r3, #2
 8002150:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002152:	2300      	movs	r3, #0
 8002154:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002156:	2300      	movs	r3, #0
 8002158:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800215a:	2305      	movs	r3, #5
 800215c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800215e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002162:	4619      	mov	r1, r3
 8002164:	488a      	ldr	r0, [pc, #552]	; (8002390 <MX_GPIO_Init+0x5fc>)
 8002166:	f006 fb37 	bl	80087d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_PWR_EN_Pin LED2_Pin LED1_Pin LED3_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin|LED2_Pin|LED1_Pin|LED3_Pin;
 800216a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800216e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002170:	2301      	movs	r3, #1
 8002172:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002174:	2300      	movs	r3, #0
 8002176:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002178:	2300      	movs	r3, #0
 800217a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800217c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002180:	4619      	mov	r1, r3
 8002182:	4887      	ldr	r0, [pc, #540]	; (80023a0 <MX_GPIO_Init+0x60c>)
 8002184:	f006 fb28 	bl	80087d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D0_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D0_Pin;
 8002188:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 800218c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800218e:	2302      	movs	r3, #2
 8002190:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002192:	2300      	movs	r3, #0
 8002194:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002196:	2300      	movs	r3, #0
 8002198:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800219a:	230d      	movs	r3, #13
 800219c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800219e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021a2:	4619      	mov	r1, r3
 80021a4:	487e      	ldr	r0, [pc, #504]	; (80023a0 <MX_GPIO_Init+0x60c>)
 80021a6:	f006 fb17 	bl	80087d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 80021aa:	2301      	movs	r3, #1
 80021ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ae:	2302      	movs	r3, #2
 80021b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b2:	2300      	movs	r3, #0
 80021b4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b6:	2300      	movs	r3, #0
 80021b8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80021ba:	2302      	movs	r3, #2
 80021bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80021be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021c2:	4619      	mov	r1, r3
 80021c4:	4872      	ldr	r0, [pc, #456]	; (8002390 <MX_GPIO_Init+0x5fc>)
 80021c6:	f006 fb07 	bl	80087d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80021ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d0:	2302      	movs	r3, #2
 80021d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d4:	2300      	movs	r3, #0
 80021d6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d8:	2300      	movs	r3, #0
 80021da:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80021dc:	2301      	movs	r3, #1
 80021de:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 80021e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021e4:	4619      	mov	r1, r3
 80021e6:	486f      	ldr	r0, [pc, #444]	; (80023a4 <MX_GPIO_Init+0x610>)
 80021e8:	f006 faf6 	bl	80087d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80021ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80021f2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80021f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f8:	2300      	movs	r3, #0
 80021fa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80021fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002200:	4619      	mov	r1, r3
 8002202:	4863      	ldr	r0, [pc, #396]	; (8002390 <MX_GPIO_Init+0x5fc>)
 8002204:	f006 fae8 	bl	80087d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8002208:	23c0      	movs	r3, #192	; 0xc0
 800220a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220c:	2302      	movs	r3, #2
 800220e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002210:	2300      	movs	r3, #0
 8002212:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002214:	2303      	movs	r3, #3
 8002216:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002218:	2308      	movs	r3, #8
 800221a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800221c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002220:	4619      	mov	r1, r3
 8002222:	485c      	ldr	r0, [pc, #368]	; (8002394 <MX_GPIO_Init+0x600>)
 8002224:	f006 fad8 	bl	80087d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8002228:	2310      	movs	r3, #16
 800222a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222c:	2302      	movs	r3, #2
 800222e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002230:	2300      	movs	r3, #0
 8002232:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002234:	2303      	movs	r3, #3
 8002236:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002238:	230a      	movs	r3, #10
 800223a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800223c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002240:	4619      	mov	r1, r3
 8002242:	4857      	ldr	r0, [pc, #348]	; (80023a0 <MX_GPIO_Init+0x60c>)
 8002244:	f006 fac8 	bl	80087d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8002248:	23c8      	movs	r3, #200	; 0xc8
 800224a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800224c:	2301      	movs	r3, #1
 800224e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002250:	2300      	movs	r3, #0
 8002252:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002254:	2300      	movs	r3, #0
 8002256:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002258:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800225c:	4619      	mov	r1, r3
 800225e:	484f      	ldr	r0, [pc, #316]	; (800239c <MX_GPIO_Init+0x608>)
 8002260:	f006 faba 	bl	80087d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin ULPI_D2_Pin
                           ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin|ULPI_D2_Pin
 8002264:	f643 4303 	movw	r3, #15363	; 0x3c03
 8002268:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800226a:	2302      	movs	r3, #2
 800226c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226e:	2300      	movs	r3, #0
 8002270:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002272:	2303      	movs	r3, #3
 8002274:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002276:	230a      	movs	r3, #10
 8002278:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800227a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800227e:	4619      	mov	r1, r3
 8002280:	4849      	ldr	r0, [pc, #292]	; (80023a8 <MX_GPIO_Init+0x614>)
 8002282:	f006 faa9 	bl	80087d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8002286:	2305      	movs	r3, #5
 8002288:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228a:	2302      	movs	r3, #2
 800228c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228e:	2300      	movs	r3, #0
 8002290:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002292:	2303      	movs	r3, #3
 8002294:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002296:	230a      	movs	r3, #10
 8002298:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800229a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800229e:	4619      	mov	r1, r3
 80022a0:	483c      	ldr	r0, [pc, #240]	; (8002394 <MX_GPIO_Init+0x600>)
 80022a2:	f006 fa99 	bl	80087d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80022a6:	2332      	movs	r3, #50	; 0x32
 80022a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022aa:	2302      	movs	r3, #2
 80022ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ae:	2300      	movs	r3, #0
 80022b0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022b2:	2303      	movs	r3, #3
 80022b4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80022b6:	230b      	movs	r3, #11
 80022b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022be:	4619      	mov	r1, r3
 80022c0:	4834      	ldr	r0, [pc, #208]	; (8002394 <MX_GPIO_Init+0x600>)
 80022c2:	f006 fa89 	bl	80087d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80022c6:	2304      	movs	r3, #4
 80022c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ca:	2302      	movs	r3, #2
 80022cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ce:	2300      	movs	r3, #0
 80022d0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022d2:	2303      	movs	r3, #3
 80022d4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80022d6:	2309      	movs	r3, #9
 80022d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022de:	4619      	mov	r1, r3
 80022e0:	4831      	ldr	r0, [pc, #196]	; (80023a8 <MX_GPIO_Init+0x614>)
 80022e2:	f006 fa79 	bl	80087d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 80022e6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80022ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ec:	2302      	movs	r3, #2
 80022ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f0:	2300      	movs	r3, #0
 80022f2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022f4:	2303      	movs	r3, #3
 80022f6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80022f8:	2309      	movs	r3, #9
 80022fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002300:	4619      	mov	r1, r3
 8002302:	4822      	ldr	r0, [pc, #136]	; (800238c <MX_GPIO_Init+0x5f8>)
 8002304:	f006 fa68 	bl	80087d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8002308:	2304      	movs	r3, #4
 800230a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800230c:	2300      	movs	r3, #0
 800230e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002310:	2300      	movs	r3, #0
 8002312:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8002314:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002318:	4619      	mov	r1, r3
 800231a:	4820      	ldr	r0, [pc, #128]	; (800239c <MX_GPIO_Init+0x608>)
 800231c:	f006 fa5c 	bl	80087d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002320:	2386      	movs	r3, #134	; 0x86
 8002322:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002324:	2302      	movs	r3, #2
 8002326:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002328:	2300      	movs	r3, #0
 800232a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800232c:	2303      	movs	r3, #3
 800232e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002330:	230b      	movs	r3, #11
 8002332:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002334:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002338:	4619      	mov	r1, r3
 800233a:	481a      	ldr	r0, [pc, #104]	; (80023a4 <MX_GPIO_Init+0x610>)
 800233c:	f006 fa4c 	bl	80087d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8002340:	2350      	movs	r3, #80	; 0x50
 8002342:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002344:	2302      	movs	r3, #2
 8002346:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002348:	2300      	movs	r3, #0
 800234a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234c:	2300      	movs	r3, #0
 800234e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002350:	230d      	movs	r3, #13
 8002352:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002354:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002358:	4619      	mov	r1, r3
 800235a:	4812      	ldr	r0, [pc, #72]	; (80023a4 <MX_GPIO_Init+0x610>)
 800235c:	f006 fa3c 	bl	80087d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8002360:	2328      	movs	r3, #40	; 0x28
 8002362:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002364:	2302      	movs	r3, #2
 8002366:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002368:	2300      	movs	r3, #0
 800236a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800236c:	2303      	movs	r3, #3
 800236e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002370:	230a      	movs	r3, #10
 8002372:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002374:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002378:	4619      	mov	r1, r3
 800237a:	480a      	ldr	r0, [pc, #40]	; (80023a4 <MX_GPIO_Init+0x610>)
 800237c:	f006 fa2c 	bl	80087d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SDA_Pin;
 8002380:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002384:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002386:	2312      	movs	r3, #18
 8002388:	633b      	str	r3, [r7, #48]	; 0x30
 800238a:	e00f      	b.n	80023ac <MX_GPIO_Init+0x618>
 800238c:	40020c00 	.word	0x40020c00
 8002390:	40022000 	.word	0x40022000
 8002394:	40020800 	.word	0x40020800
 8002398:	40022800 	.word	0x40022800
 800239c:	40021800 	.word	0x40021800
 80023a0:	40021c00 	.word	0x40021c00
 80023a4:	40020000 	.word	0x40020000
 80023a8:	40020400 	.word	0x40020400
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ac:	2300      	movs	r3, #0
 80023ae:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023b0:	2303      	movs	r3, #3
 80023b2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80023b4:	2304      	movs	r3, #4
 80023b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_SDA_GPIO_Port, &GPIO_InitStruct);
 80023b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023bc:	4619      	mov	r1, r3
 80023be:	480c      	ldr	r0, [pc, #48]	; (80023f0 <MX_GPIO_Init+0x65c>)
 80023c0:	f006 fa0a 	bl	80087d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80023c4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80023c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ca:	2302      	movs	r3, #2
 80023cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ce:	2300      	movs	r3, #0
 80023d0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d2:	2300      	movs	r3, #0
 80023d4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80023d6:	2305      	movs	r3, #5
 80023d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023de:	4619      	mov	r1, r3
 80023e0:	4804      	ldr	r0, [pc, #16]	; (80023f4 <MX_GPIO_Init+0x660>)
 80023e2:	f006 f9f9 	bl	80087d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80023e6:	bf00      	nop
 80023e8:	3740      	adds	r7, #64	; 0x40
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	40021c00 	.word	0x40021c00
 80023f4:	40020400 	.word	0x40020400

080023f8 <BSP_AUDIO_OUT_TransferComplete_CallBack>:

/* USER CODE BEGIN 4 */

void BSP_AUDIO_OUT_TransferComplete_CallBack(void){
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
	char a=1;
 80023fe:	2301      	movs	r3, #1
 8002400:	71fb      	strb	r3, [r7, #7]
	xQueueSendFromISR(WakeUpHandle, &a,0);
 8002402:	4b05      	ldr	r3, [pc, #20]	; (8002418 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x20>)
 8002404:	6818      	ldr	r0, [r3, #0]
 8002406:	1df9      	adds	r1, r7, #7
 8002408:	2300      	movs	r3, #0
 800240a:	2200      	movs	r2, #0
 800240c:	f010 f8b0 	bl	8012570 <xQueueGenericSendFromISR>
}
 8002410:	bf00      	nop
 8002412:	3708      	adds	r7, #8
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	20000950 	.word	0x20000950

0800241c <BSP_AUDIO_OUT_HalfTransfer_CallBack>:

void BSP_AUDIO_OUT_HalfTransfer_CallBack(void){
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
	char a=0;
 8002422:	2300      	movs	r3, #0
 8002424:	71fb      	strb	r3, [r7, #7]
	xQueueSendFromISR(WakeUpHandle, &a,0);
 8002426:	4b05      	ldr	r3, [pc, #20]	; (800243c <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x20>)
 8002428:	6818      	ldr	r0, [r3, #0]
 800242a:	1df9      	adds	r1, r7, #7
 800242c:	2300      	movs	r3, #0
 800242e:	2200      	movs	r2, #0
 8002430:	f010 f89e 	bl	8012570 <xQueueGenericSendFromISR>
}
 8002434:	bf00      	nop
 8002436:	3708      	adds	r7, #8
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	20000950 	.word	0x20000950

08002440 <Affichage_Ecran>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Affichage_Ecran */
void Affichage_Ecran(void const * argument)
{
 8002440:	b590      	push	{r4, r7, lr}
 8002442:	b097      	sub	sp, #92	; 0x5c
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	static TS_StateTypeDef TS_State;
	Point ON_BUTTON,OFF_BUTTON,PLAY_BUTTON,PAUSE_BUTTON,Touch,AVANCEBUTTON,RECULEBUTTON,DEBUTBUTTON,VP,VM;
	char titre[20];

	ON_BUTTON.X = ON_X;
 8002448:	f001 fa44 	bl	80038d4 <BSP_LCD_GetXSize>
 800244c:	4603      	mov	r3, r0
 800244e:	085b      	lsrs	r3, r3, #1
 8002450:	b21b      	sxth	r3, r3
 8002452:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	ON_BUTTON.Y = ON_Y;
 8002456:	f001 fa51 	bl	80038fc <BSP_LCD_GetYSize>
 800245a:	4603      	mov	r3, r0
 800245c:	085b      	lsrs	r3, r3, #1
 800245e:	b21b      	sxth	r3, r3
 8002460:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	OFF_BUTTON.X = OFF_X;
 8002464:	f001 fa36 	bl	80038d4 <BSP_LCD_GetXSize>
 8002468:	4603      	mov	r3, r0
 800246a:	b29b      	uxth	r3, r3
 800246c:	3b1e      	subs	r3, #30
 800246e:	b29b      	uxth	r3, r3
 8002470:	b21b      	sxth	r3, r3
 8002472:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	OFF_BUTTON.Y = OFF_Y;
 8002476:	f001 fa41 	bl	80038fc <BSP_LCD_GetYSize>
 800247a:	4603      	mov	r3, r0
 800247c:	b29b      	uxth	r3, r3
 800247e:	3b1e      	subs	r3, #30
 8002480:	b29b      	uxth	r3, r3
 8002482:	b21b      	sxth	r3, r3
 8002484:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	PLAY_BUTTON.X = PLAY_BUTTON_X;
 8002488:	f001 fa24 	bl	80038d4 <BSP_LCD_GetXSize>
 800248c:	4603      	mov	r3, r0
 800248e:	085b      	lsrs	r3, r3, #1
 8002490:	b21b      	sxth	r3, r3
 8002492:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	PLAY_BUTTON.Y = PLAY_BUTTON_Y;
 8002496:	f001 fa31 	bl	80038fc <BSP_LCD_GetYSize>
 800249a:	4603      	mov	r3, r0
 800249c:	089b      	lsrs	r3, r3, #2
 800249e:	b21b      	sxth	r3, r3
 80024a0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	PAUSE_BUTTON.X = PAUSE_BUTTON_X;
 80024a4:	f001 fa16 	bl	80038d4 <BSP_LCD_GetXSize>
 80024a8:	4603      	mov	r3, r0
 80024aa:	085b      	lsrs	r3, r3, #1
 80024ac:	b21b      	sxth	r3, r3
 80024ae:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	PAUSE_BUTTON.Y = PAUSE_BUTTON_Y;
 80024b2:	f001 fa23 	bl	80038fc <BSP_LCD_GetYSize>
 80024b6:	4602      	mov	r2, r0
 80024b8:	4613      	mov	r3, r2
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	4413      	add	r3, r2
 80024be:	089b      	lsrs	r3, r3, #2
 80024c0:	b21b      	sxth	r3, r3
 80024c2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

	AVANCEBUTTON.X=AVANCE_BUTTON_X;
 80024c6:	f001 fa05 	bl	80038d4 <BSP_LCD_GetXSize>
 80024ca:	4602      	mov	r2, r0
 80024cc:	4613      	mov	r3, r2
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	4413      	add	r3, r2
 80024d2:	089b      	lsrs	r3, r3, #2
 80024d4:	b21b      	sxth	r3, r3
 80024d6:	87bb      	strh	r3, [r7, #60]	; 0x3c
	AVANCEBUTTON.Y=AVANCE_BUTTON_Y;
 80024d8:	f001 fa10 	bl	80038fc <BSP_LCD_GetYSize>
 80024dc:	4603      	mov	r3, r0
 80024de:	085b      	lsrs	r3, r3, #1
 80024e0:	b21b      	sxth	r3, r3
 80024e2:	87fb      	strh	r3, [r7, #62]	; 0x3e

	RECULEBUTTON.X= RECULE_BUTTON_X;
 80024e4:	f001 f9f6 	bl	80038d4 <BSP_LCD_GetXSize>
 80024e8:	4603      	mov	r3, r0
 80024ea:	089b      	lsrs	r3, r3, #2
 80024ec:	b21b      	sxth	r3, r3
 80024ee:	873b      	strh	r3, [r7, #56]	; 0x38
	RECULEBUTTON.Y= RECULE_BUTTON_Y;
 80024f0:	f001 fa04 	bl	80038fc <BSP_LCD_GetYSize>
 80024f4:	4603      	mov	r3, r0
 80024f6:	085b      	lsrs	r3, r3, #1
 80024f8:	b21b      	sxth	r3, r3
 80024fa:	877b      	strh	r3, [r7, #58]	; 0x3a

	DEBUTBUTTON.X=DEBUT_BUTTON_X;
 80024fc:	f001 f9ea 	bl	80038d4 <BSP_LCD_GetXSize>
 8002500:	4603      	mov	r3, r0
 8002502:	085b      	lsrs	r3, r3, #1
 8002504:	b21b      	sxth	r3, r3
 8002506:	86bb      	strh	r3, [r7, #52]	; 0x34
	DEBUTBUTTON.Y=DEBUT_BUTTON_Y;
 8002508:	f001 f9f8 	bl	80038fc <BSP_LCD_GetYSize>
 800250c:	4603      	mov	r3, r0
 800250e:	085b      	lsrs	r3, r3, #1
 8002510:	b21b      	sxth	r3, r3
 8002512:	86fb      	strh	r3, [r7, #54]	; 0x36

	VP.X=VOLUME_PLUS_X;
 8002514:	f001 f9de 	bl	80038d4 <BSP_LCD_GetXSize>
 8002518:	4603      	mov	r3, r0
 800251a:	b29b      	uxth	r3, r3
 800251c:	3b28      	subs	r3, #40	; 0x28
 800251e:	b29b      	uxth	r3, r3
 8002520:	b21b      	sxth	r3, r3
 8002522:	863b      	strh	r3, [r7, #48]	; 0x30
	VP.Y=VOLUME_PLUS_Y;
 8002524:	2332      	movs	r3, #50	; 0x32
 8002526:	867b      	strh	r3, [r7, #50]	; 0x32

	VM.X=VOLUME_MOINS_X;
 8002528:	f001 f9d4 	bl	80038d4 <BSP_LCD_GetXSize>
 800252c:	4603      	mov	r3, r0
 800252e:	b29b      	uxth	r3, r3
 8002530:	3b28      	subs	r3, #40	; 0x28
 8002532:	b29b      	uxth	r3, r3
 8002534:	b21b      	sxth	r3, r3
 8002536:	85bb      	strh	r3, [r7, #44]	; 0x2c
	VM.Y=VOLUME_MOINS_Y;
 8002538:	2364      	movs	r3, #100	; 0x64
 800253a:	85fb      	strh	r3, [r7, #46]	; 0x2e

	char timer[11];
	uint8_t volume=20;
 800253c:	2314      	movs	r3, #20
 800253e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	while (enable==0);
 8002542:	bf00      	nop
 8002544:	4b97      	ldr	r3, [pc, #604]	; (80027a4 <Affichage_Ecran+0x364>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d0fb      	beq.n	8002544 <Affichage_Ecran+0x104>
	osDelay(500);
 800254c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002550:	f00f fb4c 	bl	8011bec <osDelay>
	DrawONButton();
 8002554:	f7fe fc9c 	bl	8000e90 <DrawONButton>
	BSP_AUDIO_IN_SetVolume(volume);
 8002558:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800255c:	4618      	mov	r0, r3
 800255e:	f000 ffa5 	bl	80034ac <BSP_AUDIO_IN_SetVolume>
	for (;;) {
		BSP_TS_GetState(&TS_State);
 8002562:	4891      	ldr	r0, [pc, #580]	; (80027a8 <Affichage_Ecran+0x368>)
 8002564:	f002 fa0c 	bl	8004980 <BSP_TS_GetState>
		if (TS_State.touchDetected) {
 8002568:	4b8f      	ldr	r3, [pc, #572]	; (80027a8 <Affichage_Ecran+0x368>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d00a      	beq.n	8002586 <Affichage_Ecran+0x146>
			Touch.X = TS_State.touchX[0];
 8002570:	4b8d      	ldr	r3, [pc, #564]	; (80027a8 <Affichage_Ecran+0x368>)
 8002572:	885b      	ldrh	r3, [r3, #2]
 8002574:	b21b      	sxth	r3, r3
 8002576:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			Touch.Y = TS_State.touchY[0];
 800257a:	4b8b      	ldr	r3, [pc, #556]	; (80027a8 <Affichage_Ecran+0x368>)
 800257c:	899b      	ldrh	r3, [r3, #12]
 800257e:	b21b      	sxth	r3, r3
 8002580:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002584:	e005      	b.n	8002592 <Affichage_Ecran+0x152>
		}else{
			Touch.X = 0;
 8002586:	2300      	movs	r3, #0
 8002588:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			Touch.Y = 0;
 800258c:	2300      	movs	r3, #0
 800258e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		}
		switch (etat) {
 8002592:	4b86      	ldr	r3, [pc, #536]	; (80027ac <Affichage_Ecran+0x36c>)
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	2b02      	cmp	r3, #2
 8002598:	f000 811e 	beq.w	80027d8 <Affichage_Ecran+0x398>
 800259c:	2b02      	cmp	r3, #2
 800259e:	f300 81d4 	bgt.w	800294a <Affichage_Ecran+0x50a>
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d002      	beq.n	80025ac <Affichage_Ecran+0x16c>
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d027      	beq.n	80025fa <Affichage_Ecran+0x1ba>
 80025aa:	e1ce      	b.n	800294a <Affichage_Ecran+0x50a>
			case 0:
				indice=-1;
 80025ac:	4b80      	ldr	r3, [pc, #512]	; (80027b0 <Affichage_Ecran+0x370>)
 80025ae:	22ff      	movs	r2, #255	; 0xff
 80025b0:	701a      	strb	r2, [r3, #0]
				BSP_AUDIO_OUT_Pause();
 80025b2:	f000 fd3f 	bl	8003034 <BSP_AUDIO_OUT_Pause>
				if (InCircle(Touch, ON_BUTTON, R)){
 80025b6:	221e      	movs	r2, #30
 80025b8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80025ba:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80025bc:	f7fe fb3a 	bl	8000c34 <InCircle>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f000 81bc 	beq.w	8002940 <Affichage_Ecran+0x500>
					etat=1;
 80025c8:	4b78      	ldr	r3, [pc, #480]	; (80027ac <Affichage_Ecran+0x36c>)
 80025ca:	2201      	movs	r2, #1
 80025cc:	701a      	strb	r2, [r3, #0]
					DrawOFFButton();
 80025ce:	f7fe fd95 	bl	80010fc <DrawOFFButton>
					DrawPlayButton(LCD_COLOR_BLUE);
 80025d2:	4878      	ldr	r0, [pc, #480]	; (80027b4 <Affichage_Ecran+0x374>)
 80025d4:	f7fe fbbe 	bl	8000d54 <DrawPlayButton>
					DrawPauseButton(LCD_COLOR_RED);
 80025d8:	4877      	ldr	r0, [pc, #476]	; (80027b8 <Affichage_Ecran+0x378>)
 80025da:	f7fe fc05 	bl	8000de8 <DrawPauseButton>
					DrawDebutButton();
 80025de:	f7fe fca5 	bl	8000f2c <DrawDebutButton>
					DrawAvanceButton();
 80025e2:	f7fe fced 	bl	8000fc0 <DrawAvanceButton>
					DrawReculeButton();
 80025e6:	f7fe fd3f 	bl	8001068 <DrawReculeButton>
					DrawVPButton();
 80025ea:	f7fe fb57 	bl	8000c9c <DrawVPButton>
					DrawVMButton();
 80025ee:	f7fe fb83 	bl	8000cf8 <DrawVMButton>
					Charge_Wave(1);
 80025f2:	2001      	movs	r0, #1
 80025f4:	f7fe ff3e 	bl	8001474 <Charge_Wave>
				}
				break;
 80025f8:	e1a2      	b.n	8002940 <Affichage_Ecran+0x500>

			case 1:
				BSP_AUDIO_OUT_Resume();
 80025fa:	f000 fd31 	bl	8003060 <BSP_AUDIO_OUT_Resume>
				BSP_AUDIO_IN_SetVolume(volume);
 80025fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002602:	4618      	mov	r0, r3
 8002604:	f000 ff52 	bl	80034ac <BSP_AUDIO_IN_SetVolume>
				sprintf(titre,"%s",musique[indice]);
 8002608:	4b69      	ldr	r3, [pc, #420]	; (80027b0 <Affichage_Ecran+0x370>)
 800260a:	f993 3000 	ldrsb.w	r3, [r3]
 800260e:	461a      	mov	r2, r3
 8002610:	4613      	mov	r3, r2
 8002612:	011b      	lsls	r3, r3, #4
 8002614:	1a9b      	subs	r3, r3, r2
 8002616:	4a69      	ldr	r2, [pc, #420]	; (80027bc <Affichage_Ecran+0x37c>)
 8002618:	441a      	add	r2, r3
 800261a:	f107 0318 	add.w	r3, r7, #24
 800261e:	4968      	ldr	r1, [pc, #416]	; (80027c0 <Affichage_Ecran+0x380>)
 8002620:	4618      	mov	r0, r3
 8002622:	f012 fa39 	bl	8014a98 <siprintf>
				sprintf(timer,"%s/%s",duree_actuelle,duree_total);
 8002626:	f107 000c 	add.w	r0, r7, #12
 800262a:	4b66      	ldr	r3, [pc, #408]	; (80027c4 <Affichage_Ecran+0x384>)
 800262c:	4a66      	ldr	r2, [pc, #408]	; (80027c8 <Affichage_Ecran+0x388>)
 800262e:	4967      	ldr	r1, [pc, #412]	; (80027cc <Affichage_Ecran+0x38c>)
 8002630:	f012 fa32 	bl	8014a98 <siprintf>

				BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8002634:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8002638:	f001 f9fc 	bl	8003a34 <BSP_LCD_SetBackColor>
				BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800263c:	f04f 30ff 	mov.w	r0, #4294967295
 8002640:	f001 f9e0 	bl	8003a04 <BSP_LCD_SetTextColor>
				BSP_LCD_DisplayStringAt(BSP_LCD_GetXSize()/20, BSP_LCD_GetYSize() - 20, (uint8_t*)musique[indice], LEFT_MODE);
 8002644:	f001 f946 	bl	80038d4 <BSP_LCD_GetXSize>
 8002648:	4603      	mov	r3, r0
 800264a:	4a61      	ldr	r2, [pc, #388]	; (80027d0 <Affichage_Ecran+0x390>)
 800264c:	fba2 2303 	umull	r2, r3, r2, r3
 8002650:	091b      	lsrs	r3, r3, #4
 8002652:	b29c      	uxth	r4, r3
 8002654:	f001 f952 	bl	80038fc <BSP_LCD_GetYSize>
 8002658:	4603      	mov	r3, r0
 800265a:	b29b      	uxth	r3, r3
 800265c:	3b14      	subs	r3, #20
 800265e:	b299      	uxth	r1, r3
 8002660:	4b53      	ldr	r3, [pc, #332]	; (80027b0 <Affichage_Ecran+0x370>)
 8002662:	f993 3000 	ldrsb.w	r3, [r3]
 8002666:	461a      	mov	r2, r3
 8002668:	4613      	mov	r3, r2
 800266a:	011b      	lsls	r3, r3, #4
 800266c:	1a9b      	subs	r3, r3, r2
 800266e:	4a53      	ldr	r2, [pc, #332]	; (80027bc <Affichage_Ecran+0x37c>)
 8002670:	441a      	add	r2, r3
 8002672:	2303      	movs	r3, #3
 8002674:	4620      	mov	r0, r4
 8002676:	f001 fa7d 	bl	8003b74 <BSP_LCD_DisplayStringAt>

				BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 800267a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800267e:	f001 f9d9 	bl	8003a34 <BSP_LCD_SetBackColor>
				BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8002682:	484c      	ldr	r0, [pc, #304]	; (80027b4 <Affichage_Ecran+0x374>)
 8002684:	f001 f9be 	bl	8003a04 <BSP_LCD_SetTextColor>
				BSP_LCD_DisplayStringAt(BSP_LCD_GetXSize()/2, BSP_LCD_GetYSize() - 20, (uint8_t*)timer, LEFT_MODE);
 8002688:	f001 f924 	bl	80038d4 <BSP_LCD_GetXSize>
 800268c:	4603      	mov	r3, r0
 800268e:	085b      	lsrs	r3, r3, #1
 8002690:	b29c      	uxth	r4, r3
 8002692:	f001 f933 	bl	80038fc <BSP_LCD_GetYSize>
 8002696:	4603      	mov	r3, r0
 8002698:	b29b      	uxth	r3, r3
 800269a:	3b14      	subs	r3, #20
 800269c:	b299      	uxth	r1, r3
 800269e:	f107 020c 	add.w	r2, r7, #12
 80026a2:	2303      	movs	r3, #3
 80026a4:	4620      	mov	r0, r4
 80026a6:	f001 fa65 	bl	8003b74 <BSP_LCD_DisplayStringAt>

				if (InCircle(Touch, OFF_BUTTON, R/2)){
 80026aa:	220f      	movs	r2, #15
 80026ac:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80026ae:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80026b0:	f7fe fac0 	bl	8000c34 <InCircle>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d007      	beq.n	80026ca <Affichage_Ecran+0x28a>
					etat=0;
 80026ba:	4b3c      	ldr	r3, [pc, #240]	; (80027ac <Affichage_Ecran+0x36c>)
 80026bc:	2200      	movs	r2, #0
 80026be:	701a      	strb	r2, [r3, #0]
					DrawONButton();
 80026c0:	f7fe fbe6 	bl	8000e90 <DrawONButton>
					f_close(&SDFile);
 80026c4:	4843      	ldr	r0, [pc, #268]	; (80027d4 <Affichage_Ecran+0x394>)
 80026c6:	f00e fecf 	bl	8011468 <f_close>
				}
				if (InCircle(Touch, PAUSE_BUTTON, R)){
 80026ca:	221e      	movs	r2, #30
 80026cc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80026ce:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80026d0:	f7fe fab0 	bl	8000c34 <InCircle>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d014      	beq.n	8002704 <Affichage_Ecran+0x2c4>
					etat=2;
 80026da:	4b34      	ldr	r3, [pc, #208]	; (80027ac <Affichage_Ecran+0x36c>)
 80026dc:	2202      	movs	r2, #2
 80026de:	701a      	strb	r2, [r3, #0]
					DrawOFFButton();
 80026e0:	f7fe fd0c 	bl	80010fc <DrawOFFButton>
					DrawPlayButton(LCD_COLOR_RED);
 80026e4:	4834      	ldr	r0, [pc, #208]	; (80027b8 <Affichage_Ecran+0x378>)
 80026e6:	f7fe fb35 	bl	8000d54 <DrawPlayButton>
					DrawPauseButton(LCD_COLOR_BLUE);
 80026ea:	4832      	ldr	r0, [pc, #200]	; (80027b4 <Affichage_Ecran+0x374>)
 80026ec:	f7fe fb7c 	bl	8000de8 <DrawPauseButton>
					DrawDebutButton();
 80026f0:	f7fe fc1c 	bl	8000f2c <DrawDebutButton>
					DrawAvanceButton();
 80026f4:	f7fe fc64 	bl	8000fc0 <DrawAvanceButton>
					DrawReculeButton();
 80026f8:	f7fe fcb6 	bl	8001068 <DrawReculeButton>
					DrawVPButton();
 80026fc:	f7fe face 	bl	8000c9c <DrawVPButton>
					DrawVMButton();
 8002700:	f7fe fafa 	bl	8000cf8 <DrawVMButton>
				}
				if (InCircle(Touch,AVANCEBUTTON,R)){
 8002704:	221e      	movs	r2, #30
 8002706:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002708:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800270a:	f7fe fa93 	bl	8000c34 <InCircle>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d005      	beq.n	8002720 <Affichage_Ecran+0x2e0>
					f_close(&SDFile);
 8002714:	482f      	ldr	r0, [pc, #188]	; (80027d4 <Affichage_Ecran+0x394>)
 8002716:	f00e fea7 	bl	8011468 <f_close>
					Charge_Wave(1);
 800271a:	2001      	movs	r0, #1
 800271c:	f7fe feaa 	bl	8001474 <Charge_Wave>
				}
				if (InCircle(Touch,RECULEBUTTON,R)){
 8002720:	221e      	movs	r2, #30
 8002722:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002724:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002726:	f7fe fa85 	bl	8000c34 <InCircle>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d005      	beq.n	800273c <Affichage_Ecran+0x2fc>
					f_close(&SDFile);
 8002730:	4828      	ldr	r0, [pc, #160]	; (80027d4 <Affichage_Ecran+0x394>)
 8002732:	f00e fe99 	bl	8011468 <f_close>
					Charge_Wave(0);
 8002736:	2000      	movs	r0, #0
 8002738:	f7fe fe9c 	bl	8001474 <Charge_Wave>
				}
				if (InCircle(Touch,DEBUTBUTTON,R)){
 800273c:	221e      	movs	r2, #30
 800273e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002740:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002742:	f7fe fa77 	bl	8000c34 <InCircle>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d005      	beq.n	8002758 <Affichage_Ecran+0x318>
					f_close(&SDFile);
 800274c:	4821      	ldr	r0, [pc, #132]	; (80027d4 <Affichage_Ecran+0x394>)
 800274e:	f00e fe8b 	bl	8011468 <f_close>
					Charge_Wave(2);
 8002752:	2002      	movs	r0, #2
 8002754:	f7fe fe8e 	bl	8001474 <Charge_Wave>
				}
				if (InCircle(Touch,VP,R/2)){
 8002758:	220f      	movs	r2, #15
 800275a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800275c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800275e:	f7fe fa69 	bl	8000c34 <InCircle>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d008      	beq.n	800277a <Affichage_Ecran+0x33a>
					if (volume<100)
 8002768:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800276c:	2b63      	cmp	r3, #99	; 0x63
 800276e:	d804      	bhi.n	800277a <Affichage_Ecran+0x33a>
						volume = volume + 10;
 8002770:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002774:	330a      	adds	r3, #10
 8002776:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				}
				if (InCircle(Touch,VP,R/2)){
 800277a:	220f      	movs	r2, #15
 800277c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800277e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002780:	f7fe fa58 	bl	8000c34 <InCircle>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	f000 80dc 	beq.w	8002944 <Affichage_Ecran+0x504>
					if (volume>0)
 800278c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002790:	2b00      	cmp	r3, #0
 8002792:	f000 80d7 	beq.w	8002944 <Affichage_Ecran+0x504>
						volume = volume - 10;
 8002796:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800279a:	3b0a      	subs	r3, #10
 800279c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				}
				break;
 80027a0:	e0d0      	b.n	8002944 <Affichage_Ecran+0x504>
 80027a2:	bf00      	nop
 80027a4:	20000954 	.word	0x20000954
 80027a8:	20000998 	.word	0x20000998
 80027ac:	20000955 	.word	0x20000955
 80027b0:	2000002c 	.word	0x2000002c
 80027b4:	ff0000ff 	.word	0xff0000ff
 80027b8:	ffff0000 	.word	0xffff0000
 80027bc:	20000030 	.word	0x20000030
 80027c0:	0801546c 	.word	0x0801546c
 80027c4:	20000984 	.word	0x20000984
 80027c8:	2000098c 	.word	0x2000098c
 80027cc:	08015470 	.word	0x08015470
 80027d0:	cccccccd 	.word	0xcccccccd
 80027d4:	20001100 	.word	0x20001100

			case 2:
				BSP_AUDIO_OUT_Pause();
 80027d8:	f000 fc2c 	bl	8003034 <BSP_AUDIO_OUT_Pause>
				sprintf(titre,"%s",musique[indice]);
 80027dc:	4b5d      	ldr	r3, [pc, #372]	; (8002954 <Affichage_Ecran+0x514>)
 80027de:	f993 3000 	ldrsb.w	r3, [r3]
 80027e2:	461a      	mov	r2, r3
 80027e4:	4613      	mov	r3, r2
 80027e6:	011b      	lsls	r3, r3, #4
 80027e8:	1a9b      	subs	r3, r3, r2
 80027ea:	4a5b      	ldr	r2, [pc, #364]	; (8002958 <Affichage_Ecran+0x518>)
 80027ec:	441a      	add	r2, r3
 80027ee:	f107 0318 	add.w	r3, r7, #24
 80027f2:	495a      	ldr	r1, [pc, #360]	; (800295c <Affichage_Ecran+0x51c>)
 80027f4:	4618      	mov	r0, r3
 80027f6:	f012 f94f 	bl	8014a98 <siprintf>
				sprintf(timer,"%s/%s",duree_actuelle,duree_total);
 80027fa:	f107 000c 	add.w	r0, r7, #12
 80027fe:	4b58      	ldr	r3, [pc, #352]	; (8002960 <Affichage_Ecran+0x520>)
 8002800:	4a58      	ldr	r2, [pc, #352]	; (8002964 <Affichage_Ecran+0x524>)
 8002802:	4959      	ldr	r1, [pc, #356]	; (8002968 <Affichage_Ecran+0x528>)
 8002804:	f012 f948 	bl	8014a98 <siprintf>

				BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8002808:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800280c:	f001 f912 	bl	8003a34 <BSP_LCD_SetBackColor>
				BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002810:	f04f 30ff 	mov.w	r0, #4294967295
 8002814:	f001 f8f6 	bl	8003a04 <BSP_LCD_SetTextColor>
				BSP_LCD_DisplayStringAt(BSP_LCD_GetXSize()/20, BSP_LCD_GetYSize() - 20, (uint8_t*)musique[indice], LEFT_MODE);
 8002818:	f001 f85c 	bl	80038d4 <BSP_LCD_GetXSize>
 800281c:	4603      	mov	r3, r0
 800281e:	4a53      	ldr	r2, [pc, #332]	; (800296c <Affichage_Ecran+0x52c>)
 8002820:	fba2 2303 	umull	r2, r3, r2, r3
 8002824:	091b      	lsrs	r3, r3, #4
 8002826:	b29c      	uxth	r4, r3
 8002828:	f001 f868 	bl	80038fc <BSP_LCD_GetYSize>
 800282c:	4603      	mov	r3, r0
 800282e:	b29b      	uxth	r3, r3
 8002830:	3b14      	subs	r3, #20
 8002832:	b299      	uxth	r1, r3
 8002834:	4b47      	ldr	r3, [pc, #284]	; (8002954 <Affichage_Ecran+0x514>)
 8002836:	f993 3000 	ldrsb.w	r3, [r3]
 800283a:	461a      	mov	r2, r3
 800283c:	4613      	mov	r3, r2
 800283e:	011b      	lsls	r3, r3, #4
 8002840:	1a9b      	subs	r3, r3, r2
 8002842:	4a45      	ldr	r2, [pc, #276]	; (8002958 <Affichage_Ecran+0x518>)
 8002844:	441a      	add	r2, r3
 8002846:	2303      	movs	r3, #3
 8002848:	4620      	mov	r0, r4
 800284a:	f001 f993 	bl	8003b74 <BSP_LCD_DisplayStringAt>
				BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 800284e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8002852:	f001 f8ef 	bl	8003a34 <BSP_LCD_SetBackColor>
				BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8002856:	4846      	ldr	r0, [pc, #280]	; (8002970 <Affichage_Ecran+0x530>)
 8002858:	f001 f8d4 	bl	8003a04 <BSP_LCD_SetTextColor>
				BSP_LCD_DisplayStringAt(BSP_LCD_GetXSize()/2, BSP_LCD_GetYSize() - 20, (uint8_t*)timer, LEFT_MODE);
 800285c:	f001 f83a 	bl	80038d4 <BSP_LCD_GetXSize>
 8002860:	4603      	mov	r3, r0
 8002862:	085b      	lsrs	r3, r3, #1
 8002864:	b29c      	uxth	r4, r3
 8002866:	f001 f849 	bl	80038fc <BSP_LCD_GetYSize>
 800286a:	4603      	mov	r3, r0
 800286c:	b29b      	uxth	r3, r3
 800286e:	3b14      	subs	r3, #20
 8002870:	b299      	uxth	r1, r3
 8002872:	f107 020c 	add.w	r2, r7, #12
 8002876:	2303      	movs	r3, #3
 8002878:	4620      	mov	r0, r4
 800287a:	f001 f97b 	bl	8003b74 <BSP_LCD_DisplayStringAt>

				if (InCircle(Touch, OFF_BUTTON, R/2)){
 800287e:	220f      	movs	r2, #15
 8002880:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002882:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002884:	f7fe f9d6 	bl	8000c34 <InCircle>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d007      	beq.n	800289e <Affichage_Ecran+0x45e>
					etat=0;
 800288e:	4b39      	ldr	r3, [pc, #228]	; (8002974 <Affichage_Ecran+0x534>)
 8002890:	2200      	movs	r2, #0
 8002892:	701a      	strb	r2, [r3, #0]
					DrawONButton();
 8002894:	f7fe fafc 	bl	8000e90 <DrawONButton>
					f_close(&SDFile);
 8002898:	4837      	ldr	r0, [pc, #220]	; (8002978 <Affichage_Ecran+0x538>)
 800289a:	f00e fde5 	bl	8011468 <f_close>
				}
				if (InCircle(Touch, PLAY_BUTTON, R)){
 800289e:	221e      	movs	r2, #30
 80028a0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80028a2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80028a4:	f7fe f9c6 	bl	8000c34 <InCircle>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d014      	beq.n	80028d8 <Affichage_Ecran+0x498>
					etat=1;
 80028ae:	4b31      	ldr	r3, [pc, #196]	; (8002974 <Affichage_Ecran+0x534>)
 80028b0:	2201      	movs	r2, #1
 80028b2:	701a      	strb	r2, [r3, #0]
					DrawOFFButton();
 80028b4:	f7fe fc22 	bl	80010fc <DrawOFFButton>
					DrawPlayButton(LCD_COLOR_BLUE);
 80028b8:	4830      	ldr	r0, [pc, #192]	; (800297c <Affichage_Ecran+0x53c>)
 80028ba:	f7fe fa4b 	bl	8000d54 <DrawPlayButton>
					DrawPauseButton(LCD_COLOR_RED);
 80028be:	482c      	ldr	r0, [pc, #176]	; (8002970 <Affichage_Ecran+0x530>)
 80028c0:	f7fe fa92 	bl	8000de8 <DrawPauseButton>
					DrawDebutButton();
 80028c4:	f7fe fb32 	bl	8000f2c <DrawDebutButton>
					DrawAvanceButton();
 80028c8:	f7fe fb7a 	bl	8000fc0 <DrawAvanceButton>
					DrawReculeButton();
 80028cc:	f7fe fbcc 	bl	8001068 <DrawReculeButton>
					DrawVPButton();
 80028d0:	f7fe f9e4 	bl	8000c9c <DrawVPButton>
					DrawVMButton();
 80028d4:	f7fe fa10 	bl	8000cf8 <DrawVMButton>
				}
				if (InCircle(Touch,AVANCEBUTTON,R)){
 80028d8:	221e      	movs	r2, #30
 80028da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80028dc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80028de:	f7fe f9a9 	bl	8000c34 <InCircle>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d008      	beq.n	80028fa <Affichage_Ecran+0x4ba>
					f_close(&SDFile);
 80028e8:	4823      	ldr	r0, [pc, #140]	; (8002978 <Affichage_Ecran+0x538>)
 80028ea:	f00e fdbd 	bl	8011468 <f_close>
					Charge_Wave(1);
 80028ee:	2001      	movs	r0, #1
 80028f0:	f7fe fdc0 	bl	8001474 <Charge_Wave>
					etat=1;
 80028f4:	4b1f      	ldr	r3, [pc, #124]	; (8002974 <Affichage_Ecran+0x534>)
 80028f6:	2201      	movs	r2, #1
 80028f8:	701a      	strb	r2, [r3, #0]
				}
				if (InCircle(Touch,RECULEBUTTON,R)){
 80028fa:	221e      	movs	r2, #30
 80028fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80028fe:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002900:	f7fe f998 	bl	8000c34 <InCircle>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d008      	beq.n	800291c <Affichage_Ecran+0x4dc>
					f_close(&SDFile);
 800290a:	481b      	ldr	r0, [pc, #108]	; (8002978 <Affichage_Ecran+0x538>)
 800290c:	f00e fdac 	bl	8011468 <f_close>
					Charge_Wave(0);
 8002910:	2000      	movs	r0, #0
 8002912:	f7fe fdaf 	bl	8001474 <Charge_Wave>
					etat=1;
 8002916:	4b17      	ldr	r3, [pc, #92]	; (8002974 <Affichage_Ecran+0x534>)
 8002918:	2201      	movs	r2, #1
 800291a:	701a      	strb	r2, [r3, #0]
				}
				if (InCircle(Touch,DEBUTBUTTON,R)){
 800291c:	221e      	movs	r2, #30
 800291e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002920:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002922:	f7fe f987 	bl	8000c34 <InCircle>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d00d      	beq.n	8002948 <Affichage_Ecran+0x508>
					f_close(&SDFile);
 800292c:	4812      	ldr	r0, [pc, #72]	; (8002978 <Affichage_Ecran+0x538>)
 800292e:	f00e fd9b 	bl	8011468 <f_close>
					Charge_Wave(2);
 8002932:	2002      	movs	r0, #2
 8002934:	f7fe fd9e 	bl	8001474 <Charge_Wave>
					etat=1;
 8002938:	4b0e      	ldr	r3, [pc, #56]	; (8002974 <Affichage_Ecran+0x534>)
 800293a:	2201      	movs	r2, #1
 800293c:	701a      	strb	r2, [r3, #0]
				}
				break;
 800293e:	e003      	b.n	8002948 <Affichage_Ecran+0x508>
				break;
 8002940:	bf00      	nop
 8002942:	e002      	b.n	800294a <Affichage_Ecran+0x50a>
				break;
 8002944:	bf00      	nop
 8002946:	e000      	b.n	800294a <Affichage_Ecran+0x50a>
				break;
 8002948:	bf00      	nop

			}
		vTaskDelay(100);
 800294a:	2064      	movs	r0, #100	; 0x64
 800294c:	f010 fd74 	bl	8013438 <vTaskDelay>
		BSP_TS_GetState(&TS_State);
 8002950:	e607      	b.n	8002562 <Affichage_Ecran+0x122>
 8002952:	bf00      	nop
 8002954:	2000002c 	.word	0x2000002c
 8002958:	20000030 	.word	0x20000030
 800295c:	0801546c 	.word	0x0801546c
 8002960:	20000984 	.word	0x20000984
 8002964:	2000098c 	.word	0x2000098c
 8002968:	08015470 	.word	0x08015470
 800296c:	cccccccd 	.word	0xcccccccd
 8002970:	ffff0000 	.word	0xffff0000
 8002974:	20000955 	.word	0x20000955
 8002978:	20001100 	.word	0x20001100
 800297c:	ff0000ff 	.word	0xff0000ff

08002980 <StartSD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSD */
void StartSD(void const * argument)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSD */
	SD_Init();
 8002988:	f7fe fc16 	bl	80011b8 <SD_Init>
	enable = 1;
 800298c:	4b06      	ldr	r3, [pc, #24]	; (80029a8 <StartSD+0x28>)
 800298e:	2201      	movs	r2, #1
 8002990:	701a      	strb	r2, [r3, #0]
	vTaskDelete(SDHandle);
 8002992:	4b06      	ldr	r3, [pc, #24]	; (80029ac <StartSD+0x2c>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4618      	mov	r0, r3
 8002998:	f010 fcbc 	bl	8013314 <vTaskDelete>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 800299c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80029a0:	f00f f924 	bl	8011bec <osDelay>
 80029a4:	e7fa      	b.n	800299c <StartSD+0x1c>
 80029a6:	bf00      	nop
 80029a8:	20000954 	.word	0x20000954
 80029ac:	20000948 	.word	0x20000948

080029b0 <Play_Wave>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Play_Wave */
void Play_Wave(void const * argument)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b088      	sub	sp, #32
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
	float minutes;
	float secondes;
	  /* Infinite loop */
	  for(;;)
	  {
		  xQueueReceive(WakeUpHandle, &i, portMAX_DELAY);
 80029b8:	4b66      	ldr	r3, [pc, #408]	; (8002b54 <Play_Wave+0x1a4>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f107 010f 	add.w	r1, r7, #15
 80029c0:	f04f 32ff 	mov.w	r2, #4294967295
 80029c4:	4618      	mov	r0, r3
 80029c6:	f00f ff09 	bl	80127dc <xQueueReceive>
		  if (i==0){
 80029ca:	7bfb      	ldrb	r3, [r7, #15]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d160      	bne.n	8002a92 <Play_Wave+0xe2>
			  if (Bloc_Cursor++==NB_Bloc-1){
 80029d0:	4b61      	ldr	r3, [pc, #388]	; (8002b58 <Play_Wave+0x1a8>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	1c5a      	adds	r2, r3, #1
 80029d6:	4960      	ldr	r1, [pc, #384]	; (8002b58 <Play_Wave+0x1a8>)
 80029d8:	600a      	str	r2, [r1, #0]
 80029da:	4a60      	ldr	r2, [pc, #384]	; (8002b5c <Play_Wave+0x1ac>)
 80029dc:	6812      	ldr	r2, [r2, #0]
 80029de:	3a01      	subs	r2, #1
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d10c      	bne.n	80029fe <Play_Wave+0x4e>
				  f_lseek(&SDFile, 44);
 80029e4:	212c      	movs	r1, #44	; 0x2c
 80029e6:	485e      	ldr	r0, [pc, #376]	; (8002b60 <Play_Wave+0x1b0>)
 80029e8:	f00e fd6d 	bl	80114c6 <f_lseek>
				  Bloc_Cursor=0;
 80029ec:	4b5a      	ldr	r3, [pc, #360]	; (8002b58 <Play_Wave+0x1a8>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	601a      	str	r2, [r3, #0]
				  f_close(&SDFile);
 80029f2:	485b      	ldr	r0, [pc, #364]	; (8002b60 <Play_Wave+0x1b0>)
 80029f4:	f00e fd38 	bl	8011468 <f_close>
				  Charge_Wave(1);
 80029f8:	2001      	movs	r0, #1
 80029fa:	f7fe fd3b 	bl	8001474 <Charge_Wave>
			  }
			  f_read(&SDFile, ((uint8_t*)AUDIO_BUFFER_OUT), AUDIO_BLOCK_SIZE,(void*) &bytesread);
 80029fe:	f107 0308 	add.w	r3, r7, #8
 8002a02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a06:	4957      	ldr	r1, [pc, #348]	; (8002b64 <Play_Wave+0x1b4>)
 8002a08:	4855      	ldr	r0, [pc, #340]	; (8002b60 <Play_Wave+0x1b0>)
 8002a0a:	f00e fb36 	bl	801107a <f_read>

			  taille_octet=512*Bloc_Cursor;
 8002a0e:	4b52      	ldr	r3, [pc, #328]	; (8002b58 <Play_Wave+0x1a8>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	025b      	lsls	r3, r3, #9
 8002a14:	61fb      	str	r3, [r7, #28]
			  nombre_secondes=taille_octet/Nb_octets_seconde;
 8002a16:	4b54      	ldr	r3, [pc, #336]	; (8002b68 <Play_Wave+0x1b8>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	69fa      	ldr	r2, [r7, #28]
 8002a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a20:	ee07 3a90 	vmov	s15, r3
 8002a24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a28:	edc7 7a06 	vstr	s15, [r7, #24]
			  	minutes=nombre_secondes/60;
 8002a2c:	ed97 7a06 	vldr	s14, [r7, #24]
 8002a30:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8002b6c <Play_Wave+0x1bc>
 8002a34:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a38:	edc7 7a05 	vstr	s15, [r7, #20]
			  	secondes=((uint32_t)nombre_secondes)%60;
 8002a3c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002a40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a44:	ee17 1a90 	vmov	r1, s15
 8002a48:	4b49      	ldr	r3, [pc, #292]	; (8002b70 <Play_Wave+0x1c0>)
 8002a4a:	fba3 2301 	umull	r2, r3, r3, r1
 8002a4e:	095a      	lsrs	r2, r3, #5
 8002a50:	4613      	mov	r3, r2
 8002a52:	011b      	lsls	r3, r3, #4
 8002a54:	1a9b      	subs	r3, r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	1aca      	subs	r2, r1, r3
 8002a5a:	ee07 2a90 	vmov	s15, r2
 8002a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a62:	edc7 7a04 	vstr	s15, [r7, #16]
			  	sprintf(duree_actuelle,"%u:%2u",(uint8_t)minutes,(uint8_t)secondes);
 8002a66:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a6e:	edc7 7a00 	vstr	s15, [r7]
 8002a72:	783b      	ldrb	r3, [r7, #0]
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	461a      	mov	r2, r3
 8002a78:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a80:	edc7 7a00 	vstr	s15, [r7]
 8002a84:	783b      	ldrb	r3, [r7, #0]
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	493a      	ldr	r1, [pc, #232]	; (8002b74 <Play_Wave+0x1c4>)
 8002a8a:	483b      	ldr	r0, [pc, #236]	; (8002b78 <Play_Wave+0x1c8>)
 8002a8c:	f012 f804 	bl	8014a98 <siprintf>
 8002a90:	e792      	b.n	80029b8 <Play_Wave+0x8>
//			  minutes=nombre_secondes/60;
//			  secondes=((uint32_t)nombre_secondes)%60;
//			  sprintf(duree_actuelle,"%u:%u",(uint8_t)minutes,(uint8_t)secondes);
		  }
		  else{
			  if (Bloc_Cursor++==NB_Bloc-1){
 8002a92:	4b31      	ldr	r3, [pc, #196]	; (8002b58 <Play_Wave+0x1a8>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	1c5a      	adds	r2, r3, #1
 8002a98:	492f      	ldr	r1, [pc, #188]	; (8002b58 <Play_Wave+0x1a8>)
 8002a9a:	600a      	str	r2, [r1, #0]
 8002a9c:	4a2f      	ldr	r2, [pc, #188]	; (8002b5c <Play_Wave+0x1ac>)
 8002a9e:	6812      	ldr	r2, [r2, #0]
 8002aa0:	3a01      	subs	r2, #1
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d10c      	bne.n	8002ac0 <Play_Wave+0x110>
				  f_lseek(&SDFile, 44);
 8002aa6:	212c      	movs	r1, #44	; 0x2c
 8002aa8:	482d      	ldr	r0, [pc, #180]	; (8002b60 <Play_Wave+0x1b0>)
 8002aaa:	f00e fd0c 	bl	80114c6 <f_lseek>
				  Bloc_Cursor=0;
 8002aae:	4b2a      	ldr	r3, [pc, #168]	; (8002b58 <Play_Wave+0x1a8>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	601a      	str	r2, [r3, #0]
				  f_close(&SDFile);
 8002ab4:	482a      	ldr	r0, [pc, #168]	; (8002b60 <Play_Wave+0x1b0>)
 8002ab6:	f00e fcd7 	bl	8011468 <f_close>
				  Charge_Wave(1);
 8002aba:	2001      	movs	r0, #1
 8002abc:	f7fe fcda 	bl	8001474 <Charge_Wave>
			  }
			  f_read(&SDFile, ((uint8_t*)AUDIO_BUFFER_OUT+AUDIO_BLOCK_SIZE), AUDIO_BLOCK_SIZE,(void*) &bytesread);
 8002ac0:	f107 0308 	add.w	r3, r7, #8
 8002ac4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ac8:	492c      	ldr	r1, [pc, #176]	; (8002b7c <Play_Wave+0x1cc>)
 8002aca:	4825      	ldr	r0, [pc, #148]	; (8002b60 <Play_Wave+0x1b0>)
 8002acc:	f00e fad5 	bl	801107a <f_read>

			  taille_octet=512*Bloc_Cursor;
 8002ad0:	4b21      	ldr	r3, [pc, #132]	; (8002b58 <Play_Wave+0x1a8>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	025b      	lsls	r3, r3, #9
 8002ad6:	61fb      	str	r3, [r7, #28]
			  nombre_secondes=taille_octet/Nb_octets_seconde;
 8002ad8:	4b23      	ldr	r3, [pc, #140]	; (8002b68 <Play_Wave+0x1b8>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	69fa      	ldr	r2, [r7, #28]
 8002ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae2:	ee07 3a90 	vmov	s15, r3
 8002ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002aea:	edc7 7a06 	vstr	s15, [r7, #24]
			  minutes=nombre_secondes/60;
 8002aee:	ed97 7a06 	vldr	s14, [r7, #24]
 8002af2:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8002b6c <Play_Wave+0x1bc>
 8002af6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002afa:	edc7 7a05 	vstr	s15, [r7, #20]
			  secondes=((uint32_t)nombre_secondes)%60;
 8002afe:	edd7 7a06 	vldr	s15, [r7, #24]
 8002b02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b06:	ee17 1a90 	vmov	r1, s15
 8002b0a:	4b19      	ldr	r3, [pc, #100]	; (8002b70 <Play_Wave+0x1c0>)
 8002b0c:	fba3 2301 	umull	r2, r3, r3, r1
 8002b10:	095a      	lsrs	r2, r3, #5
 8002b12:	4613      	mov	r3, r2
 8002b14:	011b      	lsls	r3, r3, #4
 8002b16:	1a9b      	subs	r3, r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	1aca      	subs	r2, r1, r3
 8002b1c:	ee07 2a90 	vmov	s15, r2
 8002b20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b24:	edc7 7a04 	vstr	s15, [r7, #16]
			  sprintf(duree_actuelle,"%u:%2u",(uint8_t)minutes,(uint8_t)secondes);
 8002b28:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b30:	edc7 7a00 	vstr	s15, [r7]
 8002b34:	783b      	ldrb	r3, [r7, #0]
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	461a      	mov	r2, r3
 8002b3a:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b42:	edc7 7a00 	vstr	s15, [r7]
 8002b46:	783b      	ldrb	r3, [r7, #0]
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	490a      	ldr	r1, [pc, #40]	; (8002b74 <Play_Wave+0x1c4>)
 8002b4c:	480a      	ldr	r0, [pc, #40]	; (8002b78 <Play_Wave+0x1c8>)
 8002b4e:	f011 ffa3 	bl	8014a98 <siprintf>
		  xQueueReceive(WakeUpHandle, &i, portMAX_DELAY);
 8002b52:	e731      	b.n	80029b8 <Play_Wave+0x8>
 8002b54:	20000950 	.word	0x20000950
 8002b58:	2000095c 	.word	0x2000095c
 8002b5c:	20000958 	.word	0x20000958
 8002b60:	20001100 	.word	0x20001100
 8002b64:	c007fc00 	.word	0xc007fc00
 8002b68:	20000028 	.word	0x20000028
 8002b6c:	42700000 	.word	0x42700000
 8002b70:	88888889 	.word	0x88888889
 8002b74:	08015400 	.word	0x08015400
 8002b78:	2000098c 	.word	0x2000098c
 8002b7c:	c007fe00 	.word	0xc007fe00

08002b80 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a04      	ldr	r2, [pc, #16]	; (8002ba0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d101      	bne.n	8002b96 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002b92:	f004 fbd7 	bl	8007344 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002b96:	bf00      	nop
 8002b98:	3708      	adds	r7, #8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	40001000 	.word	0x40001000

08002ba4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002ba8:	b672      	cpsid	i
}
 8002baa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002bac:	e7fe      	b.n	8002bac <Error_Handler+0x8>
	...

08002bb0 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b08c      	sub	sp, #48	; 0x30
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4a51      	ldr	r2, [pc, #324]	; (8002d00 <I2Cx_MspInit+0x150>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d14d      	bne.n	8002c5c <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002bc0:	4b50      	ldr	r3, [pc, #320]	; (8002d04 <I2Cx_MspInit+0x154>)
 8002bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc4:	4a4f      	ldr	r2, [pc, #316]	; (8002d04 <I2Cx_MspInit+0x154>)
 8002bc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bca:	6313      	str	r3, [r2, #48]	; 0x30
 8002bcc:	4b4d      	ldr	r3, [pc, #308]	; (8002d04 <I2Cx_MspInit+0x154>)
 8002bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bd4:	61bb      	str	r3, [r7, #24]
 8002bd6:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8002bd8:	2380      	movs	r3, #128	; 0x80
 8002bda:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002bdc:	2312      	movs	r3, #18
 8002bde:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002be0:	2300      	movs	r3, #0
 8002be2:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002be4:	2302      	movs	r3, #2
 8002be6:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8002be8:	2304      	movs	r3, #4
 8002bea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002bec:	f107 031c 	add.w	r3, r7, #28
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	4845      	ldr	r0, [pc, #276]	; (8002d08 <I2Cx_MspInit+0x158>)
 8002bf4:	f005 fdf0 	bl	80087d8 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8002bf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bfc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002bfe:	f107 031c 	add.w	r3, r7, #28
 8002c02:	4619      	mov	r1, r3
 8002c04:	4840      	ldr	r0, [pc, #256]	; (8002d08 <I2Cx_MspInit+0x158>)
 8002c06:	f005 fde7 	bl	80087d8 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8002c0a:	4b3e      	ldr	r3, [pc, #248]	; (8002d04 <I2Cx_MspInit+0x154>)
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0e:	4a3d      	ldr	r2, [pc, #244]	; (8002d04 <I2Cx_MspInit+0x154>)
 8002c10:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c14:	6413      	str	r3, [r2, #64]	; 0x40
 8002c16:	4b3b      	ldr	r3, [pc, #236]	; (8002d04 <I2Cx_MspInit+0x154>)
 8002c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c1e:	617b      	str	r3, [r7, #20]
 8002c20:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8002c22:	4b38      	ldr	r3, [pc, #224]	; (8002d04 <I2Cx_MspInit+0x154>)
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	4a37      	ldr	r2, [pc, #220]	; (8002d04 <I2Cx_MspInit+0x154>)
 8002c28:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c2c:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8002c2e:	4b35      	ldr	r3, [pc, #212]	; (8002d04 <I2Cx_MspInit+0x154>)
 8002c30:	6a1b      	ldr	r3, [r3, #32]
 8002c32:	4a34      	ldr	r2, [pc, #208]	; (8002d04 <I2Cx_MspInit+0x154>)
 8002c34:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002c38:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	210f      	movs	r1, #15
 8002c3e:	2048      	movs	r0, #72	; 0x48
 8002c40:	f004 ff10 	bl	8007a64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8002c44:	2048      	movs	r0, #72	; 0x48
 8002c46:	f004 ff29 	bl	8007a9c <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	210f      	movs	r1, #15
 8002c4e:	2049      	movs	r0, #73	; 0x49
 8002c50:	f004 ff08 	bl	8007a64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8002c54:	2049      	movs	r0, #73	; 0x49
 8002c56:	f004 ff21 	bl	8007a9c <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8002c5a:	e04d      	b.n	8002cf8 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002c5c:	4b29      	ldr	r3, [pc, #164]	; (8002d04 <I2Cx_MspInit+0x154>)
 8002c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c60:	4a28      	ldr	r2, [pc, #160]	; (8002d04 <I2Cx_MspInit+0x154>)
 8002c62:	f043 0302 	orr.w	r3, r3, #2
 8002c66:	6313      	str	r3, [r2, #48]	; 0x30
 8002c68:	4b26      	ldr	r3, [pc, #152]	; (8002d04 <I2Cx_MspInit+0x154>)
 8002c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	613b      	str	r3, [r7, #16]
 8002c72:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8002c74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c78:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002c7a:	2312      	movs	r3, #18
 8002c7c:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002c82:	2302      	movs	r3, #2
 8002c84:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8002c86:	2304      	movs	r3, #4
 8002c88:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002c8a:	f107 031c 	add.w	r3, r7, #28
 8002c8e:	4619      	mov	r1, r3
 8002c90:	481e      	ldr	r0, [pc, #120]	; (8002d0c <I2Cx_MspInit+0x15c>)
 8002c92:	f005 fda1 	bl	80087d8 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8002c96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002c9c:	f107 031c 	add.w	r3, r7, #28
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	481a      	ldr	r0, [pc, #104]	; (8002d0c <I2Cx_MspInit+0x15c>)
 8002ca4:	f005 fd98 	bl	80087d8 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8002ca8:	4b16      	ldr	r3, [pc, #88]	; (8002d04 <I2Cx_MspInit+0x154>)
 8002caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cac:	4a15      	ldr	r2, [pc, #84]	; (8002d04 <I2Cx_MspInit+0x154>)
 8002cae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002cb2:	6413      	str	r3, [r2, #64]	; 0x40
 8002cb4:	4b13      	ldr	r3, [pc, #76]	; (8002d04 <I2Cx_MspInit+0x154>)
 8002cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cbc:	60fb      	str	r3, [r7, #12]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8002cc0:	4b10      	ldr	r3, [pc, #64]	; (8002d04 <I2Cx_MspInit+0x154>)
 8002cc2:	6a1b      	ldr	r3, [r3, #32]
 8002cc4:	4a0f      	ldr	r2, [pc, #60]	; (8002d04 <I2Cx_MspInit+0x154>)
 8002cc6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002cca:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8002ccc:	4b0d      	ldr	r3, [pc, #52]	; (8002d04 <I2Cx_MspInit+0x154>)
 8002cce:	6a1b      	ldr	r3, [r3, #32]
 8002cd0:	4a0c      	ldr	r2, [pc, #48]	; (8002d04 <I2Cx_MspInit+0x154>)
 8002cd2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002cd6:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8002cd8:	2200      	movs	r2, #0
 8002cda:	210f      	movs	r1, #15
 8002cdc:	201f      	movs	r0, #31
 8002cde:	f004 fec1 	bl	8007a64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8002ce2:	201f      	movs	r0, #31
 8002ce4:	f004 feda 	bl	8007a9c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8002ce8:	2200      	movs	r2, #0
 8002cea:	210f      	movs	r1, #15
 8002cec:	2020      	movs	r0, #32
 8002cee:	f004 feb9 	bl	8007a64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8002cf2:	2020      	movs	r0, #32
 8002cf4:	f004 fed2 	bl	8007a9c <HAL_NVIC_EnableIRQ>
}
 8002cf8:	bf00      	nop
 8002cfa:	3730      	adds	r7, #48	; 0x30
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	200009c4 	.word	0x200009c4
 8002d04:	40023800 	.word	0x40023800
 8002d08:	40021c00 	.word	0x40021c00
 8002d0c:	40020400 	.word	0x40020400

08002d10 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f006 fb49 	bl	80093b0 <HAL_I2C_GetState>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d125      	bne.n	8002d70 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a14      	ldr	r2, [pc, #80]	; (8002d78 <I2Cx_Init+0x68>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d103      	bne.n	8002d34 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4a13      	ldr	r2, [pc, #76]	; (8002d7c <I2Cx_Init+0x6c>)
 8002d30:	601a      	str	r2, [r3, #0]
 8002d32:	e002      	b.n	8002d3a <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a12      	ldr	r2, [pc, #72]	; (8002d80 <I2Cx_Init+0x70>)
 8002d38:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a11      	ldr	r2, [pc, #68]	; (8002d84 <I2Cx_Init+0x74>)
 8002d3e:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f7ff ff23 	bl	8002bb0 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f006 f81e 	bl	8008dac <HAL_I2C_Init>
  }
}
 8002d70:	bf00      	nop
 8002d72:	3708      	adds	r7, #8
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	200009c4 	.word	0x200009c4
 8002d7c:	40005c00 	.word	0x40005c00
 8002d80:	40005400 	.word	0x40005400
 8002d84:	40912732 	.word	0x40912732

08002d88 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b08a      	sub	sp, #40	; 0x28
 8002d8c:	af04      	add	r7, sp, #16
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	4608      	mov	r0, r1
 8002d92:	4611      	mov	r1, r2
 8002d94:	461a      	mov	r2, r3
 8002d96:	4603      	mov	r3, r0
 8002d98:	72fb      	strb	r3, [r7, #11]
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	813b      	strh	r3, [r7, #8]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002da2:	2300      	movs	r3, #0
 8002da4:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002da6:	7afb      	ldrb	r3, [r7, #11]
 8002da8:	b299      	uxth	r1, r3
 8002daa:	88f8      	ldrh	r0, [r7, #6]
 8002dac:	893a      	ldrh	r2, [r7, #8]
 8002dae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002db2:	9302      	str	r3, [sp, #8]
 8002db4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002db6:	9301      	str	r3, [sp, #4]
 8002db8:	6a3b      	ldr	r3, [r7, #32]
 8002dba:	9300      	str	r3, [sp, #0]
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f006 f9dc 	bl	800917c <HAL_I2C_Mem_Read>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002dc8:	7dfb      	ldrb	r3, [r7, #23]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d004      	beq.n	8002dd8 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8002dce:	7afb      	ldrb	r3, [r7, #11]
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	68f8      	ldr	r0, [r7, #12]
 8002dd4:	f000 f832 	bl	8002e3c <I2Cx_Error>
  }
  return status;    
 8002dd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3718      	adds	r7, #24
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b08a      	sub	sp, #40	; 0x28
 8002de6:	af04      	add	r7, sp, #16
 8002de8:	60f8      	str	r0, [r7, #12]
 8002dea:	4608      	mov	r0, r1
 8002dec:	4611      	mov	r1, r2
 8002dee:	461a      	mov	r2, r3
 8002df0:	4603      	mov	r3, r0
 8002df2:	72fb      	strb	r3, [r7, #11]
 8002df4:	460b      	mov	r3, r1
 8002df6:	813b      	strh	r3, [r7, #8]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002e00:	7afb      	ldrb	r3, [r7, #11]
 8002e02:	b299      	uxth	r1, r3
 8002e04:	88f8      	ldrh	r0, [r7, #6]
 8002e06:	893a      	ldrh	r2, [r7, #8]
 8002e08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e0c:	9302      	str	r3, [sp, #8]
 8002e0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002e10:	9301      	str	r3, [sp, #4]
 8002e12:	6a3b      	ldr	r3, [r7, #32]
 8002e14:	9300      	str	r3, [sp, #0]
 8002e16:	4603      	mov	r3, r0
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f006 f89b 	bl	8008f54 <HAL_I2C_Mem_Write>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002e22:	7dfb      	ldrb	r3, [r7, #23]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d004      	beq.n	8002e32 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002e28:	7afb      	ldrb	r3, [r7, #11]
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	68f8      	ldr	r0, [r7, #12]
 8002e2e:	f000 f805 	bl	8002e3c <I2Cx_Error>
  }
  return status;
 8002e32:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3718      	adds	r7, #24
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	460b      	mov	r3, r1
 8002e46:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f006 f83f 	bl	8008ecc <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f7ff ff5e 	bl	8002d10 <I2Cx_Init>
}
 8002e54:	bf00      	nop
 8002e56:	3708      	adds	r7, #8
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8002e60:	4802      	ldr	r0, [pc, #8]	; (8002e6c <AUDIO_IO_Init+0x10>)
 8002e62:	f7ff ff55 	bl	8002d10 <I2Cx_Init>
}
 8002e66:	bf00      	nop
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	200009c4 	.word	0x200009c4

08002e70 <AUDIO_IO_DeInit>:
/**
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
}
 8002e74:	bf00      	nop
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
	...

08002e80 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b086      	sub	sp, #24
 8002e84:	af02      	add	r7, sp, #8
 8002e86:	4603      	mov	r3, r0
 8002e88:	71fb      	strb	r3, [r7, #7]
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	80bb      	strh	r3, [r7, #4]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	807b      	strh	r3, [r7, #2]
  uint16_t tmp = Value;
 8002e92:	887b      	ldrh	r3, [r7, #2]
 8002e94:	81fb      	strh	r3, [r7, #14]
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 8002e96:	89fb      	ldrh	r3, [r7, #14]
 8002e98:	0a1b      	lsrs	r3, r3, #8
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	807b      	strh	r3, [r7, #2]
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 8002e9e:	89fb      	ldrh	r3, [r7, #14]
 8002ea0:	021b      	lsls	r3, r3, #8
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	b21a      	sxth	r2, r3
 8002ea6:	887b      	ldrh	r3, [r7, #2]
 8002ea8:	b21b      	sxth	r3, r3
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	b21b      	sxth	r3, r3
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	807b      	strh	r3, [r7, #2]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 8002eb2:	88ba      	ldrh	r2, [r7, #4]
 8002eb4:	79f9      	ldrb	r1, [r7, #7]
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	9301      	str	r3, [sp, #4]
 8002eba:	1cbb      	adds	r3, r7, #2
 8002ebc:	9300      	str	r3, [sp, #0]
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	4803      	ldr	r0, [pc, #12]	; (8002ed0 <AUDIO_IO_Write+0x50>)
 8002ec2:	f7ff ff8e 	bl	8002de2 <I2Cx_WriteMultiple>
}
 8002ec6:	bf00      	nop
 8002ec8:	3710      	adds	r7, #16
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	200009c4 	.word	0x200009c4

08002ed4 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b086      	sub	sp, #24
 8002ed8:	af02      	add	r7, sp, #8
 8002eda:	4603      	mov	r3, r0
 8002edc:	460a      	mov	r2, r1
 8002ede:	71fb      	strb	r3, [r7, #7]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	80bb      	strh	r3, [r7, #4]
  uint16_t read_value = 0, tmp = 0;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	81bb      	strh	r3, [r7, #12]
 8002ee8:	2300      	movs	r3, #0
 8002eea:	81fb      	strh	r3, [r7, #14]
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 8002eec:	88ba      	ldrh	r2, [r7, #4]
 8002eee:	79f9      	ldrb	r1, [r7, #7]
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	9301      	str	r3, [sp, #4]
 8002ef4:	f107 030c 	add.w	r3, r7, #12
 8002ef8:	9300      	str	r3, [sp, #0]
 8002efa:	2302      	movs	r3, #2
 8002efc:	480a      	ldr	r0, [pc, #40]	; (8002f28 <AUDIO_IO_Read+0x54>)
 8002efe:	f7ff ff43 	bl	8002d88 <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 8002f02:	89bb      	ldrh	r3, [r7, #12]
 8002f04:	0a1b      	lsrs	r3, r3, #8
 8002f06:	81fb      	strh	r3, [r7, #14]
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 8002f08:	89bb      	ldrh	r3, [r7, #12]
 8002f0a:	021b      	lsls	r3, r3, #8
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	b21a      	sxth	r2, r3
 8002f10:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	b21b      	sxth	r3, r3
 8002f18:	81fb      	strh	r3, [r7, #14]
  
  read_value = tmp;
 8002f1a:	89fb      	ldrh	r3, [r7, #14]
 8002f1c:	81bb      	strh	r3, [r7, #12]
  
  return read_value;
 8002f1e:	89bb      	ldrh	r3, [r7, #12]
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	200009c4 	.word	0x200009c4

08002f2c <AUDIO_IO_Delay>:
  * @brief  AUDIO Codec delay 
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f004 fa25 	bl	8007384 <HAL_Delay>
}
 8002f3a:	bf00      	nop
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
	...

08002f44 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8002f48:	4802      	ldr	r0, [pc, #8]	; (8002f54 <TS_IO_Init+0x10>)
 8002f4a:	f7ff fee1 	bl	8002d10 <I2Cx_Init>
}
 8002f4e:	bf00      	nop
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	200009c4 	.word	0x200009c4

08002f58 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af02      	add	r7, sp, #8
 8002f5e:	4603      	mov	r3, r0
 8002f60:	71fb      	strb	r3, [r7, #7]
 8002f62:	460b      	mov	r3, r1
 8002f64:	71bb      	strb	r3, [r7, #6]
 8002f66:	4613      	mov	r3, r2
 8002f68:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8002f6a:	79bb      	ldrb	r3, [r7, #6]
 8002f6c:	b29a      	uxth	r2, r3
 8002f6e:	79f9      	ldrb	r1, [r7, #7]
 8002f70:	2301      	movs	r3, #1
 8002f72:	9301      	str	r3, [sp, #4]
 8002f74:	1d7b      	adds	r3, r7, #5
 8002f76:	9300      	str	r3, [sp, #0]
 8002f78:	2301      	movs	r3, #1
 8002f7a:	4803      	ldr	r0, [pc, #12]	; (8002f88 <TS_IO_Write+0x30>)
 8002f7c:	f7ff ff31 	bl	8002de2 <I2Cx_WriteMultiple>
}
 8002f80:	bf00      	nop
 8002f82:	3708      	adds	r7, #8
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	200009c4 	.word	0x200009c4

08002f8c <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b086      	sub	sp, #24
 8002f90:	af02      	add	r7, sp, #8
 8002f92:	4603      	mov	r3, r0
 8002f94:	460a      	mov	r2, r1
 8002f96:	71fb      	strb	r3, [r7, #7]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002fa0:	79bb      	ldrb	r3, [r7, #6]
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	79f9      	ldrb	r1, [r7, #7]
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	9301      	str	r3, [sp, #4]
 8002faa:	f107 030f 	add.w	r3, r7, #15
 8002fae:	9300      	str	r3, [sp, #0]
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	4804      	ldr	r0, [pc, #16]	; (8002fc4 <TS_IO_Read+0x38>)
 8002fb4:	f7ff fee8 	bl	8002d88 <I2Cx_ReadMultiple>

  return read_value;
 8002fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	200009c4 	.word	0x200009c4

08002fc8 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f004 f9d7 	bl	8007384 <HAL_Delay>
}
 8002fd6:	bf00      	nop
 8002fd8:	3708      	adds	r7, #8
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
	...

08002fe0 <BSP_AUDIO_OUT_Play>:
 * @param  pBuffer: Pointer to the buffer
 * @param  Size: Number of audio data in BYTES unit.
 *         In memory, first element is for left channel, second element is for right channel
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
uint8_t BSP_AUDIO_OUT_Play(uint16_t *pBuffer, uint32_t Size) {
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
	/* Call the audio Codec Play function */
	if (audio_drv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0) {
 8002fea:	4b10      	ldr	r3, [pc, #64]	; (800302c <BSP_AUDIO_OUT_Play+0x4c>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	683a      	ldr	r2, [r7, #0]
 8002ff2:	b292      	uxth	r2, r2
 8002ff4:	6879      	ldr	r1, [r7, #4]
 8002ff6:	2034      	movs	r0, #52	; 0x34
 8002ff8:	4798      	blx	r3
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <BSP_AUDIO_OUT_Play+0x24>
		return AUDIO_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e00f      	b.n	8003024 <BSP_AUDIO_OUT_Play+0x44>
	} else {
		/* Update the Media layer and enable it for play */
		HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pBuffer,
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800300a:	d203      	bcs.n	8003014 <BSP_AUDIO_OUT_Play+0x34>
				DMA_MAX(Size / AUDIODATA_SIZE));
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	085b      	lsrs	r3, r3, #1
		HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pBuffer,
 8003010:	b29b      	uxth	r3, r3
 8003012:	e001      	b.n	8003018 <BSP_AUDIO_OUT_Play+0x38>
 8003014:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003018:	461a      	mov	r2, r3
 800301a:	6879      	ldr	r1, [r7, #4]
 800301c:	4804      	ldr	r0, [pc, #16]	; (8003030 <BSP_AUDIO_OUT_Play+0x50>)
 800301e:	f008 fd49 	bl	800bab4 <HAL_SAI_Transmit_DMA>

		return AUDIO_OK;
 8003022:	2300      	movs	r3, #0
	}
}
 8003024:	4618      	mov	r0, r3
 8003026:	3708      	adds	r7, #8
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	20000a18 	.word	0x20000a18
 8003030:	20000a1c 	.word	0x20000a1c

08003034 <BSP_AUDIO_OUT_Pause>:
 * @note When calling BSP_AUDIO_OUT_Pause() function for pause, only
 *          BSP_AUDIO_OUT_Resume() function should be called for resume (use of BSP_AUDIO_OUT_Play()
 *          function for resume could lead to unexpected behaviour).
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
uint8_t BSP_AUDIO_OUT_Pause(void) {
 8003034:	b580      	push	{r7, lr}
 8003036:	af00      	add	r7, sp, #0
	/* Call the Audio Codec Pause/Resume function */
	if (audio_drv->Pause(AUDIO_I2C_ADDRESS) != 0) {
 8003038:	4b07      	ldr	r3, [pc, #28]	; (8003058 <BSP_AUDIO_OUT_Pause+0x24>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	2034      	movs	r0, #52	; 0x34
 8003040:	4798      	blx	r3
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d001      	beq.n	800304c <BSP_AUDIO_OUT_Pause+0x18>
		return AUDIO_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e003      	b.n	8003054 <BSP_AUDIO_OUT_Pause+0x20>
	} else {
		/* Call the Media layer pause function */
		HAL_SAI_DMAPause(&haudio_out_sai);
 800304c:	4803      	ldr	r0, [pc, #12]	; (800305c <BSP_AUDIO_OUT_Pause+0x28>)
 800304e:	f008 fcde 	bl	800ba0e <HAL_SAI_DMAPause>

		/* Return AUDIO_OK when all operations are correctly done */
		return AUDIO_OK;
 8003052:	2300      	movs	r3, #0
	}
}
 8003054:	4618      	mov	r0, r3
 8003056:	bd80      	pop	{r7, pc}
 8003058:	20000a18 	.word	0x20000a18
 800305c:	20000a1c 	.word	0x20000a1c

08003060 <BSP_AUDIO_OUT_Resume>:
 * @note When calling BSP_AUDIO_OUT_Pause() function for pause, only
 *          BSP_AUDIO_OUT_Resume() function should be called for resume (use of BSP_AUDIO_OUT_Play()
 *          function for resume could lead to unexpected behaviour).
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
uint8_t BSP_AUDIO_OUT_Resume(void) {
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
	/* Call the Audio Codec Pause/Resume function */
	if (audio_drv->Resume(AUDIO_I2C_ADDRESS) != 0) {
 8003064:	4b07      	ldr	r3, [pc, #28]	; (8003084 <BSP_AUDIO_OUT_Resume+0x24>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	2034      	movs	r0, #52	; 0x34
 800306c:	4798      	blx	r3
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d001      	beq.n	8003078 <BSP_AUDIO_OUT_Resume+0x18>
		return AUDIO_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e003      	b.n	8003080 <BSP_AUDIO_OUT_Resume+0x20>
	} else {
		/* Call the Media layer pause/resume function */
		HAL_SAI_DMAResume(&haudio_out_sai);
 8003078:	4803      	ldr	r0, [pc, #12]	; (8003088 <BSP_AUDIO_OUT_Resume+0x28>)
 800307a:	f008 fcea 	bl	800ba52 <HAL_SAI_DMAResume>

		/* Return AUDIO_OK when all operations are correctly done */
		return AUDIO_OK;
 800307e:	2300      	movs	r3, #0
	}
}
 8003080:	4618      	mov	r0, r3
 8003082:	bd80      	pop	{r7, pc}
 8003084:	20000a18 	.word	0x20000a18
 8003088:	20000a1c 	.word	0x20000a1c

0800308c <BSP_AUDIO_OUT_SetAudioFrameSlot>:
 *            @arg CODEC_AUDIOFRAME_SLOT_13
 * @note   This API should be called after the BSP_AUDIO_OUT_Init() to adjust the
 *         audio frame slot.
 * @retval None
 */
void BSP_AUDIO_OUT_SetAudioFrameSlot(uint32_t AudioFrameSlot) {
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
	/* Disable SAI peripheral to allow access to SAI internal registers */
	__HAL_SAI_DISABLE(&haudio_out_sai);
 8003094:	4b0c      	ldr	r3, [pc, #48]	; (80030c8 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	4b0b      	ldr	r3, [pc, #44]	; (80030c8 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80030a2:	601a      	str	r2, [r3, #0]

	/* Update the SAI audio frame slot configuration */
	haudio_out_sai.SlotInit.SlotActive = AudioFrameSlot;
 80030a4:	4a08      	ldr	r2, [pc, #32]	; (80030c8 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6613      	str	r3, [r2, #96]	; 0x60
	HAL_SAI_Init(&haudio_out_sai);
 80030aa:	4807      	ldr	r0, [pc, #28]	; (80030c8 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 80030ac:	f008 fafc 	bl	800b6a8 <HAL_SAI_Init>

	/* Enable SAI peripheral to generate MCLK */
	__HAL_SAI_ENABLE(&haudio_out_sai);
 80030b0:	4b05      	ldr	r3, [pc, #20]	; (80030c8 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	4b04      	ldr	r3, [pc, #16]	; (80030c8 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80030be:	601a      	str	r2, [r3, #0]
}
 80030c0:	bf00      	nop
 80030c2:	3708      	adds	r7, #8
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	20000a1c 	.word	0x20000a1c

080030cc <HAL_SAI_TxCpltCallback>:
/**
 * @brief  Tx Transfer completed callbacks.
 * @param  hsai: SAI handle
 * @retval None
 */
void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai) {
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
	/* Manage the remaining file size and new address offset: This function
	 should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
	BSP_AUDIO_OUT_TransferComplete_CallBack();
 80030d4:	f7ff f990 	bl	80023f8 <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 80030d8:	bf00      	nop
 80030da:	3708      	adds	r7, #8
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <HAL_SAI_TxHalfCpltCallback>:
/**
 * @brief  Tx Half Transfer completed callbacks.
 * @param  hsai: SAI handle
 * @retval None
 */
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
	/* Manage the remaining file size and new address offset: This function
	 should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
	BSP_AUDIO_OUT_HalfTransfer_CallBack();
 80030e8:	f7ff f998 	bl	800241c <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 80030ec:	bf00      	nop
 80030ee:	3708      	adds	r7, #8
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <HAL_SAI_ErrorCallback>:
/**
 * @brief  SAI error callbacks.
 * @param  hsai: SAI handle
 * @retval None
 */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai) {
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
	HAL_SAI_StateTypeDef audio_out_state;
	HAL_SAI_StateTypeDef audio_in_state;

	audio_out_state = HAL_SAI_GetState(&haudio_out_sai);
 80030fc:	480e      	ldr	r0, [pc, #56]	; (8003138 <HAL_SAI_ErrorCallback+0x44>)
 80030fe:	f008 fd89 	bl	800bc14 <HAL_SAI_GetState>
 8003102:	4603      	mov	r3, r0
 8003104:	73fb      	strb	r3, [r7, #15]
	audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 8003106:	480d      	ldr	r0, [pc, #52]	; (800313c <HAL_SAI_ErrorCallback+0x48>)
 8003108:	f008 fd84 	bl	800bc14 <HAL_SAI_GetState>
 800310c:	4603      	mov	r3, r0
 800310e:	73bb      	strb	r3, [r7, #14]

	/* Determines if it is an audio out or audio in error */
	if ((audio_out_state == HAL_SAI_STATE_BUSY)
 8003110:	7bfb      	ldrb	r3, [r7, #15]
 8003112:	2b02      	cmp	r3, #2
 8003114:	d002      	beq.n	800311c <HAL_SAI_ErrorCallback+0x28>
			|| (audio_out_state == HAL_SAI_STATE_BUSY_TX)) {
 8003116:	7bfb      	ldrb	r3, [r7, #15]
 8003118:	2b12      	cmp	r3, #18
 800311a:	d101      	bne.n	8003120 <HAL_SAI_ErrorCallback+0x2c>
		BSP_AUDIO_OUT_Error_CallBack();
 800311c:	f000 f810 	bl	8003140 <BSP_AUDIO_OUT_Error_CallBack>
	}

	if ((audio_in_state == HAL_SAI_STATE_BUSY)
 8003120:	7bbb      	ldrb	r3, [r7, #14]
 8003122:	2b02      	cmp	r3, #2
 8003124:	d002      	beq.n	800312c <HAL_SAI_ErrorCallback+0x38>
			|| (audio_in_state == HAL_SAI_STATE_BUSY_RX)) {
 8003126:	7bbb      	ldrb	r3, [r7, #14]
 8003128:	2b22      	cmp	r3, #34	; 0x22
 800312a:	d101      	bne.n	8003130 <HAL_SAI_ErrorCallback+0x3c>
		BSP_AUDIO_IN_Error_CallBack();
 800312c:	f000 f9dc 	bl	80034e8 <BSP_AUDIO_IN_Error_CallBack>
	}
}
 8003130:	bf00      	nop
 8003132:	3710      	adds	r7, #16
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	20000a1c 	.word	0x20000a1c
 800313c:	20000aa0 	.word	0x20000aa0

08003140 <BSP_AUDIO_OUT_Error_CallBack>:

/**
 * @brief  Manages the DMA FIFO error event.
 * @retval None
 */
__weak void BSP_AUDIO_OUT_Error_CallBack(void) {
 8003140:	b480      	push	{r7}
 8003142:	af00      	add	r7, sp, #0
}
 8003144:	bf00      	nop
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
	...

08003150 <BSP_AUDIO_OUT_MspInit>:
 * @brief  Initializes BSP_AUDIO_OUT MSP.
 * @param  hsai: SAI handle
 * @param  Params
 * @retval None
 */
__weak void BSP_AUDIO_OUT_MspInit(SAI_HandleTypeDef *hsai, void *Params) {
 8003150:	b580      	push	{r7, lr}
 8003152:	b08c      	sub	sp, #48	; 0x30
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
	static DMA_HandleTypeDef hdma_sai_tx;
	GPIO_InitTypeDef gpio_init_structure;

	/* Enable SAI clock */
	AUDIO_OUT_SAIx_CLK_ENABLE();
 800315a:	4b63      	ldr	r3, [pc, #396]	; (80032e8 <BSP_AUDIO_OUT_MspInit+0x198>)
 800315c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800315e:	4a62      	ldr	r2, [pc, #392]	; (80032e8 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003160:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003164:	6453      	str	r3, [r2, #68]	; 0x44
 8003166:	4b60      	ldr	r3, [pc, #384]	; (80032e8 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800316a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800316e:	61bb      	str	r3, [r7, #24]
 8003170:	69bb      	ldr	r3, [r7, #24]

	/* Enable GPIO clock */
	AUDIO_OUT_SAIx_MCLK_ENABLE();
 8003172:	4b5d      	ldr	r3, [pc, #372]	; (80032e8 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003176:	4a5c      	ldr	r2, [pc, #368]	; (80032e8 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800317c:	6313      	str	r3, [r2, #48]	; 0x30
 800317e:	4b5a      	ldr	r3, [pc, #360]	; (80032e8 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003186:	617b      	str	r3, [r7, #20]
 8003188:	697b      	ldr	r3, [r7, #20]
	AUDIO_OUT_SAIx_SCK_SD_ENABLE();
 800318a:	4b57      	ldr	r3, [pc, #348]	; (80032e8 <BSP_AUDIO_OUT_MspInit+0x198>)
 800318c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318e:	4a56      	ldr	r2, [pc, #344]	; (80032e8 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003190:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003194:	6313      	str	r3, [r2, #48]	; 0x30
 8003196:	4b54      	ldr	r3, [pc, #336]	; (80032e8 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800319e:	613b      	str	r3, [r7, #16]
 80031a0:	693b      	ldr	r3, [r7, #16]
	AUDIO_OUT_SAIx_FS_ENABLE();
 80031a2:	4b51      	ldr	r3, [pc, #324]	; (80032e8 <BSP_AUDIO_OUT_MspInit+0x198>)
 80031a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a6:	4a50      	ldr	r2, [pc, #320]	; (80032e8 <BSP_AUDIO_OUT_MspInit+0x198>)
 80031a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031ac:	6313      	str	r3, [r2, #48]	; 0x30
 80031ae:	4b4e      	ldr	r3, [pc, #312]	; (80032e8 <BSP_AUDIO_OUT_MspInit+0x198>)
 80031b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b6:	60fb      	str	r3, [r7, #12]
 80031b8:	68fb      	ldr	r3, [r7, #12]
	/* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
	gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 80031ba:	2380      	movs	r3, #128	; 0x80
 80031bc:	61fb      	str	r3, [r7, #28]
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80031be:	2302      	movs	r3, #2
 80031c0:	623b      	str	r3, [r7, #32]
	gpio_init_structure.Pull = GPIO_NOPULL;
 80031c2:	2300      	movs	r3, #0
 80031c4:	627b      	str	r3, [r7, #36]	; 0x24
	gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80031c6:	2303      	movs	r3, #3
 80031c8:	62bb      	str	r3, [r7, #40]	; 0x28
	gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 80031ca:	230a      	movs	r3, #10
 80031cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 80031ce:	f107 031c 	add.w	r3, r7, #28
 80031d2:	4619      	mov	r1, r3
 80031d4:	4845      	ldr	r0, [pc, #276]	; (80032ec <BSP_AUDIO_OUT_MspInit+0x19c>)
 80031d6:	f005 faff 	bl	80087d8 <HAL_GPIO_Init>

	gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 80031da:	2320      	movs	r3, #32
 80031dc:	61fb      	str	r3, [r7, #28]
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80031de:	2302      	movs	r3, #2
 80031e0:	623b      	str	r3, [r7, #32]
	gpio_init_structure.Pull = GPIO_NOPULL;
 80031e2:	2300      	movs	r3, #0
 80031e4:	627b      	str	r3, [r7, #36]	; 0x24
	gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80031e6:	2303      	movs	r3, #3
 80031e8:	62bb      	str	r3, [r7, #40]	; 0x28
	gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 80031ea:	230a      	movs	r3, #10
 80031ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 80031ee:	f107 031c 	add.w	r3, r7, #28
 80031f2:	4619      	mov	r1, r3
 80031f4:	483d      	ldr	r0, [pc, #244]	; (80032ec <BSP_AUDIO_OUT_MspInit+0x19c>)
 80031f6:	f005 faef 	bl	80087d8 <HAL_GPIO_Init>

	gpio_init_structure.Pin = AUDIO_OUT_SAIx_SD_PIN;
 80031fa:	2340      	movs	r3, #64	; 0x40
 80031fc:	61fb      	str	r3, [r7, #28]
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80031fe:	2302      	movs	r3, #2
 8003200:	623b      	str	r3, [r7, #32]
	gpio_init_structure.Pull = GPIO_NOPULL;
 8003202:	2300      	movs	r3, #0
 8003204:	627b      	str	r3, [r7, #36]	; 0x24
	gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8003206:	2303      	movs	r3, #3
 8003208:	62bb      	str	r3, [r7, #40]	; 0x28
	gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 800320a:	230a      	movs	r3, #10
 800320c:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 800320e:	f107 031c 	add.w	r3, r7, #28
 8003212:	4619      	mov	r1, r3
 8003214:	4835      	ldr	r0, [pc, #212]	; (80032ec <BSP_AUDIO_OUT_MspInit+0x19c>)
 8003216:	f005 fadf 	bl	80087d8 <HAL_GPIO_Init>

	gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 800321a:	2310      	movs	r3, #16
 800321c:	61fb      	str	r3, [r7, #28]
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800321e:	2302      	movs	r3, #2
 8003220:	623b      	str	r3, [r7, #32]
	gpio_init_structure.Pull = GPIO_NOPULL;
 8003222:	2300      	movs	r3, #0
 8003224:	627b      	str	r3, [r7, #36]	; 0x24
	gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8003226:	2303      	movs	r3, #3
 8003228:	62bb      	str	r3, [r7, #40]	; 0x28
	gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 800322a:	230a      	movs	r3, #10
 800322c:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 800322e:	f107 031c 	add.w	r3, r7, #28
 8003232:	4619      	mov	r1, r3
 8003234:	482d      	ldr	r0, [pc, #180]	; (80032ec <BSP_AUDIO_OUT_MspInit+0x19c>)
 8003236:	f005 facf 	bl	80087d8 <HAL_GPIO_Init>

	/* Enable the DMA clock */
	AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 800323a:	4b2b      	ldr	r3, [pc, #172]	; (80032e8 <BSP_AUDIO_OUT_MspInit+0x198>)
 800323c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323e:	4a2a      	ldr	r2, [pc, #168]	; (80032e8 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003240:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003244:	6313      	str	r3, [r2, #48]	; 0x30
 8003246:	4b28      	ldr	r3, [pc, #160]	; (80032e8 <BSP_AUDIO_OUT_MspInit+0x198>)
 8003248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800324e:	60bb      	str	r3, [r7, #8]
 8003250:	68bb      	ldr	r3, [r7, #8]

	if (hsai->Instance == AUDIO_OUT_SAIx) {
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a26      	ldr	r2, [pc, #152]	; (80032f0 <BSP_AUDIO_OUT_MspInit+0x1a0>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d138      	bne.n	80032ce <BSP_AUDIO_OUT_MspInit+0x17e>
		/* Configure the hdma_saiTx handle parameters */
		hdma_sai_tx.Init.Channel = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 800325c:	4b25      	ldr	r3, [pc, #148]	; (80032f4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800325e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003262:	605a      	str	r2, [r3, #4]
		hdma_sai_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003264:	4b23      	ldr	r3, [pc, #140]	; (80032f4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003266:	2240      	movs	r2, #64	; 0x40
 8003268:	609a      	str	r2, [r3, #8]
		hdma_sai_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800326a:	4b22      	ldr	r3, [pc, #136]	; (80032f4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800326c:	2200      	movs	r2, #0
 800326e:	60da      	str	r2, [r3, #12]
		hdma_sai_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003270:	4b20      	ldr	r3, [pc, #128]	; (80032f4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003272:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003276:	611a      	str	r2, [r3, #16]
		hdma_sai_tx.Init.PeriphDataAlignment =
 8003278:	4b1e      	ldr	r3, [pc, #120]	; (80032f4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800327a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800327e:	615a      	str	r2, [r3, #20]
				AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
		hdma_sai_tx.Init.MemDataAlignment = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 8003280:	4b1c      	ldr	r3, [pc, #112]	; (80032f4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003282:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003286:	619a      	str	r2, [r3, #24]
		hdma_sai_tx.Init.Mode = DMA_CIRCULAR;
 8003288:	4b1a      	ldr	r3, [pc, #104]	; (80032f4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800328a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800328e:	61da      	str	r2, [r3, #28]
		hdma_sai_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8003290:	4b18      	ldr	r3, [pc, #96]	; (80032f4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8003292:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003296:	621a      	str	r2, [r3, #32]
		hdma_sai_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003298:	4b16      	ldr	r3, [pc, #88]	; (80032f4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800329a:	2204      	movs	r2, #4
 800329c:	625a      	str	r2, [r3, #36]	; 0x24
		hdma_sai_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800329e:	4b15      	ldr	r3, [pc, #84]	; (80032f4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80032a0:	2203      	movs	r2, #3
 80032a2:	629a      	str	r2, [r3, #40]	; 0x28
		hdma_sai_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80032a4:	4b13      	ldr	r3, [pc, #76]	; (80032f4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	62da      	str	r2, [r3, #44]	; 0x2c
		hdma_sai_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80032aa:	4b12      	ldr	r3, [pc, #72]	; (80032f4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	631a      	str	r2, [r3, #48]	; 0x30

		hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 80032b0:	4b10      	ldr	r3, [pc, #64]	; (80032f4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80032b2:	4a11      	ldr	r2, [pc, #68]	; (80032f8 <BSP_AUDIO_OUT_MspInit+0x1a8>)
 80032b4:	601a      	str	r2, [r3, #0]

		/* Associate the DMA handle */
		__HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a0e      	ldr	r2, [pc, #56]	; (80032f4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80032ba:	66da      	str	r2, [r3, #108]	; 0x6c
 80032bc:	4a0d      	ldr	r2, [pc, #52]	; (80032f4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6393      	str	r3, [r2, #56]	; 0x38

		/* Deinitialize the Stream for new transfer */
		HAL_DMA_DeInit(&hdma_sai_tx);
 80032c2:	480c      	ldr	r0, [pc, #48]	; (80032f4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80032c4:	f004 fca6 	bl	8007c14 <HAL_DMA_DeInit>

		/* Configure the DMA Stream */
		HAL_DMA_Init(&hdma_sai_tx);
 80032c8:	480a      	ldr	r0, [pc, #40]	; (80032f4 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80032ca:	f004 fbf5 	bl	8007ab8 <HAL_DMA_Init>
	}

	/* SAI DMA IRQ Channel configuration */
	HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 80032ce:	2200      	movs	r2, #0
 80032d0:	210e      	movs	r1, #14
 80032d2:	203c      	movs	r0, #60	; 0x3c
 80032d4:	f004 fbc6 	bl	8007a64 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ);
 80032d8:	203c      	movs	r0, #60	; 0x3c
 80032da:	f004 fbdf 	bl	8007a9c <HAL_NVIC_EnableIRQ>
}
 80032de:	bf00      	nop
 80032e0:	3730      	adds	r7, #48	; 0x30
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	40023800 	.word	0x40023800
 80032ec:	40022000 	.word	0x40022000
 80032f0:	40015c04 	.word	0x40015c04
 80032f4:	20000b24 	.word	0x20000b24
 80032f8:	40026470 	.word	0x40026470

080032fc <BSP_AUDIO_OUT_ClockConfig>:
 * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
 *         Being __weak it can be overwritten by the application
 * @retval None
 */
__weak void BSP_AUDIO_OUT_ClockConfig(SAI_HandleTypeDef *hsai,
		uint32_t AudioFreq, void *Params) {
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b0a6      	sub	sp, #152	; 0x98
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]
	RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

	HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8003308:	f107 0314 	add.w	r3, r7, #20
 800330c:	4618      	mov	r0, r3
 800330e:	f007 ff7b 	bl	800b208 <HAL_RCCEx_GetPeriphCLKConfig>

	/* Set the PLL configuration according to the audio frequency */
	if ((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K)
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	f642 3211 	movw	r2, #11025	; 0x2b11
 8003318:	4293      	cmp	r3, r2
 800331a:	d009      	beq.n	8003330 <BSP_AUDIO_OUT_ClockConfig+0x34>
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	f245 6222 	movw	r2, #22050	; 0x5622
 8003322:	4293      	cmp	r3, r2
 8003324:	d004      	beq.n	8003330 <BSP_AUDIO_OUT_ClockConfig+0x34>
			|| (AudioFreq == AUDIO_FREQUENCY_44K)) {
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	f64a 4244 	movw	r2, #44100	; 0xac44
 800332c:	4293      	cmp	r3, r2
 800332e:	d112      	bne.n	8003356 <BSP_AUDIO_OUT_ClockConfig+0x5a>
		/* Configure PLLI2S prescalers */
		/* PLLI2S_VCO: VCO_429M
		 I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 429/2 = 214.5 Mhz
		 I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 214.5/19 = 11.289 Mhz */
		rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8003330:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003334:	617b      	str	r3, [r7, #20]
		rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8003336:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800333a:	657b      	str	r3, [r7, #84]	; 0x54
		rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 800333c:	f240 13ad 	movw	r3, #429	; 0x1ad
 8003340:	61bb      	str	r3, [r7, #24]
		rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 8003342:	2302      	movs	r3, #2
 8003344:	623b      	str	r3, [r7, #32]
		rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 8003346:	2313      	movs	r3, #19
 8003348:	63bb      	str	r3, [r7, #56]	; 0x38

		HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 800334a:	f107 0314 	add.w	r3, r7, #20
 800334e:	4618      	mov	r0, r3
 8003350:	f007 fb6a 	bl	800aa28 <HAL_RCCEx_PeriphCLKConfig>
 8003354:	e012      	b.n	800337c <BSP_AUDIO_OUT_ClockConfig+0x80>
	{
		/* I2S clock config
		 PLLI2S_VCO: VCO_344M
		 I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 344/7 = 49.142 Mhz
		 I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 49.142/1 = 49.142 Mhz */
		rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8003356:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800335a:	617b      	str	r3, [r7, #20]
		rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 800335c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003360:	657b      	str	r3, [r7, #84]	; 0x54
		rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344;
 8003362:	f44f 73ac 	mov.w	r3, #344	; 0x158
 8003366:	61bb      	str	r3, [r7, #24]
		rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7;
 8003368:	2307      	movs	r3, #7
 800336a:	623b      	str	r3, [r7, #32]
		rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 800336c:	2301      	movs	r3, #1
 800336e:	63bb      	str	r3, [r7, #56]	; 0x38

		HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8003370:	f107 0314 	add.w	r3, r7, #20
 8003374:	4618      	mov	r0, r3
 8003376:	f007 fb57 	bl	800aa28 <HAL_RCCEx_PeriphCLKConfig>
	}
}
 800337a:	bf00      	nop
 800337c:	bf00      	nop
 800337e:	3798      	adds	r7, #152	; 0x98
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <SAIx_Out_DeInit>:

/**
 * @brief  Deinitializes the output Audio Codec audio interface (SAI).
 * @retval None
 */
static void SAIx_Out_DeInit(void) {
 8003384:	b580      	push	{r7, lr}
 8003386:	af00      	add	r7, sp, #0
	/* Initialize the haudio_out_sai Instance parameter */
	haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8003388:	4b07      	ldr	r3, [pc, #28]	; (80033a8 <SAIx_Out_DeInit+0x24>)
 800338a:	4a08      	ldr	r2, [pc, #32]	; (80033ac <SAIx_Out_DeInit+0x28>)
 800338c:	601a      	str	r2, [r3, #0]

	/* Disable SAI peripheral */
	__HAL_SAI_DISABLE(&haudio_out_sai);
 800338e:	4b06      	ldr	r3, [pc, #24]	; (80033a8 <SAIx_Out_DeInit+0x24>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	4b04      	ldr	r3, [pc, #16]	; (80033a8 <SAIx_Out_DeInit+0x24>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800339c:	601a      	str	r2, [r3, #0]

	HAL_SAI_DeInit(&haudio_out_sai);
 800339e:	4802      	ldr	r0, [pc, #8]	; (80033a8 <SAIx_Out_DeInit+0x24>)
 80033a0:	f008 fb00 	bl	800b9a4 <HAL_SAI_DeInit>
}
 80033a4:	bf00      	nop
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	20000a1c 	.word	0x20000a1c
 80033ac:	40015c04 	.word	0x40015c04

080033b0 <BSP_AUDIO_IN_OUT_Init>:
 * @param  BitRes: Audio frequency to be configured.
 * @param  ChnlNbr: Channel number.
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
uint8_t BSP_AUDIO_IN_OUT_Init(uint16_t InputDevice, uint16_t OutputDevice,
		uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr) {
 80033b0:	b590      	push	{r4, r7, lr}
 80033b2:	b089      	sub	sp, #36	; 0x24
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60ba      	str	r2, [r7, #8]
 80033b8:	607b      	str	r3, [r7, #4]
 80033ba:	4603      	mov	r3, r0
 80033bc:	81fb      	strh	r3, [r7, #14]
 80033be:	460b      	mov	r3, r1
 80033c0:	81bb      	strh	r3, [r7, #12]
	uint8_t ret = AUDIO_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	77fb      	strb	r3, [r7, #31]
	uint32_t deviceid = 0x00;
 80033c6:	2300      	movs	r3, #0
 80033c8:	617b      	str	r3, [r7, #20]
	uint32_t slot_active;

	if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1)
 80033ca:	89fb      	ldrh	r3, [r7, #14]
 80033cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033d0:	d006      	beq.n	80033e0 <BSP_AUDIO_IN_OUT_Init+0x30>
			&& (InputDevice != INPUT_DEVICE_DIGITAL_MICROPHONE_2)) /* Only MICROPHONE_2 input supported */
 80033d2:	89fb      	ldrh	r3, [r7, #14]
 80033d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033d8:	d002      	beq.n	80033e0 <BSP_AUDIO_IN_OUT_Init+0x30>
			{
		ret = AUDIO_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	77fb      	strb	r3, [r7, #31]
 80033de:	e054      	b.n	800348a <BSP_AUDIO_IN_OUT_Init+0xda>
	} else {
		/* Disable SAI */
		SAIx_In_DeInit();
 80033e0:	f000 f9f2 	bl	80037c8 <SAIx_In_DeInit>
		SAIx_Out_DeInit();
 80033e4:	f7ff ffce 	bl	8003384 <SAIx_Out_DeInit>

		/* PLL clock is set depending on the AudioFreq (44.1khz vs 48khz groups) */
		BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 80033e8:	2200      	movs	r2, #0
 80033ea:	68b9      	ldr	r1, [r7, #8]
 80033ec:	4829      	ldr	r0, [pc, #164]	; (8003494 <BSP_AUDIO_IN_OUT_Init+0xe4>)
 80033ee:	f7ff ff85 	bl	80032fc <BSP_AUDIO_OUT_ClockConfig>

		/* SAI data transfer preparation:
		 Prepare the Media to be used for the audio transfer from SAI peripheral to memory */
		haudio_in_sai.Instance = AUDIO_IN_SAIx;
 80033f2:	4b28      	ldr	r3, [pc, #160]	; (8003494 <BSP_AUDIO_IN_OUT_Init+0xe4>)
 80033f4:	4a28      	ldr	r2, [pc, #160]	; (8003498 <BSP_AUDIO_IN_OUT_Init+0xe8>)
 80033f6:	601a      	str	r2, [r3, #0]
		if (HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET) {
 80033f8:	4826      	ldr	r0, [pc, #152]	; (8003494 <BSP_AUDIO_IN_OUT_Init+0xe4>)
 80033fa:	f008 fc0b 	bl	800bc14 <HAL_SAI_GetState>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d103      	bne.n	800340c <BSP_AUDIO_IN_OUT_Init+0x5c>
			/* Init the SAI MSP: this __weak function can be redefined by the application*/
			BSP_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
 8003404:	2100      	movs	r1, #0
 8003406:	4823      	ldr	r0, [pc, #140]	; (8003494 <BSP_AUDIO_IN_OUT_Init+0xe4>)
 8003408:	f000 f876 	bl	80034f8 <BSP_AUDIO_IN_MspInit>
		}

		/* SAI data transfer preparation:
		 Prepare the Media to be used for the audio transfer from memory to SAI peripheral */
		haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 800340c:	4b23      	ldr	r3, [pc, #140]	; (800349c <BSP_AUDIO_IN_OUT_Init+0xec>)
 800340e:	4a24      	ldr	r2, [pc, #144]	; (80034a0 <BSP_AUDIO_IN_OUT_Init+0xf0>)
 8003410:	601a      	str	r2, [r3, #0]
		if (HAL_SAI_GetState(&haudio_out_sai) == HAL_SAI_STATE_RESET) {
 8003412:	4822      	ldr	r0, [pc, #136]	; (800349c <BSP_AUDIO_IN_OUT_Init+0xec>)
 8003414:	f008 fbfe 	bl	800bc14 <HAL_SAI_GetState>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d103      	bne.n	8003426 <BSP_AUDIO_IN_OUT_Init+0x76>
			/* Init the SAI MSP: this __weak function can be redefined by the application*/
			BSP_AUDIO_OUT_MspInit(&haudio_out_sai, NULL);
 800341e:	2100      	movs	r1, #0
 8003420:	481e      	ldr	r0, [pc, #120]	; (800349c <BSP_AUDIO_IN_OUT_Init+0xec>)
 8003422:	f7ff fe95 	bl	8003150 <BSP_AUDIO_OUT_MspInit>

		/* Configure SAI in master mode :
		 *   - SAI2_block_A in master TX mode
		 *   - SAI2_block_B in slave RX mode synchronous from SAI2_block_A
		 */
		if (InputDevice == INPUT_DEVICE_DIGITAL_MICROPHONE_2) {
 8003426:	89fb      	ldrh	r3, [r7, #14]
 8003428:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800342c:	d102      	bne.n	8003434 <BSP_AUDIO_IN_OUT_Init+0x84>
			slot_active = CODEC_AUDIOFRAME_SLOT_13;
 800342e:	230a      	movs	r3, #10
 8003430:	61bb      	str	r3, [r7, #24]
 8003432:	e001      	b.n	8003438 <BSP_AUDIO_IN_OUT_Init+0x88>
		} else {
			slot_active = CODEC_AUDIOFRAME_SLOT_02;
 8003434:	2305      	movs	r3, #5
 8003436:	61bb      	str	r3, [r7, #24]
		}
		SAIx_In_Init(SAI_MODEMASTER_TX, slot_active, AudioFreq);
 8003438:	68ba      	ldr	r2, [r7, #8]
 800343a:	69b9      	ldr	r1, [r7, #24]
 800343c:	2000      	movs	r0, #0
 800343e:	f000 f90d 	bl	800365c <SAIx_In_Init>

		/* wm8994 codec initialization */
		deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 8003442:	4b18      	ldr	r3, [pc, #96]	; (80034a4 <BSP_AUDIO_IN_OUT_Init+0xf4>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	2034      	movs	r0, #52	; 0x34
 8003448:	4798      	blx	r3
 800344a:	6178      	str	r0, [r7, #20]

		if ((deviceid) == WM8994_ID) {
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	f648 1294 	movw	r2, #35220	; 0x8994
 8003452:	4293      	cmp	r3, r2
 8003454:	d109      	bne.n	800346a <BSP_AUDIO_IN_OUT_Init+0xba>
			/* Reset the Codec Registers */
			wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 8003456:	4b13      	ldr	r3, [pc, #76]	; (80034a4 <BSP_AUDIO_IN_OUT_Init+0xf4>)
 8003458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800345a:	2034      	movs	r0, #52	; 0x34
 800345c:	4798      	blx	r3
			/* Initialize the audio driver structure */
			audio_drv = &wm8994_drv;
 800345e:	4b12      	ldr	r3, [pc, #72]	; (80034a8 <BSP_AUDIO_IN_OUT_Init+0xf8>)
 8003460:	4a10      	ldr	r2, [pc, #64]	; (80034a4 <BSP_AUDIO_IN_OUT_Init+0xf4>)
 8003462:	601a      	str	r2, [r3, #0]
			ret = AUDIO_OK;
 8003464:	2300      	movs	r3, #0
 8003466:	77fb      	strb	r3, [r7, #31]
 8003468:	e001      	b.n	800346e <BSP_AUDIO_IN_OUT_Init+0xbe>
		} else {
			ret = AUDIO_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	77fb      	strb	r3, [r7, #31]
		}

		if (ret == AUDIO_OK) {
 800346e:	7ffb      	ldrb	r3, [r7, #31]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d10a      	bne.n	800348a <BSP_AUDIO_IN_OUT_Init+0xda>
			/* Initialize the codec internal registers */
			audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice | OutputDevice, 100,
 8003474:	4b0c      	ldr	r3, [pc, #48]	; (80034a8 <BSP_AUDIO_IN_OUT_Init+0xf8>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681c      	ldr	r4, [r3, #0]
 800347a:	89fa      	ldrh	r2, [r7, #14]
 800347c:	89bb      	ldrh	r3, [r7, #12]
 800347e:	4313      	orrs	r3, r2
 8003480:	b299      	uxth	r1, r3
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	2264      	movs	r2, #100	; 0x64
 8003486:	2034      	movs	r0, #52	; 0x34
 8003488:	47a0      	blx	r4
					AudioFreq);
		}
	}
	return ret;
 800348a:	7ffb      	ldrb	r3, [r7, #31]
}
 800348c:	4618      	mov	r0, r3
 800348e:	3724      	adds	r7, #36	; 0x24
 8003490:	46bd      	mov	sp, r7
 8003492:	bd90      	pop	{r4, r7, pc}
 8003494:	20000aa0 	.word	0x20000aa0
 8003498:	40015c24 	.word	0x40015c24
 800349c:	20000a1c 	.word	0x20000a1c
 80034a0:	40015c04 	.word	0x40015c04
 80034a4:	200000ac 	.word	0x200000ac
 80034a8:	20000a18 	.word	0x20000a18

080034ac <BSP_AUDIO_IN_SetVolume>:
/**
 * @brief  Controls the audio in volume level.
 * @param  Volume: Volume level in range 0(Mute)..80(+0dB)..100(+17.625dB)
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
uint8_t BSP_AUDIO_IN_SetVolume(uint8_t Volume) {
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	4603      	mov	r3, r0
 80034b4:	71fb      	strb	r3, [r7, #7]
	/* Call the codec volume control function with converted volume value */
	if (audio_drv->SetVolumeIn(AUDIO_I2C_ADDRESS, Volume) != 0) {
 80034b6:	4b0a      	ldr	r3, [pc, #40]	; (80034e0 <BSP_AUDIO_IN_SetVolume+0x34>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034bc:	79fa      	ldrb	r2, [r7, #7]
 80034be:	4611      	mov	r1, r2
 80034c0:	2034      	movs	r0, #52	; 0x34
 80034c2:	4798      	blx	r3
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d001      	beq.n	80034ce <BSP_AUDIO_IN_SetVolume+0x22>
		return AUDIO_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e004      	b.n	80034d8 <BSP_AUDIO_IN_SetVolume+0x2c>
	} else {
		/* Set the Global variable AudioInVolume  */
		AudioInVolume = Volume;
 80034ce:	79fb      	ldrb	r3, [r7, #7]
 80034d0:	b29a      	uxth	r2, r3
 80034d2:	4b04      	ldr	r3, [pc, #16]	; (80034e4 <BSP_AUDIO_IN_SetVolume+0x38>)
 80034d4:	801a      	strh	r2, [r3, #0]
		/* Return AUDIO_OK when all operations are correctly done */
		return AUDIO_OK;
 80034d6:	2300      	movs	r3, #0
	}
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3708      	adds	r7, #8
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	20000a18 	.word	0x20000a18
 80034e4:	2000008a 	.word	0x2000008a

080034e8 <BSP_AUDIO_IN_Error_CallBack>:

/**
 * @brief  Audio IN Error callback function.
 * @retval None
 */
__weak void BSP_AUDIO_IN_Error_CallBack(void) {
 80034e8:	b480      	push	{r7}
 80034ea:	af00      	add	r7, sp, #0
	/* This function is called when an Interrupt due to transfer error on or peripheral
	 error occurs. */
}
 80034ec:	bf00      	nop
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
	...

080034f8 <BSP_AUDIO_IN_MspInit>:
 * @brief  Initializes BSP_AUDIO_IN MSP.
 * @param  hsai: SAI handle
 * @param  Params
 * @retval None
 */
__weak void BSP_AUDIO_IN_MspInit(SAI_HandleTypeDef *hsai, void *Params) {
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b08c      	sub	sp, #48	; 0x30
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
	static DMA_HandleTypeDef hdma_sai_rx;
	GPIO_InitTypeDef gpio_init_structure;

	/* Enable SAI clock */
	AUDIO_IN_SAIx_CLK_ENABLE();
 8003502:	4b50      	ldr	r3, [pc, #320]	; (8003644 <BSP_AUDIO_IN_MspInit+0x14c>)
 8003504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003506:	4a4f      	ldr	r2, [pc, #316]	; (8003644 <BSP_AUDIO_IN_MspInit+0x14c>)
 8003508:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800350c:	6453      	str	r3, [r2, #68]	; 0x44
 800350e:	4b4d      	ldr	r3, [pc, #308]	; (8003644 <BSP_AUDIO_IN_MspInit+0x14c>)
 8003510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003512:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003516:	61bb      	str	r3, [r7, #24]
 8003518:	69bb      	ldr	r3, [r7, #24]

	/* Enable SD GPIO clock */
	AUDIO_IN_SAIx_SD_ENABLE();
 800351a:	4b4a      	ldr	r3, [pc, #296]	; (8003644 <BSP_AUDIO_IN_MspInit+0x14c>)
 800351c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351e:	4a49      	ldr	r2, [pc, #292]	; (8003644 <BSP_AUDIO_IN_MspInit+0x14c>)
 8003520:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003524:	6313      	str	r3, [r2, #48]	; 0x30
 8003526:	4b47      	ldr	r3, [pc, #284]	; (8003644 <BSP_AUDIO_IN_MspInit+0x14c>)
 8003528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800352e:	617b      	str	r3, [r7, #20]
 8003530:	697b      	ldr	r3, [r7, #20]
	/* CODEC_SAI pin configuration: SD pin */
	gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 8003532:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003536:	61fb      	str	r3, [r7, #28]
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003538:	2302      	movs	r3, #2
 800353a:	623b      	str	r3, [r7, #32]
	gpio_init_structure.Pull = GPIO_NOPULL;
 800353c:	2300      	movs	r3, #0
 800353e:	627b      	str	r3, [r7, #36]	; 0x24
	gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003540:	2302      	movs	r3, #2
 8003542:	62bb      	str	r3, [r7, #40]	; 0x28
	gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
 8003544:	230a      	movs	r3, #10
 8003546:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8003548:	f107 031c 	add.w	r3, r7, #28
 800354c:	4619      	mov	r1, r3
 800354e:	483e      	ldr	r0, [pc, #248]	; (8003648 <BSP_AUDIO_IN_MspInit+0x150>)
 8003550:	f005 f942 	bl	80087d8 <HAL_GPIO_Init>

	/* Enable Audio INT GPIO clock */
	AUDIO_IN_INT_GPIO_ENABLE();
 8003554:	4b3b      	ldr	r3, [pc, #236]	; (8003644 <BSP_AUDIO_IN_MspInit+0x14c>)
 8003556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003558:	4a3a      	ldr	r2, [pc, #232]	; (8003644 <BSP_AUDIO_IN_MspInit+0x14c>)
 800355a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800355e:	6313      	str	r3, [r2, #48]	; 0x30
 8003560:	4b38      	ldr	r3, [pc, #224]	; (8003644 <BSP_AUDIO_IN_MspInit+0x14c>)
 8003562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003564:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003568:	613b      	str	r3, [r7, #16]
 800356a:	693b      	ldr	r3, [r7, #16]
	/* Audio INT pin configuration: input */
	gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 800356c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003570:	61fb      	str	r3, [r7, #28]
	gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8003572:	2300      	movs	r3, #0
 8003574:	623b      	str	r3, [r7, #32]
	gpio_init_structure.Pull = GPIO_NOPULL;
 8003576:	2300      	movs	r3, #0
 8003578:	627b      	str	r3, [r7, #36]	; 0x24
	gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800357a:	2302      	movs	r3, #2
 800357c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 800357e:	f107 031c 	add.w	r3, r7, #28
 8003582:	4619      	mov	r1, r3
 8003584:	4831      	ldr	r0, [pc, #196]	; (800364c <BSP_AUDIO_IN_MspInit+0x154>)
 8003586:	f005 f927 	bl	80087d8 <HAL_GPIO_Init>

	/* Enable the DMA clock */
	AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 800358a:	4b2e      	ldr	r3, [pc, #184]	; (8003644 <BSP_AUDIO_IN_MspInit+0x14c>)
 800358c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358e:	4a2d      	ldr	r2, [pc, #180]	; (8003644 <BSP_AUDIO_IN_MspInit+0x14c>)
 8003590:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003594:	6313      	str	r3, [r2, #48]	; 0x30
 8003596:	4b2b      	ldr	r3, [pc, #172]	; (8003644 <BSP_AUDIO_IN_MspInit+0x14c>)
 8003598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800359e:	60fb      	str	r3, [r7, #12]
 80035a0:	68fb      	ldr	r3, [r7, #12]

	if (hsai->Instance == AUDIO_IN_SAIx) {
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a2a      	ldr	r2, [pc, #168]	; (8003650 <BSP_AUDIO_IN_MspInit+0x158>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d137      	bne.n	800361c <BSP_AUDIO_IN_MspInit+0x124>
		/* Configure the hdma_sai_rx handle parameters */
		hdma_sai_rx.Init.Channel = AUDIO_IN_SAIx_DMAx_CHANNEL;
 80035ac:	4b29      	ldr	r3, [pc, #164]	; (8003654 <BSP_AUDIO_IN_MspInit+0x15c>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	605a      	str	r2, [r3, #4]
		hdma_sai_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035b2:	4b28      	ldr	r3, [pc, #160]	; (8003654 <BSP_AUDIO_IN_MspInit+0x15c>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	609a      	str	r2, [r3, #8]
		hdma_sai_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035b8:	4b26      	ldr	r3, [pc, #152]	; (8003654 <BSP_AUDIO_IN_MspInit+0x15c>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	60da      	str	r2, [r3, #12]
		hdma_sai_rx.Init.MemInc = DMA_MINC_ENABLE;
 80035be:	4b25      	ldr	r3, [pc, #148]	; (8003654 <BSP_AUDIO_IN_MspInit+0x15c>)
 80035c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035c4:	611a      	str	r2, [r3, #16]
		hdma_sai_rx.Init.PeriphDataAlignment =
 80035c6:	4b23      	ldr	r3, [pc, #140]	; (8003654 <BSP_AUDIO_IN_MspInit+0x15c>)
 80035c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035cc:	615a      	str	r2, [r3, #20]
				AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
		hdma_sai_rx.Init.MemDataAlignment = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 80035ce:	4b21      	ldr	r3, [pc, #132]	; (8003654 <BSP_AUDIO_IN_MspInit+0x15c>)
 80035d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80035d4:	619a      	str	r2, [r3, #24]
		hdma_sai_rx.Init.Mode = DMA_CIRCULAR;
 80035d6:	4b1f      	ldr	r3, [pc, #124]	; (8003654 <BSP_AUDIO_IN_MspInit+0x15c>)
 80035d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035dc:	61da      	str	r2, [r3, #28]
		hdma_sai_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80035de:	4b1d      	ldr	r3, [pc, #116]	; (8003654 <BSP_AUDIO_IN_MspInit+0x15c>)
 80035e0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80035e4:	621a      	str	r2, [r3, #32]
		hdma_sai_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035e6:	4b1b      	ldr	r3, [pc, #108]	; (8003654 <BSP_AUDIO_IN_MspInit+0x15c>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	625a      	str	r2, [r3, #36]	; 0x24
		hdma_sai_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80035ec:	4b19      	ldr	r3, [pc, #100]	; (8003654 <BSP_AUDIO_IN_MspInit+0x15c>)
 80035ee:	2203      	movs	r2, #3
 80035f0:	629a      	str	r2, [r3, #40]	; 0x28
		hdma_sai_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 80035f2:	4b18      	ldr	r3, [pc, #96]	; (8003654 <BSP_AUDIO_IN_MspInit+0x15c>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	62da      	str	r2, [r3, #44]	; 0x2c
		hdma_sai_rx.Init.PeriphBurst = DMA_MBURST_SINGLE;
 80035f8:	4b16      	ldr	r3, [pc, #88]	; (8003654 <BSP_AUDIO_IN_MspInit+0x15c>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	631a      	str	r2, [r3, #48]	; 0x30

		hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 80035fe:	4b15      	ldr	r3, [pc, #84]	; (8003654 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003600:	4a15      	ldr	r2, [pc, #84]	; (8003658 <BSP_AUDIO_IN_MspInit+0x160>)
 8003602:	601a      	str	r2, [r3, #0]

		/* Associate the DMA handle */
		__HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a13      	ldr	r2, [pc, #76]	; (8003654 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003608:	671a      	str	r2, [r3, #112]	; 0x70
 800360a:	4a12      	ldr	r2, [pc, #72]	; (8003654 <BSP_AUDIO_IN_MspInit+0x15c>)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6393      	str	r3, [r2, #56]	; 0x38

		/* Deinitialize the Stream for new transfer */
		HAL_DMA_DeInit(&hdma_sai_rx);
 8003610:	4810      	ldr	r0, [pc, #64]	; (8003654 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003612:	f004 faff 	bl	8007c14 <HAL_DMA_DeInit>

		/* Configure the DMA Stream */
		HAL_DMA_Init(&hdma_sai_rx);
 8003616:	480f      	ldr	r0, [pc, #60]	; (8003654 <BSP_AUDIO_IN_MspInit+0x15c>)
 8003618:	f004 fa4e 	bl	8007ab8 <HAL_DMA_Init>
	}

	/* SAI DMA IRQ Channel configuration */
	HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 800361c:	2200      	movs	r2, #0
 800361e:	210f      	movs	r1, #15
 8003620:	2046      	movs	r0, #70	; 0x46
 8003622:	f004 fa1f 	bl	8007a64 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 8003626:	2046      	movs	r0, #70	; 0x46
 8003628:	f004 fa38 	bl	8007a9c <HAL_NVIC_EnableIRQ>

	/* Audio INT IRQ Channel configuration */
	HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 800362c:	2200      	movs	r2, #0
 800362e:	210f      	movs	r1, #15
 8003630:	2028      	movs	r0, #40	; 0x28
 8003632:	f004 fa17 	bl	8007a64 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 8003636:	2028      	movs	r0, #40	; 0x28
 8003638:	f004 fa30 	bl	8007a9c <HAL_NVIC_EnableIRQ>
}
 800363c:	bf00      	nop
 800363e:	3730      	adds	r7, #48	; 0x30
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	40023800 	.word	0x40023800
 8003648:	40021800 	.word	0x40021800
 800364c:	40021c00 	.word	0x40021c00
 8003650:	40015c24 	.word	0x40015c24
 8003654:	20000b84 	.word	0x20000b84
 8003658:	400264b8 	.word	0x400264b8

0800365c <SAIx_In_Init>:
 * @param  SlotActive: CODEC_AUDIOFRAME_SLOT_02 or CODEC_AUDIOFRAME_SLOT_13
 * @param  AudioFreq: Audio frequency to be configured for the SAI peripheral.
 * @retval None
 */
static void SAIx_In_Init(uint32_t SaiOutMode, uint32_t SlotActive,
		uint32_t AudioFreq) {
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]
	/* Initialize SAI2 block A in MASTER RX */
	/* Initialize the haudio_out_sai Instance parameter */
	haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8003668:	4b53      	ldr	r3, [pc, #332]	; (80037b8 <SAIx_In_Init+0x15c>)
 800366a:	4a54      	ldr	r2, [pc, #336]	; (80037bc <SAIx_In_Init+0x160>)
 800366c:	601a      	str	r2, [r3, #0]

	/* Disable SAI peripheral to allow access to SAI internal registers */
	__HAL_SAI_DISABLE(&haudio_out_sai);
 800366e:	4b52      	ldr	r3, [pc, #328]	; (80037b8 <SAIx_In_Init+0x15c>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	4b50      	ldr	r3, [pc, #320]	; (80037b8 <SAIx_In_Init+0x15c>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800367c:	601a      	str	r2, [r3, #0]

	/* Configure SAI_Block_x
	 LSBFirst: Disabled
	 DataSize: 16 */
	haudio_out_sai.Init.AudioFrequency = AudioFreq;
 800367e:	4a4e      	ldr	r2, [pc, #312]	; (80037b8 <SAIx_In_Init+0x15c>)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	61d3      	str	r3, [r2, #28]
	haudio_out_sai.Init.AudioMode = SaiOutMode;
 8003684:	4a4c      	ldr	r2, [pc, #304]	; (80037b8 <SAIx_In_Init+0x15c>)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6053      	str	r3, [r2, #4]
	haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 800368a:	4b4b      	ldr	r3, [pc, #300]	; (80037b8 <SAIx_In_Init+0x15c>)
 800368c:	2200      	movs	r2, #0
 800368e:	615a      	str	r2, [r3, #20]
	haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8003690:	4b49      	ldr	r3, [pc, #292]	; (80037b8 <SAIx_In_Init+0x15c>)
 8003692:	2200      	movs	r2, #0
 8003694:	631a      	str	r2, [r3, #48]	; 0x30
	haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 8003696:	4b48      	ldr	r3, [pc, #288]	; (80037b8 <SAIx_In_Init+0x15c>)
 8003698:	2280      	movs	r2, #128	; 0x80
 800369a:	635a      	str	r2, [r3, #52]	; 0x34
	haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800369c:	4b46      	ldr	r3, [pc, #280]	; (80037b8 <SAIx_In_Init+0x15c>)
 800369e:	2200      	movs	r2, #0
 80036a0:	639a      	str	r2, [r3, #56]	; 0x38
	haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 80036a2:	4b45      	ldr	r3, [pc, #276]	; (80037b8 <SAIx_In_Init+0x15c>)
 80036a4:	2201      	movs	r2, #1
 80036a6:	63da      	str	r2, [r3, #60]	; 0x3c
	haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 80036a8:	4b43      	ldr	r3, [pc, #268]	; (80037b8 <SAIx_In_Init+0x15c>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	609a      	str	r2, [r3, #8]
	haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 80036ae:	4b42      	ldr	r3, [pc, #264]	; (80037b8 <SAIx_In_Init+0x15c>)
 80036b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80036b4:	611a      	str	r2, [r3, #16]
	haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80036b6:	4b40      	ldr	r3, [pc, #256]	; (80037b8 <SAIx_In_Init+0x15c>)
 80036b8:	2201      	movs	r2, #1
 80036ba:	619a      	str	r2, [r3, #24]
	 Frame Length: 64
	 Frame active Length: 32
	 FS Definition: Start frame + Channel Side identification
	 FS Polarity: FS active Low
	 FS Offset: FS asserted one bit before the first bit of slot 0 */
	haudio_out_sai.FrameInit.FrameLength = 64;
 80036bc:	4b3e      	ldr	r3, [pc, #248]	; (80037b8 <SAIx_In_Init+0x15c>)
 80036be:	2240      	movs	r2, #64	; 0x40
 80036c0:	641a      	str	r2, [r3, #64]	; 0x40
	haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 80036c2:	4b3d      	ldr	r3, [pc, #244]	; (80037b8 <SAIx_In_Init+0x15c>)
 80036c4:	2220      	movs	r2, #32
 80036c6:	645a      	str	r2, [r3, #68]	; 0x44
	haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 80036c8:	4b3b      	ldr	r3, [pc, #236]	; (80037b8 <SAIx_In_Init+0x15c>)
 80036ca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80036ce:	649a      	str	r2, [r3, #72]	; 0x48
	haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80036d0:	4b39      	ldr	r3, [pc, #228]	; (80037b8 <SAIx_In_Init+0x15c>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	64da      	str	r2, [r3, #76]	; 0x4c
	haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 80036d6:	4b38      	ldr	r3, [pc, #224]	; (80037b8 <SAIx_In_Init+0x15c>)
 80036d8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80036dc:	651a      	str	r2, [r3, #80]	; 0x50
	/* Configure SAI Block_x Slot
	 Slot First Bit Offset: 0
	 Slot Size  : 16
	 Slot Number: 4
	 Slot Active: All slot actives */
	haudio_out_sai.SlotInit.FirstBitOffset = 0;
 80036de:	4b36      	ldr	r3, [pc, #216]	; (80037b8 <SAIx_In_Init+0x15c>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	655a      	str	r2, [r3, #84]	; 0x54
	haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80036e4:	4b34      	ldr	r3, [pc, #208]	; (80037b8 <SAIx_In_Init+0x15c>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	659a      	str	r2, [r3, #88]	; 0x58
	haudio_out_sai.SlotInit.SlotNumber = 4;
 80036ea:	4b33      	ldr	r3, [pc, #204]	; (80037b8 <SAIx_In_Init+0x15c>)
 80036ec:	2204      	movs	r2, #4
 80036ee:	65da      	str	r2, [r3, #92]	; 0x5c
	haudio_out_sai.SlotInit.SlotActive = SlotActive;
 80036f0:	4a31      	ldr	r2, [pc, #196]	; (80037b8 <SAIx_In_Init+0x15c>)
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	6613      	str	r3, [r2, #96]	; 0x60

	HAL_SAI_Init(&haudio_out_sai);
 80036f6:	4830      	ldr	r0, [pc, #192]	; (80037b8 <SAIx_In_Init+0x15c>)
 80036f8:	f007 ffd6 	bl	800b6a8 <HAL_SAI_Init>

	/* Initialize SAI2 block B in SLAVE RX synchronous from SAI2 block A */
	/* Initialize the haudio_in_sai Instance parameter */
	haudio_in_sai.Instance = AUDIO_IN_SAIx;
 80036fc:	4b30      	ldr	r3, [pc, #192]	; (80037c0 <SAIx_In_Init+0x164>)
 80036fe:	4a31      	ldr	r2, [pc, #196]	; (80037c4 <SAIx_In_Init+0x168>)
 8003700:	601a      	str	r2, [r3, #0]

	/* Disable SAI peripheral to allow access to SAI internal registers */
	__HAL_SAI_DISABLE(&haudio_in_sai);
 8003702:	4b2f      	ldr	r3, [pc, #188]	; (80037c0 <SAIx_In_Init+0x164>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	4b2d      	ldr	r3, [pc, #180]	; (80037c0 <SAIx_In_Init+0x164>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003710:	601a      	str	r2, [r3, #0]

	/* Configure SAI_Block_x
	 LSBFirst: Disabled
	 DataSize: 16 */
	haudio_in_sai.Init.AudioFrequency = AudioFreq;
 8003712:	4a2b      	ldr	r2, [pc, #172]	; (80037c0 <SAIx_In_Init+0x164>)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	61d3      	str	r3, [r2, #28]
	haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
 8003718:	4b29      	ldr	r3, [pc, #164]	; (80037c0 <SAIx_In_Init+0x164>)
 800371a:	2203      	movs	r2, #3
 800371c:	605a      	str	r2, [r3, #4]
	haudio_in_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 800371e:	4b28      	ldr	r3, [pc, #160]	; (80037c0 <SAIx_In_Init+0x164>)
 8003720:	2200      	movs	r2, #0
 8003722:	615a      	str	r2, [r3, #20]
	haudio_in_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8003724:	4b26      	ldr	r3, [pc, #152]	; (80037c0 <SAIx_In_Init+0x164>)
 8003726:	2200      	movs	r2, #0
 8003728:	631a      	str	r2, [r3, #48]	; 0x30
	haudio_in_sai.Init.DataSize = SAI_DATASIZE_16;
 800372a:	4b25      	ldr	r3, [pc, #148]	; (80037c0 <SAIx_In_Init+0x164>)
 800372c:	2280      	movs	r2, #128	; 0x80
 800372e:	635a      	str	r2, [r3, #52]	; 0x34
	haudio_in_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8003730:	4b23      	ldr	r3, [pc, #140]	; (80037c0 <SAIx_In_Init+0x164>)
 8003732:	2200      	movs	r2, #0
 8003734:	639a      	str	r2, [r3, #56]	; 0x38
	haudio_in_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8003736:	4b22      	ldr	r3, [pc, #136]	; (80037c0 <SAIx_In_Init+0x164>)
 8003738:	2201      	movs	r2, #1
 800373a:	63da      	str	r2, [r3, #60]	; 0x3c
	haudio_in_sai.Init.Synchro = SAI_SYNCHRONOUS;
 800373c:	4b20      	ldr	r3, [pc, #128]	; (80037c0 <SAIx_In_Init+0x164>)
 800373e:	2201      	movs	r2, #1
 8003740:	609a      	str	r2, [r3, #8]
	haudio_in_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLED;
 8003742:	4b1f      	ldr	r3, [pc, #124]	; (80037c0 <SAIx_In_Init+0x164>)
 8003744:	2200      	movs	r2, #0
 8003746:	611a      	str	r2, [r3, #16]
	haudio_in_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8003748:	4b1d      	ldr	r3, [pc, #116]	; (80037c0 <SAIx_In_Init+0x164>)
 800374a:	2201      	movs	r2, #1
 800374c:	619a      	str	r2, [r3, #24]
	 Frame Length: 64
	 Frame active Length: 32
	 FS Definition: Start frame + Channel Side identification
	 FS Polarity: FS active Low
	 FS Offset: FS asserted one bit before the first bit of slot 0 */
	haudio_in_sai.FrameInit.FrameLength = 64;
 800374e:	4b1c      	ldr	r3, [pc, #112]	; (80037c0 <SAIx_In_Init+0x164>)
 8003750:	2240      	movs	r2, #64	; 0x40
 8003752:	641a      	str	r2, [r3, #64]	; 0x40
	haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 8003754:	4b1a      	ldr	r3, [pc, #104]	; (80037c0 <SAIx_In_Init+0x164>)
 8003756:	2220      	movs	r2, #32
 8003758:	645a      	str	r2, [r3, #68]	; 0x44
	haudio_in_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 800375a:	4b19      	ldr	r3, [pc, #100]	; (80037c0 <SAIx_In_Init+0x164>)
 800375c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003760:	649a      	str	r2, [r3, #72]	; 0x48
	haudio_in_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8003762:	4b17      	ldr	r3, [pc, #92]	; (80037c0 <SAIx_In_Init+0x164>)
 8003764:	2200      	movs	r2, #0
 8003766:	64da      	str	r2, [r3, #76]	; 0x4c
	haudio_in_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8003768:	4b15      	ldr	r3, [pc, #84]	; (80037c0 <SAIx_In_Init+0x164>)
 800376a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800376e:	651a      	str	r2, [r3, #80]	; 0x50
	/* Configure SAI Block_x Slot
	 Slot First Bit Offset: 0
	 Slot Size  : 16
	 Slot Number: 4
	 Slot Active: All slot active */
	haudio_in_sai.SlotInit.FirstBitOffset = 0;
 8003770:	4b13      	ldr	r3, [pc, #76]	; (80037c0 <SAIx_In_Init+0x164>)
 8003772:	2200      	movs	r2, #0
 8003774:	655a      	str	r2, [r3, #84]	; 0x54
	haudio_in_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8003776:	4b12      	ldr	r3, [pc, #72]	; (80037c0 <SAIx_In_Init+0x164>)
 8003778:	2200      	movs	r2, #0
 800377a:	659a      	str	r2, [r3, #88]	; 0x58
	haudio_in_sai.SlotInit.SlotNumber = 4;
 800377c:	4b10      	ldr	r3, [pc, #64]	; (80037c0 <SAIx_In_Init+0x164>)
 800377e:	2204      	movs	r2, #4
 8003780:	65da      	str	r2, [r3, #92]	; 0x5c
	haudio_in_sai.SlotInit.SlotActive = SlotActive;
 8003782:	4a0f      	ldr	r2, [pc, #60]	; (80037c0 <SAIx_In_Init+0x164>)
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	6613      	str	r3, [r2, #96]	; 0x60

	HAL_SAI_Init(&haudio_in_sai);
 8003788:	480d      	ldr	r0, [pc, #52]	; (80037c0 <SAIx_In_Init+0x164>)
 800378a:	f007 ff8d 	bl	800b6a8 <HAL_SAI_Init>

	/* Enable SAI peripheral to generate MCLK */
	__HAL_SAI_ENABLE(&haudio_out_sai);
 800378e:	4b0a      	ldr	r3, [pc, #40]	; (80037b8 <SAIx_In_Init+0x15c>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	4b08      	ldr	r3, [pc, #32]	; (80037b8 <SAIx_In_Init+0x15c>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800379c:	601a      	str	r2, [r3, #0]

	/* Enable SAI peripheral */
	__HAL_SAI_ENABLE(&haudio_in_sai);
 800379e:	4b08      	ldr	r3, [pc, #32]	; (80037c0 <SAIx_In_Init+0x164>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	4b06      	ldr	r3, [pc, #24]	; (80037c0 <SAIx_In_Init+0x164>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80037ac:	601a      	str	r2, [r3, #0]
}
 80037ae:	bf00      	nop
 80037b0:	3710      	adds	r7, #16
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	20000a1c 	.word	0x20000a1c
 80037bc:	40015c04 	.word	0x40015c04
 80037c0:	20000aa0 	.word	0x20000aa0
 80037c4:	40015c24 	.word	0x40015c24

080037c8 <SAIx_In_DeInit>:

/**
 * @brief  Deinitializes the output Audio Codec audio interface (SAI).
 * @retval None
 */
static void SAIx_In_DeInit(void) {
 80037c8:	b580      	push	{r7, lr}
 80037ca:	af00      	add	r7, sp, #0
	/* Initialize the haudio_in_sai Instance parameter */
	haudio_in_sai.Instance = AUDIO_IN_SAIx;
 80037cc:	4b07      	ldr	r3, [pc, #28]	; (80037ec <SAIx_In_DeInit+0x24>)
 80037ce:	4a08      	ldr	r2, [pc, #32]	; (80037f0 <SAIx_In_DeInit+0x28>)
 80037d0:	601a      	str	r2, [r3, #0]

	/* Disable SAI peripheral */
	__HAL_SAI_DISABLE(&haudio_in_sai);
 80037d2:	4b06      	ldr	r3, [pc, #24]	; (80037ec <SAIx_In_DeInit+0x24>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	4b04      	ldr	r3, [pc, #16]	; (80037ec <SAIx_In_DeInit+0x24>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80037e0:	601a      	str	r2, [r3, #0]

	HAL_SAI_DeInit(&haudio_in_sai);
 80037e2:	4802      	ldr	r0, [pc, #8]	; (80037ec <SAIx_In_DeInit+0x24>)
 80037e4:	f008 f8de 	bl	800b9a4 <HAL_SAI_DeInit>
}
 80037e8:	bf00      	nop
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	20000aa0 	.word	0x20000aa0
 80037f0:	40015c24 	.word	0x40015c24

080037f4 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 80037f4:	b580      	push	{r7, lr}
 80037f6:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 80037f8:	4b31      	ldr	r3, [pc, #196]	; (80038c0 <BSP_LCD_Init+0xcc>)
 80037fa:	2228      	movs	r2, #40	; 0x28
 80037fc:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 80037fe:	4b30      	ldr	r3, [pc, #192]	; (80038c0 <BSP_LCD_Init+0xcc>)
 8003800:	2209      	movs	r2, #9
 8003802:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8003804:	4b2e      	ldr	r3, [pc, #184]	; (80038c0 <BSP_LCD_Init+0xcc>)
 8003806:	2235      	movs	r2, #53	; 0x35
 8003808:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800380a:	4b2d      	ldr	r3, [pc, #180]	; (80038c0 <BSP_LCD_Init+0xcc>)
 800380c:	220b      	movs	r2, #11
 800380e:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8003810:	4b2b      	ldr	r3, [pc, #172]	; (80038c0 <BSP_LCD_Init+0xcc>)
 8003812:	f240 121b 	movw	r2, #283	; 0x11b
 8003816:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8003818:	4b29      	ldr	r3, [pc, #164]	; (80038c0 <BSP_LCD_Init+0xcc>)
 800381a:	f240 2215 	movw	r2, #533	; 0x215
 800381e:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8003820:	4b27      	ldr	r3, [pc, #156]	; (80038c0 <BSP_LCD_Init+0xcc>)
 8003822:	f240 121d 	movw	r2, #285	; 0x11d
 8003826:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8003828:	4b25      	ldr	r3, [pc, #148]	; (80038c0 <BSP_LCD_Init+0xcc>)
 800382a:	f240 2235 	movw	r2, #565	; 0x235
 800382e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8003830:	2100      	movs	r1, #0
 8003832:	4823      	ldr	r0, [pc, #140]	; (80038c0 <BSP_LCD_Init+0xcc>)
 8003834:	f000 fd8e 	bl	8004354 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8003838:	4b21      	ldr	r3, [pc, #132]	; (80038c0 <BSP_LCD_Init+0xcc>)
 800383a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800383e:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8003840:	4b1f      	ldr	r3, [pc, #124]	; (80038c0 <BSP_LCD_Init+0xcc>)
 8003842:	f44f 7288 	mov.w	r2, #272	; 0x110
 8003846:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8003848:	4b1d      	ldr	r3, [pc, #116]	; (80038c0 <BSP_LCD_Init+0xcc>)
 800384a:	2200      	movs	r2, #0
 800384c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8003850:	4b1b      	ldr	r3, [pc, #108]	; (80038c0 <BSP_LCD_Init+0xcc>)
 8003852:	2200      	movs	r2, #0
 8003854:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8003858:	4b19      	ldr	r3, [pc, #100]	; (80038c0 <BSP_LCD_Init+0xcc>)
 800385a:	2200      	movs	r2, #0
 800385c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003860:	4b17      	ldr	r3, [pc, #92]	; (80038c0 <BSP_LCD_Init+0xcc>)
 8003862:	2200      	movs	r2, #0
 8003864:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8003866:	4b16      	ldr	r3, [pc, #88]	; (80038c0 <BSP_LCD_Init+0xcc>)
 8003868:	2200      	movs	r2, #0
 800386a:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 800386c:	4b14      	ldr	r3, [pc, #80]	; (80038c0 <BSP_LCD_Init+0xcc>)
 800386e:	2200      	movs	r2, #0
 8003870:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003872:	4b13      	ldr	r3, [pc, #76]	; (80038c0 <BSP_LCD_Init+0xcc>)
 8003874:	2200      	movs	r2, #0
 8003876:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8003878:	4b11      	ldr	r3, [pc, #68]	; (80038c0 <BSP_LCD_Init+0xcc>)
 800387a:	4a12      	ldr	r2, [pc, #72]	; (80038c4 <BSP_LCD_Init+0xd0>)
 800387c:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 800387e:	4810      	ldr	r0, [pc, #64]	; (80038c0 <BSP_LCD_Init+0xcc>)
 8003880:	f006 fa0e 	bl	8009ca0 <HAL_LTDC_GetState>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d103      	bne.n	8003892 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 800388a:	2100      	movs	r1, #0
 800388c:	480c      	ldr	r0, [pc, #48]	; (80038c0 <BSP_LCD_Init+0xcc>)
 800388e:	f000 fc87 	bl	80041a0 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8003892:	480b      	ldr	r0, [pc, #44]	; (80038c0 <BSP_LCD_Init+0xcc>)
 8003894:	f006 f834 	bl	8009900 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8003898:	2201      	movs	r2, #1
 800389a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800389e:	480a      	ldr	r0, [pc, #40]	; (80038c8 <BSP_LCD_Init+0xd4>)
 80038a0:	f005 fa6a 	bl	8008d78 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 80038a4:	2201      	movs	r2, #1
 80038a6:	2108      	movs	r1, #8
 80038a8:	4808      	ldr	r0, [pc, #32]	; (80038cc <BSP_LCD_Init+0xd8>)
 80038aa:	f005 fa65 	bl	8008d78 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80038ae:	f000 fe71 	bl	8004594 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80038b2:	4807      	ldr	r0, [pc, #28]	; (80038d0 <BSP_LCD_Init+0xdc>)
 80038b4:	f000 f8d8 	bl	8003a68 <BSP_LCD_SetFont>
  
  return LCD_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	20000be4 	.word	0x20000be4
 80038c4:	40016800 	.word	0x40016800
 80038c8:	40022000 	.word	0x40022000
 80038cc:	40022800 	.word	0x40022800
 80038d0:	2000008c 	.word	0x2000008c

080038d4 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80038d4:	b480      	push	{r7}
 80038d6:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80038d8:	4b06      	ldr	r3, [pc, #24]	; (80038f4 <BSP_LCD_GetXSize+0x20>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a06      	ldr	r2, [pc, #24]	; (80038f8 <BSP_LCD_GetXSize+0x24>)
 80038de:	2134      	movs	r1, #52	; 0x34
 80038e0:	fb01 f303 	mul.w	r3, r1, r3
 80038e4:	4413      	add	r3, r2
 80038e6:	3360      	adds	r3, #96	; 0x60
 80038e8:	681b      	ldr	r3, [r3, #0]
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr
 80038f4:	20000ccc 	.word	0x20000ccc
 80038f8:	20000be4 	.word	0x20000be4

080038fc <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80038fc:	b480      	push	{r7}
 80038fe:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8003900:	4b06      	ldr	r3, [pc, #24]	; (800391c <BSP_LCD_GetYSize+0x20>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a06      	ldr	r2, [pc, #24]	; (8003920 <BSP_LCD_GetYSize+0x24>)
 8003906:	2134      	movs	r1, #52	; 0x34
 8003908:	fb01 f303 	mul.w	r3, r1, r3
 800390c:	4413      	add	r3, r2
 800390e:	3364      	adds	r3, #100	; 0x64
 8003910:	681b      	ldr	r3, [r3, #0]
}
 8003912:	4618      	mov	r0, r3
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr
 800391c:	20000ccc 	.word	0x20000ccc
 8003920:	20000be4 	.word	0x20000be4

08003924 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8003924:	b580      	push	{r7, lr}
 8003926:	b090      	sub	sp, #64	; 0x40
 8003928:	af00      	add	r7, sp, #0
 800392a:	4603      	mov	r3, r0
 800392c:	6039      	str	r1, [r7, #0]
 800392e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8003930:	2300      	movs	r3, #0
 8003932:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8003934:	f7ff ffce 	bl	80038d4 <BSP_LCD_GetXSize>
 8003938:	4603      	mov	r3, r0
 800393a:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 800393c:	2300      	movs	r3, #0
 800393e:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8003940:	f7ff ffdc 	bl	80038fc <BSP_LCD_GetYSize>
 8003944:	4603      	mov	r3, r0
 8003946:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003948:	2300      	movs	r3, #0
 800394a:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8003950:	23ff      	movs	r3, #255	; 0xff
 8003952:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8003954:	2300      	movs	r3, #0
 8003956:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8003958:	2300      	movs	r3, #0
 800395a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 800395e:	2300      	movs	r3, #0
 8003960:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8003964:	2300      	movs	r3, #0
 8003966:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800396a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800396e:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8003970:	2307      	movs	r3, #7
 8003972:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8003974:	f7ff ffae 	bl	80038d4 <BSP_LCD_GetXSize>
 8003978:	4603      	mov	r3, r0
 800397a:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 800397c:	f7ff ffbe 	bl	80038fc <BSP_LCD_GetYSize>
 8003980:	4603      	mov	r3, r0
 8003982:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8003984:	88fa      	ldrh	r2, [r7, #6]
 8003986:	f107 030c 	add.w	r3, r7, #12
 800398a:	4619      	mov	r1, r3
 800398c:	4812      	ldr	r0, [pc, #72]	; (80039d8 <BSP_LCD_LayerDefaultInit+0xb4>)
 800398e:	f006 f949 	bl	8009c24 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8003992:	88fa      	ldrh	r2, [r7, #6]
 8003994:	4911      	ldr	r1, [pc, #68]	; (80039dc <BSP_LCD_LayerDefaultInit+0xb8>)
 8003996:	4613      	mov	r3, r2
 8003998:	005b      	lsls	r3, r3, #1
 800399a:	4413      	add	r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	440b      	add	r3, r1
 80039a0:	3304      	adds	r3, #4
 80039a2:	f04f 32ff 	mov.w	r2, #4294967295
 80039a6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80039a8:	88fa      	ldrh	r2, [r7, #6]
 80039aa:	490c      	ldr	r1, [pc, #48]	; (80039dc <BSP_LCD_LayerDefaultInit+0xb8>)
 80039ac:	4613      	mov	r3, r2
 80039ae:	005b      	lsls	r3, r3, #1
 80039b0:	4413      	add	r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	440b      	add	r3, r1
 80039b6:	3308      	adds	r3, #8
 80039b8:	4a09      	ldr	r2, [pc, #36]	; (80039e0 <BSP_LCD_LayerDefaultInit+0xbc>)
 80039ba:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80039bc:	88fa      	ldrh	r2, [r7, #6]
 80039be:	4907      	ldr	r1, [pc, #28]	; (80039dc <BSP_LCD_LayerDefaultInit+0xb8>)
 80039c0:	4613      	mov	r3, r2
 80039c2:	005b      	lsls	r3, r3, #1
 80039c4:	4413      	add	r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	440b      	add	r3, r1
 80039ca:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80039ce:	601a      	str	r2, [r3, #0]
}
 80039d0:	bf00      	nop
 80039d2:	3740      	adds	r7, #64	; 0x40
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	20000be4 	.word	0x20000be4
 80039dc:	20000cd0 	.word	0x20000cd0
 80039e0:	2000008c 	.word	0x2000008c

080039e4 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80039ec:	4a04      	ldr	r2, [pc, #16]	; (8003a00 <BSP_LCD_SelectLayer+0x1c>)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6013      	str	r3, [r2, #0]
} 
 80039f2:	bf00      	nop
 80039f4:	370c      	adds	r7, #12
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	20000ccc 	.word	0x20000ccc

08003a04 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8003a0c:	4b07      	ldr	r3, [pc, #28]	; (8003a2c <BSP_LCD_SetTextColor+0x28>)
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	4907      	ldr	r1, [pc, #28]	; (8003a30 <BSP_LCD_SetTextColor+0x2c>)
 8003a12:	4613      	mov	r3, r2
 8003a14:	005b      	lsls	r3, r3, #1
 8003a16:	4413      	add	r3, r2
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	440b      	add	r3, r1
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	601a      	str	r2, [r3, #0]
}
 8003a20:	bf00      	nop
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr
 8003a2c:	20000ccc 	.word	0x20000ccc
 8003a30:	20000cd0 	.word	0x20000cd0

08003a34 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8003a3c:	4b08      	ldr	r3, [pc, #32]	; (8003a60 <BSP_LCD_SetBackColor+0x2c>)
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	4908      	ldr	r1, [pc, #32]	; (8003a64 <BSP_LCD_SetBackColor+0x30>)
 8003a42:	4613      	mov	r3, r2
 8003a44:	005b      	lsls	r3, r3, #1
 8003a46:	4413      	add	r3, r2
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	440b      	add	r3, r1
 8003a4c:	3304      	adds	r3, #4
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	601a      	str	r2, [r3, #0]
}
 8003a52:	bf00      	nop
 8003a54:	370c      	adds	r7, #12
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	20000ccc 	.word	0x20000ccc
 8003a64:	20000cd0 	.word	0x20000cd0

08003a68 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8003a70:	4b08      	ldr	r3, [pc, #32]	; (8003a94 <BSP_LCD_SetFont+0x2c>)
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	4908      	ldr	r1, [pc, #32]	; (8003a98 <BSP_LCD_SetFont+0x30>)
 8003a76:	4613      	mov	r3, r2
 8003a78:	005b      	lsls	r3, r3, #1
 8003a7a:	4413      	add	r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	440b      	add	r3, r1
 8003a80:	3308      	adds	r3, #8
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	601a      	str	r2, [r3, #0]
}
 8003a86:	bf00      	nop
 8003a88:	370c      	adds	r7, #12
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	20000ccc 	.word	0x20000ccc
 8003a98:	20000cd0 	.word	0x20000cd0

08003a9c <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8003a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a9e:	b085      	sub	sp, #20
 8003aa0:	af02      	add	r7, sp, #8
 8003aa2:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8003aa4:	4b0f      	ldr	r3, [pc, #60]	; (8003ae4 <BSP_LCD_Clear+0x48>)
 8003aa6:	681c      	ldr	r4, [r3, #0]
 8003aa8:	4b0e      	ldr	r3, [pc, #56]	; (8003ae4 <BSP_LCD_Clear+0x48>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a0e      	ldr	r2, [pc, #56]	; (8003ae8 <BSP_LCD_Clear+0x4c>)
 8003aae:	2134      	movs	r1, #52	; 0x34
 8003ab0:	fb01 f303 	mul.w	r3, r1, r3
 8003ab4:	4413      	add	r3, r2
 8003ab6:	335c      	adds	r3, #92	; 0x5c
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	461e      	mov	r6, r3
 8003abc:	f7ff ff0a 	bl	80038d4 <BSP_LCD_GetXSize>
 8003ac0:	4605      	mov	r5, r0
 8003ac2:	f7ff ff1b 	bl	80038fc <BSP_LCD_GetYSize>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	9301      	str	r3, [sp, #4]
 8003acc:	2300      	movs	r3, #0
 8003ace:	9300      	str	r3, [sp, #0]
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	462a      	mov	r2, r5
 8003ad4:	4631      	mov	r1, r6
 8003ad6:	4620      	mov	r0, r4
 8003ad8:	f000 fd10 	bl	80044fc <LL_FillBuffer>
}
 8003adc:	bf00      	nop
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ae4:	20000ccc 	.word	0x20000ccc
 8003ae8:	20000be4 	.word	0x20000be4

08003aec <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8003aec:	b590      	push	{r4, r7, lr}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	4603      	mov	r3, r0
 8003af4:	80fb      	strh	r3, [r7, #6]
 8003af6:	460b      	mov	r3, r1
 8003af8:	80bb      	strh	r3, [r7, #4]
 8003afa:	4613      	mov	r3, r2
 8003afc:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003afe:	4b1b      	ldr	r3, [pc, #108]	; (8003b6c <BSP_LCD_DisplayChar+0x80>)
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	491b      	ldr	r1, [pc, #108]	; (8003b70 <BSP_LCD_DisplayChar+0x84>)
 8003b04:	4613      	mov	r3, r2
 8003b06:	005b      	lsls	r3, r3, #1
 8003b08:	4413      	add	r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	440b      	add	r3, r1
 8003b0e:	3308      	adds	r3, #8
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	6819      	ldr	r1, [r3, #0]
 8003b14:	78fb      	ldrb	r3, [r7, #3]
 8003b16:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003b1a:	4b14      	ldr	r3, [pc, #80]	; (8003b6c <BSP_LCD_DisplayChar+0x80>)
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	4c14      	ldr	r4, [pc, #80]	; (8003b70 <BSP_LCD_DisplayChar+0x84>)
 8003b20:	4613      	mov	r3, r2
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	4413      	add	r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	4423      	add	r3, r4
 8003b2a:	3308      	adds	r3, #8
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003b30:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003b34:	4b0d      	ldr	r3, [pc, #52]	; (8003b6c <BSP_LCD_DisplayChar+0x80>)
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	4c0d      	ldr	r4, [pc, #52]	; (8003b70 <BSP_LCD_DisplayChar+0x84>)
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	005b      	lsls	r3, r3, #1
 8003b3e:	4413      	add	r3, r2
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	4423      	add	r3, r4
 8003b44:	3308      	adds	r3, #8
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	889b      	ldrh	r3, [r3, #4]
 8003b4a:	3307      	adds	r3, #7
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	da00      	bge.n	8003b52 <BSP_LCD_DisplayChar+0x66>
 8003b50:	3307      	adds	r3, #7
 8003b52:	10db      	asrs	r3, r3, #3
 8003b54:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003b58:	18ca      	adds	r2, r1, r3
 8003b5a:	88b9      	ldrh	r1, [r7, #4]
 8003b5c:	88fb      	ldrh	r3, [r7, #6]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f000 fc14 	bl	800438c <DrawChar>
}
 8003b64:	bf00      	nop
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd90      	pop	{r4, r7, pc}
 8003b6c:	20000ccc 	.word	0x20000ccc
 8003b70:	20000cd0 	.word	0x20000cd0

08003b74 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8003b74:	b5b0      	push	{r4, r5, r7, lr}
 8003b76:	b088      	sub	sp, #32
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60ba      	str	r2, [r7, #8]
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	4603      	mov	r3, r0
 8003b80:	81fb      	strh	r3, [r7, #14]
 8003b82:	460b      	mov	r3, r1
 8003b84:	81bb      	strh	r3, [r7, #12]
 8003b86:	4613      	mov	r3, r2
 8003b88:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	83fb      	strh	r3, [r7, #30]
 8003b8e:	2300      	movs	r3, #0
 8003b90:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8003b92:	2300      	movs	r3, #0
 8003b94:	61bb      	str	r3, [r7, #24]
 8003b96:	2300      	movs	r3, #0
 8003b98:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8003b9e:	e002      	b.n	8003ba6 <BSP_LCD_DisplayStringAt+0x32>
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	61bb      	str	r3, [r7, #24]
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	1c5a      	adds	r2, r3, #1
 8003baa:	617a      	str	r2, [r7, #20]
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1f6      	bne.n	8003ba0 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8003bb2:	f7ff fe8f 	bl	80038d4 <BSP_LCD_GetXSize>
 8003bb6:	4601      	mov	r1, r0
 8003bb8:	4b50      	ldr	r3, [pc, #320]	; (8003cfc <BSP_LCD_DisplayStringAt+0x188>)
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	4850      	ldr	r0, [pc, #320]	; (8003d00 <BSP_LCD_DisplayStringAt+0x18c>)
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	005b      	lsls	r3, r3, #1
 8003bc2:	4413      	add	r3, r2
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	4403      	add	r3, r0
 8003bc8:	3308      	adds	r3, #8
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	889b      	ldrh	r3, [r3, #4]
 8003bce:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bd2:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8003bd4:	79fb      	ldrb	r3, [r7, #7]
 8003bd6:	2b03      	cmp	r3, #3
 8003bd8:	d01c      	beq.n	8003c14 <BSP_LCD_DisplayStringAt+0xa0>
 8003bda:	2b03      	cmp	r3, #3
 8003bdc:	dc33      	bgt.n	8003c46 <BSP_LCD_DisplayStringAt+0xd2>
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d002      	beq.n	8003be8 <BSP_LCD_DisplayStringAt+0x74>
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d019      	beq.n	8003c1a <BSP_LCD_DisplayStringAt+0xa6>
 8003be6:	e02e      	b.n	8003c46 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8003be8:	693a      	ldr	r2, [r7, #16]
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	1ad1      	subs	r1, r2, r3
 8003bee:	4b43      	ldr	r3, [pc, #268]	; (8003cfc <BSP_LCD_DisplayStringAt+0x188>)
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	4843      	ldr	r0, [pc, #268]	; (8003d00 <BSP_LCD_DisplayStringAt+0x18c>)
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	005b      	lsls	r3, r3, #1
 8003bf8:	4413      	add	r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	4403      	add	r3, r0
 8003bfe:	3308      	adds	r3, #8
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	889b      	ldrh	r3, [r3, #4]
 8003c04:	fb01 f303 	mul.w	r3, r1, r3
 8003c08:	085b      	lsrs	r3, r3, #1
 8003c0a:	b29a      	uxth	r2, r3
 8003c0c:	89fb      	ldrh	r3, [r7, #14]
 8003c0e:	4413      	add	r3, r2
 8003c10:	83fb      	strh	r3, [r7, #30]
      break;
 8003c12:	e01b      	b.n	8003c4c <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8003c14:	89fb      	ldrh	r3, [r7, #14]
 8003c16:	83fb      	strh	r3, [r7, #30]
      break;
 8003c18:	e018      	b.n	8003c4c <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8003c1a:	693a      	ldr	r2, [r7, #16]
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	b299      	uxth	r1, r3
 8003c22:	4b36      	ldr	r3, [pc, #216]	; (8003cfc <BSP_LCD_DisplayStringAt+0x188>)
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	4836      	ldr	r0, [pc, #216]	; (8003d00 <BSP_LCD_DisplayStringAt+0x18c>)
 8003c28:	4613      	mov	r3, r2
 8003c2a:	005b      	lsls	r3, r3, #1
 8003c2c:	4413      	add	r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	4403      	add	r3, r0
 8003c32:	3308      	adds	r3, #8
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	889b      	ldrh	r3, [r3, #4]
 8003c38:	fb11 f303 	smulbb	r3, r1, r3
 8003c3c:	b29a      	uxth	r2, r3
 8003c3e:	89fb      	ldrh	r3, [r7, #14]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	83fb      	strh	r3, [r7, #30]
      break;
 8003c44:	e002      	b.n	8003c4c <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 8003c46:	89fb      	ldrh	r3, [r7, #14]
 8003c48:	83fb      	strh	r3, [r7, #30]
      break;
 8003c4a:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8003c4c:	8bfb      	ldrh	r3, [r7, #30]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d003      	beq.n	8003c5a <BSP_LCD_DisplayStringAt+0xe6>
 8003c52:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	da1d      	bge.n	8003c96 <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003c5e:	e01a      	b.n	8003c96 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	781a      	ldrb	r2, [r3, #0]
 8003c64:	89b9      	ldrh	r1, [r7, #12]
 8003c66:	8bfb      	ldrh	r3, [r7, #30]
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7ff ff3f 	bl	8003aec <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8003c6e:	4b23      	ldr	r3, [pc, #140]	; (8003cfc <BSP_LCD_DisplayStringAt+0x188>)
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	4923      	ldr	r1, [pc, #140]	; (8003d00 <BSP_LCD_DisplayStringAt+0x18c>)
 8003c74:	4613      	mov	r3, r2
 8003c76:	005b      	lsls	r3, r3, #1
 8003c78:	4413      	add	r3, r2
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	440b      	add	r3, r1
 8003c7e:	3308      	adds	r3, #8
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	889a      	ldrh	r2, [r3, #4]
 8003c84:	8bfb      	ldrh	r3, [r7, #30]
 8003c86:	4413      	add	r3, r2
 8003c88:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	3301      	adds	r3, #1
 8003c8e:	60bb      	str	r3, [r7, #8]
    i++;
 8003c90:	8bbb      	ldrh	r3, [r7, #28]
 8003c92:	3301      	adds	r3, #1
 8003c94:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	bf14      	ite	ne
 8003c9e:	2301      	movne	r3, #1
 8003ca0:	2300      	moveq	r3, #0
 8003ca2:	b2dc      	uxtb	r4, r3
 8003ca4:	f7ff fe16 	bl	80038d4 <BSP_LCD_GetXSize>
 8003ca8:	8bb9      	ldrh	r1, [r7, #28]
 8003caa:	4b14      	ldr	r3, [pc, #80]	; (8003cfc <BSP_LCD_DisplayStringAt+0x188>)
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	4d14      	ldr	r5, [pc, #80]	; (8003d00 <BSP_LCD_DisplayStringAt+0x18c>)
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	005b      	lsls	r3, r3, #1
 8003cb4:	4413      	add	r3, r2
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	442b      	add	r3, r5
 8003cba:	3308      	adds	r3, #8
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	889b      	ldrh	r3, [r3, #4]
 8003cc0:	fb01 f303 	mul.w	r3, r1, r3
 8003cc4:	1ac3      	subs	r3, r0, r3
 8003cc6:	b299      	uxth	r1, r3
 8003cc8:	4b0c      	ldr	r3, [pc, #48]	; (8003cfc <BSP_LCD_DisplayStringAt+0x188>)
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	480c      	ldr	r0, [pc, #48]	; (8003d00 <BSP_LCD_DisplayStringAt+0x18c>)
 8003cce:	4613      	mov	r3, r2
 8003cd0:	005b      	lsls	r3, r3, #1
 8003cd2:	4413      	add	r3, r2
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	4403      	add	r3, r0
 8003cd8:	3308      	adds	r3, #8
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	889b      	ldrh	r3, [r3, #4]
 8003cde:	4299      	cmp	r1, r3
 8003ce0:	bf2c      	ite	cs
 8003ce2:	2301      	movcs	r3, #1
 8003ce4:	2300      	movcc	r3, #0
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	4023      	ands	r3, r4
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1b7      	bne.n	8003c60 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8003cf0:	bf00      	nop
 8003cf2:	bf00      	nop
 8003cf4:	3720      	adds	r7, #32
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bdb0      	pop	{r4, r5, r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	20000ccc 	.word	0x20000ccc
 8003d00:	20000cd0 	.word	0x20000cd0

08003d04 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8003d04:	b5b0      	push	{r4, r5, r7, lr}
 8003d06:	b086      	sub	sp, #24
 8003d08:	af02      	add	r7, sp, #8
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	80fb      	strh	r3, [r7, #6]
 8003d0e:	460b      	mov	r3, r1
 8003d10:	80bb      	strh	r3, [r7, #4]
 8003d12:	4613      	mov	r3, r2
 8003d14:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8003d16:	2300      	movs	r3, #0
 8003d18:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003d1a:	4b26      	ldr	r3, [pc, #152]	; (8003db4 <BSP_LCD_DrawHLine+0xb0>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a26      	ldr	r2, [pc, #152]	; (8003db8 <BSP_LCD_DrawHLine+0xb4>)
 8003d20:	2134      	movs	r1, #52	; 0x34
 8003d22:	fb01 f303 	mul.w	r3, r1, r3
 8003d26:	4413      	add	r3, r2
 8003d28:	3348      	adds	r3, #72	; 0x48
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d114      	bne.n	8003d5a <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003d30:	4b20      	ldr	r3, [pc, #128]	; (8003db4 <BSP_LCD_DrawHLine+0xb0>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a20      	ldr	r2, [pc, #128]	; (8003db8 <BSP_LCD_DrawHLine+0xb4>)
 8003d36:	2134      	movs	r1, #52	; 0x34
 8003d38:	fb01 f303 	mul.w	r3, r1, r3
 8003d3c:	4413      	add	r3, r2
 8003d3e:	335c      	adds	r3, #92	; 0x5c
 8003d40:	681c      	ldr	r4, [r3, #0]
 8003d42:	f7ff fdc7 	bl	80038d4 <BSP_LCD_GetXSize>
 8003d46:	4602      	mov	r2, r0
 8003d48:	88bb      	ldrh	r3, [r7, #4]
 8003d4a:	fb03 f202 	mul.w	r2, r3, r2
 8003d4e:	88fb      	ldrh	r3, [r7, #6]
 8003d50:	4413      	add	r3, r2
 8003d52:	005b      	lsls	r3, r3, #1
 8003d54:	4423      	add	r3, r4
 8003d56:	60fb      	str	r3, [r7, #12]
 8003d58:	e013      	b.n	8003d82 <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003d5a:	4b16      	ldr	r3, [pc, #88]	; (8003db4 <BSP_LCD_DrawHLine+0xb0>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a16      	ldr	r2, [pc, #88]	; (8003db8 <BSP_LCD_DrawHLine+0xb4>)
 8003d60:	2134      	movs	r1, #52	; 0x34
 8003d62:	fb01 f303 	mul.w	r3, r1, r3
 8003d66:	4413      	add	r3, r2
 8003d68:	335c      	adds	r3, #92	; 0x5c
 8003d6a:	681c      	ldr	r4, [r3, #0]
 8003d6c:	f7ff fdb2 	bl	80038d4 <BSP_LCD_GetXSize>
 8003d70:	4602      	mov	r2, r0
 8003d72:	88bb      	ldrh	r3, [r7, #4]
 8003d74:	fb03 f202 	mul.w	r2, r3, r2
 8003d78:	88fb      	ldrh	r3, [r7, #6]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	4423      	add	r3, r4
 8003d80:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8003d82:	4b0c      	ldr	r3, [pc, #48]	; (8003db4 <BSP_LCD_DrawHLine+0xb0>)
 8003d84:	6818      	ldr	r0, [r3, #0]
 8003d86:	68f9      	ldr	r1, [r7, #12]
 8003d88:	887c      	ldrh	r4, [r7, #2]
 8003d8a:	4b0a      	ldr	r3, [pc, #40]	; (8003db4 <BSP_LCD_DrawHLine+0xb0>)
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	4d0b      	ldr	r5, [pc, #44]	; (8003dbc <BSP_LCD_DrawHLine+0xb8>)
 8003d90:	4613      	mov	r3, r2
 8003d92:	005b      	lsls	r3, r3, #1
 8003d94:	4413      	add	r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	442b      	add	r3, r5
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	9301      	str	r3, [sp, #4]
 8003d9e:	2300      	movs	r3, #0
 8003da0:	9300      	str	r3, [sp, #0]
 8003da2:	2301      	movs	r3, #1
 8003da4:	4622      	mov	r2, r4
 8003da6:	f000 fba9 	bl	80044fc <LL_FillBuffer>
}
 8003daa:	bf00      	nop
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bdb0      	pop	{r4, r5, r7, pc}
 8003db2:	bf00      	nop
 8003db4:	20000ccc 	.word	0x20000ccc
 8003db8:	20000be4 	.word	0x20000be4
 8003dbc:	20000cd0 	.word	0x20000cd0

08003dc0 <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8003dc0:	b590      	push	{r4, r7, lr}
 8003dc2:	b087      	sub	sp, #28
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	80fb      	strh	r3, [r7, #6]
 8003dca:	460b      	mov	r3, r1
 8003dcc:	80bb      	strh	r3, [r7, #4]
 8003dce:	4613      	mov	r3, r2
 8003dd0:	807b      	strh	r3, [r7, #2]
  int32_t   decision;    /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 8003dd2:	887b      	ldrh	r3, [r7, #2]
 8003dd4:	005b      	lsls	r3, r3, #1
 8003dd6:	f1c3 0303 	rsb	r3, r3, #3
 8003dda:	617b      	str	r3, [r7, #20]
  current_x = 0;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8003de0:	887b      	ldrh	r3, [r7, #2]
 8003de2:	60fb      	str	r3, [r7, #12]
  
  while (current_x <= current_y)
 8003de4:	e0c7      	b.n	8003f76 <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	88fb      	ldrh	r3, [r7, #6]
 8003dec:	4413      	add	r3, r2
 8003dee:	b298      	uxth	r0, r3
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	88ba      	ldrh	r2, [r7, #4]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	b299      	uxth	r1, r3
 8003dfa:	4b64      	ldr	r3, [pc, #400]	; (8003f8c <BSP_LCD_DrawCircle+0x1cc>)
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	4c64      	ldr	r4, [pc, #400]	; (8003f90 <BSP_LCD_DrawCircle+0x1d0>)
 8003e00:	4613      	mov	r3, r2
 8003e02:	005b      	lsls	r3, r3, #1
 8003e04:	4413      	add	r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	4423      	add	r3, r4
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	f000 f8c1 	bl	8003f94 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	88fa      	ldrh	r2, [r7, #6]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	b298      	uxth	r0, r3
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	88ba      	ldrh	r2, [r7, #4]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	b299      	uxth	r1, r3
 8003e26:	4b59      	ldr	r3, [pc, #356]	; (8003f8c <BSP_LCD_DrawCircle+0x1cc>)
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	4c59      	ldr	r4, [pc, #356]	; (8003f90 <BSP_LCD_DrawCircle+0x1d0>)
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	005b      	lsls	r3, r3, #1
 8003e30:	4413      	add	r3, r2
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	4423      	add	r3, r4
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	461a      	mov	r2, r3
 8003e3a:	f000 f8ab 	bl	8003f94 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	b29a      	uxth	r2, r3
 8003e42:	88fb      	ldrh	r3, [r7, #6]
 8003e44:	4413      	add	r3, r2
 8003e46:	b298      	uxth	r0, r3
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	88ba      	ldrh	r2, [r7, #4]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	b299      	uxth	r1, r3
 8003e52:	4b4e      	ldr	r3, [pc, #312]	; (8003f8c <BSP_LCD_DrawCircle+0x1cc>)
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	4c4e      	ldr	r4, [pc, #312]	; (8003f90 <BSP_LCD_DrawCircle+0x1d0>)
 8003e58:	4613      	mov	r3, r2
 8003e5a:	005b      	lsls	r3, r3, #1
 8003e5c:	4413      	add	r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	4423      	add	r3, r4
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	461a      	mov	r2, r3
 8003e66:	f000 f895 	bl	8003f94 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	88fa      	ldrh	r2, [r7, #6]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	b298      	uxth	r0, r3
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	88ba      	ldrh	r2, [r7, #4]
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	b299      	uxth	r1, r3
 8003e7e:	4b43      	ldr	r3, [pc, #268]	; (8003f8c <BSP_LCD_DrawCircle+0x1cc>)
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	4c43      	ldr	r4, [pc, #268]	; (8003f90 <BSP_LCD_DrawCircle+0x1d0>)
 8003e84:	4613      	mov	r3, r2
 8003e86:	005b      	lsls	r3, r3, #1
 8003e88:	4413      	add	r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	4423      	add	r3, r4
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	461a      	mov	r2, r3
 8003e92:	f000 f87f 	bl	8003f94 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	b29a      	uxth	r2, r3
 8003e9a:	88fb      	ldrh	r3, [r7, #6]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	b298      	uxth	r0, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	b29a      	uxth	r2, r3
 8003ea4:	88bb      	ldrh	r3, [r7, #4]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	b299      	uxth	r1, r3
 8003eaa:	4b38      	ldr	r3, [pc, #224]	; (8003f8c <BSP_LCD_DrawCircle+0x1cc>)
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	4c38      	ldr	r4, [pc, #224]	; (8003f90 <BSP_LCD_DrawCircle+0x1d0>)
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	005b      	lsls	r3, r3, #1
 8003eb4:	4413      	add	r3, r2
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	4423      	add	r3, r4
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	f000 f869 	bl	8003f94 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	88fa      	ldrh	r2, [r7, #6]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	b298      	uxth	r0, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	b29a      	uxth	r2, r3
 8003ed0:	88bb      	ldrh	r3, [r7, #4]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	b299      	uxth	r1, r3
 8003ed6:	4b2d      	ldr	r3, [pc, #180]	; (8003f8c <BSP_LCD_DrawCircle+0x1cc>)
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	4c2d      	ldr	r4, [pc, #180]	; (8003f90 <BSP_LCD_DrawCircle+0x1d0>)
 8003edc:	4613      	mov	r3, r2
 8003ede:	005b      	lsls	r3, r3, #1
 8003ee0:	4413      	add	r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	4423      	add	r3, r4
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	461a      	mov	r2, r3
 8003eea:	f000 f853 	bl	8003f94 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	b29a      	uxth	r2, r3
 8003ef2:	88fb      	ldrh	r3, [r7, #6]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	b298      	uxth	r0, r3
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	b29a      	uxth	r2, r3
 8003efc:	88bb      	ldrh	r3, [r7, #4]
 8003efe:	4413      	add	r3, r2
 8003f00:	b299      	uxth	r1, r3
 8003f02:	4b22      	ldr	r3, [pc, #136]	; (8003f8c <BSP_LCD_DrawCircle+0x1cc>)
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	4c22      	ldr	r4, [pc, #136]	; (8003f90 <BSP_LCD_DrawCircle+0x1d0>)
 8003f08:	4613      	mov	r3, r2
 8003f0a:	005b      	lsls	r3, r3, #1
 8003f0c:	4413      	add	r3, r2
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	4423      	add	r3, r4
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	461a      	mov	r2, r3
 8003f16:	f000 f83d 	bl	8003f94 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	88fa      	ldrh	r2, [r7, #6]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	b298      	uxth	r0, r3
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	b29a      	uxth	r2, r3
 8003f28:	88bb      	ldrh	r3, [r7, #4]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	b299      	uxth	r1, r3
 8003f2e:	4b17      	ldr	r3, [pc, #92]	; (8003f8c <BSP_LCD_DrawCircle+0x1cc>)
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	4c17      	ldr	r4, [pc, #92]	; (8003f90 <BSP_LCD_DrawCircle+0x1d0>)
 8003f34:	4613      	mov	r3, r2
 8003f36:	005b      	lsls	r3, r3, #1
 8003f38:	4413      	add	r3, r2
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	4423      	add	r3, r4
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	461a      	mov	r2, r3
 8003f42:	f000 f827 	bl	8003f94 <BSP_LCD_DrawPixel>
    
    if (decision < 0)
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	da06      	bge.n	8003f5a <BSP_LCD_DrawCircle+0x19a>
    { 
      decision += (current_x << 2) + 6;
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	009a      	lsls	r2, r3, #2
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	4413      	add	r3, r2
 8003f54:	3306      	adds	r3, #6
 8003f56:	617b      	str	r3, [r7, #20]
 8003f58:	e00a      	b.n	8003f70 <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8003f5a:	693a      	ldr	r2, [r7, #16]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	009a      	lsls	r2, r3, #2
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	4413      	add	r3, r2
 8003f66:	330a      	adds	r3, #10
 8003f68:	617b      	str	r3, [r7, #20]
      current_y--;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	3301      	adds	r3, #1
 8003f74:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8003f76:	693a      	ldr	r2, [r7, #16]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	f67f af33 	bls.w	8003de6 <BSP_LCD_DrawCircle+0x26>
  } 
}
 8003f80:	bf00      	nop
 8003f82:	bf00      	nop
 8003f84:	371c      	adds	r7, #28
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd90      	pop	{r4, r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	20000ccc 	.word	0x20000ccc
 8003f90:	20000cd0 	.word	0x20000cd0

08003f94 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8003f94:	b5b0      	push	{r4, r5, r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	603a      	str	r2, [r7, #0]
 8003f9e:	80fb      	strh	r3, [r7, #6]
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003fa4:	4b1d      	ldr	r3, [pc, #116]	; (800401c <BSP_LCD_DrawPixel+0x88>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a1d      	ldr	r2, [pc, #116]	; (8004020 <BSP_LCD_DrawPixel+0x8c>)
 8003faa:	2134      	movs	r1, #52	; 0x34
 8003fac:	fb01 f303 	mul.w	r3, r1, r3
 8003fb0:	4413      	add	r3, r2
 8003fb2:	3348      	adds	r3, #72	; 0x48
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d116      	bne.n	8003fe8 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8003fba:	4b18      	ldr	r3, [pc, #96]	; (800401c <BSP_LCD_DrawPixel+0x88>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a18      	ldr	r2, [pc, #96]	; (8004020 <BSP_LCD_DrawPixel+0x8c>)
 8003fc0:	2134      	movs	r1, #52	; 0x34
 8003fc2:	fb01 f303 	mul.w	r3, r1, r3
 8003fc6:	4413      	add	r3, r2
 8003fc8:	335c      	adds	r3, #92	; 0x5c
 8003fca:	681c      	ldr	r4, [r3, #0]
 8003fcc:	88bd      	ldrh	r5, [r7, #4]
 8003fce:	f7ff fc81 	bl	80038d4 <BSP_LCD_GetXSize>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	fb03 f205 	mul.w	r2, r3, r5
 8003fd8:	88fb      	ldrh	r3, [r7, #6]
 8003fda:	4413      	add	r3, r2
 8003fdc:	005b      	lsls	r3, r3, #1
 8003fde:	4423      	add	r3, r4
 8003fe0:	683a      	ldr	r2, [r7, #0]
 8003fe2:	b292      	uxth	r2, r2
 8003fe4:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8003fe6:	e015      	b.n	8004014 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8003fe8:	4b0c      	ldr	r3, [pc, #48]	; (800401c <BSP_LCD_DrawPixel+0x88>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a0c      	ldr	r2, [pc, #48]	; (8004020 <BSP_LCD_DrawPixel+0x8c>)
 8003fee:	2134      	movs	r1, #52	; 0x34
 8003ff0:	fb01 f303 	mul.w	r3, r1, r3
 8003ff4:	4413      	add	r3, r2
 8003ff6:	335c      	adds	r3, #92	; 0x5c
 8003ff8:	681c      	ldr	r4, [r3, #0]
 8003ffa:	88bd      	ldrh	r5, [r7, #4]
 8003ffc:	f7ff fc6a 	bl	80038d4 <BSP_LCD_GetXSize>
 8004000:	4603      	mov	r3, r0
 8004002:	fb03 f205 	mul.w	r2, r3, r5
 8004006:	88fb      	ldrh	r3, [r7, #6]
 8004008:	4413      	add	r3, r2
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	4423      	add	r3, r4
 800400e:	461a      	mov	r2, r3
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	6013      	str	r3, [r2, #0]
}
 8004014:	bf00      	nop
 8004016:	3708      	adds	r7, #8
 8004018:	46bd      	mov	sp, r7
 800401a:	bdb0      	pop	{r4, r5, r7, pc}
 800401c:	20000ccc 	.word	0x20000ccc
 8004020:	20000be4 	.word	0x20000be4

08004024 <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b086      	sub	sp, #24
 8004028:	af00      	add	r7, sp, #0
 800402a:	4603      	mov	r3, r0
 800402c:	80fb      	strh	r3, [r7, #6]
 800402e:	460b      	mov	r3, r1
 8004030:	80bb      	strh	r3, [r7, #4]
 8004032:	4613      	mov	r3, r2
 8004034:	807b      	strh	r3, [r7, #2]
  int32_t  decision;     /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 8004036:	887b      	ldrh	r3, [r7, #2]
 8004038:	005b      	lsls	r3, r3, #1
 800403a:	f1c3 0303 	rsb	r3, r3, #3
 800403e:	617b      	str	r3, [r7, #20]
  
  current_x = 0;
 8004040:	2300      	movs	r3, #0
 8004042:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8004044:	887b      	ldrh	r3, [r7, #2]
 8004046:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8004048:	4b44      	ldr	r3, [pc, #272]	; (800415c <BSP_LCD_FillCircle+0x138>)
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	4944      	ldr	r1, [pc, #272]	; (8004160 <BSP_LCD_FillCircle+0x13c>)
 800404e:	4613      	mov	r3, r2
 8004050:	005b      	lsls	r3, r3, #1
 8004052:	4413      	add	r3, r2
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	440b      	add	r3, r1
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4618      	mov	r0, r3
 800405c:	f7ff fcd2 	bl	8003a04 <BSP_LCD_SetTextColor>
  
  while (current_x <= current_y)
 8004060:	e061      	b.n	8004126 <BSP_LCD_FillCircle+0x102>
  {
    if(current_y > 0) 
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d021      	beq.n	80040ac <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	b29b      	uxth	r3, r3
 800406c:	88fa      	ldrh	r2, [r7, #6]
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	b298      	uxth	r0, r3
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	b29a      	uxth	r2, r3
 8004076:	88bb      	ldrh	r3, [r7, #4]
 8004078:	4413      	add	r3, r2
 800407a:	b299      	uxth	r1, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	b29b      	uxth	r3, r3
 8004080:	005b      	lsls	r3, r3, #1
 8004082:	b29b      	uxth	r3, r3
 8004084:	461a      	mov	r2, r3
 8004086:	f7ff fe3d 	bl	8003d04 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	b29b      	uxth	r3, r3
 800408e:	88fa      	ldrh	r2, [r7, #6]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	b298      	uxth	r0, r3
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	b29b      	uxth	r3, r3
 8004098:	88ba      	ldrh	r2, [r7, #4]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	b299      	uxth	r1, r3
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	005b      	lsls	r3, r3, #1
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	461a      	mov	r2, r3
 80040a8:	f7ff fe2c 	bl	8003d04 <BSP_LCD_DrawHLine>
    }
    
    if(current_x > 0) 
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d021      	beq.n	80040f6 <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	88fa      	ldrh	r2, [r7, #6]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	b298      	uxth	r0, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	b29b      	uxth	r3, r3
 80040c0:	88ba      	ldrh	r2, [r7, #4]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	b299      	uxth	r1, r3
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	005b      	lsls	r3, r3, #1
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	461a      	mov	r2, r3
 80040d0:	f7ff fe18 	bl	8003d04 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	88fa      	ldrh	r2, [r7, #6]
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	b298      	uxth	r0, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	b29a      	uxth	r2, r3
 80040e2:	88bb      	ldrh	r3, [r7, #4]
 80040e4:	4413      	add	r3, r2
 80040e6:	b299      	uxth	r1, r3
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	005b      	lsls	r3, r3, #1
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	461a      	mov	r2, r3
 80040f2:	f7ff fe07 	bl	8003d04 <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	da06      	bge.n	800410a <BSP_LCD_FillCircle+0xe6>
    { 
      decision += (current_x << 2) + 6;
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	009a      	lsls	r2, r3, #2
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	4413      	add	r3, r2
 8004104:	3306      	adds	r3, #6
 8004106:	617b      	str	r3, [r7, #20]
 8004108:	e00a      	b.n	8004120 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 800410a:	693a      	ldr	r2, [r7, #16]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	009a      	lsls	r2, r3, #2
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	4413      	add	r3, r2
 8004116:	330a      	adds	r3, #10
 8004118:	617b      	str	r3, [r7, #20]
      current_y--;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	3b01      	subs	r3, #1
 800411e:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	3301      	adds	r3, #1
 8004124:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8004126:	693a      	ldr	r2, [r7, #16]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	429a      	cmp	r2, r3
 800412c:	d999      	bls.n	8004062 <BSP_LCD_FillCircle+0x3e>
  }
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800412e:	4b0b      	ldr	r3, [pc, #44]	; (800415c <BSP_LCD_FillCircle+0x138>)
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	490b      	ldr	r1, [pc, #44]	; (8004160 <BSP_LCD_FillCircle+0x13c>)
 8004134:	4613      	mov	r3, r2
 8004136:	005b      	lsls	r3, r3, #1
 8004138:	4413      	add	r3, r2
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	440b      	add	r3, r1
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4618      	mov	r0, r3
 8004142:	f7ff fc5f 	bl	8003a04 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8004146:	887a      	ldrh	r2, [r7, #2]
 8004148:	88b9      	ldrh	r1, [r7, #4]
 800414a:	88fb      	ldrh	r3, [r7, #6]
 800414c:	4618      	mov	r0, r3
 800414e:	f7ff fe37 	bl	8003dc0 <BSP_LCD_DrawCircle>
}
 8004152:	bf00      	nop
 8004154:	3718      	adds	r7, #24
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	20000ccc 	.word	0x20000ccc
 8004160:	20000cd0 	.word	0x20000cd0

08004164 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8004168:	4b0a      	ldr	r3, [pc, #40]	; (8004194 <BSP_LCD_DisplayOn+0x30>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	699a      	ldr	r2, [r3, #24]
 800416e:	4b09      	ldr	r3, [pc, #36]	; (8004194 <BSP_LCD_DisplayOn+0x30>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f042 0201 	orr.w	r2, r2, #1
 8004176:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8004178:	2201      	movs	r2, #1
 800417a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800417e:	4806      	ldr	r0, [pc, #24]	; (8004198 <BSP_LCD_DisplayOn+0x34>)
 8004180:	f004 fdfa 	bl	8008d78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8004184:	2201      	movs	r2, #1
 8004186:	2108      	movs	r1, #8
 8004188:	4804      	ldr	r0, [pc, #16]	; (800419c <BSP_LCD_DisplayOn+0x38>)
 800418a:	f004 fdf5 	bl	8008d78 <HAL_GPIO_WritePin>
}
 800418e:	bf00      	nop
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	20000be4 	.word	0x20000be4
 8004198:	40022000 	.word	0x40022000
 800419c:	40022800 	.word	0x40022800

080041a0 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b090      	sub	sp, #64	; 0x40
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80041aa:	4b64      	ldr	r3, [pc, #400]	; (800433c <BSP_LCD_MspInit+0x19c>)
 80041ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ae:	4a63      	ldr	r2, [pc, #396]	; (800433c <BSP_LCD_MspInit+0x19c>)
 80041b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80041b4:	6453      	str	r3, [r2, #68]	; 0x44
 80041b6:	4b61      	ldr	r3, [pc, #388]	; (800433c <BSP_LCD_MspInit+0x19c>)
 80041b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80041be:	62bb      	str	r3, [r7, #40]	; 0x28
 80041c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80041c2:	4b5e      	ldr	r3, [pc, #376]	; (800433c <BSP_LCD_MspInit+0x19c>)
 80041c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c6:	4a5d      	ldr	r2, [pc, #372]	; (800433c <BSP_LCD_MspInit+0x19c>)
 80041c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80041cc:	6313      	str	r3, [r2, #48]	; 0x30
 80041ce:	4b5b      	ldr	r3, [pc, #364]	; (800433c <BSP_LCD_MspInit+0x19c>)
 80041d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041d6:	627b      	str	r3, [r7, #36]	; 0x24
 80041d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80041da:	4b58      	ldr	r3, [pc, #352]	; (800433c <BSP_LCD_MspInit+0x19c>)
 80041dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041de:	4a57      	ldr	r2, [pc, #348]	; (800433c <BSP_LCD_MspInit+0x19c>)
 80041e0:	f043 0310 	orr.w	r3, r3, #16
 80041e4:	6313      	str	r3, [r2, #48]	; 0x30
 80041e6:	4b55      	ldr	r3, [pc, #340]	; (800433c <BSP_LCD_MspInit+0x19c>)
 80041e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ea:	f003 0310 	and.w	r3, r3, #16
 80041ee:	623b      	str	r3, [r7, #32]
 80041f0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80041f2:	4b52      	ldr	r3, [pc, #328]	; (800433c <BSP_LCD_MspInit+0x19c>)
 80041f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f6:	4a51      	ldr	r2, [pc, #324]	; (800433c <BSP_LCD_MspInit+0x19c>)
 80041f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041fc:	6313      	str	r3, [r2, #48]	; 0x30
 80041fe:	4b4f      	ldr	r3, [pc, #316]	; (800433c <BSP_LCD_MspInit+0x19c>)
 8004200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004206:	61fb      	str	r3, [r7, #28]
 8004208:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800420a:	4b4c      	ldr	r3, [pc, #304]	; (800433c <BSP_LCD_MspInit+0x19c>)
 800420c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420e:	4a4b      	ldr	r2, [pc, #300]	; (800433c <BSP_LCD_MspInit+0x19c>)
 8004210:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004214:	6313      	str	r3, [r2, #48]	; 0x30
 8004216:	4b49      	ldr	r3, [pc, #292]	; (800433c <BSP_LCD_MspInit+0x19c>)
 8004218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800421e:	61bb      	str	r3, [r7, #24]
 8004220:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8004222:	4b46      	ldr	r3, [pc, #280]	; (800433c <BSP_LCD_MspInit+0x19c>)
 8004224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004226:	4a45      	ldr	r2, [pc, #276]	; (800433c <BSP_LCD_MspInit+0x19c>)
 8004228:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800422c:	6313      	str	r3, [r2, #48]	; 0x30
 800422e:	4b43      	ldr	r3, [pc, #268]	; (800433c <BSP_LCD_MspInit+0x19c>)
 8004230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004232:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004236:	617b      	str	r3, [r7, #20]
 8004238:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800423a:	4b40      	ldr	r3, [pc, #256]	; (800433c <BSP_LCD_MspInit+0x19c>)
 800423c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800423e:	4a3f      	ldr	r2, [pc, #252]	; (800433c <BSP_LCD_MspInit+0x19c>)
 8004240:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004244:	6313      	str	r3, [r2, #48]	; 0x30
 8004246:	4b3d      	ldr	r3, [pc, #244]	; (800433c <BSP_LCD_MspInit+0x19c>)
 8004248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800424e:	613b      	str	r3, [r7, #16]
 8004250:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8004252:	4b3a      	ldr	r3, [pc, #232]	; (800433c <BSP_LCD_MspInit+0x19c>)
 8004254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004256:	4a39      	ldr	r2, [pc, #228]	; (800433c <BSP_LCD_MspInit+0x19c>)
 8004258:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800425c:	6313      	str	r3, [r2, #48]	; 0x30
 800425e:	4b37      	ldr	r3, [pc, #220]	; (800433c <BSP_LCD_MspInit+0x19c>)
 8004260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004266:	60fb      	str	r3, [r7, #12]
 8004268:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800426a:	4b34      	ldr	r3, [pc, #208]	; (800433c <BSP_LCD_MspInit+0x19c>)
 800426c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426e:	4a33      	ldr	r2, [pc, #204]	; (800433c <BSP_LCD_MspInit+0x19c>)
 8004270:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004274:	6313      	str	r3, [r2, #48]	; 0x30
 8004276:	4b31      	ldr	r3, [pc, #196]	; (800433c <BSP_LCD_MspInit+0x19c>)
 8004278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800427e:	60bb      	str	r3, [r7, #8]
 8004280:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8004282:	2310      	movs	r3, #16
 8004284:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004286:	2302      	movs	r3, #2
 8004288:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800428a:	2300      	movs	r3, #0
 800428c:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800428e:	2302      	movs	r3, #2
 8004290:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8004292:	230e      	movs	r3, #14
 8004294:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8004296:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800429a:	4619      	mov	r1, r3
 800429c:	4828      	ldr	r0, [pc, #160]	; (8004340 <BSP_LCD_MspInit+0x1a0>)
 800429e:	f004 fa9b 	bl	80087d8 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 80042a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80042a8:	2302      	movs	r3, #2
 80042aa:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 80042ac:	2309      	movs	r3, #9
 80042ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80042b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80042b4:	4619      	mov	r1, r3
 80042b6:	4823      	ldr	r0, [pc, #140]	; (8004344 <BSP_LCD_MspInit+0x1a4>)
 80042b8:	f004 fa8e 	bl	80087d8 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 80042bc:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 80042c0:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80042c2:	2302      	movs	r3, #2
 80042c4:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80042c6:	230e      	movs	r3, #14
 80042c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80042ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80042ce:	4619      	mov	r1, r3
 80042d0:	481d      	ldr	r0, [pc, #116]	; (8004348 <BSP_LCD_MspInit+0x1a8>)
 80042d2:	f004 fa81 	bl	80087d8 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 80042d6:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80042da:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80042dc:	2302      	movs	r3, #2
 80042de:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80042e0:	230e      	movs	r3, #14
 80042e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 80042e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80042e8:	4619      	mov	r1, r3
 80042ea:	4818      	ldr	r0, [pc, #96]	; (800434c <BSP_LCD_MspInit+0x1ac>)
 80042ec:	f004 fa74 	bl	80087d8 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 80042f0:	23f7      	movs	r3, #247	; 0xf7
 80042f2:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80042f4:	2302      	movs	r3, #2
 80042f6:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80042f8:	230e      	movs	r3, #14
 80042fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80042fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004300:	4619      	mov	r1, r3
 8004302:	4813      	ldr	r0, [pc, #76]	; (8004350 <BSP_LCD_MspInit+0x1b0>)
 8004304:	f004 fa68 	bl	80087d8 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8004308:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800430c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800430e:	2301      	movs	r3, #1
 8004310:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8004312:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004316:	4619      	mov	r1, r3
 8004318:	480b      	ldr	r0, [pc, #44]	; (8004348 <BSP_LCD_MspInit+0x1a8>)
 800431a:	f004 fa5d 	bl	80087d8 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 800431e:	2308      	movs	r3, #8
 8004320:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8004322:	2301      	movs	r3, #1
 8004324:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8004326:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800432a:	4619      	mov	r1, r3
 800432c:	4808      	ldr	r0, [pc, #32]	; (8004350 <BSP_LCD_MspInit+0x1b0>)
 800432e:	f004 fa53 	bl	80087d8 <HAL_GPIO_Init>
}
 8004332:	bf00      	nop
 8004334:	3740      	adds	r7, #64	; 0x40
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	40023800 	.word	0x40023800
 8004340:	40021000 	.word	0x40021000
 8004344:	40021800 	.word	0x40021800
 8004348:	40022000 	.word	0x40022000
 800434c:	40022400 	.word	0x40022400
 8004350:	40022800 	.word	0x40022800

08004354 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800435e:	4b0a      	ldr	r3, [pc, #40]	; (8004388 <BSP_LCD_ClockConfig+0x34>)
 8004360:	2208      	movs	r2, #8
 8004362:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8004364:	4b08      	ldr	r3, [pc, #32]	; (8004388 <BSP_LCD_ClockConfig+0x34>)
 8004366:	22c0      	movs	r2, #192	; 0xc0
 8004368:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 800436a:	4b07      	ldr	r3, [pc, #28]	; (8004388 <BSP_LCD_ClockConfig+0x34>)
 800436c:	2205      	movs	r2, #5
 800436e:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8004370:	4b05      	ldr	r3, [pc, #20]	; (8004388 <BSP_LCD_ClockConfig+0x34>)
 8004372:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004376:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8004378:	4803      	ldr	r0, [pc, #12]	; (8004388 <BSP_LCD_ClockConfig+0x34>)
 800437a:	f006 fb55 	bl	800aa28 <HAL_RCCEx_PeriphCLKConfig>
}
 800437e:	bf00      	nop
 8004380:	3708      	adds	r7, #8
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	20000ce8 	.word	0x20000ce8

0800438c <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b088      	sub	sp, #32
 8004390:	af00      	add	r7, sp, #0
 8004392:	4603      	mov	r3, r0
 8004394:	603a      	str	r2, [r7, #0]
 8004396:	80fb      	strh	r3, [r7, #6]
 8004398:	460b      	mov	r3, r1
 800439a:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 800439c:	2300      	movs	r3, #0
 800439e:	61fb      	str	r3, [r7, #28]
 80043a0:	2300      	movs	r3, #0
 80043a2:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 80043a4:	4b53      	ldr	r3, [pc, #332]	; (80044f4 <DrawChar+0x168>)
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	4953      	ldr	r1, [pc, #332]	; (80044f8 <DrawChar+0x16c>)
 80043aa:	4613      	mov	r3, r2
 80043ac:	005b      	lsls	r3, r3, #1
 80043ae:	4413      	add	r3, r2
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	440b      	add	r3, r1
 80043b4:	3308      	adds	r3, #8
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	88db      	ldrh	r3, [r3, #6]
 80043ba:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80043bc:	4b4d      	ldr	r3, [pc, #308]	; (80044f4 <DrawChar+0x168>)
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	494d      	ldr	r1, [pc, #308]	; (80044f8 <DrawChar+0x16c>)
 80043c2:	4613      	mov	r3, r2
 80043c4:	005b      	lsls	r3, r3, #1
 80043c6:	4413      	add	r3, r2
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	440b      	add	r3, r1
 80043cc:	3308      	adds	r3, #8
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	889b      	ldrh	r3, [r3, #4]
 80043d2:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 80043d4:	8a3b      	ldrh	r3, [r7, #16]
 80043d6:	3307      	adds	r3, #7
 80043d8:	2b00      	cmp	r3, #0
 80043da:	da00      	bge.n	80043de <DrawChar+0x52>
 80043dc:	3307      	adds	r3, #7
 80043de:	10db      	asrs	r3, r3, #3
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	00db      	lsls	r3, r3, #3
 80043e4:	b2da      	uxtb	r2, r3
 80043e6:	8a3b      	ldrh	r3, [r7, #16]
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 80043ee:	2300      	movs	r3, #0
 80043f0:	61fb      	str	r3, [r7, #28]
 80043f2:	e076      	b.n	80044e2 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80043f4:	8a3b      	ldrh	r3, [r7, #16]
 80043f6:	3307      	adds	r3, #7
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	da00      	bge.n	80043fe <DrawChar+0x72>
 80043fc:	3307      	adds	r3, #7
 80043fe:	10db      	asrs	r3, r3, #3
 8004400:	461a      	mov	r2, r3
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	fb02 f303 	mul.w	r3, r2, r3
 8004408:	683a      	ldr	r2, [r7, #0]
 800440a:	4413      	add	r3, r2
 800440c:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 800440e:	8a3b      	ldrh	r3, [r7, #16]
 8004410:	3307      	adds	r3, #7
 8004412:	2b00      	cmp	r3, #0
 8004414:	da00      	bge.n	8004418 <DrawChar+0x8c>
 8004416:	3307      	adds	r3, #7
 8004418:	10db      	asrs	r3, r3, #3
 800441a:	2b01      	cmp	r3, #1
 800441c:	d002      	beq.n	8004424 <DrawChar+0x98>
 800441e:	2b02      	cmp	r3, #2
 8004420:	d004      	beq.n	800442c <DrawChar+0xa0>
 8004422:	e00c      	b.n	800443e <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	617b      	str	r3, [r7, #20]
      break;
 800442a:	e016      	b.n	800445a <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	021b      	lsls	r3, r3, #8
 8004432:	68ba      	ldr	r2, [r7, #8]
 8004434:	3201      	adds	r2, #1
 8004436:	7812      	ldrb	r2, [r2, #0]
 8004438:	4313      	orrs	r3, r2
 800443a:	617b      	str	r3, [r7, #20]
      break;
 800443c:	e00d      	b.n	800445a <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	041a      	lsls	r2, r3, #16
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	3301      	adds	r3, #1
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	021b      	lsls	r3, r3, #8
 800444c:	4313      	orrs	r3, r2
 800444e:	68ba      	ldr	r2, [r7, #8]
 8004450:	3202      	adds	r2, #2
 8004452:	7812      	ldrb	r2, [r2, #0]
 8004454:	4313      	orrs	r3, r2
 8004456:	617b      	str	r3, [r7, #20]
      break;
 8004458:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 800445a:	2300      	movs	r3, #0
 800445c:	61bb      	str	r3, [r7, #24]
 800445e:	e036      	b.n	80044ce <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8004460:	8a3a      	ldrh	r2, [r7, #16]
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	1ad2      	subs	r2, r2, r3
 8004466:	7bfb      	ldrb	r3, [r7, #15]
 8004468:	4413      	add	r3, r2
 800446a:	3b01      	subs	r3, #1
 800446c:	2201      	movs	r2, #1
 800446e:	fa02 f303 	lsl.w	r3, r2, r3
 8004472:	461a      	mov	r2, r3
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	4013      	ands	r3, r2
 8004478:	2b00      	cmp	r3, #0
 800447a:	d012      	beq.n	80044a2 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	b29a      	uxth	r2, r3
 8004480:	88fb      	ldrh	r3, [r7, #6]
 8004482:	4413      	add	r3, r2
 8004484:	b298      	uxth	r0, r3
 8004486:	4b1b      	ldr	r3, [pc, #108]	; (80044f4 <DrawChar+0x168>)
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	491b      	ldr	r1, [pc, #108]	; (80044f8 <DrawChar+0x16c>)
 800448c:	4613      	mov	r3, r2
 800448e:	005b      	lsls	r3, r3, #1
 8004490:	4413      	add	r3, r2
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	440b      	add	r3, r1
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	88bb      	ldrh	r3, [r7, #4]
 800449a:	4619      	mov	r1, r3
 800449c:	f7ff fd7a 	bl	8003f94 <BSP_LCD_DrawPixel>
 80044a0:	e012      	b.n	80044c8 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	b29a      	uxth	r2, r3
 80044a6:	88fb      	ldrh	r3, [r7, #6]
 80044a8:	4413      	add	r3, r2
 80044aa:	b298      	uxth	r0, r3
 80044ac:	4b11      	ldr	r3, [pc, #68]	; (80044f4 <DrawChar+0x168>)
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	4911      	ldr	r1, [pc, #68]	; (80044f8 <DrawChar+0x16c>)
 80044b2:	4613      	mov	r3, r2
 80044b4:	005b      	lsls	r3, r3, #1
 80044b6:	4413      	add	r3, r2
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	440b      	add	r3, r1
 80044bc:	3304      	adds	r3, #4
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	88bb      	ldrh	r3, [r7, #4]
 80044c2:	4619      	mov	r1, r3
 80044c4:	f7ff fd66 	bl	8003f94 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	3301      	adds	r3, #1
 80044cc:	61bb      	str	r3, [r7, #24]
 80044ce:	8a3b      	ldrh	r3, [r7, #16]
 80044d0:	69ba      	ldr	r2, [r7, #24]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d3c4      	bcc.n	8004460 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 80044d6:	88bb      	ldrh	r3, [r7, #4]
 80044d8:	3301      	adds	r3, #1
 80044da:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	3301      	adds	r3, #1
 80044e0:	61fb      	str	r3, [r7, #28]
 80044e2:	8a7b      	ldrh	r3, [r7, #18]
 80044e4:	69fa      	ldr	r2, [r7, #28]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d384      	bcc.n	80043f4 <DrawChar+0x68>
  }
}
 80044ea:	bf00      	nop
 80044ec:	bf00      	nop
 80044ee:	3720      	adds	r7, #32
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	20000ccc 	.word	0x20000ccc
 80044f8:	20000cd0 	.word	0x20000cd0

080044fc <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b086      	sub	sp, #24
 8004500:	af02      	add	r7, sp, #8
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	607a      	str	r2, [r7, #4]
 8004508:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 800450a:	4b1e      	ldr	r3, [pc, #120]	; (8004584 <LL_FillBuffer+0x88>)
 800450c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004510:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8004512:	4b1d      	ldr	r3, [pc, #116]	; (8004588 <LL_FillBuffer+0x8c>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a1d      	ldr	r2, [pc, #116]	; (800458c <LL_FillBuffer+0x90>)
 8004518:	2134      	movs	r1, #52	; 0x34
 800451a:	fb01 f303 	mul.w	r3, r1, r3
 800451e:	4413      	add	r3, r2
 8004520:	3348      	adds	r3, #72	; 0x48
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2b02      	cmp	r3, #2
 8004526:	d103      	bne.n	8004530 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8004528:	4b16      	ldr	r3, [pc, #88]	; (8004584 <LL_FillBuffer+0x88>)
 800452a:	2202      	movs	r2, #2
 800452c:	609a      	str	r2, [r3, #8]
 800452e:	e002      	b.n	8004536 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8004530:	4b14      	ldr	r3, [pc, #80]	; (8004584 <LL_FillBuffer+0x88>)
 8004532:	2200      	movs	r2, #0
 8004534:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8004536:	4a13      	ldr	r2, [pc, #76]	; (8004584 <LL_FillBuffer+0x88>)
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 800453c:	4b11      	ldr	r3, [pc, #68]	; (8004584 <LL_FillBuffer+0x88>)
 800453e:	4a14      	ldr	r2, [pc, #80]	; (8004590 <LL_FillBuffer+0x94>)
 8004540:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8004542:	4810      	ldr	r0, [pc, #64]	; (8004584 <LL_FillBuffer+0x88>)
 8004544:	f003 febc 	bl	80082c0 <HAL_DMA2D_Init>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d115      	bne.n	800457a <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 800454e:	68f9      	ldr	r1, [r7, #12]
 8004550:	480c      	ldr	r0, [pc, #48]	; (8004584 <LL_FillBuffer+0x88>)
 8004552:	f004 f813 	bl	800857c <HAL_DMA2D_ConfigLayer>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d10e      	bne.n	800457a <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800455c:	68ba      	ldr	r2, [r7, #8]
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	9300      	str	r3, [sp, #0]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	69f9      	ldr	r1, [r7, #28]
 8004566:	4807      	ldr	r0, [pc, #28]	; (8004584 <LL_FillBuffer+0x88>)
 8004568:	f003 fef4 	bl	8008354 <HAL_DMA2D_Start>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d103      	bne.n	800457a <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8004572:	210a      	movs	r1, #10
 8004574:	4803      	ldr	r0, [pc, #12]	; (8004584 <LL_FillBuffer+0x88>)
 8004576:	f003 ff18 	bl	80083aa <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 800457a:	bf00      	nop
 800457c:	3710      	adds	r7, #16
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop
 8004584:	20000c8c 	.word	0x20000c8c
 8004588:	20000ccc 	.word	0x20000ccc
 800458c:	20000be4 	.word	0x20000be4
 8004590:	4002b000 	.word	0x4002b000

08004594 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8004594:	b580      	push	{r7, lr}
 8004596:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8004598:	4b29      	ldr	r3, [pc, #164]	; (8004640 <BSP_SDRAM_Init+0xac>)
 800459a:	4a2a      	ldr	r2, [pc, #168]	; (8004644 <BSP_SDRAM_Init+0xb0>)
 800459c:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 800459e:	4b2a      	ldr	r3, [pc, #168]	; (8004648 <BSP_SDRAM_Init+0xb4>)
 80045a0:	2202      	movs	r2, #2
 80045a2:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 80045a4:	4b28      	ldr	r3, [pc, #160]	; (8004648 <BSP_SDRAM_Init+0xb4>)
 80045a6:	2207      	movs	r2, #7
 80045a8:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 80045aa:	4b27      	ldr	r3, [pc, #156]	; (8004648 <BSP_SDRAM_Init+0xb4>)
 80045ac:	2204      	movs	r2, #4
 80045ae:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 80045b0:	4b25      	ldr	r3, [pc, #148]	; (8004648 <BSP_SDRAM_Init+0xb4>)
 80045b2:	2207      	movs	r2, #7
 80045b4:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 80045b6:	4b24      	ldr	r3, [pc, #144]	; (8004648 <BSP_SDRAM_Init+0xb4>)
 80045b8:	2202      	movs	r2, #2
 80045ba:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 80045bc:	4b22      	ldr	r3, [pc, #136]	; (8004648 <BSP_SDRAM_Init+0xb4>)
 80045be:	2202      	movs	r2, #2
 80045c0:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 80045c2:	4b21      	ldr	r3, [pc, #132]	; (8004648 <BSP_SDRAM_Init+0xb4>)
 80045c4:	2202      	movs	r2, #2
 80045c6:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 80045c8:	4b1d      	ldr	r3, [pc, #116]	; (8004640 <BSP_SDRAM_Init+0xac>)
 80045ca:	2200      	movs	r2, #0
 80045cc:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80045ce:	4b1c      	ldr	r3, [pc, #112]	; (8004640 <BSP_SDRAM_Init+0xac>)
 80045d0:	2200      	movs	r2, #0
 80045d2:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80045d4:	4b1a      	ldr	r3, [pc, #104]	; (8004640 <BSP_SDRAM_Init+0xac>)
 80045d6:	2204      	movs	r2, #4
 80045d8:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80045da:	4b19      	ldr	r3, [pc, #100]	; (8004640 <BSP_SDRAM_Init+0xac>)
 80045dc:	2210      	movs	r2, #16
 80045de:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80045e0:	4b17      	ldr	r3, [pc, #92]	; (8004640 <BSP_SDRAM_Init+0xac>)
 80045e2:	2240      	movs	r2, #64	; 0x40
 80045e4:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 80045e6:	4b16      	ldr	r3, [pc, #88]	; (8004640 <BSP_SDRAM_Init+0xac>)
 80045e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80045ec:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80045ee:	4b14      	ldr	r3, [pc, #80]	; (8004640 <BSP_SDRAM_Init+0xac>)
 80045f0:	2200      	movs	r2, #0
 80045f2:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80045f4:	4b12      	ldr	r3, [pc, #72]	; (8004640 <BSP_SDRAM_Init+0xac>)
 80045f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045fa:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80045fc:	4b10      	ldr	r3, [pc, #64]	; (8004640 <BSP_SDRAM_Init+0xac>)
 80045fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004602:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8004604:	4b0e      	ldr	r3, [pc, #56]	; (8004640 <BSP_SDRAM_Init+0xac>)
 8004606:	2200      	movs	r2, #0
 8004608:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 800460a:	2100      	movs	r1, #0
 800460c:	480c      	ldr	r0, [pc, #48]	; (8004640 <BSP_SDRAM_Init+0xac>)
 800460e:	f000 f87f 	bl	8004710 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8004612:	490d      	ldr	r1, [pc, #52]	; (8004648 <BSP_SDRAM_Init+0xb4>)
 8004614:	480a      	ldr	r0, [pc, #40]	; (8004640 <BSP_SDRAM_Init+0xac>)
 8004616:	f008 fd13 	bl	800d040 <HAL_SDRAM_Init>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d003      	beq.n	8004628 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8004620:	4b0a      	ldr	r3, [pc, #40]	; (800464c <BSP_SDRAM_Init+0xb8>)
 8004622:	2201      	movs	r2, #1
 8004624:	701a      	strb	r2, [r3, #0]
 8004626:	e002      	b.n	800462e <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8004628:	4b08      	ldr	r3, [pc, #32]	; (800464c <BSP_SDRAM_Init+0xb8>)
 800462a:	2200      	movs	r2, #0
 800462c:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800462e:	f240 6003 	movw	r0, #1539	; 0x603
 8004632:	f000 f80d 	bl	8004650 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8004636:	4b05      	ldr	r3, [pc, #20]	; (800464c <BSP_SDRAM_Init+0xb8>)
 8004638:	781b      	ldrb	r3, [r3, #0]
}
 800463a:	4618      	mov	r0, r3
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	20000d6c 	.word	0x20000d6c
 8004644:	a0000140 	.word	0xa0000140
 8004648:	20000da0 	.word	0x20000da0
 800464c:	200000a4 	.word	0x200000a4

08004650 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8004658:	2300      	movs	r3, #0
 800465a:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 800465c:	4b2a      	ldr	r3, [pc, #168]	; (8004708 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800465e:	2201      	movs	r2, #1
 8004660:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004662:	4b29      	ldr	r3, [pc, #164]	; (8004708 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004664:	2210      	movs	r2, #16
 8004666:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004668:	4b27      	ldr	r3, [pc, #156]	; (8004708 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800466a:	2201      	movs	r2, #1
 800466c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800466e:	4b26      	ldr	r3, [pc, #152]	; (8004708 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004670:	2200      	movs	r2, #0
 8004672:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004674:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004678:	4923      	ldr	r1, [pc, #140]	; (8004708 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800467a:	4824      	ldr	r0, [pc, #144]	; (800470c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800467c:	f008 fd14 	bl	800d0a8 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8004680:	2001      	movs	r0, #1
 8004682:	f002 fe7f 	bl	8007384 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8004686:	4b20      	ldr	r3, [pc, #128]	; (8004708 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004688:	2202      	movs	r2, #2
 800468a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800468c:	4b1e      	ldr	r3, [pc, #120]	; (8004708 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800468e:	2210      	movs	r2, #16
 8004690:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004692:	4b1d      	ldr	r3, [pc, #116]	; (8004708 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004694:	2201      	movs	r2, #1
 8004696:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004698:	4b1b      	ldr	r3, [pc, #108]	; (8004708 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800469a:	2200      	movs	r2, #0
 800469c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 800469e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80046a2:	4919      	ldr	r1, [pc, #100]	; (8004708 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80046a4:	4819      	ldr	r0, [pc, #100]	; (800470c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80046a6:	f008 fcff 	bl	800d0a8 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80046aa:	4b17      	ldr	r3, [pc, #92]	; (8004708 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80046ac:	2203      	movs	r2, #3
 80046ae:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80046b0:	4b15      	ldr	r3, [pc, #84]	; (8004708 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80046b2:	2210      	movs	r2, #16
 80046b4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 80046b6:	4b14      	ldr	r3, [pc, #80]	; (8004708 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80046b8:	2208      	movs	r2, #8
 80046ba:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80046bc:	4b12      	ldr	r3, [pc, #72]	; (8004708 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80046be:	2200      	movs	r2, #0
 80046c0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80046c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80046c6:	4910      	ldr	r1, [pc, #64]	; (8004708 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80046c8:	4810      	ldr	r0, [pc, #64]	; (800470c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80046ca:	f008 fced 	bl	800d0a8 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80046ce:	f44f 7308 	mov.w	r3, #544	; 0x220
 80046d2:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80046d4:	4b0c      	ldr	r3, [pc, #48]	; (8004708 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80046d6:	2204      	movs	r2, #4
 80046d8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80046da:	4b0b      	ldr	r3, [pc, #44]	; (8004708 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80046dc:	2210      	movs	r2, #16
 80046de:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80046e0:	4b09      	ldr	r3, [pc, #36]	; (8004708 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80046e2:	2201      	movs	r2, #1
 80046e4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	4a07      	ldr	r2, [pc, #28]	; (8004708 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80046ea:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80046ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80046f0:	4905      	ldr	r1, [pc, #20]	; (8004708 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80046f2:	4806      	ldr	r0, [pc, #24]	; (800470c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80046f4:	f008 fcd8 	bl	800d0a8 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 80046f8:	6879      	ldr	r1, [r7, #4]
 80046fa:	4804      	ldr	r0, [pc, #16]	; (800470c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80046fc:	f008 fd09 	bl	800d112 <HAL_SDRAM_ProgramRefreshRate>
}
 8004700:	bf00      	nop
 8004702:	3710      	adds	r7, #16
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}
 8004708:	20000dbc 	.word	0x20000dbc
 800470c:	20000d6c 	.word	0x20000d6c

08004710 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8004710:	b580      	push	{r7, lr}
 8004712:	b090      	sub	sp, #64	; 0x40
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800471a:	4b70      	ldr	r3, [pc, #448]	; (80048dc <BSP_SDRAM_MspInit+0x1cc>)
 800471c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800471e:	4a6f      	ldr	r2, [pc, #444]	; (80048dc <BSP_SDRAM_MspInit+0x1cc>)
 8004720:	f043 0301 	orr.w	r3, r3, #1
 8004724:	6393      	str	r3, [r2, #56]	; 0x38
 8004726:	4b6d      	ldr	r3, [pc, #436]	; (80048dc <BSP_SDRAM_MspInit+0x1cc>)
 8004728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472a:	f003 0301 	and.w	r3, r3, #1
 800472e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004730:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8004732:	4b6a      	ldr	r3, [pc, #424]	; (80048dc <BSP_SDRAM_MspInit+0x1cc>)
 8004734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004736:	4a69      	ldr	r2, [pc, #420]	; (80048dc <BSP_SDRAM_MspInit+0x1cc>)
 8004738:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800473c:	6313      	str	r3, [r2, #48]	; 0x30
 800473e:	4b67      	ldr	r3, [pc, #412]	; (80048dc <BSP_SDRAM_MspInit+0x1cc>)
 8004740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004742:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004746:	627b      	str	r3, [r7, #36]	; 0x24
 8004748:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800474a:	4b64      	ldr	r3, [pc, #400]	; (80048dc <BSP_SDRAM_MspInit+0x1cc>)
 800474c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474e:	4a63      	ldr	r2, [pc, #396]	; (80048dc <BSP_SDRAM_MspInit+0x1cc>)
 8004750:	f043 0304 	orr.w	r3, r3, #4
 8004754:	6313      	str	r3, [r2, #48]	; 0x30
 8004756:	4b61      	ldr	r3, [pc, #388]	; (80048dc <BSP_SDRAM_MspInit+0x1cc>)
 8004758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800475a:	f003 0304 	and.w	r3, r3, #4
 800475e:	623b      	str	r3, [r7, #32]
 8004760:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004762:	4b5e      	ldr	r3, [pc, #376]	; (80048dc <BSP_SDRAM_MspInit+0x1cc>)
 8004764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004766:	4a5d      	ldr	r2, [pc, #372]	; (80048dc <BSP_SDRAM_MspInit+0x1cc>)
 8004768:	f043 0308 	orr.w	r3, r3, #8
 800476c:	6313      	str	r3, [r2, #48]	; 0x30
 800476e:	4b5b      	ldr	r3, [pc, #364]	; (80048dc <BSP_SDRAM_MspInit+0x1cc>)
 8004770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004772:	f003 0308 	and.w	r3, r3, #8
 8004776:	61fb      	str	r3, [r7, #28]
 8004778:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800477a:	4b58      	ldr	r3, [pc, #352]	; (80048dc <BSP_SDRAM_MspInit+0x1cc>)
 800477c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477e:	4a57      	ldr	r2, [pc, #348]	; (80048dc <BSP_SDRAM_MspInit+0x1cc>)
 8004780:	f043 0310 	orr.w	r3, r3, #16
 8004784:	6313      	str	r3, [r2, #48]	; 0x30
 8004786:	4b55      	ldr	r3, [pc, #340]	; (80048dc <BSP_SDRAM_MspInit+0x1cc>)
 8004788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478a:	f003 0310 	and.w	r3, r3, #16
 800478e:	61bb      	str	r3, [r7, #24]
 8004790:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004792:	4b52      	ldr	r3, [pc, #328]	; (80048dc <BSP_SDRAM_MspInit+0x1cc>)
 8004794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004796:	4a51      	ldr	r2, [pc, #324]	; (80048dc <BSP_SDRAM_MspInit+0x1cc>)
 8004798:	f043 0320 	orr.w	r3, r3, #32
 800479c:	6313      	str	r3, [r2, #48]	; 0x30
 800479e:	4b4f      	ldr	r3, [pc, #316]	; (80048dc <BSP_SDRAM_MspInit+0x1cc>)
 80047a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a2:	f003 0320 	and.w	r3, r3, #32
 80047a6:	617b      	str	r3, [r7, #20]
 80047a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80047aa:	4b4c      	ldr	r3, [pc, #304]	; (80048dc <BSP_SDRAM_MspInit+0x1cc>)
 80047ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ae:	4a4b      	ldr	r2, [pc, #300]	; (80048dc <BSP_SDRAM_MspInit+0x1cc>)
 80047b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047b4:	6313      	str	r3, [r2, #48]	; 0x30
 80047b6:	4b49      	ldr	r3, [pc, #292]	; (80048dc <BSP_SDRAM_MspInit+0x1cc>)
 80047b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047be:	613b      	str	r3, [r7, #16]
 80047c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80047c2:	4b46      	ldr	r3, [pc, #280]	; (80048dc <BSP_SDRAM_MspInit+0x1cc>)
 80047c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c6:	4a45      	ldr	r2, [pc, #276]	; (80048dc <BSP_SDRAM_MspInit+0x1cc>)
 80047c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047cc:	6313      	str	r3, [r2, #48]	; 0x30
 80047ce:	4b43      	ldr	r3, [pc, #268]	; (80048dc <BSP_SDRAM_MspInit+0x1cc>)
 80047d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047d6:	60fb      	str	r3, [r7, #12]
 80047d8:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80047da:	2302      	movs	r3, #2
 80047dc:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80047de:	2301      	movs	r3, #1
 80047e0:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80047e2:	2302      	movs	r3, #2
 80047e4:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80047e6:	230c      	movs	r3, #12
 80047e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 80047ea:	2308      	movs	r3, #8
 80047ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80047ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80047f2:	4619      	mov	r1, r3
 80047f4:	483a      	ldr	r0, [pc, #232]	; (80048e0 <BSP_SDRAM_MspInit+0x1d0>)
 80047f6:	f003 ffef 	bl	80087d8 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 80047fa:	f24c 7303 	movw	r3, #50947	; 0xc703
 80047fe:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8004800:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004804:	4619      	mov	r1, r3
 8004806:	4837      	ldr	r0, [pc, #220]	; (80048e4 <BSP_SDRAM_MspInit+0x1d4>)
 8004808:	f003 ffe6 	bl	80087d8 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800480c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8004810:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8004812:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004816:	4619      	mov	r1, r3
 8004818:	4833      	ldr	r0, [pc, #204]	; (80048e8 <BSP_SDRAM_MspInit+0x1d8>)
 800481a:	f003 ffdd 	bl	80087d8 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800481e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8004822:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8004824:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004828:	4619      	mov	r1, r3
 800482a:	4830      	ldr	r0, [pc, #192]	; (80048ec <BSP_SDRAM_MspInit+0x1dc>)
 800482c:	f003 ffd4 	bl	80087d8 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8004830:	f248 1333 	movw	r3, #33075	; 0x8133
 8004834:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8004836:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800483a:	4619      	mov	r1, r3
 800483c:	482c      	ldr	r0, [pc, #176]	; (80048f0 <BSP_SDRAM_MspInit+0x1e0>)
 800483e:	f003 ffcb 	bl	80087d8 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8004842:	2328      	movs	r3, #40	; 0x28
 8004844:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8004846:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800484a:	4619      	mov	r1, r3
 800484c:	4829      	ldr	r0, [pc, #164]	; (80048f4 <BSP_SDRAM_MspInit+0x1e4>)
 800484e:	f003 ffc3 	bl	80087d8 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8004852:	4b29      	ldr	r3, [pc, #164]	; (80048f8 <BSP_SDRAM_MspInit+0x1e8>)
 8004854:	2200      	movs	r2, #0
 8004856:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8004858:	4b27      	ldr	r3, [pc, #156]	; (80048f8 <BSP_SDRAM_MspInit+0x1e8>)
 800485a:	2280      	movs	r2, #128	; 0x80
 800485c:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800485e:	4b26      	ldr	r3, [pc, #152]	; (80048f8 <BSP_SDRAM_MspInit+0x1e8>)
 8004860:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004864:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8004866:	4b24      	ldr	r3, [pc, #144]	; (80048f8 <BSP_SDRAM_MspInit+0x1e8>)
 8004868:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800486c:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800486e:	4b22      	ldr	r3, [pc, #136]	; (80048f8 <BSP_SDRAM_MspInit+0x1e8>)
 8004870:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004874:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8004876:	4b20      	ldr	r3, [pc, #128]	; (80048f8 <BSP_SDRAM_MspInit+0x1e8>)
 8004878:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800487c:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 800487e:	4b1e      	ldr	r3, [pc, #120]	; (80048f8 <BSP_SDRAM_MspInit+0x1e8>)
 8004880:	2200      	movs	r2, #0
 8004882:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8004884:	4b1c      	ldr	r3, [pc, #112]	; (80048f8 <BSP_SDRAM_MspInit+0x1e8>)
 8004886:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800488a:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 800488c:	4b1a      	ldr	r3, [pc, #104]	; (80048f8 <BSP_SDRAM_MspInit+0x1e8>)
 800488e:	2200      	movs	r2, #0
 8004890:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004892:	4b19      	ldr	r3, [pc, #100]	; (80048f8 <BSP_SDRAM_MspInit+0x1e8>)
 8004894:	2203      	movs	r2, #3
 8004896:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8004898:	4b17      	ldr	r3, [pc, #92]	; (80048f8 <BSP_SDRAM_MspInit+0x1e8>)
 800489a:	2200      	movs	r2, #0
 800489c:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800489e:	4b16      	ldr	r3, [pc, #88]	; (80048f8 <BSP_SDRAM_MspInit+0x1e8>)
 80048a0:	2200      	movs	r2, #0
 80048a2:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80048a4:	4b14      	ldr	r3, [pc, #80]	; (80048f8 <BSP_SDRAM_MspInit+0x1e8>)
 80048a6:	4a15      	ldr	r2, [pc, #84]	; (80048fc <BSP_SDRAM_MspInit+0x1ec>)
 80048a8:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a12      	ldr	r2, [pc, #72]	; (80048f8 <BSP_SDRAM_MspInit+0x1e8>)
 80048ae:	631a      	str	r2, [r3, #48]	; 0x30
 80048b0:	4a11      	ldr	r2, [pc, #68]	; (80048f8 <BSP_SDRAM_MspInit+0x1e8>)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80048b6:	4810      	ldr	r0, [pc, #64]	; (80048f8 <BSP_SDRAM_MspInit+0x1e8>)
 80048b8:	f003 f9ac 	bl	8007c14 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80048bc:	480e      	ldr	r0, [pc, #56]	; (80048f8 <BSP_SDRAM_MspInit+0x1e8>)
 80048be:	f003 f8fb 	bl	8007ab8 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80048c2:	2200      	movs	r2, #0
 80048c4:	210f      	movs	r1, #15
 80048c6:	2038      	movs	r0, #56	; 0x38
 80048c8:	f003 f8cc 	bl	8007a64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80048cc:	2038      	movs	r0, #56	; 0x38
 80048ce:	f003 f8e5 	bl	8007a9c <HAL_NVIC_EnableIRQ>
}
 80048d2:	bf00      	nop
 80048d4:	3740      	adds	r7, #64	; 0x40
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	40023800 	.word	0x40023800
 80048e0:	40020800 	.word	0x40020800
 80048e4:	40020c00 	.word	0x40020c00
 80048e8:	40021000 	.word	0x40021000
 80048ec:	40021400 	.word	0x40021400
 80048f0:	40021800 	.word	0x40021800
 80048f4:	40021c00 	.word	0x40021c00
 80048f8:	20000dcc 	.word	0x20000dcc
 80048fc:	40026410 	.word	0x40026410

08004900 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	4603      	mov	r3, r0
 8004908:	460a      	mov	r2, r1
 800490a:	80fb      	strh	r3, [r7, #6]
 800490c:	4613      	mov	r3, r2
 800490e:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8004910:	2300      	movs	r3, #0
 8004912:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8004914:	4a14      	ldr	r2, [pc, #80]	; (8004968 <BSP_TS_Init+0x68>)
 8004916:	88fb      	ldrh	r3, [r7, #6]
 8004918:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 800491a:	4a14      	ldr	r2, [pc, #80]	; (800496c <BSP_TS_Init+0x6c>)
 800491c:	88bb      	ldrh	r3, [r7, #4]
 800491e:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8004920:	4b13      	ldr	r3, [pc, #76]	; (8004970 <BSP_TS_Init+0x70>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2070      	movs	r0, #112	; 0x70
 8004926:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8004928:	4b11      	ldr	r3, [pc, #68]	; (8004970 <BSP_TS_Init+0x70>)
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	2070      	movs	r0, #112	; 0x70
 800492e:	4798      	blx	r3
 8004930:	4603      	mov	r3, r0
 8004932:	2b51      	cmp	r3, #81	; 0x51
 8004934:	d111      	bne.n	800495a <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8004936:	4b0f      	ldr	r3, [pc, #60]	; (8004974 <BSP_TS_Init+0x74>)
 8004938:	4a0d      	ldr	r2, [pc, #52]	; (8004970 <BSP_TS_Init+0x70>)
 800493a:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 800493c:	4b0e      	ldr	r3, [pc, #56]	; (8004978 <BSP_TS_Init+0x78>)
 800493e:	2270      	movs	r2, #112	; 0x70
 8004940:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8004942:	4b0e      	ldr	r3, [pc, #56]	; (800497c <BSP_TS_Init+0x7c>)
 8004944:	2208      	movs	r2, #8
 8004946:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8004948:	4b0a      	ldr	r3, [pc, #40]	; (8004974 <BSP_TS_Init+0x74>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	4a0a      	ldr	r2, [pc, #40]	; (8004978 <BSP_TS_Init+0x78>)
 8004950:	7812      	ldrb	r2, [r2, #0]
 8004952:	b292      	uxth	r2, r2
 8004954:	4610      	mov	r0, r2
 8004956:	4798      	blx	r3
 8004958:	e001      	b.n	800495e <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 800495a:	2303      	movs	r3, #3
 800495c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800495e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004960:	4618      	mov	r0, r3
 8004962:	3710      	adds	r7, #16
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}
 8004968:	20000e30 	.word	0x20000e30
 800496c:	20000e32 	.word	0x20000e32
 8004970:	20000000 	.word	0x20000000
 8004974:	20000e2c 	.word	0x20000e2c
 8004978:	20000e35 	.word	0x20000e35
 800497c:	20000e34 	.word	0x20000e34

08004980 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8004980:	b590      	push	{r4, r7, lr}
 8004982:	b097      	sub	sp, #92	; 0x5c
 8004984:	af02      	add	r7, sp, #8
 8004986:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8004988:	2300      	movs	r3, #0
 800498a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 800498e:	2300      	movs	r3, #0
 8004990:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 8004992:	2300      	movs	r3, #0
 8004994:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 8004996:	2300      	movs	r3, #0
 8004998:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 800499a:	4bb4      	ldr	r3, [pc, #720]	; (8004c6c <BSP_TS_GetState+0x2ec>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	691b      	ldr	r3, [r3, #16]
 80049a0:	4ab3      	ldr	r2, [pc, #716]	; (8004c70 <BSP_TS_GetState+0x2f0>)
 80049a2:	7812      	ldrb	r2, [r2, #0]
 80049a4:	b292      	uxth	r2, r2
 80049a6:	4610      	mov	r0, r2
 80049a8:	4798      	blx	r3
 80049aa:	4603      	mov	r3, r0
 80049ac:	461a      	mov	r2, r3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	f000 8196 	beq.w	8004ce8 <BSP_TS_GetState+0x368>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 80049bc:	2300      	movs	r3, #0
 80049be:	64bb      	str	r3, [r7, #72]	; 0x48
 80049c0:	e185      	b.n	8004cce <BSP_TS_GetState+0x34e>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 80049c2:	4baa      	ldr	r3, [pc, #680]	; (8004c6c <BSP_TS_GetState+0x2ec>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	695b      	ldr	r3, [r3, #20]
 80049c8:	4aa9      	ldr	r2, [pc, #676]	; (8004c70 <BSP_TS_GetState+0x2f0>)
 80049ca:	7812      	ldrb	r2, [r2, #0]
 80049cc:	b290      	uxth	r0, r2
 80049ce:	f107 0120 	add.w	r1, r7, #32
 80049d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049d4:	0052      	lsls	r2, r2, #1
 80049d6:	188c      	adds	r4, r1, r2
 80049d8:	f107 0114 	add.w	r1, r7, #20
 80049dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049de:	0052      	lsls	r2, r2, #1
 80049e0:	440a      	add	r2, r1
 80049e2:	4621      	mov	r1, r4
 80049e4:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 80049e6:	4ba3      	ldr	r3, [pc, #652]	; (8004c74 <BSP_TS_GetState+0x2f4>)
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d117      	bne.n	8004a1e <BSP_TS_GetState+0x9e>
      {
        x[index] = brute_x[index];
 80049ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049f0:	005b      	lsls	r3, r3, #1
 80049f2:	3350      	adds	r3, #80	; 0x50
 80049f4:	443b      	add	r3, r7
 80049f6:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 80049fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049fc:	005b      	lsls	r3, r3, #1
 80049fe:	3350      	adds	r3, #80	; 0x50
 8004a00:	443b      	add	r3, r7
 8004a02:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 8004a06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a08:	005b      	lsls	r3, r3, #1
 8004a0a:	3350      	adds	r3, #80	; 0x50
 8004a0c:	443b      	add	r3, r7
 8004a0e:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8004a12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a14:	005b      	lsls	r3, r3, #1
 8004a16:	3350      	adds	r3, #80	; 0x50
 8004a18:	443b      	add	r3, r7
 8004a1a:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 8004a1e:	4b95      	ldr	r3, [pc, #596]	; (8004c74 <BSP_TS_GetState+0x2f4>)
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	f003 0302 	and.w	r3, r3, #2
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00e      	beq.n	8004a48 <BSP_TS_GetState+0xc8>
      {
        x[index] = 4096 - brute_x[index];
 8004a2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a2c:	005b      	lsls	r3, r3, #1
 8004a2e:	3350      	adds	r3, #80	; 0x50
 8004a30:	443b      	add	r3, r7
 8004a32:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8004a36:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8004a3a:	b29a      	uxth	r2, r3
 8004a3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a3e:	005b      	lsls	r3, r3, #1
 8004a40:	3350      	adds	r3, #80	; 0x50
 8004a42:	443b      	add	r3, r7
 8004a44:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 8004a48:	4b8a      	ldr	r3, [pc, #552]	; (8004c74 <BSP_TS_GetState+0x2f4>)
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	f003 0304 	and.w	r3, r3, #4
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d00e      	beq.n	8004a72 <BSP_TS_GetState+0xf2>
      {
        y[index] = 4096 - brute_y[index];
 8004a54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a56:	005b      	lsls	r3, r3, #1
 8004a58:	3350      	adds	r3, #80	; 0x50
 8004a5a:	443b      	add	r3, r7
 8004a5c:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8004a60:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8004a64:	b29a      	uxth	r2, r3
 8004a66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a68:	005b      	lsls	r3, r3, #1
 8004a6a:	3350      	adds	r3, #80	; 0x50
 8004a6c:	443b      	add	r3, r7
 8004a6e:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 8004a72:	4b80      	ldr	r3, [pc, #512]	; (8004c74 <BSP_TS_GetState+0x2f4>)
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	f003 0308 	and.w	r3, r3, #8
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d017      	beq.n	8004aae <BSP_TS_GetState+0x12e>
      {
        y[index] = brute_x[index];
 8004a7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a80:	005b      	lsls	r3, r3, #1
 8004a82:	3350      	adds	r3, #80	; 0x50
 8004a84:	443b      	add	r3, r7
 8004a86:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8004a8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a8c:	005b      	lsls	r3, r3, #1
 8004a8e:	3350      	adds	r3, #80	; 0x50
 8004a90:	443b      	add	r3, r7
 8004a92:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 8004a96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a98:	005b      	lsls	r3, r3, #1
 8004a9a:	3350      	adds	r3, #80	; 0x50
 8004a9c:	443b      	add	r3, r7
 8004a9e:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8004aa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004aa4:	005b      	lsls	r3, r3, #1
 8004aa6:	3350      	adds	r3, #80	; 0x50
 8004aa8:	443b      	add	r3, r7
 8004aaa:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8004aae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ab0:	005b      	lsls	r3, r3, #1
 8004ab2:	3350      	adds	r3, #80	; 0x50
 8004ab4:	443b      	add	r3, r7
 8004ab6:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004aba:	4619      	mov	r1, r3
 8004abc:	4a6e      	ldr	r2, [pc, #440]	; (8004c78 <BSP_TS_GetState+0x2f8>)
 8004abe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ac4:	4299      	cmp	r1, r3
 8004ac6:	d90d      	bls.n	8004ae4 <BSP_TS_GetState+0x164>
 8004ac8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004aca:	005b      	lsls	r3, r3, #1
 8004acc:	3350      	adds	r3, #80	; 0x50
 8004ace:	443b      	add	r3, r7
 8004ad0:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8004ad4:	4968      	ldr	r1, [pc, #416]	; (8004c78 <BSP_TS_GetState+0x2f8>)
 8004ad6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ad8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	e00c      	b.n	8004afe <BSP_TS_GetState+0x17e>
 8004ae4:	4a64      	ldr	r2, [pc, #400]	; (8004c78 <BSP_TS_GetState+0x2f8>)
 8004ae6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004aec:	b29a      	uxth	r2, r3
 8004aee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004af0:	005b      	lsls	r3, r3, #1
 8004af2:	3350      	adds	r3, #80	; 0x50
 8004af4:	443b      	add	r3, r7
 8004af6:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8004b02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b04:	005b      	lsls	r3, r3, #1
 8004b06:	3350      	adds	r3, #80	; 0x50
 8004b08:	443b      	add	r3, r7
 8004b0a:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8004b0e:	4619      	mov	r1, r3
 8004b10:	4a5a      	ldr	r2, [pc, #360]	; (8004c7c <BSP_TS_GetState+0x2fc>)
 8004b12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b18:	4299      	cmp	r1, r3
 8004b1a:	d90d      	bls.n	8004b38 <BSP_TS_GetState+0x1b8>
 8004b1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b1e:	005b      	lsls	r3, r3, #1
 8004b20:	3350      	adds	r3, #80	; 0x50
 8004b22:	443b      	add	r3, r7
 8004b24:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8004b28:	4954      	ldr	r1, [pc, #336]	; (8004c7c <BSP_TS_GetState+0x2fc>)
 8004b2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b2c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	e00c      	b.n	8004b52 <BSP_TS_GetState+0x1d2>
 8004b38:	4a50      	ldr	r2, [pc, #320]	; (8004c7c <BSP_TS_GetState+0x2fc>)
 8004b3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b40:	b29a      	uxth	r2, r3
 8004b42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b44:	005b      	lsls	r3, r3, #1
 8004b46:	3350      	adds	r3, #80	; 0x50
 8004b48:	443b      	add	r3, r7
 8004b4a:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 8004b56:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8004b5a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004b5e:	4413      	add	r3, r2
 8004b60:	2b05      	cmp	r3, #5
 8004b62:	dd15      	ble.n	8004b90 <BSP_TS_GetState+0x210>
      {
        _x[index] = x[index];
 8004b64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b66:	005b      	lsls	r3, r3, #1
 8004b68:	3350      	adds	r3, #80	; 0x50
 8004b6a:	443b      	add	r3, r7
 8004b6c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004b70:	4619      	mov	r1, r3
 8004b72:	4a41      	ldr	r2, [pc, #260]	; (8004c78 <BSP_TS_GetState+0x2f8>)
 8004b74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b76:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 8004b7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b7c:	005b      	lsls	r3, r3, #1
 8004b7e:	3350      	adds	r3, #80	; 0x50
 8004b80:	443b      	add	r3, r7
 8004b82:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8004b86:	4619      	mov	r1, r3
 8004b88:	4a3c      	ldr	r2, [pc, #240]	; (8004c7c <BSP_TS_GetState+0x2fc>)
 8004b8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b8c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8004b90:	4b37      	ldr	r3, [pc, #220]	; (8004c70 <BSP_TS_GetState+0x2f0>)
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	2b70      	cmp	r3, #112	; 0x70
 8004b96:	d119      	bne.n	8004bcc <BSP_TS_GetState+0x24c>
      {
        TS_State->touchX[index] = x[index];
 8004b98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b9a:	005b      	lsls	r3, r3, #1
 8004b9c:	3350      	adds	r3, #80	; 0x50
 8004b9e:	443b      	add	r3, r7
 8004ba0:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ba8:	005b      	lsls	r3, r3, #1
 8004baa:	4413      	add	r3, r2
 8004bac:	460a      	mov	r2, r1
 8004bae:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 8004bb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bb2:	005b      	lsls	r3, r3, #1
 8004bb4:	3350      	adds	r3, #80	; 0x50
 8004bb6:	443b      	add	r3, r7
 8004bb8:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bc0:	3304      	adds	r3, #4
 8004bc2:	005b      	lsls	r3, r3, #1
 8004bc4:	4413      	add	r3, r2
 8004bc6:	460a      	mov	r2, r1
 8004bc8:	809a      	strh	r2, [r3, #4]
 8004bca:	e022      	b.n	8004c12 <BSP_TS_GetState+0x292>
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8004bcc:	4b2c      	ldr	r3, [pc, #176]	; (8004c80 <BSP_TS_GetState+0x300>)
 8004bce:	881b      	ldrh	r3, [r3, #0]
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	4a29      	ldr	r2, [pc, #164]	; (8004c78 <BSP_TS_GetState+0x2f8>)
 8004bd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bda:	fb01 f303 	mul.w	r3, r1, r3
 8004bde:	0b1b      	lsrs	r3, r3, #12
 8004be0:	b299      	uxth	r1, r3
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004be6:	005b      	lsls	r3, r3, #1
 8004be8:	4413      	add	r3, r2
 8004bea:	460a      	mov	r2, r1
 8004bec:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 8004bee:	4b25      	ldr	r3, [pc, #148]	; (8004c84 <BSP_TS_GetState+0x304>)
 8004bf0:	881b      	ldrh	r3, [r3, #0]
 8004bf2:	4619      	mov	r1, r3
 8004bf4:	4a21      	ldr	r2, [pc, #132]	; (8004c7c <BSP_TS_GetState+0x2fc>)
 8004bf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bfc:	fb01 f303 	mul.w	r3, r1, r3
 8004c00:	0b1b      	lsrs	r3, r3, #12
 8004c02:	b299      	uxth	r1, r3
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c08:	3304      	adds	r3, #4
 8004c0a:	005b      	lsls	r3, r3, #1
 8004c0c:	4413      	add	r3, r2
 8004c0e:	460a      	mov	r2, r1
 8004c10:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 8004c12:	4b17      	ldr	r3, [pc, #92]	; (8004c70 <BSP_TS_GetState+0x2f0>)
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	b298      	uxth	r0, r3
 8004c18:	f107 010c 	add.w	r1, r7, #12
 8004c1c:	f107 0210 	add.w	r2, r7, #16
 8004c20:	f107 0308 	add.w	r3, r7, #8
 8004c24:	9300      	str	r3, [sp, #0]
 8004c26:	460b      	mov	r3, r1
 8004c28:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004c2a:	f7fb fec1 	bl	80009b0 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	b2d9      	uxtb	r1, r3
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c36:	4413      	add	r3, r2
 8004c38:	3316      	adds	r3, #22
 8004c3a:	460a      	mov	r2, r1
 8004c3c:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	b2d9      	uxtb	r1, r3
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c46:	4413      	add	r3, r2
 8004c48:	3320      	adds	r3, #32
 8004c4a:	460a      	mov	r2, r1
 8004c4c:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	2b03      	cmp	r3, #3
 8004c52:	d835      	bhi.n	8004cc0 <BSP_TS_GetState+0x340>
 8004c54:	a201      	add	r2, pc, #4	; (adr r2, 8004c5c <BSP_TS_GetState+0x2dc>)
 8004c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c5a:	bf00      	nop
 8004c5c:	08004c89 	.word	0x08004c89
 8004c60:	08004c97 	.word	0x08004c97
 8004c64:	08004ca5 	.word	0x08004ca5
 8004c68:	08004cb3 	.word	0x08004cb3
 8004c6c:	20000e2c 	.word	0x20000e2c
 8004c70:	20000e35 	.word	0x20000e35
 8004c74:	20000e34 	.word	0x20000e34
 8004c78:	20000e38 	.word	0x20000e38
 8004c7c:	20000e4c 	.word	0x20000e4c
 8004c80:	20000e30 	.word	0x20000e30
 8004c84:	20000e32 	.word	0x20000e32
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c8c:	4413      	add	r3, r2
 8004c8e:	331b      	adds	r3, #27
 8004c90:	2201      	movs	r2, #1
 8004c92:	701a      	strb	r2, [r3, #0]
          break;
 8004c94:	e018      	b.n	8004cc8 <BSP_TS_GetState+0x348>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c9a:	4413      	add	r3, r2
 8004c9c:	331b      	adds	r3, #27
 8004c9e:	2202      	movs	r2, #2
 8004ca0:	701a      	strb	r2, [r3, #0]
          break;
 8004ca2:	e011      	b.n	8004cc8 <BSP_TS_GetState+0x348>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ca8:	4413      	add	r3, r2
 8004caa:	331b      	adds	r3, #27
 8004cac:	2203      	movs	r2, #3
 8004cae:	701a      	strb	r2, [r3, #0]
          break;
 8004cb0:	e00a      	b.n	8004cc8 <BSP_TS_GetState+0x348>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cb6:	4413      	add	r3, r2
 8004cb8:	331b      	adds	r3, #27
 8004cba:	2200      	movs	r2, #0
 8004cbc:	701a      	strb	r2, [r3, #0]
          break;
 8004cbe:	e003      	b.n	8004cc8 <BSP_TS_GetState+0x348>
        default :
          ts_status = TS_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 8004cc6:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 8004cc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cca:	3301      	adds	r3, #1
 8004ccc:	64bb      	str	r3, [r7, #72]	; 0x48
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	f4ff ae73 	bcc.w	80049c2 <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f000 f809 	bl	8004cf4 <BSP_TS_Get_GestureId>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8004ce8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3754      	adds	r7, #84	; 0x54
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd90      	pop	{r4, r7, pc}

08004cf4 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 8004d00:	2300      	movs	r3, #0
 8004d02:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8004d04:	4b3b      	ldr	r3, [pc, #236]	; (8004df4 <BSP_TS_Get_GestureId+0x100>)
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	f107 0208 	add.w	r2, r7, #8
 8004d0e:	4611      	mov	r1, r2
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7fb fe34 	bl	800097e <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	2b49      	cmp	r3, #73	; 0x49
 8004d1a:	d05e      	beq.n	8004dda <BSP_TS_Get_GestureId+0xe6>
 8004d1c:	2b49      	cmp	r3, #73	; 0x49
 8004d1e:	d860      	bhi.n	8004de2 <BSP_TS_Get_GestureId+0xee>
 8004d20:	2b1c      	cmp	r3, #28
 8004d22:	d83f      	bhi.n	8004da4 <BSP_TS_Get_GestureId+0xb0>
 8004d24:	2b1c      	cmp	r3, #28
 8004d26:	d85c      	bhi.n	8004de2 <BSP_TS_Get_GestureId+0xee>
 8004d28:	a201      	add	r2, pc, #4	; (adr r2, 8004d30 <BSP_TS_Get_GestureId+0x3c>)
 8004d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d2e:	bf00      	nop
 8004d30:	08004dab 	.word	0x08004dab
 8004d34:	08004de3 	.word	0x08004de3
 8004d38:	08004de3 	.word	0x08004de3
 8004d3c:	08004de3 	.word	0x08004de3
 8004d40:	08004de3 	.word	0x08004de3
 8004d44:	08004de3 	.word	0x08004de3
 8004d48:	08004de3 	.word	0x08004de3
 8004d4c:	08004de3 	.word	0x08004de3
 8004d50:	08004de3 	.word	0x08004de3
 8004d54:	08004de3 	.word	0x08004de3
 8004d58:	08004de3 	.word	0x08004de3
 8004d5c:	08004de3 	.word	0x08004de3
 8004d60:	08004de3 	.word	0x08004de3
 8004d64:	08004de3 	.word	0x08004de3
 8004d68:	08004de3 	.word	0x08004de3
 8004d6c:	08004de3 	.word	0x08004de3
 8004d70:	08004db3 	.word	0x08004db3
 8004d74:	08004de3 	.word	0x08004de3
 8004d78:	08004de3 	.word	0x08004de3
 8004d7c:	08004de3 	.word	0x08004de3
 8004d80:	08004dbb 	.word	0x08004dbb
 8004d84:	08004de3 	.word	0x08004de3
 8004d88:	08004de3 	.word	0x08004de3
 8004d8c:	08004de3 	.word	0x08004de3
 8004d90:	08004dc3 	.word	0x08004dc3
 8004d94:	08004de3 	.word	0x08004de3
 8004d98:	08004de3 	.word	0x08004de3
 8004d9c:	08004de3 	.word	0x08004de3
 8004da0:	08004dcb 	.word	0x08004dcb
 8004da4:	2b40      	cmp	r3, #64	; 0x40
 8004da6:	d014      	beq.n	8004dd2 <BSP_TS_Get_GestureId+0xde>
 8004da8:	e01b      	b.n	8004de2 <BSP_TS_Get_GestureId+0xee>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004db0:	e01a      	b.n	8004de8 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2201      	movs	r2, #1
 8004db6:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004db8:	e016      	b.n	8004de8 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2202      	movs	r2, #2
 8004dbe:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004dc0:	e012      	b.n	8004de8 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2203      	movs	r2, #3
 8004dc6:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004dc8:	e00e      	b.n	8004de8 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2204      	movs	r2, #4
 8004dce:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004dd0:	e00a      	b.n	8004de8 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2205      	movs	r2, #5
 8004dd6:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004dd8:	e006      	b.n	8004de8 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2206      	movs	r2, #6
 8004dde:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004de0:	e002      	b.n	8004de8 <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	73fb      	strb	r3, [r7, #15]
      break;
 8004de6:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 8004de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3710      	adds	r7, #16
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	20000e35 	.word	0x20000e35

08004df8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004dfe:	4b11      	ldr	r3, [pc, #68]	; (8004e44 <HAL_MspInit+0x4c>)
 8004e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e02:	4a10      	ldr	r2, [pc, #64]	; (8004e44 <HAL_MspInit+0x4c>)
 8004e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e08:	6413      	str	r3, [r2, #64]	; 0x40
 8004e0a:	4b0e      	ldr	r3, [pc, #56]	; (8004e44 <HAL_MspInit+0x4c>)
 8004e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e12:	607b      	str	r3, [r7, #4]
 8004e14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e16:	4b0b      	ldr	r3, [pc, #44]	; (8004e44 <HAL_MspInit+0x4c>)
 8004e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e1a:	4a0a      	ldr	r2, [pc, #40]	; (8004e44 <HAL_MspInit+0x4c>)
 8004e1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e20:	6453      	str	r3, [r2, #68]	; 0x44
 8004e22:	4b08      	ldr	r3, [pc, #32]	; (8004e44 <HAL_MspInit+0x4c>)
 8004e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e2a:	603b      	str	r3, [r7, #0]
 8004e2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004e2e:	2200      	movs	r2, #0
 8004e30:	210f      	movs	r1, #15
 8004e32:	f06f 0001 	mvn.w	r0, #1
 8004e36:	f002 fe15 	bl	8007a64 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004e3a:	bf00      	nop
 8004e3c:	3708      	adds	r7, #8
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	40023800 	.word	0x40023800

08004e48 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b08c      	sub	sp, #48	; 0x30
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e50:	f107 031c 	add.w	r3, r7, #28
 8004e54:	2200      	movs	r2, #0
 8004e56:	601a      	str	r2, [r3, #0]
 8004e58:	605a      	str	r2, [r3, #4]
 8004e5a:	609a      	str	r2, [r3, #8]
 8004e5c:	60da      	str	r2, [r3, #12]
 8004e5e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a36      	ldr	r2, [pc, #216]	; (8004f40 <HAL_ADC_MspInit+0xf8>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d124      	bne.n	8004eb4 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004e6a:	4b36      	ldr	r3, [pc, #216]	; (8004f44 <HAL_ADC_MspInit+0xfc>)
 8004e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e6e:	4a35      	ldr	r2, [pc, #212]	; (8004f44 <HAL_ADC_MspInit+0xfc>)
 8004e70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e74:	6453      	str	r3, [r2, #68]	; 0x44
 8004e76:	4b33      	ldr	r3, [pc, #204]	; (8004f44 <HAL_ADC_MspInit+0xfc>)
 8004e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e7e:	61bb      	str	r3, [r7, #24]
 8004e80:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e82:	4b30      	ldr	r3, [pc, #192]	; (8004f44 <HAL_ADC_MspInit+0xfc>)
 8004e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e86:	4a2f      	ldr	r2, [pc, #188]	; (8004f44 <HAL_ADC_MspInit+0xfc>)
 8004e88:	f043 0301 	orr.w	r3, r3, #1
 8004e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8004e8e:	4b2d      	ldr	r3, [pc, #180]	; (8004f44 <HAL_ADC_MspInit+0xfc>)
 8004e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e92:	f003 0301 	and.w	r3, r3, #1
 8004e96:	617b      	str	r3, [r7, #20]
 8004e98:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ea6:	f107 031c 	add.w	r3, r7, #28
 8004eaa:	4619      	mov	r1, r3
 8004eac:	4826      	ldr	r0, [pc, #152]	; (8004f48 <HAL_ADC_MspInit+0x100>)
 8004eae:	f003 fc93 	bl	80087d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8004eb2:	e041      	b.n	8004f38 <HAL_ADC_MspInit+0xf0>
  else if(hadc->Instance==ADC3)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a24      	ldr	r2, [pc, #144]	; (8004f4c <HAL_ADC_MspInit+0x104>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d13c      	bne.n	8004f38 <HAL_ADC_MspInit+0xf0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8004ebe:	4b21      	ldr	r3, [pc, #132]	; (8004f44 <HAL_ADC_MspInit+0xfc>)
 8004ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ec2:	4a20      	ldr	r2, [pc, #128]	; (8004f44 <HAL_ADC_MspInit+0xfc>)
 8004ec4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ec8:	6453      	str	r3, [r2, #68]	; 0x44
 8004eca:	4b1e      	ldr	r3, [pc, #120]	; (8004f44 <HAL_ADC_MspInit+0xfc>)
 8004ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ece:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ed2:	613b      	str	r3, [r7, #16]
 8004ed4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004ed6:	4b1b      	ldr	r3, [pc, #108]	; (8004f44 <HAL_ADC_MspInit+0xfc>)
 8004ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eda:	4a1a      	ldr	r2, [pc, #104]	; (8004f44 <HAL_ADC_MspInit+0xfc>)
 8004edc:	f043 0320 	orr.w	r3, r3, #32
 8004ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8004ee2:	4b18      	ldr	r3, [pc, #96]	; (8004f44 <HAL_ADC_MspInit+0xfc>)
 8004ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee6:	f003 0320 	and.w	r3, r3, #32
 8004eea:	60fb      	str	r3, [r7, #12]
 8004eec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004eee:	4b15      	ldr	r3, [pc, #84]	; (8004f44 <HAL_ADC_MspInit+0xfc>)
 8004ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef2:	4a14      	ldr	r2, [pc, #80]	; (8004f44 <HAL_ADC_MspInit+0xfc>)
 8004ef4:	f043 0301 	orr.w	r3, r3, #1
 8004ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8004efa:	4b12      	ldr	r3, [pc, #72]	; (8004f44 <HAL_ADC_MspInit+0xfc>)
 8004efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efe:	f003 0301 	and.w	r3, r3, #1
 8004f02:	60bb      	str	r3, [r7, #8]
 8004f04:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8004f06:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8004f0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f10:	2300      	movs	r3, #0
 8004f12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004f14:	f107 031c 	add.w	r3, r7, #28
 8004f18:	4619      	mov	r1, r3
 8004f1a:	480d      	ldr	r0, [pc, #52]	; (8004f50 <HAL_ADC_MspInit+0x108>)
 8004f1c:	f003 fc5c 	bl	80087d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004f20:	2301      	movs	r3, #1
 8004f22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004f24:	2303      	movs	r3, #3
 8004f26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f2c:	f107 031c 	add.w	r3, r7, #28
 8004f30:	4619      	mov	r1, r3
 8004f32:	4805      	ldr	r0, [pc, #20]	; (8004f48 <HAL_ADC_MspInit+0x100>)
 8004f34:	f003 fc50 	bl	80087d8 <HAL_GPIO_Init>
}
 8004f38:	bf00      	nop
 8004f3a:	3730      	adds	r7, #48	; 0x30
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	40012000 	.word	0x40012000
 8004f44:	40023800 	.word	0x40023800
 8004f48:	40020000 	.word	0x40020000
 8004f4c:	40012200 	.word	0x40012200
 8004f50:	40021400 	.word	0x40021400

08004f54 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b085      	sub	sp, #20
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a0a      	ldr	r2, [pc, #40]	; (8004f8c <HAL_DMA2D_MspInit+0x38>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d10b      	bne.n	8004f7e <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8004f66:	4b0a      	ldr	r3, [pc, #40]	; (8004f90 <HAL_DMA2D_MspInit+0x3c>)
 8004f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f6a:	4a09      	ldr	r2, [pc, #36]	; (8004f90 <HAL_DMA2D_MspInit+0x3c>)
 8004f6c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004f70:	6313      	str	r3, [r2, #48]	; 0x30
 8004f72:	4b07      	ldr	r3, [pc, #28]	; (8004f90 <HAL_DMA2D_MspInit+0x3c>)
 8004f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f7a:	60fb      	str	r3, [r7, #12]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8004f7e:	bf00      	nop
 8004f80:	3714      	adds	r7, #20
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	4002b000 	.word	0x4002b000
 8004f90:	40023800 	.word	0x40023800

08004f94 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b08e      	sub	sp, #56	; 0x38
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	601a      	str	r2, [r3, #0]
 8004fa4:	605a      	str	r2, [r3, #4]
 8004fa6:	609a      	str	r2, [r3, #8]
 8004fa8:	60da      	str	r2, [r3, #12]
 8004faa:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a55      	ldr	r2, [pc, #340]	; (8005108 <HAL_LTDC_MspInit+0x174>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	f040 80a3 	bne.w	80050fe <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8004fb8:	4b54      	ldr	r3, [pc, #336]	; (800510c <HAL_LTDC_MspInit+0x178>)
 8004fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fbc:	4a53      	ldr	r2, [pc, #332]	; (800510c <HAL_LTDC_MspInit+0x178>)
 8004fbe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004fc2:	6453      	str	r3, [r2, #68]	; 0x44
 8004fc4:	4b51      	ldr	r3, [pc, #324]	; (800510c <HAL_LTDC_MspInit+0x178>)
 8004fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fc8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004fcc:	623b      	str	r3, [r7, #32]
 8004fce:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004fd0:	4b4e      	ldr	r3, [pc, #312]	; (800510c <HAL_LTDC_MspInit+0x178>)
 8004fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd4:	4a4d      	ldr	r2, [pc, #308]	; (800510c <HAL_LTDC_MspInit+0x178>)
 8004fd6:	f043 0310 	orr.w	r3, r3, #16
 8004fda:	6313      	str	r3, [r2, #48]	; 0x30
 8004fdc:	4b4b      	ldr	r3, [pc, #300]	; (800510c <HAL_LTDC_MspInit+0x178>)
 8004fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe0:	f003 0310 	and.w	r3, r3, #16
 8004fe4:	61fb      	str	r3, [r7, #28]
 8004fe6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8004fe8:	4b48      	ldr	r3, [pc, #288]	; (800510c <HAL_LTDC_MspInit+0x178>)
 8004fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fec:	4a47      	ldr	r2, [pc, #284]	; (800510c <HAL_LTDC_MspInit+0x178>)
 8004fee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ff2:	6313      	str	r3, [r2, #48]	; 0x30
 8004ff4:	4b45      	ldr	r3, [pc, #276]	; (800510c <HAL_LTDC_MspInit+0x178>)
 8004ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ffc:	61bb      	str	r3, [r7, #24]
 8004ffe:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8005000:	4b42      	ldr	r3, [pc, #264]	; (800510c <HAL_LTDC_MspInit+0x178>)
 8005002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005004:	4a41      	ldr	r2, [pc, #260]	; (800510c <HAL_LTDC_MspInit+0x178>)
 8005006:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800500a:	6313      	str	r3, [r2, #48]	; 0x30
 800500c:	4b3f      	ldr	r3, [pc, #252]	; (800510c <HAL_LTDC_MspInit+0x178>)
 800500e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005010:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005014:	617b      	str	r3, [r7, #20]
 8005016:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005018:	4b3c      	ldr	r3, [pc, #240]	; (800510c <HAL_LTDC_MspInit+0x178>)
 800501a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800501c:	4a3b      	ldr	r2, [pc, #236]	; (800510c <HAL_LTDC_MspInit+0x178>)
 800501e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005022:	6313      	str	r3, [r2, #48]	; 0x30
 8005024:	4b39      	ldr	r3, [pc, #228]	; (800510c <HAL_LTDC_MspInit+0x178>)
 8005026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800502c:	613b      	str	r3, [r7, #16]
 800502e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8005030:	4b36      	ldr	r3, [pc, #216]	; (800510c <HAL_LTDC_MspInit+0x178>)
 8005032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005034:	4a35      	ldr	r2, [pc, #212]	; (800510c <HAL_LTDC_MspInit+0x178>)
 8005036:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800503a:	6313      	str	r3, [r2, #48]	; 0x30
 800503c:	4b33      	ldr	r3, [pc, #204]	; (800510c <HAL_LTDC_MspInit+0x178>)
 800503e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005044:	60fb      	str	r3, [r7, #12]
 8005046:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8005048:	2310      	movs	r3, #16
 800504a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800504c:	2302      	movs	r3, #2
 800504e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005050:	2300      	movs	r3, #0
 8005052:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005054:	2300      	movs	r3, #0
 8005056:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005058:	230e      	movs	r3, #14
 800505a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800505c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005060:	4619      	mov	r1, r3
 8005062:	482b      	ldr	r0, [pc, #172]	; (8005110 <HAL_LTDC_MspInit+0x17c>)
 8005064:	f003 fbb8 	bl	80087d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8005068:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800506c:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800506e:	2302      	movs	r3, #2
 8005070:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005072:	2300      	movs	r3, #0
 8005074:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005076:	2300      	movs	r3, #0
 8005078:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800507a:	230e      	movs	r3, #14
 800507c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800507e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005082:	4619      	mov	r1, r3
 8005084:	4823      	ldr	r0, [pc, #140]	; (8005114 <HAL_LTDC_MspInit+0x180>)
 8005086:	f003 fba7 	bl	80087d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 800508a:	23f7      	movs	r3, #247	; 0xf7
 800508c:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800508e:	2302      	movs	r3, #2
 8005090:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005092:	2300      	movs	r3, #0
 8005094:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005096:	2300      	movs	r3, #0
 8005098:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800509a:	230e      	movs	r3, #14
 800509c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800509e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050a2:	4619      	mov	r1, r3
 80050a4:	481c      	ldr	r0, [pc, #112]	; (8005118 <HAL_LTDC_MspInit+0x184>)
 80050a6:	f003 fb97 	bl	80087d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 80050aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80050ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050b0:	2302      	movs	r3, #2
 80050b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050b4:	2300      	movs	r3, #0
 80050b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050b8:	2300      	movs	r3, #0
 80050ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80050bc:	2309      	movs	r3, #9
 80050be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80050c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050c4:	4619      	mov	r1, r3
 80050c6:	4815      	ldr	r0, [pc, #84]	; (800511c <HAL_LTDC_MspInit+0x188>)
 80050c8:	f003 fb86 	bl	80087d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80050cc:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 80050d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050d2:	2302      	movs	r3, #2
 80050d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050d6:	2300      	movs	r3, #0
 80050d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050da:	2300      	movs	r3, #0
 80050dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80050de:	230e      	movs	r3, #14
 80050e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80050e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050e6:	4619      	mov	r1, r3
 80050e8:	480d      	ldr	r0, [pc, #52]	; (8005120 <HAL_LTDC_MspInit+0x18c>)
 80050ea:	f003 fb75 	bl	80087d8 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80050ee:	2200      	movs	r2, #0
 80050f0:	2105      	movs	r1, #5
 80050f2:	2058      	movs	r0, #88	; 0x58
 80050f4:	f002 fcb6 	bl	8007a64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80050f8:	2058      	movs	r0, #88	; 0x58
 80050fa:	f002 fccf 	bl	8007a9c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80050fe:	bf00      	nop
 8005100:	3738      	adds	r7, #56	; 0x38
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	40016800 	.word	0x40016800
 800510c:	40023800 	.word	0x40023800
 8005110:	40021000 	.word	0x40021000
 8005114:	40022400 	.word	0x40022400
 8005118:	40022800 	.word	0x40022800
 800511c:	40021800 	.word	0x40021800
 8005120:	40022000 	.word	0x40022000

08005124 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b08a      	sub	sp, #40	; 0x28
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800512c:	f107 0314 	add.w	r3, r7, #20
 8005130:	2200      	movs	r2, #0
 8005132:	601a      	str	r2, [r3, #0]
 8005134:	605a      	str	r2, [r3, #4]
 8005136:	609a      	str	r2, [r3, #8]
 8005138:	60da      	str	r2, [r3, #12]
 800513a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a65      	ldr	r2, [pc, #404]	; (80052d8 <HAL_SD_MspInit+0x1b4>)
 8005142:	4293      	cmp	r3, r2
 8005144:	f040 80c3 	bne.w	80052ce <HAL_SD_MspInit+0x1aa>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8005148:	4b64      	ldr	r3, [pc, #400]	; (80052dc <HAL_SD_MspInit+0x1b8>)
 800514a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800514c:	4a63      	ldr	r2, [pc, #396]	; (80052dc <HAL_SD_MspInit+0x1b8>)
 800514e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005152:	6453      	str	r3, [r2, #68]	; 0x44
 8005154:	4b61      	ldr	r3, [pc, #388]	; (80052dc <HAL_SD_MspInit+0x1b8>)
 8005156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005158:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800515c:	613b      	str	r3, [r7, #16]
 800515e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005160:	4b5e      	ldr	r3, [pc, #376]	; (80052dc <HAL_SD_MspInit+0x1b8>)
 8005162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005164:	4a5d      	ldr	r2, [pc, #372]	; (80052dc <HAL_SD_MspInit+0x1b8>)
 8005166:	f043 0304 	orr.w	r3, r3, #4
 800516a:	6313      	str	r3, [r2, #48]	; 0x30
 800516c:	4b5b      	ldr	r3, [pc, #364]	; (80052dc <HAL_SD_MspInit+0x1b8>)
 800516e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005170:	f003 0304 	and.w	r3, r3, #4
 8005174:	60fb      	str	r3, [r7, #12]
 8005176:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005178:	4b58      	ldr	r3, [pc, #352]	; (80052dc <HAL_SD_MspInit+0x1b8>)
 800517a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800517c:	4a57      	ldr	r2, [pc, #348]	; (80052dc <HAL_SD_MspInit+0x1b8>)
 800517e:	f043 0308 	orr.w	r3, r3, #8
 8005182:	6313      	str	r3, [r2, #48]	; 0x30
 8005184:	4b55      	ldr	r3, [pc, #340]	; (80052dc <HAL_SD_MspInit+0x1b8>)
 8005186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005188:	f003 0308 	and.w	r3, r3, #8
 800518c:	60bb      	str	r3, [r7, #8]
 800518e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8005190:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8005194:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005196:	2302      	movs	r3, #2
 8005198:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800519a:	2300      	movs	r3, #0
 800519c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800519e:	2303      	movs	r3, #3
 80051a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80051a2:	230c      	movs	r3, #12
 80051a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80051a6:	f107 0314 	add.w	r3, r7, #20
 80051aa:	4619      	mov	r1, r3
 80051ac:	484c      	ldr	r0, [pc, #304]	; (80052e0 <HAL_SD_MspInit+0x1bc>)
 80051ae:	f003 fb13 	bl	80087d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 80051b2:	2304      	movs	r3, #4
 80051b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051b6:	2302      	movs	r3, #2
 80051b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051ba:	2300      	movs	r3, #0
 80051bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051be:	2303      	movs	r3, #3
 80051c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80051c2:	230c      	movs	r3, #12
 80051c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 80051c6:	f107 0314 	add.w	r3, r7, #20
 80051ca:	4619      	mov	r1, r3
 80051cc:	4845      	ldr	r0, [pc, #276]	; (80052e4 <HAL_SD_MspInit+0x1c0>)
 80051ce:	f003 fb03 	bl	80087d8 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 80051d2:	4b45      	ldr	r3, [pc, #276]	; (80052e8 <HAL_SD_MspInit+0x1c4>)
 80051d4:	4a45      	ldr	r2, [pc, #276]	; (80052ec <HAL_SD_MspInit+0x1c8>)
 80051d6:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 80051d8:	4b43      	ldr	r3, [pc, #268]	; (80052e8 <HAL_SD_MspInit+0x1c4>)
 80051da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80051de:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80051e0:	4b41      	ldr	r3, [pc, #260]	; (80052e8 <HAL_SD_MspInit+0x1c4>)
 80051e2:	2200      	movs	r2, #0
 80051e4:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80051e6:	4b40      	ldr	r3, [pc, #256]	; (80052e8 <HAL_SD_MspInit+0x1c4>)
 80051e8:	2200      	movs	r2, #0
 80051ea:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80051ec:	4b3e      	ldr	r3, [pc, #248]	; (80052e8 <HAL_SD_MspInit+0x1c4>)
 80051ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80051f2:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80051f4:	4b3c      	ldr	r3, [pc, #240]	; (80052e8 <HAL_SD_MspInit+0x1c4>)
 80051f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80051fa:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80051fc:	4b3a      	ldr	r3, [pc, #232]	; (80052e8 <HAL_SD_MspInit+0x1c4>)
 80051fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005202:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8005204:	4b38      	ldr	r3, [pc, #224]	; (80052e8 <HAL_SD_MspInit+0x1c4>)
 8005206:	2220      	movs	r2, #32
 8005208:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800520a:	4b37      	ldr	r3, [pc, #220]	; (80052e8 <HAL_SD_MspInit+0x1c4>)
 800520c:	2200      	movs	r2, #0
 800520e:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005210:	4b35      	ldr	r3, [pc, #212]	; (80052e8 <HAL_SD_MspInit+0x1c4>)
 8005212:	2204      	movs	r2, #4
 8005214:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005216:	4b34      	ldr	r3, [pc, #208]	; (80052e8 <HAL_SD_MspInit+0x1c4>)
 8005218:	2203      	movs	r2, #3
 800521a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 800521c:	4b32      	ldr	r3, [pc, #200]	; (80052e8 <HAL_SD_MspInit+0x1c4>)
 800521e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005222:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8005224:	4b30      	ldr	r3, [pc, #192]	; (80052e8 <HAL_SD_MspInit+0x1c4>)
 8005226:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800522a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 800522c:	482e      	ldr	r0, [pc, #184]	; (80052e8 <HAL_SD_MspInit+0x1c4>)
 800522e:	f002 fc43 	bl	8007ab8 <HAL_DMA_Init>
 8005232:	4603      	mov	r3, r0
 8005234:	2b00      	cmp	r3, #0
 8005236:	d001      	beq.n	800523c <HAL_SD_MspInit+0x118>
    {
      Error_Handler();
 8005238:	f7fd fcb4 	bl	8002ba4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a2a      	ldr	r2, [pc, #168]	; (80052e8 <HAL_SD_MspInit+0x1c4>)
 8005240:	641a      	str	r2, [r3, #64]	; 0x40
 8005242:	4a29      	ldr	r2, [pc, #164]	; (80052e8 <HAL_SD_MspInit+0x1c4>)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8005248:	4b29      	ldr	r3, [pc, #164]	; (80052f0 <HAL_SD_MspInit+0x1cc>)
 800524a:	4a2a      	ldr	r2, [pc, #168]	; (80052f4 <HAL_SD_MspInit+0x1d0>)
 800524c:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 800524e:	4b28      	ldr	r3, [pc, #160]	; (80052f0 <HAL_SD_MspInit+0x1cc>)
 8005250:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005254:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005256:	4b26      	ldr	r3, [pc, #152]	; (80052f0 <HAL_SD_MspInit+0x1cc>)
 8005258:	2240      	movs	r2, #64	; 0x40
 800525a:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800525c:	4b24      	ldr	r3, [pc, #144]	; (80052f0 <HAL_SD_MspInit+0x1cc>)
 800525e:	2200      	movs	r2, #0
 8005260:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005262:	4b23      	ldr	r3, [pc, #140]	; (80052f0 <HAL_SD_MspInit+0x1cc>)
 8005264:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005268:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800526a:	4b21      	ldr	r3, [pc, #132]	; (80052f0 <HAL_SD_MspInit+0x1cc>)
 800526c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005270:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005272:	4b1f      	ldr	r3, [pc, #124]	; (80052f0 <HAL_SD_MspInit+0x1cc>)
 8005274:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005278:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 800527a:	4b1d      	ldr	r3, [pc, #116]	; (80052f0 <HAL_SD_MspInit+0x1cc>)
 800527c:	2220      	movs	r2, #32
 800527e:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005280:	4b1b      	ldr	r3, [pc, #108]	; (80052f0 <HAL_SD_MspInit+0x1cc>)
 8005282:	2200      	movs	r2, #0
 8005284:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005286:	4b1a      	ldr	r3, [pc, #104]	; (80052f0 <HAL_SD_MspInit+0x1cc>)
 8005288:	2204      	movs	r2, #4
 800528a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800528c:	4b18      	ldr	r3, [pc, #96]	; (80052f0 <HAL_SD_MspInit+0x1cc>)
 800528e:	2203      	movs	r2, #3
 8005290:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8005292:	4b17      	ldr	r3, [pc, #92]	; (80052f0 <HAL_SD_MspInit+0x1cc>)
 8005294:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005298:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800529a:	4b15      	ldr	r3, [pc, #84]	; (80052f0 <HAL_SD_MspInit+0x1cc>)
 800529c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80052a0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 80052a2:	4813      	ldr	r0, [pc, #76]	; (80052f0 <HAL_SD_MspInit+0x1cc>)
 80052a4:	f002 fc08 	bl	8007ab8 <HAL_DMA_Init>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d001      	beq.n	80052b2 <HAL_SD_MspInit+0x18e>
    {
      Error_Handler();
 80052ae:	f7fd fc79 	bl	8002ba4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a0e      	ldr	r2, [pc, #56]	; (80052f0 <HAL_SD_MspInit+0x1cc>)
 80052b6:	63da      	str	r2, [r3, #60]	; 0x3c
 80052b8:	4a0d      	ldr	r2, [pc, #52]	; (80052f0 <HAL_SD_MspInit+0x1cc>)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 80052be:	2200      	movs	r2, #0
 80052c0:	2105      	movs	r1, #5
 80052c2:	2031      	movs	r0, #49	; 0x31
 80052c4:	f002 fbce 	bl	8007a64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80052c8:	2031      	movs	r0, #49	; 0x31
 80052ca:	f002 fbe7 	bl	8007a9c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80052ce:	bf00      	nop
 80052d0:	3728      	adds	r7, #40	; 0x28
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	40012c00 	.word	0x40012c00
 80052dc:	40023800 	.word	0x40023800
 80052e0:	40020800 	.word	0x40020800
 80052e4:	40020c00 	.word	0x40020c00
 80052e8:	20000794 	.word	0x20000794
 80052ec:	40026458 	.word	0x40026458
 80052f0:	200007f4 	.word	0x200007f4
 80052f4:	400264a0 	.word	0x400264a0

080052f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b0ac      	sub	sp, #176	; 0xb0
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005300:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005304:	2200      	movs	r2, #0
 8005306:	601a      	str	r2, [r3, #0]
 8005308:	605a      	str	r2, [r3, #4]
 800530a:	609a      	str	r2, [r3, #8]
 800530c:	60da      	str	r2, [r3, #12]
 800530e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005310:	f107 0318 	add.w	r3, r7, #24
 8005314:	2284      	movs	r2, #132	; 0x84
 8005316:	2100      	movs	r1, #0
 8005318:	4618      	mov	r0, r3
 800531a:	f00f fbb5 	bl	8014a88 <memset>
  if(huart->Instance==USART1)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a32      	ldr	r2, [pc, #200]	; (80053ec <HAL_UART_MspInit+0xf4>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d15c      	bne.n	80053e2 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005328:	2340      	movs	r3, #64	; 0x40
 800532a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800532c:	2300      	movs	r3, #0
 800532e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005330:	f107 0318 	add.w	r3, r7, #24
 8005334:	4618      	mov	r0, r3
 8005336:	f005 fb77 	bl	800aa28 <HAL_RCCEx_PeriphCLKConfig>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d001      	beq.n	8005344 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8005340:	f7fd fc30 	bl	8002ba4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005344:	4b2a      	ldr	r3, [pc, #168]	; (80053f0 <HAL_UART_MspInit+0xf8>)
 8005346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005348:	4a29      	ldr	r2, [pc, #164]	; (80053f0 <HAL_UART_MspInit+0xf8>)
 800534a:	f043 0310 	orr.w	r3, r3, #16
 800534e:	6453      	str	r3, [r2, #68]	; 0x44
 8005350:	4b27      	ldr	r3, [pc, #156]	; (80053f0 <HAL_UART_MspInit+0xf8>)
 8005352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005354:	f003 0310 	and.w	r3, r3, #16
 8005358:	617b      	str	r3, [r7, #20]
 800535a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800535c:	4b24      	ldr	r3, [pc, #144]	; (80053f0 <HAL_UART_MspInit+0xf8>)
 800535e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005360:	4a23      	ldr	r2, [pc, #140]	; (80053f0 <HAL_UART_MspInit+0xf8>)
 8005362:	f043 0302 	orr.w	r3, r3, #2
 8005366:	6313      	str	r3, [r2, #48]	; 0x30
 8005368:	4b21      	ldr	r3, [pc, #132]	; (80053f0 <HAL_UART_MspInit+0xf8>)
 800536a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800536c:	f003 0302 	and.w	r3, r3, #2
 8005370:	613b      	str	r3, [r7, #16]
 8005372:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005374:	4b1e      	ldr	r3, [pc, #120]	; (80053f0 <HAL_UART_MspInit+0xf8>)
 8005376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005378:	4a1d      	ldr	r2, [pc, #116]	; (80053f0 <HAL_UART_MspInit+0xf8>)
 800537a:	f043 0301 	orr.w	r3, r3, #1
 800537e:	6313      	str	r3, [r2, #48]	; 0x30
 8005380:	4b1b      	ldr	r3, [pc, #108]	; (80053f0 <HAL_UART_MspInit+0xf8>)
 8005382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005384:	f003 0301 	and.w	r3, r3, #1
 8005388:	60fb      	str	r3, [r7, #12]
 800538a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800538c:	2380      	movs	r3, #128	; 0x80
 800538e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005392:	2302      	movs	r3, #2
 8005394:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005398:	2300      	movs	r3, #0
 800539a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800539e:	2300      	movs	r3, #0
 80053a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80053a4:	2307      	movs	r3, #7
 80053a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80053aa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80053ae:	4619      	mov	r1, r3
 80053b0:	4810      	ldr	r0, [pc, #64]	; (80053f4 <HAL_UART_MspInit+0xfc>)
 80053b2:	f003 fa11 	bl	80087d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80053b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053be:	2302      	movs	r3, #2
 80053c0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053c4:	2300      	movs	r3, #0
 80053c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053ca:	2300      	movs	r3, #0
 80053cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80053d0:	2307      	movs	r3, #7
 80053d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80053d6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80053da:	4619      	mov	r1, r3
 80053dc:	4806      	ldr	r0, [pc, #24]	; (80053f8 <HAL_UART_MspInit+0x100>)
 80053de:	f003 f9fb 	bl	80087d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80053e2:	bf00      	nop
 80053e4:	37b0      	adds	r7, #176	; 0xb0
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop
 80053ec:	40011000 	.word	0x40011000
 80053f0:	40023800 	.word	0x40023800
 80053f4:	40020400 	.word	0x40020400
 80053f8:	40020000 	.word	0x40020000

080053fc <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b086      	sub	sp, #24
 8005400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8005402:	1d3b      	adds	r3, r7, #4
 8005404:	2200      	movs	r2, #0
 8005406:	601a      	str	r2, [r3, #0]
 8005408:	605a      	str	r2, [r3, #4]
 800540a:	609a      	str	r2, [r3, #8]
 800540c:	60da      	str	r2, [r3, #12]
 800540e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8005410:	4b42      	ldr	r3, [pc, #264]	; (800551c <HAL_FMC_MspInit+0x120>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d17c      	bne.n	8005512 <HAL_FMC_MspInit+0x116>
    return;
  }
  FMC_Initialized = 1;
 8005418:	4b40      	ldr	r3, [pc, #256]	; (800551c <HAL_FMC_MspInit+0x120>)
 800541a:	2201      	movs	r2, #1
 800541c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800541e:	4b40      	ldr	r3, [pc, #256]	; (8005520 <HAL_FMC_MspInit+0x124>)
 8005420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005422:	4a3f      	ldr	r2, [pc, #252]	; (8005520 <HAL_FMC_MspInit+0x124>)
 8005424:	f043 0301 	orr.w	r3, r3, #1
 8005428:	6393      	str	r3, [r2, #56]	; 0x38
 800542a:	4b3d      	ldr	r3, [pc, #244]	; (8005520 <HAL_FMC_MspInit+0x124>)
 800542c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800542e:	f003 0301 	and.w	r3, r3, #1
 8005432:	603b      	str	r3, [r7, #0]
 8005434:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8005436:	f64f 7383 	movw	r3, #65411	; 0xff83
 800543a:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800543c:	2302      	movs	r3, #2
 800543e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005440:	2300      	movs	r3, #0
 8005442:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005444:	2303      	movs	r3, #3
 8005446:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005448:	230c      	movs	r3, #12
 800544a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800544c:	1d3b      	adds	r3, r7, #4
 800544e:	4619      	mov	r1, r3
 8005450:	4834      	ldr	r0, [pc, #208]	; (8005524 <HAL_FMC_MspInit+0x128>)
 8005452:	f003 f9c1 	bl	80087d8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8005456:	2360      	movs	r3, #96	; 0x60
 8005458:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800545a:	2302      	movs	r3, #2
 800545c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800545e:	2300      	movs	r3, #0
 8005460:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005462:	2303      	movs	r3, #3
 8005464:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005466:	230c      	movs	r3, #12
 8005468:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800546a:	1d3b      	adds	r3, r7, #4
 800546c:	4619      	mov	r1, r3
 800546e:	482e      	ldr	r0, [pc, #184]	; (8005528 <HAL_FMC_MspInit+0x12c>)
 8005470:	f003 f9b2 	bl	80087d8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8005474:	f248 1333 	movw	r3, #33075	; 0x8133
 8005478:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800547a:	2302      	movs	r3, #2
 800547c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800547e:	2300      	movs	r3, #0
 8005480:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005482:	2303      	movs	r3, #3
 8005484:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005486:	230c      	movs	r3, #12
 8005488:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800548a:	1d3b      	adds	r3, r7, #4
 800548c:	4619      	mov	r1, r3
 800548e:	4827      	ldr	r0, [pc, #156]	; (800552c <HAL_FMC_MspInit+0x130>)
 8005490:	f003 f9a2 	bl	80087d8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8005494:	f24c 7303 	movw	r3, #50947	; 0xc703
 8005498:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800549a:	2302      	movs	r3, #2
 800549c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800549e:	2300      	movs	r3, #0
 80054a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054a2:	2303      	movs	r3, #3
 80054a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80054a6:	230c      	movs	r3, #12
 80054a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80054aa:	1d3b      	adds	r3, r7, #4
 80054ac:	4619      	mov	r1, r3
 80054ae:	4820      	ldr	r0, [pc, #128]	; (8005530 <HAL_FMC_MspInit+0x134>)
 80054b0:	f003 f992 	bl	80087d8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80054b4:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80054b8:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054ba:	2302      	movs	r3, #2
 80054bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054be:	2300      	movs	r3, #0
 80054c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054c2:	2303      	movs	r3, #3
 80054c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80054c6:	230c      	movs	r3, #12
 80054c8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80054ca:	1d3b      	adds	r3, r7, #4
 80054cc:	4619      	mov	r1, r3
 80054ce:	4819      	ldr	r0, [pc, #100]	; (8005534 <HAL_FMC_MspInit+0x138>)
 80054d0:	f003 f982 	bl	80087d8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 80054d4:	2328      	movs	r3, #40	; 0x28
 80054d6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054d8:	2302      	movs	r3, #2
 80054da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054dc:	2300      	movs	r3, #0
 80054de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054e0:	2303      	movs	r3, #3
 80054e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80054e4:	230c      	movs	r3, #12
 80054e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80054e8:	1d3b      	adds	r3, r7, #4
 80054ea:	4619      	mov	r1, r3
 80054ec:	4812      	ldr	r0, [pc, #72]	; (8005538 <HAL_FMC_MspInit+0x13c>)
 80054ee:	f003 f973 	bl	80087d8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80054f2:	2308      	movs	r3, #8
 80054f4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054f6:	2302      	movs	r3, #2
 80054f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054fa:	2300      	movs	r3, #0
 80054fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054fe:	2303      	movs	r3, #3
 8005500:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005502:	230c      	movs	r3, #12
 8005504:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8005506:	1d3b      	adds	r3, r7, #4
 8005508:	4619      	mov	r1, r3
 800550a:	480c      	ldr	r0, [pc, #48]	; (800553c <HAL_FMC_MspInit+0x140>)
 800550c:	f003 f964 	bl	80087d8 <HAL_GPIO_Init>
 8005510:	e000      	b.n	8005514 <HAL_FMC_MspInit+0x118>
    return;
 8005512:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8005514:	3718      	adds	r7, #24
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	20000e60 	.word	0x20000e60
 8005520:	40023800 	.word	0x40023800
 8005524:	40021000 	.word	0x40021000
 8005528:	40020400 	.word	0x40020400
 800552c:	40021800 	.word	0x40021800
 8005530:	40020c00 	.word	0x40020c00
 8005534:	40021400 	.word	0x40021400
 8005538:	40021c00 	.word	0x40021c00
 800553c:	40020800 	.word	0x40020800

08005540 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8005548:	f7ff ff58 	bl	80053fc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800554c:	bf00      	nop
 800554e:	3708      	adds	r7, #8
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai2_b;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b08a      	sub	sp, #40	; 0x28
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a61      	ldr	r2, [pc, #388]	; (80056e8 <HAL_SAI_MspInit+0x194>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d15b      	bne.n	800561e <HAL_SAI_MspInit+0xca>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8005566:	4b61      	ldr	r3, [pc, #388]	; (80056ec <HAL_SAI_MspInit+0x198>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d10b      	bne.n	8005586 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800556e:	4b60      	ldr	r3, [pc, #384]	; (80056f0 <HAL_SAI_MspInit+0x19c>)
 8005570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005572:	4a5f      	ldr	r2, [pc, #380]	; (80056f0 <HAL_SAI_MspInit+0x19c>)
 8005574:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005578:	6453      	str	r3, [r2, #68]	; 0x44
 800557a:	4b5d      	ldr	r3, [pc, #372]	; (80056f0 <HAL_SAI_MspInit+0x19c>)
 800557c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800557e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005582:	613b      	str	r3, [r7, #16]
 8005584:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8005586:	4b59      	ldr	r3, [pc, #356]	; (80056ec <HAL_SAI_MspInit+0x198>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	3301      	adds	r3, #1
 800558c:	4a57      	ldr	r2, [pc, #348]	; (80056ec <HAL_SAI_MspInit+0x198>)
 800558e:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8005590:	23f0      	movs	r3, #240	; 0xf0
 8005592:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005594:	2302      	movs	r3, #2
 8005596:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005598:	2300      	movs	r3, #0
 800559a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800559c:	2300      	movs	r3, #0
 800559e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80055a0:	230a      	movs	r3, #10
 80055a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80055a4:	f107 0314 	add.w	r3, r7, #20
 80055a8:	4619      	mov	r1, r3
 80055aa:	4852      	ldr	r0, [pc, #328]	; (80056f4 <HAL_SAI_MspInit+0x1a0>)
 80055ac:	f003 f914 	bl	80087d8 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA2_Stream4;
 80055b0:	4b51      	ldr	r3, [pc, #324]	; (80056f8 <HAL_SAI_MspInit+0x1a4>)
 80055b2:	4a52      	ldr	r2, [pc, #328]	; (80056fc <HAL_SAI_MspInit+0x1a8>)
 80055b4:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Channel = DMA_CHANNEL_3;
 80055b6:	4b50      	ldr	r3, [pc, #320]	; (80056f8 <HAL_SAI_MspInit+0x1a4>)
 80055b8:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80055bc:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80055be:	4b4e      	ldr	r3, [pc, #312]	; (80056f8 <HAL_SAI_MspInit+0x1a4>)
 80055c0:	2240      	movs	r2, #64	; 0x40
 80055c2:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 80055c4:	4b4c      	ldr	r3, [pc, #304]	; (80056f8 <HAL_SAI_MspInit+0x1a4>)
 80055c6:	2200      	movs	r2, #0
 80055c8:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 80055ca:	4b4b      	ldr	r3, [pc, #300]	; (80056f8 <HAL_SAI_MspInit+0x1a4>)
 80055cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80055d0:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80055d2:	4b49      	ldr	r3, [pc, #292]	; (80056f8 <HAL_SAI_MspInit+0x1a4>)
 80055d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055d8:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80055da:	4b47      	ldr	r3, [pc, #284]	; (80056f8 <HAL_SAI_MspInit+0x1a4>)
 80055dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80055e0:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 80055e2:	4b45      	ldr	r3, [pc, #276]	; (80056f8 <HAL_SAI_MspInit+0x1a4>)
 80055e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80055e8:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_LOW;
 80055ea:	4b43      	ldr	r3, [pc, #268]	; (80056f8 <HAL_SAI_MspInit+0x1a4>)
 80055ec:	2200      	movs	r2, #0
 80055ee:	621a      	str	r2, [r3, #32]
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80055f0:	4b41      	ldr	r3, [pc, #260]	; (80056f8 <HAL_SAI_MspInit+0x1a4>)
 80055f2:	2200      	movs	r2, #0
 80055f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 80055f6:	4840      	ldr	r0, [pc, #256]	; (80056f8 <HAL_SAI_MspInit+0x1a4>)
 80055f8:	f002 fa5e 	bl	8007ab8 <HAL_DMA_Init>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d001      	beq.n	8005606 <HAL_SAI_MspInit+0xb2>
    {
      Error_Handler();
 8005602:	f7fd facf 	bl	8002ba4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a3b      	ldr	r2, [pc, #236]	; (80056f8 <HAL_SAI_MspInit+0x1a4>)
 800560a:	671a      	str	r2, [r3, #112]	; 0x70
 800560c:	4a3a      	ldr	r2, [pc, #232]	; (80056f8 <HAL_SAI_MspInit+0x1a4>)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a38      	ldr	r2, [pc, #224]	; (80056f8 <HAL_SAI_MspInit+0x1a4>)
 8005616:	66da      	str	r2, [r3, #108]	; 0x6c
 8005618:	4a37      	ldr	r2, [pc, #220]	; (80056f8 <HAL_SAI_MspInit+0x1a4>)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6393      	str	r3, [r2, #56]	; 0x38

    }
    if(hsai->Instance==SAI2_Block_B)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a37      	ldr	r2, [pc, #220]	; (8005700 <HAL_SAI_MspInit+0x1ac>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d15b      	bne.n	80056e0 <HAL_SAI_MspInit+0x18c>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8005628:	4b30      	ldr	r3, [pc, #192]	; (80056ec <HAL_SAI_MspInit+0x198>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d10b      	bne.n	8005648 <HAL_SAI_MspInit+0xf4>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8005630:	4b2f      	ldr	r3, [pc, #188]	; (80056f0 <HAL_SAI_MspInit+0x19c>)
 8005632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005634:	4a2e      	ldr	r2, [pc, #184]	; (80056f0 <HAL_SAI_MspInit+0x19c>)
 8005636:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800563a:	6453      	str	r3, [r2, #68]	; 0x44
 800563c:	4b2c      	ldr	r3, [pc, #176]	; (80056f0 <HAL_SAI_MspInit+0x19c>)
 800563e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005640:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005644:	60fb      	str	r3, [r7, #12]
 8005646:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8005648:	4b28      	ldr	r3, [pc, #160]	; (80056ec <HAL_SAI_MspInit+0x198>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	3301      	adds	r3, #1
 800564e:	4a27      	ldr	r2, [pc, #156]	; (80056ec <HAL_SAI_MspInit+0x198>)
 8005650:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8005652:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005656:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005658:	2302      	movs	r3, #2
 800565a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800565c:	2300      	movs	r3, #0
 800565e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005660:	2300      	movs	r3, #0
 8005662:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8005664:	230a      	movs	r3, #10
 8005666:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8005668:	f107 0314 	add.w	r3, r7, #20
 800566c:	4619      	mov	r1, r3
 800566e:	4825      	ldr	r0, [pc, #148]	; (8005704 <HAL_SAI_MspInit+0x1b0>)
 8005670:	f003 f8b2 	bl	80087d8 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA2_Stream7;
 8005674:	4b24      	ldr	r3, [pc, #144]	; (8005708 <HAL_SAI_MspInit+0x1b4>)
 8005676:	4a25      	ldr	r2, [pc, #148]	; (800570c <HAL_SAI_MspInit+0x1b8>)
 8005678:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_0;
 800567a:	4b23      	ldr	r3, [pc, #140]	; (8005708 <HAL_SAI_MspInit+0x1b4>)
 800567c:	2200      	movs	r2, #0
 800567e:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005680:	4b21      	ldr	r3, [pc, #132]	; (8005708 <HAL_SAI_MspInit+0x1b4>)
 8005682:	2200      	movs	r2, #0
 8005684:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8005686:	4b20      	ldr	r3, [pc, #128]	; (8005708 <HAL_SAI_MspInit+0x1b4>)
 8005688:	2200      	movs	r2, #0
 800568a:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 800568c:	4b1e      	ldr	r3, [pc, #120]	; (8005708 <HAL_SAI_MspInit+0x1b4>)
 800568e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005692:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005694:	4b1c      	ldr	r3, [pc, #112]	; (8005708 <HAL_SAI_MspInit+0x1b4>)
 8005696:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800569a:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800569c:	4b1a      	ldr	r3, [pc, #104]	; (8005708 <HAL_SAI_MspInit+0x1b4>)
 800569e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80056a2:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 80056a4:	4b18      	ldr	r3, [pc, #96]	; (8005708 <HAL_SAI_MspInit+0x1b4>)
 80056a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056aa:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_LOW;
 80056ac:	4b16      	ldr	r3, [pc, #88]	; (8005708 <HAL_SAI_MspInit+0x1b4>)
 80056ae:	2200      	movs	r2, #0
 80056b0:	621a      	str	r2, [r3, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80056b2:	4b15      	ldr	r3, [pc, #84]	; (8005708 <HAL_SAI_MspInit+0x1b4>)
 80056b4:	2200      	movs	r2, #0
 80056b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 80056b8:	4813      	ldr	r0, [pc, #76]	; (8005708 <HAL_SAI_MspInit+0x1b4>)
 80056ba:	f002 f9fd 	bl	8007ab8 <HAL_DMA_Init>
 80056be:	4603      	mov	r3, r0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d001      	beq.n	80056c8 <HAL_SAI_MspInit+0x174>
    {
      Error_Handler();
 80056c4:	f7fd fa6e 	bl	8002ba4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_b);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4a0f      	ldr	r2, [pc, #60]	; (8005708 <HAL_SAI_MspInit+0x1b4>)
 80056cc:	671a      	str	r2, [r3, #112]	; 0x70
 80056ce:	4a0e      	ldr	r2, [pc, #56]	; (8005708 <HAL_SAI_MspInit+0x1b4>)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_b);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4a0c      	ldr	r2, [pc, #48]	; (8005708 <HAL_SAI_MspInit+0x1b4>)
 80056d8:	66da      	str	r2, [r3, #108]	; 0x6c
 80056da:	4a0b      	ldr	r2, [pc, #44]	; (8005708 <HAL_SAI_MspInit+0x1b4>)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 80056e0:	bf00      	nop
 80056e2:	3728      	adds	r7, #40	; 0x28
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}
 80056e8:	40015c04 	.word	0x40015c04
 80056ec:	20000e64 	.word	0x20000e64
 80056f0:	40023800 	.word	0x40023800
 80056f4:	40022000 	.word	0x40022000
 80056f8:	20000650 	.word	0x20000650
 80056fc:	40026470 	.word	0x40026470
 8005700:	40015c24 	.word	0x40015c24
 8005704:	40021800 	.word	0x40021800
 8005708:	200006b0 	.word	0x200006b0
 800570c:	400264b8 	.word	0x400264b8

08005710 <HAL_SAI_MspDeInit>:

void HAL_SAI_MspDeInit(SAI_HandleTypeDef* hsai)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b082      	sub	sp, #8
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a23      	ldr	r2, [pc, #140]	; (80057ac <HAL_SAI_MspDeInit+0x9c>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d11c      	bne.n	800575c <HAL_SAI_MspDeInit+0x4c>
    {
    SAI2_client --;
 8005722:	4b23      	ldr	r3, [pc, #140]	; (80057b0 <HAL_SAI_MspDeInit+0xa0>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	3b01      	subs	r3, #1
 8005728:	4a21      	ldr	r2, [pc, #132]	; (80057b0 <HAL_SAI_MspDeInit+0xa0>)
 800572a:	6013      	str	r3, [r2, #0]
    if (SAI2_client == 0)
 800572c:	4b20      	ldr	r3, [pc, #128]	; (80057b0 <HAL_SAI_MspDeInit+0xa0>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d105      	bne.n	8005740 <HAL_SAI_MspDeInit+0x30>
      {
      /* Peripheral clock disable */
       __HAL_RCC_SAI2_CLK_DISABLE();
 8005734:	4b1f      	ldr	r3, [pc, #124]	; (80057b4 <HAL_SAI_MspDeInit+0xa4>)
 8005736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005738:	4a1e      	ldr	r2, [pc, #120]	; (80057b4 <HAL_SAI_MspDeInit+0xa4>)
 800573a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800573e:	6453      	str	r3, [r2, #68]	; 0x44
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    HAL_GPIO_DeInit(GPIOI, SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin);
 8005740:	21f0      	movs	r1, #240	; 0xf0
 8005742:	481d      	ldr	r0, [pc, #116]	; (80057b8 <HAL_SAI_MspDeInit+0xa8>)
 8005744:	f003 f9f4 	bl	8008b30 <HAL_GPIO_DeInit>

    /* SAI2 DMA Deinit */
    HAL_DMA_DeInit(hsai->hdmarx);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800574c:	4618      	mov	r0, r3
 800574e:	f002 fa61 	bl	8007c14 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hsai->hdmatx);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005756:	4618      	mov	r0, r3
 8005758:	f002 fa5c 	bl	8007c14 <HAL_DMA_DeInit>
    }
    if(hsai->Instance==SAI2_Block_B)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a16      	ldr	r2, [pc, #88]	; (80057bc <HAL_SAI_MspDeInit+0xac>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d11d      	bne.n	80057a2 <HAL_SAI_MspDeInit+0x92>
    {
    SAI2_client --;
 8005766:	4b12      	ldr	r3, [pc, #72]	; (80057b0 <HAL_SAI_MspDeInit+0xa0>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	3b01      	subs	r3, #1
 800576c:	4a10      	ldr	r2, [pc, #64]	; (80057b0 <HAL_SAI_MspDeInit+0xa0>)
 800576e:	6013      	str	r3, [r2, #0]
      if (SAI2_client == 0)
 8005770:	4b0f      	ldr	r3, [pc, #60]	; (80057b0 <HAL_SAI_MspDeInit+0xa0>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d105      	bne.n	8005784 <HAL_SAI_MspDeInit+0x74>
      {
      /* Peripheral clock disable */
      __HAL_RCC_SAI2_CLK_DISABLE();
 8005778:	4b0e      	ldr	r3, [pc, #56]	; (80057b4 <HAL_SAI_MspDeInit+0xa4>)
 800577a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800577c:	4a0d      	ldr	r2, [pc, #52]	; (80057b4 <HAL_SAI_MspDeInit+0xa4>)
 800577e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005782:	6453      	str	r3, [r2, #68]	; 0x44
      }

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    HAL_GPIO_DeInit(SAI2_SDB_GPIO_Port, SAI2_SDB_Pin);
 8005784:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005788:	480d      	ldr	r0, [pc, #52]	; (80057c0 <HAL_SAI_MspDeInit+0xb0>)
 800578a:	f003 f9d1 	bl	8008b30 <HAL_GPIO_DeInit>

    /* SAI2 DMA Deinit */
    HAL_DMA_DeInit(hsai->hdmarx);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005792:	4618      	mov	r0, r3
 8005794:	f002 fa3e 	bl	8007c14 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hsai->hdmatx);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800579c:	4618      	mov	r0, r3
 800579e:	f002 fa39 	bl	8007c14 <HAL_DMA_DeInit>
    }
}
 80057a2:	bf00      	nop
 80057a4:	3708      	adds	r7, #8
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	40015c04 	.word	0x40015c04
 80057b0:	20000e64 	.word	0x20000e64
 80057b4:	40023800 	.word	0x40023800
 80057b8:	40022000 	.word	0x40022000
 80057bc:	40015c24 	.word	0x40015c24
 80057c0:	40021800 	.word	0x40021800

080057c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b08e      	sub	sp, #56	; 0x38
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80057cc:	2300      	movs	r3, #0
 80057ce:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80057d0:	2300      	movs	r3, #0
 80057d2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80057d4:	4b33      	ldr	r3, [pc, #204]	; (80058a4 <HAL_InitTick+0xe0>)
 80057d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d8:	4a32      	ldr	r2, [pc, #200]	; (80058a4 <HAL_InitTick+0xe0>)
 80057da:	f043 0310 	orr.w	r3, r3, #16
 80057de:	6413      	str	r3, [r2, #64]	; 0x40
 80057e0:	4b30      	ldr	r3, [pc, #192]	; (80058a4 <HAL_InitTick+0xe0>)
 80057e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e4:	f003 0310 	and.w	r3, r3, #16
 80057e8:	60fb      	str	r3, [r7, #12]
 80057ea:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80057ec:	f107 0210 	add.w	r2, r7, #16
 80057f0:	f107 0314 	add.w	r3, r7, #20
 80057f4:	4611      	mov	r1, r2
 80057f6:	4618      	mov	r0, r3
 80057f8:	f005 f8e4 	bl	800a9c4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80057fc:	6a3b      	ldr	r3, [r7, #32]
 80057fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8005800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005802:	2b00      	cmp	r3, #0
 8005804:	d103      	bne.n	800580e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8005806:	f005 f8b5 	bl	800a974 <HAL_RCC_GetPCLK1Freq>
 800580a:	6378      	str	r0, [r7, #52]	; 0x34
 800580c:	e004      	b.n	8005818 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800580e:	f005 f8b1 	bl	800a974 <HAL_RCC_GetPCLK1Freq>
 8005812:	4603      	mov	r3, r0
 8005814:	005b      	lsls	r3, r3, #1
 8005816:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800581a:	4a23      	ldr	r2, [pc, #140]	; (80058a8 <HAL_InitTick+0xe4>)
 800581c:	fba2 2303 	umull	r2, r3, r2, r3
 8005820:	0c9b      	lsrs	r3, r3, #18
 8005822:	3b01      	subs	r3, #1
 8005824:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8005826:	4b21      	ldr	r3, [pc, #132]	; (80058ac <HAL_InitTick+0xe8>)
 8005828:	4a21      	ldr	r2, [pc, #132]	; (80058b0 <HAL_InitTick+0xec>)
 800582a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800582c:	4b1f      	ldr	r3, [pc, #124]	; (80058ac <HAL_InitTick+0xe8>)
 800582e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005832:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8005834:	4a1d      	ldr	r2, [pc, #116]	; (80058ac <HAL_InitTick+0xe8>)
 8005836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005838:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800583a:	4b1c      	ldr	r3, [pc, #112]	; (80058ac <HAL_InitTick+0xe8>)
 800583c:	2200      	movs	r2, #0
 800583e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005840:	4b1a      	ldr	r3, [pc, #104]	; (80058ac <HAL_InitTick+0xe8>)
 8005842:	2200      	movs	r2, #0
 8005844:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005846:	4b19      	ldr	r3, [pc, #100]	; (80058ac <HAL_InitTick+0xe8>)
 8005848:	2200      	movs	r2, #0
 800584a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800584c:	4817      	ldr	r0, [pc, #92]	; (80058ac <HAL_InitTick+0xe8>)
 800584e:	f007 fc88 	bl	800d162 <HAL_TIM_Base_Init>
 8005852:	4603      	mov	r3, r0
 8005854:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8005858:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800585c:	2b00      	cmp	r3, #0
 800585e:	d11b      	bne.n	8005898 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8005860:	4812      	ldr	r0, [pc, #72]	; (80058ac <HAL_InitTick+0xe8>)
 8005862:	f007 fcdf 	bl	800d224 <HAL_TIM_Base_Start_IT>
 8005866:	4603      	mov	r3, r0
 8005868:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800586c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005870:	2b00      	cmp	r3, #0
 8005872:	d111      	bne.n	8005898 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005874:	2036      	movs	r0, #54	; 0x36
 8005876:	f002 f911 	bl	8007a9c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2b0f      	cmp	r3, #15
 800587e:	d808      	bhi.n	8005892 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8005880:	2200      	movs	r2, #0
 8005882:	6879      	ldr	r1, [r7, #4]
 8005884:	2036      	movs	r0, #54	; 0x36
 8005886:	f002 f8ed 	bl	8007a64 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800588a:	4a0a      	ldr	r2, [pc, #40]	; (80058b4 <HAL_InitTick+0xf0>)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6013      	str	r3, [r2, #0]
 8005890:	e002      	b.n	8005898 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8005898:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800589c:	4618      	mov	r0, r3
 800589e:	3738      	adds	r7, #56	; 0x38
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}
 80058a4:	40023800 	.word	0x40023800
 80058a8:	431bde83 	.word	0x431bde83
 80058ac:	20000e68 	.word	0x20000e68
 80058b0:	40001000 	.word	0x40001000
 80058b4:	200000e8 	.word	0x200000e8

080058b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80058b8:	b480      	push	{r7}
 80058ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80058bc:	e7fe      	b.n	80058bc <NMI_Handler+0x4>

080058be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80058be:	b480      	push	{r7}
 80058c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80058c2:	e7fe      	b.n	80058c2 <HardFault_Handler+0x4>

080058c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80058c4:	b480      	push	{r7}
 80058c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80058c8:	e7fe      	b.n	80058c8 <MemManage_Handler+0x4>

080058ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80058ca:	b480      	push	{r7}
 80058cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80058ce:	e7fe      	b.n	80058ce <BusFault_Handler+0x4>

080058d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80058d0:	b480      	push	{r7}
 80058d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80058d4:	e7fe      	b.n	80058d4 <UsageFault_Handler+0x4>

080058d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80058d6:	b480      	push	{r7}
 80058d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80058da:	bf00      	nop
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80058e8:	4802      	ldr	r0, [pc, #8]	; (80058f4 <SDMMC1_IRQHandler+0x10>)
 80058ea:	f006 fd01 	bl	800c2f0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80058ee:	bf00      	nop
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	bf00      	nop
 80058f4:	20000710 	.word	0x20000710

080058f8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80058fc:	4802      	ldr	r0, [pc, #8]	; (8005908 <TIM6_DAC_IRQHandler+0x10>)
 80058fe:	f007 fd09 	bl	800d314 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005902:	bf00      	nop
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	20000e68 	.word	0x20000e68

0800590c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8005910:	4802      	ldr	r0, [pc, #8]	; (800591c <DMA2_Stream3_IRQHandler+0x10>)
 8005912:	f002 fa5f 	bl	8007dd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8005916:	bf00      	nop
 8005918:	bd80      	pop	{r7, pc}
 800591a:	bf00      	nop
 800591c:	20000794 	.word	0x20000794

08005920 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 8005924:	4802      	ldr	r0, [pc, #8]	; (8005930 <DMA2_Stream4_IRQHandler+0x10>)
 8005926:	f002 fa55 	bl	8007dd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 800592a:	bf00      	nop
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	20000650 	.word	0x20000650

08005934 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8005938:	4802      	ldr	r0, [pc, #8]	; (8005944 <DMA2_Stream6_IRQHandler+0x10>)
 800593a:	f002 fa4b 	bl	8007dd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800593e:	bf00      	nop
 8005940:	bd80      	pop	{r7, pc}
 8005942:	bf00      	nop
 8005944:	200007f4 	.word	0x200007f4

08005948 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 800594c:	4802      	ldr	r0, [pc, #8]	; (8005958 <DMA2_Stream7_IRQHandler+0x10>)
 800594e:	f002 fa41 	bl	8007dd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8005952:	bf00      	nop
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	200006b0 	.word	0x200006b0

0800595c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8005960:	4802      	ldr	r0, [pc, #8]	; (800596c <LTDC_IRQHandler+0x10>)
 8005962:	f004 f89d 	bl	8009aa0 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8005966:	bf00      	nop
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	200004a0 	.word	0x200004a0

08005970 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b086      	sub	sp, #24
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005978:	4a14      	ldr	r2, [pc, #80]	; (80059cc <_sbrk+0x5c>)
 800597a:	4b15      	ldr	r3, [pc, #84]	; (80059d0 <_sbrk+0x60>)
 800597c:	1ad3      	subs	r3, r2, r3
 800597e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005984:	4b13      	ldr	r3, [pc, #76]	; (80059d4 <_sbrk+0x64>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d102      	bne.n	8005992 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800598c:	4b11      	ldr	r3, [pc, #68]	; (80059d4 <_sbrk+0x64>)
 800598e:	4a12      	ldr	r2, [pc, #72]	; (80059d8 <_sbrk+0x68>)
 8005990:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005992:	4b10      	ldr	r3, [pc, #64]	; (80059d4 <_sbrk+0x64>)
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4413      	add	r3, r2
 800599a:	693a      	ldr	r2, [r7, #16]
 800599c:	429a      	cmp	r2, r3
 800599e:	d207      	bcs.n	80059b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80059a0:	f00f f83a 	bl	8014a18 <__errno>
 80059a4:	4603      	mov	r3, r0
 80059a6:	220c      	movs	r2, #12
 80059a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80059aa:	f04f 33ff 	mov.w	r3, #4294967295
 80059ae:	e009      	b.n	80059c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80059b0:	4b08      	ldr	r3, [pc, #32]	; (80059d4 <_sbrk+0x64>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80059b6:	4b07      	ldr	r3, [pc, #28]	; (80059d4 <_sbrk+0x64>)
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4413      	add	r3, r2
 80059be:	4a05      	ldr	r2, [pc, #20]	; (80059d4 <_sbrk+0x64>)
 80059c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80059c2:	68fb      	ldr	r3, [r7, #12]
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3718      	adds	r7, #24
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}
 80059cc:	20050000 	.word	0x20050000
 80059d0:	00000800 	.word	0x00000800
 80059d4:	20000eb4 	.word	0x20000eb4
 80059d8:	20009508 	.word	0x20009508

080059dc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80059dc:	b480      	push	{r7}
 80059de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80059e0:	4b06      	ldr	r3, [pc, #24]	; (80059fc <SystemInit+0x20>)
 80059e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059e6:	4a05      	ldr	r2, [pc, #20]	; (80059fc <SystemInit+0x20>)
 80059e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80059ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80059f0:	bf00      	nop
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr
 80059fa:	bf00      	nop
 80059fc:	e000ed00 	.word	0xe000ed00

08005a00 <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b088      	sub	sp, #32
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	607b      	str	r3, [r7, #4]
 8005a08:	4603      	mov	r3, r0
 8005a0a:	81fb      	strh	r3, [r7, #14]
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	81bb      	strh	r3, [r7, #12]
 8005a10:	4613      	mov	r3, r2
 8005a12:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8005a14:	2300      	movs	r3, #0
 8005a16:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 8005a18:	89bb      	ldrh	r3, [r7, #12]
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8005a1e:	89bb      	ldrh	r3, [r7, #12]
 8005a20:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005a24:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 8005a26:	2300      	movs	r3, #0
 8005a28:	837b      	strh	r3, [r7, #26]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8005a2a:	f7fd fa17 	bl	8002e5c <AUDIO_IO_Init>
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 8005a2e:	89fb      	ldrh	r3, [r7, #14]
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	2203      	movs	r2, #3
 8005a34:	f44f 7181 	mov.w	r1, #258	; 0x102
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f001 fc35 	bl	80072a8 <CODEC_IO_Write>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	461a      	mov	r2, r3
 8005a42:	69fb      	ldr	r3, [r7, #28]
 8005a44:	4413      	add	r3, r2
 8005a46:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 8005a48:	89fb      	ldrh	r3, [r7, #14]
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f640 0117 	movw	r1, #2071	; 0x817
 8005a52:	4618      	mov	r0, r3
 8005a54:	f001 fc28 	bl	80072a8 <CODEC_IO_Write>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	4413      	add	r3, r2
 8005a60:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 8005a62:	89fb      	ldrh	r3, [r7, #14]
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	2200      	movs	r2, #0
 8005a68:	f44f 7181 	mov.w	r1, #258	; 0x102
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f001 fc1b 	bl	80072a8 <CODEC_IO_Write>
 8005a72:	4603      	mov	r3, r0
 8005a74:	461a      	mov	r2, r3
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	4413      	add	r3, r2
 8005a7a:	61fb      	str	r3, [r7, #28]

  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 8005a7c:	89fb      	ldrh	r3, [r7, #14]
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	226c      	movs	r2, #108	; 0x6c
 8005a82:	2139      	movs	r1, #57	; 0x39
 8005a84:	4618      	mov	r0, r3
 8005a86:	f001 fc0f 	bl	80072a8 <CODEC_IO_Write>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	4413      	add	r3, r2
 8005a92:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 8005a94:	8afb      	ldrh	r3, [r7, #22]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d00c      	beq.n	8005ab4 <wm8994_Init+0xb4>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 8005a9a:	89fb      	ldrh	r3, [r7, #14]
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	2213      	movs	r2, #19
 8005aa0:	2101      	movs	r1, #1
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f001 fc00 	bl	80072a8 <CODEC_IO_Write>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	461a      	mov	r2, r3
 8005aac:	69fb      	ldr	r3, [r7, #28]
 8005aae:	4413      	add	r3, r2
 8005ab0:	61fb      	str	r3, [r7, #28]
 8005ab2:	e00b      	b.n	8005acc <wm8994_Init+0xcc>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 8005ab4:	89fb      	ldrh	r3, [r7, #14]
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	2203      	movs	r2, #3
 8005aba:	2101      	movs	r1, #1
 8005abc:	4618      	mov	r0, r3
 8005abe:	f001 fbf3 	bl	80072a8 <CODEC_IO_Write>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	4413      	add	r3, r2
 8005aca:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 8005acc:	2032      	movs	r0, #50	; 0x32
 8005ace:	f7fd fa2d 	bl	8002f2c <AUDIO_IO_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 8005ad2:	8b3b      	ldrh	r3, [r7, #24]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	f000 815f 	beq.w	8005d98 <wm8994_Init+0x398>
  {
    outputEnabled = 1;
 8005ada:	4bae      	ldr	r3, [pc, #696]	; (8005d94 <wm8994_Init+0x394>)
 8005adc:	2201      	movs	r2, #1
 8005ade:	601a      	str	r2, [r3, #0]

    switch (output_device)
 8005ae0:	8b3b      	ldrh	r3, [r7, #24]
 8005ae2:	2b03      	cmp	r3, #3
 8005ae4:	f000 808c 	beq.w	8005c00 <wm8994_Init+0x200>
 8005ae8:	2b03      	cmp	r3, #3
 8005aea:	f300 8111 	bgt.w	8005d10 <wm8994_Init+0x310>
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d002      	beq.n	8005af8 <wm8994_Init+0xf8>
 8005af2:	2b02      	cmp	r3, #2
 8005af4:	d042      	beq.n	8005b7c <wm8994_Init+0x17c>
 8005af6:	e10b      	b.n	8005d10 <wm8994_Init+0x310>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8005af8:	89fb      	ldrh	r3, [r7, #14]
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	f640 420c 	movw	r2, #3084	; 0xc0c
 8005b00:	2105      	movs	r1, #5
 8005b02:	4618      	mov	r0, r3
 8005b04:	f001 fbd0 	bl	80072a8 <CODEC_IO_Write>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	4413      	add	r3, r2
 8005b10:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8005b12:	89fb      	ldrh	r3, [r7, #14]
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	2200      	movs	r2, #0
 8005b18:	f240 6101 	movw	r1, #1537	; 0x601
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f001 fbc3 	bl	80072a8 <CODEC_IO_Write>
 8005b22:	4603      	mov	r3, r0
 8005b24:	461a      	mov	r2, r3
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	4413      	add	r3, r2
 8005b2a:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8005b2c:	89fb      	ldrh	r3, [r7, #14]
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	2200      	movs	r2, #0
 8005b32:	f240 6102 	movw	r1, #1538	; 0x602
 8005b36:	4618      	mov	r0, r3
 8005b38:	f001 fbb6 	bl	80072a8 <CODEC_IO_Write>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	461a      	mov	r2, r3
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	4413      	add	r3, r2
 8005b44:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8005b46:	89fb      	ldrh	r3, [r7, #14]
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	2202      	movs	r2, #2
 8005b4c:	f240 6104 	movw	r1, #1540	; 0x604
 8005b50:	4618      	mov	r0, r3
 8005b52:	f001 fba9 	bl	80072a8 <CODEC_IO_Write>
 8005b56:	4603      	mov	r3, r0
 8005b58:	461a      	mov	r2, r3
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	4413      	add	r3, r2
 8005b5e:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8005b60:	89fb      	ldrh	r3, [r7, #14]
 8005b62:	b2db      	uxtb	r3, r3
 8005b64:	2202      	movs	r2, #2
 8005b66:	f240 6105 	movw	r1, #1541	; 0x605
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f001 fb9c 	bl	80072a8 <CODEC_IO_Write>
 8005b70:	4603      	mov	r3, r0
 8005b72:	461a      	mov	r2, r3
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	4413      	add	r3, r2
 8005b78:	61fb      	str	r3, [r7, #28]
      break;
 8005b7a:	e110      	b.n	8005d9e <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8005b7c:	89fb      	ldrh	r3, [r7, #14]
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	f240 3203 	movw	r2, #771	; 0x303
 8005b84:	2105      	movs	r1, #5
 8005b86:	4618      	mov	r0, r3
 8005b88:	f001 fb8e 	bl	80072a8 <CODEC_IO_Write>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	461a      	mov	r2, r3
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	4413      	add	r3, r2
 8005b94:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8005b96:	89fb      	ldrh	r3, [r7, #14]
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f240 6101 	movw	r1, #1537	; 0x601
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f001 fb81 	bl	80072a8 <CODEC_IO_Write>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	461a      	mov	r2, r3
 8005baa:	69fb      	ldr	r3, [r7, #28]
 8005bac:	4413      	add	r3, r2
 8005bae:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8005bb0:	89fb      	ldrh	r3, [r7, #14]
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	f240 6102 	movw	r1, #1538	; 0x602
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f001 fb74 	bl	80072a8 <CODEC_IO_Write>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8005bca:	89fb      	ldrh	r3, [r7, #14]
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f240 6104 	movw	r1, #1540	; 0x604
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f001 fb67 	bl	80072a8 <CODEC_IO_Write>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	461a      	mov	r2, r3
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	4413      	add	r3, r2
 8005be2:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8005be4:	89fb      	ldrh	r3, [r7, #14]
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	2200      	movs	r2, #0
 8005bea:	f240 6105 	movw	r1, #1541	; 0x605
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f001 fb5a 	bl	80072a8 <CODEC_IO_Write>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	61fb      	str	r3, [r7, #28]
      break;
 8005bfe:	e0ce      	b.n	8005d9e <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8005c00:	8afb      	ldrh	r3, [r7, #22]
 8005c02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c06:	d141      	bne.n	8005c8c <wm8994_Init+0x28c>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8005c08:	89fb      	ldrh	r3, [r7, #14]
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	f640 720f 	movw	r2, #3855	; 0xf0f
 8005c10:	2105      	movs	r1, #5
 8005c12:	4618      	mov	r0, r3
 8005c14:	f001 fb48 	bl	80072a8 <CODEC_IO_Write>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	4413      	add	r3, r2
 8005c20:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 8005c22:	89fb      	ldrh	r3, [r7, #14]
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	2203      	movs	r2, #3
 8005c28:	f240 6101 	movw	r1, #1537	; 0x601
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f001 fb3b 	bl	80072a8 <CODEC_IO_Write>
 8005c32:	4603      	mov	r3, r0
 8005c34:	461a      	mov	r2, r3
 8005c36:	69fb      	ldr	r3, [r7, #28]
 8005c38:	4413      	add	r3, r2
 8005c3a:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 8005c3c:	89fb      	ldrh	r3, [r7, #14]
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	2203      	movs	r2, #3
 8005c42:	f240 6102 	movw	r1, #1538	; 0x602
 8005c46:	4618      	mov	r0, r3
 8005c48:	f001 fb2e 	bl	80072a8 <CODEC_IO_Write>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	461a      	mov	r2, r3
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	4413      	add	r3, r2
 8005c54:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 8005c56:	89fb      	ldrh	r3, [r7, #14]
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	2203      	movs	r2, #3
 8005c5c:	f240 6104 	movw	r1, #1540	; 0x604
 8005c60:	4618      	mov	r0, r3
 8005c62:	f001 fb21 	bl	80072a8 <CODEC_IO_Write>
 8005c66:	4603      	mov	r3, r0
 8005c68:	461a      	mov	r2, r3
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 8005c70:	89fb      	ldrh	r3, [r7, #14]
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	2203      	movs	r2, #3
 8005c76:	f240 6105 	movw	r1, #1541	; 0x605
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f001 fb14 	bl	80072a8 <CODEC_IO_Write>
 8005c80:	4603      	mov	r3, r0
 8005c82:	461a      	mov	r2, r3
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	4413      	add	r3, r2
 8005c88:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
        
        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
      }
      break;
 8005c8a:	e088      	b.n	8005d9e <wm8994_Init+0x39e>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8005c8c:	89fb      	ldrh	r3, [r7, #14]
 8005c8e:	b2db      	uxtb	r3, r3
 8005c90:	f640 720f 	movw	r2, #3855	; 0xf0f
 8005c94:	2105      	movs	r1, #5
 8005c96:	4618      	mov	r0, r3
 8005c98:	f001 fb06 	bl	80072a8 <CODEC_IO_Write>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	4413      	add	r3, r2
 8005ca4:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8005ca6:	89fb      	ldrh	r3, [r7, #14]
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	2201      	movs	r2, #1
 8005cac:	f240 6101 	movw	r1, #1537	; 0x601
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f001 faf9 	bl	80072a8 <CODEC_IO_Write>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	461a      	mov	r2, r3
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8005cc0:	89fb      	ldrh	r3, [r7, #14]
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	f240 6102 	movw	r1, #1538	; 0x602
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f001 faec 	bl	80072a8 <CODEC_IO_Write>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	4413      	add	r3, r2
 8005cd8:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8005cda:	89fb      	ldrh	r3, [r7, #14]
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	2202      	movs	r2, #2
 8005ce0:	f240 6104 	movw	r1, #1540	; 0x604
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f001 fadf 	bl	80072a8 <CODEC_IO_Write>
 8005cea:	4603      	mov	r3, r0
 8005cec:	461a      	mov	r2, r3
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	4413      	add	r3, r2
 8005cf2:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 8005cf4:	89fb      	ldrh	r3, [r7, #14]
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	2202      	movs	r2, #2
 8005cfa:	f240 6105 	movw	r1, #1541	; 0x605
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f001 fad2 	bl	80072a8 <CODEC_IO_Write>
 8005d04:	4603      	mov	r3, r0
 8005d06:	461a      	mov	r2, r3
 8005d08:	69fb      	ldr	r3, [r7, #28]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	61fb      	str	r3, [r7, #28]
      break;
 8005d0e:	e046      	b.n	8005d9e <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8005d10:	89fb      	ldrh	r3, [r7, #14]
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	f240 3203 	movw	r2, #771	; 0x303
 8005d18:	2105      	movs	r1, #5
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f001 fac4 	bl	80072a8 <CODEC_IO_Write>
 8005d20:	4603      	mov	r3, r0
 8005d22:	461a      	mov	r2, r3
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	4413      	add	r3, r2
 8005d28:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8005d2a:	89fb      	ldrh	r3, [r7, #14]
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f240 6101 	movw	r1, #1537	; 0x601
 8005d34:	4618      	mov	r0, r3
 8005d36:	f001 fab7 	bl	80072a8 <CODEC_IO_Write>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	4413      	add	r3, r2
 8005d42:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8005d44:	89fb      	ldrh	r3, [r7, #14]
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	2201      	movs	r2, #1
 8005d4a:	f240 6102 	movw	r1, #1538	; 0x602
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f001 faaa 	bl	80072a8 <CODEC_IO_Write>
 8005d54:	4603      	mov	r3, r0
 8005d56:	461a      	mov	r2, r3
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	4413      	add	r3, r2
 8005d5c:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8005d5e:	89fb      	ldrh	r3, [r7, #14]
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	2200      	movs	r2, #0
 8005d64:	f240 6104 	movw	r1, #1540	; 0x604
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f001 fa9d 	bl	80072a8 <CODEC_IO_Write>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	461a      	mov	r2, r3
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	4413      	add	r3, r2
 8005d76:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8005d78:	89fb      	ldrh	r3, [r7, #14]
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f240 6105 	movw	r1, #1541	; 0x605
 8005d82:	4618      	mov	r0, r3
 8005d84:	f001 fa90 	bl	80072a8 <CODEC_IO_Write>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	4413      	add	r3, r2
 8005d90:	61fb      	str	r3, [r7, #28]
      break;
 8005d92:	e004      	b.n	8005d9e <wm8994_Init+0x39e>
 8005d94:	20000eb8 	.word	0x20000eb8
    }
  }
  else
  {
    outputEnabled = 0;
 8005d98:	4ba5      	ldr	r3, [pc, #660]	; (8006030 <wm8994_Init+0x630>)
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 8005d9e:	8afb      	ldrh	r3, [r7, #22]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	f000 81c3 	beq.w	800612c <wm8994_Init+0x72c>
  {
    inputEnabled = 1;
 8005da6:	4ba3      	ldr	r3, [pc, #652]	; (8006034 <wm8994_Init+0x634>)
 8005da8:	2201      	movs	r2, #1
 8005daa:	601a      	str	r2, [r3, #0]
    switch (input_device)
 8005dac:	8afb      	ldrh	r3, [r7, #22]
 8005dae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005db2:	f000 8141 	beq.w	8006038 <wm8994_Init+0x638>
 8005db6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dba:	f300 81b3 	bgt.w	8006124 <wm8994_Init+0x724>
 8005dbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005dc2:	d05a      	beq.n	8005e7a <wm8994_Init+0x47a>
 8005dc4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005dc8:	f300 81ac 	bgt.w	8006124 <wm8994_Init+0x724>
 8005dcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dd0:	f000 80de 	beq.w	8005f90 <wm8994_Init+0x590>
 8005dd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dd8:	f040 81a4 	bne.w	8006124 <wm8994_Init+0x724>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 8005ddc:	89fb      	ldrh	r3, [r7, #14]
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	f44f 6243 	mov.w	r2, #3120	; 0xc30
 8005de4:	2104      	movs	r1, #4
 8005de6:	4618      	mov	r0, r3
 8005de8:	f001 fa5e 	bl	80072a8 <CODEC_IO_Write>
 8005dec:	4603      	mov	r3, r0
 8005dee:	461a      	mov	r2, r3
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	4413      	add	r3, r2
 8005df4:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8005df6:	89fb      	ldrh	r3, [r7, #14]
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	22db      	movs	r2, #219	; 0xdb
 8005dfc:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8005e00:	4618      	mov	r0, r3
 8005e02:	f001 fa51 	bl	80072a8 <CODEC_IO_Write>
 8005e06:	4603      	mov	r3, r0
 8005e08:	461a      	mov	r2, r3
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 8005e10:	89fb      	ldrh	r3, [r7, #14]
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8005e18:	2102      	movs	r1, #2
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f001 fa44 	bl	80072a8 <CODEC_IO_Write>
 8005e20:	4603      	mov	r3, r0
 8005e22:	461a      	mov	r2, r3
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	4413      	add	r3, r2
 8005e28:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8005e2a:	89fb      	ldrh	r3, [r7, #14]
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	2202      	movs	r2, #2
 8005e30:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8005e34:	4618      	mov	r0, r3
 8005e36:	f001 fa37 	bl	80072a8 <CODEC_IO_Write>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	4413      	add	r3, r2
 8005e42:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8005e44:	89fb      	ldrh	r3, [r7, #14]
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	2202      	movs	r2, #2
 8005e4a:	f240 6109 	movw	r1, #1545	; 0x609
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f001 fa2a 	bl	80072a8 <CODEC_IO_Write>
 8005e54:	4603      	mov	r3, r0
 8005e56:	461a      	mov	r2, r3
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 8005e5e:	89fb      	ldrh	r3, [r7, #14]
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	220e      	movs	r2, #14
 8005e64:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f001 fa1d 	bl	80072a8 <CODEC_IO_Write>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	461a      	mov	r2, r3
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	4413      	add	r3, r2
 8005e76:	61fb      	str	r3, [r7, #28]
      break;
 8005e78:	e15b      	b.n	8006132 <wm8994_Init+0x732>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 8005e7a:	89fb      	ldrh	r3, [r7, #14]
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	2211      	movs	r2, #17
 8005e80:	2128      	movs	r1, #40	; 0x28
 8005e82:	4618      	mov	r0, r3
 8005e84:	f001 fa10 	bl	80072a8 <CODEC_IO_Write>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	4413      	add	r3, r2
 8005e90:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1L_TO_MIXINL and +0dB on IN1L PGA output */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0020);
 8005e92:	89fb      	ldrh	r3, [r7, #14]
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	2220      	movs	r2, #32
 8005e98:	2129      	movs	r1, #41	; 0x29
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f001 fa04 	bl	80072a8 <CODEC_IO_Write>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	4413      	add	r3, r2
 8005ea8:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0020);
 8005eaa:	89fb      	ldrh	r3, [r7, #14]
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	2220      	movs	r2, #32
 8005eb0:	212a      	movs	r1, #42	; 0x2a
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f001 f9f8 	bl	80072a8 <CODEC_IO_Write>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	461a      	mov	r2, r3
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	4413      	add	r3, r2
 8005ec0:	61fb      	str	r3, [r7, #28]
      counter += CODEC_IO_Write(DeviceAddr, 0x2B, 0x0000);
 8005ec2:	89fb      	ldrh	r3, [r7, #14]
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	212b      	movs	r1, #43	; 0x2b
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f001 f9ec 	bl	80072a8 <CODEC_IO_Write>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	69fb      	ldr	r3, [r7, #28]
 8005ed6:	4413      	add	r3, r2
 8005ed8:	61fb      	str	r3, [r7, #28]
      counter += CODEC_IO_Write(DeviceAddr, 0x2C, 0x0000);
 8005eda:	89fb      	ldrh	r3, [r7, #14]
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	2200      	movs	r2, #0
 8005ee0:	212c      	movs	r1, #44	; 0x2c
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f001 f9e0 	bl	80072a8 <CODEC_IO_Write>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	461a      	mov	r2, r3
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	4413      	add	r3, r2
 8005ef0:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 8005ef2:	89fb      	ldrh	r3, [r7, #14]
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	f240 3203 	movw	r2, #771	; 0x303
 8005efa:	2104      	movs	r1, #4
 8005efc:	4618      	mov	r0, r3
 8005efe:	f001 f9d3 	bl	80072a8 <CODEC_IO_Write>
 8005f02:	4603      	mov	r3, r0
 8005f04:	461a      	mov	r2, r3
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	4413      	add	r3, r2
 8005f0a:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8005f0c:	89fb      	ldrh	r3, [r7, #14]
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	22db      	movs	r2, #219	; 0xdb
 8005f12:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8005f16:	4618      	mov	r0, r3
 8005f18:	f001 f9c6 	bl	80072a8 <CODEC_IO_Write>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	461a      	mov	r2, r3
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	4413      	add	r3, r2
 8005f24:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8005f26:	89fb      	ldrh	r3, [r7, #14]
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	f246 3250 	movw	r2, #25424	; 0x6350
 8005f2e:	2102      	movs	r1, #2
 8005f30:	4618      	mov	r0, r3
 8005f32:	f001 f9b9 	bl	80072a8 <CODEC_IO_Write>
 8005f36:	4603      	mov	r3, r0
 8005f38:	461a      	mov	r2, r3
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8005f40:	89fb      	ldrh	r3, [r7, #14]
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	2202      	movs	r2, #2
 8005f46:	f240 6106 	movw	r1, #1542	; 0x606
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f001 f9ac 	bl	80072a8 <CODEC_IO_Write>
 8005f50:	4603      	mov	r3, r0
 8005f52:	461a      	mov	r2, r3
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	4413      	add	r3, r2
 8005f58:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8005f5a:	89fb      	ldrh	r3, [r7, #14]
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	2202      	movs	r2, #2
 8005f60:	f240 6107 	movw	r1, #1543	; 0x607
 8005f64:	4618      	mov	r0, r3
 8005f66:	f001 f99f 	bl	80072a8 <CODEC_IO_Write>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	4413      	add	r3, r2
 8005f72:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8005f74:	89fb      	ldrh	r3, [r7, #14]
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	220d      	movs	r2, #13
 8005f7a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f001 f992 	bl	80072a8 <CODEC_IO_Write>
 8005f84:	4603      	mov	r3, r0
 8005f86:	461a      	mov	r2, r3
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	61fb      	str	r3, [r7, #28]
      break;
 8005f8e:	e0d0      	b.n	8006132 <wm8994_Init+0x732>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 8005f90:	89fb      	ldrh	r3, [r7, #14]
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	f44f 7243 	mov.w	r2, #780	; 0x30c
 8005f98:	2104      	movs	r1, #4
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f001 f984 	bl	80072a8 <CODEC_IO_Write>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	4413      	add	r3, r2
 8005fa8:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8005faa:	89fb      	ldrh	r3, [r7, #14]
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	22db      	movs	r2, #219	; 0xdb
 8005fb0:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f001 f977 	bl	80072a8 <CODEC_IO_Write>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	69fb      	ldr	r3, [r7, #28]
 8005fc0:	4413      	add	r3, r2
 8005fc2:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8005fc4:	89fb      	ldrh	r3, [r7, #14]
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	f246 3250 	movw	r2, #25424	; 0x6350
 8005fcc:	2102      	movs	r1, #2
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f001 f96a 	bl	80072a8 <CODEC_IO_Write>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	4413      	add	r3, r2
 8005fdc:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8005fde:	89fb      	ldrh	r3, [r7, #14]
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	2202      	movs	r2, #2
 8005fe4:	f240 6106 	movw	r1, #1542	; 0x606
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f001 f95d 	bl	80072a8 <CODEC_IO_Write>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	4413      	add	r3, r2
 8005ff6:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8005ff8:	89fb      	ldrh	r3, [r7, #14]
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	2202      	movs	r2, #2
 8005ffe:	f240 6107 	movw	r1, #1543	; 0x607
 8006002:	4618      	mov	r0, r3
 8006004:	f001 f950 	bl	80072a8 <CODEC_IO_Write>
 8006008:	4603      	mov	r3, r0
 800600a:	461a      	mov	r2, r3
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	4413      	add	r3, r2
 8006010:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8006012:	89fb      	ldrh	r3, [r7, #14]
 8006014:	b2db      	uxtb	r3, r3
 8006016:	220d      	movs	r2, #13
 8006018:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800601c:	4618      	mov	r0, r3
 800601e:	f001 f943 	bl	80072a8 <CODEC_IO_Write>
 8006022:	4603      	mov	r3, r0
 8006024:	461a      	mov	r2, r3
 8006026:	69fb      	ldr	r3, [r7, #28]
 8006028:	4413      	add	r3, r2
 800602a:	61fb      	str	r3, [r7, #28]
      break; 
 800602c:	e081      	b.n	8006132 <wm8994_Init+0x732>
 800602e:	bf00      	nop
 8006030:	20000eb8 	.word	0x20000eb8
 8006034:	20000ebc 	.word	0x20000ebc
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 8006038:	89fb      	ldrh	r3, [r7, #14]
 800603a:	b2db      	uxtb	r3, r3
 800603c:	f640 723c 	movw	r2, #3900	; 0xf3c
 8006040:	2104      	movs	r1, #4
 8006042:	4618      	mov	r0, r3
 8006044:	f001 f930 	bl	80072a8 <CODEC_IO_Write>
 8006048:	4603      	mov	r3, r0
 800604a:	461a      	mov	r2, r3
 800604c:	69fb      	ldr	r3, [r7, #28]
 800604e:	4413      	add	r3, r2
 8006050:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8006052:	89fb      	ldrh	r3, [r7, #14]
 8006054:	b2db      	uxtb	r3, r3
 8006056:	22db      	movs	r2, #219	; 0xdb
 8006058:	f44f 618a 	mov.w	r1, #1104	; 0x450
 800605c:	4618      	mov	r0, r3
 800605e:	f001 f923 	bl	80072a8 <CODEC_IO_Write>
 8006062:	4603      	mov	r3, r0
 8006064:	461a      	mov	r2, r3
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	4413      	add	r3, r2
 800606a:	61fb      	str	r3, [r7, #28]
      
      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 800606c:	89fb      	ldrh	r3, [r7, #14]
 800606e:	b2db      	uxtb	r3, r3
 8006070:	22db      	movs	r2, #219	; 0xdb
 8006072:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8006076:	4618      	mov	r0, r3
 8006078:	f001 f916 	bl	80072a8 <CODEC_IO_Write>
 800607c:	4603      	mov	r3, r0
 800607e:	461a      	mov	r2, r3
 8006080:	69fb      	ldr	r3, [r7, #28]
 8006082:	4413      	add	r3, r2
 8006084:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 8006086:	89fb      	ldrh	r3, [r7, #14]
 8006088:	b2db      	uxtb	r3, r3
 800608a:	f246 32a0 	movw	r2, #25504	; 0x63a0
 800608e:	2102      	movs	r1, #2
 8006090:	4618      	mov	r0, r3
 8006092:	f001 f909 	bl	80072a8 <CODEC_IO_Write>
 8006096:	4603      	mov	r3, r0
 8006098:	461a      	mov	r2, r3
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	4413      	add	r3, r2
 800609e:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80060a0:	89fb      	ldrh	r3, [r7, #14]
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	2202      	movs	r2, #2
 80060a6:	f240 6106 	movw	r1, #1542	; 0x606
 80060aa:	4618      	mov	r0, r3
 80060ac:	f001 f8fc 	bl	80072a8 <CODEC_IO_Write>
 80060b0:	4603      	mov	r3, r0
 80060b2:	461a      	mov	r2, r3
 80060b4:	69fb      	ldr	r3, [r7, #28]
 80060b6:	4413      	add	r3, r2
 80060b8:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80060ba:	89fb      	ldrh	r3, [r7, #14]
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	2202      	movs	r2, #2
 80060c0:	f240 6107 	movw	r1, #1543	; 0x607
 80060c4:	4618      	mov	r0, r3
 80060c6:	f001 f8ef 	bl	80072a8 <CODEC_IO_Write>
 80060ca:	4603      	mov	r3, r0
 80060cc:	461a      	mov	r2, r3
 80060ce:	69fb      	ldr	r3, [r7, #28]
 80060d0:	4413      	add	r3, r2
 80060d2:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 80060d4:	89fb      	ldrh	r3, [r7, #14]
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	2202      	movs	r2, #2
 80060da:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 80060de:	4618      	mov	r0, r3
 80060e0:	f001 f8e2 	bl	80072a8 <CODEC_IO_Write>
 80060e4:	4603      	mov	r3, r0
 80060e6:	461a      	mov	r2, r3
 80060e8:	69fb      	ldr	r3, [r7, #28]
 80060ea:	4413      	add	r3, r2
 80060ec:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 80060ee:	89fb      	ldrh	r3, [r7, #14]
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	2202      	movs	r2, #2
 80060f4:	f240 6109 	movw	r1, #1545	; 0x609
 80060f8:	4618      	mov	r0, r3
 80060fa:	f001 f8d5 	bl	80072a8 <CODEC_IO_Write>
 80060fe:	4603      	mov	r3, r0
 8006100:	461a      	mov	r2, r3
 8006102:	69fb      	ldr	r3, [r7, #28]
 8006104:	4413      	add	r3, r2
 8006106:	61fb      	str	r3, [r7, #28]
      
      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8006108:	89fb      	ldrh	r3, [r7, #14]
 800610a:	b2db      	uxtb	r3, r3
 800610c:	220d      	movs	r2, #13
 800610e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8006112:	4618      	mov	r0, r3
 8006114:	f001 f8c8 	bl	80072a8 <CODEC_IO_Write>
 8006118:	4603      	mov	r3, r0
 800611a:	461a      	mov	r2, r3
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	4413      	add	r3, r2
 8006120:	61fb      	str	r3, [r7, #28]
      break;    
 8006122:	e006      	b.n	8006132 <wm8994_Init+0x732>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	3301      	adds	r3, #1
 8006128:	61fb      	str	r3, [r7, #28]
      break;
 800612a:	e002      	b.n	8006132 <wm8994_Init+0x732>
    }
  }
  else
  {
    inputEnabled = 0;
 800612c:	4ba4      	ldr	r3, [pc, #656]	; (80063c0 <wm8994_Init+0x9c0>)
 800612e:	2200      	movs	r2, #0
 8006130:	601a      	str	r2, [r3, #0]
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4aa3      	ldr	r2, [pc, #652]	; (80063c4 <wm8994_Init+0x9c4>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d079      	beq.n	800622e <wm8994_Init+0x82e>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4aa1      	ldr	r2, [pc, #644]	; (80063c4 <wm8994_Init+0x9c4>)
 800613e:	4293      	cmp	r3, r2
 8006140:	f200 80ad 	bhi.w	800629e <wm8994_Init+0x89e>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800614a:	4293      	cmp	r3, r2
 800614c:	d061      	beq.n	8006212 <wm8994_Init+0x812>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8006154:	4293      	cmp	r3, r2
 8006156:	f200 80a2 	bhi.w	800629e <wm8994_Init+0x89e>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f64a 4244 	movw	r2, #44100	; 0xac44
 8006160:	4293      	cmp	r3, r2
 8006162:	f000 808e 	beq.w	8006282 <wm8994_Init+0x882>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f64a 4244 	movw	r2, #44100	; 0xac44
 800616c:	4293      	cmp	r3, r2
 800616e:	f200 8096 	bhi.w	800629e <wm8994_Init+0x89e>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8006178:	d03d      	beq.n	80061f6 <wm8994_Init+0x7f6>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8006180:	f200 808d 	bhi.w	800629e <wm8994_Init+0x89e>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f245 6222 	movw	r2, #22050	; 0x5622
 800618a:	4293      	cmp	r3, r2
 800618c:	d06b      	beq.n	8006266 <wm8994_Init+0x866>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f245 6222 	movw	r2, #22050	; 0x5622
 8006194:	4293      	cmp	r3, r2
 8006196:	f200 8082 	bhi.w	800629e <wm8994_Init+0x89e>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80061a0:	d01b      	beq.n	80061da <wm8994_Init+0x7da>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80061a8:	d879      	bhi.n	800629e <wm8994_Init+0x89e>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80061b0:	d005      	beq.n	80061be <wm8994_Init+0x7be>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f642 3211 	movw	r2, #11025	; 0x2b11
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d046      	beq.n	800624a <wm8994_Init+0x84a>
 80061bc:	e06f      	b.n	800629e <wm8994_Init+0x89e>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 80061be:	89fb      	ldrh	r3, [r7, #14]
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	2203      	movs	r2, #3
 80061c4:	f44f 7104 	mov.w	r1, #528	; 0x210
 80061c8:	4618      	mov	r0, r3
 80061ca:	f001 f86d 	bl	80072a8 <CODEC_IO_Write>
 80061ce:	4603      	mov	r3, r0
 80061d0:	461a      	mov	r2, r3
 80061d2:	69fb      	ldr	r3, [r7, #28]
 80061d4:	4413      	add	r3, r2
 80061d6:	61fb      	str	r3, [r7, #28]
    break;
 80061d8:	e06f      	b.n	80062ba <wm8994_Init+0x8ba>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 80061da:	89fb      	ldrh	r3, [r7, #14]
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	2233      	movs	r2, #51	; 0x33
 80061e0:	f44f 7104 	mov.w	r1, #528	; 0x210
 80061e4:	4618      	mov	r0, r3
 80061e6:	f001 f85f 	bl	80072a8 <CODEC_IO_Write>
 80061ea:	4603      	mov	r3, r0
 80061ec:	461a      	mov	r2, r3
 80061ee:	69fb      	ldr	r3, [r7, #28]
 80061f0:	4413      	add	r3, r2
 80061f2:	61fb      	str	r3, [r7, #28]
    break;
 80061f4:	e061      	b.n	80062ba <wm8994_Init+0x8ba>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 80061f6:	89fb      	ldrh	r3, [r7, #14]
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	2263      	movs	r2, #99	; 0x63
 80061fc:	f44f 7104 	mov.w	r1, #528	; 0x210
 8006200:	4618      	mov	r0, r3
 8006202:	f001 f851 	bl	80072a8 <CODEC_IO_Write>
 8006206:	4603      	mov	r3, r0
 8006208:	461a      	mov	r2, r3
 800620a:	69fb      	ldr	r3, [r7, #28]
 800620c:	4413      	add	r3, r2
 800620e:	61fb      	str	r3, [r7, #28]
    break;
 8006210:	e053      	b.n	80062ba <wm8994_Init+0x8ba>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8006212:	89fb      	ldrh	r3, [r7, #14]
 8006214:	b2db      	uxtb	r3, r3
 8006216:	2283      	movs	r2, #131	; 0x83
 8006218:	f44f 7104 	mov.w	r1, #528	; 0x210
 800621c:	4618      	mov	r0, r3
 800621e:	f001 f843 	bl	80072a8 <CODEC_IO_Write>
 8006222:	4603      	mov	r3, r0
 8006224:	461a      	mov	r2, r3
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	4413      	add	r3, r2
 800622a:	61fb      	str	r3, [r7, #28]
    break;
 800622c:	e045      	b.n	80062ba <wm8994_Init+0x8ba>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 800622e:	89fb      	ldrh	r3, [r7, #14]
 8006230:	b2db      	uxtb	r3, r3
 8006232:	22a3      	movs	r2, #163	; 0xa3
 8006234:	f44f 7104 	mov.w	r1, #528	; 0x210
 8006238:	4618      	mov	r0, r3
 800623a:	f001 f835 	bl	80072a8 <CODEC_IO_Write>
 800623e:	4603      	mov	r3, r0
 8006240:	461a      	mov	r2, r3
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	4413      	add	r3, r2
 8006246:	61fb      	str	r3, [r7, #28]
    break;
 8006248:	e037      	b.n	80062ba <wm8994_Init+0x8ba>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 800624a:	89fb      	ldrh	r3, [r7, #14]
 800624c:	b2db      	uxtb	r3, r3
 800624e:	2213      	movs	r2, #19
 8006250:	f44f 7104 	mov.w	r1, #528	; 0x210
 8006254:	4618      	mov	r0, r3
 8006256:	f001 f827 	bl	80072a8 <CODEC_IO_Write>
 800625a:	4603      	mov	r3, r0
 800625c:	461a      	mov	r2, r3
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	4413      	add	r3, r2
 8006262:	61fb      	str	r3, [r7, #28]
    break;
 8006264:	e029      	b.n	80062ba <wm8994_Init+0x8ba>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8006266:	89fb      	ldrh	r3, [r7, #14]
 8006268:	b2db      	uxtb	r3, r3
 800626a:	2243      	movs	r2, #67	; 0x43
 800626c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8006270:	4618      	mov	r0, r3
 8006272:	f001 f819 	bl	80072a8 <CODEC_IO_Write>
 8006276:	4603      	mov	r3, r0
 8006278:	461a      	mov	r2, r3
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	4413      	add	r3, r2
 800627e:	61fb      	str	r3, [r7, #28]
    break;
 8006280:	e01b      	b.n	80062ba <wm8994_Init+0x8ba>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8006282:	89fb      	ldrh	r3, [r7, #14]
 8006284:	b2db      	uxtb	r3, r3
 8006286:	2273      	movs	r2, #115	; 0x73
 8006288:	f44f 7104 	mov.w	r1, #528	; 0x210
 800628c:	4618      	mov	r0, r3
 800628e:	f001 f80b 	bl	80072a8 <CODEC_IO_Write>
 8006292:	4603      	mov	r3, r0
 8006294:	461a      	mov	r2, r3
 8006296:	69fb      	ldr	r3, [r7, #28]
 8006298:	4413      	add	r3, r2
 800629a:	61fb      	str	r3, [r7, #28]
    break; 
 800629c:	e00d      	b.n	80062ba <wm8994_Init+0x8ba>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 800629e:	89fb      	ldrh	r3, [r7, #14]
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	2283      	movs	r2, #131	; 0x83
 80062a4:	f44f 7104 	mov.w	r1, #528	; 0x210
 80062a8:	4618      	mov	r0, r3
 80062aa:	f000 fffd 	bl	80072a8 <CODEC_IO_Write>
 80062ae:	4603      	mov	r3, r0
 80062b0:	461a      	mov	r2, r3
 80062b2:	69fb      	ldr	r3, [r7, #28]
 80062b4:	4413      	add	r3, r2
 80062b6:	61fb      	str	r3, [r7, #28]
    break; 
 80062b8:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80062ba:	8afb      	ldrh	r3, [r7, #22]
 80062bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062c0:	d10e      	bne.n	80062e0 <wm8994_Init+0x8e0>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 80062c2:	89fb      	ldrh	r3, [r7, #14]
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	f244 0218 	movw	r2, #16408	; 0x4018
 80062ca:	f44f 7140 	mov.w	r1, #768	; 0x300
 80062ce:	4618      	mov	r0, r3
 80062d0:	f000 ffea 	bl	80072a8 <CODEC_IO_Write>
 80062d4:	4603      	mov	r3, r0
 80062d6:	461a      	mov	r2, r3
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	4413      	add	r3, r2
 80062dc:	61fb      	str	r3, [r7, #28]
 80062de:	e00d      	b.n	80062fc <wm8994_Init+0x8fc>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 80062e0:	89fb      	ldrh	r3, [r7, #14]
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	f244 0210 	movw	r2, #16400	; 0x4010
 80062e8:	f44f 7140 	mov.w	r1, #768	; 0x300
 80062ec:	4618      	mov	r0, r3
 80062ee:	f000 ffdb 	bl	80072a8 <CODEC_IO_Write>
 80062f2:	4603      	mov	r3, r0
 80062f4:	461a      	mov	r2, r3
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	4413      	add	r3, r2
 80062fa:	61fb      	str	r3, [r7, #28]
  }
  
  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 80062fc:	89fb      	ldrh	r3, [r7, #14]
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	2200      	movs	r2, #0
 8006302:	f240 3102 	movw	r1, #770	; 0x302
 8006306:	4618      	mov	r0, r3
 8006308:	f000 ffce 	bl	80072a8 <CODEC_IO_Write>
 800630c:	4603      	mov	r3, r0
 800630e:	461a      	mov	r2, r3
 8006310:	69fb      	ldr	r3, [r7, #28]
 8006312:	4413      	add	r3, r2
 8006314:	61fb      	str	r3, [r7, #28]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 8006316:	89fb      	ldrh	r3, [r7, #14]
 8006318:	b2db      	uxtb	r3, r3
 800631a:	220a      	movs	r2, #10
 800631c:	f44f 7102 	mov.w	r1, #520	; 0x208
 8006320:	4618      	mov	r0, r3
 8006322:	f000 ffc1 	bl	80072a8 <CODEC_IO_Write>
 8006326:	4603      	mov	r3, r0
 8006328:	461a      	mov	r2, r3
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	4413      	add	r3, r2
 800632e:	61fb      	str	r3, [r7, #28]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 8006330:	89fb      	ldrh	r3, [r7, #14]
 8006332:	b2db      	uxtb	r3, r3
 8006334:	2201      	movs	r2, #1
 8006336:	f44f 7100 	mov.w	r1, #512	; 0x200
 800633a:	4618      	mov	r0, r3
 800633c:	f000 ffb4 	bl	80072a8 <CODEC_IO_Write>
 8006340:	4603      	mov	r3, r0
 8006342:	461a      	mov	r2, r3
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	4413      	add	r3, r2
 8006348:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 800634a:	8b3b      	ldrh	r3, [r7, #24]
 800634c:	2b00      	cmp	r3, #0
 800634e:	f000 817b 	beq.w	8006648 <wm8994_Init+0xc48>
  {
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 8006352:	8b3b      	ldrh	r3, [r7, #24]
 8006354:	2b02      	cmp	r3, #2
 8006356:	d157      	bne.n	8006408 <wm8994_Init+0xa08>
    {      
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0100);
 8006358:	89fb      	ldrh	r3, [r7, #14]
 800635a:	b2db      	uxtb	r3, r3
 800635c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006360:	212d      	movs	r1, #45	; 0x2d
 8006362:	4618      	mov	r0, r3
 8006364:	f000 ffa0 	bl	80072a8 <CODEC_IO_Write>
 8006368:	4603      	mov	r3, r0
 800636a:	461a      	mov	r2, r3
 800636c:	69fb      	ldr	r3, [r7, #28]
 800636e:	4413      	add	r3, r2
 8006370:	61fb      	str	r3, [r7, #28]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0100);    
 8006372:	89fb      	ldrh	r3, [r7, #14]
 8006374:	b2db      	uxtb	r3, r3
 8006376:	f44f 7280 	mov.w	r2, #256	; 0x100
 800637a:	212e      	movs	r1, #46	; 0x2e
 800637c:	4618      	mov	r0, r3
 800637e:	f000 ff93 	bl	80072a8 <CODEC_IO_Write>
 8006382:	4603      	mov	r3, r0
 8006384:	461a      	mov	r2, r3
 8006386:	69fb      	ldr	r3, [r7, #28]
 8006388:	4413      	add	r3, r2
 800638a:	61fb      	str	r3, [r7, #28]
            
      /* Startup sequence for Headphone */
      if(ColdStartup)
 800638c:	4b0e      	ldr	r3, [pc, #56]	; (80063c8 <wm8994_Init+0x9c8>)
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d01b      	beq.n	80063cc <wm8994_Init+0x9cc>
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8100);
 8006394:	89fb      	ldrh	r3, [r7, #14]
 8006396:	b2db      	uxtb	r3, r3
 8006398:	f44f 4201 	mov.w	r2, #33024	; 0x8100
 800639c:	f44f 7188 	mov.w	r1, #272	; 0x110
 80063a0:	4618      	mov	r0, r3
 80063a2:	f000 ff81 	bl	80072a8 <CODEC_IO_Write>
 80063a6:	4603      	mov	r3, r0
 80063a8:	461a      	mov	r2, r3
 80063aa:	69fb      	ldr	r3, [r7, #28]
 80063ac:	4413      	add	r3, r2
 80063ae:	61fb      	str	r3, [r7, #28]
        
        ColdStartup=0;
 80063b0:	4b05      	ldr	r3, [pc, #20]	; (80063c8 <wm8994_Init+0x9c8>)
 80063b2:	2200      	movs	r2, #0
 80063b4:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        AUDIO_IO_Delay(300);
 80063b6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80063ba:	f7fc fdb7 	bl	8002f2c <AUDIO_IO_Delay>
 80063be:	e016      	b.n	80063ee <wm8994_Init+0x9ee>
 80063c0:	20000ebc 	.word	0x20000ebc
 80063c4:	00017700 	.word	0x00017700
 80063c8:	200000e4 	.word	0x200000e4
      }
      else /* Headphone Warm Start-Up */
      { 
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8108);
 80063cc:	89fb      	ldrh	r3, [r7, #14]
 80063ce:	b2db      	uxtb	r3, r3
 80063d0:	f248 1208 	movw	r2, #33032	; 0x8108
 80063d4:	f44f 7188 	mov.w	r1, #272	; 0x110
 80063d8:	4618      	mov	r0, r3
 80063da:	f000 ff65 	bl	80072a8 <CODEC_IO_Write>
 80063de:	4603      	mov	r3, r0
 80063e0:	461a      	mov	r2, r3
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	4413      	add	r3, r2
 80063e6:	61fb      	str	r3, [r7, #28]
        /* Add Delay */
        AUDIO_IO_Delay(50);
 80063e8:	2032      	movs	r0, #50	; 0x32
 80063ea:	f7fc fd9f 	bl	8002f2c <AUDIO_IO_Delay>
      }

      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 80063ee:	89fb      	ldrh	r3, [r7, #14]
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	2200      	movs	r2, #0
 80063f4:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80063f8:	4618      	mov	r0, r3
 80063fa:	f000 ff55 	bl	80072a8 <CODEC_IO_Write>
 80063fe:	4603      	mov	r3, r0
 8006400:	461a      	mov	r2, r3
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	4413      	add	r3, r2
 8006406:	61fb      	str	r3, [r7, #28]
    }
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 8006408:	89fb      	ldrh	r3, [r7, #14]
 800640a:	b2db      	uxtb	r3, r3
 800640c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8006410:	2103      	movs	r1, #3
 8006412:	4618      	mov	r0, r3
 8006414:	f000 ff48 	bl	80072a8 <CODEC_IO_Write>
 8006418:	4603      	mov	r3, r0
 800641a:	461a      	mov	r2, r3
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	4413      	add	r3, r2
 8006420:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 8006422:	89fb      	ldrh	r3, [r7, #14]
 8006424:	b2db      	uxtb	r3, r3
 8006426:	2200      	movs	r2, #0
 8006428:	2122      	movs	r1, #34	; 0x22
 800642a:	4618      	mov	r0, r3
 800642c:	f000 ff3c 	bl	80072a8 <CODEC_IO_Write>
 8006430:	4603      	mov	r3, r0
 8006432:	461a      	mov	r2, r3
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	4413      	add	r3, r2
 8006438:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 800643a:	89fb      	ldrh	r3, [r7, #14]
 800643c:	b2db      	uxtb	r3, r3
 800643e:	2200      	movs	r2, #0
 8006440:	2123      	movs	r1, #35	; 0x23
 8006442:	4618      	mov	r0, r3
 8006444:	f000 ff30 	bl	80072a8 <CODEC_IO_Write>
 8006448:	4603      	mov	r3, r0
 800644a:	461a      	mov	r2, r3
 800644c:	69fb      	ldr	r3, [r7, #28]
 800644e:	4413      	add	r3, r2
 8006450:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 8006452:	89fb      	ldrh	r3, [r7, #14]
 8006454:	b2db      	uxtb	r3, r3
 8006456:	f44f 7240 	mov.w	r2, #768	; 0x300
 800645a:	2136      	movs	r1, #54	; 0x36
 800645c:	4618      	mov	r0, r3
 800645e:	f000 ff23 	bl	80072a8 <CODEC_IO_Write>
 8006462:	4603      	mov	r3, r0
 8006464:	461a      	mov	r2, r3
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	4413      	add	r3, r2
 800646a:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 800646c:	89fb      	ldrh	r3, [r7, #14]
 800646e:	b2db      	uxtb	r3, r3
 8006470:	f243 0203 	movw	r2, #12291	; 0x3003
 8006474:	2101      	movs	r1, #1
 8006476:	4618      	mov	r0, r3
 8006478:	f000 ff16 	bl	80072a8 <CODEC_IO_Write>
 800647c:	4603      	mov	r3, r0
 800647e:	461a      	mov	r2, r3
 8006480:	69fb      	ldr	r3, [r7, #28]
 8006482:	4413      	add	r3, r2
 8006484:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8006486:	8afb      	ldrh	r3, [r7, #22]
 8006488:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800648c:	d10d      	bne.n	80064aa <wm8994_Init+0xaaa>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 800648e:	89fb      	ldrh	r3, [r7, #14]
 8006490:	b2db      	uxtb	r3, r3
 8006492:	f240 2205 	movw	r2, #517	; 0x205
 8006496:	2151      	movs	r1, #81	; 0x51
 8006498:	4618      	mov	r0, r3
 800649a:	f000 ff05 	bl	80072a8 <CODEC_IO_Write>
 800649e:	4603      	mov	r3, r0
 80064a0:	461a      	mov	r2, r3
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	4413      	add	r3, r2
 80064a6:	61fb      	str	r3, [r7, #28]
 80064a8:	e00b      	b.n	80064c2 <wm8994_Init+0xac2>
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 80064aa:	89fb      	ldrh	r3, [r7, #14]
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	2205      	movs	r2, #5
 80064b0:	2151      	movs	r1, #81	; 0x51
 80064b2:	4618      	mov	r0, r3
 80064b4:	f000 fef8 	bl	80072a8 <CODEC_IO_Write>
 80064b8:	4603      	mov	r3, r0
 80064ba:	461a      	mov	r2, r3
 80064bc:	69fb      	ldr	r3, [r7, #28]
 80064be:	4413      	add	r3, r2
 80064c0:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 80064c2:	8b7b      	ldrh	r3, [r7, #26]
 80064c4:	f443 534c 	orr.w	r3, r3, #13056	; 0x3300
 80064c8:	f043 0303 	orr.w	r3, r3, #3
 80064cc:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 80064ce:	89fb      	ldrh	r3, [r7, #14]
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	8b7a      	ldrh	r2, [r7, #26]
 80064d4:	2101      	movs	r1, #1
 80064d6:	4618      	mov	r0, r3
 80064d8:	f000 fee6 	bl	80072a8 <CODEC_IO_Write>
 80064dc:	4603      	mov	r3, r0
 80064de:	461a      	mov	r2, r3
 80064e0:	69fb      	ldr	r3, [r7, #28]
 80064e2:	4413      	add	r3, r2
 80064e4:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 80064e6:	89fb      	ldrh	r3, [r7, #14]
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	2222      	movs	r2, #34	; 0x22
 80064ec:	2160      	movs	r1, #96	; 0x60
 80064ee:	4618      	mov	r0, r3
 80064f0:	f000 feda 	bl	80072a8 <CODEC_IO_Write>
 80064f4:	4603      	mov	r3, r0
 80064f6:	461a      	mov	r2, r3
 80064f8:	69fb      	ldr	r3, [r7, #28]
 80064fa:	4413      	add	r3, r2
 80064fc:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 80064fe:	89fb      	ldrh	r3, [r7, #14]
 8006500:	b2db      	uxtb	r3, r3
 8006502:	f649 7225 	movw	r2, #40741	; 0x9f25
 8006506:	214c      	movs	r1, #76	; 0x4c
 8006508:	4618      	mov	r0, r3
 800650a:	f000 fecd 	bl	80072a8 <CODEC_IO_Write>
 800650e:	4603      	mov	r3, r0
 8006510:	461a      	mov	r2, r3
 8006512:	69fb      	ldr	r3, [r7, #28]
 8006514:	4413      	add	r3, r2
 8006516:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(15);
 8006518:	200f      	movs	r0, #15
 800651a:	f7fc fd07 	bl	8002f2c <AUDIO_IO_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 800651e:	89fb      	ldrh	r3, [r7, #14]
 8006520:	b2db      	uxtb	r3, r3
 8006522:	2201      	movs	r2, #1
 8006524:	212d      	movs	r1, #45	; 0x2d
 8006526:	4618      	mov	r0, r3
 8006528:	f000 febe 	bl	80072a8 <CODEC_IO_Write>
 800652c:	4603      	mov	r3, r0
 800652e:	461a      	mov	r2, r3
 8006530:	69fb      	ldr	r3, [r7, #28]
 8006532:	4413      	add	r3, r2
 8006534:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 8006536:	89fb      	ldrh	r3, [r7, #14]
 8006538:	b2db      	uxtb	r3, r3
 800653a:	2201      	movs	r2, #1
 800653c:	212e      	movs	r1, #46	; 0x2e
 800653e:	4618      	mov	r0, r3
 8006540:	f000 feb2 	bl	80072a8 <CODEC_IO_Write>
 8006544:	4603      	mov	r3, r0
 8006546:	461a      	mov	r2, r3
 8006548:	69fb      	ldr	r3, [r7, #28]
 800654a:	4413      	add	r3, r2
 800654c:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 800654e:	89fb      	ldrh	r3, [r7, #14]
 8006550:	b2db      	uxtb	r3, r3
 8006552:	f44f 724c 	mov.w	r2, #816	; 0x330
 8006556:	2103      	movs	r1, #3
 8006558:	4618      	mov	r0, r3
 800655a:	f000 fea5 	bl	80072a8 <CODEC_IO_Write>
 800655e:	4603      	mov	r3, r0
 8006560:	461a      	mov	r2, r3
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	4413      	add	r3, r2
 8006566:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 8006568:	89fb      	ldrh	r3, [r7, #14]
 800656a:	b2db      	uxtb	r3, r3
 800656c:	2233      	movs	r2, #51	; 0x33
 800656e:	2154      	movs	r1, #84	; 0x54
 8006570:	4618      	mov	r0, r3
 8006572:	f000 fe99 	bl	80072a8 <CODEC_IO_Write>
 8006576:	4603      	mov	r3, r0
 8006578:	461a      	mov	r2, r3
 800657a:	69fb      	ldr	r3, [r7, #28]
 800657c:	4413      	add	r3, r2
 800657e:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(257);
 8006580:	f240 1001 	movw	r0, #257	; 0x101
 8006584:	f7fc fcd2 	bl	8002f2c <AUDIO_IO_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 8006588:	89fb      	ldrh	r3, [r7, #14]
 800658a:	b2db      	uxtb	r3, r3
 800658c:	22ee      	movs	r2, #238	; 0xee
 800658e:	2160      	movs	r1, #96	; 0x60
 8006590:	4618      	mov	r0, r3
 8006592:	f000 fe89 	bl	80072a8 <CODEC_IO_Write>
 8006596:	4603      	mov	r3, r0
 8006598:	461a      	mov	r2, r3
 800659a:	69fb      	ldr	r3, [r7, #28]
 800659c:	4413      	add	r3, r2
 800659e:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 80065a0:	89fb      	ldrh	r3, [r7, #14]
 80065a2:	b2db      	uxtb	r3, r3
 80065a4:	22c0      	movs	r2, #192	; 0xc0
 80065a6:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 80065aa:	4618      	mov	r0, r3
 80065ac:	f000 fe7c 	bl	80072a8 <CODEC_IO_Write>
 80065b0:	4603      	mov	r3, r0
 80065b2:	461a      	mov	r2, r3
 80065b4:	69fb      	ldr	r3, [r7, #28]
 80065b6:	4413      	add	r3, r2
 80065b8:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 80065ba:	89fb      	ldrh	r3, [r7, #14]
 80065bc:	b2db      	uxtb	r3, r3
 80065be:	22c0      	movs	r2, #192	; 0xc0
 80065c0:	f240 6111 	movw	r1, #1553	; 0x611
 80065c4:	4618      	mov	r0, r3
 80065c6:	f000 fe6f 	bl	80072a8 <CODEC_IO_Write>
 80065ca:	4603      	mov	r3, r0
 80065cc:	461a      	mov	r2, r3
 80065ce:	69fb      	ldr	r3, [r7, #28]
 80065d0:	4413      	add	r3, r2
 80065d2:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 80065d4:	89fb      	ldrh	r3, [r7, #14]
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	2210      	movs	r2, #16
 80065da:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80065de:	4618      	mov	r0, r3
 80065e0:	f000 fe62 	bl	80072a8 <CODEC_IO_Write>
 80065e4:	4603      	mov	r3, r0
 80065e6:	461a      	mov	r2, r3
 80065e8:	69fb      	ldr	r3, [r7, #28]
 80065ea:	4413      	add	r3, r2
 80065ec:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 80065ee:	89fb      	ldrh	r3, [r7, #14]
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	22c0      	movs	r2, #192	; 0xc0
 80065f4:	f240 6112 	movw	r1, #1554	; 0x612
 80065f8:	4618      	mov	r0, r3
 80065fa:	f000 fe55 	bl	80072a8 <CODEC_IO_Write>
 80065fe:	4603      	mov	r3, r0
 8006600:	461a      	mov	r2, r3
 8006602:	69fb      	ldr	r3, [r7, #28]
 8006604:	4413      	add	r3, r2
 8006606:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 8006608:	89fb      	ldrh	r3, [r7, #14]
 800660a:	b2db      	uxtb	r3, r3
 800660c:	22c0      	movs	r2, #192	; 0xc0
 800660e:	f240 6113 	movw	r1, #1555	; 0x613
 8006612:	4618      	mov	r0, r3
 8006614:	f000 fe48 	bl	80072a8 <CODEC_IO_Write>
 8006618:	4603      	mov	r3, r0
 800661a:	461a      	mov	r2, r3
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	4413      	add	r3, r2
 8006620:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8006622:	89fb      	ldrh	r3, [r7, #14]
 8006624:	b2db      	uxtb	r3, r3
 8006626:	2210      	movs	r2, #16
 8006628:	f240 4122 	movw	r1, #1058	; 0x422
 800662c:	4618      	mov	r0, r3
 800662e:	f000 fe3b 	bl	80072a8 <CODEC_IO_Write>
 8006632:	4603      	mov	r3, r0
 8006634:	461a      	mov	r2, r3
 8006636:	69fb      	ldr	r3, [r7, #28]
 8006638:	4413      	add	r3, r2
 800663a:	61fb      	str	r3, [r7, #28]
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 800663c:	7afa      	ldrb	r2, [r7, #11]
 800663e:	89fb      	ldrh	r3, [r7, #14]
 8006640:	4611      	mov	r1, r2
 8006642:	4618      	mov	r0, r3
 8006644:	f000 f984 	bl	8006950 <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 8006648:	8afb      	ldrh	r3, [r7, #22]
 800664a:	2b00      	cmp	r3, #0
 800664c:	f000 80a6 	beq.w	800679c <wm8994_Init+0xd9c>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8006650:	8afb      	ldrh	r3, [r7, #22]
 8006652:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006656:	d003      	beq.n	8006660 <wm8994_Init+0xc60>
 8006658:	8afb      	ldrh	r3, [r7, #22]
 800665a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800665e:	d12b      	bne.n	80066b8 <wm8994_Init+0xcb8>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8006660:	8b7b      	ldrh	r3, [r7, #26]
 8006662:	f043 0313 	orr.w	r3, r3, #19
 8006666:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8006668:	89fb      	ldrh	r3, [r7, #14]
 800666a:	b2db      	uxtb	r3, r3
 800666c:	8b7a      	ldrh	r2, [r7, #26]
 800666e:	2101      	movs	r1, #1
 8006670:	4618      	mov	r0, r3
 8006672:	f000 fe19 	bl	80072a8 <CODEC_IO_Write>
 8006676:	4603      	mov	r3, r0
 8006678:	461a      	mov	r2, r3
 800667a:	69fb      	ldr	r3, [r7, #28]
 800667c:	4413      	add	r3, r2
 800667e:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8006680:	89fb      	ldrh	r3, [r7, #14]
 8006682:	b2db      	uxtb	r3, r3
 8006684:	2202      	movs	r2, #2
 8006686:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 800668a:	4618      	mov	r0, r3
 800668c:	f000 fe0c 	bl	80072a8 <CODEC_IO_Write>
 8006690:	4603      	mov	r3, r0
 8006692:	461a      	mov	r2, r3
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	4413      	add	r3, r2
 8006698:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 800669a:	89fb      	ldrh	r3, [r7, #14]
 800669c:	b2db      	uxtb	r3, r3
 800669e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80066a2:	f240 4111 	movw	r1, #1041	; 0x411
 80066a6:	4618      	mov	r0, r3
 80066a8:	f000 fdfe 	bl	80072a8 <CODEC_IO_Write>
 80066ac:	4603      	mov	r3, r0
 80066ae:	461a      	mov	r2, r3
 80066b0:	69fb      	ldr	r3, [r7, #28]
 80066b2:	4413      	add	r3, r2
 80066b4:	61fb      	str	r3, [r7, #28]
 80066b6:	e06b      	b.n	8006790 <wm8994_Init+0xd90>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80066b8:	8afb      	ldrh	r3, [r7, #22]
 80066ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066be:	d139      	bne.n	8006734 <wm8994_Init+0xd34>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 80066c0:	8b7b      	ldrh	r3, [r7, #26]
 80066c2:	f043 0313 	orr.w	r3, r3, #19
 80066c6:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 80066c8:	89fb      	ldrh	r3, [r7, #14]
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	8b7a      	ldrh	r2, [r7, #26]
 80066ce:	2101      	movs	r1, #1
 80066d0:	4618      	mov	r0, r3
 80066d2:	f000 fde9 	bl	80072a8 <CODEC_IO_Write>
 80066d6:	4603      	mov	r3, r0
 80066d8:	461a      	mov	r2, r3
 80066da:	69fb      	ldr	r3, [r7, #28]
 80066dc:	4413      	add	r3, r2
 80066de:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 80066e0:	89fb      	ldrh	r3, [r7, #14]
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	2202      	movs	r2, #2
 80066e6:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 80066ea:	4618      	mov	r0, r3
 80066ec:	f000 fddc 	bl	80072a8 <CODEC_IO_Write>
 80066f0:	4603      	mov	r3, r0
 80066f2:	461a      	mov	r2, r3
 80066f4:	69fb      	ldr	r3, [r7, #28]
 80066f6:	4413      	add	r3, r2
 80066f8:	61fb      	str	r3, [r7, #28]
    
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 80066fa:	89fb      	ldrh	r3, [r7, #14]
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8006702:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8006706:	4618      	mov	r0, r3
 8006708:	f000 fdce 	bl	80072a8 <CODEC_IO_Write>
 800670c:	4603      	mov	r3, r0
 800670e:	461a      	mov	r2, r3
 8006710:	69fb      	ldr	r3, [r7, #28]
 8006712:	4413      	add	r3, r2
 8006714:	61fb      	str	r3, [r7, #28]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 8006716:	89fb      	ldrh	r3, [r7, #14]
 8006718:	b2db      	uxtb	r3, r3
 800671a:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 800671e:	f240 4111 	movw	r1, #1041	; 0x411
 8006722:	4618      	mov	r0, r3
 8006724:	f000 fdc0 	bl	80072a8 <CODEC_IO_Write>
 8006728:	4603      	mov	r3, r0
 800672a:	461a      	mov	r2, r3
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	4413      	add	r3, r2
 8006730:	61fb      	str	r3, [r7, #28]
 8006732:	e02d      	b.n	8006790 <wm8994_Init+0xd90>
    }    
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 8006734:	8afb      	ldrh	r3, [r7, #22]
 8006736:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800673a:	d003      	beq.n	8006744 <wm8994_Init+0xd44>
 800673c:	8afb      	ldrh	r3, [r7, #22]
 800673e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006742:	d125      	bne.n	8006790 <wm8994_Init+0xd90>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x008B);
 8006744:	89fb      	ldrh	r3, [r7, #14]
 8006746:	b2db      	uxtb	r3, r3
 8006748:	228b      	movs	r2, #139	; 0x8b
 800674a:	2118      	movs	r1, #24
 800674c:	4618      	mov	r0, r3
 800674e:	f000 fdab 	bl	80072a8 <CODEC_IO_Write>
 8006752:	4603      	mov	r3, r0
 8006754:	461a      	mov	r2, r3
 8006756:	69fb      	ldr	r3, [r7, #28]
 8006758:	4413      	add	r3, r2
 800675a:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x008B);
 800675c:	89fb      	ldrh	r3, [r7, #14]
 800675e:	b2db      	uxtb	r3, r3
 8006760:	228b      	movs	r2, #139	; 0x8b
 8006762:	211a      	movs	r1, #26
 8006764:	4618      	mov	r0, r3
 8006766:	f000 fd9f 	bl	80072a8 <CODEC_IO_Write>
 800676a:	4603      	mov	r3, r0
 800676c:	461a      	mov	r2, r3
 800676e:	69fb      	ldr	r3, [r7, #28]
 8006770:	4413      	add	r3, r2
 8006772:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8006774:	89fb      	ldrh	r3, [r7, #14]
 8006776:	b2db      	uxtb	r3, r3
 8006778:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 800677c:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8006780:	4618      	mov	r0, r3
 8006782:	f000 fd91 	bl	80072a8 <CODEC_IO_Write>
 8006786:	4603      	mov	r3, r0
 8006788:	461a      	mov	r2, r3
 800678a:	69fb      	ldr	r3, [r7, #28]
 800678c:	4413      	add	r3, r2
 800678e:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8006790:	7afa      	ldrb	r2, [r7, #11]
 8006792:	89fb      	ldrh	r3, [r7, #14]
 8006794:	4611      	mov	r1, r2
 8006796:	4618      	mov	r0, r3
 8006798:	f000 f8da 	bl	8006950 <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;  
 800679c:	69fb      	ldr	r3, [r7, #28]
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3720      	adds	r7, #32
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	bf00      	nop

080067a8 <wm8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void wm8994_DeInit(void)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 80067ac:	f7fc fb60 	bl	8002e70 <AUDIO_IO_DeInit>
}
 80067b0:	bf00      	nop
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID 
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	4603      	mov	r3, r0
 80067bc:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 80067be:	f7fc fb4d 	bl	8002e5c <AUDIO_IO_Init>

  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 80067c2:	88fb      	ldrh	r3, [r7, #6]
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	2100      	movs	r1, #0
 80067c8:	4618      	mov	r0, r3
 80067ca:	f7fc fb83 	bl	8002ed4 <AUDIO_IO_Read>
 80067ce:	4603      	mov	r3, r0
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3708      	adds	r7, #8
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <wm8994_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	4603      	mov	r3, r0
 80067e0:	6039      	str	r1, [r7, #0]
 80067e2:	80fb      	strh	r3, [r7, #6]
 80067e4:	4613      	mov	r3, r2
 80067e6:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 80067e8:	2300      	movs	r3, #0
 80067ea:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80067ec:	88fb      	ldrh	r3, [r7, #6]
 80067ee:	2100      	movs	r1, #0
 80067f0:	4618      	mov	r0, r3
 80067f2:	f000 faf3 	bl	8006ddc <wm8994_SetMute>
 80067f6:	4602      	mov	r2, r0
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	4413      	add	r3, r2
 80067fc:	60fb      	str	r3, [r7, #12]
  
  return counter;
 80067fe:	68fb      	ldr	r3, [r7, #12]
}
 8006800:	4618      	mov	r0, r3
 8006802:	3710      	adds	r7, #16
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}

08006808 <wm8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Pause(uint16_t DeviceAddr)
{  
 8006808:	b580      	push	{r7, lr}
 800680a:	b084      	sub	sp, #16
 800680c:	af00      	add	r7, sp, #0
 800680e:	4603      	mov	r3, r0
 8006810:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8006812:	2300      	movs	r3, #0
 8006814:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8006816:	88fb      	ldrh	r3, [r7, #6]
 8006818:	2101      	movs	r1, #1
 800681a:	4618      	mov	r0, r3
 800681c:	f000 fade 	bl	8006ddc <wm8994_SetMute>
 8006820:	4602      	mov	r2, r0
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	4413      	add	r3, r2
 8006826:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 8006828:	88fb      	ldrh	r3, [r7, #6]
 800682a:	b2db      	uxtb	r3, r3
 800682c:	2201      	movs	r2, #1
 800682e:	2102      	movs	r1, #2
 8006830:	4618      	mov	r0, r3
 8006832:	f000 fd39 	bl	80072a8 <CODEC_IO_Write>
 8006836:	4603      	mov	r3, r0
 8006838:	461a      	mov	r2, r3
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	4413      	add	r3, r2
 800683e:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8006840:	68fb      	ldr	r3, [r7, #12]
}
 8006842:	4618      	mov	r0, r3
 8006844:	3710      	adds	r7, #16
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}

0800684a <wm8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Resume(uint16_t DeviceAddr)
{
 800684a:	b580      	push	{r7, lr}
 800684c:	b084      	sub	sp, #16
 800684e:	af00      	add	r7, sp, #0
 8006850:	4603      	mov	r3, r0
 8006852:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8006854:	2300      	movs	r3, #0
 8006856:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8006858:	88fb      	ldrh	r3, [r7, #6]
 800685a:	2100      	movs	r1, #0
 800685c:	4618      	mov	r0, r3
 800685e:	f000 fabd 	bl	8006ddc <wm8994_SetMute>
 8006862:	4602      	mov	r2, r0
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	4413      	add	r3, r2
 8006868:	60fb      	str	r3, [r7, #12]
  
  return counter;
 800686a:	68fb      	ldr	r3, [r7, #12]
}
 800686c:	4618      	mov	r0, r3
 800686e:	3710      	adds	r7, #16
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <wm8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b084      	sub	sp, #16
 8006878:	af00      	add	r7, sp, #0
 800687a:	4603      	mov	r3, r0
 800687c:	6039      	str	r1, [r7, #0]
 800687e:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8006880:	2300      	movs	r3, #0
 8006882:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 8006884:	4b31      	ldr	r3, [pc, #196]	; (800694c <wm8994_Stop+0xd8>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d05a      	beq.n	8006942 <wm8994_Stop+0xce>
  {
    /* Mute the output first */
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800688c:	88fb      	ldrh	r3, [r7, #6]
 800688e:	2101      	movs	r1, #1
 8006890:	4618      	mov	r0, r3
 8006892:	f000 faa3 	bl	8006ddc <wm8994_SetMute>
 8006896:	4602      	mov	r2, r0
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	4413      	add	r3, r2
 800689c:	60fb      	str	r3, [r7, #12]

    if (CodecPdwnMode == CODEC_PDWN_SW)
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	2b02      	cmp	r3, #2
 80068a2:	d04e      	beq.n	8006942 <wm8994_Stop+0xce>
      /* Only output mute required*/
    }
    else /* CODEC_PDWN_HW */
    {
      /* Mute the AIF1 Timeslot 0 DAC1 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 80068a4:	88fb      	ldrh	r3, [r7, #6]
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068ac:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80068b0:	4618      	mov	r0, r3
 80068b2:	f000 fcf9 	bl	80072a8 <CODEC_IO_Write>
 80068b6:	4603      	mov	r3, r0
 80068b8:	461a      	mov	r2, r3
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	4413      	add	r3, r2
 80068be:	60fb      	str	r3, [r7, #12]

      /* Mute the AIF1 Timeslot 1 DAC2 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 80068c0:	88fb      	ldrh	r3, [r7, #6]
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068c8:	f240 4122 	movw	r1, #1058	; 0x422
 80068cc:	4618      	mov	r0, r3
 80068ce:	f000 fceb 	bl	80072a8 <CODEC_IO_Write>
 80068d2:	4603      	mov	r3, r0
 80068d4:	461a      	mov	r2, r3
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	4413      	add	r3, r2
 80068da:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1L_TO_HPOUT1L */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 80068dc:	88fb      	ldrh	r3, [r7, #6]
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	2200      	movs	r2, #0
 80068e2:	212d      	movs	r1, #45	; 0x2d
 80068e4:	4618      	mov	r0, r3
 80068e6:	f000 fcdf 	bl	80072a8 <CODEC_IO_Write>
 80068ea:	4603      	mov	r3, r0
 80068ec:	461a      	mov	r2, r3
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	4413      	add	r3, r2
 80068f2:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1R_TO_HPOUT1R */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 80068f4:	88fb      	ldrh	r3, [r7, #6]
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	2200      	movs	r2, #0
 80068fa:	212e      	movs	r1, #46	; 0x2e
 80068fc:	4618      	mov	r0, r3
 80068fe:	f000 fcd3 	bl	80072a8 <CODEC_IO_Write>
 8006902:	4603      	mov	r3, r0
 8006904:	461a      	mov	r2, r3
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	4413      	add	r3, r2
 800690a:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1 and DAC2 */
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 800690c:	88fb      	ldrh	r3, [r7, #6]
 800690e:	b2db      	uxtb	r3, r3
 8006910:	2200      	movs	r2, #0
 8006912:	2105      	movs	r1, #5
 8006914:	4618      	mov	r0, r3
 8006916:	f000 fcc7 	bl	80072a8 <CODEC_IO_Write>
 800691a:	4603      	mov	r3, r0
 800691c:	461a      	mov	r2, r3
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	4413      	add	r3, r2
 8006922:	60fb      	str	r3, [r7, #12]

      /* Reset Codec by writing in 0x0000 address register */
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8006924:	88fb      	ldrh	r3, [r7, #6]
 8006926:	b2db      	uxtb	r3, r3
 8006928:	2200      	movs	r2, #0
 800692a:	2100      	movs	r1, #0
 800692c:	4618      	mov	r0, r3
 800692e:	f000 fcbb 	bl	80072a8 <CODEC_IO_Write>
 8006932:	4603      	mov	r3, r0
 8006934:	461a      	mov	r2, r3
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	4413      	add	r3, r2
 800693a:	60fb      	str	r3, [r7, #12]

      outputEnabled = 0;
 800693c:	4b03      	ldr	r3, [pc, #12]	; (800694c <wm8994_Stop+0xd8>)
 800693e:	2200      	movs	r2, #0
 8006940:	601a      	str	r2, [r3, #0]
    }
  }
  return counter;
 8006942:	68fb      	ldr	r3, [r7, #12]
}
 8006944:	4618      	mov	r0, r3
 8006946:	3710      	adds	r7, #16
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}
 800694c:	20000eb8 	.word	0x20000eb8

08006950 <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	4603      	mov	r3, r0
 8006958:	460a      	mov	r2, r1
 800695a:	80fb      	strh	r3, [r7, #6]
 800695c:	4613      	mov	r3, r2
 800695e:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8006960:	2300      	movs	r3, #0
 8006962:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8006964:	797b      	ldrb	r3, [r7, #5]
 8006966:	2b64      	cmp	r3, #100	; 0x64
 8006968:	d80b      	bhi.n	8006982 <wm8994_SetVolume+0x32>
 800696a:	797a      	ldrb	r2, [r7, #5]
 800696c:	4613      	mov	r3, r2
 800696e:	019b      	lsls	r3, r3, #6
 8006970:	1a9b      	subs	r3, r3, r2
 8006972:	4a86      	ldr	r2, [pc, #536]	; (8006b8c <wm8994_SetVolume+0x23c>)
 8006974:	fb82 1203 	smull	r1, r2, r2, r3
 8006978:	1152      	asrs	r2, r2, #5
 800697a:	17db      	asrs	r3, r3, #31
 800697c:	1ad3      	subs	r3, r2, r3
 800697e:	b2db      	uxtb	r3, r3
 8006980:	e000      	b.n	8006984 <wm8994_SetVolume+0x34>
 8006982:	2364      	movs	r3, #100	; 0x64
 8006984:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 8006986:	4b82      	ldr	r3, [pc, #520]	; (8006b90 <wm8994_SetVolume+0x240>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	2b00      	cmp	r3, #0
 800698c:	f000 809b 	beq.w	8006ac6 <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 8006990:	7afb      	ldrb	r3, [r7, #11]
 8006992:	2b3e      	cmp	r3, #62	; 0x3e
 8006994:	d93d      	bls.n	8006a12 <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8006996:	88fb      	ldrh	r3, [r7, #6]
 8006998:	2100      	movs	r1, #0
 800699a:	4618      	mov	r0, r3
 800699c:	f000 fa1e 	bl	8006ddc <wm8994_SetMute>
 80069a0:	4602      	mov	r2, r0
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	4413      	add	r3, r2
 80069a6:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 80069a8:	88fb      	ldrh	r3, [r7, #6]
 80069aa:	b2db      	uxtb	r3, r3
 80069ac:	f240 127f 	movw	r2, #383	; 0x17f
 80069b0:	211c      	movs	r1, #28
 80069b2:	4618      	mov	r0, r3
 80069b4:	f000 fc78 	bl	80072a8 <CODEC_IO_Write>
 80069b8:	4603      	mov	r3, r0
 80069ba:	461a      	mov	r2, r3
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	4413      	add	r3, r2
 80069c0:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 80069c2:	88fb      	ldrh	r3, [r7, #6]
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	f240 127f 	movw	r2, #383	; 0x17f
 80069ca:	211d      	movs	r1, #29
 80069cc:	4618      	mov	r0, r3
 80069ce:	f000 fc6b 	bl	80072a8 <CODEC_IO_Write>
 80069d2:	4603      	mov	r3, r0
 80069d4:	461a      	mov	r2, r3
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	4413      	add	r3, r2
 80069da:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 80069dc:	88fb      	ldrh	r3, [r7, #6]
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	f240 127f 	movw	r2, #383	; 0x17f
 80069e4:	2126      	movs	r1, #38	; 0x26
 80069e6:	4618      	mov	r0, r3
 80069e8:	f000 fc5e 	bl	80072a8 <CODEC_IO_Write>
 80069ec:	4603      	mov	r3, r0
 80069ee:	461a      	mov	r2, r3
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	4413      	add	r3, r2
 80069f4:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 80069f6:	88fb      	ldrh	r3, [r7, #6]
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	f240 127f 	movw	r2, #383	; 0x17f
 80069fe:	2127      	movs	r1, #39	; 0x27
 8006a00:	4618      	mov	r0, r3
 8006a02:	f000 fc51 	bl	80072a8 <CODEC_IO_Write>
 8006a06:	4603      	mov	r3, r0
 8006a08:	461a      	mov	r2, r3
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	4413      	add	r3, r2
 8006a0e:	60fb      	str	r3, [r7, #12]
 8006a10:	e059      	b.n	8006ac6 <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 8006a12:	797b      	ldrb	r3, [r7, #5]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d109      	bne.n	8006a2c <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8006a18:	88fb      	ldrh	r3, [r7, #6]
 8006a1a:	2101      	movs	r1, #1
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f000 f9dd 	bl	8006ddc <wm8994_SetMute>
 8006a22:	4602      	mov	r2, r0
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	4413      	add	r3, r2
 8006a28:	60fb      	str	r3, [r7, #12]
 8006a2a:	e04c      	b.n	8006ac6 <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8006a2c:	88fb      	ldrh	r3, [r7, #6]
 8006a2e:	2100      	movs	r1, #0
 8006a30:	4618      	mov	r0, r3
 8006a32:	f000 f9d3 	bl	8006ddc <wm8994_SetMute>
 8006a36:	4602      	mov	r2, r0
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	4413      	add	r3, r2
 8006a3c:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 8006a3e:	88fb      	ldrh	r3, [r7, #6]
 8006a40:	b2d8      	uxtb	r0, r3
 8006a42:	7afb      	ldrb	r3, [r7, #11]
 8006a44:	b21b      	sxth	r3, r3
 8006a46:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8006a4a:	b21b      	sxth	r3, r3
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	461a      	mov	r2, r3
 8006a50:	211c      	movs	r1, #28
 8006a52:	f000 fc29 	bl	80072a8 <CODEC_IO_Write>
 8006a56:	4603      	mov	r3, r0
 8006a58:	461a      	mov	r2, r3
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	4413      	add	r3, r2
 8006a5e:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 8006a60:	88fb      	ldrh	r3, [r7, #6]
 8006a62:	b2d8      	uxtb	r0, r3
 8006a64:	7afb      	ldrb	r3, [r7, #11]
 8006a66:	b21b      	sxth	r3, r3
 8006a68:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8006a6c:	b21b      	sxth	r3, r3
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	461a      	mov	r2, r3
 8006a72:	211d      	movs	r1, #29
 8006a74:	f000 fc18 	bl	80072a8 <CODEC_IO_Write>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	4413      	add	r3, r2
 8006a80:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 8006a82:	88fb      	ldrh	r3, [r7, #6]
 8006a84:	b2d8      	uxtb	r0, r3
 8006a86:	7afb      	ldrb	r3, [r7, #11]
 8006a88:	b21b      	sxth	r3, r3
 8006a8a:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8006a8e:	b21b      	sxth	r3, r3
 8006a90:	b29b      	uxth	r3, r3
 8006a92:	461a      	mov	r2, r3
 8006a94:	2126      	movs	r1, #38	; 0x26
 8006a96:	f000 fc07 	bl	80072a8 <CODEC_IO_Write>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	4413      	add	r3, r2
 8006aa2:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 8006aa4:	88fb      	ldrh	r3, [r7, #6]
 8006aa6:	b2d8      	uxtb	r0, r3
 8006aa8:	7afb      	ldrb	r3, [r7, #11]
 8006aaa:	b21b      	sxth	r3, r3
 8006aac:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8006ab0:	b21b      	sxth	r3, r3
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	2127      	movs	r1, #39	; 0x27
 8006ab8:	f000 fbf6 	bl	80072a8 <CODEC_IO_Write>
 8006abc:	4603      	mov	r3, r0
 8006abe:	461a      	mov	r2, r3
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	4413      	add	r3, r2
 8006ac4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 8006ac6:	4b33      	ldr	r3, [pc, #204]	; (8006b94 <wm8994_SetVolume+0x244>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d059      	beq.n	8006b82 <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8006ace:	797b      	ldrb	r3, [r7, #5]
 8006ad0:	2b63      	cmp	r3, #99	; 0x63
 8006ad2:	d80c      	bhi.n	8006aee <wm8994_SetVolume+0x19e>
 8006ad4:	797a      	ldrb	r2, [r7, #5]
 8006ad6:	4613      	mov	r3, r2
 8006ad8:	011b      	lsls	r3, r3, #4
 8006ada:	1a9b      	subs	r3, r3, r2
 8006adc:	011b      	lsls	r3, r3, #4
 8006ade:	4a2b      	ldr	r2, [pc, #172]	; (8006b8c <wm8994_SetVolume+0x23c>)
 8006ae0:	fb82 1203 	smull	r1, r2, r2, r3
 8006ae4:	1152      	asrs	r2, r2, #5
 8006ae6:	17db      	asrs	r3, r3, #31
 8006ae8:	1ad3      	subs	r3, r2, r3
 8006aea:	b2db      	uxtb	r3, r3
 8006aec:	e000      	b.n	8006af0 <wm8994_SetVolume+0x1a0>
 8006aee:	23ef      	movs	r3, #239	; 0xef
 8006af0:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 8006af2:	88fb      	ldrh	r3, [r7, #6]
 8006af4:	b2d8      	uxtb	r0, r3
 8006af6:	7afb      	ldrb	r3, [r7, #11]
 8006af8:	b21b      	sxth	r3, r3
 8006afa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006afe:	b21b      	sxth	r3, r3
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	461a      	mov	r2, r3
 8006b04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006b08:	f000 fbce 	bl	80072a8 <CODEC_IO_Write>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	461a      	mov	r2, r3
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	4413      	add	r3, r2
 8006b14:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 8006b16:	88fb      	ldrh	r3, [r7, #6]
 8006b18:	b2d8      	uxtb	r0, r3
 8006b1a:	7afb      	ldrb	r3, [r7, #11]
 8006b1c:	b21b      	sxth	r3, r3
 8006b1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b22:	b21b      	sxth	r3, r3
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	461a      	mov	r2, r3
 8006b28:	f240 4101 	movw	r1, #1025	; 0x401
 8006b2c:	f000 fbbc 	bl	80072a8 <CODEC_IO_Write>
 8006b30:	4603      	mov	r3, r0
 8006b32:	461a      	mov	r2, r3
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	4413      	add	r3, r2
 8006b38:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 8006b3a:	88fb      	ldrh	r3, [r7, #6]
 8006b3c:	b2d8      	uxtb	r0, r3
 8006b3e:	7afb      	ldrb	r3, [r7, #11]
 8006b40:	b21b      	sxth	r3, r3
 8006b42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b46:	b21b      	sxth	r3, r3
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	f240 4104 	movw	r1, #1028	; 0x404
 8006b50:	f000 fbaa 	bl	80072a8 <CODEC_IO_Write>
 8006b54:	4603      	mov	r3, r0
 8006b56:	461a      	mov	r2, r3
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	4413      	add	r3, r2
 8006b5c:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 8006b5e:	88fb      	ldrh	r3, [r7, #6]
 8006b60:	b2d8      	uxtb	r0, r3
 8006b62:	7afb      	ldrb	r3, [r7, #11]
 8006b64:	b21b      	sxth	r3, r3
 8006b66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b6a:	b21b      	sxth	r3, r3
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	461a      	mov	r2, r3
 8006b70:	f240 4105 	movw	r1, #1029	; 0x405
 8006b74:	f000 fb98 	bl	80072a8 <CODEC_IO_Write>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	4413      	add	r3, r2
 8006b80:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8006b82:	68fb      	ldr	r3, [r7, #12]
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3710      	adds	r7, #16
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}
 8006b8c:	51eb851f 	.word	0x51eb851f
 8006b90:	20000eb8 	.word	0x20000eb8
 8006b94:	20000ebc 	.word	0x20000ebc

08006b98 <wm8994_SetVolumeOut>:
uint32_t wm8994_SetVolumeOut(uint16_t DeviceAddr, uint8_t Volume) {
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b084      	sub	sp, #16
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	460a      	mov	r2, r1
 8006ba2:	80fb      	strh	r3, [r7, #6]
 8006ba4:	4613      	mov	r3, r2
 8006ba6:	717b      	strb	r3, [r7, #5]
	uint32_t counter = 0;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	60fb      	str	r3, [r7, #12]
	uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8006bac:	797b      	ldrb	r3, [r7, #5]
 8006bae:	2b64      	cmp	r3, #100	; 0x64
 8006bb0:	d80b      	bhi.n	8006bca <wm8994_SetVolumeOut+0x32>
 8006bb2:	797a      	ldrb	r2, [r7, #5]
 8006bb4:	4613      	mov	r3, r2
 8006bb6:	019b      	lsls	r3, r3, #6
 8006bb8:	1a9b      	subs	r3, r3, r2
 8006bba:	4a57      	ldr	r2, [pc, #348]	; (8006d18 <wm8994_SetVolumeOut+0x180>)
 8006bbc:	fb82 1203 	smull	r1, r2, r2, r3
 8006bc0:	1152      	asrs	r2, r2, #5
 8006bc2:	17db      	asrs	r3, r3, #31
 8006bc4:	1ad3      	subs	r3, r2, r3
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	e000      	b.n	8006bcc <wm8994_SetVolumeOut+0x34>
 8006bca:	2364      	movs	r3, #100	; 0x64
 8006bcc:	72fb      	strb	r3, [r7, #11]

	/* Output volume */
	if (outputEnabled != 0) {
 8006bce:	4b53      	ldr	r3, [pc, #332]	; (8006d1c <wm8994_SetVolumeOut+0x184>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	f000 809b 	beq.w	8006d0e <wm8994_SetVolumeOut+0x176>
		if (convertedvol > 0x3E) {
 8006bd8:	7afb      	ldrb	r3, [r7, #11]
 8006bda:	2b3e      	cmp	r3, #62	; 0x3e
 8006bdc:	d93d      	bls.n	8006c5a <wm8994_SetVolumeOut+0xc2>
			/* Unmute audio codec */
			counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8006bde:	88fb      	ldrh	r3, [r7, #6]
 8006be0:	2100      	movs	r1, #0
 8006be2:	4618      	mov	r0, r3
 8006be4:	f000 f8fa 	bl	8006ddc <wm8994_SetMute>
 8006be8:	4602      	mov	r2, r0
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	4413      	add	r3, r2
 8006bee:	60fb      	str	r3, [r7, #12]

			/* Left Headphone Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8006bf0:	88fb      	ldrh	r3, [r7, #6]
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	f240 127f 	movw	r2, #383	; 0x17f
 8006bf8:	211c      	movs	r1, #28
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f000 fb54 	bl	80072a8 <CODEC_IO_Write>
 8006c00:	4603      	mov	r3, r0
 8006c02:	461a      	mov	r2, r3
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	4413      	add	r3, r2
 8006c08:	60fb      	str	r3, [r7, #12]

			/* Right Headphone Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 8006c0a:	88fb      	ldrh	r3, [r7, #6]
 8006c0c:	b2db      	uxtb	r3, r3
 8006c0e:	f240 127f 	movw	r2, #383	; 0x17f
 8006c12:	211d      	movs	r1, #29
 8006c14:	4618      	mov	r0, r3
 8006c16:	f000 fb47 	bl	80072a8 <CODEC_IO_Write>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	461a      	mov	r2, r3
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	4413      	add	r3, r2
 8006c22:	60fb      	str	r3, [r7, #12]

			/* Left Speaker Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 8006c24:	88fb      	ldrh	r3, [r7, #6]
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	f240 127f 	movw	r2, #383	; 0x17f
 8006c2c:	2126      	movs	r1, #38	; 0x26
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f000 fb3a 	bl	80072a8 <CODEC_IO_Write>
 8006c34:	4603      	mov	r3, r0
 8006c36:	461a      	mov	r2, r3
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	4413      	add	r3, r2
 8006c3c:	60fb      	str	r3, [r7, #12]

			/* Right Speaker Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 8006c3e:	88fb      	ldrh	r3, [r7, #6]
 8006c40:	b2db      	uxtb	r3, r3
 8006c42:	f240 127f 	movw	r2, #383	; 0x17f
 8006c46:	2127      	movs	r1, #39	; 0x27
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f000 fb2d 	bl	80072a8 <CODEC_IO_Write>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	461a      	mov	r2, r3
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	4413      	add	r3, r2
 8006c56:	60fb      	str	r3, [r7, #12]
 8006c58:	e059      	b.n	8006d0e <wm8994_SetVolumeOut+0x176>
		} else if (Volume == 0) {
 8006c5a:	797b      	ldrb	r3, [r7, #5]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d109      	bne.n	8006c74 <wm8994_SetVolumeOut+0xdc>
			/* Mute audio codec */
			counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8006c60:	88fb      	ldrh	r3, [r7, #6]
 8006c62:	2101      	movs	r1, #1
 8006c64:	4618      	mov	r0, r3
 8006c66:	f000 f8b9 	bl	8006ddc <wm8994_SetMute>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	4413      	add	r3, r2
 8006c70:	60fb      	str	r3, [r7, #12]
 8006c72:	e04c      	b.n	8006d0e <wm8994_SetVolumeOut+0x176>
		} else {
			/* Unmute audio codec */
			counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8006c74:	88fb      	ldrh	r3, [r7, #6]
 8006c76:	2100      	movs	r1, #0
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f000 f8af 	bl	8006ddc <wm8994_SetMute>
 8006c7e:	4602      	mov	r2, r0
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	4413      	add	r3, r2
 8006c84:	60fb      	str	r3, [r7, #12]

			/* Left Headphone Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 8006c86:	88fb      	ldrh	r3, [r7, #6]
 8006c88:	b2d8      	uxtb	r0, r3
 8006c8a:	7afb      	ldrb	r3, [r7, #11]
 8006c8c:	b21b      	sxth	r3, r3
 8006c8e:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8006c92:	b21b      	sxth	r3, r3
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	461a      	mov	r2, r3
 8006c98:	211c      	movs	r1, #28
 8006c9a:	f000 fb05 	bl	80072a8 <CODEC_IO_Write>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	4413      	add	r3, r2
 8006ca6:	60fb      	str	r3, [r7, #12]

			/* Right Headphone Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 8006ca8:	88fb      	ldrh	r3, [r7, #6]
 8006caa:	b2d8      	uxtb	r0, r3
 8006cac:	7afb      	ldrb	r3, [r7, #11]
 8006cae:	b21b      	sxth	r3, r3
 8006cb0:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8006cb4:	b21b      	sxth	r3, r3
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	461a      	mov	r2, r3
 8006cba:	211d      	movs	r1, #29
 8006cbc:	f000 faf4 	bl	80072a8 <CODEC_IO_Write>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	4413      	add	r3, r2
 8006cc8:	60fb      	str	r3, [r7, #12]

			/* Left Speaker Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 8006cca:	88fb      	ldrh	r3, [r7, #6]
 8006ccc:	b2d8      	uxtb	r0, r3
 8006cce:	7afb      	ldrb	r3, [r7, #11]
 8006cd0:	b21b      	sxth	r3, r3
 8006cd2:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8006cd6:	b21b      	sxth	r3, r3
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	461a      	mov	r2, r3
 8006cdc:	2126      	movs	r1, #38	; 0x26
 8006cde:	f000 fae3 	bl	80072a8 <CODEC_IO_Write>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	4413      	add	r3, r2
 8006cea:	60fb      	str	r3, [r7, #12]

			/* Right Speaker Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 8006cec:	88fb      	ldrh	r3, [r7, #6]
 8006cee:	b2d8      	uxtb	r0, r3
 8006cf0:	7afb      	ldrb	r3, [r7, #11]
 8006cf2:	b21b      	sxth	r3, r3
 8006cf4:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8006cf8:	b21b      	sxth	r3, r3
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	2127      	movs	r1, #39	; 0x27
 8006d00:	f000 fad2 	bl	80072a8 <CODEC_IO_Write>
 8006d04:	4603      	mov	r3, r0
 8006d06:	461a      	mov	r2, r3
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	4413      	add	r3, r2
 8006d0c:	60fb      	str	r3, [r7, #12]
		}
	}
	return counter;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3710      	adds	r7, #16
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	51eb851f 	.word	0x51eb851f
 8006d1c:	20000eb8 	.word	0x20000eb8

08006d20 <wm8994_SetVolumeIn>:
uint32_t wm8994_SetVolumeIn(uint16_t DeviceAddr, uint8_t Volume) {
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b084      	sub	sp, #16
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	4603      	mov	r3, r0
 8006d28:	460a      	mov	r2, r1
 8006d2a:	80fb      	strh	r3, [r7, #6]
 8006d2c:	4613      	mov	r3, r2
 8006d2e:	717b      	strb	r3, [r7, #5]
	uint32_t counter = 0;
 8006d30:	2300      	movs	r3, #0
 8006d32:	60fb      	str	r3, [r7, #12]
	if (inputEnabled != 0) {
 8006d34:	4b28      	ldr	r3, [pc, #160]	; (8006dd8 <wm8994_SetVolumeIn+0xb8>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d047      	beq.n	8006dcc <wm8994_SetVolumeIn+0xac>
		// B1 = 0dB
		/* Left AIF1 ADC1 volume */
		counter += CODEC_IO_Write(DeviceAddr, 0x400, Volume | 0x100);
 8006d3c:	88fb      	ldrh	r3, [r7, #6]
 8006d3e:	b2d8      	uxtb	r0, r3
 8006d40:	797b      	ldrb	r3, [r7, #5]
 8006d42:	b21b      	sxth	r3, r3
 8006d44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d48:	b21b      	sxth	r3, r3
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006d52:	f000 faa9 	bl	80072a8 <CODEC_IO_Write>
 8006d56:	4603      	mov	r3, r0
 8006d58:	461a      	mov	r2, r3
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	4413      	add	r3, r2
 8006d5e:	60fb      	str	r3, [r7, #12]

		/* Right AIF1 ADC1 volume */
		counter += CODEC_IO_Write(DeviceAddr, 0x401, Volume | 0x100);
 8006d60:	88fb      	ldrh	r3, [r7, #6]
 8006d62:	b2d8      	uxtb	r0, r3
 8006d64:	797b      	ldrb	r3, [r7, #5]
 8006d66:	b21b      	sxth	r3, r3
 8006d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d6c:	b21b      	sxth	r3, r3
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	461a      	mov	r2, r3
 8006d72:	f240 4101 	movw	r1, #1025	; 0x401
 8006d76:	f000 fa97 	bl	80072a8 <CODEC_IO_Write>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	4413      	add	r3, r2
 8006d82:	60fb      	str	r3, [r7, #12]

		/* Left AIF1 ADC2 volume */
		counter += CODEC_IO_Write(DeviceAddr, 0x404, Volume | 0x100);
 8006d84:	88fb      	ldrh	r3, [r7, #6]
 8006d86:	b2d8      	uxtb	r0, r3
 8006d88:	797b      	ldrb	r3, [r7, #5]
 8006d8a:	b21b      	sxth	r3, r3
 8006d8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d90:	b21b      	sxth	r3, r3
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	461a      	mov	r2, r3
 8006d96:	f240 4104 	movw	r1, #1028	; 0x404
 8006d9a:	f000 fa85 	bl	80072a8 <CODEC_IO_Write>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	461a      	mov	r2, r3
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	4413      	add	r3, r2
 8006da6:	60fb      	str	r3, [r7, #12]

		/* Right AIF1 ADC2 volume */
		counter += CODEC_IO_Write(DeviceAddr, 0x405, Volume | 0x100);
 8006da8:	88fb      	ldrh	r3, [r7, #6]
 8006daa:	b2d8      	uxtb	r0, r3
 8006dac:	797b      	ldrb	r3, [r7, #5]
 8006dae:	b21b      	sxth	r3, r3
 8006db0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006db4:	b21b      	sxth	r3, r3
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	461a      	mov	r2, r3
 8006dba:	f240 4105 	movw	r1, #1029	; 0x405
 8006dbe:	f000 fa73 	bl	80072a8 <CODEC_IO_Write>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	4413      	add	r3, r2
 8006dca:	60fb      	str	r3, [r7, #12]
	}
	return counter;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3710      	adds	r7, #16
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
 8006dd6:	bf00      	nop
 8006dd8:	20000ebc 	.word	0x20000ebc

08006ddc <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b084      	sub	sp, #16
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	4603      	mov	r3, r0
 8006de4:	6039      	str	r1, [r7, #0]
 8006de6:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8006de8:	2300      	movs	r3, #0
 8006dea:	60fb      	str	r3, [r7, #12]
  
  if (outputEnabled != 0)
 8006dec:	4b21      	ldr	r3, [pc, #132]	; (8006e74 <wm8994_SetMute+0x98>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d039      	beq.n	8006e68 <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	d11c      	bne.n	8006e34 <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8006dfa:	88fb      	ldrh	r3, [r7, #6]
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e02:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8006e06:	4618      	mov	r0, r3
 8006e08:	f000 fa4e 	bl	80072a8 <CODEC_IO_Write>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	461a      	mov	r2, r3
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	4413      	add	r3, r2
 8006e14:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8006e16:	88fb      	ldrh	r3, [r7, #6]
 8006e18:	b2db      	uxtb	r3, r3
 8006e1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e1e:	f240 4122 	movw	r1, #1058	; 0x422
 8006e22:	4618      	mov	r0, r3
 8006e24:	f000 fa40 	bl	80072a8 <CODEC_IO_Write>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	4413      	add	r3, r2
 8006e30:	60fb      	str	r3, [r7, #12]
 8006e32:	e019      	b.n	8006e68 <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8006e34:	88fb      	ldrh	r3, [r7, #6]
 8006e36:	b2db      	uxtb	r3, r3
 8006e38:	2210      	movs	r2, #16
 8006e3a:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f000 fa32 	bl	80072a8 <CODEC_IO_Write>
 8006e44:	4603      	mov	r3, r0
 8006e46:	461a      	mov	r2, r3
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	4413      	add	r3, r2
 8006e4c:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8006e4e:	88fb      	ldrh	r3, [r7, #6]
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	2210      	movs	r2, #16
 8006e54:	f240 4122 	movw	r1, #1058	; 0x422
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f000 fa25 	bl	80072a8 <CODEC_IO_Write>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	461a      	mov	r2, r3
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	4413      	add	r3, r2
 8006e66:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 8006e68:	68fb      	ldr	r3, [r7, #12]
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3710      	adds	r7, #16
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}
 8006e72:	bf00      	nop
 8006e74:	20000eb8 	.word	0x20000eb8

08006e78 <wm8994_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b084      	sub	sp, #16
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	4603      	mov	r3, r0
 8006e80:	460a      	mov	r2, r1
 8006e82:	80fb      	strh	r3, [r7, #6]
 8006e84:	4613      	mov	r3, r2
 8006e86:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 8006e88:	2300      	movs	r3, #0
 8006e8a:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 8006e8c:	797b      	ldrb	r3, [r7, #5]
 8006e8e:	2b03      	cmp	r3, #3
 8006e90:	f000 808c 	beq.w	8006fac <wm8994_SetOutputMode+0x134>
 8006e94:	2b03      	cmp	r3, #3
 8006e96:	f300 80cb 	bgt.w	8007030 <wm8994_SetOutputMode+0x1b8>
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d002      	beq.n	8006ea4 <wm8994_SetOutputMode+0x2c>
 8006e9e:	2b02      	cmp	r3, #2
 8006ea0:	d042      	beq.n	8006f28 <wm8994_SetOutputMode+0xb0>
 8006ea2:	e0c5      	b.n	8007030 <wm8994_SetOutputMode+0x1b8>
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8006ea4:	88fb      	ldrh	r3, [r7, #6]
 8006ea6:	b2db      	uxtb	r3, r3
 8006ea8:	f640 420c 	movw	r2, #3084	; 0xc0c
 8006eac:	2105      	movs	r1, #5
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f000 f9fa 	bl	80072a8 <CODEC_IO_Write>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	4413      	add	r3, r2
 8006ebc:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8006ebe:	88fb      	ldrh	r3, [r7, #6]
 8006ec0:	b2db      	uxtb	r3, r3
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	f240 6101 	movw	r1, #1537	; 0x601
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f000 f9ed 	bl	80072a8 <CODEC_IO_Write>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	4413      	add	r3, r2
 8006ed6:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8006ed8:	88fb      	ldrh	r3, [r7, #6]
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	2200      	movs	r2, #0
 8006ede:	f240 6102 	movw	r1, #1538	; 0x602
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f000 f9e0 	bl	80072a8 <CODEC_IO_Write>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	461a      	mov	r2, r3
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	4413      	add	r3, r2
 8006ef0:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8006ef2:	88fb      	ldrh	r3, [r7, #6]
 8006ef4:	b2db      	uxtb	r3, r3
 8006ef6:	2202      	movs	r2, #2
 8006ef8:	f240 6104 	movw	r1, #1540	; 0x604
 8006efc:	4618      	mov	r0, r3
 8006efe:	f000 f9d3 	bl	80072a8 <CODEC_IO_Write>
 8006f02:	4603      	mov	r3, r0
 8006f04:	461a      	mov	r2, r3
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	4413      	add	r3, r2
 8006f0a:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8006f0c:	88fb      	ldrh	r3, [r7, #6]
 8006f0e:	b2db      	uxtb	r3, r3
 8006f10:	2202      	movs	r2, #2
 8006f12:	f240 6105 	movw	r1, #1541	; 0x605
 8006f16:	4618      	mov	r0, r3
 8006f18:	f000 f9c6 	bl	80072a8 <CODEC_IO_Write>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	461a      	mov	r2, r3
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	4413      	add	r3, r2
 8006f24:	60fb      	str	r3, [r7, #12]
    break;
 8006f26:	e0c5      	b.n	80070b4 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8006f28:	88fb      	ldrh	r3, [r7, #6]
 8006f2a:	b2db      	uxtb	r3, r3
 8006f2c:	f240 3203 	movw	r2, #771	; 0x303
 8006f30:	2105      	movs	r1, #5
 8006f32:	4618      	mov	r0, r3
 8006f34:	f000 f9b8 	bl	80072a8 <CODEC_IO_Write>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	4413      	add	r3, r2
 8006f40:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8006f42:	88fb      	ldrh	r3, [r7, #6]
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	2201      	movs	r2, #1
 8006f48:	f240 6101 	movw	r1, #1537	; 0x601
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f000 f9ab 	bl	80072a8 <CODEC_IO_Write>
 8006f52:	4603      	mov	r3, r0
 8006f54:	461a      	mov	r2, r3
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	4413      	add	r3, r2
 8006f5a:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8006f5c:	88fb      	ldrh	r3, [r7, #6]
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	2201      	movs	r2, #1
 8006f62:	f240 6102 	movw	r1, #1538	; 0x602
 8006f66:	4618      	mov	r0, r3
 8006f68:	f000 f99e 	bl	80072a8 <CODEC_IO_Write>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	461a      	mov	r2, r3
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	4413      	add	r3, r2
 8006f74:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8006f76:	88fb      	ldrh	r3, [r7, #6]
 8006f78:	b2db      	uxtb	r3, r3
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f240 6104 	movw	r1, #1540	; 0x604
 8006f80:	4618      	mov	r0, r3
 8006f82:	f000 f991 	bl	80072a8 <CODEC_IO_Write>
 8006f86:	4603      	mov	r3, r0
 8006f88:	461a      	mov	r2, r3
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	4413      	add	r3, r2
 8006f8e:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8006f90:	88fb      	ldrh	r3, [r7, #6]
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	2200      	movs	r2, #0
 8006f96:	f240 6105 	movw	r1, #1541	; 0x605
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f000 f984 	bl	80072a8 <CODEC_IO_Write>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	4413      	add	r3, r2
 8006fa8:	60fb      	str	r3, [r7, #12]
    break;
 8006faa:	e083      	b.n	80070b4 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_BOTH:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    also Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8006fac:	88fb      	ldrh	r3, [r7, #6]
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	f640 720f 	movw	r2, #3855	; 0xf0f
 8006fb4:	2105      	movs	r1, #5
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f000 f976 	bl	80072a8 <CODEC_IO_Write>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	4413      	add	r3, r2
 8006fc4:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8006fc6:	88fb      	ldrh	r3, [r7, #6]
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	2201      	movs	r2, #1
 8006fcc:	f240 6101 	movw	r1, #1537	; 0x601
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f000 f969 	bl	80072a8 <CODEC_IO_Write>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	461a      	mov	r2, r3
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	4413      	add	r3, r2
 8006fde:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8006fe0:	88fb      	ldrh	r3, [r7, #6]
 8006fe2:	b2db      	uxtb	r3, r3
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	f240 6102 	movw	r1, #1538	; 0x602
 8006fea:	4618      	mov	r0, r3
 8006fec:	f000 f95c 	bl	80072a8 <CODEC_IO_Write>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	4413      	add	r3, r2
 8006ff8:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8006ffa:	88fb      	ldrh	r3, [r7, #6]
 8006ffc:	b2db      	uxtb	r3, r3
 8006ffe:	2202      	movs	r2, #2
 8007000:	f240 6104 	movw	r1, #1540	; 0x604
 8007004:	4618      	mov	r0, r3
 8007006:	f000 f94f 	bl	80072a8 <CODEC_IO_Write>
 800700a:	4603      	mov	r3, r0
 800700c:	461a      	mov	r2, r3
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	4413      	add	r3, r2
 8007012:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8007014:	88fb      	ldrh	r3, [r7, #6]
 8007016:	b2db      	uxtb	r3, r3
 8007018:	2202      	movs	r2, #2
 800701a:	f240 6105 	movw	r1, #1541	; 0x605
 800701e:	4618      	mov	r0, r3
 8007020:	f000 f942 	bl	80072a8 <CODEC_IO_Write>
 8007024:	4603      	mov	r3, r0
 8007026:	461a      	mov	r2, r3
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	4413      	add	r3, r2
 800702c:	60fb      	str	r3, [r7, #12]
    break;
 800702e:	e041      	b.n	80070b4 <wm8994_SetOutputMode+0x23c>
    
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8007030:	88fb      	ldrh	r3, [r7, #6]
 8007032:	b2db      	uxtb	r3, r3
 8007034:	f240 3203 	movw	r2, #771	; 0x303
 8007038:	2105      	movs	r1, #5
 800703a:	4618      	mov	r0, r3
 800703c:	f000 f934 	bl	80072a8 <CODEC_IO_Write>
 8007040:	4603      	mov	r3, r0
 8007042:	461a      	mov	r2, r3
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	4413      	add	r3, r2
 8007048:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800704a:	88fb      	ldrh	r3, [r7, #6]
 800704c:	b2db      	uxtb	r3, r3
 800704e:	2201      	movs	r2, #1
 8007050:	f240 6101 	movw	r1, #1537	; 0x601
 8007054:	4618      	mov	r0, r3
 8007056:	f000 f927 	bl	80072a8 <CODEC_IO_Write>
 800705a:	4603      	mov	r3, r0
 800705c:	461a      	mov	r2, r3
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	4413      	add	r3, r2
 8007062:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8007064:	88fb      	ldrh	r3, [r7, #6]
 8007066:	b2db      	uxtb	r3, r3
 8007068:	2201      	movs	r2, #1
 800706a:	f240 6102 	movw	r1, #1538	; 0x602
 800706e:	4618      	mov	r0, r3
 8007070:	f000 f91a 	bl	80072a8 <CODEC_IO_Write>
 8007074:	4603      	mov	r3, r0
 8007076:	461a      	mov	r2, r3
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	4413      	add	r3, r2
 800707c:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 800707e:	88fb      	ldrh	r3, [r7, #6]
 8007080:	b2db      	uxtb	r3, r3
 8007082:	2200      	movs	r2, #0
 8007084:	f240 6104 	movw	r1, #1540	; 0x604
 8007088:	4618      	mov	r0, r3
 800708a:	f000 f90d 	bl	80072a8 <CODEC_IO_Write>
 800708e:	4603      	mov	r3, r0
 8007090:	461a      	mov	r2, r3
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	4413      	add	r3, r2
 8007096:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8007098:	88fb      	ldrh	r3, [r7, #6]
 800709a:	b2db      	uxtb	r3, r3
 800709c:	2200      	movs	r2, #0
 800709e:	f240 6105 	movw	r1, #1541	; 0x605
 80070a2:	4618      	mov	r0, r3
 80070a4:	f000 f900 	bl	80072a8 <CODEC_IO_Write>
 80070a8:	4603      	mov	r3, r0
 80070aa:	461a      	mov	r2, r3
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	4413      	add	r3, r2
 80070b0:	60fb      	str	r3, [r7, #12]
    break;    
 80070b2:	bf00      	nop
  }  
  return counter;
 80070b4:	68fb      	ldr	r3, [r7, #12]
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3710      	adds	r7, #16
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}
	...

080070c0 <wm8994_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b084      	sub	sp, #16
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	4603      	mov	r3, r0
 80070c8:	6039      	str	r1, [r7, #0]
 80070ca:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80070cc:	2300      	movs	r3, #0
 80070ce:	60fb      	str	r3, [r7, #12]
 
  /*  Clock Configurations */
  switch (AudioFreq)
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	4a64      	ldr	r2, [pc, #400]	; (8007264 <wm8994_SetFrequency+0x1a4>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d079      	beq.n	80071cc <wm8994_SetFrequency+0x10c>
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	4a62      	ldr	r2, [pc, #392]	; (8007264 <wm8994_SetFrequency+0x1a4>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	f200 80ad 	bhi.w	800723c <wm8994_SetFrequency+0x17c>
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d061      	beq.n	80071b0 <wm8994_SetFrequency+0xf0>
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80070f2:	4293      	cmp	r3, r2
 80070f4:	f200 80a2 	bhi.w	800723c <wm8994_SetFrequency+0x17c>
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	f64a 4244 	movw	r2, #44100	; 0xac44
 80070fe:	4293      	cmp	r3, r2
 8007100:	f000 808e 	beq.w	8007220 <wm8994_SetFrequency+0x160>
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	f64a 4244 	movw	r2, #44100	; 0xac44
 800710a:	4293      	cmp	r3, r2
 800710c:	f200 8096 	bhi.w	800723c <wm8994_SetFrequency+0x17c>
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8007116:	d03d      	beq.n	8007194 <wm8994_SetFrequency+0xd4>
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 800711e:	f200 808d 	bhi.w	800723c <wm8994_SetFrequency+0x17c>
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	f245 6222 	movw	r2, #22050	; 0x5622
 8007128:	4293      	cmp	r3, r2
 800712a:	d06b      	beq.n	8007204 <wm8994_SetFrequency+0x144>
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	f245 6222 	movw	r2, #22050	; 0x5622
 8007132:	4293      	cmp	r3, r2
 8007134:	f200 8082 	bhi.w	800723c <wm8994_SetFrequency+0x17c>
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800713e:	d01b      	beq.n	8007178 <wm8994_SetFrequency+0xb8>
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8007146:	d879      	bhi.n	800723c <wm8994_SetFrequency+0x17c>
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800714e:	d005      	beq.n	800715c <wm8994_SetFrequency+0x9c>
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	f642 3211 	movw	r2, #11025	; 0x2b11
 8007156:	4293      	cmp	r3, r2
 8007158:	d046      	beq.n	80071e8 <wm8994_SetFrequency+0x128>
 800715a:	e06f      	b.n	800723c <wm8994_SetFrequency+0x17c>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 800715c:	88fb      	ldrh	r3, [r7, #6]
 800715e:	b2db      	uxtb	r3, r3
 8007160:	2203      	movs	r2, #3
 8007162:	f44f 7104 	mov.w	r1, #528	; 0x210
 8007166:	4618      	mov	r0, r3
 8007168:	f000 f89e 	bl	80072a8 <CODEC_IO_Write>
 800716c:	4603      	mov	r3, r0
 800716e:	461a      	mov	r2, r3
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	4413      	add	r3, r2
 8007174:	60fb      	str	r3, [r7, #12]
    break;
 8007176:	e06f      	b.n	8007258 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8007178:	88fb      	ldrh	r3, [r7, #6]
 800717a:	b2db      	uxtb	r3, r3
 800717c:	2233      	movs	r2, #51	; 0x33
 800717e:	f44f 7104 	mov.w	r1, #528	; 0x210
 8007182:	4618      	mov	r0, r3
 8007184:	f000 f890 	bl	80072a8 <CODEC_IO_Write>
 8007188:	4603      	mov	r3, r0
 800718a:	461a      	mov	r2, r3
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	4413      	add	r3, r2
 8007190:	60fb      	str	r3, [r7, #12]
    break;
 8007192:	e061      	b.n	8007258 <wm8994_SetFrequency+0x198>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8007194:	88fb      	ldrh	r3, [r7, #6]
 8007196:	b2db      	uxtb	r3, r3
 8007198:	2263      	movs	r2, #99	; 0x63
 800719a:	f44f 7104 	mov.w	r1, #528	; 0x210
 800719e:	4618      	mov	r0, r3
 80071a0:	f000 f882 	bl	80072a8 <CODEC_IO_Write>
 80071a4:	4603      	mov	r3, r0
 80071a6:	461a      	mov	r2, r3
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	4413      	add	r3, r2
 80071ac:	60fb      	str	r3, [r7, #12]
    break;
 80071ae:	e053      	b.n	8007258 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80071b0:	88fb      	ldrh	r3, [r7, #6]
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	2283      	movs	r2, #131	; 0x83
 80071b6:	f44f 7104 	mov.w	r1, #528	; 0x210
 80071ba:	4618      	mov	r0, r3
 80071bc:	f000 f874 	bl	80072a8 <CODEC_IO_Write>
 80071c0:	4603      	mov	r3, r0
 80071c2:	461a      	mov	r2, r3
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	4413      	add	r3, r2
 80071c8:	60fb      	str	r3, [r7, #12]
    break;
 80071ca:	e045      	b.n	8007258 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 80071cc:	88fb      	ldrh	r3, [r7, #6]
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	22a3      	movs	r2, #163	; 0xa3
 80071d2:	f44f 7104 	mov.w	r1, #528	; 0x210
 80071d6:	4618      	mov	r0, r3
 80071d8:	f000 f866 	bl	80072a8 <CODEC_IO_Write>
 80071dc:	4603      	mov	r3, r0
 80071de:	461a      	mov	r2, r3
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	4413      	add	r3, r2
 80071e4:	60fb      	str	r3, [r7, #12]
    break;
 80071e6:	e037      	b.n	8007258 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 80071e8:	88fb      	ldrh	r3, [r7, #6]
 80071ea:	b2db      	uxtb	r3, r3
 80071ec:	2213      	movs	r2, #19
 80071ee:	f44f 7104 	mov.w	r1, #528	; 0x210
 80071f2:	4618      	mov	r0, r3
 80071f4:	f000 f858 	bl	80072a8 <CODEC_IO_Write>
 80071f8:	4603      	mov	r3, r0
 80071fa:	461a      	mov	r2, r3
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	4413      	add	r3, r2
 8007200:	60fb      	str	r3, [r7, #12]
    break;
 8007202:	e029      	b.n	8007258 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8007204:	88fb      	ldrh	r3, [r7, #6]
 8007206:	b2db      	uxtb	r3, r3
 8007208:	2243      	movs	r2, #67	; 0x43
 800720a:	f44f 7104 	mov.w	r1, #528	; 0x210
 800720e:	4618      	mov	r0, r3
 8007210:	f000 f84a 	bl	80072a8 <CODEC_IO_Write>
 8007214:	4603      	mov	r3, r0
 8007216:	461a      	mov	r2, r3
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	4413      	add	r3, r2
 800721c:	60fb      	str	r3, [r7, #12]
    break;
 800721e:	e01b      	b.n	8007258 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8007220:	88fb      	ldrh	r3, [r7, #6]
 8007222:	b2db      	uxtb	r3, r3
 8007224:	2273      	movs	r2, #115	; 0x73
 8007226:	f44f 7104 	mov.w	r1, #528	; 0x210
 800722a:	4618      	mov	r0, r3
 800722c:	f000 f83c 	bl	80072a8 <CODEC_IO_Write>
 8007230:	4603      	mov	r3, r0
 8007232:	461a      	mov	r2, r3
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	4413      	add	r3, r2
 8007238:	60fb      	str	r3, [r7, #12]
    break; 
 800723a:	e00d      	b.n	8007258 <wm8994_SetFrequency+0x198>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 800723c:	88fb      	ldrh	r3, [r7, #6]
 800723e:	b2db      	uxtb	r3, r3
 8007240:	2283      	movs	r2, #131	; 0x83
 8007242:	f44f 7104 	mov.w	r1, #528	; 0x210
 8007246:	4618      	mov	r0, r3
 8007248:	f000 f82e 	bl	80072a8 <CODEC_IO_Write>
 800724c:	4603      	mov	r3, r0
 800724e:	461a      	mov	r2, r3
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	4413      	add	r3, r2
 8007254:	60fb      	str	r3, [r7, #12]
    break; 
 8007256:	bf00      	nop
  }
  return counter;
 8007258:	68fb      	ldr	r3, [r7, #12]
}
 800725a:	4618      	mov	r0, r3
 800725c:	3710      	adds	r7, #16
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}
 8007262:	bf00      	nop
 8007264:	00017700 	.word	0x00017700

08007268 <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b084      	sub	sp, #16
 800726c:	af00      	add	r7, sp, #0
 800726e:	4603      	mov	r3, r0
 8007270:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8007272:	2300      	movs	r3, #0
 8007274:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8007276:	88fb      	ldrh	r3, [r7, #6]
 8007278:	b2db      	uxtb	r3, r3
 800727a:	2200      	movs	r2, #0
 800727c:	2100      	movs	r1, #0
 800727e:	4618      	mov	r0, r3
 8007280:	f000 f812 	bl	80072a8 <CODEC_IO_Write>
 8007284:	4603      	mov	r3, r0
 8007286:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 8007288:	4b05      	ldr	r3, [pc, #20]	; (80072a0 <wm8994_Reset+0x38>)
 800728a:	2200      	movs	r2, #0
 800728c:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 800728e:	4b05      	ldr	r3, [pc, #20]	; (80072a4 <wm8994_Reset+0x3c>)
 8007290:	2200      	movs	r2, #0
 8007292:	601a      	str	r2, [r3, #0]

  return counter;
 8007294:	68fb      	ldr	r3, [r7, #12]
}
 8007296:	4618      	mov	r0, r3
 8007298:	3710      	adds	r7, #16
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
 800729e:	bf00      	nop
 80072a0:	20000eb8 	.word	0x20000eb8
 80072a4:	20000ebc 	.word	0x20000ebc

080072a8 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b084      	sub	sp, #16
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	4603      	mov	r3, r0
 80072b0:	71fb      	strb	r3, [r7, #7]
 80072b2:	460b      	mov	r3, r1
 80072b4:	80bb      	strh	r3, [r7, #4]
 80072b6:	4613      	mov	r3, r2
 80072b8:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 80072ba:	2300      	movs	r3, #0
 80072bc:	60fb      	str	r3, [r7, #12]
  
 AUDIO_IO_Write(Addr, Reg, Value);
 80072be:	887a      	ldrh	r2, [r7, #2]
 80072c0:	88b9      	ldrh	r1, [r7, #4]
 80072c2:	79fb      	ldrb	r3, [r7, #7]
 80072c4:	4618      	mov	r0, r3
 80072c6:	f7fb fddb 	bl	8002e80 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	b2db      	uxtb	r3, r3
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3710      	adds	r7, #16
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}
	...

080072d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80072d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007310 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80072dc:	480d      	ldr	r0, [pc, #52]	; (8007314 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80072de:	490e      	ldr	r1, [pc, #56]	; (8007318 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80072e0:	4a0e      	ldr	r2, [pc, #56]	; (800731c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80072e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80072e4:	e002      	b.n	80072ec <LoopCopyDataInit>

080072e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80072e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80072e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80072ea:	3304      	adds	r3, #4

080072ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80072ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80072ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80072f0:	d3f9      	bcc.n	80072e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80072f2:	4a0b      	ldr	r2, [pc, #44]	; (8007320 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80072f4:	4c0b      	ldr	r4, [pc, #44]	; (8007324 <LoopFillZerobss+0x26>)
  movs r3, #0
 80072f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80072f8:	e001      	b.n	80072fe <LoopFillZerobss>

080072fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80072fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80072fc:	3204      	adds	r2, #4

080072fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80072fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007300:	d3fb      	bcc.n	80072fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8007302:	f7fe fb6b 	bl	80059dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007306:	f00d fb8d 	bl	8014a24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800730a:	f7fa f911 	bl	8001530 <main>
  bx  lr    
 800730e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007310:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8007314:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007318:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 800731c:	080180d8 	.word	0x080180d8
  ldr r2, =_sbss
 8007320:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 8007324:	20009504 	.word	0x20009504

08007328 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007328:	e7fe      	b.n	8007328 <ADC_IRQHandler>

0800732a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800732a:	b580      	push	{r7, lr}
 800732c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800732e:	2003      	movs	r0, #3
 8007330:	f000 fb8d 	bl	8007a4e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007334:	2000      	movs	r0, #0
 8007336:	f7fe fa45 	bl	80057c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800733a:	f7fd fd5d 	bl	8004df8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800733e:	2300      	movs	r3, #0
}
 8007340:	4618      	mov	r0, r3
 8007342:	bd80      	pop	{r7, pc}

08007344 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007344:	b480      	push	{r7}
 8007346:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007348:	4b06      	ldr	r3, [pc, #24]	; (8007364 <HAL_IncTick+0x20>)
 800734a:	781b      	ldrb	r3, [r3, #0]
 800734c:	461a      	mov	r2, r3
 800734e:	4b06      	ldr	r3, [pc, #24]	; (8007368 <HAL_IncTick+0x24>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4413      	add	r3, r2
 8007354:	4a04      	ldr	r2, [pc, #16]	; (8007368 <HAL_IncTick+0x24>)
 8007356:	6013      	str	r3, [r2, #0]
}
 8007358:	bf00      	nop
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr
 8007362:	bf00      	nop
 8007364:	200000ec 	.word	0x200000ec
 8007368:	20000ec0 	.word	0x20000ec0

0800736c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800736c:	b480      	push	{r7}
 800736e:	af00      	add	r7, sp, #0
  return uwTick;
 8007370:	4b03      	ldr	r3, [pc, #12]	; (8007380 <HAL_GetTick+0x14>)
 8007372:	681b      	ldr	r3, [r3, #0]
}
 8007374:	4618      	mov	r0, r3
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr
 800737e:	bf00      	nop
 8007380:	20000ec0 	.word	0x20000ec0

08007384 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b084      	sub	sp, #16
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800738c:	f7ff ffee 	bl	800736c <HAL_GetTick>
 8007390:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800739c:	d005      	beq.n	80073aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800739e:	4b0a      	ldr	r3, [pc, #40]	; (80073c8 <HAL_Delay+0x44>)
 80073a0:	781b      	ldrb	r3, [r3, #0]
 80073a2:	461a      	mov	r2, r3
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	4413      	add	r3, r2
 80073a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80073aa:	bf00      	nop
 80073ac:	f7ff ffde 	bl	800736c <HAL_GetTick>
 80073b0:	4602      	mov	r2, r0
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	1ad3      	subs	r3, r2, r3
 80073b6:	68fa      	ldr	r2, [r7, #12]
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d8f7      	bhi.n	80073ac <HAL_Delay+0x28>
  {
  }
}
 80073bc:	bf00      	nop
 80073be:	bf00      	nop
 80073c0:	3710      	adds	r7, #16
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
 80073c6:	bf00      	nop
 80073c8:	200000ec 	.word	0x200000ec

080073cc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b084      	sub	sp, #16
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80073d4:	2300      	movs	r3, #0
 80073d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d101      	bne.n	80073e2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80073de:	2301      	movs	r3, #1
 80073e0:	e031      	b.n	8007446 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d109      	bne.n	80073fe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f7fd fd2c 	bl	8004e48 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007402:	f003 0310 	and.w	r3, r3, #16
 8007406:	2b00      	cmp	r3, #0
 8007408:	d116      	bne.n	8007438 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800740e:	4b10      	ldr	r3, [pc, #64]	; (8007450 <HAL_ADC_Init+0x84>)
 8007410:	4013      	ands	r3, r2
 8007412:	f043 0202 	orr.w	r2, r3, #2
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 f970 	bl	8007700 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2200      	movs	r2, #0
 8007424:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800742a:	f023 0303 	bic.w	r3, r3, #3
 800742e:	f043 0201 	orr.w	r2, r3, #1
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	641a      	str	r2, [r3, #64]	; 0x40
 8007436:	e001      	b.n	800743c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007438:	2301      	movs	r3, #1
 800743a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2200      	movs	r2, #0
 8007440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007444:	7bfb      	ldrb	r3, [r7, #15]
}
 8007446:	4618      	mov	r0, r3
 8007448:	3710      	adds	r7, #16
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
 800744e:	bf00      	nop
 8007450:	ffffeefd 	.word	0xffffeefd

08007454 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007454:	b480      	push	{r7}
 8007456:	b085      	sub	sp, #20
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800745e:	2300      	movs	r3, #0
 8007460:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007468:	2b01      	cmp	r3, #1
 800746a:	d101      	bne.n	8007470 <HAL_ADC_ConfigChannel+0x1c>
 800746c:	2302      	movs	r3, #2
 800746e:	e136      	b.n	80076de <HAL_ADC_ConfigChannel+0x28a>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2201      	movs	r2, #1
 8007474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	2b09      	cmp	r3, #9
 800747e:	d93a      	bls.n	80074f6 <HAL_ADC_ConfigChannel+0xa2>
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007488:	d035      	beq.n	80074f6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	68d9      	ldr	r1, [r3, #12]
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	b29b      	uxth	r3, r3
 8007496:	461a      	mov	r2, r3
 8007498:	4613      	mov	r3, r2
 800749a:	005b      	lsls	r3, r3, #1
 800749c:	4413      	add	r3, r2
 800749e:	3b1e      	subs	r3, #30
 80074a0:	2207      	movs	r2, #7
 80074a2:	fa02 f303 	lsl.w	r3, r2, r3
 80074a6:	43da      	mvns	r2, r3
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	400a      	ands	r2, r1
 80074ae:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a8d      	ldr	r2, [pc, #564]	; (80076ec <HAL_ADC_ConfigChannel+0x298>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d10a      	bne.n	80074d0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	68d9      	ldr	r1, [r3, #12]
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	061a      	lsls	r2, r3, #24
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	430a      	orrs	r2, r1
 80074cc:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80074ce:	e035      	b.n	800753c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	68d9      	ldr	r1, [r3, #12]
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	689a      	ldr	r2, [r3, #8]
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	b29b      	uxth	r3, r3
 80074e0:	4618      	mov	r0, r3
 80074e2:	4603      	mov	r3, r0
 80074e4:	005b      	lsls	r3, r3, #1
 80074e6:	4403      	add	r3, r0
 80074e8:	3b1e      	subs	r3, #30
 80074ea:	409a      	lsls	r2, r3
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	430a      	orrs	r2, r1
 80074f2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80074f4:	e022      	b.n	800753c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	6919      	ldr	r1, [r3, #16]
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	b29b      	uxth	r3, r3
 8007502:	461a      	mov	r2, r3
 8007504:	4613      	mov	r3, r2
 8007506:	005b      	lsls	r3, r3, #1
 8007508:	4413      	add	r3, r2
 800750a:	2207      	movs	r2, #7
 800750c:	fa02 f303 	lsl.w	r3, r2, r3
 8007510:	43da      	mvns	r2, r3
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	400a      	ands	r2, r1
 8007518:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	6919      	ldr	r1, [r3, #16]
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	689a      	ldr	r2, [r3, #8]
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	b29b      	uxth	r3, r3
 800752a:	4618      	mov	r0, r3
 800752c:	4603      	mov	r3, r0
 800752e:	005b      	lsls	r3, r3, #1
 8007530:	4403      	add	r3, r0
 8007532:	409a      	lsls	r2, r3
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	430a      	orrs	r2, r1
 800753a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	2b06      	cmp	r3, #6
 8007542:	d824      	bhi.n	800758e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	685a      	ldr	r2, [r3, #4]
 800754e:	4613      	mov	r3, r2
 8007550:	009b      	lsls	r3, r3, #2
 8007552:	4413      	add	r3, r2
 8007554:	3b05      	subs	r3, #5
 8007556:	221f      	movs	r2, #31
 8007558:	fa02 f303 	lsl.w	r3, r2, r3
 800755c:	43da      	mvns	r2, r3
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	400a      	ands	r2, r1
 8007564:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	b29b      	uxth	r3, r3
 8007572:	4618      	mov	r0, r3
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	685a      	ldr	r2, [r3, #4]
 8007578:	4613      	mov	r3, r2
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	4413      	add	r3, r2
 800757e:	3b05      	subs	r3, #5
 8007580:	fa00 f203 	lsl.w	r2, r0, r3
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	430a      	orrs	r2, r1
 800758a:	635a      	str	r2, [r3, #52]	; 0x34
 800758c:	e04c      	b.n	8007628 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	2b0c      	cmp	r3, #12
 8007594:	d824      	bhi.n	80075e0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	685a      	ldr	r2, [r3, #4]
 80075a0:	4613      	mov	r3, r2
 80075a2:	009b      	lsls	r3, r3, #2
 80075a4:	4413      	add	r3, r2
 80075a6:	3b23      	subs	r3, #35	; 0x23
 80075a8:	221f      	movs	r2, #31
 80075aa:	fa02 f303 	lsl.w	r3, r2, r3
 80075ae:	43da      	mvns	r2, r3
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	400a      	ands	r2, r1
 80075b6:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	4618      	mov	r0, r3
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	685a      	ldr	r2, [r3, #4]
 80075ca:	4613      	mov	r3, r2
 80075cc:	009b      	lsls	r3, r3, #2
 80075ce:	4413      	add	r3, r2
 80075d0:	3b23      	subs	r3, #35	; 0x23
 80075d2:	fa00 f203 	lsl.w	r2, r0, r3
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	430a      	orrs	r2, r1
 80075dc:	631a      	str	r2, [r3, #48]	; 0x30
 80075de:	e023      	b.n	8007628 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	685a      	ldr	r2, [r3, #4]
 80075ea:	4613      	mov	r3, r2
 80075ec:	009b      	lsls	r3, r3, #2
 80075ee:	4413      	add	r3, r2
 80075f0:	3b41      	subs	r3, #65	; 0x41
 80075f2:	221f      	movs	r2, #31
 80075f4:	fa02 f303 	lsl.w	r3, r2, r3
 80075f8:	43da      	mvns	r2, r3
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	400a      	ands	r2, r1
 8007600:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	b29b      	uxth	r3, r3
 800760e:	4618      	mov	r0, r3
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	685a      	ldr	r2, [r3, #4]
 8007614:	4613      	mov	r3, r2
 8007616:	009b      	lsls	r3, r3, #2
 8007618:	4413      	add	r3, r2
 800761a:	3b41      	subs	r3, #65	; 0x41
 800761c:	fa00 f203 	lsl.w	r2, r0, r3
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	430a      	orrs	r2, r1
 8007626:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a30      	ldr	r2, [pc, #192]	; (80076f0 <HAL_ADC_ConfigChannel+0x29c>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d10a      	bne.n	8007648 <HAL_ADC_ConfigChannel+0x1f4>
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800763a:	d105      	bne.n	8007648 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800763c:	4b2d      	ldr	r3, [pc, #180]	; (80076f4 <HAL_ADC_ConfigChannel+0x2a0>)
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	4a2c      	ldr	r2, [pc, #176]	; (80076f4 <HAL_ADC_ConfigChannel+0x2a0>)
 8007642:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8007646:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a28      	ldr	r2, [pc, #160]	; (80076f0 <HAL_ADC_ConfigChannel+0x29c>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d10f      	bne.n	8007672 <HAL_ADC_ConfigChannel+0x21e>
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	2b12      	cmp	r3, #18
 8007658:	d10b      	bne.n	8007672 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800765a:	4b26      	ldr	r3, [pc, #152]	; (80076f4 <HAL_ADC_ConfigChannel+0x2a0>)
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	4a25      	ldr	r2, [pc, #148]	; (80076f4 <HAL_ADC_ConfigChannel+0x2a0>)
 8007660:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007664:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8007666:	4b23      	ldr	r3, [pc, #140]	; (80076f4 <HAL_ADC_ConfigChannel+0x2a0>)
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	4a22      	ldr	r2, [pc, #136]	; (80076f4 <HAL_ADC_ConfigChannel+0x2a0>)
 800766c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007670:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a1e      	ldr	r2, [pc, #120]	; (80076f0 <HAL_ADC_ConfigChannel+0x29c>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d12b      	bne.n	80076d4 <HAL_ADC_ConfigChannel+0x280>
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a1a      	ldr	r2, [pc, #104]	; (80076ec <HAL_ADC_ConfigChannel+0x298>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d003      	beq.n	800768e <HAL_ADC_ConfigChannel+0x23a>
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	2b11      	cmp	r3, #17
 800768c:	d122      	bne.n	80076d4 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800768e:	4b19      	ldr	r3, [pc, #100]	; (80076f4 <HAL_ADC_ConfigChannel+0x2a0>)
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	4a18      	ldr	r2, [pc, #96]	; (80076f4 <HAL_ADC_ConfigChannel+0x2a0>)
 8007694:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8007698:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800769a:	4b16      	ldr	r3, [pc, #88]	; (80076f4 <HAL_ADC_ConfigChannel+0x2a0>)
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	4a15      	ldr	r2, [pc, #84]	; (80076f4 <HAL_ADC_ConfigChannel+0x2a0>)
 80076a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80076a4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a10      	ldr	r2, [pc, #64]	; (80076ec <HAL_ADC_ConfigChannel+0x298>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d111      	bne.n	80076d4 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80076b0:	4b11      	ldr	r3, [pc, #68]	; (80076f8 <HAL_ADC_ConfigChannel+0x2a4>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a11      	ldr	r2, [pc, #68]	; (80076fc <HAL_ADC_ConfigChannel+0x2a8>)
 80076b6:	fba2 2303 	umull	r2, r3, r2, r3
 80076ba:	0c9a      	lsrs	r2, r3, #18
 80076bc:	4613      	mov	r3, r2
 80076be:	009b      	lsls	r3, r3, #2
 80076c0:	4413      	add	r3, r2
 80076c2:	005b      	lsls	r3, r3, #1
 80076c4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80076c6:	e002      	b.n	80076ce <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	3b01      	subs	r3, #1
 80076cc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d1f9      	bne.n	80076c8 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2200      	movs	r2, #0
 80076d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80076dc:	2300      	movs	r3, #0
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3714      	adds	r7, #20
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr
 80076ea:	bf00      	nop
 80076ec:	10000012 	.word	0x10000012
 80076f0:	40012000 	.word	0x40012000
 80076f4:	40012300 	.word	0x40012300
 80076f8:	200000a8 	.word	0x200000a8
 80076fc:	431bde83 	.word	0x431bde83

08007700 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007700:	b480      	push	{r7}
 8007702:	b083      	sub	sp, #12
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8007708:	4b78      	ldr	r3, [pc, #480]	; (80078ec <ADC_Init+0x1ec>)
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	4a77      	ldr	r2, [pc, #476]	; (80078ec <ADC_Init+0x1ec>)
 800770e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8007712:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8007714:	4b75      	ldr	r3, [pc, #468]	; (80078ec <ADC_Init+0x1ec>)
 8007716:	685a      	ldr	r2, [r3, #4]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	4973      	ldr	r1, [pc, #460]	; (80078ec <ADC_Init+0x1ec>)
 800771e:	4313      	orrs	r3, r2
 8007720:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	685a      	ldr	r2, [r3, #4]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007730:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	6859      	ldr	r1, [r3, #4]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	691b      	ldr	r3, [r3, #16]
 800773c:	021a      	lsls	r2, r3, #8
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	430a      	orrs	r2, r1
 8007744:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	685a      	ldr	r2, [r3, #4]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007754:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	6859      	ldr	r1, [r3, #4]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	689a      	ldr	r2, [r3, #8]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	430a      	orrs	r2, r1
 8007766:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	689a      	ldr	r2, [r3, #8]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007776:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	6899      	ldr	r1, [r3, #8]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	68da      	ldr	r2, [r3, #12]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	430a      	orrs	r2, r1
 8007788:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800778e:	4a58      	ldr	r2, [pc, #352]	; (80078f0 <ADC_Init+0x1f0>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d022      	beq.n	80077da <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	689a      	ldr	r2, [r3, #8]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80077a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	6899      	ldr	r1, [r3, #8]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	430a      	orrs	r2, r1
 80077b4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	689a      	ldr	r2, [r3, #8]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80077c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	6899      	ldr	r1, [r3, #8]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	430a      	orrs	r2, r1
 80077d6:	609a      	str	r2, [r3, #8]
 80077d8:	e00f      	b.n	80077fa <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	689a      	ldr	r2, [r3, #8]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80077e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	689a      	ldr	r2, [r3, #8]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80077f8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	689a      	ldr	r2, [r3, #8]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f022 0202 	bic.w	r2, r2, #2
 8007808:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	6899      	ldr	r1, [r3, #8]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	699b      	ldr	r3, [r3, #24]
 8007814:	005a      	lsls	r2, r3, #1
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	430a      	orrs	r2, r1
 800781c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d01b      	beq.n	8007860 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	685a      	ldr	r2, [r3, #4]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007836:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	685a      	ldr	r2, [r3, #4]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007846:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	6859      	ldr	r1, [r3, #4]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007852:	3b01      	subs	r3, #1
 8007854:	035a      	lsls	r2, r3, #13
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	430a      	orrs	r2, r1
 800785c:	605a      	str	r2, [r3, #4]
 800785e:	e007      	b.n	8007870 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	685a      	ldr	r2, [r3, #4]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800786e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800787e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	69db      	ldr	r3, [r3, #28]
 800788a:	3b01      	subs	r3, #1
 800788c:	051a      	lsls	r2, r3, #20
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	430a      	orrs	r2, r1
 8007894:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	689a      	ldr	r2, [r3, #8]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80078a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	6899      	ldr	r1, [r3, #8]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80078b2:	025a      	lsls	r2, r3, #9
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	430a      	orrs	r2, r1
 80078ba:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	689a      	ldr	r2, [r3, #8]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	6899      	ldr	r1, [r3, #8]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	695b      	ldr	r3, [r3, #20]
 80078d6:	029a      	lsls	r2, r3, #10
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	430a      	orrs	r2, r1
 80078de:	609a      	str	r2, [r3, #8]
}
 80078e0:	bf00      	nop
 80078e2:	370c      	adds	r7, #12
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr
 80078ec:	40012300 	.word	0x40012300
 80078f0:	0f000001 	.word	0x0f000001

080078f4 <__NVIC_SetPriorityGrouping>:
{
 80078f4:	b480      	push	{r7}
 80078f6:	b085      	sub	sp, #20
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f003 0307 	and.w	r3, r3, #7
 8007902:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007904:	4b0b      	ldr	r3, [pc, #44]	; (8007934 <__NVIC_SetPriorityGrouping+0x40>)
 8007906:	68db      	ldr	r3, [r3, #12]
 8007908:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800790a:	68ba      	ldr	r2, [r7, #8]
 800790c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007910:	4013      	ands	r3, r2
 8007912:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800791c:	4b06      	ldr	r3, [pc, #24]	; (8007938 <__NVIC_SetPriorityGrouping+0x44>)
 800791e:	4313      	orrs	r3, r2
 8007920:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007922:	4a04      	ldr	r2, [pc, #16]	; (8007934 <__NVIC_SetPriorityGrouping+0x40>)
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	60d3      	str	r3, [r2, #12]
}
 8007928:	bf00      	nop
 800792a:	3714      	adds	r7, #20
 800792c:	46bd      	mov	sp, r7
 800792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007932:	4770      	bx	lr
 8007934:	e000ed00 	.word	0xe000ed00
 8007938:	05fa0000 	.word	0x05fa0000

0800793c <__NVIC_GetPriorityGrouping>:
{
 800793c:	b480      	push	{r7}
 800793e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007940:	4b04      	ldr	r3, [pc, #16]	; (8007954 <__NVIC_GetPriorityGrouping+0x18>)
 8007942:	68db      	ldr	r3, [r3, #12]
 8007944:	0a1b      	lsrs	r3, r3, #8
 8007946:	f003 0307 	and.w	r3, r3, #7
}
 800794a:	4618      	mov	r0, r3
 800794c:	46bd      	mov	sp, r7
 800794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007952:	4770      	bx	lr
 8007954:	e000ed00 	.word	0xe000ed00

08007958 <__NVIC_EnableIRQ>:
{
 8007958:	b480      	push	{r7}
 800795a:	b083      	sub	sp, #12
 800795c:	af00      	add	r7, sp, #0
 800795e:	4603      	mov	r3, r0
 8007960:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007966:	2b00      	cmp	r3, #0
 8007968:	db0b      	blt.n	8007982 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800796a:	79fb      	ldrb	r3, [r7, #7]
 800796c:	f003 021f 	and.w	r2, r3, #31
 8007970:	4907      	ldr	r1, [pc, #28]	; (8007990 <__NVIC_EnableIRQ+0x38>)
 8007972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007976:	095b      	lsrs	r3, r3, #5
 8007978:	2001      	movs	r0, #1
 800797a:	fa00 f202 	lsl.w	r2, r0, r2
 800797e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007982:	bf00      	nop
 8007984:	370c      	adds	r7, #12
 8007986:	46bd      	mov	sp, r7
 8007988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798c:	4770      	bx	lr
 800798e:	bf00      	nop
 8007990:	e000e100 	.word	0xe000e100

08007994 <__NVIC_SetPriority>:
{
 8007994:	b480      	push	{r7}
 8007996:	b083      	sub	sp, #12
 8007998:	af00      	add	r7, sp, #0
 800799a:	4603      	mov	r3, r0
 800799c:	6039      	str	r1, [r7, #0]
 800799e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80079a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	db0a      	blt.n	80079be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	b2da      	uxtb	r2, r3
 80079ac:	490c      	ldr	r1, [pc, #48]	; (80079e0 <__NVIC_SetPriority+0x4c>)
 80079ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079b2:	0112      	lsls	r2, r2, #4
 80079b4:	b2d2      	uxtb	r2, r2
 80079b6:	440b      	add	r3, r1
 80079b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80079bc:	e00a      	b.n	80079d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	b2da      	uxtb	r2, r3
 80079c2:	4908      	ldr	r1, [pc, #32]	; (80079e4 <__NVIC_SetPriority+0x50>)
 80079c4:	79fb      	ldrb	r3, [r7, #7]
 80079c6:	f003 030f 	and.w	r3, r3, #15
 80079ca:	3b04      	subs	r3, #4
 80079cc:	0112      	lsls	r2, r2, #4
 80079ce:	b2d2      	uxtb	r2, r2
 80079d0:	440b      	add	r3, r1
 80079d2:	761a      	strb	r2, [r3, #24]
}
 80079d4:	bf00      	nop
 80079d6:	370c      	adds	r7, #12
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr
 80079e0:	e000e100 	.word	0xe000e100
 80079e4:	e000ed00 	.word	0xe000ed00

080079e8 <NVIC_EncodePriority>:
{
 80079e8:	b480      	push	{r7}
 80079ea:	b089      	sub	sp, #36	; 0x24
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	60f8      	str	r0, [r7, #12]
 80079f0:	60b9      	str	r1, [r7, #8]
 80079f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f003 0307 	and.w	r3, r3, #7
 80079fa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80079fc:	69fb      	ldr	r3, [r7, #28]
 80079fe:	f1c3 0307 	rsb	r3, r3, #7
 8007a02:	2b04      	cmp	r3, #4
 8007a04:	bf28      	it	cs
 8007a06:	2304      	movcs	r3, #4
 8007a08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007a0a:	69fb      	ldr	r3, [r7, #28]
 8007a0c:	3304      	adds	r3, #4
 8007a0e:	2b06      	cmp	r3, #6
 8007a10:	d902      	bls.n	8007a18 <NVIC_EncodePriority+0x30>
 8007a12:	69fb      	ldr	r3, [r7, #28]
 8007a14:	3b03      	subs	r3, #3
 8007a16:	e000      	b.n	8007a1a <NVIC_EncodePriority+0x32>
 8007a18:	2300      	movs	r3, #0
 8007a1a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8007a20:	69bb      	ldr	r3, [r7, #24]
 8007a22:	fa02 f303 	lsl.w	r3, r2, r3
 8007a26:	43da      	mvns	r2, r3
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	401a      	ands	r2, r3
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007a30:	f04f 31ff 	mov.w	r1, #4294967295
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	fa01 f303 	lsl.w	r3, r1, r3
 8007a3a:	43d9      	mvns	r1, r3
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a40:	4313      	orrs	r3, r2
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3724      	adds	r7, #36	; 0x24
 8007a46:	46bd      	mov	sp, r7
 8007a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4c:	4770      	bx	lr

08007a4e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007a4e:	b580      	push	{r7, lr}
 8007a50:	b082      	sub	sp, #8
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f7ff ff4c 	bl	80078f4 <__NVIC_SetPriorityGrouping>
}
 8007a5c:	bf00      	nop
 8007a5e:	3708      	adds	r7, #8
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}

08007a64 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b086      	sub	sp, #24
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	60b9      	str	r1, [r7, #8]
 8007a6e:	607a      	str	r2, [r7, #4]
 8007a70:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007a72:	2300      	movs	r3, #0
 8007a74:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007a76:	f7ff ff61 	bl	800793c <__NVIC_GetPriorityGrouping>
 8007a7a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007a7c:	687a      	ldr	r2, [r7, #4]
 8007a7e:	68b9      	ldr	r1, [r7, #8]
 8007a80:	6978      	ldr	r0, [r7, #20]
 8007a82:	f7ff ffb1 	bl	80079e8 <NVIC_EncodePriority>
 8007a86:	4602      	mov	r2, r0
 8007a88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a8c:	4611      	mov	r1, r2
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f7ff ff80 	bl	8007994 <__NVIC_SetPriority>
}
 8007a94:	bf00      	nop
 8007a96:	3718      	adds	r7, #24
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}

08007a9c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b082      	sub	sp, #8
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f7ff ff54 	bl	8007958 <__NVIC_EnableIRQ>
}
 8007ab0:	bf00      	nop
 8007ab2:	3708      	adds	r7, #8
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}

08007ab8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b086      	sub	sp, #24
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007ac4:	f7ff fc52 	bl	800736c <HAL_GetTick>
 8007ac8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d101      	bne.n	8007ad4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	e099      	b.n	8007c08 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2202      	movs	r2, #2
 8007ad8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f022 0201 	bic.w	r2, r2, #1
 8007af2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007af4:	e00f      	b.n	8007b16 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007af6:	f7ff fc39 	bl	800736c <HAL_GetTick>
 8007afa:	4602      	mov	r2, r0
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	1ad3      	subs	r3, r2, r3
 8007b00:	2b05      	cmp	r3, #5
 8007b02:	d908      	bls.n	8007b16 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2220      	movs	r2, #32
 8007b08:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2203      	movs	r2, #3
 8007b0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007b12:	2303      	movs	r3, #3
 8007b14:	e078      	b.n	8007c08 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f003 0301 	and.w	r3, r3, #1
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d1e8      	bne.n	8007af6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007b2c:	697a      	ldr	r2, [r7, #20]
 8007b2e:	4b38      	ldr	r3, [pc, #224]	; (8007c10 <HAL_DMA_Init+0x158>)
 8007b30:	4013      	ands	r3, r2
 8007b32:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	685a      	ldr	r2, [r3, #4]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	689b      	ldr	r3, [r3, #8]
 8007b3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007b42:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	691b      	ldr	r3, [r3, #16]
 8007b48:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	699b      	ldr	r3, [r3, #24]
 8007b54:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b5a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6a1b      	ldr	r3, [r3, #32]
 8007b60:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007b62:	697a      	ldr	r2, [r7, #20]
 8007b64:	4313      	orrs	r3, r2
 8007b66:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b6c:	2b04      	cmp	r3, #4
 8007b6e:	d107      	bne.n	8007b80 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	697a      	ldr	r2, [r7, #20]
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	697a      	ldr	r2, [r7, #20]
 8007b86:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	695b      	ldr	r3, [r3, #20]
 8007b8e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	f023 0307 	bic.w	r3, r3, #7
 8007b96:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b9c:	697a      	ldr	r2, [r7, #20]
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba6:	2b04      	cmp	r3, #4
 8007ba8:	d117      	bne.n	8007bda <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bae:	697a      	ldr	r2, [r7, #20]
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d00e      	beq.n	8007bda <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f000 fb03 	bl	80081c8 <DMA_CheckFifoParam>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d008      	beq.n	8007bda <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2240      	movs	r2, #64	; 0x40
 8007bcc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	e016      	b.n	8007c08 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	697a      	ldr	r2, [r7, #20]
 8007be0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 faba 	bl	800815c <DMA_CalcBaseAndBitshift>
 8007be8:	4603      	mov	r3, r0
 8007bea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bf0:	223f      	movs	r2, #63	; 0x3f
 8007bf2:	409a      	lsls	r2, r3
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2201      	movs	r2, #1
 8007c02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007c06:	2300      	movs	r3, #0
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3718      	adds	r7, #24
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}
 8007c10:	f010803f 	.word	0xf010803f

08007c14 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b084      	sub	sp, #16
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d101      	bne.n	8007c26 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8007c22:	2301      	movs	r3, #1
 8007c24:	e050      	b.n	8007cc8 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007c2c:	b2db      	uxtb	r3, r3
 8007c2e:	2b02      	cmp	r3, #2
 8007c30:	d101      	bne.n	8007c36 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8007c32:	2302      	movs	r3, #2
 8007c34:	e048      	b.n	8007cc8 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	681a      	ldr	r2, [r3, #0]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f022 0201 	bic.w	r2, r2, #1
 8007c44:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	2200      	movs	r2, #0
 8007c54:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	2200      	movs	r2, #0
 8007c64:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	2221      	movs	r2, #33	; 0x21
 8007c74:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 fa70 	bl	800815c <DMA_CalcBaseAndBitshift>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c84:	223f      	movs	r2, #63	; 0x3f
 8007c86:	409a      	lsls	r2, r3
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2200      	movs	r2, #0
 8007cae:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007cc6:	2300      	movs	r3, #0
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3710      	adds	r7, #16
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b086      	sub	sp, #24
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	60f8      	str	r0, [r7, #12]
 8007cd8:	60b9      	str	r1, [r7, #8]
 8007cda:	607a      	str	r2, [r7, #4]
 8007cdc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ce6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	d101      	bne.n	8007cf6 <HAL_DMA_Start_IT+0x26>
 8007cf2:	2302      	movs	r3, #2
 8007cf4:	e048      	b.n	8007d88 <HAL_DMA_Start_IT+0xb8>
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007d04:	b2db      	uxtb	r3, r3
 8007d06:	2b01      	cmp	r3, #1
 8007d08:	d137      	bne.n	8007d7a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2202      	movs	r2, #2
 8007d0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2200      	movs	r2, #0
 8007d16:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	687a      	ldr	r2, [r7, #4]
 8007d1c:	68b9      	ldr	r1, [r7, #8]
 8007d1e:	68f8      	ldr	r0, [r7, #12]
 8007d20:	f000 f9ee 	bl	8008100 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d28:	223f      	movs	r2, #63	; 0x3f
 8007d2a:	409a      	lsls	r2, r3
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	681a      	ldr	r2, [r3, #0]
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f042 0216 	orr.w	r2, r2, #22
 8007d3e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	695a      	ldr	r2, [r3, #20]
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007d4e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d007      	beq.n	8007d68 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	681a      	ldr	r2, [r3, #0]
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f042 0208 	orr.w	r2, r2, #8
 8007d66:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	681a      	ldr	r2, [r3, #0]
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f042 0201 	orr.w	r2, r2, #1
 8007d76:	601a      	str	r2, [r3, #0]
 8007d78:	e005      	b.n	8007d86 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007d82:	2302      	movs	r3, #2
 8007d84:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007d86:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3718      	adds	r7, #24
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b083      	sub	sp, #12
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	2b02      	cmp	r3, #2
 8007da2:	d004      	beq.n	8007dae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2280      	movs	r2, #128	; 0x80
 8007da8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007daa:	2301      	movs	r3, #1
 8007dac:	e00c      	b.n	8007dc8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2205      	movs	r2, #5
 8007db2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	681a      	ldr	r2, [r3, #0]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f022 0201 	bic.w	r2, r2, #1
 8007dc4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007dc6:	2300      	movs	r3, #0
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	370c      	adds	r7, #12
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd2:	4770      	bx	lr

08007dd4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b086      	sub	sp, #24
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8007de0:	4b8e      	ldr	r3, [pc, #568]	; (800801c <HAL_DMA_IRQHandler+0x248>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a8e      	ldr	r2, [pc, #568]	; (8008020 <HAL_DMA_IRQHandler+0x24c>)
 8007de6:	fba2 2303 	umull	r2, r3, r2, r3
 8007dea:	0a9b      	lsrs	r3, r3, #10
 8007dec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007df2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dfe:	2208      	movs	r2, #8
 8007e00:	409a      	lsls	r2, r3
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	4013      	ands	r3, r2
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d01a      	beq.n	8007e40 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f003 0304 	and.w	r3, r3, #4
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d013      	beq.n	8007e40 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	681a      	ldr	r2, [r3, #0]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f022 0204 	bic.w	r2, r2, #4
 8007e26:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e2c:	2208      	movs	r2, #8
 8007e2e:	409a      	lsls	r2, r3
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e38:	f043 0201 	orr.w	r2, r3, #1
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e44:	2201      	movs	r2, #1
 8007e46:	409a      	lsls	r2, r3
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	4013      	ands	r3, r2
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d012      	beq.n	8007e76 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	695b      	ldr	r3, [r3, #20]
 8007e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d00b      	beq.n	8007e76 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e62:	2201      	movs	r2, #1
 8007e64:	409a      	lsls	r2, r3
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e6e:	f043 0202 	orr.w	r2, r3, #2
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e7a:	2204      	movs	r2, #4
 8007e7c:	409a      	lsls	r2, r3
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	4013      	ands	r3, r2
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d012      	beq.n	8007eac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f003 0302 	and.w	r3, r3, #2
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d00b      	beq.n	8007eac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e98:	2204      	movs	r2, #4
 8007e9a:	409a      	lsls	r2, r3
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ea4:	f043 0204 	orr.w	r2, r3, #4
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007eb0:	2210      	movs	r2, #16
 8007eb2:	409a      	lsls	r2, r3
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	4013      	ands	r3, r2
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d043      	beq.n	8007f44 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f003 0308 	and.w	r3, r3, #8
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d03c      	beq.n	8007f44 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ece:	2210      	movs	r2, #16
 8007ed0:	409a      	lsls	r2, r3
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d018      	beq.n	8007f16 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d108      	bne.n	8007f04 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d024      	beq.n	8007f44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	4798      	blx	r3
 8007f02:	e01f      	b.n	8007f44 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d01b      	beq.n	8007f44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	4798      	blx	r3
 8007f14:	e016      	b.n	8007f44 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d107      	bne.n	8007f34 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	681a      	ldr	r2, [r3, #0]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f022 0208 	bic.w	r2, r2, #8
 8007f32:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d003      	beq.n	8007f44 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f48:	2220      	movs	r2, #32
 8007f4a:	409a      	lsls	r2, r3
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	4013      	ands	r3, r2
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	f000 808f 	beq.w	8008074 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f003 0310 	and.w	r3, r3, #16
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	f000 8087 	beq.w	8008074 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f6a:	2220      	movs	r2, #32
 8007f6c:	409a      	lsls	r2, r3
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007f78:	b2db      	uxtb	r3, r3
 8007f7a:	2b05      	cmp	r3, #5
 8007f7c:	d136      	bne.n	8007fec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	681a      	ldr	r2, [r3, #0]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f022 0216 	bic.w	r2, r2, #22
 8007f8c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	695a      	ldr	r2, [r3, #20]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007f9c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d103      	bne.n	8007fae <HAL_DMA_IRQHandler+0x1da>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d007      	beq.n	8007fbe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f022 0208 	bic.w	r2, r2, #8
 8007fbc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fc2:	223f      	movs	r2, #63	; 0x3f
 8007fc4:	409a      	lsls	r2, r3
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2201      	movs	r2, #1
 8007fce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d07e      	beq.n	80080e0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	4798      	blx	r3
        }
        return;
 8007fea:	e079      	b.n	80080e0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d01d      	beq.n	8008036 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008004:	2b00      	cmp	r3, #0
 8008006:	d10d      	bne.n	8008024 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800800c:	2b00      	cmp	r3, #0
 800800e:	d031      	beq.n	8008074 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	4798      	blx	r3
 8008018:	e02c      	b.n	8008074 <HAL_DMA_IRQHandler+0x2a0>
 800801a:	bf00      	nop
 800801c:	200000a8 	.word	0x200000a8
 8008020:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008028:	2b00      	cmp	r3, #0
 800802a:	d023      	beq.n	8008074 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	4798      	blx	r3
 8008034:	e01e      	b.n	8008074 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008040:	2b00      	cmp	r3, #0
 8008042:	d10f      	bne.n	8008064 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	681a      	ldr	r2, [r3, #0]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f022 0210 	bic.w	r2, r2, #16
 8008052:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2201      	movs	r2, #1
 8008058:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2200      	movs	r2, #0
 8008060:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008068:	2b00      	cmp	r3, #0
 800806a:	d003      	beq.n	8008074 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008078:	2b00      	cmp	r3, #0
 800807a:	d032      	beq.n	80080e2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008080:	f003 0301 	and.w	r3, r3, #1
 8008084:	2b00      	cmp	r3, #0
 8008086:	d022      	beq.n	80080ce <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2205      	movs	r2, #5
 800808c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	681a      	ldr	r2, [r3, #0]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f022 0201 	bic.w	r2, r2, #1
 800809e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	3301      	adds	r3, #1
 80080a4:	60bb      	str	r3, [r7, #8]
 80080a6:	697a      	ldr	r2, [r7, #20]
 80080a8:	429a      	cmp	r2, r3
 80080aa:	d307      	bcc.n	80080bc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f003 0301 	and.w	r3, r3, #1
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d1f2      	bne.n	80080a0 <HAL_DMA_IRQHandler+0x2cc>
 80080ba:	e000      	b.n	80080be <HAL_DMA_IRQHandler+0x2ea>
          break;
 80080bc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2201      	movs	r2, #1
 80080c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2200      	movs	r2, #0
 80080ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d005      	beq.n	80080e2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	4798      	blx	r3
 80080de:	e000      	b.n	80080e2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80080e0:	bf00      	nop
    }
  }
}
 80080e2:	3718      	adds	r7, #24
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}

080080e8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b083      	sub	sp, #12
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	370c      	adds	r7, #12
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr

08008100 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008100:	b480      	push	{r7}
 8008102:	b085      	sub	sp, #20
 8008104:	af00      	add	r7, sp, #0
 8008106:	60f8      	str	r0, [r7, #12]
 8008108:	60b9      	str	r1, [r7, #8]
 800810a:	607a      	str	r2, [r7, #4]
 800810c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	681a      	ldr	r2, [r3, #0]
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800811c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	683a      	ldr	r2, [r7, #0]
 8008124:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	689b      	ldr	r3, [r3, #8]
 800812a:	2b40      	cmp	r3, #64	; 0x40
 800812c:	d108      	bne.n	8008140 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	68ba      	ldr	r2, [r7, #8]
 800813c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800813e:	e007      	b.n	8008150 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	68ba      	ldr	r2, [r7, #8]
 8008146:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	687a      	ldr	r2, [r7, #4]
 800814e:	60da      	str	r2, [r3, #12]
}
 8008150:	bf00      	nop
 8008152:	3714      	adds	r7, #20
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr

0800815c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800815c:	b480      	push	{r7}
 800815e:	b085      	sub	sp, #20
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	b2db      	uxtb	r3, r3
 800816a:	3b10      	subs	r3, #16
 800816c:	4a13      	ldr	r2, [pc, #76]	; (80081bc <DMA_CalcBaseAndBitshift+0x60>)
 800816e:	fba2 2303 	umull	r2, r3, r2, r3
 8008172:	091b      	lsrs	r3, r3, #4
 8008174:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008176:	4a12      	ldr	r2, [pc, #72]	; (80081c0 <DMA_CalcBaseAndBitshift+0x64>)
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	4413      	add	r3, r2
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	461a      	mov	r2, r3
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	2b03      	cmp	r3, #3
 8008188:	d908      	bls.n	800819c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	461a      	mov	r2, r3
 8008190:	4b0c      	ldr	r3, [pc, #48]	; (80081c4 <DMA_CalcBaseAndBitshift+0x68>)
 8008192:	4013      	ands	r3, r2
 8008194:	1d1a      	adds	r2, r3, #4
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	659a      	str	r2, [r3, #88]	; 0x58
 800819a:	e006      	b.n	80081aa <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	461a      	mov	r2, r3
 80081a2:	4b08      	ldr	r3, [pc, #32]	; (80081c4 <DMA_CalcBaseAndBitshift+0x68>)
 80081a4:	4013      	ands	r3, r2
 80081a6:	687a      	ldr	r2, [r7, #4]
 80081a8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3714      	adds	r7, #20
 80081b2:	46bd      	mov	sp, r7
 80081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b8:	4770      	bx	lr
 80081ba:	bf00      	nop
 80081bc:	aaaaaaab 	.word	0xaaaaaaab
 80081c0:	08017ff8 	.word	0x08017ff8
 80081c4:	fffffc00 	.word	0xfffffc00

080081c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b085      	sub	sp, #20
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80081d0:	2300      	movs	r3, #0
 80081d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	699b      	ldr	r3, [r3, #24]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d11f      	bne.n	8008222 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	2b03      	cmp	r3, #3
 80081e6:	d856      	bhi.n	8008296 <DMA_CheckFifoParam+0xce>
 80081e8:	a201      	add	r2, pc, #4	; (adr r2, 80081f0 <DMA_CheckFifoParam+0x28>)
 80081ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ee:	bf00      	nop
 80081f0:	08008201 	.word	0x08008201
 80081f4:	08008213 	.word	0x08008213
 80081f8:	08008201 	.word	0x08008201
 80081fc:	08008297 	.word	0x08008297
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008204:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008208:	2b00      	cmp	r3, #0
 800820a:	d046      	beq.n	800829a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800820c:	2301      	movs	r3, #1
 800820e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008210:	e043      	b.n	800829a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008216:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800821a:	d140      	bne.n	800829e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800821c:	2301      	movs	r3, #1
 800821e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008220:	e03d      	b.n	800829e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	699b      	ldr	r3, [r3, #24]
 8008226:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800822a:	d121      	bne.n	8008270 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	2b03      	cmp	r3, #3
 8008230:	d837      	bhi.n	80082a2 <DMA_CheckFifoParam+0xda>
 8008232:	a201      	add	r2, pc, #4	; (adr r2, 8008238 <DMA_CheckFifoParam+0x70>)
 8008234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008238:	08008249 	.word	0x08008249
 800823c:	0800824f 	.word	0x0800824f
 8008240:	08008249 	.word	0x08008249
 8008244:	08008261 	.word	0x08008261
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008248:	2301      	movs	r3, #1
 800824a:	73fb      	strb	r3, [r7, #15]
      break;
 800824c:	e030      	b.n	80082b0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008252:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008256:	2b00      	cmp	r3, #0
 8008258:	d025      	beq.n	80082a6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800825a:	2301      	movs	r3, #1
 800825c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800825e:	e022      	b.n	80082a6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008264:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008268:	d11f      	bne.n	80082aa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800826a:	2301      	movs	r3, #1
 800826c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800826e:	e01c      	b.n	80082aa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	2b02      	cmp	r3, #2
 8008274:	d903      	bls.n	800827e <DMA_CheckFifoParam+0xb6>
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	2b03      	cmp	r3, #3
 800827a:	d003      	beq.n	8008284 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800827c:	e018      	b.n	80082b0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800827e:	2301      	movs	r3, #1
 8008280:	73fb      	strb	r3, [r7, #15]
      break;
 8008282:	e015      	b.n	80082b0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008288:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800828c:	2b00      	cmp	r3, #0
 800828e:	d00e      	beq.n	80082ae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008290:	2301      	movs	r3, #1
 8008292:	73fb      	strb	r3, [r7, #15]
      break;
 8008294:	e00b      	b.n	80082ae <DMA_CheckFifoParam+0xe6>
      break;
 8008296:	bf00      	nop
 8008298:	e00a      	b.n	80082b0 <DMA_CheckFifoParam+0xe8>
      break;
 800829a:	bf00      	nop
 800829c:	e008      	b.n	80082b0 <DMA_CheckFifoParam+0xe8>
      break;
 800829e:	bf00      	nop
 80082a0:	e006      	b.n	80082b0 <DMA_CheckFifoParam+0xe8>
      break;
 80082a2:	bf00      	nop
 80082a4:	e004      	b.n	80082b0 <DMA_CheckFifoParam+0xe8>
      break;
 80082a6:	bf00      	nop
 80082a8:	e002      	b.n	80082b0 <DMA_CheckFifoParam+0xe8>
      break;   
 80082aa:	bf00      	nop
 80082ac:	e000      	b.n	80082b0 <DMA_CheckFifoParam+0xe8>
      break;
 80082ae:	bf00      	nop
    }
  } 
  
  return status; 
 80082b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3714      	adds	r7, #20
 80082b6:	46bd      	mov	sp, r7
 80082b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082bc:	4770      	bx	lr
 80082be:	bf00      	nop

080082c0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b082      	sub	sp, #8
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d101      	bne.n	80082d2 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80082ce:	2301      	movs	r3, #1
 80082d0:	e039      	b.n	8008346 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80082d8:	b2db      	uxtb	r3, r3
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d106      	bne.n	80082ec <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2200      	movs	r2, #0
 80082e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f7fc fe34 	bl	8004f54 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2202      	movs	r2, #2
 80082f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	685a      	ldr	r2, [r3, #4]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	430a      	orrs	r2, r1
 8008308:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008310:	f023 0107 	bic.w	r1, r3, #7
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	689a      	ldr	r2, [r3, #8]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	430a      	orrs	r2, r1
 800831e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008326:	4b0a      	ldr	r3, [pc, #40]	; (8008350 <HAL_DMA2D_Init+0x90>)
 8008328:	4013      	ands	r3, r2
 800832a:	687a      	ldr	r2, [r7, #4]
 800832c:	68d1      	ldr	r1, [r2, #12]
 800832e:	687a      	ldr	r2, [r7, #4]
 8008330:	6812      	ldr	r2, [r2, #0]
 8008332:	430b      	orrs	r3, r1
 8008334:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2200      	movs	r2, #0
 800833a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2201      	movs	r2, #1
 8008340:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8008344:	2300      	movs	r3, #0
}
 8008346:	4618      	mov	r0, r3
 8008348:	3708      	adds	r7, #8
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}
 800834e:	bf00      	nop
 8008350:	ffffc000 	.word	0xffffc000

08008354 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b086      	sub	sp, #24
 8008358:	af02      	add	r7, sp, #8
 800835a:	60f8      	str	r0, [r7, #12]
 800835c:	60b9      	str	r1, [r7, #8]
 800835e:	607a      	str	r2, [r7, #4]
 8008360:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008368:	2b01      	cmp	r3, #1
 800836a:	d101      	bne.n	8008370 <HAL_DMA2D_Start+0x1c>
 800836c:	2302      	movs	r3, #2
 800836e:	e018      	b.n	80083a2 <HAL_DMA2D_Start+0x4e>
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2201      	movs	r2, #1
 8008374:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	2202      	movs	r2, #2
 800837c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8008380:	69bb      	ldr	r3, [r7, #24]
 8008382:	9300      	str	r3, [sp, #0]
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	687a      	ldr	r2, [r7, #4]
 8008388:	68b9      	ldr	r1, [r7, #8]
 800838a:	68f8      	ldr	r0, [r7, #12]
 800838c:	f000 f988 	bl	80086a0 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	681a      	ldr	r2, [r3, #0]
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f042 0201 	orr.w	r2, r2, #1
 800839e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80083a0:	2300      	movs	r3, #0
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3710      	adds	r7, #16
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}

080083aa <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80083aa:	b580      	push	{r7, lr}
 80083ac:	b086      	sub	sp, #24
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	6078      	str	r0, [r7, #4]
 80083b2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80083b4:	2300      	movs	r3, #0
 80083b6:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f003 0301 	and.w	r3, r3, #1
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d056      	beq.n	8008474 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80083c6:	f7fe ffd1 	bl	800736c <HAL_GetTick>
 80083ca:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80083cc:	e04b      	b.n	8008466 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d023      	beq.n	8008428 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f003 0320 	and.w	r3, r3, #32
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d005      	beq.n	80083f6 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083ee:	f043 0202 	orr.w	r2, r3, #2
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	f003 0301 	and.w	r3, r3, #1
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d005      	beq.n	800840c <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008404:	f043 0201 	orr.w	r2, r3, #1
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	2221      	movs	r2, #33	; 0x21
 8008412:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2204      	movs	r2, #4
 8008418:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2200      	movs	r2, #0
 8008420:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8008424:	2301      	movs	r3, #1
 8008426:	e0a5      	b.n	8008574 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800842e:	d01a      	beq.n	8008466 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008430:	f7fe ff9c 	bl	800736c <HAL_GetTick>
 8008434:	4602      	mov	r2, r0
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	1ad3      	subs	r3, r2, r3
 800843a:	683a      	ldr	r2, [r7, #0]
 800843c:	429a      	cmp	r2, r3
 800843e:	d302      	bcc.n	8008446 <HAL_DMA2D_PollForTransfer+0x9c>
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d10f      	bne.n	8008466 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800844a:	f043 0220 	orr.w	r2, r3, #32
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2203      	movs	r2, #3
 8008456:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2200      	movs	r2, #0
 800845e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8008462:	2303      	movs	r3, #3
 8008464:	e086      	b.n	8008574 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	f003 0302 	and.w	r3, r3, #2
 8008470:	2b00      	cmp	r3, #0
 8008472:	d0ac      	beq.n	80083ce <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	69db      	ldr	r3, [r3, #28]
 800847a:	f003 0320 	and.w	r3, r3, #32
 800847e:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008486:	f003 0320 	and.w	r3, r3, #32
 800848a:	693a      	ldr	r2, [r7, #16]
 800848c:	4313      	orrs	r3, r2
 800848e:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d061      	beq.n	800855a <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8008496:	f7fe ff69 	bl	800736c <HAL_GetTick>
 800849a:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800849c:	e056      	b.n	800854c <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	685b      	ldr	r3, [r3, #4]
 80084a4:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d02e      	beq.n	800850e <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	f003 0308 	and.w	r3, r3, #8
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d005      	beq.n	80084c6 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084be:	f043 0204 	orr.w	r2, r3, #4
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	f003 0320 	and.w	r3, r3, #32
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d005      	beq.n	80084dc <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084d4:	f043 0202 	orr.w	r2, r3, #2
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f003 0301 	and.w	r3, r3, #1
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d005      	beq.n	80084f2 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084ea:	f043 0201 	orr.w	r2, r3, #1
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	2229      	movs	r2, #41	; 0x29
 80084f8:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2204      	movs	r2, #4
 80084fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2200      	movs	r2, #0
 8008506:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800850a:	2301      	movs	r3, #1
 800850c:	e032      	b.n	8008574 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008514:	d01a      	beq.n	800854c <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008516:	f7fe ff29 	bl	800736c <HAL_GetTick>
 800851a:	4602      	mov	r2, r0
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	1ad3      	subs	r3, r2, r3
 8008520:	683a      	ldr	r2, [r7, #0]
 8008522:	429a      	cmp	r2, r3
 8008524:	d302      	bcc.n	800852c <HAL_DMA2D_PollForTransfer+0x182>
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d10f      	bne.n	800854c <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008530:	f043 0220 	orr.w	r2, r3, #32
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2203      	movs	r2, #3
 800853c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2200      	movs	r2, #0
 8008544:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8008548:	2303      	movs	r3, #3
 800854a:	e013      	b.n	8008574 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	f003 0310 	and.w	r3, r3, #16
 8008556:	2b00      	cmp	r3, #0
 8008558:	d0a1      	beq.n	800849e <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	2212      	movs	r2, #18
 8008560:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2201      	movs	r2, #1
 8008566:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2200      	movs	r2, #0
 800856e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8008572:	2300      	movs	r3, #0
}
 8008574:	4618      	mov	r0, r3
 8008576:	3718      	adds	r7, #24
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}

0800857c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800857c:	b480      	push	{r7}
 800857e:	b087      	sub	sp, #28
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008594:	2b01      	cmp	r3, #1
 8008596:	d101      	bne.n	800859c <HAL_DMA2D_ConfigLayer+0x20>
 8008598:	2302      	movs	r3, #2
 800859a:	e079      	b.n	8008690 <HAL_DMA2D_ConfigLayer+0x114>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2201      	movs	r2, #1
 80085a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2202      	movs	r2, #2
 80085a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	011b      	lsls	r3, r3, #4
 80085b0:	3318      	adds	r3, #24
 80085b2:	687a      	ldr	r2, [r7, #4]
 80085b4:	4413      	add	r3, r2
 80085b6:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	685a      	ldr	r2, [r3, #4]
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	689b      	ldr	r3, [r3, #8]
 80085c0:	041b      	lsls	r3, r3, #16
 80085c2:	4313      	orrs	r3, r2
 80085c4:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80085c6:	4b35      	ldr	r3, [pc, #212]	; (800869c <HAL_DMA2D_ConfigLayer+0x120>)
 80085c8:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	2b0a      	cmp	r3, #10
 80085d0:	d003      	beq.n	80085da <HAL_DMA2D_ConfigLayer+0x5e>
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	685b      	ldr	r3, [r3, #4]
 80085d6:	2b09      	cmp	r3, #9
 80085d8:	d107      	bne.n	80085ea <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80085da:	693b      	ldr	r3, [r7, #16]
 80085dc:	68db      	ldr	r3, [r3, #12]
 80085de:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80085e2:	697a      	ldr	r2, [r7, #20]
 80085e4:	4313      	orrs	r3, r2
 80085e6:	617b      	str	r3, [r7, #20]
 80085e8:	e005      	b.n	80085f6 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	68db      	ldr	r3, [r3, #12]
 80085ee:	061b      	lsls	r3, r3, #24
 80085f0:	697a      	ldr	r2, [r7, #20]
 80085f2:	4313      	orrs	r3, r2
 80085f4:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d120      	bne.n	800863e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	43db      	mvns	r3, r3
 8008606:	ea02 0103 	and.w	r1, r2, r3
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	697a      	ldr	r2, [r7, #20]
 8008610:	430a      	orrs	r2, r1
 8008612:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	693a      	ldr	r2, [r7, #16]
 800861a:	6812      	ldr	r2, [r2, #0]
 800861c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	685b      	ldr	r3, [r3, #4]
 8008622:	2b0a      	cmp	r3, #10
 8008624:	d003      	beq.n	800862e <HAL_DMA2D_ConfigLayer+0xb2>
 8008626:	693b      	ldr	r3, [r7, #16]
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	2b09      	cmp	r3, #9
 800862c:	d127      	bne.n	800867e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800862e:	693b      	ldr	r3, [r7, #16]
 8008630:	68da      	ldr	r2, [r3, #12]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800863a:	629a      	str	r2, [r3, #40]	; 0x28
 800863c:	e01f      	b.n	800867e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	69da      	ldr	r2, [r3, #28]
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	43db      	mvns	r3, r3
 8008648:	ea02 0103 	and.w	r1, r2, r3
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	697a      	ldr	r2, [r7, #20]
 8008652:	430a      	orrs	r2, r1
 8008654:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	693a      	ldr	r2, [r7, #16]
 800865c:	6812      	ldr	r2, [r2, #0]
 800865e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	2b0a      	cmp	r3, #10
 8008666:	d003      	beq.n	8008670 <HAL_DMA2D_ConfigLayer+0xf4>
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	2b09      	cmp	r3, #9
 800866e:	d106      	bne.n	800867e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	68da      	ldr	r2, [r3, #12]
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800867c:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2201      	movs	r2, #1
 8008682:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2200      	movs	r2, #0
 800868a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800868e:	2300      	movs	r3, #0
}
 8008690:	4618      	mov	r0, r3
 8008692:	371c      	adds	r7, #28
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr
 800869c:	ff03000f 	.word	0xff03000f

080086a0 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b08b      	sub	sp, #44	; 0x2c
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	60f8      	str	r0, [r7, #12]
 80086a8:	60b9      	str	r1, [r7, #8]
 80086aa:	607a      	str	r2, [r7, #4]
 80086ac:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086b4:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	041a      	lsls	r2, r3, #16
 80086bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086be:	431a      	orrs	r2, r3
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	430a      	orrs	r2, r1
 80086c6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	687a      	ldr	r2, [r7, #4]
 80086ce:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80086d8:	d174      	bne.n	80087c4 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80086e0:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80086e8:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80086f0:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	b2db      	uxtb	r3, r3
 80086f6:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	689b      	ldr	r3, [r3, #8]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d108      	bne.n	8008712 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8008700:	69ba      	ldr	r2, [r7, #24]
 8008702:	69fb      	ldr	r3, [r7, #28]
 8008704:	431a      	orrs	r2, r3
 8008706:	6a3b      	ldr	r3, [r7, #32]
 8008708:	4313      	orrs	r3, r2
 800870a:	697a      	ldr	r2, [r7, #20]
 800870c:	4313      	orrs	r3, r2
 800870e:	627b      	str	r3, [r7, #36]	; 0x24
 8008710:	e053      	b.n	80087ba <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	689b      	ldr	r3, [r3, #8]
 8008716:	2b01      	cmp	r3, #1
 8008718:	d106      	bne.n	8008728 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800871a:	69ba      	ldr	r2, [r7, #24]
 800871c:	69fb      	ldr	r3, [r7, #28]
 800871e:	4313      	orrs	r3, r2
 8008720:	697a      	ldr	r2, [r7, #20]
 8008722:	4313      	orrs	r3, r2
 8008724:	627b      	str	r3, [r7, #36]	; 0x24
 8008726:	e048      	b.n	80087ba <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	689b      	ldr	r3, [r3, #8]
 800872c:	2b02      	cmp	r3, #2
 800872e:	d111      	bne.n	8008754 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8008730:	69fb      	ldr	r3, [r7, #28]
 8008732:	0cdb      	lsrs	r3, r3, #19
 8008734:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8008736:	69bb      	ldr	r3, [r7, #24]
 8008738:	0a9b      	lsrs	r3, r3, #10
 800873a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	08db      	lsrs	r3, r3, #3
 8008740:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8008742:	69bb      	ldr	r3, [r7, #24]
 8008744:	015a      	lsls	r2, r3, #5
 8008746:	69fb      	ldr	r3, [r7, #28]
 8008748:	02db      	lsls	r3, r3, #11
 800874a:	4313      	orrs	r3, r2
 800874c:	697a      	ldr	r2, [r7, #20]
 800874e:	4313      	orrs	r3, r2
 8008750:	627b      	str	r3, [r7, #36]	; 0x24
 8008752:	e032      	b.n	80087ba <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	689b      	ldr	r3, [r3, #8]
 8008758:	2b03      	cmp	r3, #3
 800875a:	d117      	bne.n	800878c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 800875c:	6a3b      	ldr	r3, [r7, #32]
 800875e:	0fdb      	lsrs	r3, r3, #31
 8008760:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8008762:	69fb      	ldr	r3, [r7, #28]
 8008764:	0cdb      	lsrs	r3, r3, #19
 8008766:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8008768:	69bb      	ldr	r3, [r7, #24]
 800876a:	0adb      	lsrs	r3, r3, #11
 800876c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	08db      	lsrs	r3, r3, #3
 8008772:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8008774:	69bb      	ldr	r3, [r7, #24]
 8008776:	015a      	lsls	r2, r3, #5
 8008778:	69fb      	ldr	r3, [r7, #28]
 800877a:	029b      	lsls	r3, r3, #10
 800877c:	431a      	orrs	r2, r3
 800877e:	6a3b      	ldr	r3, [r7, #32]
 8008780:	03db      	lsls	r3, r3, #15
 8008782:	4313      	orrs	r3, r2
 8008784:	697a      	ldr	r2, [r7, #20]
 8008786:	4313      	orrs	r3, r2
 8008788:	627b      	str	r3, [r7, #36]	; 0x24
 800878a:	e016      	b.n	80087ba <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 800878c:	6a3b      	ldr	r3, [r7, #32]
 800878e:	0f1b      	lsrs	r3, r3, #28
 8008790:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8008792:	69fb      	ldr	r3, [r7, #28]
 8008794:	0d1b      	lsrs	r3, r3, #20
 8008796:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8008798:	69bb      	ldr	r3, [r7, #24]
 800879a:	0b1b      	lsrs	r3, r3, #12
 800879c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	091b      	lsrs	r3, r3, #4
 80087a2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80087a4:	69bb      	ldr	r3, [r7, #24]
 80087a6:	011a      	lsls	r2, r3, #4
 80087a8:	69fb      	ldr	r3, [r7, #28]
 80087aa:	021b      	lsls	r3, r3, #8
 80087ac:	431a      	orrs	r2, r3
 80087ae:	6a3b      	ldr	r3, [r7, #32]
 80087b0:	031b      	lsls	r3, r3, #12
 80087b2:	4313      	orrs	r3, r2
 80087b4:	697a      	ldr	r2, [r7, #20]
 80087b6:	4313      	orrs	r3, r2
 80087b8:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087c0:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80087c2:	e003      	b.n	80087cc <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	68ba      	ldr	r2, [r7, #8]
 80087ca:	60da      	str	r2, [r3, #12]
}
 80087cc:	bf00      	nop
 80087ce:	372c      	adds	r7, #44	; 0x2c
 80087d0:	46bd      	mov	sp, r7
 80087d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d6:	4770      	bx	lr

080087d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80087d8:	b480      	push	{r7}
 80087da:	b089      	sub	sp, #36	; 0x24
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
 80087e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80087e2:	2300      	movs	r3, #0
 80087e4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80087e6:	2300      	movs	r3, #0
 80087e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80087ea:	2300      	movs	r3, #0
 80087ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80087ee:	2300      	movs	r3, #0
 80087f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80087f2:	2300      	movs	r3, #0
 80087f4:	61fb      	str	r3, [r7, #28]
 80087f6:	e175      	b.n	8008ae4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80087f8:	2201      	movs	r2, #1
 80087fa:	69fb      	ldr	r3, [r7, #28]
 80087fc:	fa02 f303 	lsl.w	r3, r2, r3
 8008800:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	697a      	ldr	r2, [r7, #20]
 8008808:	4013      	ands	r3, r2
 800880a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800880c:	693a      	ldr	r2, [r7, #16]
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	429a      	cmp	r2, r3
 8008812:	f040 8164 	bne.w	8008ade <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	685b      	ldr	r3, [r3, #4]
 800881a:	f003 0303 	and.w	r3, r3, #3
 800881e:	2b01      	cmp	r3, #1
 8008820:	d005      	beq.n	800882e <HAL_GPIO_Init+0x56>
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	685b      	ldr	r3, [r3, #4]
 8008826:	f003 0303 	and.w	r3, r3, #3
 800882a:	2b02      	cmp	r3, #2
 800882c:	d130      	bne.n	8008890 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	689b      	ldr	r3, [r3, #8]
 8008832:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008834:	69fb      	ldr	r3, [r7, #28]
 8008836:	005b      	lsls	r3, r3, #1
 8008838:	2203      	movs	r2, #3
 800883a:	fa02 f303 	lsl.w	r3, r2, r3
 800883e:	43db      	mvns	r3, r3
 8008840:	69ba      	ldr	r2, [r7, #24]
 8008842:	4013      	ands	r3, r2
 8008844:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	68da      	ldr	r2, [r3, #12]
 800884a:	69fb      	ldr	r3, [r7, #28]
 800884c:	005b      	lsls	r3, r3, #1
 800884e:	fa02 f303 	lsl.w	r3, r2, r3
 8008852:	69ba      	ldr	r2, [r7, #24]
 8008854:	4313      	orrs	r3, r2
 8008856:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	69ba      	ldr	r2, [r7, #24]
 800885c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	685b      	ldr	r3, [r3, #4]
 8008862:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008864:	2201      	movs	r2, #1
 8008866:	69fb      	ldr	r3, [r7, #28]
 8008868:	fa02 f303 	lsl.w	r3, r2, r3
 800886c:	43db      	mvns	r3, r3
 800886e:	69ba      	ldr	r2, [r7, #24]
 8008870:	4013      	ands	r3, r2
 8008872:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	091b      	lsrs	r3, r3, #4
 800887a:	f003 0201 	and.w	r2, r3, #1
 800887e:	69fb      	ldr	r3, [r7, #28]
 8008880:	fa02 f303 	lsl.w	r3, r2, r3
 8008884:	69ba      	ldr	r2, [r7, #24]
 8008886:	4313      	orrs	r3, r2
 8008888:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	69ba      	ldr	r2, [r7, #24]
 800888e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	685b      	ldr	r3, [r3, #4]
 8008894:	f003 0303 	and.w	r3, r3, #3
 8008898:	2b03      	cmp	r3, #3
 800889a:	d017      	beq.n	80088cc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	68db      	ldr	r3, [r3, #12]
 80088a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80088a2:	69fb      	ldr	r3, [r7, #28]
 80088a4:	005b      	lsls	r3, r3, #1
 80088a6:	2203      	movs	r2, #3
 80088a8:	fa02 f303 	lsl.w	r3, r2, r3
 80088ac:	43db      	mvns	r3, r3
 80088ae:	69ba      	ldr	r2, [r7, #24]
 80088b0:	4013      	ands	r3, r2
 80088b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	689a      	ldr	r2, [r3, #8]
 80088b8:	69fb      	ldr	r3, [r7, #28]
 80088ba:	005b      	lsls	r3, r3, #1
 80088bc:	fa02 f303 	lsl.w	r3, r2, r3
 80088c0:	69ba      	ldr	r2, [r7, #24]
 80088c2:	4313      	orrs	r3, r2
 80088c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	69ba      	ldr	r2, [r7, #24]
 80088ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	f003 0303 	and.w	r3, r3, #3
 80088d4:	2b02      	cmp	r3, #2
 80088d6:	d123      	bne.n	8008920 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80088d8:	69fb      	ldr	r3, [r7, #28]
 80088da:	08da      	lsrs	r2, r3, #3
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	3208      	adds	r2, #8
 80088e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80088e6:	69fb      	ldr	r3, [r7, #28]
 80088e8:	f003 0307 	and.w	r3, r3, #7
 80088ec:	009b      	lsls	r3, r3, #2
 80088ee:	220f      	movs	r2, #15
 80088f0:	fa02 f303 	lsl.w	r3, r2, r3
 80088f4:	43db      	mvns	r3, r3
 80088f6:	69ba      	ldr	r2, [r7, #24]
 80088f8:	4013      	ands	r3, r2
 80088fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	691a      	ldr	r2, [r3, #16]
 8008900:	69fb      	ldr	r3, [r7, #28]
 8008902:	f003 0307 	and.w	r3, r3, #7
 8008906:	009b      	lsls	r3, r3, #2
 8008908:	fa02 f303 	lsl.w	r3, r2, r3
 800890c:	69ba      	ldr	r2, [r7, #24]
 800890e:	4313      	orrs	r3, r2
 8008910:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8008912:	69fb      	ldr	r3, [r7, #28]
 8008914:	08da      	lsrs	r2, r3, #3
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	3208      	adds	r2, #8
 800891a:	69b9      	ldr	r1, [r7, #24]
 800891c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8008926:	69fb      	ldr	r3, [r7, #28]
 8008928:	005b      	lsls	r3, r3, #1
 800892a:	2203      	movs	r2, #3
 800892c:	fa02 f303 	lsl.w	r3, r2, r3
 8008930:	43db      	mvns	r3, r3
 8008932:	69ba      	ldr	r2, [r7, #24]
 8008934:	4013      	ands	r3, r2
 8008936:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	f003 0203 	and.w	r2, r3, #3
 8008940:	69fb      	ldr	r3, [r7, #28]
 8008942:	005b      	lsls	r3, r3, #1
 8008944:	fa02 f303 	lsl.w	r3, r2, r3
 8008948:	69ba      	ldr	r2, [r7, #24]
 800894a:	4313      	orrs	r3, r2
 800894c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	69ba      	ldr	r2, [r7, #24]
 8008952:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800895c:	2b00      	cmp	r3, #0
 800895e:	f000 80be 	beq.w	8008ade <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008962:	4b66      	ldr	r3, [pc, #408]	; (8008afc <HAL_GPIO_Init+0x324>)
 8008964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008966:	4a65      	ldr	r2, [pc, #404]	; (8008afc <HAL_GPIO_Init+0x324>)
 8008968:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800896c:	6453      	str	r3, [r2, #68]	; 0x44
 800896e:	4b63      	ldr	r3, [pc, #396]	; (8008afc <HAL_GPIO_Init+0x324>)
 8008970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008976:	60fb      	str	r3, [r7, #12]
 8008978:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800897a:	4a61      	ldr	r2, [pc, #388]	; (8008b00 <HAL_GPIO_Init+0x328>)
 800897c:	69fb      	ldr	r3, [r7, #28]
 800897e:	089b      	lsrs	r3, r3, #2
 8008980:	3302      	adds	r3, #2
 8008982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008986:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8008988:	69fb      	ldr	r3, [r7, #28]
 800898a:	f003 0303 	and.w	r3, r3, #3
 800898e:	009b      	lsls	r3, r3, #2
 8008990:	220f      	movs	r2, #15
 8008992:	fa02 f303 	lsl.w	r3, r2, r3
 8008996:	43db      	mvns	r3, r3
 8008998:	69ba      	ldr	r2, [r7, #24]
 800899a:	4013      	ands	r3, r2
 800899c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	4a58      	ldr	r2, [pc, #352]	; (8008b04 <HAL_GPIO_Init+0x32c>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d037      	beq.n	8008a16 <HAL_GPIO_Init+0x23e>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	4a57      	ldr	r2, [pc, #348]	; (8008b08 <HAL_GPIO_Init+0x330>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d031      	beq.n	8008a12 <HAL_GPIO_Init+0x23a>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	4a56      	ldr	r2, [pc, #344]	; (8008b0c <HAL_GPIO_Init+0x334>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d02b      	beq.n	8008a0e <HAL_GPIO_Init+0x236>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	4a55      	ldr	r2, [pc, #340]	; (8008b10 <HAL_GPIO_Init+0x338>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d025      	beq.n	8008a0a <HAL_GPIO_Init+0x232>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	4a54      	ldr	r2, [pc, #336]	; (8008b14 <HAL_GPIO_Init+0x33c>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d01f      	beq.n	8008a06 <HAL_GPIO_Init+0x22e>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	4a53      	ldr	r2, [pc, #332]	; (8008b18 <HAL_GPIO_Init+0x340>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d019      	beq.n	8008a02 <HAL_GPIO_Init+0x22a>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	4a52      	ldr	r2, [pc, #328]	; (8008b1c <HAL_GPIO_Init+0x344>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d013      	beq.n	80089fe <HAL_GPIO_Init+0x226>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	4a51      	ldr	r2, [pc, #324]	; (8008b20 <HAL_GPIO_Init+0x348>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d00d      	beq.n	80089fa <HAL_GPIO_Init+0x222>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	4a50      	ldr	r2, [pc, #320]	; (8008b24 <HAL_GPIO_Init+0x34c>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d007      	beq.n	80089f6 <HAL_GPIO_Init+0x21e>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	4a4f      	ldr	r2, [pc, #316]	; (8008b28 <HAL_GPIO_Init+0x350>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d101      	bne.n	80089f2 <HAL_GPIO_Init+0x21a>
 80089ee:	2309      	movs	r3, #9
 80089f0:	e012      	b.n	8008a18 <HAL_GPIO_Init+0x240>
 80089f2:	230a      	movs	r3, #10
 80089f4:	e010      	b.n	8008a18 <HAL_GPIO_Init+0x240>
 80089f6:	2308      	movs	r3, #8
 80089f8:	e00e      	b.n	8008a18 <HAL_GPIO_Init+0x240>
 80089fa:	2307      	movs	r3, #7
 80089fc:	e00c      	b.n	8008a18 <HAL_GPIO_Init+0x240>
 80089fe:	2306      	movs	r3, #6
 8008a00:	e00a      	b.n	8008a18 <HAL_GPIO_Init+0x240>
 8008a02:	2305      	movs	r3, #5
 8008a04:	e008      	b.n	8008a18 <HAL_GPIO_Init+0x240>
 8008a06:	2304      	movs	r3, #4
 8008a08:	e006      	b.n	8008a18 <HAL_GPIO_Init+0x240>
 8008a0a:	2303      	movs	r3, #3
 8008a0c:	e004      	b.n	8008a18 <HAL_GPIO_Init+0x240>
 8008a0e:	2302      	movs	r3, #2
 8008a10:	e002      	b.n	8008a18 <HAL_GPIO_Init+0x240>
 8008a12:	2301      	movs	r3, #1
 8008a14:	e000      	b.n	8008a18 <HAL_GPIO_Init+0x240>
 8008a16:	2300      	movs	r3, #0
 8008a18:	69fa      	ldr	r2, [r7, #28]
 8008a1a:	f002 0203 	and.w	r2, r2, #3
 8008a1e:	0092      	lsls	r2, r2, #2
 8008a20:	4093      	lsls	r3, r2
 8008a22:	69ba      	ldr	r2, [r7, #24]
 8008a24:	4313      	orrs	r3, r2
 8008a26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8008a28:	4935      	ldr	r1, [pc, #212]	; (8008b00 <HAL_GPIO_Init+0x328>)
 8008a2a:	69fb      	ldr	r3, [r7, #28]
 8008a2c:	089b      	lsrs	r3, r3, #2
 8008a2e:	3302      	adds	r3, #2
 8008a30:	69ba      	ldr	r2, [r7, #24]
 8008a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008a36:	4b3d      	ldr	r3, [pc, #244]	; (8008b2c <HAL_GPIO_Init+0x354>)
 8008a38:	689b      	ldr	r3, [r3, #8]
 8008a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	43db      	mvns	r3, r3
 8008a40:	69ba      	ldr	r2, [r7, #24]
 8008a42:	4013      	ands	r3, r2
 8008a44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	685b      	ldr	r3, [r3, #4]
 8008a4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d003      	beq.n	8008a5a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8008a52:	69ba      	ldr	r2, [r7, #24]
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	4313      	orrs	r3, r2
 8008a58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008a5a:	4a34      	ldr	r2, [pc, #208]	; (8008b2c <HAL_GPIO_Init+0x354>)
 8008a5c:	69bb      	ldr	r3, [r7, #24]
 8008a5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008a60:	4b32      	ldr	r3, [pc, #200]	; (8008b2c <HAL_GPIO_Init+0x354>)
 8008a62:	68db      	ldr	r3, [r3, #12]
 8008a64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	43db      	mvns	r3, r3
 8008a6a:	69ba      	ldr	r2, [r7, #24]
 8008a6c:	4013      	ands	r3, r2
 8008a6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d003      	beq.n	8008a84 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8008a7c:	69ba      	ldr	r2, [r7, #24]
 8008a7e:	693b      	ldr	r3, [r7, #16]
 8008a80:	4313      	orrs	r3, r2
 8008a82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008a84:	4a29      	ldr	r2, [pc, #164]	; (8008b2c <HAL_GPIO_Init+0x354>)
 8008a86:	69bb      	ldr	r3, [r7, #24]
 8008a88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008a8a:	4b28      	ldr	r3, [pc, #160]	; (8008b2c <HAL_GPIO_Init+0x354>)
 8008a8c:	685b      	ldr	r3, [r3, #4]
 8008a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	43db      	mvns	r3, r3
 8008a94:	69ba      	ldr	r2, [r7, #24]
 8008a96:	4013      	ands	r3, r2
 8008a98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	685b      	ldr	r3, [r3, #4]
 8008a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d003      	beq.n	8008aae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8008aa6:	69ba      	ldr	r2, [r7, #24]
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008aae:	4a1f      	ldr	r2, [pc, #124]	; (8008b2c <HAL_GPIO_Init+0x354>)
 8008ab0:	69bb      	ldr	r3, [r7, #24]
 8008ab2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008ab4:	4b1d      	ldr	r3, [pc, #116]	; (8008b2c <HAL_GPIO_Init+0x354>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	43db      	mvns	r3, r3
 8008abe:	69ba      	ldr	r2, [r7, #24]
 8008ac0:	4013      	ands	r3, r2
 8008ac2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d003      	beq.n	8008ad8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8008ad0:	69ba      	ldr	r2, [r7, #24]
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008ad8:	4a14      	ldr	r2, [pc, #80]	; (8008b2c <HAL_GPIO_Init+0x354>)
 8008ada:	69bb      	ldr	r3, [r7, #24]
 8008adc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8008ade:	69fb      	ldr	r3, [r7, #28]
 8008ae0:	3301      	adds	r3, #1
 8008ae2:	61fb      	str	r3, [r7, #28]
 8008ae4:	69fb      	ldr	r3, [r7, #28]
 8008ae6:	2b0f      	cmp	r3, #15
 8008ae8:	f67f ae86 	bls.w	80087f8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8008aec:	bf00      	nop
 8008aee:	bf00      	nop
 8008af0:	3724      	adds	r7, #36	; 0x24
 8008af2:	46bd      	mov	sp, r7
 8008af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af8:	4770      	bx	lr
 8008afa:	bf00      	nop
 8008afc:	40023800 	.word	0x40023800
 8008b00:	40013800 	.word	0x40013800
 8008b04:	40020000 	.word	0x40020000
 8008b08:	40020400 	.word	0x40020400
 8008b0c:	40020800 	.word	0x40020800
 8008b10:	40020c00 	.word	0x40020c00
 8008b14:	40021000 	.word	0x40021000
 8008b18:	40021400 	.word	0x40021400
 8008b1c:	40021800 	.word	0x40021800
 8008b20:	40021c00 	.word	0x40021c00
 8008b24:	40022000 	.word	0x40022000
 8008b28:	40022400 	.word	0x40022400
 8008b2c:	40013c00 	.word	0x40013c00

08008b30 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b087      	sub	sp, #28
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8008b42:	2300      	movs	r3, #0
 8008b44:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8008b46:	2300      	movs	r3, #0
 8008b48:	617b      	str	r3, [r7, #20]
 8008b4a:	e0d9      	b.n	8008d00 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8008b4c:	2201      	movs	r2, #1
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	fa02 f303 	lsl.w	r3, r2, r3
 8008b54:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8008b56:	683a      	ldr	r2, [r7, #0]
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	4013      	ands	r3, r2
 8008b5c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8008b5e:	68fa      	ldr	r2, [r7, #12]
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	429a      	cmp	r2, r3
 8008b64:	f040 80c9 	bne.w	8008cfa <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8008b68:	4a6b      	ldr	r2, [pc, #428]	; (8008d18 <HAL_GPIO_DeInit+0x1e8>)
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	089b      	lsrs	r3, r3, #2
 8008b6e:	3302      	adds	r3, #2
 8008b70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b74:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	f003 0303 	and.w	r3, r3, #3
 8008b7c:	009b      	lsls	r3, r3, #2
 8008b7e:	220f      	movs	r2, #15
 8008b80:	fa02 f303 	lsl.w	r3, r2, r3
 8008b84:	68ba      	ldr	r2, [r7, #8]
 8008b86:	4013      	ands	r3, r2
 8008b88:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	4a63      	ldr	r2, [pc, #396]	; (8008d1c <HAL_GPIO_DeInit+0x1ec>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d037      	beq.n	8008c02 <HAL_GPIO_DeInit+0xd2>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	4a62      	ldr	r2, [pc, #392]	; (8008d20 <HAL_GPIO_DeInit+0x1f0>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d031      	beq.n	8008bfe <HAL_GPIO_DeInit+0xce>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	4a61      	ldr	r2, [pc, #388]	; (8008d24 <HAL_GPIO_DeInit+0x1f4>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d02b      	beq.n	8008bfa <HAL_GPIO_DeInit+0xca>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	4a60      	ldr	r2, [pc, #384]	; (8008d28 <HAL_GPIO_DeInit+0x1f8>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d025      	beq.n	8008bf6 <HAL_GPIO_DeInit+0xc6>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	4a5f      	ldr	r2, [pc, #380]	; (8008d2c <HAL_GPIO_DeInit+0x1fc>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d01f      	beq.n	8008bf2 <HAL_GPIO_DeInit+0xc2>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	4a5e      	ldr	r2, [pc, #376]	; (8008d30 <HAL_GPIO_DeInit+0x200>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d019      	beq.n	8008bee <HAL_GPIO_DeInit+0xbe>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	4a5d      	ldr	r2, [pc, #372]	; (8008d34 <HAL_GPIO_DeInit+0x204>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d013      	beq.n	8008bea <HAL_GPIO_DeInit+0xba>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	4a5c      	ldr	r2, [pc, #368]	; (8008d38 <HAL_GPIO_DeInit+0x208>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d00d      	beq.n	8008be6 <HAL_GPIO_DeInit+0xb6>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	4a5b      	ldr	r2, [pc, #364]	; (8008d3c <HAL_GPIO_DeInit+0x20c>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d007      	beq.n	8008be2 <HAL_GPIO_DeInit+0xb2>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	4a5a      	ldr	r2, [pc, #360]	; (8008d40 <HAL_GPIO_DeInit+0x210>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d101      	bne.n	8008bde <HAL_GPIO_DeInit+0xae>
 8008bda:	2309      	movs	r3, #9
 8008bdc:	e012      	b.n	8008c04 <HAL_GPIO_DeInit+0xd4>
 8008bde:	230a      	movs	r3, #10
 8008be0:	e010      	b.n	8008c04 <HAL_GPIO_DeInit+0xd4>
 8008be2:	2308      	movs	r3, #8
 8008be4:	e00e      	b.n	8008c04 <HAL_GPIO_DeInit+0xd4>
 8008be6:	2307      	movs	r3, #7
 8008be8:	e00c      	b.n	8008c04 <HAL_GPIO_DeInit+0xd4>
 8008bea:	2306      	movs	r3, #6
 8008bec:	e00a      	b.n	8008c04 <HAL_GPIO_DeInit+0xd4>
 8008bee:	2305      	movs	r3, #5
 8008bf0:	e008      	b.n	8008c04 <HAL_GPIO_DeInit+0xd4>
 8008bf2:	2304      	movs	r3, #4
 8008bf4:	e006      	b.n	8008c04 <HAL_GPIO_DeInit+0xd4>
 8008bf6:	2303      	movs	r3, #3
 8008bf8:	e004      	b.n	8008c04 <HAL_GPIO_DeInit+0xd4>
 8008bfa:	2302      	movs	r3, #2
 8008bfc:	e002      	b.n	8008c04 <HAL_GPIO_DeInit+0xd4>
 8008bfe:	2301      	movs	r3, #1
 8008c00:	e000      	b.n	8008c04 <HAL_GPIO_DeInit+0xd4>
 8008c02:	2300      	movs	r3, #0
 8008c04:	697a      	ldr	r2, [r7, #20]
 8008c06:	f002 0203 	and.w	r2, r2, #3
 8008c0a:	0092      	lsls	r2, r2, #2
 8008c0c:	4093      	lsls	r3, r2
 8008c0e:	68ba      	ldr	r2, [r7, #8]
 8008c10:	429a      	cmp	r2, r3
 8008c12:	d132      	bne.n	8008c7a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8008c14:	4b4b      	ldr	r3, [pc, #300]	; (8008d44 <HAL_GPIO_DeInit+0x214>)
 8008c16:	681a      	ldr	r2, [r3, #0]
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	43db      	mvns	r3, r3
 8008c1c:	4949      	ldr	r1, [pc, #292]	; (8008d44 <HAL_GPIO_DeInit+0x214>)
 8008c1e:	4013      	ands	r3, r2
 8008c20:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8008c22:	4b48      	ldr	r3, [pc, #288]	; (8008d44 <HAL_GPIO_DeInit+0x214>)
 8008c24:	685a      	ldr	r2, [r3, #4]
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	43db      	mvns	r3, r3
 8008c2a:	4946      	ldr	r1, [pc, #280]	; (8008d44 <HAL_GPIO_DeInit+0x214>)
 8008c2c:	4013      	ands	r3, r2
 8008c2e:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8008c30:	4b44      	ldr	r3, [pc, #272]	; (8008d44 <HAL_GPIO_DeInit+0x214>)
 8008c32:	68da      	ldr	r2, [r3, #12]
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	43db      	mvns	r3, r3
 8008c38:	4942      	ldr	r1, [pc, #264]	; (8008d44 <HAL_GPIO_DeInit+0x214>)
 8008c3a:	4013      	ands	r3, r2
 8008c3c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8008c3e:	4b41      	ldr	r3, [pc, #260]	; (8008d44 <HAL_GPIO_DeInit+0x214>)
 8008c40:	689a      	ldr	r2, [r3, #8]
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	43db      	mvns	r3, r3
 8008c46:	493f      	ldr	r1, [pc, #252]	; (8008d44 <HAL_GPIO_DeInit+0x214>)
 8008c48:	4013      	ands	r3, r2
 8008c4a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	f003 0303 	and.w	r3, r3, #3
 8008c52:	009b      	lsls	r3, r3, #2
 8008c54:	220f      	movs	r2, #15
 8008c56:	fa02 f303 	lsl.w	r3, r2, r3
 8008c5a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8008c5c:	4a2e      	ldr	r2, [pc, #184]	; (8008d18 <HAL_GPIO_DeInit+0x1e8>)
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	089b      	lsrs	r3, r3, #2
 8008c62:	3302      	adds	r3, #2
 8008c64:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	43da      	mvns	r2, r3
 8008c6c:	482a      	ldr	r0, [pc, #168]	; (8008d18 <HAL_GPIO_DeInit+0x1e8>)
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	089b      	lsrs	r3, r3, #2
 8008c72:	400a      	ands	r2, r1
 8008c74:	3302      	adds	r3, #2
 8008c76:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681a      	ldr	r2, [r3, #0]
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	005b      	lsls	r3, r3, #1
 8008c82:	2103      	movs	r1, #3
 8008c84:	fa01 f303 	lsl.w	r3, r1, r3
 8008c88:	43db      	mvns	r3, r3
 8008c8a:	401a      	ands	r2, r3
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	08da      	lsrs	r2, r3, #3
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	3208      	adds	r2, #8
 8008c98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	f003 0307 	and.w	r3, r3, #7
 8008ca2:	009b      	lsls	r3, r3, #2
 8008ca4:	220f      	movs	r2, #15
 8008ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8008caa:	43db      	mvns	r3, r3
 8008cac:	697a      	ldr	r2, [r7, #20]
 8008cae:	08d2      	lsrs	r2, r2, #3
 8008cb0:	4019      	ands	r1, r3
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	3208      	adds	r2, #8
 8008cb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	68da      	ldr	r2, [r3, #12]
 8008cbe:	697b      	ldr	r3, [r7, #20]
 8008cc0:	005b      	lsls	r3, r3, #1
 8008cc2:	2103      	movs	r1, #3
 8008cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8008cc8:	43db      	mvns	r3, r3
 8008cca:	401a      	ands	r2, r3
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	685a      	ldr	r2, [r3, #4]
 8008cd4:	2101      	movs	r1, #1
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8008cdc:	43db      	mvns	r3, r3
 8008cde:	401a      	ands	r2, r3
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	689a      	ldr	r2, [r3, #8]
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	005b      	lsls	r3, r3, #1
 8008cec:	2103      	movs	r1, #3
 8008cee:	fa01 f303 	lsl.w	r3, r1, r3
 8008cf2:	43db      	mvns	r3, r3
 8008cf4:	401a      	ands	r2, r3
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	3301      	adds	r3, #1
 8008cfe:	617b      	str	r3, [r7, #20]
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	2b0f      	cmp	r3, #15
 8008d04:	f67f af22 	bls.w	8008b4c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8008d08:	bf00      	nop
 8008d0a:	bf00      	nop
 8008d0c:	371c      	adds	r7, #28
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d14:	4770      	bx	lr
 8008d16:	bf00      	nop
 8008d18:	40013800 	.word	0x40013800
 8008d1c:	40020000 	.word	0x40020000
 8008d20:	40020400 	.word	0x40020400
 8008d24:	40020800 	.word	0x40020800
 8008d28:	40020c00 	.word	0x40020c00
 8008d2c:	40021000 	.word	0x40021000
 8008d30:	40021400 	.word	0x40021400
 8008d34:	40021800 	.word	0x40021800
 8008d38:	40021c00 	.word	0x40021c00
 8008d3c:	40022000 	.word	0x40022000
 8008d40:	40022400 	.word	0x40022400
 8008d44:	40013c00 	.word	0x40013c00

08008d48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b085      	sub	sp, #20
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	460b      	mov	r3, r1
 8008d52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	691a      	ldr	r2, [r3, #16]
 8008d58:	887b      	ldrh	r3, [r7, #2]
 8008d5a:	4013      	ands	r3, r2
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d002      	beq.n	8008d66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008d60:	2301      	movs	r3, #1
 8008d62:	73fb      	strb	r3, [r7, #15]
 8008d64:	e001      	b.n	8008d6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008d66:	2300      	movs	r3, #0
 8008d68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3714      	adds	r7, #20
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr

08008d78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b083      	sub	sp, #12
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
 8008d80:	460b      	mov	r3, r1
 8008d82:	807b      	strh	r3, [r7, #2]
 8008d84:	4613      	mov	r3, r2
 8008d86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008d88:	787b      	ldrb	r3, [r7, #1]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d003      	beq.n	8008d96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008d8e:	887a      	ldrh	r2, [r7, #2]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8008d94:	e003      	b.n	8008d9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8008d96:	887b      	ldrh	r3, [r7, #2]
 8008d98:	041a      	lsls	r2, r3, #16
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	619a      	str	r2, [r3, #24]
}
 8008d9e:	bf00      	nop
 8008da0:	370c      	adds	r7, #12
 8008da2:	46bd      	mov	sp, r7
 8008da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da8:	4770      	bx	lr
	...

08008dac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b082      	sub	sp, #8
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d101      	bne.n	8008dbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008dba:	2301      	movs	r3, #1
 8008dbc:	e07f      	b.n	8008ebe <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008dc4:	b2db      	uxtb	r3, r3
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d106      	bne.n	8008dd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f000 f8a9 	bl	8008f2a <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2224      	movs	r2, #36	; 0x24
 8008ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	681a      	ldr	r2, [r3, #0]
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f022 0201 	bic.w	r2, r2, #1
 8008dee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	685a      	ldr	r2, [r3, #4]
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008dfc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	689a      	ldr	r2, [r3, #8]
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008e0c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	68db      	ldr	r3, [r3, #12]
 8008e12:	2b01      	cmp	r3, #1
 8008e14:	d107      	bne.n	8008e26 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	689a      	ldr	r2, [r3, #8]
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008e22:	609a      	str	r2, [r3, #8]
 8008e24:	e006      	b.n	8008e34 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	689a      	ldr	r2, [r3, #8]
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008e32:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	68db      	ldr	r3, [r3, #12]
 8008e38:	2b02      	cmp	r3, #2
 8008e3a:	d104      	bne.n	8008e46 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008e44:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	6859      	ldr	r1, [r3, #4]
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681a      	ldr	r2, [r3, #0]
 8008e50:	4b1d      	ldr	r3, [pc, #116]	; (8008ec8 <HAL_I2C_Init+0x11c>)
 8008e52:	430b      	orrs	r3, r1
 8008e54:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	68da      	ldr	r2, [r3, #12]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008e64:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	691a      	ldr	r2, [r3, #16]
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	695b      	ldr	r3, [r3, #20]
 8008e6e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	699b      	ldr	r3, [r3, #24]
 8008e76:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	430a      	orrs	r2, r1
 8008e7e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	69d9      	ldr	r1, [r3, #28]
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6a1a      	ldr	r2, [r3, #32]
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	430a      	orrs	r2, r1
 8008e8e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	681a      	ldr	r2, [r3, #0]
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f042 0201 	orr.w	r2, r2, #1
 8008e9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2220      	movs	r2, #32
 8008eaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008ebc:	2300      	movs	r3, #0
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3708      	adds	r7, #8
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}
 8008ec6:	bf00      	nop
 8008ec8:	02008000 	.word	0x02008000

08008ecc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b082      	sub	sp, #8
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d101      	bne.n	8008ede <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8008eda:	2301      	movs	r3, #1
 8008edc:	e021      	b.n	8008f22 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2224      	movs	r2, #36	; 0x24
 8008ee2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	681a      	ldr	r2, [r3, #0]
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f022 0201 	bic.w	r2, r2, #1
 8008ef4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f000 f821 	bl	8008f3e <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2200      	movs	r2, #0
 8008f00:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2200      	movs	r2, #0
 8008f06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2200      	movs	r2, #0
 8008f14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008f20:	2300      	movs	r3, #0
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3708      	adds	r7, #8
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}

08008f2a <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8008f2a:	b480      	push	{r7}
 8008f2c:	b083      	sub	sp, #12
 8008f2e:	af00      	add	r7, sp, #0
 8008f30:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8008f32:	bf00      	nop
 8008f34:	370c      	adds	r7, #12
 8008f36:	46bd      	mov	sp, r7
 8008f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3c:	4770      	bx	lr

08008f3e <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8008f3e:	b480      	push	{r7}
 8008f40:	b083      	sub	sp, #12
 8008f42:	af00      	add	r7, sp, #0
 8008f44:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8008f46:	bf00      	nop
 8008f48:	370c      	adds	r7, #12
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f50:	4770      	bx	lr
	...

08008f54 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b088      	sub	sp, #32
 8008f58:	af02      	add	r7, sp, #8
 8008f5a:	60f8      	str	r0, [r7, #12]
 8008f5c:	4608      	mov	r0, r1
 8008f5e:	4611      	mov	r1, r2
 8008f60:	461a      	mov	r2, r3
 8008f62:	4603      	mov	r3, r0
 8008f64:	817b      	strh	r3, [r7, #10]
 8008f66:	460b      	mov	r3, r1
 8008f68:	813b      	strh	r3, [r7, #8]
 8008f6a:	4613      	mov	r3, r2
 8008f6c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f74:	b2db      	uxtb	r3, r3
 8008f76:	2b20      	cmp	r3, #32
 8008f78:	f040 80f9 	bne.w	800916e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f7c:	6a3b      	ldr	r3, [r7, #32]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d002      	beq.n	8008f88 <HAL_I2C_Mem_Write+0x34>
 8008f82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d105      	bne.n	8008f94 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f8e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008f90:	2301      	movs	r3, #1
 8008f92:	e0ed      	b.n	8009170 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008f9a:	2b01      	cmp	r3, #1
 8008f9c:	d101      	bne.n	8008fa2 <HAL_I2C_Mem_Write+0x4e>
 8008f9e:	2302      	movs	r3, #2
 8008fa0:	e0e6      	b.n	8009170 <HAL_I2C_Mem_Write+0x21c>
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	2201      	movs	r2, #1
 8008fa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008faa:	f7fe f9df 	bl	800736c <HAL_GetTick>
 8008fae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008fb0:	697b      	ldr	r3, [r7, #20]
 8008fb2:	9300      	str	r3, [sp, #0]
 8008fb4:	2319      	movs	r3, #25
 8008fb6:	2201      	movs	r2, #1
 8008fb8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008fbc:	68f8      	ldr	r0, [r7, #12]
 8008fbe:	f000 fad1 	bl	8009564 <I2C_WaitOnFlagUntilTimeout>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d001      	beq.n	8008fcc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8008fc8:	2301      	movs	r3, #1
 8008fca:	e0d1      	b.n	8009170 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	2221      	movs	r2, #33	; 0x21
 8008fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	2240      	movs	r2, #64	; 0x40
 8008fd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	6a3a      	ldr	r2, [r7, #32]
 8008fe6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008fec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008ff4:	88f8      	ldrh	r0, [r7, #6]
 8008ff6:	893a      	ldrh	r2, [r7, #8]
 8008ff8:	8979      	ldrh	r1, [r7, #10]
 8008ffa:	697b      	ldr	r3, [r7, #20]
 8008ffc:	9301      	str	r3, [sp, #4]
 8008ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009000:	9300      	str	r3, [sp, #0]
 8009002:	4603      	mov	r3, r0
 8009004:	68f8      	ldr	r0, [r7, #12]
 8009006:	f000 f9e1 	bl	80093cc <I2C_RequestMemoryWrite>
 800900a:	4603      	mov	r3, r0
 800900c:	2b00      	cmp	r3, #0
 800900e:	d005      	beq.n	800901c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	2200      	movs	r2, #0
 8009014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009018:	2301      	movs	r3, #1
 800901a:	e0a9      	b.n	8009170 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009020:	b29b      	uxth	r3, r3
 8009022:	2bff      	cmp	r3, #255	; 0xff
 8009024:	d90e      	bls.n	8009044 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	22ff      	movs	r2, #255	; 0xff
 800902a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009030:	b2da      	uxtb	r2, r3
 8009032:	8979      	ldrh	r1, [r7, #10]
 8009034:	2300      	movs	r3, #0
 8009036:	9300      	str	r3, [sp, #0]
 8009038:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800903c:	68f8      	ldr	r0, [r7, #12]
 800903e:	f000 fc2d 	bl	800989c <I2C_TransferConfig>
 8009042:	e00f      	b.n	8009064 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009048:	b29a      	uxth	r2, r3
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009052:	b2da      	uxtb	r2, r3
 8009054:	8979      	ldrh	r1, [r7, #10]
 8009056:	2300      	movs	r3, #0
 8009058:	9300      	str	r3, [sp, #0]
 800905a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800905e:	68f8      	ldr	r0, [r7, #12]
 8009060:	f000 fc1c 	bl	800989c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009064:	697a      	ldr	r2, [r7, #20]
 8009066:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009068:	68f8      	ldr	r0, [r7, #12]
 800906a:	f000 fabb 	bl	80095e4 <I2C_WaitOnTXISFlagUntilTimeout>
 800906e:	4603      	mov	r3, r0
 8009070:	2b00      	cmp	r3, #0
 8009072:	d001      	beq.n	8009078 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8009074:	2301      	movs	r3, #1
 8009076:	e07b      	b.n	8009170 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800907c:	781a      	ldrb	r2, [r3, #0]
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009088:	1c5a      	adds	r2, r3, #1
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009092:	b29b      	uxth	r3, r3
 8009094:	3b01      	subs	r3, #1
 8009096:	b29a      	uxth	r2, r3
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090a0:	3b01      	subs	r3, #1
 80090a2:	b29a      	uxth	r2, r3
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090ac:	b29b      	uxth	r3, r3
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d034      	beq.n	800911c <HAL_I2C_Mem_Write+0x1c8>
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d130      	bne.n	800911c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	9300      	str	r3, [sp, #0]
 80090be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090c0:	2200      	movs	r2, #0
 80090c2:	2180      	movs	r1, #128	; 0x80
 80090c4:	68f8      	ldr	r0, [r7, #12]
 80090c6:	f000 fa4d 	bl	8009564 <I2C_WaitOnFlagUntilTimeout>
 80090ca:	4603      	mov	r3, r0
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d001      	beq.n	80090d4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80090d0:	2301      	movs	r3, #1
 80090d2:	e04d      	b.n	8009170 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090d8:	b29b      	uxth	r3, r3
 80090da:	2bff      	cmp	r3, #255	; 0xff
 80090dc:	d90e      	bls.n	80090fc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	22ff      	movs	r2, #255	; 0xff
 80090e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090e8:	b2da      	uxtb	r2, r3
 80090ea:	8979      	ldrh	r1, [r7, #10]
 80090ec:	2300      	movs	r3, #0
 80090ee:	9300      	str	r3, [sp, #0]
 80090f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80090f4:	68f8      	ldr	r0, [r7, #12]
 80090f6:	f000 fbd1 	bl	800989c <I2C_TransferConfig>
 80090fa:	e00f      	b.n	800911c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009100:	b29a      	uxth	r2, r3
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800910a:	b2da      	uxtb	r2, r3
 800910c:	8979      	ldrh	r1, [r7, #10]
 800910e:	2300      	movs	r3, #0
 8009110:	9300      	str	r3, [sp, #0]
 8009112:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009116:	68f8      	ldr	r0, [r7, #12]
 8009118:	f000 fbc0 	bl	800989c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009120:	b29b      	uxth	r3, r3
 8009122:	2b00      	cmp	r3, #0
 8009124:	d19e      	bne.n	8009064 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009126:	697a      	ldr	r2, [r7, #20]
 8009128:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800912a:	68f8      	ldr	r0, [r7, #12]
 800912c:	f000 fa9a 	bl	8009664 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009130:	4603      	mov	r3, r0
 8009132:	2b00      	cmp	r3, #0
 8009134:	d001      	beq.n	800913a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8009136:	2301      	movs	r3, #1
 8009138:	e01a      	b.n	8009170 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	2220      	movs	r2, #32
 8009140:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	6859      	ldr	r1, [r3, #4]
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681a      	ldr	r2, [r3, #0]
 800914c:	4b0a      	ldr	r3, [pc, #40]	; (8009178 <HAL_I2C_Mem_Write+0x224>)
 800914e:	400b      	ands	r3, r1
 8009150:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	2220      	movs	r2, #32
 8009156:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	2200      	movs	r2, #0
 800915e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	2200      	movs	r2, #0
 8009166:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800916a:	2300      	movs	r3, #0
 800916c:	e000      	b.n	8009170 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800916e:	2302      	movs	r3, #2
  }
}
 8009170:	4618      	mov	r0, r3
 8009172:	3718      	adds	r7, #24
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}
 8009178:	fe00e800 	.word	0xfe00e800

0800917c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b088      	sub	sp, #32
 8009180:	af02      	add	r7, sp, #8
 8009182:	60f8      	str	r0, [r7, #12]
 8009184:	4608      	mov	r0, r1
 8009186:	4611      	mov	r1, r2
 8009188:	461a      	mov	r2, r3
 800918a:	4603      	mov	r3, r0
 800918c:	817b      	strh	r3, [r7, #10]
 800918e:	460b      	mov	r3, r1
 8009190:	813b      	strh	r3, [r7, #8]
 8009192:	4613      	mov	r3, r2
 8009194:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800919c:	b2db      	uxtb	r3, r3
 800919e:	2b20      	cmp	r3, #32
 80091a0:	f040 80fd 	bne.w	800939e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80091a4:	6a3b      	ldr	r3, [r7, #32]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d002      	beq.n	80091b0 <HAL_I2C_Mem_Read+0x34>
 80091aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d105      	bne.n	80091bc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80091b6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80091b8:	2301      	movs	r3, #1
 80091ba:	e0f1      	b.n	80093a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80091c2:	2b01      	cmp	r3, #1
 80091c4:	d101      	bne.n	80091ca <HAL_I2C_Mem_Read+0x4e>
 80091c6:	2302      	movs	r3, #2
 80091c8:	e0ea      	b.n	80093a0 <HAL_I2C_Mem_Read+0x224>
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	2201      	movs	r2, #1
 80091ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80091d2:	f7fe f8cb 	bl	800736c <HAL_GetTick>
 80091d6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80091d8:	697b      	ldr	r3, [r7, #20]
 80091da:	9300      	str	r3, [sp, #0]
 80091dc:	2319      	movs	r3, #25
 80091de:	2201      	movs	r2, #1
 80091e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80091e4:	68f8      	ldr	r0, [r7, #12]
 80091e6:	f000 f9bd 	bl	8009564 <I2C_WaitOnFlagUntilTimeout>
 80091ea:	4603      	mov	r3, r0
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d001      	beq.n	80091f4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80091f0:	2301      	movs	r3, #1
 80091f2:	e0d5      	b.n	80093a0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	2222      	movs	r2, #34	; 0x22
 80091f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	2240      	movs	r2, #64	; 0x40
 8009200:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	2200      	movs	r2, #0
 8009208:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	6a3a      	ldr	r2, [r7, #32]
 800920e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009214:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	2200      	movs	r2, #0
 800921a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800921c:	88f8      	ldrh	r0, [r7, #6]
 800921e:	893a      	ldrh	r2, [r7, #8]
 8009220:	8979      	ldrh	r1, [r7, #10]
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	9301      	str	r3, [sp, #4]
 8009226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009228:	9300      	str	r3, [sp, #0]
 800922a:	4603      	mov	r3, r0
 800922c:	68f8      	ldr	r0, [r7, #12]
 800922e:	f000 f921 	bl	8009474 <I2C_RequestMemoryRead>
 8009232:	4603      	mov	r3, r0
 8009234:	2b00      	cmp	r3, #0
 8009236:	d005      	beq.n	8009244 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	2200      	movs	r2, #0
 800923c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009240:	2301      	movs	r3, #1
 8009242:	e0ad      	b.n	80093a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009248:	b29b      	uxth	r3, r3
 800924a:	2bff      	cmp	r3, #255	; 0xff
 800924c:	d90e      	bls.n	800926c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	22ff      	movs	r2, #255	; 0xff
 8009252:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009258:	b2da      	uxtb	r2, r3
 800925a:	8979      	ldrh	r1, [r7, #10]
 800925c:	4b52      	ldr	r3, [pc, #328]	; (80093a8 <HAL_I2C_Mem_Read+0x22c>)
 800925e:	9300      	str	r3, [sp, #0]
 8009260:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009264:	68f8      	ldr	r0, [r7, #12]
 8009266:	f000 fb19 	bl	800989c <I2C_TransferConfig>
 800926a:	e00f      	b.n	800928c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009270:	b29a      	uxth	r2, r3
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800927a:	b2da      	uxtb	r2, r3
 800927c:	8979      	ldrh	r1, [r7, #10]
 800927e:	4b4a      	ldr	r3, [pc, #296]	; (80093a8 <HAL_I2C_Mem_Read+0x22c>)
 8009280:	9300      	str	r3, [sp, #0]
 8009282:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009286:	68f8      	ldr	r0, [r7, #12]
 8009288:	f000 fb08 	bl	800989c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	9300      	str	r3, [sp, #0]
 8009290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009292:	2200      	movs	r2, #0
 8009294:	2104      	movs	r1, #4
 8009296:	68f8      	ldr	r0, [r7, #12]
 8009298:	f000 f964 	bl	8009564 <I2C_WaitOnFlagUntilTimeout>
 800929c:	4603      	mov	r3, r0
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d001      	beq.n	80092a6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80092a2:	2301      	movs	r3, #1
 80092a4:	e07c      	b.n	80093a0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b0:	b2d2      	uxtb	r2, r2
 80092b2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b8:	1c5a      	adds	r2, r3, #1
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092c2:	3b01      	subs	r3, #1
 80092c4:	b29a      	uxth	r2, r3
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092ce:	b29b      	uxth	r3, r3
 80092d0:	3b01      	subs	r3, #1
 80092d2:	b29a      	uxth	r2, r3
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092dc:	b29b      	uxth	r3, r3
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d034      	beq.n	800934c <HAL_I2C_Mem_Read+0x1d0>
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d130      	bne.n	800934c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	9300      	str	r3, [sp, #0]
 80092ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092f0:	2200      	movs	r2, #0
 80092f2:	2180      	movs	r1, #128	; 0x80
 80092f4:	68f8      	ldr	r0, [r7, #12]
 80092f6:	f000 f935 	bl	8009564 <I2C_WaitOnFlagUntilTimeout>
 80092fa:	4603      	mov	r3, r0
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d001      	beq.n	8009304 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8009300:	2301      	movs	r3, #1
 8009302:	e04d      	b.n	80093a0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009308:	b29b      	uxth	r3, r3
 800930a:	2bff      	cmp	r3, #255	; 0xff
 800930c:	d90e      	bls.n	800932c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	22ff      	movs	r2, #255	; 0xff
 8009312:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009318:	b2da      	uxtb	r2, r3
 800931a:	8979      	ldrh	r1, [r7, #10]
 800931c:	2300      	movs	r3, #0
 800931e:	9300      	str	r3, [sp, #0]
 8009320:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009324:	68f8      	ldr	r0, [r7, #12]
 8009326:	f000 fab9 	bl	800989c <I2C_TransferConfig>
 800932a:	e00f      	b.n	800934c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009330:	b29a      	uxth	r2, r3
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800933a:	b2da      	uxtb	r2, r3
 800933c:	8979      	ldrh	r1, [r7, #10]
 800933e:	2300      	movs	r3, #0
 8009340:	9300      	str	r3, [sp, #0]
 8009342:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009346:	68f8      	ldr	r0, [r7, #12]
 8009348:	f000 faa8 	bl	800989c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009350:	b29b      	uxth	r3, r3
 8009352:	2b00      	cmp	r3, #0
 8009354:	d19a      	bne.n	800928c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009356:	697a      	ldr	r2, [r7, #20]
 8009358:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800935a:	68f8      	ldr	r0, [r7, #12]
 800935c:	f000 f982 	bl	8009664 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009360:	4603      	mov	r3, r0
 8009362:	2b00      	cmp	r3, #0
 8009364:	d001      	beq.n	800936a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8009366:	2301      	movs	r3, #1
 8009368:	e01a      	b.n	80093a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	2220      	movs	r2, #32
 8009370:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	6859      	ldr	r1, [r3, #4]
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681a      	ldr	r2, [r3, #0]
 800937c:	4b0b      	ldr	r3, [pc, #44]	; (80093ac <HAL_I2C_Mem_Read+0x230>)
 800937e:	400b      	ands	r3, r1
 8009380:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	2220      	movs	r2, #32
 8009386:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	2200      	movs	r2, #0
 800938e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	2200      	movs	r2, #0
 8009396:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800939a:	2300      	movs	r3, #0
 800939c:	e000      	b.n	80093a0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800939e:	2302      	movs	r3, #2
  }
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	3718      	adds	r7, #24
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}
 80093a8:	80002400 	.word	0x80002400
 80093ac:	fe00e800 	.word	0xfe00e800

080093b0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b083      	sub	sp, #12
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80093be:	b2db      	uxtb	r3, r3
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	370c      	adds	r7, #12
 80093c4:	46bd      	mov	sp, r7
 80093c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ca:	4770      	bx	lr

080093cc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b086      	sub	sp, #24
 80093d0:	af02      	add	r7, sp, #8
 80093d2:	60f8      	str	r0, [r7, #12]
 80093d4:	4608      	mov	r0, r1
 80093d6:	4611      	mov	r1, r2
 80093d8:	461a      	mov	r2, r3
 80093da:	4603      	mov	r3, r0
 80093dc:	817b      	strh	r3, [r7, #10]
 80093de:	460b      	mov	r3, r1
 80093e0:	813b      	strh	r3, [r7, #8]
 80093e2:	4613      	mov	r3, r2
 80093e4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80093e6:	88fb      	ldrh	r3, [r7, #6]
 80093e8:	b2da      	uxtb	r2, r3
 80093ea:	8979      	ldrh	r1, [r7, #10]
 80093ec:	4b20      	ldr	r3, [pc, #128]	; (8009470 <I2C_RequestMemoryWrite+0xa4>)
 80093ee:	9300      	str	r3, [sp, #0]
 80093f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80093f4:	68f8      	ldr	r0, [r7, #12]
 80093f6:	f000 fa51 	bl	800989c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80093fa:	69fa      	ldr	r2, [r7, #28]
 80093fc:	69b9      	ldr	r1, [r7, #24]
 80093fe:	68f8      	ldr	r0, [r7, #12]
 8009400:	f000 f8f0 	bl	80095e4 <I2C_WaitOnTXISFlagUntilTimeout>
 8009404:	4603      	mov	r3, r0
 8009406:	2b00      	cmp	r3, #0
 8009408:	d001      	beq.n	800940e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800940a:	2301      	movs	r3, #1
 800940c:	e02c      	b.n	8009468 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800940e:	88fb      	ldrh	r3, [r7, #6]
 8009410:	2b01      	cmp	r3, #1
 8009412:	d105      	bne.n	8009420 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009414:	893b      	ldrh	r3, [r7, #8]
 8009416:	b2da      	uxtb	r2, r3
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	629a      	str	r2, [r3, #40]	; 0x28
 800941e:	e015      	b.n	800944c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009420:	893b      	ldrh	r3, [r7, #8]
 8009422:	0a1b      	lsrs	r3, r3, #8
 8009424:	b29b      	uxth	r3, r3
 8009426:	b2da      	uxtb	r2, r3
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800942e:	69fa      	ldr	r2, [r7, #28]
 8009430:	69b9      	ldr	r1, [r7, #24]
 8009432:	68f8      	ldr	r0, [r7, #12]
 8009434:	f000 f8d6 	bl	80095e4 <I2C_WaitOnTXISFlagUntilTimeout>
 8009438:	4603      	mov	r3, r0
 800943a:	2b00      	cmp	r3, #0
 800943c:	d001      	beq.n	8009442 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800943e:	2301      	movs	r3, #1
 8009440:	e012      	b.n	8009468 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009442:	893b      	ldrh	r3, [r7, #8]
 8009444:	b2da      	uxtb	r2, r3
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800944c:	69fb      	ldr	r3, [r7, #28]
 800944e:	9300      	str	r3, [sp, #0]
 8009450:	69bb      	ldr	r3, [r7, #24]
 8009452:	2200      	movs	r2, #0
 8009454:	2180      	movs	r1, #128	; 0x80
 8009456:	68f8      	ldr	r0, [r7, #12]
 8009458:	f000 f884 	bl	8009564 <I2C_WaitOnFlagUntilTimeout>
 800945c:	4603      	mov	r3, r0
 800945e:	2b00      	cmp	r3, #0
 8009460:	d001      	beq.n	8009466 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8009462:	2301      	movs	r3, #1
 8009464:	e000      	b.n	8009468 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8009466:	2300      	movs	r3, #0
}
 8009468:	4618      	mov	r0, r3
 800946a:	3710      	adds	r7, #16
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}
 8009470:	80002000 	.word	0x80002000

08009474 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b086      	sub	sp, #24
 8009478:	af02      	add	r7, sp, #8
 800947a:	60f8      	str	r0, [r7, #12]
 800947c:	4608      	mov	r0, r1
 800947e:	4611      	mov	r1, r2
 8009480:	461a      	mov	r2, r3
 8009482:	4603      	mov	r3, r0
 8009484:	817b      	strh	r3, [r7, #10]
 8009486:	460b      	mov	r3, r1
 8009488:	813b      	strh	r3, [r7, #8]
 800948a:	4613      	mov	r3, r2
 800948c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800948e:	88fb      	ldrh	r3, [r7, #6]
 8009490:	b2da      	uxtb	r2, r3
 8009492:	8979      	ldrh	r1, [r7, #10]
 8009494:	4b20      	ldr	r3, [pc, #128]	; (8009518 <I2C_RequestMemoryRead+0xa4>)
 8009496:	9300      	str	r3, [sp, #0]
 8009498:	2300      	movs	r3, #0
 800949a:	68f8      	ldr	r0, [r7, #12]
 800949c:	f000 f9fe 	bl	800989c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80094a0:	69fa      	ldr	r2, [r7, #28]
 80094a2:	69b9      	ldr	r1, [r7, #24]
 80094a4:	68f8      	ldr	r0, [r7, #12]
 80094a6:	f000 f89d 	bl	80095e4 <I2C_WaitOnTXISFlagUntilTimeout>
 80094aa:	4603      	mov	r3, r0
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d001      	beq.n	80094b4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80094b0:	2301      	movs	r3, #1
 80094b2:	e02c      	b.n	800950e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80094b4:	88fb      	ldrh	r3, [r7, #6]
 80094b6:	2b01      	cmp	r3, #1
 80094b8:	d105      	bne.n	80094c6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80094ba:	893b      	ldrh	r3, [r7, #8]
 80094bc:	b2da      	uxtb	r2, r3
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	629a      	str	r2, [r3, #40]	; 0x28
 80094c4:	e015      	b.n	80094f2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80094c6:	893b      	ldrh	r3, [r7, #8]
 80094c8:	0a1b      	lsrs	r3, r3, #8
 80094ca:	b29b      	uxth	r3, r3
 80094cc:	b2da      	uxtb	r2, r3
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80094d4:	69fa      	ldr	r2, [r7, #28]
 80094d6:	69b9      	ldr	r1, [r7, #24]
 80094d8:	68f8      	ldr	r0, [r7, #12]
 80094da:	f000 f883 	bl	80095e4 <I2C_WaitOnTXISFlagUntilTimeout>
 80094de:	4603      	mov	r3, r0
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d001      	beq.n	80094e8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80094e4:	2301      	movs	r3, #1
 80094e6:	e012      	b.n	800950e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80094e8:	893b      	ldrh	r3, [r7, #8]
 80094ea:	b2da      	uxtb	r2, r3
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80094f2:	69fb      	ldr	r3, [r7, #28]
 80094f4:	9300      	str	r3, [sp, #0]
 80094f6:	69bb      	ldr	r3, [r7, #24]
 80094f8:	2200      	movs	r2, #0
 80094fa:	2140      	movs	r1, #64	; 0x40
 80094fc:	68f8      	ldr	r0, [r7, #12]
 80094fe:	f000 f831 	bl	8009564 <I2C_WaitOnFlagUntilTimeout>
 8009502:	4603      	mov	r3, r0
 8009504:	2b00      	cmp	r3, #0
 8009506:	d001      	beq.n	800950c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8009508:	2301      	movs	r3, #1
 800950a:	e000      	b.n	800950e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800950c:	2300      	movs	r3, #0
}
 800950e:	4618      	mov	r0, r3
 8009510:	3710      	adds	r7, #16
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}
 8009516:	bf00      	nop
 8009518:	80002000 	.word	0x80002000

0800951c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800951c:	b480      	push	{r7}
 800951e:	b083      	sub	sp, #12
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	699b      	ldr	r3, [r3, #24]
 800952a:	f003 0302 	and.w	r3, r3, #2
 800952e:	2b02      	cmp	r3, #2
 8009530:	d103      	bne.n	800953a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	2200      	movs	r2, #0
 8009538:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	699b      	ldr	r3, [r3, #24]
 8009540:	f003 0301 	and.w	r3, r3, #1
 8009544:	2b01      	cmp	r3, #1
 8009546:	d007      	beq.n	8009558 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	699a      	ldr	r2, [r3, #24]
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f042 0201 	orr.w	r2, r2, #1
 8009556:	619a      	str	r2, [r3, #24]
  }
}
 8009558:	bf00      	nop
 800955a:	370c      	adds	r7, #12
 800955c:	46bd      	mov	sp, r7
 800955e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009562:	4770      	bx	lr

08009564 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b084      	sub	sp, #16
 8009568:	af00      	add	r7, sp, #0
 800956a:	60f8      	str	r0, [r7, #12]
 800956c:	60b9      	str	r1, [r7, #8]
 800956e:	603b      	str	r3, [r7, #0]
 8009570:	4613      	mov	r3, r2
 8009572:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009574:	e022      	b.n	80095bc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800957c:	d01e      	beq.n	80095bc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800957e:	f7fd fef5 	bl	800736c <HAL_GetTick>
 8009582:	4602      	mov	r2, r0
 8009584:	69bb      	ldr	r3, [r7, #24]
 8009586:	1ad3      	subs	r3, r2, r3
 8009588:	683a      	ldr	r2, [r7, #0]
 800958a:	429a      	cmp	r2, r3
 800958c:	d302      	bcc.n	8009594 <I2C_WaitOnFlagUntilTimeout+0x30>
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d113      	bne.n	80095bc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009598:	f043 0220 	orr.w	r2, r3, #32
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	2220      	movs	r2, #32
 80095a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	2200      	movs	r2, #0
 80095ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	2200      	movs	r2, #0
 80095b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80095b8:	2301      	movs	r3, #1
 80095ba:	e00f      	b.n	80095dc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	699a      	ldr	r2, [r3, #24]
 80095c2:	68bb      	ldr	r3, [r7, #8]
 80095c4:	4013      	ands	r3, r2
 80095c6:	68ba      	ldr	r2, [r7, #8]
 80095c8:	429a      	cmp	r2, r3
 80095ca:	bf0c      	ite	eq
 80095cc:	2301      	moveq	r3, #1
 80095ce:	2300      	movne	r3, #0
 80095d0:	b2db      	uxtb	r3, r3
 80095d2:	461a      	mov	r2, r3
 80095d4:	79fb      	ldrb	r3, [r7, #7]
 80095d6:	429a      	cmp	r2, r3
 80095d8:	d0cd      	beq.n	8009576 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80095da:	2300      	movs	r3, #0
}
 80095dc:	4618      	mov	r0, r3
 80095de:	3710      	adds	r7, #16
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}

080095e4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b084      	sub	sp, #16
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	60f8      	str	r0, [r7, #12]
 80095ec:	60b9      	str	r1, [r7, #8]
 80095ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80095f0:	e02c      	b.n	800964c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80095f2:	687a      	ldr	r2, [r7, #4]
 80095f4:	68b9      	ldr	r1, [r7, #8]
 80095f6:	68f8      	ldr	r0, [r7, #12]
 80095f8:	f000 f870 	bl	80096dc <I2C_IsErrorOccurred>
 80095fc:	4603      	mov	r3, r0
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d001      	beq.n	8009606 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009602:	2301      	movs	r3, #1
 8009604:	e02a      	b.n	800965c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800960c:	d01e      	beq.n	800964c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800960e:	f7fd fead 	bl	800736c <HAL_GetTick>
 8009612:	4602      	mov	r2, r0
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	1ad3      	subs	r3, r2, r3
 8009618:	68ba      	ldr	r2, [r7, #8]
 800961a:	429a      	cmp	r2, r3
 800961c:	d302      	bcc.n	8009624 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d113      	bne.n	800964c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009628:	f043 0220 	orr.w	r2, r3, #32
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	2220      	movs	r2, #32
 8009634:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	2200      	movs	r2, #0
 800963c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	2200      	movs	r2, #0
 8009644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009648:	2301      	movs	r3, #1
 800964a:	e007      	b.n	800965c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	699b      	ldr	r3, [r3, #24]
 8009652:	f003 0302 	and.w	r3, r3, #2
 8009656:	2b02      	cmp	r3, #2
 8009658:	d1cb      	bne.n	80095f2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800965a:	2300      	movs	r3, #0
}
 800965c:	4618      	mov	r0, r3
 800965e:	3710      	adds	r7, #16
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}

08009664 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b084      	sub	sp, #16
 8009668:	af00      	add	r7, sp, #0
 800966a:	60f8      	str	r0, [r7, #12]
 800966c:	60b9      	str	r1, [r7, #8]
 800966e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009670:	e028      	b.n	80096c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009672:	687a      	ldr	r2, [r7, #4]
 8009674:	68b9      	ldr	r1, [r7, #8]
 8009676:	68f8      	ldr	r0, [r7, #12]
 8009678:	f000 f830 	bl	80096dc <I2C_IsErrorOccurred>
 800967c:	4603      	mov	r3, r0
 800967e:	2b00      	cmp	r3, #0
 8009680:	d001      	beq.n	8009686 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009682:	2301      	movs	r3, #1
 8009684:	e026      	b.n	80096d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009686:	f7fd fe71 	bl	800736c <HAL_GetTick>
 800968a:	4602      	mov	r2, r0
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	1ad3      	subs	r3, r2, r3
 8009690:	68ba      	ldr	r2, [r7, #8]
 8009692:	429a      	cmp	r2, r3
 8009694:	d302      	bcc.n	800969c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d113      	bne.n	80096c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096a0:	f043 0220 	orr.w	r2, r3, #32
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	2220      	movs	r2, #32
 80096ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	2200      	movs	r2, #0
 80096b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	2200      	movs	r2, #0
 80096bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80096c0:	2301      	movs	r3, #1
 80096c2:	e007      	b.n	80096d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	699b      	ldr	r3, [r3, #24]
 80096ca:	f003 0320 	and.w	r3, r3, #32
 80096ce:	2b20      	cmp	r3, #32
 80096d0:	d1cf      	bne.n	8009672 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80096d2:	2300      	movs	r3, #0
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	3710      	adds	r7, #16
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}

080096dc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b08a      	sub	sp, #40	; 0x28
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	60f8      	str	r0, [r7, #12]
 80096e4:	60b9      	str	r1, [r7, #8]
 80096e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80096e8:	2300      	movs	r3, #0
 80096ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	699b      	ldr	r3, [r3, #24]
 80096f4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80096f6:	2300      	movs	r3, #0
 80096f8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80096fe:	69bb      	ldr	r3, [r7, #24]
 8009700:	f003 0310 	and.w	r3, r3, #16
 8009704:	2b00      	cmp	r3, #0
 8009706:	d068      	beq.n	80097da <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	2210      	movs	r2, #16
 800970e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009710:	e049      	b.n	80097a6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009718:	d045      	beq.n	80097a6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800971a:	f7fd fe27 	bl	800736c <HAL_GetTick>
 800971e:	4602      	mov	r2, r0
 8009720:	69fb      	ldr	r3, [r7, #28]
 8009722:	1ad3      	subs	r3, r2, r3
 8009724:	68ba      	ldr	r2, [r7, #8]
 8009726:	429a      	cmp	r2, r3
 8009728:	d302      	bcc.n	8009730 <I2C_IsErrorOccurred+0x54>
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d13a      	bne.n	80097a6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	685b      	ldr	r3, [r3, #4]
 8009736:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800973a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009742:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	699b      	ldr	r3, [r3, #24]
 800974a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800974e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009752:	d121      	bne.n	8009798 <I2C_IsErrorOccurred+0xbc>
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800975a:	d01d      	beq.n	8009798 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800975c:	7cfb      	ldrb	r3, [r7, #19]
 800975e:	2b20      	cmp	r3, #32
 8009760:	d01a      	beq.n	8009798 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	685a      	ldr	r2, [r3, #4]
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009770:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009772:	f7fd fdfb 	bl	800736c <HAL_GetTick>
 8009776:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009778:	e00e      	b.n	8009798 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800977a:	f7fd fdf7 	bl	800736c <HAL_GetTick>
 800977e:	4602      	mov	r2, r0
 8009780:	69fb      	ldr	r3, [r7, #28]
 8009782:	1ad3      	subs	r3, r2, r3
 8009784:	2b19      	cmp	r3, #25
 8009786:	d907      	bls.n	8009798 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8009788:	6a3b      	ldr	r3, [r7, #32]
 800978a:	f043 0320 	orr.w	r3, r3, #32
 800978e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009790:	2301      	movs	r3, #1
 8009792:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8009796:	e006      	b.n	80097a6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	699b      	ldr	r3, [r3, #24]
 800979e:	f003 0320 	and.w	r3, r3, #32
 80097a2:	2b20      	cmp	r3, #32
 80097a4:	d1e9      	bne.n	800977a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	699b      	ldr	r3, [r3, #24]
 80097ac:	f003 0320 	and.w	r3, r3, #32
 80097b0:	2b20      	cmp	r3, #32
 80097b2:	d003      	beq.n	80097bc <I2C_IsErrorOccurred+0xe0>
 80097b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d0aa      	beq.n	8009712 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80097bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d103      	bne.n	80097cc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	2220      	movs	r2, #32
 80097ca:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80097cc:	6a3b      	ldr	r3, [r7, #32]
 80097ce:	f043 0304 	orr.w	r3, r3, #4
 80097d2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80097d4:	2301      	movs	r3, #1
 80097d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	699b      	ldr	r3, [r3, #24]
 80097e0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80097e2:	69bb      	ldr	r3, [r7, #24]
 80097e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d00b      	beq.n	8009804 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80097ec:	6a3b      	ldr	r3, [r7, #32]
 80097ee:	f043 0301 	orr.w	r3, r3, #1
 80097f2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80097fc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80097fe:	2301      	movs	r3, #1
 8009800:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009804:	69bb      	ldr	r3, [r7, #24]
 8009806:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800980a:	2b00      	cmp	r3, #0
 800980c:	d00b      	beq.n	8009826 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800980e:	6a3b      	ldr	r3, [r7, #32]
 8009810:	f043 0308 	orr.w	r3, r3, #8
 8009814:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800981e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009820:	2301      	movs	r3, #1
 8009822:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009826:	69bb      	ldr	r3, [r7, #24]
 8009828:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800982c:	2b00      	cmp	r3, #0
 800982e:	d00b      	beq.n	8009848 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009830:	6a3b      	ldr	r3, [r7, #32]
 8009832:	f043 0302 	orr.w	r3, r3, #2
 8009836:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009840:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009842:	2301      	movs	r3, #1
 8009844:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8009848:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800984c:	2b00      	cmp	r3, #0
 800984e:	d01c      	beq.n	800988a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009850:	68f8      	ldr	r0, [r7, #12]
 8009852:	f7ff fe63 	bl	800951c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	6859      	ldr	r1, [r3, #4]
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681a      	ldr	r2, [r3, #0]
 8009860:	4b0d      	ldr	r3, [pc, #52]	; (8009898 <I2C_IsErrorOccurred+0x1bc>)
 8009862:	400b      	ands	r3, r1
 8009864:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800986a:	6a3b      	ldr	r3, [r7, #32]
 800986c:	431a      	orrs	r2, r3
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	2220      	movs	r2, #32
 8009876:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	2200      	movs	r2, #0
 800987e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	2200      	movs	r2, #0
 8009886:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800988a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800988e:	4618      	mov	r0, r3
 8009890:	3728      	adds	r7, #40	; 0x28
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}
 8009896:	bf00      	nop
 8009898:	fe00e800 	.word	0xfe00e800

0800989c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800989c:	b480      	push	{r7}
 800989e:	b087      	sub	sp, #28
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	60f8      	str	r0, [r7, #12]
 80098a4:	607b      	str	r3, [r7, #4]
 80098a6:	460b      	mov	r3, r1
 80098a8:	817b      	strh	r3, [r7, #10]
 80098aa:	4613      	mov	r3, r2
 80098ac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80098ae:	897b      	ldrh	r3, [r7, #10]
 80098b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80098b4:	7a7b      	ldrb	r3, [r7, #9]
 80098b6:	041b      	lsls	r3, r3, #16
 80098b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80098bc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80098c2:	6a3b      	ldr	r3, [r7, #32]
 80098c4:	4313      	orrs	r3, r2
 80098c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80098ca:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	685a      	ldr	r2, [r3, #4]
 80098d2:	6a3b      	ldr	r3, [r7, #32]
 80098d4:	0d5b      	lsrs	r3, r3, #21
 80098d6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80098da:	4b08      	ldr	r3, [pc, #32]	; (80098fc <I2C_TransferConfig+0x60>)
 80098dc:	430b      	orrs	r3, r1
 80098de:	43db      	mvns	r3, r3
 80098e0:	ea02 0103 	and.w	r1, r2, r3
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	697a      	ldr	r2, [r7, #20]
 80098ea:	430a      	orrs	r2, r1
 80098ec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80098ee:	bf00      	nop
 80098f0:	371c      	adds	r7, #28
 80098f2:	46bd      	mov	sp, r7
 80098f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f8:	4770      	bx	lr
 80098fa:	bf00      	nop
 80098fc:	03ff63ff 	.word	0x03ff63ff

08009900 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b084      	sub	sp, #16
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d101      	bne.n	8009912 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800990e:	2301      	movs	r3, #1
 8009910:	e0bf      	b.n	8009a92 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8009918:	b2db      	uxtb	r3, r3
 800991a:	2b00      	cmp	r3, #0
 800991c:	d106      	bne.n	800992c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2200      	movs	r2, #0
 8009922:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f7fb fb34 	bl	8004f94 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2202      	movs	r2, #2
 8009930:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	699a      	ldr	r2, [r3, #24]
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8009942:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	6999      	ldr	r1, [r3, #24]
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	685a      	ldr	r2, [r3, #4]
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	689b      	ldr	r3, [r3, #8]
 8009952:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009958:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	691b      	ldr	r3, [r3, #16]
 800995e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	430a      	orrs	r2, r1
 8009966:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	6899      	ldr	r1, [r3, #8]
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681a      	ldr	r2, [r3, #0]
 8009972:	4b4a      	ldr	r3, [pc, #296]	; (8009a9c <HAL_LTDC_Init+0x19c>)
 8009974:	400b      	ands	r3, r1
 8009976:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	695b      	ldr	r3, [r3, #20]
 800997c:	041b      	lsls	r3, r3, #16
 800997e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	6899      	ldr	r1, [r3, #8]
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	699a      	ldr	r2, [r3, #24]
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	431a      	orrs	r2, r3
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	430a      	orrs	r2, r1
 8009994:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	68d9      	ldr	r1, [r3, #12]
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681a      	ldr	r2, [r3, #0]
 80099a0:	4b3e      	ldr	r3, [pc, #248]	; (8009a9c <HAL_LTDC_Init+0x19c>)
 80099a2:	400b      	ands	r3, r1
 80099a4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	69db      	ldr	r3, [r3, #28]
 80099aa:	041b      	lsls	r3, r3, #16
 80099ac:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	68d9      	ldr	r1, [r3, #12]
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6a1a      	ldr	r2, [r3, #32]
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	431a      	orrs	r2, r3
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	430a      	orrs	r2, r1
 80099c2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	6919      	ldr	r1, [r3, #16]
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681a      	ldr	r2, [r3, #0]
 80099ce:	4b33      	ldr	r3, [pc, #204]	; (8009a9c <HAL_LTDC_Init+0x19c>)
 80099d0:	400b      	ands	r3, r1
 80099d2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099d8:	041b      	lsls	r3, r3, #16
 80099da:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	6919      	ldr	r1, [r3, #16]
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	431a      	orrs	r2, r3
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	430a      	orrs	r2, r1
 80099f0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	6959      	ldr	r1, [r3, #20]
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681a      	ldr	r2, [r3, #0]
 80099fc:	4b27      	ldr	r3, [pc, #156]	; (8009a9c <HAL_LTDC_Init+0x19c>)
 80099fe:	400b      	ands	r3, r1
 8009a00:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a06:	041b      	lsls	r3, r3, #16
 8009a08:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	6959      	ldr	r1, [r3, #20]
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	431a      	orrs	r2, r3
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	430a      	orrs	r2, r1
 8009a1e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009a26:	021b      	lsls	r3, r3, #8
 8009a28:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8009a30:	041b      	lsls	r3, r3, #16
 8009a32:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8009a42:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009a4a:	68ba      	ldr	r2, [r7, #8]
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	4313      	orrs	r3, r2
 8009a50:	687a      	ldr	r2, [r7, #4]
 8009a52:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8009a56:	431a      	orrs	r2, r3
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	430a      	orrs	r2, r1
 8009a5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f042 0206 	orr.w	r2, r2, #6
 8009a6e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	699a      	ldr	r2, [r3, #24]
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f042 0201 	orr.w	r2, r2, #1
 8009a7e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2200      	movs	r2, #0
 8009a84:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8009a90:	2300      	movs	r3, #0
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	3710      	adds	r7, #16
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}
 8009a9a:	bf00      	nop
 8009a9c:	f000f800 	.word	0xf000f800

08009aa0 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b084      	sub	sp, #16
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aae:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ab6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	f003 0304 	and.w	r3, r3, #4
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d023      	beq.n	8009b0a <HAL_LTDC_IRQHandler+0x6a>
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	f003 0304 	and.w	r3, r3, #4
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d01e      	beq.n	8009b0a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	f022 0204 	bic.w	r2, r2, #4
 8009ada:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	2204      	movs	r2, #4
 8009ae2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009aea:	f043 0201 	orr.w	r2, r3, #1
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2204      	movs	r2, #4
 8009af8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2200      	movs	r2, #0
 8009b00:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f000 f86f 	bl	8009be8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	f003 0302 	and.w	r3, r3, #2
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d023      	beq.n	8009b5c <HAL_LTDC_IRQHandler+0xbc>
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	f003 0302 	and.w	r3, r3, #2
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d01e      	beq.n	8009b5c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f022 0202 	bic.w	r2, r2, #2
 8009b2c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	2202      	movs	r2, #2
 8009b34:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009b3c:	f043 0202 	orr.w	r2, r3, #2
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2204      	movs	r2, #4
 8009b4a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2200      	movs	r2, #0
 8009b52:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f000 f846 	bl	8009be8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	f003 0301 	and.w	r3, r3, #1
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d01b      	beq.n	8009b9e <HAL_LTDC_IRQHandler+0xfe>
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	f003 0301 	and.w	r3, r3, #1
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d016      	beq.n	8009b9e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f022 0201 	bic.w	r2, r2, #1
 8009b7e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	2201      	movs	r2, #1
 8009b86:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2201      	movs	r2, #1
 8009b8c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2200      	movs	r2, #0
 8009b94:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f000 f82f 	bl	8009bfc <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	f003 0308 	and.w	r3, r3, #8
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d01b      	beq.n	8009be0 <HAL_LTDC_IRQHandler+0x140>
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	f003 0308 	and.w	r3, r3, #8
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d016      	beq.n	8009be0 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f022 0208 	bic.w	r2, r2, #8
 8009bc0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	2208      	movs	r2, #8
 8009bc8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2201      	movs	r2, #1
 8009bce:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f000 f818 	bl	8009c10 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8009be0:	bf00      	nop
 8009be2:	3710      	adds	r7, #16
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}

08009be8 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8009be8:	b480      	push	{r7}
 8009bea:	b083      	sub	sp, #12
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8009bf0:	bf00      	nop
 8009bf2:	370c      	adds	r7, #12
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfa:	4770      	bx	lr

08009bfc <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	b083      	sub	sp, #12
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8009c04:	bf00      	nop
 8009c06:	370c      	adds	r7, #12
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0e:	4770      	bx	lr

08009c10 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8009c10:	b480      	push	{r7}
 8009c12:	b083      	sub	sp, #12
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8009c18:	bf00      	nop
 8009c1a:	370c      	adds	r7, #12
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c22:	4770      	bx	lr

08009c24 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009c24:	b5b0      	push	{r4, r5, r7, lr}
 8009c26:	b084      	sub	sp, #16
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	60f8      	str	r0, [r7, #12]
 8009c2c:	60b9      	str	r1, [r7, #8]
 8009c2e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8009c36:	2b01      	cmp	r3, #1
 8009c38:	d101      	bne.n	8009c3e <HAL_LTDC_ConfigLayer+0x1a>
 8009c3a:	2302      	movs	r3, #2
 8009c3c:	e02c      	b.n	8009c98 <HAL_LTDC_ConfigLayer+0x74>
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	2201      	movs	r2, #1
 8009c42:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	2202      	movs	r2, #2
 8009c4a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8009c4e:	68fa      	ldr	r2, [r7, #12]
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2134      	movs	r1, #52	; 0x34
 8009c54:	fb01 f303 	mul.w	r3, r1, r3
 8009c58:	4413      	add	r3, r2
 8009c5a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	4614      	mov	r4, r2
 8009c62:	461d      	mov	r5, r3
 8009c64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009c66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009c68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009c6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009c6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009c6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009c70:	682b      	ldr	r3, [r5, #0]
 8009c72:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8009c74:	687a      	ldr	r2, [r7, #4]
 8009c76:	68b9      	ldr	r1, [r7, #8]
 8009c78:	68f8      	ldr	r0, [r7, #12]
 8009c7a:	f000 f81f 	bl	8009cbc <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	2201      	movs	r2, #1
 8009c84:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	2201      	movs	r2, #1
 8009c8a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	2200      	movs	r2, #0
 8009c92:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8009c96:	2300      	movs	r3, #0
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	3710      	adds	r7, #16
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bdb0      	pop	{r4, r5, r7, pc}

08009ca0 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b083      	sub	sp, #12
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8009cae:	b2db      	uxtb	r3, r3
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	370c      	adds	r7, #12
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cba:	4770      	bx	lr

08009cbc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	b089      	sub	sp, #36	; 0x24
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	60f8      	str	r0, [r7, #12]
 8009cc4:	60b9      	str	r1, [r7, #8]
 8009cc6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	685a      	ldr	r2, [r3, #4]
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	68db      	ldr	r3, [r3, #12]
 8009cd2:	0c1b      	lsrs	r3, r3, #16
 8009cd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009cd8:	4413      	add	r3, r2
 8009cda:	041b      	lsls	r3, r3, #16
 8009cdc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	461a      	mov	r2, r3
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	01db      	lsls	r3, r3, #7
 8009ce8:	4413      	add	r3, r2
 8009cea:	3384      	adds	r3, #132	; 0x84
 8009cec:	685b      	ldr	r3, [r3, #4]
 8009cee:	68fa      	ldr	r2, [r7, #12]
 8009cf0:	6812      	ldr	r2, [r2, #0]
 8009cf2:	4611      	mov	r1, r2
 8009cf4:	687a      	ldr	r2, [r7, #4]
 8009cf6:	01d2      	lsls	r2, r2, #7
 8009cf8:	440a      	add	r2, r1
 8009cfa:	3284      	adds	r2, #132	; 0x84
 8009cfc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8009d00:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	68db      	ldr	r3, [r3, #12]
 8009d0c:	0c1b      	lsrs	r3, r3, #16
 8009d0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009d12:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009d14:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	4619      	mov	r1, r3
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	01db      	lsls	r3, r3, #7
 8009d20:	440b      	add	r3, r1
 8009d22:	3384      	adds	r3, #132	; 0x84
 8009d24:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009d26:	69fb      	ldr	r3, [r7, #28]
 8009d28:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009d2a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	68da      	ldr	r2, [r3, #12]
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	68db      	ldr	r3, [r3, #12]
 8009d36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009d3a:	4413      	add	r3, r2
 8009d3c:	041b      	lsls	r3, r3, #16
 8009d3e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	461a      	mov	r2, r3
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	01db      	lsls	r3, r3, #7
 8009d4a:	4413      	add	r3, r2
 8009d4c:	3384      	adds	r3, #132	; 0x84
 8009d4e:	689b      	ldr	r3, [r3, #8]
 8009d50:	68fa      	ldr	r2, [r7, #12]
 8009d52:	6812      	ldr	r2, [r2, #0]
 8009d54:	4611      	mov	r1, r2
 8009d56:	687a      	ldr	r2, [r7, #4]
 8009d58:	01d2      	lsls	r2, r2, #7
 8009d5a:	440a      	add	r2, r1
 8009d5c:	3284      	adds	r2, #132	; 0x84
 8009d5e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8009d62:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	689a      	ldr	r2, [r3, #8]
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	68db      	ldr	r3, [r3, #12]
 8009d6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009d72:	4413      	add	r3, r2
 8009d74:	1c5a      	adds	r2, r3, #1
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	4619      	mov	r1, r3
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	01db      	lsls	r3, r3, #7
 8009d80:	440b      	add	r3, r1
 8009d82:	3384      	adds	r3, #132	; 0x84
 8009d84:	4619      	mov	r1, r3
 8009d86:	69fb      	ldr	r3, [r7, #28]
 8009d88:	4313      	orrs	r3, r2
 8009d8a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	461a      	mov	r2, r3
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	01db      	lsls	r3, r3, #7
 8009d96:	4413      	add	r3, r2
 8009d98:	3384      	adds	r3, #132	; 0x84
 8009d9a:	691b      	ldr	r3, [r3, #16]
 8009d9c:	68fa      	ldr	r2, [r7, #12]
 8009d9e:	6812      	ldr	r2, [r2, #0]
 8009da0:	4611      	mov	r1, r2
 8009da2:	687a      	ldr	r2, [r7, #4]
 8009da4:	01d2      	lsls	r2, r2, #7
 8009da6:	440a      	add	r2, r1
 8009da8:	3284      	adds	r2, #132	; 0x84
 8009daa:	f023 0307 	bic.w	r3, r3, #7
 8009dae:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	461a      	mov	r2, r3
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	01db      	lsls	r3, r3, #7
 8009dba:	4413      	add	r3, r2
 8009dbc:	3384      	adds	r3, #132	; 0x84
 8009dbe:	461a      	mov	r2, r3
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	691b      	ldr	r3, [r3, #16]
 8009dc4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009dcc:	021b      	lsls	r3, r3, #8
 8009dce:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8009dd6:	041b      	lsls	r3, r3, #16
 8009dd8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	699b      	ldr	r3, [r3, #24]
 8009dde:	061b      	lsls	r3, r3, #24
 8009de0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	461a      	mov	r2, r3
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	01db      	lsls	r3, r3, #7
 8009dec:	4413      	add	r3, r2
 8009dee:	3384      	adds	r3, #132	; 0x84
 8009df0:	699b      	ldr	r3, [r3, #24]
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	461a      	mov	r2, r3
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	01db      	lsls	r3, r3, #7
 8009dfc:	4413      	add	r3, r2
 8009dfe:	3384      	adds	r3, #132	; 0x84
 8009e00:	461a      	mov	r2, r3
 8009e02:	2300      	movs	r3, #0
 8009e04:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009e0c:	461a      	mov	r2, r3
 8009e0e:	69fb      	ldr	r3, [r7, #28]
 8009e10:	431a      	orrs	r2, r3
 8009e12:	69bb      	ldr	r3, [r7, #24]
 8009e14:	431a      	orrs	r2, r3
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	4619      	mov	r1, r3
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	01db      	lsls	r3, r3, #7
 8009e20:	440b      	add	r3, r1
 8009e22:	3384      	adds	r3, #132	; 0x84
 8009e24:	4619      	mov	r1, r3
 8009e26:	697b      	ldr	r3, [r7, #20]
 8009e28:	4313      	orrs	r3, r2
 8009e2a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	461a      	mov	r2, r3
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	01db      	lsls	r3, r3, #7
 8009e36:	4413      	add	r3, r2
 8009e38:	3384      	adds	r3, #132	; 0x84
 8009e3a:	695b      	ldr	r3, [r3, #20]
 8009e3c:	68fa      	ldr	r2, [r7, #12]
 8009e3e:	6812      	ldr	r2, [r2, #0]
 8009e40:	4611      	mov	r1, r2
 8009e42:	687a      	ldr	r2, [r7, #4]
 8009e44:	01d2      	lsls	r2, r2, #7
 8009e46:	440a      	add	r2, r1
 8009e48:	3284      	adds	r2, #132	; 0x84
 8009e4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009e4e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	461a      	mov	r2, r3
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	01db      	lsls	r3, r3, #7
 8009e5a:	4413      	add	r3, r2
 8009e5c:	3384      	adds	r3, #132	; 0x84
 8009e5e:	461a      	mov	r2, r3
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	695b      	ldr	r3, [r3, #20]
 8009e64:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	461a      	mov	r2, r3
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	01db      	lsls	r3, r3, #7
 8009e70:	4413      	add	r3, r2
 8009e72:	3384      	adds	r3, #132	; 0x84
 8009e74:	69da      	ldr	r2, [r3, #28]
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	4619      	mov	r1, r3
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	01db      	lsls	r3, r3, #7
 8009e80:	440b      	add	r3, r1
 8009e82:	3384      	adds	r3, #132	; 0x84
 8009e84:	4619      	mov	r1, r3
 8009e86:	4b58      	ldr	r3, [pc, #352]	; (8009fe8 <LTDC_SetConfig+0x32c>)
 8009e88:	4013      	ands	r3, r2
 8009e8a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	69da      	ldr	r2, [r3, #28]
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	6a1b      	ldr	r3, [r3, #32]
 8009e94:	68f9      	ldr	r1, [r7, #12]
 8009e96:	6809      	ldr	r1, [r1, #0]
 8009e98:	4608      	mov	r0, r1
 8009e9a:	6879      	ldr	r1, [r7, #4]
 8009e9c:	01c9      	lsls	r1, r1, #7
 8009e9e:	4401      	add	r1, r0
 8009ea0:	3184      	adds	r1, #132	; 0x84
 8009ea2:	4313      	orrs	r3, r2
 8009ea4:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	461a      	mov	r2, r3
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	01db      	lsls	r3, r3, #7
 8009eb0:	4413      	add	r3, r2
 8009eb2:	3384      	adds	r3, #132	; 0x84
 8009eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	461a      	mov	r2, r3
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	01db      	lsls	r3, r3, #7
 8009ec0:	4413      	add	r3, r2
 8009ec2:	3384      	adds	r3, #132	; 0x84
 8009ec4:	461a      	mov	r2, r3
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	461a      	mov	r2, r3
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	01db      	lsls	r3, r3, #7
 8009ed4:	4413      	add	r3, r2
 8009ed6:	3384      	adds	r3, #132	; 0x84
 8009ed8:	461a      	mov	r2, r3
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ede:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	691b      	ldr	r3, [r3, #16]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d102      	bne.n	8009eee <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8009ee8:	2304      	movs	r3, #4
 8009eea:	61fb      	str	r3, [r7, #28]
 8009eec:	e01b      	b.n	8009f26 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	691b      	ldr	r3, [r3, #16]
 8009ef2:	2b01      	cmp	r3, #1
 8009ef4:	d102      	bne.n	8009efc <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8009ef6:	2303      	movs	r3, #3
 8009ef8:	61fb      	str	r3, [r7, #28]
 8009efa:	e014      	b.n	8009f26 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	691b      	ldr	r3, [r3, #16]
 8009f00:	2b04      	cmp	r3, #4
 8009f02:	d00b      	beq.n	8009f1c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009f08:	2b02      	cmp	r3, #2
 8009f0a:	d007      	beq.n	8009f1c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009f10:	2b03      	cmp	r3, #3
 8009f12:	d003      	beq.n	8009f1c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009f18:	2b07      	cmp	r3, #7
 8009f1a:	d102      	bne.n	8009f22 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8009f1c:	2302      	movs	r3, #2
 8009f1e:	61fb      	str	r3, [r7, #28]
 8009f20:	e001      	b.n	8009f26 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8009f22:	2301      	movs	r3, #1
 8009f24:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	461a      	mov	r2, r3
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	01db      	lsls	r3, r3, #7
 8009f30:	4413      	add	r3, r2
 8009f32:	3384      	adds	r3, #132	; 0x84
 8009f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f36:	68fa      	ldr	r2, [r7, #12]
 8009f38:	6812      	ldr	r2, [r2, #0]
 8009f3a:	4611      	mov	r1, r2
 8009f3c:	687a      	ldr	r2, [r7, #4]
 8009f3e:	01d2      	lsls	r2, r2, #7
 8009f40:	440a      	add	r2, r1
 8009f42:	3284      	adds	r2, #132	; 0x84
 8009f44:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8009f48:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f4e:	69fa      	ldr	r2, [r7, #28]
 8009f50:	fb02 f303 	mul.w	r3, r2, r3
 8009f54:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	6859      	ldr	r1, [r3, #4]
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	1acb      	subs	r3, r1, r3
 8009f60:	69f9      	ldr	r1, [r7, #28]
 8009f62:	fb01 f303 	mul.w	r3, r1, r3
 8009f66:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8009f68:	68f9      	ldr	r1, [r7, #12]
 8009f6a:	6809      	ldr	r1, [r1, #0]
 8009f6c:	4608      	mov	r0, r1
 8009f6e:	6879      	ldr	r1, [r7, #4]
 8009f70:	01c9      	lsls	r1, r1, #7
 8009f72:	4401      	add	r1, r0
 8009f74:	3184      	adds	r1, #132	; 0x84
 8009f76:	4313      	orrs	r3, r2
 8009f78:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	461a      	mov	r2, r3
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	01db      	lsls	r3, r3, #7
 8009f84:	4413      	add	r3, r2
 8009f86:	3384      	adds	r3, #132	; 0x84
 8009f88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	4619      	mov	r1, r3
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	01db      	lsls	r3, r3, #7
 8009f94:	440b      	add	r3, r1
 8009f96:	3384      	adds	r3, #132	; 0x84
 8009f98:	4619      	mov	r1, r3
 8009f9a:	4b14      	ldr	r3, [pc, #80]	; (8009fec <LTDC_SetConfig+0x330>)
 8009f9c:	4013      	ands	r3, r2
 8009f9e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	461a      	mov	r2, r3
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	01db      	lsls	r3, r3, #7
 8009faa:	4413      	add	r3, r2
 8009fac:	3384      	adds	r3, #132	; 0x84
 8009fae:	461a      	mov	r2, r3
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fb4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	461a      	mov	r2, r3
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	01db      	lsls	r3, r3, #7
 8009fc0:	4413      	add	r3, r2
 8009fc2:	3384      	adds	r3, #132	; 0x84
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	68fa      	ldr	r2, [r7, #12]
 8009fc8:	6812      	ldr	r2, [r2, #0]
 8009fca:	4611      	mov	r1, r2
 8009fcc:	687a      	ldr	r2, [r7, #4]
 8009fce:	01d2      	lsls	r2, r2, #7
 8009fd0:	440a      	add	r2, r1
 8009fd2:	3284      	adds	r2, #132	; 0x84
 8009fd4:	f043 0301 	orr.w	r3, r3, #1
 8009fd8:	6013      	str	r3, [r2, #0]
}
 8009fda:	bf00      	nop
 8009fdc:	3724      	adds	r7, #36	; 0x24
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe4:	4770      	bx	lr
 8009fe6:	bf00      	nop
 8009fe8:	fffff8f8 	.word	0xfffff8f8
 8009fec:	fffff800 	.word	0xfffff800

08009ff0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009ff4:	4b05      	ldr	r3, [pc, #20]	; (800a00c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	4a04      	ldr	r2, [pc, #16]	; (800a00c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009ffa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ffe:	6013      	str	r3, [r2, #0]
}
 800a000:	bf00      	nop
 800a002:	46bd      	mov	sp, r7
 800a004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a008:	4770      	bx	lr
 800a00a:	bf00      	nop
 800a00c:	40007000 	.word	0x40007000

0800a010 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b082      	sub	sp, #8
 800a014:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800a016:	2300      	movs	r3, #0
 800a018:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800a01a:	4b23      	ldr	r3, [pc, #140]	; (800a0a8 <HAL_PWREx_EnableOverDrive+0x98>)
 800a01c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a01e:	4a22      	ldr	r2, [pc, #136]	; (800a0a8 <HAL_PWREx_EnableOverDrive+0x98>)
 800a020:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a024:	6413      	str	r3, [r2, #64]	; 0x40
 800a026:	4b20      	ldr	r3, [pc, #128]	; (800a0a8 <HAL_PWREx_EnableOverDrive+0x98>)
 800a028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a02a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a02e:	603b      	str	r3, [r7, #0]
 800a030:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800a032:	4b1e      	ldr	r3, [pc, #120]	; (800a0ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	4a1d      	ldr	r2, [pc, #116]	; (800a0ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800a038:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a03c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a03e:	f7fd f995 	bl	800736c <HAL_GetTick>
 800a042:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a044:	e009      	b.n	800a05a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a046:	f7fd f991 	bl	800736c <HAL_GetTick>
 800a04a:	4602      	mov	r2, r0
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	1ad3      	subs	r3, r2, r3
 800a050:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a054:	d901      	bls.n	800a05a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800a056:	2303      	movs	r3, #3
 800a058:	e022      	b.n	800a0a0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a05a:	4b14      	ldr	r3, [pc, #80]	; (800a0ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800a05c:	685b      	ldr	r3, [r3, #4]
 800a05e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a062:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a066:	d1ee      	bne.n	800a046 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800a068:	4b10      	ldr	r3, [pc, #64]	; (800a0ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	4a0f      	ldr	r2, [pc, #60]	; (800a0ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800a06e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a072:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a074:	f7fd f97a 	bl	800736c <HAL_GetTick>
 800a078:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a07a:	e009      	b.n	800a090 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a07c:	f7fd f976 	bl	800736c <HAL_GetTick>
 800a080:	4602      	mov	r2, r0
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	1ad3      	subs	r3, r2, r3
 800a086:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a08a:	d901      	bls.n	800a090 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800a08c:	2303      	movs	r3, #3
 800a08e:	e007      	b.n	800a0a0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a090:	4b06      	ldr	r3, [pc, #24]	; (800a0ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800a092:	685b      	ldr	r3, [r3, #4]
 800a094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a098:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a09c:	d1ee      	bne.n	800a07c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800a09e:	2300      	movs	r3, #0
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	3708      	adds	r7, #8
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}
 800a0a8:	40023800 	.word	0x40023800
 800a0ac:	40007000 	.word	0x40007000

0800a0b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b086      	sub	sp, #24
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d101      	bne.n	800a0c6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	e291      	b.n	800a5ea <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	f003 0301 	and.w	r3, r3, #1
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	f000 8087 	beq.w	800a1e2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a0d4:	4b96      	ldr	r3, [pc, #600]	; (800a330 <HAL_RCC_OscConfig+0x280>)
 800a0d6:	689b      	ldr	r3, [r3, #8]
 800a0d8:	f003 030c 	and.w	r3, r3, #12
 800a0dc:	2b04      	cmp	r3, #4
 800a0de:	d00c      	beq.n	800a0fa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a0e0:	4b93      	ldr	r3, [pc, #588]	; (800a330 <HAL_RCC_OscConfig+0x280>)
 800a0e2:	689b      	ldr	r3, [r3, #8]
 800a0e4:	f003 030c 	and.w	r3, r3, #12
 800a0e8:	2b08      	cmp	r3, #8
 800a0ea:	d112      	bne.n	800a112 <HAL_RCC_OscConfig+0x62>
 800a0ec:	4b90      	ldr	r3, [pc, #576]	; (800a330 <HAL_RCC_OscConfig+0x280>)
 800a0ee:	685b      	ldr	r3, [r3, #4]
 800a0f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a0f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a0f8:	d10b      	bne.n	800a112 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a0fa:	4b8d      	ldr	r3, [pc, #564]	; (800a330 <HAL_RCC_OscConfig+0x280>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a102:	2b00      	cmp	r3, #0
 800a104:	d06c      	beq.n	800a1e0 <HAL_RCC_OscConfig+0x130>
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	685b      	ldr	r3, [r3, #4]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d168      	bne.n	800a1e0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800a10e:	2301      	movs	r3, #1
 800a110:	e26b      	b.n	800a5ea <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	685b      	ldr	r3, [r3, #4]
 800a116:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a11a:	d106      	bne.n	800a12a <HAL_RCC_OscConfig+0x7a>
 800a11c:	4b84      	ldr	r3, [pc, #528]	; (800a330 <HAL_RCC_OscConfig+0x280>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	4a83      	ldr	r2, [pc, #524]	; (800a330 <HAL_RCC_OscConfig+0x280>)
 800a122:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a126:	6013      	str	r3, [r2, #0]
 800a128:	e02e      	b.n	800a188 <HAL_RCC_OscConfig+0xd8>
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	685b      	ldr	r3, [r3, #4]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d10c      	bne.n	800a14c <HAL_RCC_OscConfig+0x9c>
 800a132:	4b7f      	ldr	r3, [pc, #508]	; (800a330 <HAL_RCC_OscConfig+0x280>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	4a7e      	ldr	r2, [pc, #504]	; (800a330 <HAL_RCC_OscConfig+0x280>)
 800a138:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a13c:	6013      	str	r3, [r2, #0]
 800a13e:	4b7c      	ldr	r3, [pc, #496]	; (800a330 <HAL_RCC_OscConfig+0x280>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	4a7b      	ldr	r2, [pc, #492]	; (800a330 <HAL_RCC_OscConfig+0x280>)
 800a144:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a148:	6013      	str	r3, [r2, #0]
 800a14a:	e01d      	b.n	800a188 <HAL_RCC_OscConfig+0xd8>
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	685b      	ldr	r3, [r3, #4]
 800a150:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a154:	d10c      	bne.n	800a170 <HAL_RCC_OscConfig+0xc0>
 800a156:	4b76      	ldr	r3, [pc, #472]	; (800a330 <HAL_RCC_OscConfig+0x280>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	4a75      	ldr	r2, [pc, #468]	; (800a330 <HAL_RCC_OscConfig+0x280>)
 800a15c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a160:	6013      	str	r3, [r2, #0]
 800a162:	4b73      	ldr	r3, [pc, #460]	; (800a330 <HAL_RCC_OscConfig+0x280>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	4a72      	ldr	r2, [pc, #456]	; (800a330 <HAL_RCC_OscConfig+0x280>)
 800a168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a16c:	6013      	str	r3, [r2, #0]
 800a16e:	e00b      	b.n	800a188 <HAL_RCC_OscConfig+0xd8>
 800a170:	4b6f      	ldr	r3, [pc, #444]	; (800a330 <HAL_RCC_OscConfig+0x280>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	4a6e      	ldr	r2, [pc, #440]	; (800a330 <HAL_RCC_OscConfig+0x280>)
 800a176:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a17a:	6013      	str	r3, [r2, #0]
 800a17c:	4b6c      	ldr	r3, [pc, #432]	; (800a330 <HAL_RCC_OscConfig+0x280>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	4a6b      	ldr	r2, [pc, #428]	; (800a330 <HAL_RCC_OscConfig+0x280>)
 800a182:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a186:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	685b      	ldr	r3, [r3, #4]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d013      	beq.n	800a1b8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a190:	f7fd f8ec 	bl	800736c <HAL_GetTick>
 800a194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a196:	e008      	b.n	800a1aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a198:	f7fd f8e8 	bl	800736c <HAL_GetTick>
 800a19c:	4602      	mov	r2, r0
 800a19e:	693b      	ldr	r3, [r7, #16]
 800a1a0:	1ad3      	subs	r3, r2, r3
 800a1a2:	2b64      	cmp	r3, #100	; 0x64
 800a1a4:	d901      	bls.n	800a1aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a1a6:	2303      	movs	r3, #3
 800a1a8:	e21f      	b.n	800a5ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a1aa:	4b61      	ldr	r3, [pc, #388]	; (800a330 <HAL_RCC_OscConfig+0x280>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d0f0      	beq.n	800a198 <HAL_RCC_OscConfig+0xe8>
 800a1b6:	e014      	b.n	800a1e2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1b8:	f7fd f8d8 	bl	800736c <HAL_GetTick>
 800a1bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a1be:	e008      	b.n	800a1d2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a1c0:	f7fd f8d4 	bl	800736c <HAL_GetTick>
 800a1c4:	4602      	mov	r2, r0
 800a1c6:	693b      	ldr	r3, [r7, #16]
 800a1c8:	1ad3      	subs	r3, r2, r3
 800a1ca:	2b64      	cmp	r3, #100	; 0x64
 800a1cc:	d901      	bls.n	800a1d2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800a1ce:	2303      	movs	r3, #3
 800a1d0:	e20b      	b.n	800a5ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a1d2:	4b57      	ldr	r3, [pc, #348]	; (800a330 <HAL_RCC_OscConfig+0x280>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d1f0      	bne.n	800a1c0 <HAL_RCC_OscConfig+0x110>
 800a1de:	e000      	b.n	800a1e2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a1e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f003 0302 	and.w	r3, r3, #2
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d069      	beq.n	800a2c2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a1ee:	4b50      	ldr	r3, [pc, #320]	; (800a330 <HAL_RCC_OscConfig+0x280>)
 800a1f0:	689b      	ldr	r3, [r3, #8]
 800a1f2:	f003 030c 	and.w	r3, r3, #12
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d00b      	beq.n	800a212 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a1fa:	4b4d      	ldr	r3, [pc, #308]	; (800a330 <HAL_RCC_OscConfig+0x280>)
 800a1fc:	689b      	ldr	r3, [r3, #8]
 800a1fe:	f003 030c 	and.w	r3, r3, #12
 800a202:	2b08      	cmp	r3, #8
 800a204:	d11c      	bne.n	800a240 <HAL_RCC_OscConfig+0x190>
 800a206:	4b4a      	ldr	r3, [pc, #296]	; (800a330 <HAL_RCC_OscConfig+0x280>)
 800a208:	685b      	ldr	r3, [r3, #4]
 800a20a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d116      	bne.n	800a240 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a212:	4b47      	ldr	r3, [pc, #284]	; (800a330 <HAL_RCC_OscConfig+0x280>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f003 0302 	and.w	r3, r3, #2
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d005      	beq.n	800a22a <HAL_RCC_OscConfig+0x17a>
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	68db      	ldr	r3, [r3, #12]
 800a222:	2b01      	cmp	r3, #1
 800a224:	d001      	beq.n	800a22a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800a226:	2301      	movs	r3, #1
 800a228:	e1df      	b.n	800a5ea <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a22a:	4b41      	ldr	r3, [pc, #260]	; (800a330 <HAL_RCC_OscConfig+0x280>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	691b      	ldr	r3, [r3, #16]
 800a236:	00db      	lsls	r3, r3, #3
 800a238:	493d      	ldr	r1, [pc, #244]	; (800a330 <HAL_RCC_OscConfig+0x280>)
 800a23a:	4313      	orrs	r3, r2
 800a23c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a23e:	e040      	b.n	800a2c2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	68db      	ldr	r3, [r3, #12]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d023      	beq.n	800a290 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a248:	4b39      	ldr	r3, [pc, #228]	; (800a330 <HAL_RCC_OscConfig+0x280>)
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	4a38      	ldr	r2, [pc, #224]	; (800a330 <HAL_RCC_OscConfig+0x280>)
 800a24e:	f043 0301 	orr.w	r3, r3, #1
 800a252:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a254:	f7fd f88a 	bl	800736c <HAL_GetTick>
 800a258:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a25a:	e008      	b.n	800a26e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a25c:	f7fd f886 	bl	800736c <HAL_GetTick>
 800a260:	4602      	mov	r2, r0
 800a262:	693b      	ldr	r3, [r7, #16]
 800a264:	1ad3      	subs	r3, r2, r3
 800a266:	2b02      	cmp	r3, #2
 800a268:	d901      	bls.n	800a26e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800a26a:	2303      	movs	r3, #3
 800a26c:	e1bd      	b.n	800a5ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a26e:	4b30      	ldr	r3, [pc, #192]	; (800a330 <HAL_RCC_OscConfig+0x280>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	f003 0302 	and.w	r3, r3, #2
 800a276:	2b00      	cmp	r3, #0
 800a278:	d0f0      	beq.n	800a25c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a27a:	4b2d      	ldr	r3, [pc, #180]	; (800a330 <HAL_RCC_OscConfig+0x280>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	691b      	ldr	r3, [r3, #16]
 800a286:	00db      	lsls	r3, r3, #3
 800a288:	4929      	ldr	r1, [pc, #164]	; (800a330 <HAL_RCC_OscConfig+0x280>)
 800a28a:	4313      	orrs	r3, r2
 800a28c:	600b      	str	r3, [r1, #0]
 800a28e:	e018      	b.n	800a2c2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a290:	4b27      	ldr	r3, [pc, #156]	; (800a330 <HAL_RCC_OscConfig+0x280>)
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	4a26      	ldr	r2, [pc, #152]	; (800a330 <HAL_RCC_OscConfig+0x280>)
 800a296:	f023 0301 	bic.w	r3, r3, #1
 800a29a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a29c:	f7fd f866 	bl	800736c <HAL_GetTick>
 800a2a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a2a2:	e008      	b.n	800a2b6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a2a4:	f7fd f862 	bl	800736c <HAL_GetTick>
 800a2a8:	4602      	mov	r2, r0
 800a2aa:	693b      	ldr	r3, [r7, #16]
 800a2ac:	1ad3      	subs	r3, r2, r3
 800a2ae:	2b02      	cmp	r3, #2
 800a2b0:	d901      	bls.n	800a2b6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800a2b2:	2303      	movs	r3, #3
 800a2b4:	e199      	b.n	800a5ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a2b6:	4b1e      	ldr	r3, [pc, #120]	; (800a330 <HAL_RCC_OscConfig+0x280>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f003 0302 	and.w	r3, r3, #2
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d1f0      	bne.n	800a2a4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f003 0308 	and.w	r3, r3, #8
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d038      	beq.n	800a340 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	695b      	ldr	r3, [r3, #20]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d019      	beq.n	800a30a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a2d6:	4b16      	ldr	r3, [pc, #88]	; (800a330 <HAL_RCC_OscConfig+0x280>)
 800a2d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a2da:	4a15      	ldr	r2, [pc, #84]	; (800a330 <HAL_RCC_OscConfig+0x280>)
 800a2dc:	f043 0301 	orr.w	r3, r3, #1
 800a2e0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a2e2:	f7fd f843 	bl	800736c <HAL_GetTick>
 800a2e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a2e8:	e008      	b.n	800a2fc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a2ea:	f7fd f83f 	bl	800736c <HAL_GetTick>
 800a2ee:	4602      	mov	r2, r0
 800a2f0:	693b      	ldr	r3, [r7, #16]
 800a2f2:	1ad3      	subs	r3, r2, r3
 800a2f4:	2b02      	cmp	r3, #2
 800a2f6:	d901      	bls.n	800a2fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a2f8:	2303      	movs	r3, #3
 800a2fa:	e176      	b.n	800a5ea <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a2fc:	4b0c      	ldr	r3, [pc, #48]	; (800a330 <HAL_RCC_OscConfig+0x280>)
 800a2fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a300:	f003 0302 	and.w	r3, r3, #2
 800a304:	2b00      	cmp	r3, #0
 800a306:	d0f0      	beq.n	800a2ea <HAL_RCC_OscConfig+0x23a>
 800a308:	e01a      	b.n	800a340 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a30a:	4b09      	ldr	r3, [pc, #36]	; (800a330 <HAL_RCC_OscConfig+0x280>)
 800a30c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a30e:	4a08      	ldr	r2, [pc, #32]	; (800a330 <HAL_RCC_OscConfig+0x280>)
 800a310:	f023 0301 	bic.w	r3, r3, #1
 800a314:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a316:	f7fd f829 	bl	800736c <HAL_GetTick>
 800a31a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a31c:	e00a      	b.n	800a334 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a31e:	f7fd f825 	bl	800736c <HAL_GetTick>
 800a322:	4602      	mov	r2, r0
 800a324:	693b      	ldr	r3, [r7, #16]
 800a326:	1ad3      	subs	r3, r2, r3
 800a328:	2b02      	cmp	r3, #2
 800a32a:	d903      	bls.n	800a334 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800a32c:	2303      	movs	r3, #3
 800a32e:	e15c      	b.n	800a5ea <HAL_RCC_OscConfig+0x53a>
 800a330:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a334:	4b91      	ldr	r3, [pc, #580]	; (800a57c <HAL_RCC_OscConfig+0x4cc>)
 800a336:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a338:	f003 0302 	and.w	r3, r3, #2
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d1ee      	bne.n	800a31e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f003 0304 	and.w	r3, r3, #4
 800a348:	2b00      	cmp	r3, #0
 800a34a:	f000 80a4 	beq.w	800a496 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a34e:	4b8b      	ldr	r3, [pc, #556]	; (800a57c <HAL_RCC_OscConfig+0x4cc>)
 800a350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a356:	2b00      	cmp	r3, #0
 800a358:	d10d      	bne.n	800a376 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800a35a:	4b88      	ldr	r3, [pc, #544]	; (800a57c <HAL_RCC_OscConfig+0x4cc>)
 800a35c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a35e:	4a87      	ldr	r2, [pc, #540]	; (800a57c <HAL_RCC_OscConfig+0x4cc>)
 800a360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a364:	6413      	str	r3, [r2, #64]	; 0x40
 800a366:	4b85      	ldr	r3, [pc, #532]	; (800a57c <HAL_RCC_OscConfig+0x4cc>)
 800a368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a36a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a36e:	60bb      	str	r3, [r7, #8]
 800a370:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a372:	2301      	movs	r3, #1
 800a374:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a376:	4b82      	ldr	r3, [pc, #520]	; (800a580 <HAL_RCC_OscConfig+0x4d0>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d118      	bne.n	800a3b4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800a382:	4b7f      	ldr	r3, [pc, #508]	; (800a580 <HAL_RCC_OscConfig+0x4d0>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	4a7e      	ldr	r2, [pc, #504]	; (800a580 <HAL_RCC_OscConfig+0x4d0>)
 800a388:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a38c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a38e:	f7fc ffed 	bl	800736c <HAL_GetTick>
 800a392:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a394:	e008      	b.n	800a3a8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a396:	f7fc ffe9 	bl	800736c <HAL_GetTick>
 800a39a:	4602      	mov	r2, r0
 800a39c:	693b      	ldr	r3, [r7, #16]
 800a39e:	1ad3      	subs	r3, r2, r3
 800a3a0:	2b64      	cmp	r3, #100	; 0x64
 800a3a2:	d901      	bls.n	800a3a8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800a3a4:	2303      	movs	r3, #3
 800a3a6:	e120      	b.n	800a5ea <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a3a8:	4b75      	ldr	r3, [pc, #468]	; (800a580 <HAL_RCC_OscConfig+0x4d0>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d0f0      	beq.n	800a396 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	689b      	ldr	r3, [r3, #8]
 800a3b8:	2b01      	cmp	r3, #1
 800a3ba:	d106      	bne.n	800a3ca <HAL_RCC_OscConfig+0x31a>
 800a3bc:	4b6f      	ldr	r3, [pc, #444]	; (800a57c <HAL_RCC_OscConfig+0x4cc>)
 800a3be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3c0:	4a6e      	ldr	r2, [pc, #440]	; (800a57c <HAL_RCC_OscConfig+0x4cc>)
 800a3c2:	f043 0301 	orr.w	r3, r3, #1
 800a3c6:	6713      	str	r3, [r2, #112]	; 0x70
 800a3c8:	e02d      	b.n	800a426 <HAL_RCC_OscConfig+0x376>
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	689b      	ldr	r3, [r3, #8]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d10c      	bne.n	800a3ec <HAL_RCC_OscConfig+0x33c>
 800a3d2:	4b6a      	ldr	r3, [pc, #424]	; (800a57c <HAL_RCC_OscConfig+0x4cc>)
 800a3d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3d6:	4a69      	ldr	r2, [pc, #420]	; (800a57c <HAL_RCC_OscConfig+0x4cc>)
 800a3d8:	f023 0301 	bic.w	r3, r3, #1
 800a3dc:	6713      	str	r3, [r2, #112]	; 0x70
 800a3de:	4b67      	ldr	r3, [pc, #412]	; (800a57c <HAL_RCC_OscConfig+0x4cc>)
 800a3e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3e2:	4a66      	ldr	r2, [pc, #408]	; (800a57c <HAL_RCC_OscConfig+0x4cc>)
 800a3e4:	f023 0304 	bic.w	r3, r3, #4
 800a3e8:	6713      	str	r3, [r2, #112]	; 0x70
 800a3ea:	e01c      	b.n	800a426 <HAL_RCC_OscConfig+0x376>
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	689b      	ldr	r3, [r3, #8]
 800a3f0:	2b05      	cmp	r3, #5
 800a3f2:	d10c      	bne.n	800a40e <HAL_RCC_OscConfig+0x35e>
 800a3f4:	4b61      	ldr	r3, [pc, #388]	; (800a57c <HAL_RCC_OscConfig+0x4cc>)
 800a3f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3f8:	4a60      	ldr	r2, [pc, #384]	; (800a57c <HAL_RCC_OscConfig+0x4cc>)
 800a3fa:	f043 0304 	orr.w	r3, r3, #4
 800a3fe:	6713      	str	r3, [r2, #112]	; 0x70
 800a400:	4b5e      	ldr	r3, [pc, #376]	; (800a57c <HAL_RCC_OscConfig+0x4cc>)
 800a402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a404:	4a5d      	ldr	r2, [pc, #372]	; (800a57c <HAL_RCC_OscConfig+0x4cc>)
 800a406:	f043 0301 	orr.w	r3, r3, #1
 800a40a:	6713      	str	r3, [r2, #112]	; 0x70
 800a40c:	e00b      	b.n	800a426 <HAL_RCC_OscConfig+0x376>
 800a40e:	4b5b      	ldr	r3, [pc, #364]	; (800a57c <HAL_RCC_OscConfig+0x4cc>)
 800a410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a412:	4a5a      	ldr	r2, [pc, #360]	; (800a57c <HAL_RCC_OscConfig+0x4cc>)
 800a414:	f023 0301 	bic.w	r3, r3, #1
 800a418:	6713      	str	r3, [r2, #112]	; 0x70
 800a41a:	4b58      	ldr	r3, [pc, #352]	; (800a57c <HAL_RCC_OscConfig+0x4cc>)
 800a41c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a41e:	4a57      	ldr	r2, [pc, #348]	; (800a57c <HAL_RCC_OscConfig+0x4cc>)
 800a420:	f023 0304 	bic.w	r3, r3, #4
 800a424:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	689b      	ldr	r3, [r3, #8]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d015      	beq.n	800a45a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a42e:	f7fc ff9d 	bl	800736c <HAL_GetTick>
 800a432:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a434:	e00a      	b.n	800a44c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a436:	f7fc ff99 	bl	800736c <HAL_GetTick>
 800a43a:	4602      	mov	r2, r0
 800a43c:	693b      	ldr	r3, [r7, #16]
 800a43e:	1ad3      	subs	r3, r2, r3
 800a440:	f241 3288 	movw	r2, #5000	; 0x1388
 800a444:	4293      	cmp	r3, r2
 800a446:	d901      	bls.n	800a44c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800a448:	2303      	movs	r3, #3
 800a44a:	e0ce      	b.n	800a5ea <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a44c:	4b4b      	ldr	r3, [pc, #300]	; (800a57c <HAL_RCC_OscConfig+0x4cc>)
 800a44e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a450:	f003 0302 	and.w	r3, r3, #2
 800a454:	2b00      	cmp	r3, #0
 800a456:	d0ee      	beq.n	800a436 <HAL_RCC_OscConfig+0x386>
 800a458:	e014      	b.n	800a484 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a45a:	f7fc ff87 	bl	800736c <HAL_GetTick>
 800a45e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a460:	e00a      	b.n	800a478 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a462:	f7fc ff83 	bl	800736c <HAL_GetTick>
 800a466:	4602      	mov	r2, r0
 800a468:	693b      	ldr	r3, [r7, #16]
 800a46a:	1ad3      	subs	r3, r2, r3
 800a46c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a470:	4293      	cmp	r3, r2
 800a472:	d901      	bls.n	800a478 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800a474:	2303      	movs	r3, #3
 800a476:	e0b8      	b.n	800a5ea <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a478:	4b40      	ldr	r3, [pc, #256]	; (800a57c <HAL_RCC_OscConfig+0x4cc>)
 800a47a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a47c:	f003 0302 	and.w	r3, r3, #2
 800a480:	2b00      	cmp	r3, #0
 800a482:	d1ee      	bne.n	800a462 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a484:	7dfb      	ldrb	r3, [r7, #23]
 800a486:	2b01      	cmp	r3, #1
 800a488:	d105      	bne.n	800a496 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a48a:	4b3c      	ldr	r3, [pc, #240]	; (800a57c <HAL_RCC_OscConfig+0x4cc>)
 800a48c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a48e:	4a3b      	ldr	r2, [pc, #236]	; (800a57c <HAL_RCC_OscConfig+0x4cc>)
 800a490:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a494:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	699b      	ldr	r3, [r3, #24]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	f000 80a4 	beq.w	800a5e8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a4a0:	4b36      	ldr	r3, [pc, #216]	; (800a57c <HAL_RCC_OscConfig+0x4cc>)
 800a4a2:	689b      	ldr	r3, [r3, #8]
 800a4a4:	f003 030c 	and.w	r3, r3, #12
 800a4a8:	2b08      	cmp	r3, #8
 800a4aa:	d06b      	beq.n	800a584 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	699b      	ldr	r3, [r3, #24]
 800a4b0:	2b02      	cmp	r3, #2
 800a4b2:	d149      	bne.n	800a548 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a4b4:	4b31      	ldr	r3, [pc, #196]	; (800a57c <HAL_RCC_OscConfig+0x4cc>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	4a30      	ldr	r2, [pc, #192]	; (800a57c <HAL_RCC_OscConfig+0x4cc>)
 800a4ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a4be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4c0:	f7fc ff54 	bl	800736c <HAL_GetTick>
 800a4c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a4c6:	e008      	b.n	800a4da <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a4c8:	f7fc ff50 	bl	800736c <HAL_GetTick>
 800a4cc:	4602      	mov	r2, r0
 800a4ce:	693b      	ldr	r3, [r7, #16]
 800a4d0:	1ad3      	subs	r3, r2, r3
 800a4d2:	2b02      	cmp	r3, #2
 800a4d4:	d901      	bls.n	800a4da <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800a4d6:	2303      	movs	r3, #3
 800a4d8:	e087      	b.n	800a5ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a4da:	4b28      	ldr	r3, [pc, #160]	; (800a57c <HAL_RCC_OscConfig+0x4cc>)
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d1f0      	bne.n	800a4c8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	69da      	ldr	r2, [r3, #28]
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6a1b      	ldr	r3, [r3, #32]
 800a4ee:	431a      	orrs	r2, r3
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4f4:	019b      	lsls	r3, r3, #6
 800a4f6:	431a      	orrs	r2, r3
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4fc:	085b      	lsrs	r3, r3, #1
 800a4fe:	3b01      	subs	r3, #1
 800a500:	041b      	lsls	r3, r3, #16
 800a502:	431a      	orrs	r2, r3
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a508:	061b      	lsls	r3, r3, #24
 800a50a:	4313      	orrs	r3, r2
 800a50c:	4a1b      	ldr	r2, [pc, #108]	; (800a57c <HAL_RCC_OscConfig+0x4cc>)
 800a50e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a512:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a514:	4b19      	ldr	r3, [pc, #100]	; (800a57c <HAL_RCC_OscConfig+0x4cc>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	4a18      	ldr	r2, [pc, #96]	; (800a57c <HAL_RCC_OscConfig+0x4cc>)
 800a51a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a51e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a520:	f7fc ff24 	bl	800736c <HAL_GetTick>
 800a524:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a526:	e008      	b.n	800a53a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a528:	f7fc ff20 	bl	800736c <HAL_GetTick>
 800a52c:	4602      	mov	r2, r0
 800a52e:	693b      	ldr	r3, [r7, #16]
 800a530:	1ad3      	subs	r3, r2, r3
 800a532:	2b02      	cmp	r3, #2
 800a534:	d901      	bls.n	800a53a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800a536:	2303      	movs	r3, #3
 800a538:	e057      	b.n	800a5ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a53a:	4b10      	ldr	r3, [pc, #64]	; (800a57c <HAL_RCC_OscConfig+0x4cc>)
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a542:	2b00      	cmp	r3, #0
 800a544:	d0f0      	beq.n	800a528 <HAL_RCC_OscConfig+0x478>
 800a546:	e04f      	b.n	800a5e8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a548:	4b0c      	ldr	r3, [pc, #48]	; (800a57c <HAL_RCC_OscConfig+0x4cc>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	4a0b      	ldr	r2, [pc, #44]	; (800a57c <HAL_RCC_OscConfig+0x4cc>)
 800a54e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a552:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a554:	f7fc ff0a 	bl	800736c <HAL_GetTick>
 800a558:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a55a:	e008      	b.n	800a56e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a55c:	f7fc ff06 	bl	800736c <HAL_GetTick>
 800a560:	4602      	mov	r2, r0
 800a562:	693b      	ldr	r3, [r7, #16]
 800a564:	1ad3      	subs	r3, r2, r3
 800a566:	2b02      	cmp	r3, #2
 800a568:	d901      	bls.n	800a56e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800a56a:	2303      	movs	r3, #3
 800a56c:	e03d      	b.n	800a5ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a56e:	4b03      	ldr	r3, [pc, #12]	; (800a57c <HAL_RCC_OscConfig+0x4cc>)
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a576:	2b00      	cmp	r3, #0
 800a578:	d1f0      	bne.n	800a55c <HAL_RCC_OscConfig+0x4ac>
 800a57a:	e035      	b.n	800a5e8 <HAL_RCC_OscConfig+0x538>
 800a57c:	40023800 	.word	0x40023800
 800a580:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800a584:	4b1b      	ldr	r3, [pc, #108]	; (800a5f4 <HAL_RCC_OscConfig+0x544>)
 800a586:	685b      	ldr	r3, [r3, #4]
 800a588:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	699b      	ldr	r3, [r3, #24]
 800a58e:	2b01      	cmp	r3, #1
 800a590:	d028      	beq.n	800a5e4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a59c:	429a      	cmp	r2, r3
 800a59e:	d121      	bne.n	800a5e4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a5aa:	429a      	cmp	r2, r3
 800a5ac:	d11a      	bne.n	800a5e4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a5ae:	68fa      	ldr	r2, [r7, #12]
 800a5b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a5b4:	4013      	ands	r3, r2
 800a5b6:	687a      	ldr	r2, [r7, #4]
 800a5b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a5ba:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	d111      	bne.n	800a5e4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5ca:	085b      	lsrs	r3, r3, #1
 800a5cc:	3b01      	subs	r3, #1
 800a5ce:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a5d0:	429a      	cmp	r2, r3
 800a5d2:	d107      	bne.n	800a5e4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5de:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800a5e0:	429a      	cmp	r2, r3
 800a5e2:	d001      	beq.n	800a5e8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800a5e4:	2301      	movs	r3, #1
 800a5e6:	e000      	b.n	800a5ea <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800a5e8:	2300      	movs	r3, #0
}
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	3718      	adds	r7, #24
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	bd80      	pop	{r7, pc}
 800a5f2:	bf00      	nop
 800a5f4:	40023800 	.word	0x40023800

0800a5f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b084      	sub	sp, #16
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
 800a600:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800a602:	2300      	movs	r3, #0
 800a604:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d101      	bne.n	800a610 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a60c:	2301      	movs	r3, #1
 800a60e:	e0d0      	b.n	800a7b2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a610:	4b6a      	ldr	r3, [pc, #424]	; (800a7bc <HAL_RCC_ClockConfig+0x1c4>)
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	f003 030f 	and.w	r3, r3, #15
 800a618:	683a      	ldr	r2, [r7, #0]
 800a61a:	429a      	cmp	r2, r3
 800a61c:	d910      	bls.n	800a640 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a61e:	4b67      	ldr	r3, [pc, #412]	; (800a7bc <HAL_RCC_ClockConfig+0x1c4>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	f023 020f 	bic.w	r2, r3, #15
 800a626:	4965      	ldr	r1, [pc, #404]	; (800a7bc <HAL_RCC_ClockConfig+0x1c4>)
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	4313      	orrs	r3, r2
 800a62c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a62e:	4b63      	ldr	r3, [pc, #396]	; (800a7bc <HAL_RCC_ClockConfig+0x1c4>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	f003 030f 	and.w	r3, r3, #15
 800a636:	683a      	ldr	r2, [r7, #0]
 800a638:	429a      	cmp	r2, r3
 800a63a:	d001      	beq.n	800a640 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a63c:	2301      	movs	r3, #1
 800a63e:	e0b8      	b.n	800a7b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	f003 0302 	and.w	r3, r3, #2
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d020      	beq.n	800a68e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	f003 0304 	and.w	r3, r3, #4
 800a654:	2b00      	cmp	r3, #0
 800a656:	d005      	beq.n	800a664 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a658:	4b59      	ldr	r3, [pc, #356]	; (800a7c0 <HAL_RCC_ClockConfig+0x1c8>)
 800a65a:	689b      	ldr	r3, [r3, #8]
 800a65c:	4a58      	ldr	r2, [pc, #352]	; (800a7c0 <HAL_RCC_ClockConfig+0x1c8>)
 800a65e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a662:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	f003 0308 	and.w	r3, r3, #8
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d005      	beq.n	800a67c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a670:	4b53      	ldr	r3, [pc, #332]	; (800a7c0 <HAL_RCC_ClockConfig+0x1c8>)
 800a672:	689b      	ldr	r3, [r3, #8]
 800a674:	4a52      	ldr	r2, [pc, #328]	; (800a7c0 <HAL_RCC_ClockConfig+0x1c8>)
 800a676:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a67a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a67c:	4b50      	ldr	r3, [pc, #320]	; (800a7c0 <HAL_RCC_ClockConfig+0x1c8>)
 800a67e:	689b      	ldr	r3, [r3, #8]
 800a680:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	689b      	ldr	r3, [r3, #8]
 800a688:	494d      	ldr	r1, [pc, #308]	; (800a7c0 <HAL_RCC_ClockConfig+0x1c8>)
 800a68a:	4313      	orrs	r3, r2
 800a68c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	f003 0301 	and.w	r3, r3, #1
 800a696:	2b00      	cmp	r3, #0
 800a698:	d040      	beq.n	800a71c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	685b      	ldr	r3, [r3, #4]
 800a69e:	2b01      	cmp	r3, #1
 800a6a0:	d107      	bne.n	800a6b2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a6a2:	4b47      	ldr	r3, [pc, #284]	; (800a7c0 <HAL_RCC_ClockConfig+0x1c8>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d115      	bne.n	800a6da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	e07f      	b.n	800a7b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	685b      	ldr	r3, [r3, #4]
 800a6b6:	2b02      	cmp	r3, #2
 800a6b8:	d107      	bne.n	800a6ca <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a6ba:	4b41      	ldr	r3, [pc, #260]	; (800a7c0 <HAL_RCC_ClockConfig+0x1c8>)
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d109      	bne.n	800a6da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	e073      	b.n	800a7b2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a6ca:	4b3d      	ldr	r3, [pc, #244]	; (800a7c0 <HAL_RCC_ClockConfig+0x1c8>)
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	f003 0302 	and.w	r3, r3, #2
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d101      	bne.n	800a6da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	e06b      	b.n	800a7b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a6da:	4b39      	ldr	r3, [pc, #228]	; (800a7c0 <HAL_RCC_ClockConfig+0x1c8>)
 800a6dc:	689b      	ldr	r3, [r3, #8]
 800a6de:	f023 0203 	bic.w	r2, r3, #3
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	685b      	ldr	r3, [r3, #4]
 800a6e6:	4936      	ldr	r1, [pc, #216]	; (800a7c0 <HAL_RCC_ClockConfig+0x1c8>)
 800a6e8:	4313      	orrs	r3, r2
 800a6ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a6ec:	f7fc fe3e 	bl	800736c <HAL_GetTick>
 800a6f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a6f2:	e00a      	b.n	800a70a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a6f4:	f7fc fe3a 	bl	800736c <HAL_GetTick>
 800a6f8:	4602      	mov	r2, r0
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	1ad3      	subs	r3, r2, r3
 800a6fe:	f241 3288 	movw	r2, #5000	; 0x1388
 800a702:	4293      	cmp	r3, r2
 800a704:	d901      	bls.n	800a70a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800a706:	2303      	movs	r3, #3
 800a708:	e053      	b.n	800a7b2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a70a:	4b2d      	ldr	r3, [pc, #180]	; (800a7c0 <HAL_RCC_ClockConfig+0x1c8>)
 800a70c:	689b      	ldr	r3, [r3, #8]
 800a70e:	f003 020c 	and.w	r2, r3, #12
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	685b      	ldr	r3, [r3, #4]
 800a716:	009b      	lsls	r3, r3, #2
 800a718:	429a      	cmp	r2, r3
 800a71a:	d1eb      	bne.n	800a6f4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a71c:	4b27      	ldr	r3, [pc, #156]	; (800a7bc <HAL_RCC_ClockConfig+0x1c4>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f003 030f 	and.w	r3, r3, #15
 800a724:	683a      	ldr	r2, [r7, #0]
 800a726:	429a      	cmp	r2, r3
 800a728:	d210      	bcs.n	800a74c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a72a:	4b24      	ldr	r3, [pc, #144]	; (800a7bc <HAL_RCC_ClockConfig+0x1c4>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	f023 020f 	bic.w	r2, r3, #15
 800a732:	4922      	ldr	r1, [pc, #136]	; (800a7bc <HAL_RCC_ClockConfig+0x1c4>)
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	4313      	orrs	r3, r2
 800a738:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a73a:	4b20      	ldr	r3, [pc, #128]	; (800a7bc <HAL_RCC_ClockConfig+0x1c4>)
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	f003 030f 	and.w	r3, r3, #15
 800a742:	683a      	ldr	r2, [r7, #0]
 800a744:	429a      	cmp	r2, r3
 800a746:	d001      	beq.n	800a74c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800a748:	2301      	movs	r3, #1
 800a74a:	e032      	b.n	800a7b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f003 0304 	and.w	r3, r3, #4
 800a754:	2b00      	cmp	r3, #0
 800a756:	d008      	beq.n	800a76a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a758:	4b19      	ldr	r3, [pc, #100]	; (800a7c0 <HAL_RCC_ClockConfig+0x1c8>)
 800a75a:	689b      	ldr	r3, [r3, #8]
 800a75c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	68db      	ldr	r3, [r3, #12]
 800a764:	4916      	ldr	r1, [pc, #88]	; (800a7c0 <HAL_RCC_ClockConfig+0x1c8>)
 800a766:	4313      	orrs	r3, r2
 800a768:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f003 0308 	and.w	r3, r3, #8
 800a772:	2b00      	cmp	r3, #0
 800a774:	d009      	beq.n	800a78a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a776:	4b12      	ldr	r3, [pc, #72]	; (800a7c0 <HAL_RCC_ClockConfig+0x1c8>)
 800a778:	689b      	ldr	r3, [r3, #8]
 800a77a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	691b      	ldr	r3, [r3, #16]
 800a782:	00db      	lsls	r3, r3, #3
 800a784:	490e      	ldr	r1, [pc, #56]	; (800a7c0 <HAL_RCC_ClockConfig+0x1c8>)
 800a786:	4313      	orrs	r3, r2
 800a788:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a78a:	f000 f821 	bl	800a7d0 <HAL_RCC_GetSysClockFreq>
 800a78e:	4602      	mov	r2, r0
 800a790:	4b0b      	ldr	r3, [pc, #44]	; (800a7c0 <HAL_RCC_ClockConfig+0x1c8>)
 800a792:	689b      	ldr	r3, [r3, #8]
 800a794:	091b      	lsrs	r3, r3, #4
 800a796:	f003 030f 	and.w	r3, r3, #15
 800a79a:	490a      	ldr	r1, [pc, #40]	; (800a7c4 <HAL_RCC_ClockConfig+0x1cc>)
 800a79c:	5ccb      	ldrb	r3, [r1, r3]
 800a79e:	fa22 f303 	lsr.w	r3, r2, r3
 800a7a2:	4a09      	ldr	r2, [pc, #36]	; (800a7c8 <HAL_RCC_ClockConfig+0x1d0>)
 800a7a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800a7a6:	4b09      	ldr	r3, [pc, #36]	; (800a7cc <HAL_RCC_ClockConfig+0x1d4>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	f7fb f80a 	bl	80057c4 <HAL_InitTick>

  return HAL_OK;
 800a7b0:	2300      	movs	r3, #0
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	3710      	adds	r7, #16
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}
 800a7ba:	bf00      	nop
 800a7bc:	40023c00 	.word	0x40023c00
 800a7c0:	40023800 	.word	0x40023800
 800a7c4:	08017fe0 	.word	0x08017fe0
 800a7c8:	200000a8 	.word	0x200000a8
 800a7cc:	200000e8 	.word	0x200000e8

0800a7d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a7d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a7d4:	b090      	sub	sp, #64	; 0x40
 800a7d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800a7d8:	2300      	movs	r3, #0
 800a7da:	637b      	str	r3, [r7, #52]	; 0x34
 800a7dc:	2300      	movs	r3, #0
 800a7de:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a7e8:	4b59      	ldr	r3, [pc, #356]	; (800a950 <HAL_RCC_GetSysClockFreq+0x180>)
 800a7ea:	689b      	ldr	r3, [r3, #8]
 800a7ec:	f003 030c 	and.w	r3, r3, #12
 800a7f0:	2b08      	cmp	r3, #8
 800a7f2:	d00d      	beq.n	800a810 <HAL_RCC_GetSysClockFreq+0x40>
 800a7f4:	2b08      	cmp	r3, #8
 800a7f6:	f200 80a1 	bhi.w	800a93c <HAL_RCC_GetSysClockFreq+0x16c>
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d002      	beq.n	800a804 <HAL_RCC_GetSysClockFreq+0x34>
 800a7fe:	2b04      	cmp	r3, #4
 800a800:	d003      	beq.n	800a80a <HAL_RCC_GetSysClockFreq+0x3a>
 800a802:	e09b      	b.n	800a93c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a804:	4b53      	ldr	r3, [pc, #332]	; (800a954 <HAL_RCC_GetSysClockFreq+0x184>)
 800a806:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800a808:	e09b      	b.n	800a942 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a80a:	4b53      	ldr	r3, [pc, #332]	; (800a958 <HAL_RCC_GetSysClockFreq+0x188>)
 800a80c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800a80e:	e098      	b.n	800a942 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a810:	4b4f      	ldr	r3, [pc, #316]	; (800a950 <HAL_RCC_GetSysClockFreq+0x180>)
 800a812:	685b      	ldr	r3, [r3, #4]
 800a814:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a818:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800a81a:	4b4d      	ldr	r3, [pc, #308]	; (800a950 <HAL_RCC_GetSysClockFreq+0x180>)
 800a81c:	685b      	ldr	r3, [r3, #4]
 800a81e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a822:	2b00      	cmp	r3, #0
 800a824:	d028      	beq.n	800a878 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a826:	4b4a      	ldr	r3, [pc, #296]	; (800a950 <HAL_RCC_GetSysClockFreq+0x180>)
 800a828:	685b      	ldr	r3, [r3, #4]
 800a82a:	099b      	lsrs	r3, r3, #6
 800a82c:	2200      	movs	r2, #0
 800a82e:	623b      	str	r3, [r7, #32]
 800a830:	627a      	str	r2, [r7, #36]	; 0x24
 800a832:	6a3b      	ldr	r3, [r7, #32]
 800a834:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800a838:	2100      	movs	r1, #0
 800a83a:	4b47      	ldr	r3, [pc, #284]	; (800a958 <HAL_RCC_GetSysClockFreq+0x188>)
 800a83c:	fb03 f201 	mul.w	r2, r3, r1
 800a840:	2300      	movs	r3, #0
 800a842:	fb00 f303 	mul.w	r3, r0, r3
 800a846:	4413      	add	r3, r2
 800a848:	4a43      	ldr	r2, [pc, #268]	; (800a958 <HAL_RCC_GetSysClockFreq+0x188>)
 800a84a:	fba0 1202 	umull	r1, r2, r0, r2
 800a84e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a850:	460a      	mov	r2, r1
 800a852:	62ba      	str	r2, [r7, #40]	; 0x28
 800a854:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a856:	4413      	add	r3, r2
 800a858:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a85a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a85c:	2200      	movs	r2, #0
 800a85e:	61bb      	str	r3, [r7, #24]
 800a860:	61fa      	str	r2, [r7, #28]
 800a862:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a866:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800a86a:	f7f5 fd21 	bl	80002b0 <__aeabi_uldivmod>
 800a86e:	4602      	mov	r2, r0
 800a870:	460b      	mov	r3, r1
 800a872:	4613      	mov	r3, r2
 800a874:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a876:	e053      	b.n	800a920 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a878:	4b35      	ldr	r3, [pc, #212]	; (800a950 <HAL_RCC_GetSysClockFreq+0x180>)
 800a87a:	685b      	ldr	r3, [r3, #4]
 800a87c:	099b      	lsrs	r3, r3, #6
 800a87e:	2200      	movs	r2, #0
 800a880:	613b      	str	r3, [r7, #16]
 800a882:	617a      	str	r2, [r7, #20]
 800a884:	693b      	ldr	r3, [r7, #16]
 800a886:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800a88a:	f04f 0b00 	mov.w	fp, #0
 800a88e:	4652      	mov	r2, sl
 800a890:	465b      	mov	r3, fp
 800a892:	f04f 0000 	mov.w	r0, #0
 800a896:	f04f 0100 	mov.w	r1, #0
 800a89a:	0159      	lsls	r1, r3, #5
 800a89c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a8a0:	0150      	lsls	r0, r2, #5
 800a8a2:	4602      	mov	r2, r0
 800a8a4:	460b      	mov	r3, r1
 800a8a6:	ebb2 080a 	subs.w	r8, r2, sl
 800a8aa:	eb63 090b 	sbc.w	r9, r3, fp
 800a8ae:	f04f 0200 	mov.w	r2, #0
 800a8b2:	f04f 0300 	mov.w	r3, #0
 800a8b6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800a8ba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800a8be:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800a8c2:	ebb2 0408 	subs.w	r4, r2, r8
 800a8c6:	eb63 0509 	sbc.w	r5, r3, r9
 800a8ca:	f04f 0200 	mov.w	r2, #0
 800a8ce:	f04f 0300 	mov.w	r3, #0
 800a8d2:	00eb      	lsls	r3, r5, #3
 800a8d4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a8d8:	00e2      	lsls	r2, r4, #3
 800a8da:	4614      	mov	r4, r2
 800a8dc:	461d      	mov	r5, r3
 800a8de:	eb14 030a 	adds.w	r3, r4, sl
 800a8e2:	603b      	str	r3, [r7, #0]
 800a8e4:	eb45 030b 	adc.w	r3, r5, fp
 800a8e8:	607b      	str	r3, [r7, #4]
 800a8ea:	f04f 0200 	mov.w	r2, #0
 800a8ee:	f04f 0300 	mov.w	r3, #0
 800a8f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a8f6:	4629      	mov	r1, r5
 800a8f8:	028b      	lsls	r3, r1, #10
 800a8fa:	4621      	mov	r1, r4
 800a8fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a900:	4621      	mov	r1, r4
 800a902:	028a      	lsls	r2, r1, #10
 800a904:	4610      	mov	r0, r2
 800a906:	4619      	mov	r1, r3
 800a908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a90a:	2200      	movs	r2, #0
 800a90c:	60bb      	str	r3, [r7, #8]
 800a90e:	60fa      	str	r2, [r7, #12]
 800a910:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a914:	f7f5 fccc 	bl	80002b0 <__aeabi_uldivmod>
 800a918:	4602      	mov	r2, r0
 800a91a:	460b      	mov	r3, r1
 800a91c:	4613      	mov	r3, r2
 800a91e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800a920:	4b0b      	ldr	r3, [pc, #44]	; (800a950 <HAL_RCC_GetSysClockFreq+0x180>)
 800a922:	685b      	ldr	r3, [r3, #4]
 800a924:	0c1b      	lsrs	r3, r3, #16
 800a926:	f003 0303 	and.w	r3, r3, #3
 800a92a:	3301      	adds	r3, #1
 800a92c:	005b      	lsls	r3, r3, #1
 800a92e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 800a930:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a934:	fbb2 f3f3 	udiv	r3, r2, r3
 800a938:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800a93a:	e002      	b.n	800a942 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a93c:	4b05      	ldr	r3, [pc, #20]	; (800a954 <HAL_RCC_GetSysClockFreq+0x184>)
 800a93e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800a940:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800a944:	4618      	mov	r0, r3
 800a946:	3740      	adds	r7, #64	; 0x40
 800a948:	46bd      	mov	sp, r7
 800a94a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a94e:	bf00      	nop
 800a950:	40023800 	.word	0x40023800
 800a954:	00f42400 	.word	0x00f42400
 800a958:	017d7840 	.word	0x017d7840

0800a95c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a95c:	b480      	push	{r7}
 800a95e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a960:	4b03      	ldr	r3, [pc, #12]	; (800a970 <HAL_RCC_GetHCLKFreq+0x14>)
 800a962:	681b      	ldr	r3, [r3, #0]
}
 800a964:	4618      	mov	r0, r3
 800a966:	46bd      	mov	sp, r7
 800a968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96c:	4770      	bx	lr
 800a96e:	bf00      	nop
 800a970:	200000a8 	.word	0x200000a8

0800a974 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a978:	f7ff fff0 	bl	800a95c <HAL_RCC_GetHCLKFreq>
 800a97c:	4602      	mov	r2, r0
 800a97e:	4b05      	ldr	r3, [pc, #20]	; (800a994 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a980:	689b      	ldr	r3, [r3, #8]
 800a982:	0a9b      	lsrs	r3, r3, #10
 800a984:	f003 0307 	and.w	r3, r3, #7
 800a988:	4903      	ldr	r1, [pc, #12]	; (800a998 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a98a:	5ccb      	ldrb	r3, [r1, r3]
 800a98c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a990:	4618      	mov	r0, r3
 800a992:	bd80      	pop	{r7, pc}
 800a994:	40023800 	.word	0x40023800
 800a998:	08017ff0 	.word	0x08017ff0

0800a99c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a9a0:	f7ff ffdc 	bl	800a95c <HAL_RCC_GetHCLKFreq>
 800a9a4:	4602      	mov	r2, r0
 800a9a6:	4b05      	ldr	r3, [pc, #20]	; (800a9bc <HAL_RCC_GetPCLK2Freq+0x20>)
 800a9a8:	689b      	ldr	r3, [r3, #8]
 800a9aa:	0b5b      	lsrs	r3, r3, #13
 800a9ac:	f003 0307 	and.w	r3, r3, #7
 800a9b0:	4903      	ldr	r1, [pc, #12]	; (800a9c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a9b2:	5ccb      	ldrb	r3, [r1, r3]
 800a9b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	bd80      	pop	{r7, pc}
 800a9bc:	40023800 	.word	0x40023800
 800a9c0:	08017ff0 	.word	0x08017ff0

0800a9c4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a9c4:	b480      	push	{r7}
 800a9c6:	b083      	sub	sp, #12
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
 800a9cc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	220f      	movs	r2, #15
 800a9d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a9d4:	4b12      	ldr	r3, [pc, #72]	; (800aa20 <HAL_RCC_GetClockConfig+0x5c>)
 800a9d6:	689b      	ldr	r3, [r3, #8]
 800a9d8:	f003 0203 	and.w	r2, r3, #3
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a9e0:	4b0f      	ldr	r3, [pc, #60]	; (800aa20 <HAL_RCC_GetClockConfig+0x5c>)
 800a9e2:	689b      	ldr	r3, [r3, #8]
 800a9e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a9ec:	4b0c      	ldr	r3, [pc, #48]	; (800aa20 <HAL_RCC_GetClockConfig+0x5c>)
 800a9ee:	689b      	ldr	r3, [r3, #8]
 800a9f0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800a9f8:	4b09      	ldr	r3, [pc, #36]	; (800aa20 <HAL_RCC_GetClockConfig+0x5c>)
 800a9fa:	689b      	ldr	r3, [r3, #8]
 800a9fc:	08db      	lsrs	r3, r3, #3
 800a9fe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800aa06:	4b07      	ldr	r3, [pc, #28]	; (800aa24 <HAL_RCC_GetClockConfig+0x60>)
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	f003 020f 	and.w	r2, r3, #15
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	601a      	str	r2, [r3, #0]
}
 800aa12:	bf00      	nop
 800aa14:	370c      	adds	r7, #12
 800aa16:	46bd      	mov	sp, r7
 800aa18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1c:	4770      	bx	lr
 800aa1e:	bf00      	nop
 800aa20:	40023800 	.word	0x40023800
 800aa24:	40023c00 	.word	0x40023c00

0800aa28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b088      	sub	sp, #32
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800aa30:	2300      	movs	r3, #0
 800aa32:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800aa34:	2300      	movs	r3, #0
 800aa36:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800aa38:	2300      	movs	r3, #0
 800aa3a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800aa40:	2300      	movs	r3, #0
 800aa42:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	f003 0301 	and.w	r3, r3, #1
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d012      	beq.n	800aa76 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800aa50:	4b69      	ldr	r3, [pc, #420]	; (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aa52:	689b      	ldr	r3, [r3, #8]
 800aa54:	4a68      	ldr	r2, [pc, #416]	; (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aa56:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800aa5a:	6093      	str	r3, [r2, #8]
 800aa5c:	4b66      	ldr	r3, [pc, #408]	; (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aa5e:	689a      	ldr	r2, [r3, #8]
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa64:	4964      	ldr	r1, [pc, #400]	; (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aa66:	4313      	orrs	r3, r2
 800aa68:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d101      	bne.n	800aa76 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800aa72:	2301      	movs	r3, #1
 800aa74:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d017      	beq.n	800aab2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800aa82:	4b5d      	ldr	r3, [pc, #372]	; (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aa84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa88:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa90:	4959      	ldr	r1, [pc, #356]	; (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aa92:	4313      	orrs	r3, r2
 800aa94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aaa0:	d101      	bne.n	800aaa6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800aaa2:	2301      	movs	r3, #1
 800aaa4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d101      	bne.n	800aab2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800aaae:	2301      	movs	r3, #1
 800aab0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d017      	beq.n	800aaee <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800aabe:	4b4e      	ldr	r3, [pc, #312]	; (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aac0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aac4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aacc:	494a      	ldr	r1, [pc, #296]	; (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aace:	4313      	orrs	r3, r2
 800aad0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aad8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aadc:	d101      	bne.n	800aae2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800aade:	2301      	movs	r3, #1
 800aae0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d101      	bne.n	800aaee <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800aaea:	2301      	movs	r3, #1
 800aaec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d001      	beq.n	800aafe <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800aafa:	2301      	movs	r3, #1
 800aafc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	f003 0320 	and.w	r3, r3, #32
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	f000 808b 	beq.w	800ac22 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800ab0c:	4b3a      	ldr	r3, [pc, #232]	; (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ab0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab10:	4a39      	ldr	r2, [pc, #228]	; (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ab12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab16:	6413      	str	r3, [r2, #64]	; 0x40
 800ab18:	4b37      	ldr	r3, [pc, #220]	; (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ab1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab20:	60bb      	str	r3, [r7, #8]
 800ab22:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800ab24:	4b35      	ldr	r3, [pc, #212]	; (800abfc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	4a34      	ldr	r2, [pc, #208]	; (800abfc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800ab2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ab30:	f7fc fc1c 	bl	800736c <HAL_GetTick>
 800ab34:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800ab36:	e008      	b.n	800ab4a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ab38:	f7fc fc18 	bl	800736c <HAL_GetTick>
 800ab3c:	4602      	mov	r2, r0
 800ab3e:	697b      	ldr	r3, [r7, #20]
 800ab40:	1ad3      	subs	r3, r2, r3
 800ab42:	2b64      	cmp	r3, #100	; 0x64
 800ab44:	d901      	bls.n	800ab4a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800ab46:	2303      	movs	r3, #3
 800ab48:	e357      	b.n	800b1fa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800ab4a:	4b2c      	ldr	r3, [pc, #176]	; (800abfc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d0f0      	beq.n	800ab38 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800ab56:	4b28      	ldr	r3, [pc, #160]	; (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ab58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab5e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800ab60:	693b      	ldr	r3, [r7, #16]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d035      	beq.n	800abd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab6e:	693a      	ldr	r2, [r7, #16]
 800ab70:	429a      	cmp	r2, r3
 800ab72:	d02e      	beq.n	800abd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ab74:	4b20      	ldr	r3, [pc, #128]	; (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ab76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab7c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800ab7e:	4b1e      	ldr	r3, [pc, #120]	; (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ab80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab82:	4a1d      	ldr	r2, [pc, #116]	; (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ab84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ab88:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800ab8a:	4b1b      	ldr	r3, [pc, #108]	; (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ab8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab8e:	4a1a      	ldr	r2, [pc, #104]	; (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ab90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ab94:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800ab96:	4a18      	ldr	r2, [pc, #96]	; (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800ab9c:	4b16      	ldr	r3, [pc, #88]	; (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ab9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aba0:	f003 0301 	and.w	r3, r3, #1
 800aba4:	2b01      	cmp	r3, #1
 800aba6:	d114      	bne.n	800abd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aba8:	f7fc fbe0 	bl	800736c <HAL_GetTick>
 800abac:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800abae:	e00a      	b.n	800abc6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800abb0:	f7fc fbdc 	bl	800736c <HAL_GetTick>
 800abb4:	4602      	mov	r2, r0
 800abb6:	697b      	ldr	r3, [r7, #20]
 800abb8:	1ad3      	subs	r3, r2, r3
 800abba:	f241 3288 	movw	r2, #5000	; 0x1388
 800abbe:	4293      	cmp	r3, r2
 800abc0:	d901      	bls.n	800abc6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800abc2:	2303      	movs	r3, #3
 800abc4:	e319      	b.n	800b1fa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800abc6:	4b0c      	ldr	r3, [pc, #48]	; (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800abc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abca:	f003 0302 	and.w	r3, r3, #2
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d0ee      	beq.n	800abb0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800abda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800abde:	d111      	bne.n	800ac04 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800abe0:	4b05      	ldr	r3, [pc, #20]	; (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800abe2:	689b      	ldr	r3, [r3, #8]
 800abe4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800abec:	4b04      	ldr	r3, [pc, #16]	; (800ac00 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800abee:	400b      	ands	r3, r1
 800abf0:	4901      	ldr	r1, [pc, #4]	; (800abf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800abf2:	4313      	orrs	r3, r2
 800abf4:	608b      	str	r3, [r1, #8]
 800abf6:	e00b      	b.n	800ac10 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800abf8:	40023800 	.word	0x40023800
 800abfc:	40007000 	.word	0x40007000
 800ac00:	0ffffcff 	.word	0x0ffffcff
 800ac04:	4baa      	ldr	r3, [pc, #680]	; (800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ac06:	689b      	ldr	r3, [r3, #8]
 800ac08:	4aa9      	ldr	r2, [pc, #676]	; (800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ac0a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800ac0e:	6093      	str	r3, [r2, #8]
 800ac10:	4ba7      	ldr	r3, [pc, #668]	; (800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ac12:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ac1c:	49a4      	ldr	r1, [pc, #656]	; (800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ac1e:	4313      	orrs	r3, r2
 800ac20:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	f003 0310 	and.w	r3, r3, #16
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d010      	beq.n	800ac50 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ac2e:	4ba0      	ldr	r3, [pc, #640]	; (800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ac30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac34:	4a9e      	ldr	r2, [pc, #632]	; (800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ac36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ac3a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800ac3e:	4b9c      	ldr	r3, [pc, #624]	; (800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ac40:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac48:	4999      	ldr	r1, [pc, #612]	; (800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ac4a:	4313      	orrs	r3, r2
 800ac4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d00a      	beq.n	800ac72 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800ac5c:	4b94      	ldr	r3, [pc, #592]	; (800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ac5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac62:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ac6a:	4991      	ldr	r1, [pc, #580]	; (800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ac6c:	4313      	orrs	r3, r2
 800ac6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d00a      	beq.n	800ac94 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800ac7e:	4b8c      	ldr	r3, [pc, #560]	; (800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ac80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac84:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ac8c:	4988      	ldr	r1, [pc, #544]	; (800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ac8e:	4313      	orrs	r3, r2
 800ac90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d00a      	beq.n	800acb6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800aca0:	4b83      	ldr	r3, [pc, #524]	; (800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aca6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800acae:	4980      	ldr	r1, [pc, #512]	; (800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800acb0:	4313      	orrs	r3, r2
 800acb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d00a      	beq.n	800acd8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800acc2:	4b7b      	ldr	r3, [pc, #492]	; (800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800acc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800acc8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acd0:	4977      	ldr	r1, [pc, #476]	; (800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800acd2:	4313      	orrs	r3, r2
 800acd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d00a      	beq.n	800acfa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ace4:	4b72      	ldr	r3, [pc, #456]	; (800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ace6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800acea:	f023 0203 	bic.w	r2, r3, #3
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acf2:	496f      	ldr	r1, [pc, #444]	; (800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800acf4:	4313      	orrs	r3, r2
 800acf6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d00a      	beq.n	800ad1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800ad06:	4b6a      	ldr	r3, [pc, #424]	; (800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ad08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad0c:	f023 020c 	bic.w	r2, r3, #12
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad14:	4966      	ldr	r1, [pc, #408]	; (800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ad16:	4313      	orrs	r3, r2
 800ad18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d00a      	beq.n	800ad3e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800ad28:	4b61      	ldr	r3, [pc, #388]	; (800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ad2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad2e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad36:	495e      	ldr	r1, [pc, #376]	; (800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ad38:	4313      	orrs	r3, r2
 800ad3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d00a      	beq.n	800ad60 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800ad4a:	4b59      	ldr	r3, [pc, #356]	; (800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ad4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad50:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad58:	4955      	ldr	r1, [pc, #340]	; (800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ad5a:	4313      	orrs	r3, r2
 800ad5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d00a      	beq.n	800ad82 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800ad6c:	4b50      	ldr	r3, [pc, #320]	; (800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ad6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad72:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad7a:	494d      	ldr	r1, [pc, #308]	; (800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ad7c:	4313      	orrs	r3, r2
 800ad7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d00a      	beq.n	800ada4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800ad8e:	4b48      	ldr	r3, [pc, #288]	; (800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ad90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad94:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad9c:	4944      	ldr	r1, [pc, #272]	; (800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ad9e:	4313      	orrs	r3, r2
 800ada0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800adac:	2b00      	cmp	r3, #0
 800adae:	d00a      	beq.n	800adc6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800adb0:	4b3f      	ldr	r3, [pc, #252]	; (800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800adb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800adb6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800adbe:	493c      	ldr	r1, [pc, #240]	; (800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800adc0:	4313      	orrs	r3, r2
 800adc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800adce:	2b00      	cmp	r3, #0
 800add0:	d00a      	beq.n	800ade8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800add2:	4b37      	ldr	r3, [pc, #220]	; (800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800add4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800add8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ade0:	4933      	ldr	r1, [pc, #204]	; (800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ade2:	4313      	orrs	r3, r2
 800ade4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d00a      	beq.n	800ae0a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800adf4:	4b2e      	ldr	r3, [pc, #184]	; (800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800adf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800adfa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ae02:	492b      	ldr	r1, [pc, #172]	; (800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ae04:	4313      	orrs	r3, r2
 800ae06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d011      	beq.n	800ae3a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800ae16:	4b26      	ldr	r3, [pc, #152]	; (800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ae18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae1c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae24:	4922      	ldr	r1, [pc, #136]	; (800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ae26:	4313      	orrs	r3, r2
 800ae28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ae34:	d101      	bne.n	800ae3a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800ae36:	2301      	movs	r3, #1
 800ae38:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	f003 0308 	and.w	r3, r3, #8
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d001      	beq.n	800ae4a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800ae46:	2301      	movs	r3, #1
 800ae48:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d00a      	beq.n	800ae6c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ae56:	4b16      	ldr	r3, [pc, #88]	; (800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ae58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae5c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae64:	4912      	ldr	r1, [pc, #72]	; (800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ae66:	4313      	orrs	r3, r2
 800ae68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d00b      	beq.n	800ae90 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800ae78:	4b0d      	ldr	r3, [pc, #52]	; (800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ae7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae7e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ae88:	4909      	ldr	r1, [pc, #36]	; (800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ae8a:	4313      	orrs	r3, r2
 800ae8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800ae90:	69fb      	ldr	r3, [r7, #28]
 800ae92:	2b01      	cmp	r3, #1
 800ae94:	d006      	beq.n	800aea4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	f000 80d9 	beq.w	800b056 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800aea4:	4b02      	ldr	r3, [pc, #8]	; (800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	4a01      	ldr	r2, [pc, #4]	; (800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aeaa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800aeae:	e001      	b.n	800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800aeb0:	40023800 	.word	0x40023800
 800aeb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aeb6:	f7fc fa59 	bl	800736c <HAL_GetTick>
 800aeba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800aebc:	e008      	b.n	800aed0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800aebe:	f7fc fa55 	bl	800736c <HAL_GetTick>
 800aec2:	4602      	mov	r2, r0
 800aec4:	697b      	ldr	r3, [r7, #20]
 800aec6:	1ad3      	subs	r3, r2, r3
 800aec8:	2b64      	cmp	r3, #100	; 0x64
 800aeca:	d901      	bls.n	800aed0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800aecc:	2303      	movs	r3, #3
 800aece:	e194      	b.n	800b1fa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800aed0:	4b6c      	ldr	r3, [pc, #432]	; (800b084 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d1f0      	bne.n	800aebe <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	f003 0301 	and.w	r3, r3, #1
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d021      	beq.n	800af2c <HAL_RCCEx_PeriphCLKConfig+0x504>
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d11d      	bne.n	800af2c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800aef0:	4b64      	ldr	r3, [pc, #400]	; (800b084 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800aef2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aef6:	0c1b      	lsrs	r3, r3, #16
 800aef8:	f003 0303 	and.w	r3, r3, #3
 800aefc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800aefe:	4b61      	ldr	r3, [pc, #388]	; (800b084 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800af00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800af04:	0e1b      	lsrs	r3, r3, #24
 800af06:	f003 030f 	and.w	r3, r3, #15
 800af0a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	685b      	ldr	r3, [r3, #4]
 800af10:	019a      	lsls	r2, r3, #6
 800af12:	693b      	ldr	r3, [r7, #16]
 800af14:	041b      	lsls	r3, r3, #16
 800af16:	431a      	orrs	r2, r3
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	061b      	lsls	r3, r3, #24
 800af1c:	431a      	orrs	r2, r3
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	689b      	ldr	r3, [r3, #8]
 800af22:	071b      	lsls	r3, r3, #28
 800af24:	4957      	ldr	r1, [pc, #348]	; (800b084 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800af26:	4313      	orrs	r3, r2
 800af28:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800af34:	2b00      	cmp	r3, #0
 800af36:	d004      	beq.n	800af42 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af40:	d00a      	beq.n	800af58 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d02e      	beq.n	800afac <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800af56:	d129      	bne.n	800afac <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800af58:	4b4a      	ldr	r3, [pc, #296]	; (800b084 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800af5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800af5e:	0c1b      	lsrs	r3, r3, #16
 800af60:	f003 0303 	and.w	r3, r3, #3
 800af64:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800af66:	4b47      	ldr	r3, [pc, #284]	; (800b084 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800af68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800af6c:	0f1b      	lsrs	r3, r3, #28
 800af6e:	f003 0307 	and.w	r3, r3, #7
 800af72:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	685b      	ldr	r3, [r3, #4]
 800af78:	019a      	lsls	r2, r3, #6
 800af7a:	693b      	ldr	r3, [r7, #16]
 800af7c:	041b      	lsls	r3, r3, #16
 800af7e:	431a      	orrs	r2, r3
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	68db      	ldr	r3, [r3, #12]
 800af84:	061b      	lsls	r3, r3, #24
 800af86:	431a      	orrs	r2, r3
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	071b      	lsls	r3, r3, #28
 800af8c:	493d      	ldr	r1, [pc, #244]	; (800b084 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800af8e:	4313      	orrs	r3, r2
 800af90:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800af94:	4b3b      	ldr	r3, [pc, #236]	; (800b084 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800af96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af9a:	f023 021f 	bic.w	r2, r3, #31
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afa2:	3b01      	subs	r3, #1
 800afa4:	4937      	ldr	r1, [pc, #220]	; (800b084 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800afa6:	4313      	orrs	r3, r2
 800afa8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d01d      	beq.n	800aff4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800afb8:	4b32      	ldr	r3, [pc, #200]	; (800b084 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800afba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800afbe:	0e1b      	lsrs	r3, r3, #24
 800afc0:	f003 030f 	and.w	r3, r3, #15
 800afc4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800afc6:	4b2f      	ldr	r3, [pc, #188]	; (800b084 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800afc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800afcc:	0f1b      	lsrs	r3, r3, #28
 800afce:	f003 0307 	and.w	r3, r3, #7
 800afd2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	685b      	ldr	r3, [r3, #4]
 800afd8:	019a      	lsls	r2, r3, #6
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	691b      	ldr	r3, [r3, #16]
 800afde:	041b      	lsls	r3, r3, #16
 800afe0:	431a      	orrs	r2, r3
 800afe2:	693b      	ldr	r3, [r7, #16]
 800afe4:	061b      	lsls	r3, r3, #24
 800afe6:	431a      	orrs	r2, r3
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	071b      	lsls	r3, r3, #28
 800afec:	4925      	ldr	r1, [pc, #148]	; (800b084 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800afee:	4313      	orrs	r3, r2
 800aff0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800affc:	2b00      	cmp	r3, #0
 800affe:	d011      	beq.n	800b024 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	685b      	ldr	r3, [r3, #4]
 800b004:	019a      	lsls	r2, r3, #6
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	691b      	ldr	r3, [r3, #16]
 800b00a:	041b      	lsls	r3, r3, #16
 800b00c:	431a      	orrs	r2, r3
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	68db      	ldr	r3, [r3, #12]
 800b012:	061b      	lsls	r3, r3, #24
 800b014:	431a      	orrs	r2, r3
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	689b      	ldr	r3, [r3, #8]
 800b01a:	071b      	lsls	r3, r3, #28
 800b01c:	4919      	ldr	r1, [pc, #100]	; (800b084 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b01e:	4313      	orrs	r3, r2
 800b020:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800b024:	4b17      	ldr	r3, [pc, #92]	; (800b084 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	4a16      	ldr	r2, [pc, #88]	; (800b084 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b02a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b02e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b030:	f7fc f99c 	bl	800736c <HAL_GetTick>
 800b034:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b036:	e008      	b.n	800b04a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800b038:	f7fc f998 	bl	800736c <HAL_GetTick>
 800b03c:	4602      	mov	r2, r0
 800b03e:	697b      	ldr	r3, [r7, #20]
 800b040:	1ad3      	subs	r3, r2, r3
 800b042:	2b64      	cmp	r3, #100	; 0x64
 800b044:	d901      	bls.n	800b04a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b046:	2303      	movs	r3, #3
 800b048:	e0d7      	b.n	800b1fa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b04a:	4b0e      	ldr	r3, [pc, #56]	; (800b084 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b052:	2b00      	cmp	r3, #0
 800b054:	d0f0      	beq.n	800b038 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800b056:	69bb      	ldr	r3, [r7, #24]
 800b058:	2b01      	cmp	r3, #1
 800b05a:	f040 80cd 	bne.w	800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800b05e:	4b09      	ldr	r3, [pc, #36]	; (800b084 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	4a08      	ldr	r2, [pc, #32]	; (800b084 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b064:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b068:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b06a:	f7fc f97f 	bl	800736c <HAL_GetTick>
 800b06e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b070:	e00a      	b.n	800b088 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800b072:	f7fc f97b 	bl	800736c <HAL_GetTick>
 800b076:	4602      	mov	r2, r0
 800b078:	697b      	ldr	r3, [r7, #20]
 800b07a:	1ad3      	subs	r3, r2, r3
 800b07c:	2b64      	cmp	r3, #100	; 0x64
 800b07e:	d903      	bls.n	800b088 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b080:	2303      	movs	r3, #3
 800b082:	e0ba      	b.n	800b1fa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800b084:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b088:	4b5e      	ldr	r3, [pc, #376]	; (800b204 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b090:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b094:	d0ed      	beq.n	800b072 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d003      	beq.n	800b0aa <HAL_RCCEx_PeriphCLKConfig+0x682>
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d009      	beq.n	800b0be <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d02e      	beq.n	800b114 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d12a      	bne.n	800b114 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800b0be:	4b51      	ldr	r3, [pc, #324]	; (800b204 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b0c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0c4:	0c1b      	lsrs	r3, r3, #16
 800b0c6:	f003 0303 	and.w	r3, r3, #3
 800b0ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b0cc:	4b4d      	ldr	r3, [pc, #308]	; (800b204 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b0ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0d2:	0f1b      	lsrs	r3, r3, #28
 800b0d4:	f003 0307 	and.w	r3, r3, #7
 800b0d8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	695b      	ldr	r3, [r3, #20]
 800b0de:	019a      	lsls	r2, r3, #6
 800b0e0:	693b      	ldr	r3, [r7, #16]
 800b0e2:	041b      	lsls	r3, r3, #16
 800b0e4:	431a      	orrs	r2, r3
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	699b      	ldr	r3, [r3, #24]
 800b0ea:	061b      	lsls	r3, r3, #24
 800b0ec:	431a      	orrs	r2, r3
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	071b      	lsls	r3, r3, #28
 800b0f2:	4944      	ldr	r1, [pc, #272]	; (800b204 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b0f4:	4313      	orrs	r3, r2
 800b0f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800b0fa:	4b42      	ldr	r3, [pc, #264]	; (800b204 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b0fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b100:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b108:	3b01      	subs	r3, #1
 800b10a:	021b      	lsls	r3, r3, #8
 800b10c:	493d      	ldr	r1, [pc, #244]	; (800b204 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b10e:	4313      	orrs	r3, r2
 800b110:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d022      	beq.n	800b166 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b124:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b128:	d11d      	bne.n	800b166 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b12a:	4b36      	ldr	r3, [pc, #216]	; (800b204 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b12c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b130:	0e1b      	lsrs	r3, r3, #24
 800b132:	f003 030f 	and.w	r3, r3, #15
 800b136:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b138:	4b32      	ldr	r3, [pc, #200]	; (800b204 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b13a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b13e:	0f1b      	lsrs	r3, r3, #28
 800b140:	f003 0307 	and.w	r3, r3, #7
 800b144:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	695b      	ldr	r3, [r3, #20]
 800b14a:	019a      	lsls	r2, r3, #6
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	6a1b      	ldr	r3, [r3, #32]
 800b150:	041b      	lsls	r3, r3, #16
 800b152:	431a      	orrs	r2, r3
 800b154:	693b      	ldr	r3, [r7, #16]
 800b156:	061b      	lsls	r3, r3, #24
 800b158:	431a      	orrs	r2, r3
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	071b      	lsls	r3, r3, #28
 800b15e:	4929      	ldr	r1, [pc, #164]	; (800b204 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b160:	4313      	orrs	r3, r2
 800b162:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	f003 0308 	and.w	r3, r3, #8
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d028      	beq.n	800b1c4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b172:	4b24      	ldr	r3, [pc, #144]	; (800b204 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b178:	0e1b      	lsrs	r3, r3, #24
 800b17a:	f003 030f 	and.w	r3, r3, #15
 800b17e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800b180:	4b20      	ldr	r3, [pc, #128]	; (800b204 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b186:	0c1b      	lsrs	r3, r3, #16
 800b188:	f003 0303 	and.w	r3, r3, #3
 800b18c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	695b      	ldr	r3, [r3, #20]
 800b192:	019a      	lsls	r2, r3, #6
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	041b      	lsls	r3, r3, #16
 800b198:	431a      	orrs	r2, r3
 800b19a:	693b      	ldr	r3, [r7, #16]
 800b19c:	061b      	lsls	r3, r3, #24
 800b19e:	431a      	orrs	r2, r3
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	69db      	ldr	r3, [r3, #28]
 800b1a4:	071b      	lsls	r3, r3, #28
 800b1a6:	4917      	ldr	r1, [pc, #92]	; (800b204 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b1a8:	4313      	orrs	r3, r2
 800b1aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800b1ae:	4b15      	ldr	r3, [pc, #84]	; (800b204 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b1b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b1b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1bc:	4911      	ldr	r1, [pc, #68]	; (800b204 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b1be:	4313      	orrs	r3, r2
 800b1c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800b1c4:	4b0f      	ldr	r3, [pc, #60]	; (800b204 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	4a0e      	ldr	r2, [pc, #56]	; (800b204 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b1ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b1ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b1d0:	f7fc f8cc 	bl	800736c <HAL_GetTick>
 800b1d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b1d6:	e008      	b.n	800b1ea <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800b1d8:	f7fc f8c8 	bl	800736c <HAL_GetTick>
 800b1dc:	4602      	mov	r2, r0
 800b1de:	697b      	ldr	r3, [r7, #20]
 800b1e0:	1ad3      	subs	r3, r2, r3
 800b1e2:	2b64      	cmp	r3, #100	; 0x64
 800b1e4:	d901      	bls.n	800b1ea <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b1e6:	2303      	movs	r3, #3
 800b1e8:	e007      	b.n	800b1fa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b1ea:	4b06      	ldr	r3, [pc, #24]	; (800b204 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b1f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1f6:	d1ef      	bne.n	800b1d8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800b1f8:	2300      	movs	r3, #0
}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	3720      	adds	r7, #32
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}
 800b202:	bf00      	nop
 800b204:	40023800 	.word	0x40023800

0800b208 <HAL_RCCEx_GetPeriphCLKConfig>:
  *         RCC configuration registers.
  * @param  PeriphClkInit pointer to the configured RCC_PeriphCLKInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b208:	b480      	push	{r7}
 800b20a:	b085      	sub	sp, #20
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0;
 800b210:	2300      	movs	r3, #0
 800b212:	60fb      	str	r3, [r7, #12]
                                        RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48    | RCC_PERIPHCLK_SDMMC2   |\
                                        RCC_PERIPHCLK_DFSDM1   | RCC_PERIPHCLK_DFSDM1_AUDIO;
#else
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	4a80      	ldr	r2, [pc, #512]	; (800b418 <HAL_RCCEx_GetPeriphCLKConfig+0x210>)
 800b218:	601a      	str	r2, [r3, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 800b21a:	4b80      	ldr	r3, [pc, #512]	; (800b41c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b21c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b220:	099b      	lsrs	r3, r3, #6
 800b222:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800b22a:	4b7c      	ldr	r3, [pc, #496]	; (800b41c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b22c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b230:	0c1b      	lsrs	r3, r3, #16
 800b232:	f003 0203 	and.w	r2, r3, #3
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800b23a:	4b78      	ldr	r3, [pc, #480]	; (800b41c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b23c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b240:	0e1b      	lsrs	r3, r3, #24
 800b242:	f003 020f 	and.w	r2, r3, #15
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b24a:	4b74      	ldr	r3, [pc, #464]	; (800b41c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b24c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b250:	0f1b      	lsrs	r3, r3, #28
 800b252:	f003 0207 	and.w	r2, r3, #7
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	609a      	str	r2, [r3, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 800b25a:	4b70      	ldr	r3, [pc, #448]	; (800b41c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b25c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b260:	099b      	lsrs	r3, r3, #6
 800b262:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800b26a:	4b6c      	ldr	r3, [pc, #432]	; (800b41c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b26c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b270:	0c1b      	lsrs	r3, r3, #16
 800b272:	f003 0203 	and.w	r2, r3, #3
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	621a      	str	r2, [r3, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b27a:	4b68      	ldr	r3, [pc, #416]	; (800b41c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b27c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b280:	0e1b      	lsrs	r3, r3, #24
 800b282:	f003 020f 	and.w	r2, r3, #15
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b28a:	4b64      	ldr	r3, [pc, #400]	; (800b41c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b28c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b290:	0f1b      	lsrs	r3, r3, #28
 800b292:	f003 0207 	and.w	r2, r3, #7
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	61da      	str	r2, [r3, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
 800b29a:	4b60      	ldr	r3, [pc, #384]	; (800b41c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b29c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b2a0:	f003 021f 	and.w	r2, r3, #31
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	625a      	str	r2, [r3, #36]	; 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
 800b2a8:	4b5c      	ldr	r3, [pc, #368]	; (800b41c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b2aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b2ae:	0a1b      	lsrs	r3, r3, #8
 800b2b0:	f003 021f 	and.w	r2, r3, #31
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 800b2b8:	4b58      	ldr	r3, [pc, #352]	; (800b41c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b2ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b2be:	0c1b      	lsrs	r3, r3, #16
 800b2c0:	f003 0203 	and.w	r2, r3, #3
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 800b2c8:	4b54      	ldr	r3, [pc, #336]	; (800b41c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b2ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b2ce:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 800b2d6:	4b51      	ldr	r3, [pc, #324]	; (800b41c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b2d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b2dc:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 800b2e4:	4b4d      	ldr	r3, [pc, #308]	; (800b41c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b2e6:	689b      	ldr	r3, [r3, #8]
 800b2e8:	f403 0200 	and.w	r2, r3, #8388608	; 0x800000
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 800b2f0:	4b4a      	ldr	r3, [pc, #296]	; (800b41c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b2f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b2f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 800b2fe:	4b47      	ldr	r3, [pc, #284]	; (800b41c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b300:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b304:	f403 2240 	and.w	r2, r3, #786432	; 0xc0000
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	669a      	str	r2, [r3, #104]	; 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 800b30c:	4b43      	ldr	r3, [pc, #268]	; (800b41c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b30e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b312:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 800b31a:	4b40      	ldr	r3, [pc, #256]	; (800b41c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b31c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b320:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	671a      	str	r2, [r3, #112]	; 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 800b328:	4b3c      	ldr	r3, [pc, #240]	; (800b41c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b32a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b32e:	f003 0203 	and.w	r2, r3, #3
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 800b336:	4b39      	ldr	r3, [pc, #228]	; (800b41c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b33c:	f003 020c 	and.w	r2, r3, #12
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	649a      	str	r2, [r3, #72]	; 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 800b344:	4b35      	ldr	r3, [pc, #212]	; (800b41c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b34a:	f003 0230 	and.w	r2, r3, #48	; 0x30
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 800b352:	4b32      	ldr	r3, [pc, #200]	; (800b41c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b358:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 800b360:	4b2e      	ldr	r3, [pc, #184]	; (800b41c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b366:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 800b36e:	4b2b      	ldr	r3, [pc, #172]	; (800b41c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b374:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 800b37c:	4b27      	ldr	r3, [pc, #156]	; (800b41c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b37e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b382:	f403 5240 	and.w	r2, r3, #12288	; 0x3000
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 800b38a:	4b24      	ldr	r3, [pc, #144]	; (800b41c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b38c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b390:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	661a      	str	r2, [r3, #96]	; 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 800b398:	4b20      	ldr	r3, [pc, #128]	; (800b41c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b39a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b39e:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 800b3a6:	4b1d      	ldr	r3, [pc, #116]	; (800b41c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b3a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3ac:	f003 6280 	and.w	r2, r3, #67108864	; 0x4000000
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 800b3b4:	4b19      	ldr	r3, [pc, #100]	; (800b41c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b3b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3ba:	f003 6200 	and.w	r2, r3, #134217728	; 0x8000000
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 800b3c2:	4b16      	ldr	r3, [pc, #88]	; (800b41c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b3c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3c8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 800b3d2:	4b12      	ldr	r3, [pc, #72]	; (800b41c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b3d4:	689b      	ldr	r3, [r3, #8]
 800b3d6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800b3da:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 800b3dc:	4b0f      	ldr	r3, [pc, #60]	; (800b41c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b3de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3e0:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	431a      	orrs	r2, r3
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	631a      	str	r2, [r3, #48]	; 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 800b3ec:	4b0b      	ldr	r3, [pc, #44]	; (800b41c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800b3ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b3f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d103      	bne.n	800b402 <HAL_RCCEx_GetPeriphCLKConfig+0x1fa>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	639a      	str	r2, [r3, #56]	; 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 800b400:	e003      	b.n	800b40a <HAL_RCCEx_GetPeriphCLKConfig+0x202>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b408:	639a      	str	r2, [r3, #56]	; 0x38
}
 800b40a:	bf00      	nop
 800b40c:	3714      	adds	r7, #20
 800b40e:	46bd      	mov	sp, r7
 800b410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b414:	4770      	bx	lr
 800b416:	bf00      	nop
 800b418:	00fffff1 	.word	0x00fffff1
 800b41c:	40023800 	.word	0x40023800

0800b420 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800b420:	b480      	push	{r7}
 800b422:	b087      	sub	sp, #28
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800b428:	2300      	movs	r3, #0
 800b42a:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800b42c:	2300      	movs	r3, #0
 800b42e:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800b430:	2300      	movs	r3, #0
 800b432:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800b434:	2300      	movs	r3, #0
 800b436:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b43e:	f040 808c 	bne.w	800b55a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  {
    saiclocksource = RCC->DCKCFGR1;
 800b442:	4b95      	ldr	r3, [pc, #596]	; (800b698 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b444:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b448:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800b44a:	68bb      	ldr	r3, [r7, #8]
 800b44c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800b450:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800b452:	68bb      	ldr	r3, [r7, #8]
 800b454:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b458:	d07c      	beq.n	800b554 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b460:	d87d      	bhi.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800b462:	68bb      	ldr	r3, [r7, #8]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d004      	beq.n	800b472 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b46e:	d039      	beq.n	800b4e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800b470:	e075      	b.n	800b55e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b472:	4b89      	ldr	r3, [pc, #548]	; (800b698 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b474:	685b      	ldr	r3, [r3, #4]
 800b476:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d108      	bne.n	800b490 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b47e:	4b86      	ldr	r3, [pc, #536]	; (800b698 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b480:	685b      	ldr	r3, [r3, #4]
 800b482:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b486:	4a85      	ldr	r2, [pc, #532]	; (800b69c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800b488:	fbb2 f3f3 	udiv	r3, r2, r3
 800b48c:	613b      	str	r3, [r7, #16]
 800b48e:	e007      	b.n	800b4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800b490:	4b81      	ldr	r3, [pc, #516]	; (800b698 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b492:	685b      	ldr	r3, [r3, #4]
 800b494:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b498:	4a81      	ldr	r2, [pc, #516]	; (800b6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800b49a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b49e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800b4a0:	4b7d      	ldr	r3, [pc, #500]	; (800b698 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b4a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4a6:	0e1b      	lsrs	r3, r3, #24
 800b4a8:	f003 030f 	and.w	r3, r3, #15
 800b4ac:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800b4ae:	4b7a      	ldr	r3, [pc, #488]	; (800b698 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b4b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4b4:	099b      	lsrs	r3, r3, #6
 800b4b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4ba:	693a      	ldr	r2, [r7, #16]
 800b4bc:	fb03 f202 	mul.w	r2, r3, r2
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4c6:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800b4c8:	4b73      	ldr	r3, [pc, #460]	; (800b698 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b4ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b4ce:	0a1b      	lsrs	r3, r3, #8
 800b4d0:	f003 031f 	and.w	r3, r3, #31
 800b4d4:	3301      	adds	r3, #1
 800b4d6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800b4d8:	697a      	ldr	r2, [r7, #20]
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4e0:	617b      	str	r3, [r7, #20]
        break;
 800b4e2:	e03d      	b.n	800b560 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b4e4:	4b6c      	ldr	r3, [pc, #432]	; (800b698 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b4e6:	685b      	ldr	r3, [r3, #4]
 800b4e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d108      	bne.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b4f0:	4b69      	ldr	r3, [pc, #420]	; (800b698 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b4f2:	685b      	ldr	r3, [r3, #4]
 800b4f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b4f8:	4a68      	ldr	r2, [pc, #416]	; (800b69c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800b4fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4fe:	613b      	str	r3, [r7, #16]
 800b500:	e007      	b.n	800b512 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800b502:	4b65      	ldr	r3, [pc, #404]	; (800b698 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b504:	685b      	ldr	r3, [r3, #4]
 800b506:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b50a:	4a65      	ldr	r2, [pc, #404]	; (800b6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800b50c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b510:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800b512:	4b61      	ldr	r3, [pc, #388]	; (800b698 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b514:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b518:	0e1b      	lsrs	r3, r3, #24
 800b51a:	f003 030f 	and.w	r3, r3, #15
 800b51e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800b520:	4b5d      	ldr	r3, [pc, #372]	; (800b698 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b522:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b526:	099b      	lsrs	r3, r3, #6
 800b528:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b52c:	693a      	ldr	r2, [r7, #16]
 800b52e:	fb03 f202 	mul.w	r2, r3, r2
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	fbb2 f3f3 	udiv	r3, r2, r3
 800b538:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800b53a:	4b57      	ldr	r3, [pc, #348]	; (800b698 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b53c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b540:	f003 031f 	and.w	r3, r3, #31
 800b544:	3301      	adds	r3, #1
 800b546:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800b548:	697a      	ldr	r2, [r7, #20]
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b550:	617b      	str	r3, [r7, #20]
        break;
 800b552:	e005      	b.n	800b560 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        frequency = EXTERNAL_CLOCK_VALUE;
 800b554:	4b53      	ldr	r3, [pc, #332]	; (800b6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800b556:	617b      	str	r3, [r7, #20]
        break;
 800b558:	e002      	b.n	800b560 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      }
    }
  }
 800b55a:	bf00      	nop
 800b55c:	e000      	b.n	800b560 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        break;
 800b55e:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b566:	f040 808c 	bne.w	800b682 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  {
    saiclocksource = RCC->DCKCFGR1;
 800b56a:	4b4b      	ldr	r3, [pc, #300]	; (800b698 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b56c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b570:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800b572:	68bb      	ldr	r3, [r7, #8]
 800b574:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800b578:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800b57a:	68bb      	ldr	r3, [r7, #8]
 800b57c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b580:	d07c      	beq.n	800b67c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800b582:	68bb      	ldr	r3, [r7, #8]
 800b584:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b588:	d87d      	bhi.n	800b686 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 800b58a:	68bb      	ldr	r3, [r7, #8]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d004      	beq.n	800b59a <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800b590:	68bb      	ldr	r3, [r7, #8]
 800b592:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b596:	d039      	beq.n	800b60c <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800b598:	e075      	b.n	800b686 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b59a:	4b3f      	ldr	r3, [pc, #252]	; (800b698 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b59c:	685b      	ldr	r3, [r3, #4]
 800b59e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d108      	bne.n	800b5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b5a6:	4b3c      	ldr	r3, [pc, #240]	; (800b698 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b5a8:	685b      	ldr	r3, [r3, #4]
 800b5aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b5ae:	4a3b      	ldr	r2, [pc, #236]	; (800b69c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800b5b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5b4:	613b      	str	r3, [r7, #16]
 800b5b6:	e007      	b.n	800b5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800b5b8:	4b37      	ldr	r3, [pc, #220]	; (800b698 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b5ba:	685b      	ldr	r3, [r3, #4]
 800b5bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b5c0:	4a37      	ldr	r2, [pc, #220]	; (800b6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800b5c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5c6:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800b5c8:	4b33      	ldr	r3, [pc, #204]	; (800b698 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b5ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5ce:	0e1b      	lsrs	r3, r3, #24
 800b5d0:	f003 030f 	and.w	r3, r3, #15
 800b5d4:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800b5d6:	4b30      	ldr	r3, [pc, #192]	; (800b698 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b5d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5dc:	099b      	lsrs	r3, r3, #6
 800b5de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5e2:	693a      	ldr	r2, [r7, #16]
 800b5e4:	fb03 f202 	mul.w	r2, r3, r2
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5ee:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800b5f0:	4b29      	ldr	r3, [pc, #164]	; (800b698 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b5f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b5f6:	0a1b      	lsrs	r3, r3, #8
 800b5f8:	f003 031f 	and.w	r3, r3, #31
 800b5fc:	3301      	adds	r3, #1
 800b5fe:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800b600:	697a      	ldr	r2, [r7, #20]
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	fbb2 f3f3 	udiv	r3, r2, r3
 800b608:	617b      	str	r3, [r7, #20]
        break;
 800b60a:	e03d      	b.n	800b688 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b60c:	4b22      	ldr	r3, [pc, #136]	; (800b698 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b60e:	685b      	ldr	r3, [r3, #4]
 800b610:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b614:	2b00      	cmp	r3, #0
 800b616:	d108      	bne.n	800b62a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b618:	4b1f      	ldr	r3, [pc, #124]	; (800b698 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b61a:	685b      	ldr	r3, [r3, #4]
 800b61c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b620:	4a1e      	ldr	r2, [pc, #120]	; (800b69c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800b622:	fbb2 f3f3 	udiv	r3, r2, r3
 800b626:	613b      	str	r3, [r7, #16]
 800b628:	e007      	b.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800b62a:	4b1b      	ldr	r3, [pc, #108]	; (800b698 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b62c:	685b      	ldr	r3, [r3, #4]
 800b62e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b632:	4a1b      	ldr	r2, [pc, #108]	; (800b6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800b634:	fbb2 f3f3 	udiv	r3, r2, r3
 800b638:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800b63a:	4b17      	ldr	r3, [pc, #92]	; (800b698 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b63c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b640:	0e1b      	lsrs	r3, r3, #24
 800b642:	f003 030f 	and.w	r3, r3, #15
 800b646:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800b648:	4b13      	ldr	r3, [pc, #76]	; (800b698 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b64a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b64e:	099b      	lsrs	r3, r3, #6
 800b650:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b654:	693a      	ldr	r2, [r7, #16]
 800b656:	fb03 f202 	mul.w	r2, r3, r2
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b660:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800b662:	4b0d      	ldr	r3, [pc, #52]	; (800b698 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b664:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b668:	f003 031f 	and.w	r3, r3, #31
 800b66c:	3301      	adds	r3, #1
 800b66e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800b670:	697a      	ldr	r2, [r7, #20]
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	fbb2 f3f3 	udiv	r3, r2, r3
 800b678:	617b      	str	r3, [r7, #20]
        break;
 800b67a:	e005      	b.n	800b688 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        frequency = EXTERNAL_CLOCK_VALUE;
 800b67c:	4b09      	ldr	r3, [pc, #36]	; (800b6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800b67e:	617b      	str	r3, [r7, #20]
        break;
 800b680:	e002      	b.n	800b688 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
      }
    }
  }
 800b682:	bf00      	nop
 800b684:	e000      	b.n	800b688 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        break;
 800b686:	bf00      	nop

  return frequency;
 800b688:	697b      	ldr	r3, [r7, #20]
}
 800b68a:	4618      	mov	r0, r3
 800b68c:	371c      	adds	r7, #28
 800b68e:	46bd      	mov	sp, r7
 800b690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b694:	4770      	bx	lr
 800b696:	bf00      	nop
 800b698:	40023800 	.word	0x40023800
 800b69c:	00f42400 	.word	0x00f42400
 800b6a0:	017d7840 	.word	0x017d7840
 800b6a4:	00bb8000 	.word	0x00bb8000

0800b6a8 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b088      	sub	sp, #32
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d101      	bne.n	800b6c6 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800b6c2:	2301      	movs	r3, #1
 800b6c4:	e156      	b.n	800b974 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800b6cc:	b2db      	uxtb	r3, r3
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d106      	bne.n	800b6e0 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800b6da:	6878      	ldr	r0, [r7, #4]
 800b6dc:	f7f9 ff3a 	bl	8005554 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2202      	movs	r2, #2
 800b6e4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800b6e8:	6878      	ldr	r0, [r7, #4]
 800b6ea:	f000 fad7 	bl	800bc9c <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	68db      	ldr	r3, [r3, #12]
 800b6f2:	2b02      	cmp	r3, #2
 800b6f4:	d00c      	beq.n	800b710 <HAL_SAI_Init+0x68>
 800b6f6:	2b02      	cmp	r3, #2
 800b6f8:	d80d      	bhi.n	800b716 <HAL_SAI_Init+0x6e>
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d002      	beq.n	800b704 <HAL_SAI_Init+0x5c>
 800b6fe:	2b01      	cmp	r3, #1
 800b700:	d003      	beq.n	800b70a <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800b702:	e008      	b.n	800b716 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800b704:	2300      	movs	r3, #0
 800b706:	61fb      	str	r3, [r7, #28]
      break;
 800b708:	e006      	b.n	800b718 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800b70a:	2310      	movs	r3, #16
 800b70c:	61fb      	str	r3, [r7, #28]
      break;
 800b70e:	e003      	b.n	800b718 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800b710:	2320      	movs	r3, #32
 800b712:	61fb      	str	r3, [r7, #28]
      break;
 800b714:	e000      	b.n	800b718 <HAL_SAI_Init+0x70>
      break;
 800b716:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	689b      	ldr	r3, [r3, #8]
 800b71c:	2b03      	cmp	r3, #3
 800b71e:	d81e      	bhi.n	800b75e <HAL_SAI_Init+0xb6>
 800b720:	a201      	add	r2, pc, #4	; (adr r2, 800b728 <HAL_SAI_Init+0x80>)
 800b722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b726:	bf00      	nop
 800b728:	0800b739 	.word	0x0800b739
 800b72c:	0800b73f 	.word	0x0800b73f
 800b730:	0800b747 	.word	0x0800b747
 800b734:	0800b74f 	.word	0x0800b74f
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800b738:	2300      	movs	r3, #0
 800b73a:	617b      	str	r3, [r7, #20]
    }
    break;
 800b73c:	e010      	b.n	800b760 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800b73e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b742:	617b      	str	r3, [r7, #20]
    }
    break;
 800b744:	e00c      	b.n	800b760 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800b746:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b74a:	617b      	str	r3, [r7, #20]
    }
    break;
 800b74c:	e008      	b.n	800b760 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800b74e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b752:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800b754:	69fb      	ldr	r3, [r7, #28]
 800b756:	f043 0301 	orr.w	r3, r3, #1
 800b75a:	61fb      	str	r3, [r7, #28]
    }
    break;
 800b75c:	e000      	b.n	800b760 <HAL_SAI_Init+0xb8>
    default:
      break;
 800b75e:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	4a85      	ldr	r2, [pc, #532]	; (800b97c <HAL_SAI_Init+0x2d4>)
 800b766:	4293      	cmp	r3, r2
 800b768:	d004      	beq.n	800b774 <HAL_SAI_Init+0xcc>
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	4a84      	ldr	r2, [pc, #528]	; (800b980 <HAL_SAI_Init+0x2d8>)
 800b770:	4293      	cmp	r3, r2
 800b772:	d103      	bne.n	800b77c <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800b774:	4a83      	ldr	r2, [pc, #524]	; (800b984 <HAL_SAI_Init+0x2dc>)
 800b776:	69fb      	ldr	r3, [r7, #28]
 800b778:	6013      	str	r3, [r2, #0]
 800b77a:	e002      	b.n	800b782 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800b77c:	4a82      	ldr	r2, [pc, #520]	; (800b988 <HAL_SAI_Init+0x2e0>)
 800b77e:	69fb      	ldr	r3, [r7, #28]
 800b780:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	69db      	ldr	r3, [r3, #28]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d04c      	beq.n	800b824 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800b78a:	2300      	movs	r3, #0
 800b78c:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	4a7a      	ldr	r2, [pc, #488]	; (800b97c <HAL_SAI_Init+0x2d4>)
 800b794:	4293      	cmp	r3, r2
 800b796:	d004      	beq.n	800b7a2 <HAL_SAI_Init+0xfa>
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	4a78      	ldr	r2, [pc, #480]	; (800b980 <HAL_SAI_Init+0x2d8>)
 800b79e:	4293      	cmp	r3, r2
 800b7a0:	d104      	bne.n	800b7ac <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800b7a2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800b7a6:	f7ff fe3b 	bl	800b420 <HAL_RCCEx_GetPeriphCLKFreq>
 800b7aa:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	4a76      	ldr	r2, [pc, #472]	; (800b98c <HAL_SAI_Init+0x2e4>)
 800b7b2:	4293      	cmp	r3, r2
 800b7b4:	d004      	beq.n	800b7c0 <HAL_SAI_Init+0x118>
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	4a75      	ldr	r2, [pc, #468]	; (800b990 <HAL_SAI_Init+0x2e8>)
 800b7bc:	4293      	cmp	r3, r2
 800b7be:	d104      	bne.n	800b7ca <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800b7c0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800b7c4:	f7ff fe2c 	bl	800b420 <HAL_RCCEx_GetPeriphCLKFreq>
 800b7c8:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800b7ca:	693a      	ldr	r2, [r7, #16]
 800b7cc:	4613      	mov	r3, r2
 800b7ce:	009b      	lsls	r3, r3, #2
 800b7d0:	4413      	add	r3, r2
 800b7d2:	005b      	lsls	r3, r3, #1
 800b7d4:	461a      	mov	r2, r3
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	69db      	ldr	r3, [r3, #28]
 800b7da:	025b      	lsls	r3, r3, #9
 800b7dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7e0:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	4a6b      	ldr	r2, [pc, #428]	; (800b994 <HAL_SAI_Init+0x2ec>)
 800b7e6:	fba2 2303 	umull	r2, r3, r2, r3
 800b7ea:	08da      	lsrs	r2, r3, #3
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800b7f0:	68f9      	ldr	r1, [r7, #12]
 800b7f2:	4b68      	ldr	r3, [pc, #416]	; (800b994 <HAL_SAI_Init+0x2ec>)
 800b7f4:	fba3 2301 	umull	r2, r3, r3, r1
 800b7f8:	08da      	lsrs	r2, r3, #3
 800b7fa:	4613      	mov	r3, r2
 800b7fc:	009b      	lsls	r3, r3, #2
 800b7fe:	4413      	add	r3, r2
 800b800:	005b      	lsls	r3, r3, #1
 800b802:	1aca      	subs	r2, r1, r3
 800b804:	2a08      	cmp	r2, #8
 800b806:	d904      	bls.n	800b812 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	6a1b      	ldr	r3, [r3, #32]
 800b80c:	1c5a      	adds	r2, r3, #1
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b816:	2b04      	cmp	r3, #4
 800b818:	d104      	bne.n	800b824 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	6a1b      	ldr	r3, [r3, #32]
 800b81e:	085a      	lsrs	r2, r3, #1
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	685b      	ldr	r3, [r3, #4]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d003      	beq.n	800b834 <HAL_SAI_Init+0x18c>
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	685b      	ldr	r3, [r3, #4]
 800b830:	2b02      	cmp	r3, #2
 800b832:	d109      	bne.n	800b848 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b838:	2b01      	cmp	r3, #1
 800b83a:	d101      	bne.n	800b840 <HAL_SAI_Init+0x198>
 800b83c:	2300      	movs	r3, #0
 800b83e:	e001      	b.n	800b844 <HAL_SAI_Init+0x19c>
 800b840:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b844:	61bb      	str	r3, [r7, #24]
 800b846:	e008      	b.n	800b85a <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b84c:	2b01      	cmp	r3, #1
 800b84e:	d102      	bne.n	800b856 <HAL_SAI_Init+0x1ae>
 800b850:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b854:	e000      	b.n	800b858 <HAL_SAI_Init+0x1b0>
 800b856:	2300      	movs	r3, #0
 800b858:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	6819      	ldr	r1, [r3, #0]
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681a      	ldr	r2, [r3, #0]
 800b864:	4b4c      	ldr	r3, [pc, #304]	; (800b998 <HAL_SAI_Init+0x2f0>)
 800b866:	400b      	ands	r3, r1
 800b868:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	6819      	ldr	r1, [r3, #0]
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	685a      	ldr	r2, [r3, #4]
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b878:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b87e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b884:	431a      	orrs	r2, r3
 800b886:	69bb      	ldr	r3, [r7, #24]
 800b888:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800b88a:	697b      	ldr	r3, [r7, #20]
 800b88c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 800b892:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	691b      	ldr	r3, [r3, #16]
 800b898:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b89e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	6a1b      	ldr	r3, [r3, #32]
 800b8a4:	051b      	lsls	r3, r3, #20
 800b8a6:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	430a      	orrs	r2, r1
 800b8ae:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	6859      	ldr	r1, [r3, #4]
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681a      	ldr	r2, [r3, #0]
 800b8ba:	4b38      	ldr	r3, [pc, #224]	; (800b99c <HAL_SAI_Init+0x2f4>)
 800b8bc:	400b      	ands	r3, r1
 800b8be:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	6859      	ldr	r1, [r3, #4]
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	699a      	ldr	r2, [r3, #24]
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8ce:	431a      	orrs	r2, r3
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8d4:	431a      	orrs	r2, r3
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	430a      	orrs	r2, r1
 800b8dc:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	6899      	ldr	r1, [r3, #8]
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681a      	ldr	r2, [r3, #0]
 800b8e8:	4b2d      	ldr	r3, [pc, #180]	; (800b9a0 <HAL_SAI_Init+0x2f8>)
 800b8ea:	400b      	ands	r3, r1
 800b8ec:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	6899      	ldr	r1, [r3, #8]
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8f8:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800b8fe:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800b904:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 800b90a:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b910:	3b01      	subs	r3, #1
 800b912:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800b914:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	430a      	orrs	r2, r1
 800b91c:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	68d9      	ldr	r1, [r3, #12]
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681a      	ldr	r2, [r3, #0]
 800b928:	f24f 0320 	movw	r3, #61472	; 0xf020
 800b92c:	400b      	ands	r3, r1
 800b92e:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	68d9      	ldr	r1, [r3, #12]
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b93e:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b944:	041b      	lsls	r3, r3, #16
 800b946:	431a      	orrs	r2, r3
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b94c:	3b01      	subs	r3, #1
 800b94e:	021b      	lsls	r3, r3, #8
 800b950:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	430a      	orrs	r2, r1
 800b958:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	2200      	movs	r2, #0
 800b95e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	2201      	movs	r2, #1
 800b966:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	2200      	movs	r2, #0
 800b96e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b972:	2300      	movs	r3, #0
}
 800b974:	4618      	mov	r0, r3
 800b976:	3720      	adds	r7, #32
 800b978:	46bd      	mov	sp, r7
 800b97a:	bd80      	pop	{r7, pc}
 800b97c:	40015804 	.word	0x40015804
 800b980:	40015824 	.word	0x40015824
 800b984:	40015800 	.word	0x40015800
 800b988:	40015c00 	.word	0x40015c00
 800b98c:	40015c04 	.word	0x40015c04
 800b990:	40015c24 	.word	0x40015c24
 800b994:	cccccccd 	.word	0xcccccccd
 800b998:	ff05c010 	.word	0xff05c010
 800b99c:	ffff1ff0 	.word	0xffff1ff0
 800b9a0:	fff88000 	.word	0xfff88000

0800b9a4 <HAL_SAI_DeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DeInit(SAI_HandleTypeDef *hsai)
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b082      	sub	sp, #8
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d101      	bne.n	800b9b6 <HAL_SAI_DeInit+0x12>
  {
    return HAL_ERROR;
 800b9b2:	2301      	movs	r3, #1
 800b9b4:	e027      	b.n	800ba06 <HAL_SAI_DeInit+0x62>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	2202      	movs	r2, #2
 800b9ba:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	f04f 32ff 	mov.w	r2, #4294967295
 800b9ce:	619a      	str	r2, [r3, #24]

  /* Disable the SAI */
  SAI_Disable(hsai);
 800b9d0:	6878      	ldr	r0, [r7, #4]
 800b9d2:	f000 f963 	bl	800bc9c <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	685a      	ldr	r2, [r3, #4]
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	f042 0208 	orr.w	r2, r2, #8
 800b9e4:	605a      	str	r2, [r3, #4]
  {
    hsai->MspDeInitCallback = HAL_SAI_MspDeInit;
  }
  hsai->MspDeInitCallback(hsai);
#else
  HAL_SAI_MspDeInit(hsai);
 800b9e6:	6878      	ldr	r0, [r7, #4]
 800b9e8:	f7f9 fe92 	bl	8005710 <HAL_SAI_MspDeInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_RESET;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2200      	movs	r2, #0
 800ba00:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800ba04:	2300      	movs	r3, #0
}
 800ba06:	4618      	mov	r0, r3
 800ba08:	3708      	adds	r7, #8
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	bd80      	pop	{r7, pc}

0800ba0e <HAL_SAI_DMAPause>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAPause(SAI_HandleTypeDef *hsai)
{
 800ba0e:	b480      	push	{r7}
 800ba10:	b083      	sub	sp, #12
 800ba12:	af00      	add	r7, sp, #0
 800ba14:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hsai);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ba1c:	2b01      	cmp	r3, #1
 800ba1e:	d101      	bne.n	800ba24 <HAL_SAI_DMAPause+0x16>
 800ba20:	2302      	movs	r3, #2
 800ba22:	e010      	b.n	800ba46 <HAL_SAI_DMAPause+0x38>
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	2201      	movs	r2, #1
 800ba28:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  /* Pause the audio file playing by disabling the SAI DMA requests */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	681a      	ldr	r2, [r3, #0]
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800ba3a:	601a      	str	r2, [r3, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2200      	movs	r2, #0
 800ba40:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800ba44:	2300      	movs	r3, #0
}
 800ba46:	4618      	mov	r0, r3
 800ba48:	370c      	adds	r7, #12
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba50:	4770      	bx	lr

0800ba52 <HAL_SAI_DMAResume>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAResume(SAI_HandleTypeDef *hsai)
{
 800ba52:	b480      	push	{r7}
 800ba54:	b083      	sub	sp, #12
 800ba56:	af00      	add	r7, sp, #0
 800ba58:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hsai);
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ba60:	2b01      	cmp	r3, #1
 800ba62:	d101      	bne.n	800ba68 <HAL_SAI_DMAResume+0x16>
 800ba64:	2302      	movs	r3, #2
 800ba66:	e01f      	b.n	800baa8 <HAL_SAI_DMAResume+0x56>
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2201      	movs	r2, #1
 800ba6c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  /* Enable the SAI DMA requests */
  hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	681a      	ldr	r2, [r3, #0]
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800ba7e:	601a      	str	r2, [r3, #0]

  /* If the SAI peripheral is still not enabled, enable it */
  if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d107      	bne.n	800ba9e <HAL_SAI_DMAResume+0x4c>
  {
    /* Enable SAI peripheral */
    __HAL_SAI_ENABLE(hsai);
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	681a      	ldr	r2, [r3, #0]
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800ba9c:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	2200      	movs	r2, #0
 800baa2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800baa6:	2300      	movs	r3, #0
}
 800baa8:	4618      	mov	r0, r3
 800baaa:	370c      	adds	r7, #12
 800baac:	46bd      	mov	sp, r7
 800baae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab2:	4770      	bx	lr

0800bab4 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b086      	sub	sp, #24
 800bab8:	af00      	add	r7, sp, #0
 800baba:	60f8      	str	r0, [r7, #12]
 800babc:	60b9      	str	r1, [r7, #8]
 800babe:	4613      	mov	r3, r2
 800bac0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800bac2:	f7fb fc53 	bl	800736c <HAL_GetTick>
 800bac6:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 800bac8:	68bb      	ldr	r3, [r7, #8]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d002      	beq.n	800bad4 <HAL_SAI_Transmit_DMA+0x20>
 800bace:	88fb      	ldrh	r3, [r7, #6]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d101      	bne.n	800bad8 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800bad4:	2301      	movs	r3, #1
 800bad6:	e093      	b.n	800bc00 <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800bade:	b2db      	uxtb	r3, r3
 800bae0:	2b01      	cmp	r3, #1
 800bae2:	f040 808c 	bne.w	800bbfe <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800baec:	2b01      	cmp	r3, #1
 800baee:	d101      	bne.n	800baf4 <HAL_SAI_Transmit_DMA+0x40>
 800baf0:	2302      	movs	r3, #2
 800baf2:	e085      	b.n	800bc00 <HAL_SAI_Transmit_DMA+0x14c>
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	2201      	movs	r2, #1
 800baf8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	68ba      	ldr	r2, [r7, #8]
 800bb00:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	88fa      	ldrh	r2, [r7, #6]
 800bb06:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	88fa      	ldrh	r2, [r7, #6]
 800bb0e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	2200      	movs	r2, #0
 800bb16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	2212      	movs	r2, #18
 800bb1e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb26:	4a38      	ldr	r2, [pc, #224]	; (800bc08 <HAL_SAI_Transmit_DMA+0x154>)
 800bb28:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb2e:	4a37      	ldr	r2, [pc, #220]	; (800bc0c <HAL_SAI_Transmit_DMA+0x158>)
 800bb30:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb36:	4a36      	ldr	r2, [pc, #216]	; (800bc10 <HAL_SAI_Transmit_DMA+0x15c>)
 800bb38:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb3e:	2200      	movs	r2, #0
 800bb40:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bb4a:	4619      	mov	r1, r3
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	331c      	adds	r3, #28
 800bb52:	461a      	mov	r2, r3
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bb5a:	f7fc f8b9 	bl	8007cd0 <HAL_DMA_Start_IT>
 800bb5e:	4603      	mov	r3, r0
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d005      	beq.n	800bb70 <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	2200      	movs	r2, #0
 800bb68:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 800bb6c:	2301      	movs	r3, #1
 800bb6e:	e047      	b.n	800bc00 <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800bb70:	2100      	movs	r1, #0
 800bb72:	68f8      	ldr	r0, [r7, #12]
 800bb74:	f000 f85c 	bl	800bc30 <SAI_InterruptFlag>
 800bb78:	4601      	mov	r1, r0
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	691a      	ldr	r2, [r3, #16]
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	430a      	orrs	r2, r1
 800bb86:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	681a      	ldr	r2, [r3, #0]
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800bb96:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800bb98:	e015      	b.n	800bbc6 <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800bb9a:	f7fb fbe7 	bl	800736c <HAL_GetTick>
 800bb9e:	4602      	mov	r2, r0
 800bba0:	697b      	ldr	r3, [r7, #20]
 800bba2:	1ad3      	subs	r3, r2, r3
 800bba4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bba8:	d90d      	bls.n	800bbc6 <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bbb0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800bbc2:	2303      	movs	r3, #3
 800bbc4:	e01c      	b.n	800bc00 <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	695b      	ldr	r3, [r3, #20]
 800bbcc:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d0e2      	beq.n	800bb9a <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d107      	bne.n	800bbf2 <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	681a      	ldr	r2, [r3, #0]
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800bbf0:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	e000      	b.n	800bc00 <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 800bbfe:	2302      	movs	r3, #2
  }
}
 800bc00:	4618      	mov	r0, r3
 800bc02:	3718      	adds	r7, #24
 800bc04:	46bd      	mov	sp, r7
 800bc06:	bd80      	pop	{r7, pc}
 800bc08:	0800bd6d 	.word	0x0800bd6d
 800bc0c:	0800bd0d 	.word	0x0800bd0d
 800bc10:	0800bd89 	.word	0x0800bd89

0800bc14 <HAL_SAI_GetState>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL state
  */
HAL_SAI_StateTypeDef HAL_SAI_GetState(const SAI_HandleTypeDef *hsai)
{
 800bc14:	b480      	push	{r7}
 800bc16:	b083      	sub	sp, #12
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
  return hsai->State;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800bc22:	b2db      	uxtb	r3, r3
}
 800bc24:	4618      	mov	r0, r3
 800bc26:	370c      	adds	r7, #12
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2e:	4770      	bx	lr

0800bc30 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, uint32_t mode)
{
 800bc30:	b480      	push	{r7}
 800bc32:	b085      	sub	sp, #20
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
 800bc38:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800bc3a:	2301      	movs	r3, #1
 800bc3c:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	2b01      	cmp	r3, #1
 800bc42:	d103      	bne.n	800bc4c <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	f043 0308 	orr.w	r3, r3, #8
 800bc4a:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc50:	2b08      	cmp	r3, #8
 800bc52:	d10b      	bne.n	800bc6c <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800bc58:	2b03      	cmp	r3, #3
 800bc5a:	d003      	beq.n	800bc64 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	685b      	ldr	r3, [r3, #4]
 800bc60:	2b01      	cmp	r3, #1
 800bc62:	d103      	bne.n	800bc6c <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	f043 0310 	orr.w	r3, r3, #16
 800bc6a:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	685b      	ldr	r3, [r3, #4]
 800bc70:	2b03      	cmp	r3, #3
 800bc72:	d003      	beq.n	800bc7c <SAI_InterruptFlag+0x4c>
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	685b      	ldr	r3, [r3, #4]
 800bc78:	2b02      	cmp	r3, #2
 800bc7a:	d104      	bne.n	800bc86 <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800bc82:	60fb      	str	r3, [r7, #12]
 800bc84:	e003      	b.n	800bc8e <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	f043 0304 	orr.w	r3, r3, #4
 800bc8c:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800bc8e:	68fb      	ldr	r3, [r7, #12]
}
 800bc90:	4618      	mov	r0, r3
 800bc92:	3714      	adds	r7, #20
 800bc94:	46bd      	mov	sp, r7
 800bc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9a:	4770      	bx	lr

0800bc9c <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800bc9c:	b480      	push	{r7}
 800bc9e:	b085      	sub	sp, #20
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800bca4:	4b17      	ldr	r3, [pc, #92]	; (800bd04 <SAI_Disable+0x68>)
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	4a17      	ldr	r2, [pc, #92]	; (800bd08 <SAI_Disable+0x6c>)
 800bcaa:	fba2 2303 	umull	r2, r3, r2, r3
 800bcae:	0b1b      	lsrs	r3, r3, #12
 800bcb0:	009b      	lsls	r3, r3, #2
 800bcb2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	681a      	ldr	r2, [r3, #0]
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800bcc6:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	1e5a      	subs	r2, r3, #1
 800bccc:	60fa      	str	r2, [r7, #12]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d10a      	bne.n	800bce8 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bcd8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800bce2:	2303      	movs	r3, #3
 800bce4:	72fb      	strb	r3, [r7, #11]
      break;
 800bce6:	e006      	b.n	800bcf6 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d1e8      	bne.n	800bcc8 <SAI_Disable+0x2c>

  return status;
 800bcf6:	7afb      	ldrb	r3, [r7, #11]
}
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	3714      	adds	r7, #20
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd02:	4770      	bx	lr
 800bd04:	200000a8 	.word	0x200000a8
 800bd08:	95cbec1b 	.word	0x95cbec1b

0800bd0c <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b084      	sub	sp, #16
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd18:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	69db      	ldr	r3, [r3, #28]
 800bd1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd22:	d01c      	beq.n	800bd5e <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	2200      	movs	r2, #0
 800bd28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	681a      	ldr	r2, [r3, #0]
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800bd3a:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800bd3c:	2100      	movs	r1, #0
 800bd3e:	68f8      	ldr	r0, [r7, #12]
 800bd40:	f7ff ff76 	bl	800bc30 <SAI_InterruptFlag>
 800bd44:	4603      	mov	r3, r0
 800bd46:	43d9      	mvns	r1, r3
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	691a      	ldr	r2, [r3, #16]
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	400a      	ands	r2, r1
 800bd54:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	2201      	movs	r2, #1
 800bd5a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800bd5e:	68f8      	ldr	r0, [r7, #12]
 800bd60:	f7f7 f9b4 	bl	80030cc <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800bd64:	bf00      	nop
 800bd66:	3710      	adds	r7, #16
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	bd80      	pop	{r7, pc}

0800bd6c <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b084      	sub	sp, #16
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd78:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800bd7a:	68f8      	ldr	r0, [r7, #12]
 800bd7c:	f7f7 f9b0 	bl	80030e0 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800bd80:	bf00      	nop
 800bd82:	3710      	adds	r7, #16
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}

0800bd88 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b084      	sub	sp, #16
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd94:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bd9c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bdaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdac:	2b01      	cmp	r3, #1
 800bdae:	d004      	beq.n	800bdba <SAI_DMAError+0x32>
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdb6:	2b01      	cmp	r3, #1
 800bdb8:	d112      	bne.n	800bde0 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	681a      	ldr	r2, [r3, #0]
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800bdc8:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800bdca:	68f8      	ldr	r0, [r7, #12]
 800bdcc:	f7ff ff66 	bl	800bc9c <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	2201      	movs	r2, #1
 800bdd4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	2200      	movs	r2, #0
 800bddc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800bde0:	68f8      	ldr	r0, [r7, #12]
 800bde2:	f7f7 f987 	bl	80030f4 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800bde6:	bf00      	nop
 800bde8:	3710      	adds	r7, #16
 800bdea:	46bd      	mov	sp, r7
 800bdec:	bd80      	pop	{r7, pc}

0800bdee <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800bdee:	b580      	push	{r7, lr}
 800bdf0:	b082      	sub	sp, #8
 800bdf2:	af00      	add	r7, sp, #0
 800bdf4:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d101      	bne.n	800be00 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800bdfc:	2301      	movs	r3, #1
 800bdfe:	e022      	b.n	800be46 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800be06:	b2db      	uxtb	r3, r3
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d105      	bne.n	800be18 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	2200      	movs	r2, #0
 800be10:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800be12:	6878      	ldr	r0, [r7, #4]
 800be14:	f7f9 f986 	bl	8005124 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	2203      	movs	r2, #3
 800be1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800be20:	6878      	ldr	r0, [r7, #4]
 800be22:	f000 f815 	bl	800be50 <HAL_SD_InitCard>
 800be26:	4603      	mov	r3, r0
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d001      	beq.n	800be30 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800be2c:	2301      	movs	r3, #1
 800be2e:	e00a      	b.n	800be46 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2200      	movs	r2, #0
 800be34:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	2200      	movs	r2, #0
 800be3a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	2201      	movs	r2, #1
 800be40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800be44:	2300      	movs	r3, #0
}
 800be46:	4618      	mov	r0, r3
 800be48:	3708      	adds	r7, #8
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bd80      	pop	{r7, pc}
	...

0800be50 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800be50:	b5b0      	push	{r4, r5, r7, lr}
 800be52:	b08e      	sub	sp, #56	; 0x38
 800be54:	af04      	add	r7, sp, #16
 800be56:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800be58:	2300      	movs	r3, #0
 800be5a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800be5c:	2300      	movs	r3, #0
 800be5e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800be60:	2300      	movs	r3, #0
 800be62:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800be64:	2300      	movs	r3, #0
 800be66:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800be68:	2300      	movs	r3, #0
 800be6a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800be6c:	2376      	movs	r3, #118	; 0x76
 800be6e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681d      	ldr	r5, [r3, #0]
 800be74:	466c      	mov	r4, sp
 800be76:	f107 0314 	add.w	r3, r7, #20
 800be7a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800be7e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800be82:	f107 0308 	add.w	r3, r7, #8
 800be86:	cb0e      	ldmia	r3, {r1, r2, r3}
 800be88:	4628      	mov	r0, r5
 800be8a:	f002 f99d 	bl	800e1c8 <SDMMC_Init>
 800be8e:	4603      	mov	r3, r0
 800be90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800be94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d001      	beq.n	800bea0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800be9c:	2301      	movs	r3, #1
 800be9e:	e059      	b.n	800bf54 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	685a      	ldr	r2, [r3, #4]
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800beae:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	4618      	mov	r0, r3
 800beb6:	f002 f9d1 	bl	800e25c <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	685a      	ldr	r2, [r3, #4]
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bec8:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800beca:	2002      	movs	r0, #2
 800becc:	f7fb fa5a 	bl	8007384 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800bed0:	6878      	ldr	r0, [r7, #4]
 800bed2:	f000 ff59 	bl	800cd88 <SD_PowerON>
 800bed6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bed8:	6a3b      	ldr	r3, [r7, #32]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d00b      	beq.n	800bef6 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	2201      	movs	r2, #1
 800bee2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800beea:	6a3b      	ldr	r3, [r7, #32]
 800beec:	431a      	orrs	r2, r3
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800bef2:	2301      	movs	r3, #1
 800bef4:	e02e      	b.n	800bf54 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800bef6:	6878      	ldr	r0, [r7, #4]
 800bef8:	f000 fe78 	bl	800cbec <SD_InitCard>
 800befc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800befe:	6a3b      	ldr	r3, [r7, #32]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d00b      	beq.n	800bf1c <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	2201      	movs	r2, #1
 800bf08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf10:	6a3b      	ldr	r3, [r7, #32]
 800bf12:	431a      	orrs	r2, r3
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800bf18:	2301      	movs	r3, #1
 800bf1a:	e01b      	b.n	800bf54 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	f44f 7100 	mov.w	r1, #512	; 0x200
 800bf24:	4618      	mov	r0, r3
 800bf26:	f002 fa2b 	bl	800e380 <SDMMC_CmdBlockLength>
 800bf2a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bf2c:	6a3b      	ldr	r3, [r7, #32]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d00f      	beq.n	800bf52 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	4a09      	ldr	r2, [pc, #36]	; (800bf5c <HAL_SD_InitCard+0x10c>)
 800bf38:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf3e:	6a3b      	ldr	r3, [r7, #32]
 800bf40:	431a      	orrs	r2, r3
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	2201      	movs	r2, #1
 800bf4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800bf4e:	2301      	movs	r3, #1
 800bf50:	e000      	b.n	800bf54 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 800bf52:	2300      	movs	r3, #0
}
 800bf54:	4618      	mov	r0, r3
 800bf56:	3728      	adds	r7, #40	; 0x28
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	bdb0      	pop	{r4, r5, r7, pc}
 800bf5c:	004005ff 	.word	0x004005ff

0800bf60 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b08c      	sub	sp, #48	; 0x30
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	60f8      	str	r0, [r7, #12]
 800bf68:	60b9      	str	r1, [r7, #8]
 800bf6a:	607a      	str	r2, [r7, #4]
 800bf6c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800bf72:	68bb      	ldr	r3, [r7, #8]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d107      	bne.n	800bf88 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf7c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800bf84:	2301      	movs	r3, #1
 800bf86:	e0c3      	b.n	800c110 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bf8e:	b2db      	uxtb	r3, r3
 800bf90:	2b01      	cmp	r3, #1
 800bf92:	f040 80bc 	bne.w	800c10e <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	2200      	movs	r2, #0
 800bf9a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800bf9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf9e:	683b      	ldr	r3, [r7, #0]
 800bfa0:	441a      	add	r2, r3
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bfa6:	429a      	cmp	r2, r3
 800bfa8:	d907      	bls.n	800bfba <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfae:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800bfb6:	2301      	movs	r3, #1
 800bfb8:	e0aa      	b.n	800c110 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	2203      	movs	r2, #3
 800bfbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800bfd8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfde:	4a4e      	ldr	r2, [pc, #312]	; (800c118 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800bfe0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfe6:	4a4d      	ldr	r2, [pc, #308]	; (800c11c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800bfe8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfee:	2200      	movs	r2, #0
 800bff0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bff6:	2200      	movs	r2, #0
 800bff8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c00a:	689a      	ldr	r2, [r3, #8]
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	430a      	orrs	r2, r1
 800c014:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	3380      	adds	r3, #128	; 0x80
 800c020:	4619      	mov	r1, r3
 800c022:	68ba      	ldr	r2, [r7, #8]
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	025b      	lsls	r3, r3, #9
 800c028:	089b      	lsrs	r3, r3, #2
 800c02a:	f7fb fe51 	bl	8007cd0 <HAL_DMA_Start_IT>
 800c02e:	4603      	mov	r3, r0
 800c030:	2b00      	cmp	r3, #0
 800c032:	d017      	beq.n	800c064 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800c042:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	4a35      	ldr	r2, [pc, #212]	; (800c120 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800c04a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c050:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	2201      	movs	r2, #1
 800c05c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800c060:	2301      	movs	r3, #1
 800c062:	e055      	b.n	800c110 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	f042 0208 	orr.w	r2, r2, #8
 800c072:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c078:	2b01      	cmp	r3, #1
 800c07a:	d002      	beq.n	800c082 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800c07c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c07e:	025b      	lsls	r3, r3, #9
 800c080:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c082:	f04f 33ff 	mov.w	r3, #4294967295
 800c086:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	025b      	lsls	r3, r3, #9
 800c08c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c08e:	2390      	movs	r3, #144	; 0x90
 800c090:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c092:	2302      	movs	r3, #2
 800c094:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c096:	2300      	movs	r3, #0
 800c098:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800c09a:	2301      	movs	r3, #1
 800c09c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	f107 0210 	add.w	r2, r7, #16
 800c0a6:	4611      	mov	r1, r2
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	f002 f93d 	bl	800e328 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800c0ae:	683b      	ldr	r3, [r7, #0]
 800c0b0:	2b01      	cmp	r3, #1
 800c0b2:	d90a      	bls.n	800c0ca <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	2282      	movs	r2, #130	; 0x82
 800c0b8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	f002 f9a1 	bl	800e408 <SDMMC_CmdReadMultiBlock>
 800c0c6:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c0c8:	e009      	b.n	800c0de <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	2281      	movs	r2, #129	; 0x81
 800c0ce:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	f002 f974 	bl	800e3c4 <SDMMC_CmdReadSingleBlock>
 800c0dc:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800c0de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d012      	beq.n	800c10a <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	4a0d      	ldr	r2, [pc, #52]	; (800c120 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800c0ea:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c0f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0f2:	431a      	orrs	r2, r3
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	2201      	movs	r2, #1
 800c0fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	2200      	movs	r2, #0
 800c104:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800c106:	2301      	movs	r3, #1
 800c108:	e002      	b.n	800c110 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800c10a:	2300      	movs	r3, #0
 800c10c:	e000      	b.n	800c110 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800c10e:	2302      	movs	r3, #2
  }
}
 800c110:	4618      	mov	r0, r3
 800c112:	3730      	adds	r7, #48	; 0x30
 800c114:	46bd      	mov	sp, r7
 800c116:	bd80      	pop	{r7, pc}
 800c118:	0800c9fb 	.word	0x0800c9fb
 800c11c:	0800ca6d 	.word	0x0800ca6d
 800c120:	004005ff 	.word	0x004005ff

0800c124 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b08c      	sub	sp, #48	; 0x30
 800c128:	af00      	add	r7, sp, #0
 800c12a:	60f8      	str	r0, [r7, #12]
 800c12c:	60b9      	str	r1, [r7, #8]
 800c12e:	607a      	str	r2, [r7, #4]
 800c130:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800c136:	68bb      	ldr	r3, [r7, #8]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d107      	bne.n	800c14c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c140:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c148:	2301      	movs	r3, #1
 800c14a:	e0c6      	b.n	800c2da <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c152:	b2db      	uxtb	r3, r3
 800c154:	2b01      	cmp	r3, #1
 800c156:	f040 80bf 	bne.w	800c2d8 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	2200      	movs	r2, #0
 800c15e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c160:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c162:	683b      	ldr	r3, [r7, #0]
 800c164:	441a      	add	r2, r3
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c16a:	429a      	cmp	r2, r3
 800c16c:	d907      	bls.n	800c17e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c172:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800c17a:	2301      	movs	r3, #1
 800c17c:	e0ad      	b.n	800c2da <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	2203      	movs	r2, #3
 800c182:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	2200      	movs	r2, #0
 800c18c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	f042 021a 	orr.w	r2, r2, #26
 800c19c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1a2:	4a50      	ldr	r2, [pc, #320]	; (800c2e4 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800c1a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1aa:	4a4f      	ldr	r2, [pc, #316]	; (800c2e8 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800c1ac:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1ba:	2b01      	cmp	r3, #1
 800c1bc:	d002      	beq.n	800c1c4 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800c1be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1c0:	025b      	lsls	r3, r3, #9
 800c1c2:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800c1c4:	683b      	ldr	r3, [r7, #0]
 800c1c6:	2b01      	cmp	r3, #1
 800c1c8:	d90a      	bls.n	800c1e0 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	22a0      	movs	r2, #160	; 0xa0
 800c1ce:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	f002 f95a 	bl	800e490 <SDMMC_CmdWriteMultiBlock>
 800c1dc:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c1de:	e009      	b.n	800c1f4 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	2290      	movs	r2, #144	; 0x90
 800c1e4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	f002 f92d 	bl	800e44c <SDMMC_CmdWriteSingleBlock>
 800c1f2:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800c1f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d012      	beq.n	800c220 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	4a3b      	ldr	r2, [pc, #236]	; (800c2ec <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800c200:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c208:	431a      	orrs	r2, r3
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	2201      	movs	r2, #1
 800c212:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	2200      	movs	r2, #0
 800c21a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c21c:	2301      	movs	r3, #1
 800c21e:	e05c      	b.n	800c2da <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	f042 0208 	orr.w	r2, r2, #8
 800c22e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c234:	2240      	movs	r2, #64	; 0x40
 800c236:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c248:	689a      	ldr	r2, [r3, #8]
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	430a      	orrs	r2, r1
 800c252:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800c258:	68b9      	ldr	r1, [r7, #8]
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	3380      	adds	r3, #128	; 0x80
 800c260:	461a      	mov	r2, r3
 800c262:	683b      	ldr	r3, [r7, #0]
 800c264:	025b      	lsls	r3, r3, #9
 800c266:	089b      	lsrs	r3, r3, #2
 800c268:	f7fb fd32 	bl	8007cd0 <HAL_DMA_Start_IT>
 800c26c:	4603      	mov	r3, r0
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d01a      	beq.n	800c2a8 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	f022 021a 	bic.w	r2, r2, #26
 800c280:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	4a19      	ldr	r2, [pc, #100]	; (800c2ec <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800c288:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c28e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	2201      	movs	r2, #1
 800c29a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c2a4:	2301      	movs	r3, #1
 800c2a6:	e018      	b.n	800c2da <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c2a8:	f04f 33ff 	mov.w	r3, #4294967295
 800c2ac:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	025b      	lsls	r3, r3, #9
 800c2b2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c2b4:	2390      	movs	r3, #144	; 0x90
 800c2b6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c2bc:	2300      	movs	r3, #0
 800c2be:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800c2c0:	2301      	movs	r3, #1
 800c2c2:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	f107 0210 	add.w	r2, r7, #16
 800c2cc:	4611      	mov	r1, r2
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	f002 f82a 	bl	800e328 <SDMMC_ConfigData>

      return HAL_OK;
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	e000      	b.n	800c2da <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800c2d8:	2302      	movs	r3, #2
  }
}
 800c2da:	4618      	mov	r0, r3
 800c2dc:	3730      	adds	r7, #48	; 0x30
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	bd80      	pop	{r7, pc}
 800c2e2:	bf00      	nop
 800c2e4:	0800c9d1 	.word	0x0800c9d1
 800c2e8:	0800ca6d 	.word	0x0800ca6d
 800c2ec:	004005ff 	.word	0x004005ff

0800c2f0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b084      	sub	sp, #16
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2fc:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c304:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d008      	beq.n	800c31e <HAL_SD_IRQHandler+0x2e>
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	f003 0308 	and.w	r3, r3, #8
 800c312:	2b00      	cmp	r3, #0
 800c314:	d003      	beq.n	800c31e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800c316:	6878      	ldr	r0, [r7, #4]
 800c318:	f000 fdec 	bl	800cef4 <SD_Read_IT>
 800c31c:	e15a      	b.n	800c5d4 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c328:	2b00      	cmp	r3, #0
 800c32a:	f000 808d 	beq.w	800c448 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c336:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681a      	ldr	r2, [r3, #0]
 800c342:	4b9a      	ldr	r3, [pc, #616]	; (800c5ac <HAL_SD_IRQHandler+0x2bc>)
 800c344:	400b      	ands	r3, r1
 800c346:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	f022 0201 	bic.w	r2, r2, #1
 800c356:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	f003 0308 	and.w	r3, r3, #8
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d039      	beq.n	800c3d6 <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	f003 0302 	and.w	r3, r3, #2
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d104      	bne.n	800c376 <HAL_SD_IRQHandler+0x86>
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	f003 0320 	and.w	r3, r3, #32
 800c372:	2b00      	cmp	r3, #0
 800c374:	d011      	beq.n	800c39a <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	4618      	mov	r0, r3
 800c37c:	f002 f8aa 	bl	800e4d4 <SDMMC_CmdStopTransfer>
 800c380:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800c382:	68bb      	ldr	r3, [r7, #8]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d008      	beq.n	800c39a <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c38c:	68bb      	ldr	r3, [r7, #8]
 800c38e:	431a      	orrs	r2, r3
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800c394:	6878      	ldr	r0, [r7, #4]
 800c396:	f000 f921 	bl	800c5dc <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	f240 523a 	movw	r2, #1338	; 0x53a
 800c3a2:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	2201      	movs	r2, #1
 800c3a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	f003 0301 	and.w	r3, r3, #1
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d104      	bne.n	800c3c6 <HAL_SD_IRQHandler+0xd6>
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	f003 0302 	and.w	r3, r3, #2
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d003      	beq.n	800c3ce <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800c3c6:	6878      	ldr	r0, [r7, #4]
 800c3c8:	f002 fcc8 	bl	800ed5c <HAL_SD_RxCpltCallback>
 800c3cc:	e102      	b.n	800c5d4 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800c3ce:	6878      	ldr	r0, [r7, #4]
 800c3d0:	f002 fcba 	bl	800ed48 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c3d4:	e0fe      	b.n	800c5d4 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	f000 80f9 	beq.w	800c5d4 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	f003 0320 	and.w	r3, r3, #32
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d011      	beq.n	800c410 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	f002 f86f 	bl	800e4d4 <SDMMC_CmdStopTransfer>
 800c3f6:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800c3f8:	68bb      	ldr	r3, [r7, #8]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d008      	beq.n	800c410 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c402:	68bb      	ldr	r3, [r7, #8]
 800c404:	431a      	orrs	r2, r3
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800c40a:	6878      	ldr	r0, [r7, #4]
 800c40c:	f000 f8e6 	bl	800c5dc <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	f003 0301 	and.w	r3, r3, #1
 800c416:	2b00      	cmp	r3, #0
 800c418:	f040 80dc 	bne.w	800c5d4 <HAL_SD_IRQHandler+0x2e4>
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	f003 0302 	and.w	r3, r3, #2
 800c422:	2b00      	cmp	r3, #0
 800c424:	f040 80d6 	bne.w	800c5d4 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	f022 0208 	bic.w	r2, r2, #8
 800c436:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2201      	movs	r2, #1
 800c43c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800c440:	6878      	ldr	r0, [r7, #4]
 800c442:	f002 fc81 	bl	800ed48 <HAL_SD_TxCpltCallback>
}
 800c446:	e0c5      	b.n	800c5d4 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c44e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c452:	2b00      	cmp	r3, #0
 800c454:	d008      	beq.n	800c468 <HAL_SD_IRQHandler+0x178>
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	f003 0308 	and.w	r3, r3, #8
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d003      	beq.n	800c468 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 800c460:	6878      	ldr	r0, [r7, #4]
 800c462:	f000 fd98 	bl	800cf96 <SD_Write_IT>
 800c466:	e0b5      	b.n	800c5d4 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c46e:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800c472:	2b00      	cmp	r3, #0
 800c474:	f000 80ae 	beq.w	800c5d4 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c47e:	f003 0302 	and.w	r3, r3, #2
 800c482:	2b00      	cmp	r3, #0
 800c484:	d005      	beq.n	800c492 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c48a:	f043 0202 	orr.w	r2, r3, #2
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c498:	f003 0308 	and.w	r3, r3, #8
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d005      	beq.n	800c4ac <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4a4:	f043 0208 	orr.w	r2, r3, #8
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4b2:	f003 0320 	and.w	r3, r3, #32
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d005      	beq.n	800c4c6 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4be:	f043 0220 	orr.w	r2, r3, #32
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4cc:	f003 0310 	and.w	r3, r3, #16
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d005      	beq.n	800c4e0 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4d8:	f043 0210 	orr.w	r2, r3, #16
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	f240 523a 	movw	r2, #1338	; 0x53a
 800c4e8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800c4f8:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	4618      	mov	r0, r3
 800c500:	f001 ffe8 	bl	800e4d4 <SDMMC_CmdStopTransfer>
 800c504:	4602      	mov	r2, r0
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c50a:	431a      	orrs	r2, r3
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	f003 0308 	and.w	r3, r3, #8
 800c516:	2b00      	cmp	r3, #0
 800c518:	d00a      	beq.n	800c530 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	2201      	movs	r2, #1
 800c51e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	2200      	movs	r2, #0
 800c526:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800c528:	6878      	ldr	r0, [r7, #4]
 800c52a:	f000 f857 	bl	800c5dc <HAL_SD_ErrorCallback>
}
 800c52e:	e051      	b.n	800c5d4 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c536:	2b00      	cmp	r3, #0
 800c538:	d04c      	beq.n	800c5d4 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	f003 0310 	and.w	r3, r3, #16
 800c540:	2b00      	cmp	r3, #0
 800c542:	d104      	bne.n	800c54e <HAL_SD_IRQHandler+0x25e>
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	f003 0320 	and.w	r3, r3, #32
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d011      	beq.n	800c572 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c552:	4a17      	ldr	r2, [pc, #92]	; (800c5b0 <HAL_SD_IRQHandler+0x2c0>)
 800c554:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c55a:	4618      	mov	r0, r3
 800c55c:	f7fb fc18 	bl	8007d90 <HAL_DMA_Abort_IT>
 800c560:	4603      	mov	r3, r0
 800c562:	2b00      	cmp	r3, #0
 800c564:	d036      	beq.n	800c5d4 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c56a:	4618      	mov	r0, r3
 800c56c:	f000 fad0 	bl	800cb10 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800c570:	e030      	b.n	800c5d4 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	f003 0301 	and.w	r3, r3, #1
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d104      	bne.n	800c586 <HAL_SD_IRQHandler+0x296>
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	f003 0302 	and.w	r3, r3, #2
 800c582:	2b00      	cmp	r3, #0
 800c584:	d018      	beq.n	800c5b8 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c58a:	4a0a      	ldr	r2, [pc, #40]	; (800c5b4 <HAL_SD_IRQHandler+0x2c4>)
 800c58c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c592:	4618      	mov	r0, r3
 800c594:	f7fb fbfc 	bl	8007d90 <HAL_DMA_Abort_IT>
 800c598:	4603      	mov	r3, r0
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d01a      	beq.n	800c5d4 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	f000 faeb 	bl	800cb7e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800c5a8:	e014      	b.n	800c5d4 <HAL_SD_IRQHandler+0x2e4>
 800c5aa:	bf00      	nop
 800c5ac:	ffff3ec5 	.word	0xffff3ec5
 800c5b0:	0800cb11 	.word	0x0800cb11
 800c5b4:	0800cb7f 	.word	0x0800cb7f
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	2201      	movs	r2, #1
 800c5c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800c5cc:	6878      	ldr	r0, [r7, #4]
 800c5ce:	f002 fbb1 	bl	800ed34 <HAL_SD_AbortCallback>
}
 800c5d2:	e7ff      	b.n	800c5d4 <HAL_SD_IRQHandler+0x2e4>
 800c5d4:	bf00      	nop
 800c5d6:	3710      	adds	r7, #16
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	bd80      	pop	{r7, pc}

0800c5dc <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800c5dc:	b480      	push	{r7}
 800c5de:	b083      	sub	sp, #12
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800c5e4:	bf00      	nop
 800c5e6:	370c      	adds	r7, #12
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ee:	4770      	bx	lr

0800c5f0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800c5f0:	b480      	push	{r7}
 800c5f2:	b083      	sub	sp, #12
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	6078      	str	r0, [r7, #4]
 800c5f8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c5fe:	0f9b      	lsrs	r3, r3, #30
 800c600:	b2da      	uxtb	r2, r3
 800c602:	683b      	ldr	r3, [r7, #0]
 800c604:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c60a:	0e9b      	lsrs	r3, r3, #26
 800c60c:	b2db      	uxtb	r3, r3
 800c60e:	f003 030f 	and.w	r3, r3, #15
 800c612:	b2da      	uxtb	r2, r3
 800c614:	683b      	ldr	r3, [r7, #0]
 800c616:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c61c:	0e1b      	lsrs	r3, r3, #24
 800c61e:	b2db      	uxtb	r3, r3
 800c620:	f003 0303 	and.w	r3, r3, #3
 800c624:	b2da      	uxtb	r2, r3
 800c626:	683b      	ldr	r3, [r7, #0]
 800c628:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c62e:	0c1b      	lsrs	r3, r3, #16
 800c630:	b2da      	uxtb	r2, r3
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c63a:	0a1b      	lsrs	r3, r3, #8
 800c63c:	b2da      	uxtb	r2, r3
 800c63e:	683b      	ldr	r3, [r7, #0]
 800c640:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c646:	b2da      	uxtb	r2, r3
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c650:	0d1b      	lsrs	r3, r3, #20
 800c652:	b29a      	uxth	r2, r3
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c65c:	0c1b      	lsrs	r3, r3, #16
 800c65e:	b2db      	uxtb	r3, r3
 800c660:	f003 030f 	and.w	r3, r3, #15
 800c664:	b2da      	uxtb	r2, r3
 800c666:	683b      	ldr	r3, [r7, #0]
 800c668:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c66e:	0bdb      	lsrs	r3, r3, #15
 800c670:	b2db      	uxtb	r3, r3
 800c672:	f003 0301 	and.w	r3, r3, #1
 800c676:	b2da      	uxtb	r2, r3
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c680:	0b9b      	lsrs	r3, r3, #14
 800c682:	b2db      	uxtb	r3, r3
 800c684:	f003 0301 	and.w	r3, r3, #1
 800c688:	b2da      	uxtb	r2, r3
 800c68a:	683b      	ldr	r3, [r7, #0]
 800c68c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c692:	0b5b      	lsrs	r3, r3, #13
 800c694:	b2db      	uxtb	r3, r3
 800c696:	f003 0301 	and.w	r3, r3, #1
 800c69a:	b2da      	uxtb	r2, r3
 800c69c:	683b      	ldr	r3, [r7, #0]
 800c69e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c6a4:	0b1b      	lsrs	r3, r3, #12
 800c6a6:	b2db      	uxtb	r3, r3
 800c6a8:	f003 0301 	and.w	r3, r3, #1
 800c6ac:	b2da      	uxtb	r2, r3
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800c6b2:	683b      	ldr	r3, [r7, #0]
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d163      	bne.n	800c788 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c6c4:	009a      	lsls	r2, r3, #2
 800c6c6:	f640 73fc 	movw	r3, #4092	; 0xffc
 800c6ca:	4013      	ands	r3, r2
 800c6cc:	687a      	ldr	r2, [r7, #4]
 800c6ce:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800c6d0:	0f92      	lsrs	r2, r2, #30
 800c6d2:	431a      	orrs	r2, r3
 800c6d4:	683b      	ldr	r3, [r7, #0]
 800c6d6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c6dc:	0edb      	lsrs	r3, r3, #27
 800c6de:	b2db      	uxtb	r3, r3
 800c6e0:	f003 0307 	and.w	r3, r3, #7
 800c6e4:	b2da      	uxtb	r2, r3
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c6ee:	0e1b      	lsrs	r3, r3, #24
 800c6f0:	b2db      	uxtb	r3, r3
 800c6f2:	f003 0307 	and.w	r3, r3, #7
 800c6f6:	b2da      	uxtb	r2, r3
 800c6f8:	683b      	ldr	r3, [r7, #0]
 800c6fa:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c700:	0d5b      	lsrs	r3, r3, #21
 800c702:	b2db      	uxtb	r3, r3
 800c704:	f003 0307 	and.w	r3, r3, #7
 800c708:	b2da      	uxtb	r2, r3
 800c70a:	683b      	ldr	r3, [r7, #0]
 800c70c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c712:	0c9b      	lsrs	r3, r3, #18
 800c714:	b2db      	uxtb	r3, r3
 800c716:	f003 0307 	and.w	r3, r3, #7
 800c71a:	b2da      	uxtb	r2, r3
 800c71c:	683b      	ldr	r3, [r7, #0]
 800c71e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c724:	0bdb      	lsrs	r3, r3, #15
 800c726:	b2db      	uxtb	r3, r3
 800c728:	f003 0307 	and.w	r3, r3, #7
 800c72c:	b2da      	uxtb	r2, r3
 800c72e:	683b      	ldr	r3, [r7, #0]
 800c730:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800c732:	683b      	ldr	r3, [r7, #0]
 800c734:	691b      	ldr	r3, [r3, #16]
 800c736:	1c5a      	adds	r2, r3, #1
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	7e1b      	ldrb	r3, [r3, #24]
 800c740:	b2db      	uxtb	r3, r3
 800c742:	f003 0307 	and.w	r3, r3, #7
 800c746:	3302      	adds	r3, #2
 800c748:	2201      	movs	r2, #1
 800c74a:	fa02 f303 	lsl.w	r3, r2, r3
 800c74e:	687a      	ldr	r2, [r7, #4]
 800c750:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800c752:	fb03 f202 	mul.w	r2, r3, r2
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800c75a:	683b      	ldr	r3, [r7, #0]
 800c75c:	7a1b      	ldrb	r3, [r3, #8]
 800c75e:	b2db      	uxtb	r3, r3
 800c760:	f003 030f 	and.w	r3, r3, #15
 800c764:	2201      	movs	r2, #1
 800c766:	409a      	lsls	r2, r3
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c770:	687a      	ldr	r2, [r7, #4]
 800c772:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800c774:	0a52      	lsrs	r2, r2, #9
 800c776:	fb03 f202 	mul.w	r2, r3, r2
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c784:	661a      	str	r2, [r3, #96]	; 0x60
 800c786:	e031      	b.n	800c7ec <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c78c:	2b01      	cmp	r3, #1
 800c78e:	d11d      	bne.n	800c7cc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c794:	041b      	lsls	r3, r3, #16
 800c796:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c79e:	0c1b      	lsrs	r3, r3, #16
 800c7a0:	431a      	orrs	r2, r3
 800c7a2:	683b      	ldr	r3, [r7, #0]
 800c7a4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800c7a6:	683b      	ldr	r3, [r7, #0]
 800c7a8:	691b      	ldr	r3, [r3, #16]
 800c7aa:	3301      	adds	r3, #1
 800c7ac:	029a      	lsls	r2, r3, #10
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c7c0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	661a      	str	r2, [r3, #96]	; 0x60
 800c7ca:	e00f      	b.n	800c7ec <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	4a58      	ldr	r2, [pc, #352]	; (800c934 <HAL_SD_GetCardCSD+0x344>)
 800c7d2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7d8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	2201      	movs	r2, #1
 800c7e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c7e8:	2301      	movs	r3, #1
 800c7ea:	e09d      	b.n	800c928 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c7f0:	0b9b      	lsrs	r3, r3, #14
 800c7f2:	b2db      	uxtb	r3, r3
 800c7f4:	f003 0301 	and.w	r3, r3, #1
 800c7f8:	b2da      	uxtb	r2, r3
 800c7fa:	683b      	ldr	r3, [r7, #0]
 800c7fc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c802:	09db      	lsrs	r3, r3, #7
 800c804:	b2db      	uxtb	r3, r3
 800c806:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c80a:	b2da      	uxtb	r2, r3
 800c80c:	683b      	ldr	r3, [r7, #0]
 800c80e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c814:	b2db      	uxtb	r3, r3
 800c816:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c81a:	b2da      	uxtb	r2, r3
 800c81c:	683b      	ldr	r3, [r7, #0]
 800c81e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c824:	0fdb      	lsrs	r3, r3, #31
 800c826:	b2da      	uxtb	r2, r3
 800c828:	683b      	ldr	r3, [r7, #0]
 800c82a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c830:	0f5b      	lsrs	r3, r3, #29
 800c832:	b2db      	uxtb	r3, r3
 800c834:	f003 0303 	and.w	r3, r3, #3
 800c838:	b2da      	uxtb	r2, r3
 800c83a:	683b      	ldr	r3, [r7, #0]
 800c83c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c842:	0e9b      	lsrs	r3, r3, #26
 800c844:	b2db      	uxtb	r3, r3
 800c846:	f003 0307 	and.w	r3, r3, #7
 800c84a:	b2da      	uxtb	r2, r3
 800c84c:	683b      	ldr	r3, [r7, #0]
 800c84e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c854:	0d9b      	lsrs	r3, r3, #22
 800c856:	b2db      	uxtb	r3, r3
 800c858:	f003 030f 	and.w	r3, r3, #15
 800c85c:	b2da      	uxtb	r2, r3
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c866:	0d5b      	lsrs	r3, r3, #21
 800c868:	b2db      	uxtb	r3, r3
 800c86a:	f003 0301 	and.w	r3, r3, #1
 800c86e:	b2da      	uxtb	r2, r3
 800c870:	683b      	ldr	r3, [r7, #0]
 800c872:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800c876:	683b      	ldr	r3, [r7, #0]
 800c878:	2200      	movs	r2, #0
 800c87a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c882:	0c1b      	lsrs	r3, r3, #16
 800c884:	b2db      	uxtb	r3, r3
 800c886:	f003 0301 	and.w	r3, r3, #1
 800c88a:	b2da      	uxtb	r2, r3
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c896:	0bdb      	lsrs	r3, r3, #15
 800c898:	b2db      	uxtb	r3, r3
 800c89a:	f003 0301 	and.w	r3, r3, #1
 800c89e:	b2da      	uxtb	r2, r3
 800c8a0:	683b      	ldr	r3, [r7, #0]
 800c8a2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8aa:	0b9b      	lsrs	r3, r3, #14
 800c8ac:	b2db      	uxtb	r3, r3
 800c8ae:	f003 0301 	and.w	r3, r3, #1
 800c8b2:	b2da      	uxtb	r2, r3
 800c8b4:	683b      	ldr	r3, [r7, #0]
 800c8b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8be:	0b5b      	lsrs	r3, r3, #13
 800c8c0:	b2db      	uxtb	r3, r3
 800c8c2:	f003 0301 	and.w	r3, r3, #1
 800c8c6:	b2da      	uxtb	r2, r3
 800c8c8:	683b      	ldr	r3, [r7, #0]
 800c8ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8d2:	0b1b      	lsrs	r3, r3, #12
 800c8d4:	b2db      	uxtb	r3, r3
 800c8d6:	f003 0301 	and.w	r3, r3, #1
 800c8da:	b2da      	uxtb	r2, r3
 800c8dc:	683b      	ldr	r3, [r7, #0]
 800c8de:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8e6:	0a9b      	lsrs	r3, r3, #10
 800c8e8:	b2db      	uxtb	r3, r3
 800c8ea:	f003 0303 	and.w	r3, r3, #3
 800c8ee:	b2da      	uxtb	r2, r3
 800c8f0:	683b      	ldr	r3, [r7, #0]
 800c8f2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8fa:	0a1b      	lsrs	r3, r3, #8
 800c8fc:	b2db      	uxtb	r3, r3
 800c8fe:	f003 0303 	and.w	r3, r3, #3
 800c902:	b2da      	uxtb	r2, r3
 800c904:	683b      	ldr	r3, [r7, #0]
 800c906:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c90e:	085b      	lsrs	r3, r3, #1
 800c910:	b2db      	uxtb	r3, r3
 800c912:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c916:	b2da      	uxtb	r2, r3
 800c918:	683b      	ldr	r3, [r7, #0]
 800c91a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	2201      	movs	r2, #1
 800c922:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800c926:	2300      	movs	r3, #0
}
 800c928:	4618      	mov	r0, r3
 800c92a:	370c      	adds	r7, #12
 800c92c:	46bd      	mov	sp, r7
 800c92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c932:	4770      	bx	lr
 800c934:	004005ff 	.word	0x004005ff

0800c938 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800c938:	b480      	push	{r7}
 800c93a:	b083      	sub	sp, #12
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
 800c940:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c946:	683b      	ldr	r3, [r7, #0]
 800c948:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c94e:	683b      	ldr	r3, [r7, #0]
 800c950:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c956:	683b      	ldr	r3, [r7, #0]
 800c958:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c95e:	683b      	ldr	r3, [r7, #0]
 800c960:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c966:	683b      	ldr	r3, [r7, #0]
 800c968:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c96e:	683b      	ldr	r3, [r7, #0]
 800c970:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c976:	683b      	ldr	r3, [r7, #0]
 800c978:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800c97e:	683b      	ldr	r3, [r7, #0]
 800c980:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800c982:	2300      	movs	r3, #0
}
 800c984:	4618      	mov	r0, r3
 800c986:	370c      	adds	r7, #12
 800c988:	46bd      	mov	sp, r7
 800c98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98e:	4770      	bx	lr

0800c990 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b086      	sub	sp, #24
 800c994:	af00      	add	r7, sp, #0
 800c996:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800c998:	2300      	movs	r3, #0
 800c99a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800c99c:	f107 030c 	add.w	r3, r7, #12
 800c9a0:	4619      	mov	r1, r3
 800c9a2:	6878      	ldr	r0, [r7, #4]
 800c9a4:	f000 fa7e 	bl	800cea4 <SD_SendStatus>
 800c9a8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c9aa:	697b      	ldr	r3, [r7, #20]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d005      	beq.n	800c9bc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c9b4:	697b      	ldr	r3, [r7, #20]
 800c9b6:	431a      	orrs	r2, r3
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	0a5b      	lsrs	r3, r3, #9
 800c9c0:	f003 030f 	and.w	r3, r3, #15
 800c9c4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800c9c6:	693b      	ldr	r3, [r7, #16]
}
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	3718      	adds	r7, #24
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	bd80      	pop	{r7, pc}

0800c9d0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c9d0:	b480      	push	{r7}
 800c9d2:	b085      	sub	sp, #20
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9dc:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c9ec:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800c9ee:	bf00      	nop
 800c9f0:	3714      	adds	r7, #20
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f8:	4770      	bx	lr

0800c9fa <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c9fa:	b580      	push	{r7, lr}
 800c9fc:	b084      	sub	sp, #16
 800c9fe:	af00      	add	r7, sp, #0
 800ca00:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca06:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca0c:	2b82      	cmp	r3, #130	; 0x82
 800ca0e:	d111      	bne.n	800ca34 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	4618      	mov	r0, r3
 800ca16:	f001 fd5d 	bl	800e4d4 <SDMMC_CmdStopTransfer>
 800ca1a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ca1c:	68bb      	ldr	r3, [r7, #8]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d008      	beq.n	800ca34 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ca26:	68bb      	ldr	r3, [r7, #8]
 800ca28:	431a      	orrs	r2, r3
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800ca2e:	68f8      	ldr	r0, [r7, #12]
 800ca30:	f7ff fdd4 	bl	800c5dc <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	f022 0208 	bic.w	r2, r2, #8
 800ca42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	f240 523a 	movw	r2, #1338	; 0x53a
 800ca4c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	2201      	movs	r2, #1
 800ca52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	2200      	movs	r2, #0
 800ca5a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800ca5c:	68f8      	ldr	r0, [r7, #12]
 800ca5e:	f002 f97d 	bl	800ed5c <HAL_SD_RxCpltCallback>
#endif
}
 800ca62:	bf00      	nop
 800ca64:	3710      	adds	r7, #16
 800ca66:	46bd      	mov	sp, r7
 800ca68:	bd80      	pop	{r7, pc}
	...

0800ca6c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b086      	sub	sp, #24
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca78:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800ca7a:	6878      	ldr	r0, [r7, #4]
 800ca7c:	f7fb fb34 	bl	80080e8 <HAL_DMA_GetError>
 800ca80:	4603      	mov	r3, r0
 800ca82:	2b02      	cmp	r3, #2
 800ca84:	d03e      	beq.n	800cb04 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800ca86:	697b      	ldr	r3, [r7, #20]
 800ca88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca8c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800ca8e:	697b      	ldr	r3, [r7, #20]
 800ca90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca94:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800ca96:	693b      	ldr	r3, [r7, #16]
 800ca98:	2b01      	cmp	r3, #1
 800ca9a:	d002      	beq.n	800caa2 <SD_DMAError+0x36>
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	2b01      	cmp	r3, #1
 800caa0:	d12d      	bne.n	800cafe <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800caa2:	697b      	ldr	r3, [r7, #20]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	4a19      	ldr	r2, [pc, #100]	; (800cb0c <SD_DMAError+0xa0>)
 800caa8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800caaa:	697b      	ldr	r3, [r7, #20]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cab0:	697b      	ldr	r3, [r7, #20]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800cab8:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800caba:	697b      	ldr	r3, [r7, #20]
 800cabc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cabe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cac2:	697b      	ldr	r3, [r7, #20]
 800cac4:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800cac6:	6978      	ldr	r0, [r7, #20]
 800cac8:	f7ff ff62 	bl	800c990 <HAL_SD_GetCardState>
 800cacc:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800cace:	68bb      	ldr	r3, [r7, #8]
 800cad0:	2b06      	cmp	r3, #6
 800cad2:	d002      	beq.n	800cada <SD_DMAError+0x6e>
 800cad4:	68bb      	ldr	r3, [r7, #8]
 800cad6:	2b05      	cmp	r3, #5
 800cad8:	d10a      	bne.n	800caf0 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800cada:	697b      	ldr	r3, [r7, #20]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	4618      	mov	r0, r3
 800cae0:	f001 fcf8 	bl	800e4d4 <SDMMC_CmdStopTransfer>
 800cae4:	4602      	mov	r2, r0
 800cae6:	697b      	ldr	r3, [r7, #20]
 800cae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caea:	431a      	orrs	r2, r3
 800caec:	697b      	ldr	r3, [r7, #20]
 800caee:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800caf0:	697b      	ldr	r3, [r7, #20]
 800caf2:	2201      	movs	r2, #1
 800caf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800caf8:	697b      	ldr	r3, [r7, #20]
 800cafa:	2200      	movs	r2, #0
 800cafc:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800cafe:	6978      	ldr	r0, [r7, #20]
 800cb00:	f7ff fd6c 	bl	800c5dc <HAL_SD_ErrorCallback>
#endif
  }
}
 800cb04:	bf00      	nop
 800cb06:	3718      	adds	r7, #24
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	bd80      	pop	{r7, pc}
 800cb0c:	004005ff 	.word	0x004005ff

0800cb10 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b084      	sub	sp, #16
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb1c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	f240 523a 	movw	r2, #1338	; 0x53a
 800cb26:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800cb28:	68f8      	ldr	r0, [r7, #12]
 800cb2a:	f7ff ff31 	bl	800c990 <HAL_SD_GetCardState>
 800cb2e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	2201      	movs	r2, #1
 800cb34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800cb3e:	68bb      	ldr	r3, [r7, #8]
 800cb40:	2b06      	cmp	r3, #6
 800cb42:	d002      	beq.n	800cb4a <SD_DMATxAbort+0x3a>
 800cb44:	68bb      	ldr	r3, [r7, #8]
 800cb46:	2b05      	cmp	r3, #5
 800cb48:	d10a      	bne.n	800cb60 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	4618      	mov	r0, r3
 800cb50:	f001 fcc0 	bl	800e4d4 <SDMMC_CmdStopTransfer>
 800cb54:	4602      	mov	r2, r0
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb5a:	431a      	orrs	r2, r3
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d103      	bne.n	800cb70 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800cb68:	68f8      	ldr	r0, [r7, #12]
 800cb6a:	f002 f8e3 	bl	800ed34 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800cb6e:	e002      	b.n	800cb76 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800cb70:	68f8      	ldr	r0, [r7, #12]
 800cb72:	f7ff fd33 	bl	800c5dc <HAL_SD_ErrorCallback>
}
 800cb76:	bf00      	nop
 800cb78:	3710      	adds	r7, #16
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	bd80      	pop	{r7, pc}

0800cb7e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800cb7e:	b580      	push	{r7, lr}
 800cb80:	b084      	sub	sp, #16
 800cb82:	af00      	add	r7, sp, #0
 800cb84:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb8a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	f240 523a 	movw	r2, #1338	; 0x53a
 800cb94:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800cb96:	68f8      	ldr	r0, [r7, #12]
 800cb98:	f7ff fefa 	bl	800c990 <HAL_SD_GetCardState>
 800cb9c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	2201      	movs	r2, #1
 800cba2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	2200      	movs	r2, #0
 800cbaa:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800cbac:	68bb      	ldr	r3, [r7, #8]
 800cbae:	2b06      	cmp	r3, #6
 800cbb0:	d002      	beq.n	800cbb8 <SD_DMARxAbort+0x3a>
 800cbb2:	68bb      	ldr	r3, [r7, #8]
 800cbb4:	2b05      	cmp	r3, #5
 800cbb6:	d10a      	bne.n	800cbce <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	f001 fc89 	bl	800e4d4 <SDMMC_CmdStopTransfer>
 800cbc2:	4602      	mov	r2, r0
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbc8:	431a      	orrs	r2, r3
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d103      	bne.n	800cbde <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800cbd6:	68f8      	ldr	r0, [r7, #12]
 800cbd8:	f002 f8ac 	bl	800ed34 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800cbdc:	e002      	b.n	800cbe4 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800cbde:	68f8      	ldr	r0, [r7, #12]
 800cbe0:	f7ff fcfc 	bl	800c5dc <HAL_SD_ErrorCallback>
}
 800cbe4:	bf00      	nop
 800cbe6:	3710      	adds	r7, #16
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	bd80      	pop	{r7, pc}

0800cbec <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800cbec:	b5b0      	push	{r4, r5, r7, lr}
 800cbee:	b094      	sub	sp, #80	; 0x50
 800cbf0:	af04      	add	r7, sp, #16
 800cbf2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800cbf4:	2301      	movs	r3, #1
 800cbf6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	f001 fb3b 	bl	800e278 <SDMMC_GetPowerState>
 800cc02:	4603      	mov	r3, r0
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d102      	bne.n	800cc0e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800cc08:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800cc0c:	e0b8      	b.n	800cd80 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc12:	2b03      	cmp	r3, #3
 800cc14:	d02f      	beq.n	800cc76 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	f001 fd22 	bl	800e664 <SDMMC_CmdSendCID>
 800cc20:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800cc22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d001      	beq.n	800cc2c <SD_InitCard+0x40>
    {
      return errorstate;
 800cc28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc2a:	e0a9      	b.n	800cd80 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	2100      	movs	r1, #0
 800cc32:	4618      	mov	r0, r3
 800cc34:	f001 fb65 	bl	800e302 <SDMMC_GetResponse>
 800cc38:	4602      	mov	r2, r0
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	2104      	movs	r1, #4
 800cc44:	4618      	mov	r0, r3
 800cc46:	f001 fb5c 	bl	800e302 <SDMMC_GetResponse>
 800cc4a:	4602      	mov	r2, r0
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	2108      	movs	r1, #8
 800cc56:	4618      	mov	r0, r3
 800cc58:	f001 fb53 	bl	800e302 <SDMMC_GetResponse>
 800cc5c:	4602      	mov	r2, r0
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	210c      	movs	r1, #12
 800cc68:	4618      	mov	r0, r3
 800cc6a:	f001 fb4a 	bl	800e302 <SDMMC_GetResponse>
 800cc6e:	4602      	mov	r2, r0
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc7a:	2b03      	cmp	r3, #3
 800cc7c:	d00d      	beq.n	800cc9a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	f107 020e 	add.w	r2, r7, #14
 800cc86:	4611      	mov	r1, r2
 800cc88:	4618      	mov	r0, r3
 800cc8a:	f001 fd28 	bl	800e6de <SDMMC_CmdSetRelAdd>
 800cc8e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800cc90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d001      	beq.n	800cc9a <SD_InitCard+0xae>
    {
      return errorstate;
 800cc96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc98:	e072      	b.n	800cd80 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc9e:	2b03      	cmp	r3, #3
 800cca0:	d036      	beq.n	800cd10 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800cca2:	89fb      	ldrh	r3, [r7, #14]
 800cca4:	461a      	mov	r2, r3
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681a      	ldr	r2, [r3, #0]
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ccb2:	041b      	lsls	r3, r3, #16
 800ccb4:	4619      	mov	r1, r3
 800ccb6:	4610      	mov	r0, r2
 800ccb8:	f001 fcf2 	bl	800e6a0 <SDMMC_CmdSendCSD>
 800ccbc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ccbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d001      	beq.n	800ccc8 <SD_InitCard+0xdc>
    {
      return errorstate;
 800ccc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ccc6:	e05b      	b.n	800cd80 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	2100      	movs	r1, #0
 800ccce:	4618      	mov	r0, r3
 800ccd0:	f001 fb17 	bl	800e302 <SDMMC_GetResponse>
 800ccd4:	4602      	mov	r2, r0
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	2104      	movs	r1, #4
 800cce0:	4618      	mov	r0, r3
 800cce2:	f001 fb0e 	bl	800e302 <SDMMC_GetResponse>
 800cce6:	4602      	mov	r2, r0
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	2108      	movs	r1, #8
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	f001 fb05 	bl	800e302 <SDMMC_GetResponse>
 800ccf8:	4602      	mov	r2, r0
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	210c      	movs	r1, #12
 800cd04:	4618      	mov	r0, r3
 800cd06:	f001 fafc 	bl	800e302 <SDMMC_GetResponse>
 800cd0a:	4602      	mov	r2, r0
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	2104      	movs	r1, #4
 800cd16:	4618      	mov	r0, r3
 800cd18:	f001 faf3 	bl	800e302 <SDMMC_GetResponse>
 800cd1c:	4603      	mov	r3, r0
 800cd1e:	0d1a      	lsrs	r2, r3, #20
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800cd24:	f107 0310 	add.w	r3, r7, #16
 800cd28:	4619      	mov	r1, r3
 800cd2a:	6878      	ldr	r0, [r7, #4]
 800cd2c:	f7ff fc60 	bl	800c5f0 <HAL_SD_GetCardCSD>
 800cd30:	4603      	mov	r3, r0
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d002      	beq.n	800cd3c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cd36:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800cd3a:	e021      	b.n	800cd80 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	6819      	ldr	r1, [r3, #0]
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd44:	041b      	lsls	r3, r3, #16
 800cd46:	2200      	movs	r2, #0
 800cd48:	461c      	mov	r4, r3
 800cd4a:	4615      	mov	r5, r2
 800cd4c:	4622      	mov	r2, r4
 800cd4e:	462b      	mov	r3, r5
 800cd50:	4608      	mov	r0, r1
 800cd52:	f001 fbe1 	bl	800e518 <SDMMC_CmdSelDesel>
 800cd56:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800cd58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d001      	beq.n	800cd62 <SD_InitCard+0x176>
  {
    return errorstate;
 800cd5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd60:	e00e      	b.n	800cd80 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	681d      	ldr	r5, [r3, #0]
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	466c      	mov	r4, sp
 800cd6a:	f103 0210 	add.w	r2, r3, #16
 800cd6e:	ca07      	ldmia	r2, {r0, r1, r2}
 800cd70:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cd74:	3304      	adds	r3, #4
 800cd76:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cd78:	4628      	mov	r0, r5
 800cd7a:	f001 fa25 	bl	800e1c8 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800cd7e:	2300      	movs	r3, #0
}
 800cd80:	4618      	mov	r0, r3
 800cd82:	3740      	adds	r7, #64	; 0x40
 800cd84:	46bd      	mov	sp, r7
 800cd86:	bdb0      	pop	{r4, r5, r7, pc}

0800cd88 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b086      	sub	sp, #24
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cd90:	2300      	movs	r3, #0
 800cd92:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800cd94:	2300      	movs	r3, #0
 800cd96:	617b      	str	r3, [r7, #20]
 800cd98:	2300      	movs	r3, #0
 800cd9a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	4618      	mov	r0, r3
 800cda2:	f001 fbdc 	bl	800e55e <SDMMC_CmdGoIdleState>
 800cda6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d001      	beq.n	800cdb2 <SD_PowerON+0x2a>
  {
    return errorstate;
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	e072      	b.n	800ce98 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	f001 fbef 	bl	800e59a <SDMMC_CmdOperCond>
 800cdbc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d00d      	beq.n	800cde0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	4618      	mov	r0, r3
 800cdd0:	f001 fbc5 	bl	800e55e <SDMMC_CmdGoIdleState>
 800cdd4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d004      	beq.n	800cde6 <SD_PowerON+0x5e>
    {
      return errorstate;
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	e05b      	b.n	800ce98 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	2201      	movs	r2, #1
 800cde4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cdea:	2b01      	cmp	r3, #1
 800cdec:	d137      	bne.n	800ce5e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	2100      	movs	r1, #0
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	f001 fbef 	bl	800e5d8 <SDMMC_CmdAppCommand>
 800cdfa:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d02d      	beq.n	800ce5e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ce02:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ce06:	e047      	b.n	800ce98 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	2100      	movs	r1, #0
 800ce0e:	4618      	mov	r0, r3
 800ce10:	f001 fbe2 	bl	800e5d8 <SDMMC_CmdAppCommand>
 800ce14:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d001      	beq.n	800ce20 <SD_PowerON+0x98>
    {
      return errorstate;
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	e03b      	b.n	800ce98 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	491e      	ldr	r1, [pc, #120]	; (800cea0 <SD_PowerON+0x118>)
 800ce26:	4618      	mov	r0, r3
 800ce28:	f001 fbf8 	bl	800e61c <SDMMC_CmdAppOperCommand>
 800ce2c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d002      	beq.n	800ce3a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ce34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ce38:	e02e      	b.n	800ce98 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	2100      	movs	r1, #0
 800ce40:	4618      	mov	r0, r3
 800ce42:	f001 fa5e 	bl	800e302 <SDMMC_GetResponse>
 800ce46:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800ce48:	697b      	ldr	r3, [r7, #20]
 800ce4a:	0fdb      	lsrs	r3, r3, #31
 800ce4c:	2b01      	cmp	r3, #1
 800ce4e:	d101      	bne.n	800ce54 <SD_PowerON+0xcc>
 800ce50:	2301      	movs	r3, #1
 800ce52:	e000      	b.n	800ce56 <SD_PowerON+0xce>
 800ce54:	2300      	movs	r3, #0
 800ce56:	613b      	str	r3, [r7, #16]

    count++;
 800ce58:	68bb      	ldr	r3, [r7, #8]
 800ce5a:	3301      	adds	r3, #1
 800ce5c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800ce5e:	68bb      	ldr	r3, [r7, #8]
 800ce60:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ce64:	4293      	cmp	r3, r2
 800ce66:	d802      	bhi.n	800ce6e <SD_PowerON+0xe6>
 800ce68:	693b      	ldr	r3, [r7, #16]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d0cc      	beq.n	800ce08 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800ce6e:	68bb      	ldr	r3, [r7, #8]
 800ce70:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ce74:	4293      	cmp	r3, r2
 800ce76:	d902      	bls.n	800ce7e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800ce78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ce7c:	e00c      	b.n	800ce98 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800ce7e:	697b      	ldr	r3, [r7, #20]
 800ce80:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d003      	beq.n	800ce90 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	2201      	movs	r2, #1
 800ce8c:	645a      	str	r2, [r3, #68]	; 0x44
 800ce8e:	e002      	b.n	800ce96 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	2200      	movs	r2, #0
 800ce94:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800ce96:	2300      	movs	r3, #0
}
 800ce98:	4618      	mov	r0, r3
 800ce9a:	3718      	adds	r7, #24
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	bd80      	pop	{r7, pc}
 800cea0:	c1100000 	.word	0xc1100000

0800cea4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b084      	sub	sp, #16
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	6078      	str	r0, [r7, #4]
 800ceac:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800ceae:	683b      	ldr	r3, [r7, #0]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d102      	bne.n	800ceba <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800ceb4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ceb8:	e018      	b.n	800ceec <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	681a      	ldr	r2, [r3, #0]
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cec2:	041b      	lsls	r3, r3, #16
 800cec4:	4619      	mov	r1, r3
 800cec6:	4610      	mov	r0, r2
 800cec8:	f001 fc2a 	bl	800e720 <SDMMC_CmdSendStatus>
 800cecc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d001      	beq.n	800ced8 <SD_SendStatus+0x34>
  {
    return errorstate;
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	e009      	b.n	800ceec <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	2100      	movs	r1, #0
 800cede:	4618      	mov	r0, r3
 800cee0:	f001 fa0f 	bl	800e302 <SDMMC_GetResponse>
 800cee4:	4602      	mov	r2, r0
 800cee6:	683b      	ldr	r3, [r7, #0]
 800cee8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800ceea:	2300      	movs	r3, #0
}
 800ceec:	4618      	mov	r0, r3
 800ceee:	3710      	adds	r7, #16
 800cef0:	46bd      	mov	sp, r7
 800cef2:	bd80      	pop	{r7, pc}

0800cef4 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b086      	sub	sp, #24
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf00:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf06:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800cf08:	693b      	ldr	r3, [r7, #16]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d03f      	beq.n	800cf8e <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800cf0e:	2300      	movs	r3, #0
 800cf10:	617b      	str	r3, [r7, #20]
 800cf12:	e033      	b.n	800cf7c <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	4618      	mov	r0, r3
 800cf1a:	f001 f981 	bl	800e220 <SDMMC_ReadFIFO>
 800cf1e:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800cf20:	68bb      	ldr	r3, [r7, #8]
 800cf22:	b2da      	uxtb	r2, r3
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	701a      	strb	r2, [r3, #0]
      tmp++;
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	3301      	adds	r3, #1
 800cf2c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800cf2e:	693b      	ldr	r3, [r7, #16]
 800cf30:	3b01      	subs	r3, #1
 800cf32:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800cf34:	68bb      	ldr	r3, [r7, #8]
 800cf36:	0a1b      	lsrs	r3, r3, #8
 800cf38:	b2da      	uxtb	r2, r3
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	3301      	adds	r3, #1
 800cf42:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800cf44:	693b      	ldr	r3, [r7, #16]
 800cf46:	3b01      	subs	r3, #1
 800cf48:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800cf4a:	68bb      	ldr	r3, [r7, #8]
 800cf4c:	0c1b      	lsrs	r3, r3, #16
 800cf4e:	b2da      	uxtb	r2, r3
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	701a      	strb	r2, [r3, #0]
      tmp++;
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	3301      	adds	r3, #1
 800cf58:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800cf5a:	693b      	ldr	r3, [r7, #16]
 800cf5c:	3b01      	subs	r3, #1
 800cf5e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800cf60:	68bb      	ldr	r3, [r7, #8]
 800cf62:	0e1b      	lsrs	r3, r3, #24
 800cf64:	b2da      	uxtb	r2, r3
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	701a      	strb	r2, [r3, #0]
      tmp++;
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	3301      	adds	r3, #1
 800cf6e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800cf70:	693b      	ldr	r3, [r7, #16]
 800cf72:	3b01      	subs	r3, #1
 800cf74:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800cf76:	697b      	ldr	r3, [r7, #20]
 800cf78:	3301      	adds	r3, #1
 800cf7a:	617b      	str	r3, [r7, #20]
 800cf7c:	697b      	ldr	r3, [r7, #20]
 800cf7e:	2b07      	cmp	r3, #7
 800cf80:	d9c8      	bls.n	800cf14 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	68fa      	ldr	r2, [r7, #12]
 800cf86:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	693a      	ldr	r2, [r7, #16]
 800cf8c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800cf8e:	bf00      	nop
 800cf90:	3718      	adds	r7, #24
 800cf92:	46bd      	mov	sp, r7
 800cf94:	bd80      	pop	{r7, pc}

0800cf96 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800cf96:	b580      	push	{r7, lr}
 800cf98:	b086      	sub	sp, #24
 800cf9a:	af00      	add	r7, sp, #0
 800cf9c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	6a1b      	ldr	r3, [r3, #32]
 800cfa2:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfa8:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800cfaa:	693b      	ldr	r3, [r7, #16]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d043      	beq.n	800d038 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	617b      	str	r3, [r7, #20]
 800cfb4:	e037      	b.n	800d026 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	781b      	ldrb	r3, [r3, #0]
 800cfba:	60bb      	str	r3, [r7, #8]
      tmp++;
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	3301      	adds	r3, #1
 800cfc0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800cfc2:	693b      	ldr	r3, [r7, #16]
 800cfc4:	3b01      	subs	r3, #1
 800cfc6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	781b      	ldrb	r3, [r3, #0]
 800cfcc:	021a      	lsls	r2, r3, #8
 800cfce:	68bb      	ldr	r3, [r7, #8]
 800cfd0:	4313      	orrs	r3, r2
 800cfd2:	60bb      	str	r3, [r7, #8]
      tmp++;
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	3301      	adds	r3, #1
 800cfd8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800cfda:	693b      	ldr	r3, [r7, #16]
 800cfdc:	3b01      	subs	r3, #1
 800cfde:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	781b      	ldrb	r3, [r3, #0]
 800cfe4:	041a      	lsls	r2, r3, #16
 800cfe6:	68bb      	ldr	r3, [r7, #8]
 800cfe8:	4313      	orrs	r3, r2
 800cfea:	60bb      	str	r3, [r7, #8]
      tmp++;
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	3301      	adds	r3, #1
 800cff0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800cff2:	693b      	ldr	r3, [r7, #16]
 800cff4:	3b01      	subs	r3, #1
 800cff6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	781b      	ldrb	r3, [r3, #0]
 800cffc:	061a      	lsls	r2, r3, #24
 800cffe:	68bb      	ldr	r3, [r7, #8]
 800d000:	4313      	orrs	r3, r2
 800d002:	60bb      	str	r3, [r7, #8]
      tmp++;
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	3301      	adds	r3, #1
 800d008:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d00a:	693b      	ldr	r3, [r7, #16]
 800d00c:	3b01      	subs	r3, #1
 800d00e:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	f107 0208 	add.w	r2, r7, #8
 800d018:	4611      	mov	r1, r2
 800d01a:	4618      	mov	r0, r3
 800d01c:	f001 f90d 	bl	800e23a <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800d020:	697b      	ldr	r3, [r7, #20]
 800d022:	3301      	adds	r3, #1
 800d024:	617b      	str	r3, [r7, #20]
 800d026:	697b      	ldr	r3, [r7, #20]
 800d028:	2b07      	cmp	r3, #7
 800d02a:	d9c4      	bls.n	800cfb6 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	68fa      	ldr	r2, [r7, #12]
 800d030:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	693a      	ldr	r2, [r7, #16]
 800d036:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800d038:	bf00      	nop
 800d03a:	3718      	adds	r7, #24
 800d03c:	46bd      	mov	sp, r7
 800d03e:	bd80      	pop	{r7, pc}

0800d040 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800d040:	b580      	push	{r7, lr}
 800d042:	b082      	sub	sp, #8
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
 800d048:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d101      	bne.n	800d054 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800d050:	2301      	movs	r3, #1
 800d052:	e025      	b.n	800d0a0 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d05a:	b2db      	uxtb	r3, r3
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d106      	bne.n	800d06e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	2200      	movs	r2, #0
 800d064:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800d068:	6878      	ldr	r0, [r7, #4]
 800d06a:	f7f8 fa69 	bl	8005540 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	2202      	movs	r2, #2
 800d072:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	681a      	ldr	r2, [r3, #0]
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	3304      	adds	r3, #4
 800d07e:	4619      	mov	r1, r3
 800d080:	4610      	mov	r0, r2
 800d082:	f000 ff9f 	bl	800dfc4 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	6818      	ldr	r0, [r3, #0]
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	685b      	ldr	r3, [r3, #4]
 800d08e:	461a      	mov	r2, r3
 800d090:	6839      	ldr	r1, [r7, #0]
 800d092:	f000 fff3 	bl	800e07c <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	2201      	movs	r2, #1
 800d09a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800d09e:	2300      	movs	r3, #0
}
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	3708      	adds	r7, #8
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	bd80      	pop	{r7, pc}

0800d0a8 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b086      	sub	sp, #24
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	60f8      	str	r0, [r7, #12]
 800d0b0:	60b9      	str	r1, [r7, #8]
 800d0b2:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d0ba:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800d0bc:	7dfb      	ldrb	r3, [r7, #23]
 800d0be:	2b02      	cmp	r3, #2
 800d0c0:	d101      	bne.n	800d0c6 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800d0c2:	2302      	movs	r3, #2
 800d0c4:	e021      	b.n	800d10a <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800d0c6:	7dfb      	ldrb	r3, [r7, #23]
 800d0c8:	2b01      	cmp	r3, #1
 800d0ca:	d002      	beq.n	800d0d2 <HAL_SDRAM_SendCommand+0x2a>
 800d0cc:	7dfb      	ldrb	r3, [r7, #23]
 800d0ce:	2b05      	cmp	r3, #5
 800d0d0:	d118      	bne.n	800d104 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	2202      	movs	r2, #2
 800d0d6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	687a      	ldr	r2, [r7, #4]
 800d0e0:	68b9      	ldr	r1, [r7, #8]
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	f001 f834 	bl	800e150 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800d0e8:	68bb      	ldr	r3, [r7, #8]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	2b02      	cmp	r3, #2
 800d0ee:	d104      	bne.n	800d0fa <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	2205      	movs	r2, #5
 800d0f4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800d0f8:	e006      	b.n	800d108 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	2201      	movs	r2, #1
 800d0fe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800d102:	e001      	b.n	800d108 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800d104:	2301      	movs	r3, #1
 800d106:	e000      	b.n	800d10a <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800d108:	2300      	movs	r3, #0
}
 800d10a:	4618      	mov	r0, r3
 800d10c:	3718      	adds	r7, #24
 800d10e:	46bd      	mov	sp, r7
 800d110:	bd80      	pop	{r7, pc}

0800d112 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800d112:	b580      	push	{r7, lr}
 800d114:	b082      	sub	sp, #8
 800d116:	af00      	add	r7, sp, #0
 800d118:	6078      	str	r0, [r7, #4]
 800d11a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d122:	b2db      	uxtb	r3, r3
 800d124:	2b02      	cmp	r3, #2
 800d126:	d101      	bne.n	800d12c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800d128:	2302      	movs	r3, #2
 800d12a:	e016      	b.n	800d15a <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d132:	b2db      	uxtb	r3, r3
 800d134:	2b01      	cmp	r3, #1
 800d136:	d10f      	bne.n	800d158 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	2202      	movs	r2, #2
 800d13c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	6839      	ldr	r1, [r7, #0]
 800d146:	4618      	mov	r0, r3
 800d148:	f001 f826 	bl	800e198 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	2201      	movs	r2, #1
 800d150:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800d154:	2300      	movs	r3, #0
 800d156:	e000      	b.n	800d15a <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800d158:	2301      	movs	r3, #1
}
 800d15a:	4618      	mov	r0, r3
 800d15c:	3708      	adds	r7, #8
 800d15e:	46bd      	mov	sp, r7
 800d160:	bd80      	pop	{r7, pc}

0800d162 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d162:	b580      	push	{r7, lr}
 800d164:	b082      	sub	sp, #8
 800d166:	af00      	add	r7, sp, #0
 800d168:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d101      	bne.n	800d174 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d170:	2301      	movs	r3, #1
 800d172:	e049      	b.n	800d208 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d17a:	b2db      	uxtb	r3, r3
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d106      	bne.n	800d18e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	2200      	movs	r2, #0
 800d184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d188:	6878      	ldr	r0, [r7, #4]
 800d18a:	f000 f841 	bl	800d210 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	2202      	movs	r2, #2
 800d192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	681a      	ldr	r2, [r3, #0]
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	3304      	adds	r3, #4
 800d19e:	4619      	mov	r1, r3
 800d1a0:	4610      	mov	r0, r2
 800d1a2:	f000 f9ff 	bl	800d5a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	2201      	movs	r2, #1
 800d1aa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	2201      	movs	r2, #1
 800d1b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	2201      	movs	r2, #1
 800d1ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	2201      	movs	r2, #1
 800d1c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	2201      	movs	r2, #1
 800d1ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	2201      	movs	r2, #1
 800d1d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	2201      	movs	r2, #1
 800d1da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	2201      	movs	r2, #1
 800d1e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	2201      	movs	r2, #1
 800d1ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	2201      	movs	r2, #1
 800d1f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	2201      	movs	r2, #1
 800d1fa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	2201      	movs	r2, #1
 800d202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d206:	2300      	movs	r3, #0
}
 800d208:	4618      	mov	r0, r3
 800d20a:	3708      	adds	r7, #8
 800d20c:	46bd      	mov	sp, r7
 800d20e:	bd80      	pop	{r7, pc}

0800d210 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800d210:	b480      	push	{r7}
 800d212:	b083      	sub	sp, #12
 800d214:	af00      	add	r7, sp, #0
 800d216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800d218:	bf00      	nop
 800d21a:	370c      	adds	r7, #12
 800d21c:	46bd      	mov	sp, r7
 800d21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d222:	4770      	bx	lr

0800d224 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d224:	b480      	push	{r7}
 800d226:	b085      	sub	sp, #20
 800d228:	af00      	add	r7, sp, #0
 800d22a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d232:	b2db      	uxtb	r3, r3
 800d234:	2b01      	cmp	r3, #1
 800d236:	d001      	beq.n	800d23c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d238:	2301      	movs	r3, #1
 800d23a:	e054      	b.n	800d2e6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	2202      	movs	r2, #2
 800d240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	68da      	ldr	r2, [r3, #12]
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	f042 0201 	orr.w	r2, r2, #1
 800d252:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	4a26      	ldr	r2, [pc, #152]	; (800d2f4 <HAL_TIM_Base_Start_IT+0xd0>)
 800d25a:	4293      	cmp	r3, r2
 800d25c:	d022      	beq.n	800d2a4 <HAL_TIM_Base_Start_IT+0x80>
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d266:	d01d      	beq.n	800d2a4 <HAL_TIM_Base_Start_IT+0x80>
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	4a22      	ldr	r2, [pc, #136]	; (800d2f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800d26e:	4293      	cmp	r3, r2
 800d270:	d018      	beq.n	800d2a4 <HAL_TIM_Base_Start_IT+0x80>
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	4a21      	ldr	r2, [pc, #132]	; (800d2fc <HAL_TIM_Base_Start_IT+0xd8>)
 800d278:	4293      	cmp	r3, r2
 800d27a:	d013      	beq.n	800d2a4 <HAL_TIM_Base_Start_IT+0x80>
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	4a1f      	ldr	r2, [pc, #124]	; (800d300 <HAL_TIM_Base_Start_IT+0xdc>)
 800d282:	4293      	cmp	r3, r2
 800d284:	d00e      	beq.n	800d2a4 <HAL_TIM_Base_Start_IT+0x80>
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	4a1e      	ldr	r2, [pc, #120]	; (800d304 <HAL_TIM_Base_Start_IT+0xe0>)
 800d28c:	4293      	cmp	r3, r2
 800d28e:	d009      	beq.n	800d2a4 <HAL_TIM_Base_Start_IT+0x80>
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	4a1c      	ldr	r2, [pc, #112]	; (800d308 <HAL_TIM_Base_Start_IT+0xe4>)
 800d296:	4293      	cmp	r3, r2
 800d298:	d004      	beq.n	800d2a4 <HAL_TIM_Base_Start_IT+0x80>
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	4a1b      	ldr	r2, [pc, #108]	; (800d30c <HAL_TIM_Base_Start_IT+0xe8>)
 800d2a0:	4293      	cmp	r3, r2
 800d2a2:	d115      	bne.n	800d2d0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	689a      	ldr	r2, [r3, #8]
 800d2aa:	4b19      	ldr	r3, [pc, #100]	; (800d310 <HAL_TIM_Base_Start_IT+0xec>)
 800d2ac:	4013      	ands	r3, r2
 800d2ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	2b06      	cmp	r3, #6
 800d2b4:	d015      	beq.n	800d2e2 <HAL_TIM_Base_Start_IT+0xbe>
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d2bc:	d011      	beq.n	800d2e2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	681a      	ldr	r2, [r3, #0]
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	f042 0201 	orr.w	r2, r2, #1
 800d2cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d2ce:	e008      	b.n	800d2e2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	681a      	ldr	r2, [r3, #0]
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	f042 0201 	orr.w	r2, r2, #1
 800d2de:	601a      	str	r2, [r3, #0]
 800d2e0:	e000      	b.n	800d2e4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d2e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d2e4:	2300      	movs	r3, #0
}
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	3714      	adds	r7, #20
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f0:	4770      	bx	lr
 800d2f2:	bf00      	nop
 800d2f4:	40010000 	.word	0x40010000
 800d2f8:	40000400 	.word	0x40000400
 800d2fc:	40000800 	.word	0x40000800
 800d300:	40000c00 	.word	0x40000c00
 800d304:	40010400 	.word	0x40010400
 800d308:	40014000 	.word	0x40014000
 800d30c:	40001800 	.word	0x40001800
 800d310:	00010007 	.word	0x00010007

0800d314 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d314:	b580      	push	{r7, lr}
 800d316:	b082      	sub	sp, #8
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	691b      	ldr	r3, [r3, #16]
 800d322:	f003 0302 	and.w	r3, r3, #2
 800d326:	2b02      	cmp	r3, #2
 800d328:	d122      	bne.n	800d370 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	68db      	ldr	r3, [r3, #12]
 800d330:	f003 0302 	and.w	r3, r3, #2
 800d334:	2b02      	cmp	r3, #2
 800d336:	d11b      	bne.n	800d370 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	f06f 0202 	mvn.w	r2, #2
 800d340:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	2201      	movs	r2, #1
 800d346:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	699b      	ldr	r3, [r3, #24]
 800d34e:	f003 0303 	and.w	r3, r3, #3
 800d352:	2b00      	cmp	r3, #0
 800d354:	d003      	beq.n	800d35e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d356:	6878      	ldr	r0, [r7, #4]
 800d358:	f000 f905 	bl	800d566 <HAL_TIM_IC_CaptureCallback>
 800d35c:	e005      	b.n	800d36a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d35e:	6878      	ldr	r0, [r7, #4]
 800d360:	f000 f8f7 	bl	800d552 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d364:	6878      	ldr	r0, [r7, #4]
 800d366:	f000 f908 	bl	800d57a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	2200      	movs	r2, #0
 800d36e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	691b      	ldr	r3, [r3, #16]
 800d376:	f003 0304 	and.w	r3, r3, #4
 800d37a:	2b04      	cmp	r3, #4
 800d37c:	d122      	bne.n	800d3c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	68db      	ldr	r3, [r3, #12]
 800d384:	f003 0304 	and.w	r3, r3, #4
 800d388:	2b04      	cmp	r3, #4
 800d38a:	d11b      	bne.n	800d3c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	f06f 0204 	mvn.w	r2, #4
 800d394:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	2202      	movs	r2, #2
 800d39a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	699b      	ldr	r3, [r3, #24]
 800d3a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d003      	beq.n	800d3b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d3aa:	6878      	ldr	r0, [r7, #4]
 800d3ac:	f000 f8db 	bl	800d566 <HAL_TIM_IC_CaptureCallback>
 800d3b0:	e005      	b.n	800d3be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d3b2:	6878      	ldr	r0, [r7, #4]
 800d3b4:	f000 f8cd 	bl	800d552 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d3b8:	6878      	ldr	r0, [r7, #4]
 800d3ba:	f000 f8de 	bl	800d57a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	2200      	movs	r2, #0
 800d3c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	691b      	ldr	r3, [r3, #16]
 800d3ca:	f003 0308 	and.w	r3, r3, #8
 800d3ce:	2b08      	cmp	r3, #8
 800d3d0:	d122      	bne.n	800d418 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	68db      	ldr	r3, [r3, #12]
 800d3d8:	f003 0308 	and.w	r3, r3, #8
 800d3dc:	2b08      	cmp	r3, #8
 800d3de:	d11b      	bne.n	800d418 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	f06f 0208 	mvn.w	r2, #8
 800d3e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	2204      	movs	r2, #4
 800d3ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	69db      	ldr	r3, [r3, #28]
 800d3f6:	f003 0303 	and.w	r3, r3, #3
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d003      	beq.n	800d406 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d3fe:	6878      	ldr	r0, [r7, #4]
 800d400:	f000 f8b1 	bl	800d566 <HAL_TIM_IC_CaptureCallback>
 800d404:	e005      	b.n	800d412 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d406:	6878      	ldr	r0, [r7, #4]
 800d408:	f000 f8a3 	bl	800d552 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d40c:	6878      	ldr	r0, [r7, #4]
 800d40e:	f000 f8b4 	bl	800d57a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	2200      	movs	r2, #0
 800d416:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	691b      	ldr	r3, [r3, #16]
 800d41e:	f003 0310 	and.w	r3, r3, #16
 800d422:	2b10      	cmp	r3, #16
 800d424:	d122      	bne.n	800d46c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	68db      	ldr	r3, [r3, #12]
 800d42c:	f003 0310 	and.w	r3, r3, #16
 800d430:	2b10      	cmp	r3, #16
 800d432:	d11b      	bne.n	800d46c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	f06f 0210 	mvn.w	r2, #16
 800d43c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	2208      	movs	r2, #8
 800d442:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	69db      	ldr	r3, [r3, #28]
 800d44a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d003      	beq.n	800d45a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d452:	6878      	ldr	r0, [r7, #4]
 800d454:	f000 f887 	bl	800d566 <HAL_TIM_IC_CaptureCallback>
 800d458:	e005      	b.n	800d466 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d45a:	6878      	ldr	r0, [r7, #4]
 800d45c:	f000 f879 	bl	800d552 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d460:	6878      	ldr	r0, [r7, #4]
 800d462:	f000 f88a 	bl	800d57a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	2200      	movs	r2, #0
 800d46a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	691b      	ldr	r3, [r3, #16]
 800d472:	f003 0301 	and.w	r3, r3, #1
 800d476:	2b01      	cmp	r3, #1
 800d478:	d10e      	bne.n	800d498 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	68db      	ldr	r3, [r3, #12]
 800d480:	f003 0301 	and.w	r3, r3, #1
 800d484:	2b01      	cmp	r3, #1
 800d486:	d107      	bne.n	800d498 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	f06f 0201 	mvn.w	r2, #1
 800d490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d492:	6878      	ldr	r0, [r7, #4]
 800d494:	f7f5 fb74 	bl	8002b80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	691b      	ldr	r3, [r3, #16]
 800d49e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d4a2:	2b80      	cmp	r3, #128	; 0x80
 800d4a4:	d10e      	bne.n	800d4c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	68db      	ldr	r3, [r3, #12]
 800d4ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d4b0:	2b80      	cmp	r3, #128	; 0x80
 800d4b2:	d107      	bne.n	800d4c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d4bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d4be:	6878      	ldr	r0, [r7, #4]
 800d4c0:	f000 f91a 	bl	800d6f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	691b      	ldr	r3, [r3, #16]
 800d4ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d4ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d4d2:	d10e      	bne.n	800d4f2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	68db      	ldr	r3, [r3, #12]
 800d4da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d4de:	2b80      	cmp	r3, #128	; 0x80
 800d4e0:	d107      	bne.n	800d4f2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d4ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d4ec:	6878      	ldr	r0, [r7, #4]
 800d4ee:	f000 f90d 	bl	800d70c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	691b      	ldr	r3, [r3, #16]
 800d4f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4fc:	2b40      	cmp	r3, #64	; 0x40
 800d4fe:	d10e      	bne.n	800d51e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	68db      	ldr	r3, [r3, #12]
 800d506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d50a:	2b40      	cmp	r3, #64	; 0x40
 800d50c:	d107      	bne.n	800d51e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d516:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d518:	6878      	ldr	r0, [r7, #4]
 800d51a:	f000 f838 	bl	800d58e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	691b      	ldr	r3, [r3, #16]
 800d524:	f003 0320 	and.w	r3, r3, #32
 800d528:	2b20      	cmp	r3, #32
 800d52a:	d10e      	bne.n	800d54a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	68db      	ldr	r3, [r3, #12]
 800d532:	f003 0320 	and.w	r3, r3, #32
 800d536:	2b20      	cmp	r3, #32
 800d538:	d107      	bne.n	800d54a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	f06f 0220 	mvn.w	r2, #32
 800d542:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d544:	6878      	ldr	r0, [r7, #4]
 800d546:	f000 f8cd 	bl	800d6e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d54a:	bf00      	nop
 800d54c:	3708      	adds	r7, #8
 800d54e:	46bd      	mov	sp, r7
 800d550:	bd80      	pop	{r7, pc}

0800d552 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d552:	b480      	push	{r7}
 800d554:	b083      	sub	sp, #12
 800d556:	af00      	add	r7, sp, #0
 800d558:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d55a:	bf00      	nop
 800d55c:	370c      	adds	r7, #12
 800d55e:	46bd      	mov	sp, r7
 800d560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d564:	4770      	bx	lr

0800d566 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d566:	b480      	push	{r7}
 800d568:	b083      	sub	sp, #12
 800d56a:	af00      	add	r7, sp, #0
 800d56c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d56e:	bf00      	nop
 800d570:	370c      	adds	r7, #12
 800d572:	46bd      	mov	sp, r7
 800d574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d578:	4770      	bx	lr

0800d57a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d57a:	b480      	push	{r7}
 800d57c:	b083      	sub	sp, #12
 800d57e:	af00      	add	r7, sp, #0
 800d580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d582:	bf00      	nop
 800d584:	370c      	adds	r7, #12
 800d586:	46bd      	mov	sp, r7
 800d588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58c:	4770      	bx	lr

0800d58e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d58e:	b480      	push	{r7}
 800d590:	b083      	sub	sp, #12
 800d592:	af00      	add	r7, sp, #0
 800d594:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d596:	bf00      	nop
 800d598:	370c      	adds	r7, #12
 800d59a:	46bd      	mov	sp, r7
 800d59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a0:	4770      	bx	lr
	...

0800d5a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d5a4:	b480      	push	{r7}
 800d5a6:	b085      	sub	sp, #20
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]
 800d5ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	4a40      	ldr	r2, [pc, #256]	; (800d6b8 <TIM_Base_SetConfig+0x114>)
 800d5b8:	4293      	cmp	r3, r2
 800d5ba:	d013      	beq.n	800d5e4 <TIM_Base_SetConfig+0x40>
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d5c2:	d00f      	beq.n	800d5e4 <TIM_Base_SetConfig+0x40>
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	4a3d      	ldr	r2, [pc, #244]	; (800d6bc <TIM_Base_SetConfig+0x118>)
 800d5c8:	4293      	cmp	r3, r2
 800d5ca:	d00b      	beq.n	800d5e4 <TIM_Base_SetConfig+0x40>
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	4a3c      	ldr	r2, [pc, #240]	; (800d6c0 <TIM_Base_SetConfig+0x11c>)
 800d5d0:	4293      	cmp	r3, r2
 800d5d2:	d007      	beq.n	800d5e4 <TIM_Base_SetConfig+0x40>
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	4a3b      	ldr	r2, [pc, #236]	; (800d6c4 <TIM_Base_SetConfig+0x120>)
 800d5d8:	4293      	cmp	r3, r2
 800d5da:	d003      	beq.n	800d5e4 <TIM_Base_SetConfig+0x40>
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	4a3a      	ldr	r2, [pc, #232]	; (800d6c8 <TIM_Base_SetConfig+0x124>)
 800d5e0:	4293      	cmp	r3, r2
 800d5e2:	d108      	bne.n	800d5f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d5ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d5ec:	683b      	ldr	r3, [r7, #0]
 800d5ee:	685b      	ldr	r3, [r3, #4]
 800d5f0:	68fa      	ldr	r2, [r7, #12]
 800d5f2:	4313      	orrs	r3, r2
 800d5f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	4a2f      	ldr	r2, [pc, #188]	; (800d6b8 <TIM_Base_SetConfig+0x114>)
 800d5fa:	4293      	cmp	r3, r2
 800d5fc:	d02b      	beq.n	800d656 <TIM_Base_SetConfig+0xb2>
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d604:	d027      	beq.n	800d656 <TIM_Base_SetConfig+0xb2>
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	4a2c      	ldr	r2, [pc, #176]	; (800d6bc <TIM_Base_SetConfig+0x118>)
 800d60a:	4293      	cmp	r3, r2
 800d60c:	d023      	beq.n	800d656 <TIM_Base_SetConfig+0xb2>
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	4a2b      	ldr	r2, [pc, #172]	; (800d6c0 <TIM_Base_SetConfig+0x11c>)
 800d612:	4293      	cmp	r3, r2
 800d614:	d01f      	beq.n	800d656 <TIM_Base_SetConfig+0xb2>
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	4a2a      	ldr	r2, [pc, #168]	; (800d6c4 <TIM_Base_SetConfig+0x120>)
 800d61a:	4293      	cmp	r3, r2
 800d61c:	d01b      	beq.n	800d656 <TIM_Base_SetConfig+0xb2>
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	4a29      	ldr	r2, [pc, #164]	; (800d6c8 <TIM_Base_SetConfig+0x124>)
 800d622:	4293      	cmp	r3, r2
 800d624:	d017      	beq.n	800d656 <TIM_Base_SetConfig+0xb2>
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	4a28      	ldr	r2, [pc, #160]	; (800d6cc <TIM_Base_SetConfig+0x128>)
 800d62a:	4293      	cmp	r3, r2
 800d62c:	d013      	beq.n	800d656 <TIM_Base_SetConfig+0xb2>
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	4a27      	ldr	r2, [pc, #156]	; (800d6d0 <TIM_Base_SetConfig+0x12c>)
 800d632:	4293      	cmp	r3, r2
 800d634:	d00f      	beq.n	800d656 <TIM_Base_SetConfig+0xb2>
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	4a26      	ldr	r2, [pc, #152]	; (800d6d4 <TIM_Base_SetConfig+0x130>)
 800d63a:	4293      	cmp	r3, r2
 800d63c:	d00b      	beq.n	800d656 <TIM_Base_SetConfig+0xb2>
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	4a25      	ldr	r2, [pc, #148]	; (800d6d8 <TIM_Base_SetConfig+0x134>)
 800d642:	4293      	cmp	r3, r2
 800d644:	d007      	beq.n	800d656 <TIM_Base_SetConfig+0xb2>
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	4a24      	ldr	r2, [pc, #144]	; (800d6dc <TIM_Base_SetConfig+0x138>)
 800d64a:	4293      	cmp	r3, r2
 800d64c:	d003      	beq.n	800d656 <TIM_Base_SetConfig+0xb2>
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	4a23      	ldr	r2, [pc, #140]	; (800d6e0 <TIM_Base_SetConfig+0x13c>)
 800d652:	4293      	cmp	r3, r2
 800d654:	d108      	bne.n	800d668 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d65c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d65e:	683b      	ldr	r3, [r7, #0]
 800d660:	68db      	ldr	r3, [r3, #12]
 800d662:	68fa      	ldr	r2, [r7, #12]
 800d664:	4313      	orrs	r3, r2
 800d666:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d66e:	683b      	ldr	r3, [r7, #0]
 800d670:	695b      	ldr	r3, [r3, #20]
 800d672:	4313      	orrs	r3, r2
 800d674:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	68fa      	ldr	r2, [r7, #12]
 800d67a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d67c:	683b      	ldr	r3, [r7, #0]
 800d67e:	689a      	ldr	r2, [r3, #8]
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d684:	683b      	ldr	r3, [r7, #0]
 800d686:	681a      	ldr	r2, [r3, #0]
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	4a0a      	ldr	r2, [pc, #40]	; (800d6b8 <TIM_Base_SetConfig+0x114>)
 800d690:	4293      	cmp	r3, r2
 800d692:	d003      	beq.n	800d69c <TIM_Base_SetConfig+0xf8>
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	4a0c      	ldr	r2, [pc, #48]	; (800d6c8 <TIM_Base_SetConfig+0x124>)
 800d698:	4293      	cmp	r3, r2
 800d69a:	d103      	bne.n	800d6a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d69c:	683b      	ldr	r3, [r7, #0]
 800d69e:	691a      	ldr	r2, [r3, #16]
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	2201      	movs	r2, #1
 800d6a8:	615a      	str	r2, [r3, #20]
}
 800d6aa:	bf00      	nop
 800d6ac:	3714      	adds	r7, #20
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b4:	4770      	bx	lr
 800d6b6:	bf00      	nop
 800d6b8:	40010000 	.word	0x40010000
 800d6bc:	40000400 	.word	0x40000400
 800d6c0:	40000800 	.word	0x40000800
 800d6c4:	40000c00 	.word	0x40000c00
 800d6c8:	40010400 	.word	0x40010400
 800d6cc:	40014000 	.word	0x40014000
 800d6d0:	40014400 	.word	0x40014400
 800d6d4:	40014800 	.word	0x40014800
 800d6d8:	40001800 	.word	0x40001800
 800d6dc:	40001c00 	.word	0x40001c00
 800d6e0:	40002000 	.word	0x40002000

0800d6e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d6e4:	b480      	push	{r7}
 800d6e6:	b083      	sub	sp, #12
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d6ec:	bf00      	nop
 800d6ee:	370c      	adds	r7, #12
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f6:	4770      	bx	lr

0800d6f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d6f8:	b480      	push	{r7}
 800d6fa:	b083      	sub	sp, #12
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d700:	bf00      	nop
 800d702:	370c      	adds	r7, #12
 800d704:	46bd      	mov	sp, r7
 800d706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70a:	4770      	bx	lr

0800d70c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d70c:	b480      	push	{r7}
 800d70e:	b083      	sub	sp, #12
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d714:	bf00      	nop
 800d716:	370c      	adds	r7, #12
 800d718:	46bd      	mov	sp, r7
 800d71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d71e:	4770      	bx	lr

0800d720 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d720:	b580      	push	{r7, lr}
 800d722:	b082      	sub	sp, #8
 800d724:	af00      	add	r7, sp, #0
 800d726:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d101      	bne.n	800d732 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d72e:	2301      	movs	r3, #1
 800d730:	e040      	b.n	800d7b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d736:	2b00      	cmp	r3, #0
 800d738:	d106      	bne.n	800d748 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	2200      	movs	r2, #0
 800d73e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d742:	6878      	ldr	r0, [r7, #4]
 800d744:	f7f7 fdd8 	bl	80052f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	2224      	movs	r2, #36	; 0x24
 800d74c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	681a      	ldr	r2, [r3, #0]
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	f022 0201 	bic.w	r2, r2, #1
 800d75c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d75e:	6878      	ldr	r0, [r7, #4]
 800d760:	f000 f82c 	bl	800d7bc <UART_SetConfig>
 800d764:	4603      	mov	r3, r0
 800d766:	2b01      	cmp	r3, #1
 800d768:	d101      	bne.n	800d76e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800d76a:	2301      	movs	r3, #1
 800d76c:	e022      	b.n	800d7b4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d772:	2b00      	cmp	r3, #0
 800d774:	d002      	beq.n	800d77c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800d776:	6878      	ldr	r0, [r7, #4]
 800d778:	f000 fa84 	bl	800dc84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	685a      	ldr	r2, [r3, #4]
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d78a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	689a      	ldr	r2, [r3, #8]
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d79a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	681a      	ldr	r2, [r3, #0]
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	f042 0201 	orr.w	r2, r2, #1
 800d7aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d7ac:	6878      	ldr	r0, [r7, #4]
 800d7ae:	f000 fb0b 	bl	800ddc8 <UART_CheckIdleState>
 800d7b2:	4603      	mov	r3, r0
}
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	3708      	adds	r7, #8
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	bd80      	pop	{r7, pc}

0800d7bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	b088      	sub	sp, #32
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	689a      	ldr	r2, [r3, #8]
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	691b      	ldr	r3, [r3, #16]
 800d7d0:	431a      	orrs	r2, r3
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	695b      	ldr	r3, [r3, #20]
 800d7d6:	431a      	orrs	r2, r3
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	69db      	ldr	r3, [r3, #28]
 800d7dc:	4313      	orrs	r3, r2
 800d7de:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	681a      	ldr	r2, [r3, #0]
 800d7e6:	4ba6      	ldr	r3, [pc, #664]	; (800da80 <UART_SetConfig+0x2c4>)
 800d7e8:	4013      	ands	r3, r2
 800d7ea:	687a      	ldr	r2, [r7, #4]
 800d7ec:	6812      	ldr	r2, [r2, #0]
 800d7ee:	6979      	ldr	r1, [r7, #20]
 800d7f0:	430b      	orrs	r3, r1
 800d7f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	685b      	ldr	r3, [r3, #4]
 800d7fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	68da      	ldr	r2, [r3, #12]
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	430a      	orrs	r2, r1
 800d808:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	699b      	ldr	r3, [r3, #24]
 800d80e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	6a1b      	ldr	r3, [r3, #32]
 800d814:	697a      	ldr	r2, [r7, #20]
 800d816:	4313      	orrs	r3, r2
 800d818:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	689b      	ldr	r3, [r3, #8]
 800d820:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	697a      	ldr	r2, [r7, #20]
 800d82a:	430a      	orrs	r2, r1
 800d82c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	4a94      	ldr	r2, [pc, #592]	; (800da84 <UART_SetConfig+0x2c8>)
 800d834:	4293      	cmp	r3, r2
 800d836:	d120      	bne.n	800d87a <UART_SetConfig+0xbe>
 800d838:	4b93      	ldr	r3, [pc, #588]	; (800da88 <UART_SetConfig+0x2cc>)
 800d83a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d83e:	f003 0303 	and.w	r3, r3, #3
 800d842:	2b03      	cmp	r3, #3
 800d844:	d816      	bhi.n	800d874 <UART_SetConfig+0xb8>
 800d846:	a201      	add	r2, pc, #4	; (adr r2, 800d84c <UART_SetConfig+0x90>)
 800d848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d84c:	0800d85d 	.word	0x0800d85d
 800d850:	0800d869 	.word	0x0800d869
 800d854:	0800d863 	.word	0x0800d863
 800d858:	0800d86f 	.word	0x0800d86f
 800d85c:	2301      	movs	r3, #1
 800d85e:	77fb      	strb	r3, [r7, #31]
 800d860:	e150      	b.n	800db04 <UART_SetConfig+0x348>
 800d862:	2302      	movs	r3, #2
 800d864:	77fb      	strb	r3, [r7, #31]
 800d866:	e14d      	b.n	800db04 <UART_SetConfig+0x348>
 800d868:	2304      	movs	r3, #4
 800d86a:	77fb      	strb	r3, [r7, #31]
 800d86c:	e14a      	b.n	800db04 <UART_SetConfig+0x348>
 800d86e:	2308      	movs	r3, #8
 800d870:	77fb      	strb	r3, [r7, #31]
 800d872:	e147      	b.n	800db04 <UART_SetConfig+0x348>
 800d874:	2310      	movs	r3, #16
 800d876:	77fb      	strb	r3, [r7, #31]
 800d878:	e144      	b.n	800db04 <UART_SetConfig+0x348>
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	4a83      	ldr	r2, [pc, #524]	; (800da8c <UART_SetConfig+0x2d0>)
 800d880:	4293      	cmp	r3, r2
 800d882:	d132      	bne.n	800d8ea <UART_SetConfig+0x12e>
 800d884:	4b80      	ldr	r3, [pc, #512]	; (800da88 <UART_SetConfig+0x2cc>)
 800d886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d88a:	f003 030c 	and.w	r3, r3, #12
 800d88e:	2b0c      	cmp	r3, #12
 800d890:	d828      	bhi.n	800d8e4 <UART_SetConfig+0x128>
 800d892:	a201      	add	r2, pc, #4	; (adr r2, 800d898 <UART_SetConfig+0xdc>)
 800d894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d898:	0800d8cd 	.word	0x0800d8cd
 800d89c:	0800d8e5 	.word	0x0800d8e5
 800d8a0:	0800d8e5 	.word	0x0800d8e5
 800d8a4:	0800d8e5 	.word	0x0800d8e5
 800d8a8:	0800d8d9 	.word	0x0800d8d9
 800d8ac:	0800d8e5 	.word	0x0800d8e5
 800d8b0:	0800d8e5 	.word	0x0800d8e5
 800d8b4:	0800d8e5 	.word	0x0800d8e5
 800d8b8:	0800d8d3 	.word	0x0800d8d3
 800d8bc:	0800d8e5 	.word	0x0800d8e5
 800d8c0:	0800d8e5 	.word	0x0800d8e5
 800d8c4:	0800d8e5 	.word	0x0800d8e5
 800d8c8:	0800d8df 	.word	0x0800d8df
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	77fb      	strb	r3, [r7, #31]
 800d8d0:	e118      	b.n	800db04 <UART_SetConfig+0x348>
 800d8d2:	2302      	movs	r3, #2
 800d8d4:	77fb      	strb	r3, [r7, #31]
 800d8d6:	e115      	b.n	800db04 <UART_SetConfig+0x348>
 800d8d8:	2304      	movs	r3, #4
 800d8da:	77fb      	strb	r3, [r7, #31]
 800d8dc:	e112      	b.n	800db04 <UART_SetConfig+0x348>
 800d8de:	2308      	movs	r3, #8
 800d8e0:	77fb      	strb	r3, [r7, #31]
 800d8e2:	e10f      	b.n	800db04 <UART_SetConfig+0x348>
 800d8e4:	2310      	movs	r3, #16
 800d8e6:	77fb      	strb	r3, [r7, #31]
 800d8e8:	e10c      	b.n	800db04 <UART_SetConfig+0x348>
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	4a68      	ldr	r2, [pc, #416]	; (800da90 <UART_SetConfig+0x2d4>)
 800d8f0:	4293      	cmp	r3, r2
 800d8f2:	d120      	bne.n	800d936 <UART_SetConfig+0x17a>
 800d8f4:	4b64      	ldr	r3, [pc, #400]	; (800da88 <UART_SetConfig+0x2cc>)
 800d8f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d8fa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800d8fe:	2b30      	cmp	r3, #48	; 0x30
 800d900:	d013      	beq.n	800d92a <UART_SetConfig+0x16e>
 800d902:	2b30      	cmp	r3, #48	; 0x30
 800d904:	d814      	bhi.n	800d930 <UART_SetConfig+0x174>
 800d906:	2b20      	cmp	r3, #32
 800d908:	d009      	beq.n	800d91e <UART_SetConfig+0x162>
 800d90a:	2b20      	cmp	r3, #32
 800d90c:	d810      	bhi.n	800d930 <UART_SetConfig+0x174>
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d002      	beq.n	800d918 <UART_SetConfig+0x15c>
 800d912:	2b10      	cmp	r3, #16
 800d914:	d006      	beq.n	800d924 <UART_SetConfig+0x168>
 800d916:	e00b      	b.n	800d930 <UART_SetConfig+0x174>
 800d918:	2300      	movs	r3, #0
 800d91a:	77fb      	strb	r3, [r7, #31]
 800d91c:	e0f2      	b.n	800db04 <UART_SetConfig+0x348>
 800d91e:	2302      	movs	r3, #2
 800d920:	77fb      	strb	r3, [r7, #31]
 800d922:	e0ef      	b.n	800db04 <UART_SetConfig+0x348>
 800d924:	2304      	movs	r3, #4
 800d926:	77fb      	strb	r3, [r7, #31]
 800d928:	e0ec      	b.n	800db04 <UART_SetConfig+0x348>
 800d92a:	2308      	movs	r3, #8
 800d92c:	77fb      	strb	r3, [r7, #31]
 800d92e:	e0e9      	b.n	800db04 <UART_SetConfig+0x348>
 800d930:	2310      	movs	r3, #16
 800d932:	77fb      	strb	r3, [r7, #31]
 800d934:	e0e6      	b.n	800db04 <UART_SetConfig+0x348>
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	4a56      	ldr	r2, [pc, #344]	; (800da94 <UART_SetConfig+0x2d8>)
 800d93c:	4293      	cmp	r3, r2
 800d93e:	d120      	bne.n	800d982 <UART_SetConfig+0x1c6>
 800d940:	4b51      	ldr	r3, [pc, #324]	; (800da88 <UART_SetConfig+0x2cc>)
 800d942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d946:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800d94a:	2bc0      	cmp	r3, #192	; 0xc0
 800d94c:	d013      	beq.n	800d976 <UART_SetConfig+0x1ba>
 800d94e:	2bc0      	cmp	r3, #192	; 0xc0
 800d950:	d814      	bhi.n	800d97c <UART_SetConfig+0x1c0>
 800d952:	2b80      	cmp	r3, #128	; 0x80
 800d954:	d009      	beq.n	800d96a <UART_SetConfig+0x1ae>
 800d956:	2b80      	cmp	r3, #128	; 0x80
 800d958:	d810      	bhi.n	800d97c <UART_SetConfig+0x1c0>
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d002      	beq.n	800d964 <UART_SetConfig+0x1a8>
 800d95e:	2b40      	cmp	r3, #64	; 0x40
 800d960:	d006      	beq.n	800d970 <UART_SetConfig+0x1b4>
 800d962:	e00b      	b.n	800d97c <UART_SetConfig+0x1c0>
 800d964:	2300      	movs	r3, #0
 800d966:	77fb      	strb	r3, [r7, #31]
 800d968:	e0cc      	b.n	800db04 <UART_SetConfig+0x348>
 800d96a:	2302      	movs	r3, #2
 800d96c:	77fb      	strb	r3, [r7, #31]
 800d96e:	e0c9      	b.n	800db04 <UART_SetConfig+0x348>
 800d970:	2304      	movs	r3, #4
 800d972:	77fb      	strb	r3, [r7, #31]
 800d974:	e0c6      	b.n	800db04 <UART_SetConfig+0x348>
 800d976:	2308      	movs	r3, #8
 800d978:	77fb      	strb	r3, [r7, #31]
 800d97a:	e0c3      	b.n	800db04 <UART_SetConfig+0x348>
 800d97c:	2310      	movs	r3, #16
 800d97e:	77fb      	strb	r3, [r7, #31]
 800d980:	e0c0      	b.n	800db04 <UART_SetConfig+0x348>
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	4a44      	ldr	r2, [pc, #272]	; (800da98 <UART_SetConfig+0x2dc>)
 800d988:	4293      	cmp	r3, r2
 800d98a:	d125      	bne.n	800d9d8 <UART_SetConfig+0x21c>
 800d98c:	4b3e      	ldr	r3, [pc, #248]	; (800da88 <UART_SetConfig+0x2cc>)
 800d98e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d992:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d996:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d99a:	d017      	beq.n	800d9cc <UART_SetConfig+0x210>
 800d99c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d9a0:	d817      	bhi.n	800d9d2 <UART_SetConfig+0x216>
 800d9a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d9a6:	d00b      	beq.n	800d9c0 <UART_SetConfig+0x204>
 800d9a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d9ac:	d811      	bhi.n	800d9d2 <UART_SetConfig+0x216>
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d003      	beq.n	800d9ba <UART_SetConfig+0x1fe>
 800d9b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d9b6:	d006      	beq.n	800d9c6 <UART_SetConfig+0x20a>
 800d9b8:	e00b      	b.n	800d9d2 <UART_SetConfig+0x216>
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	77fb      	strb	r3, [r7, #31]
 800d9be:	e0a1      	b.n	800db04 <UART_SetConfig+0x348>
 800d9c0:	2302      	movs	r3, #2
 800d9c2:	77fb      	strb	r3, [r7, #31]
 800d9c4:	e09e      	b.n	800db04 <UART_SetConfig+0x348>
 800d9c6:	2304      	movs	r3, #4
 800d9c8:	77fb      	strb	r3, [r7, #31]
 800d9ca:	e09b      	b.n	800db04 <UART_SetConfig+0x348>
 800d9cc:	2308      	movs	r3, #8
 800d9ce:	77fb      	strb	r3, [r7, #31]
 800d9d0:	e098      	b.n	800db04 <UART_SetConfig+0x348>
 800d9d2:	2310      	movs	r3, #16
 800d9d4:	77fb      	strb	r3, [r7, #31]
 800d9d6:	e095      	b.n	800db04 <UART_SetConfig+0x348>
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	4a2f      	ldr	r2, [pc, #188]	; (800da9c <UART_SetConfig+0x2e0>)
 800d9de:	4293      	cmp	r3, r2
 800d9e0:	d125      	bne.n	800da2e <UART_SetConfig+0x272>
 800d9e2:	4b29      	ldr	r3, [pc, #164]	; (800da88 <UART_SetConfig+0x2cc>)
 800d9e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d9e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800d9ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d9f0:	d017      	beq.n	800da22 <UART_SetConfig+0x266>
 800d9f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d9f6:	d817      	bhi.n	800da28 <UART_SetConfig+0x26c>
 800d9f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d9fc:	d00b      	beq.n	800da16 <UART_SetConfig+0x25a>
 800d9fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800da02:	d811      	bhi.n	800da28 <UART_SetConfig+0x26c>
 800da04:	2b00      	cmp	r3, #0
 800da06:	d003      	beq.n	800da10 <UART_SetConfig+0x254>
 800da08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800da0c:	d006      	beq.n	800da1c <UART_SetConfig+0x260>
 800da0e:	e00b      	b.n	800da28 <UART_SetConfig+0x26c>
 800da10:	2301      	movs	r3, #1
 800da12:	77fb      	strb	r3, [r7, #31]
 800da14:	e076      	b.n	800db04 <UART_SetConfig+0x348>
 800da16:	2302      	movs	r3, #2
 800da18:	77fb      	strb	r3, [r7, #31]
 800da1a:	e073      	b.n	800db04 <UART_SetConfig+0x348>
 800da1c:	2304      	movs	r3, #4
 800da1e:	77fb      	strb	r3, [r7, #31]
 800da20:	e070      	b.n	800db04 <UART_SetConfig+0x348>
 800da22:	2308      	movs	r3, #8
 800da24:	77fb      	strb	r3, [r7, #31]
 800da26:	e06d      	b.n	800db04 <UART_SetConfig+0x348>
 800da28:	2310      	movs	r3, #16
 800da2a:	77fb      	strb	r3, [r7, #31]
 800da2c:	e06a      	b.n	800db04 <UART_SetConfig+0x348>
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	4a1b      	ldr	r2, [pc, #108]	; (800daa0 <UART_SetConfig+0x2e4>)
 800da34:	4293      	cmp	r3, r2
 800da36:	d138      	bne.n	800daaa <UART_SetConfig+0x2ee>
 800da38:	4b13      	ldr	r3, [pc, #76]	; (800da88 <UART_SetConfig+0x2cc>)
 800da3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da3e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800da42:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800da46:	d017      	beq.n	800da78 <UART_SetConfig+0x2bc>
 800da48:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800da4c:	d82a      	bhi.n	800daa4 <UART_SetConfig+0x2e8>
 800da4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800da52:	d00b      	beq.n	800da6c <UART_SetConfig+0x2b0>
 800da54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800da58:	d824      	bhi.n	800daa4 <UART_SetConfig+0x2e8>
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d003      	beq.n	800da66 <UART_SetConfig+0x2aa>
 800da5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800da62:	d006      	beq.n	800da72 <UART_SetConfig+0x2b6>
 800da64:	e01e      	b.n	800daa4 <UART_SetConfig+0x2e8>
 800da66:	2300      	movs	r3, #0
 800da68:	77fb      	strb	r3, [r7, #31]
 800da6a:	e04b      	b.n	800db04 <UART_SetConfig+0x348>
 800da6c:	2302      	movs	r3, #2
 800da6e:	77fb      	strb	r3, [r7, #31]
 800da70:	e048      	b.n	800db04 <UART_SetConfig+0x348>
 800da72:	2304      	movs	r3, #4
 800da74:	77fb      	strb	r3, [r7, #31]
 800da76:	e045      	b.n	800db04 <UART_SetConfig+0x348>
 800da78:	2308      	movs	r3, #8
 800da7a:	77fb      	strb	r3, [r7, #31]
 800da7c:	e042      	b.n	800db04 <UART_SetConfig+0x348>
 800da7e:	bf00      	nop
 800da80:	efff69f3 	.word	0xefff69f3
 800da84:	40011000 	.word	0x40011000
 800da88:	40023800 	.word	0x40023800
 800da8c:	40004400 	.word	0x40004400
 800da90:	40004800 	.word	0x40004800
 800da94:	40004c00 	.word	0x40004c00
 800da98:	40005000 	.word	0x40005000
 800da9c:	40011400 	.word	0x40011400
 800daa0:	40007800 	.word	0x40007800
 800daa4:	2310      	movs	r3, #16
 800daa6:	77fb      	strb	r3, [r7, #31]
 800daa8:	e02c      	b.n	800db04 <UART_SetConfig+0x348>
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	4a72      	ldr	r2, [pc, #456]	; (800dc78 <UART_SetConfig+0x4bc>)
 800dab0:	4293      	cmp	r3, r2
 800dab2:	d125      	bne.n	800db00 <UART_SetConfig+0x344>
 800dab4:	4b71      	ldr	r3, [pc, #452]	; (800dc7c <UART_SetConfig+0x4c0>)
 800dab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800daba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800dabe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800dac2:	d017      	beq.n	800daf4 <UART_SetConfig+0x338>
 800dac4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800dac8:	d817      	bhi.n	800dafa <UART_SetConfig+0x33e>
 800daca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dace:	d00b      	beq.n	800dae8 <UART_SetConfig+0x32c>
 800dad0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dad4:	d811      	bhi.n	800dafa <UART_SetConfig+0x33e>
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d003      	beq.n	800dae2 <UART_SetConfig+0x326>
 800dada:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dade:	d006      	beq.n	800daee <UART_SetConfig+0x332>
 800dae0:	e00b      	b.n	800dafa <UART_SetConfig+0x33e>
 800dae2:	2300      	movs	r3, #0
 800dae4:	77fb      	strb	r3, [r7, #31]
 800dae6:	e00d      	b.n	800db04 <UART_SetConfig+0x348>
 800dae8:	2302      	movs	r3, #2
 800daea:	77fb      	strb	r3, [r7, #31]
 800daec:	e00a      	b.n	800db04 <UART_SetConfig+0x348>
 800daee:	2304      	movs	r3, #4
 800daf0:	77fb      	strb	r3, [r7, #31]
 800daf2:	e007      	b.n	800db04 <UART_SetConfig+0x348>
 800daf4:	2308      	movs	r3, #8
 800daf6:	77fb      	strb	r3, [r7, #31]
 800daf8:	e004      	b.n	800db04 <UART_SetConfig+0x348>
 800dafa:	2310      	movs	r3, #16
 800dafc:	77fb      	strb	r3, [r7, #31]
 800dafe:	e001      	b.n	800db04 <UART_SetConfig+0x348>
 800db00:	2310      	movs	r3, #16
 800db02:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	69db      	ldr	r3, [r3, #28]
 800db08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800db0c:	d15b      	bne.n	800dbc6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800db0e:	7ffb      	ldrb	r3, [r7, #31]
 800db10:	2b08      	cmp	r3, #8
 800db12:	d828      	bhi.n	800db66 <UART_SetConfig+0x3aa>
 800db14:	a201      	add	r2, pc, #4	; (adr r2, 800db1c <UART_SetConfig+0x360>)
 800db16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db1a:	bf00      	nop
 800db1c:	0800db41 	.word	0x0800db41
 800db20:	0800db49 	.word	0x0800db49
 800db24:	0800db51 	.word	0x0800db51
 800db28:	0800db67 	.word	0x0800db67
 800db2c:	0800db57 	.word	0x0800db57
 800db30:	0800db67 	.word	0x0800db67
 800db34:	0800db67 	.word	0x0800db67
 800db38:	0800db67 	.word	0x0800db67
 800db3c:	0800db5f 	.word	0x0800db5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800db40:	f7fc ff18 	bl	800a974 <HAL_RCC_GetPCLK1Freq>
 800db44:	61b8      	str	r0, [r7, #24]
        break;
 800db46:	e013      	b.n	800db70 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800db48:	f7fc ff28 	bl	800a99c <HAL_RCC_GetPCLK2Freq>
 800db4c:	61b8      	str	r0, [r7, #24]
        break;
 800db4e:	e00f      	b.n	800db70 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800db50:	4b4b      	ldr	r3, [pc, #300]	; (800dc80 <UART_SetConfig+0x4c4>)
 800db52:	61bb      	str	r3, [r7, #24]
        break;
 800db54:	e00c      	b.n	800db70 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800db56:	f7fc fe3b 	bl	800a7d0 <HAL_RCC_GetSysClockFreq>
 800db5a:	61b8      	str	r0, [r7, #24]
        break;
 800db5c:	e008      	b.n	800db70 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800db5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800db62:	61bb      	str	r3, [r7, #24]
        break;
 800db64:	e004      	b.n	800db70 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800db66:	2300      	movs	r3, #0
 800db68:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800db6a:	2301      	movs	r3, #1
 800db6c:	77bb      	strb	r3, [r7, #30]
        break;
 800db6e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800db70:	69bb      	ldr	r3, [r7, #24]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d074      	beq.n	800dc60 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800db76:	69bb      	ldr	r3, [r7, #24]
 800db78:	005a      	lsls	r2, r3, #1
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	685b      	ldr	r3, [r3, #4]
 800db7e:	085b      	lsrs	r3, r3, #1
 800db80:	441a      	add	r2, r3
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	685b      	ldr	r3, [r3, #4]
 800db86:	fbb2 f3f3 	udiv	r3, r2, r3
 800db8a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800db8c:	693b      	ldr	r3, [r7, #16]
 800db8e:	2b0f      	cmp	r3, #15
 800db90:	d916      	bls.n	800dbc0 <UART_SetConfig+0x404>
 800db92:	693b      	ldr	r3, [r7, #16]
 800db94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800db98:	d212      	bcs.n	800dbc0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800db9a:	693b      	ldr	r3, [r7, #16]
 800db9c:	b29b      	uxth	r3, r3
 800db9e:	f023 030f 	bic.w	r3, r3, #15
 800dba2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800dba4:	693b      	ldr	r3, [r7, #16]
 800dba6:	085b      	lsrs	r3, r3, #1
 800dba8:	b29b      	uxth	r3, r3
 800dbaa:	f003 0307 	and.w	r3, r3, #7
 800dbae:	b29a      	uxth	r2, r3
 800dbb0:	89fb      	ldrh	r3, [r7, #14]
 800dbb2:	4313      	orrs	r3, r2
 800dbb4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	89fa      	ldrh	r2, [r7, #14]
 800dbbc:	60da      	str	r2, [r3, #12]
 800dbbe:	e04f      	b.n	800dc60 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800dbc0:	2301      	movs	r3, #1
 800dbc2:	77bb      	strb	r3, [r7, #30]
 800dbc4:	e04c      	b.n	800dc60 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800dbc6:	7ffb      	ldrb	r3, [r7, #31]
 800dbc8:	2b08      	cmp	r3, #8
 800dbca:	d828      	bhi.n	800dc1e <UART_SetConfig+0x462>
 800dbcc:	a201      	add	r2, pc, #4	; (adr r2, 800dbd4 <UART_SetConfig+0x418>)
 800dbce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbd2:	bf00      	nop
 800dbd4:	0800dbf9 	.word	0x0800dbf9
 800dbd8:	0800dc01 	.word	0x0800dc01
 800dbdc:	0800dc09 	.word	0x0800dc09
 800dbe0:	0800dc1f 	.word	0x0800dc1f
 800dbe4:	0800dc0f 	.word	0x0800dc0f
 800dbe8:	0800dc1f 	.word	0x0800dc1f
 800dbec:	0800dc1f 	.word	0x0800dc1f
 800dbf0:	0800dc1f 	.word	0x0800dc1f
 800dbf4:	0800dc17 	.word	0x0800dc17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dbf8:	f7fc febc 	bl	800a974 <HAL_RCC_GetPCLK1Freq>
 800dbfc:	61b8      	str	r0, [r7, #24]
        break;
 800dbfe:	e013      	b.n	800dc28 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dc00:	f7fc fecc 	bl	800a99c <HAL_RCC_GetPCLK2Freq>
 800dc04:	61b8      	str	r0, [r7, #24]
        break;
 800dc06:	e00f      	b.n	800dc28 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800dc08:	4b1d      	ldr	r3, [pc, #116]	; (800dc80 <UART_SetConfig+0x4c4>)
 800dc0a:	61bb      	str	r3, [r7, #24]
        break;
 800dc0c:	e00c      	b.n	800dc28 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800dc0e:	f7fc fddf 	bl	800a7d0 <HAL_RCC_GetSysClockFreq>
 800dc12:	61b8      	str	r0, [r7, #24]
        break;
 800dc14:	e008      	b.n	800dc28 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dc16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dc1a:	61bb      	str	r3, [r7, #24]
        break;
 800dc1c:	e004      	b.n	800dc28 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800dc1e:	2300      	movs	r3, #0
 800dc20:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800dc22:	2301      	movs	r3, #1
 800dc24:	77bb      	strb	r3, [r7, #30]
        break;
 800dc26:	bf00      	nop
    }

    if (pclk != 0U)
 800dc28:	69bb      	ldr	r3, [r7, #24]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d018      	beq.n	800dc60 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	685b      	ldr	r3, [r3, #4]
 800dc32:	085a      	lsrs	r2, r3, #1
 800dc34:	69bb      	ldr	r3, [r7, #24]
 800dc36:	441a      	add	r2, r3
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	685b      	ldr	r3, [r3, #4]
 800dc3c:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc40:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dc42:	693b      	ldr	r3, [r7, #16]
 800dc44:	2b0f      	cmp	r3, #15
 800dc46:	d909      	bls.n	800dc5c <UART_SetConfig+0x4a0>
 800dc48:	693b      	ldr	r3, [r7, #16]
 800dc4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dc4e:	d205      	bcs.n	800dc5c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800dc50:	693b      	ldr	r3, [r7, #16]
 800dc52:	b29a      	uxth	r2, r3
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	60da      	str	r2, [r3, #12]
 800dc5a:	e001      	b.n	800dc60 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800dc5c:	2301      	movs	r3, #1
 800dc5e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	2200      	movs	r2, #0
 800dc64:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	2200      	movs	r2, #0
 800dc6a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800dc6c:	7fbb      	ldrb	r3, [r7, #30]
}
 800dc6e:	4618      	mov	r0, r3
 800dc70:	3720      	adds	r7, #32
 800dc72:	46bd      	mov	sp, r7
 800dc74:	bd80      	pop	{r7, pc}
 800dc76:	bf00      	nop
 800dc78:	40007c00 	.word	0x40007c00
 800dc7c:	40023800 	.word	0x40023800
 800dc80:	00f42400 	.word	0x00f42400

0800dc84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800dc84:	b480      	push	{r7}
 800dc86:	b083      	sub	sp, #12
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc90:	f003 0301 	and.w	r3, r3, #1
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d00a      	beq.n	800dcae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	685b      	ldr	r3, [r3, #4]
 800dc9e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	430a      	orrs	r2, r1
 800dcac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcb2:	f003 0302 	and.w	r3, r3, #2
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d00a      	beq.n	800dcd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	685b      	ldr	r3, [r3, #4]
 800dcc0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	430a      	orrs	r2, r1
 800dcce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcd4:	f003 0304 	and.w	r3, r3, #4
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d00a      	beq.n	800dcf2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	685b      	ldr	r3, [r3, #4]
 800dce2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	430a      	orrs	r2, r1
 800dcf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcf6:	f003 0308 	and.w	r3, r3, #8
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d00a      	beq.n	800dd14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	685b      	ldr	r3, [r3, #4]
 800dd04:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	430a      	orrs	r2, r1
 800dd12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd18:	f003 0310 	and.w	r3, r3, #16
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d00a      	beq.n	800dd36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	689b      	ldr	r3, [r3, #8]
 800dd26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	430a      	orrs	r2, r1
 800dd34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd3a:	f003 0320 	and.w	r3, r3, #32
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d00a      	beq.n	800dd58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	689b      	ldr	r3, [r3, #8]
 800dd48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	430a      	orrs	r2, r1
 800dd56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d01a      	beq.n	800dd9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	685b      	ldr	r3, [r3, #4]
 800dd6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	430a      	orrs	r2, r1
 800dd78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dd82:	d10a      	bne.n	800dd9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	685b      	ldr	r3, [r3, #4]
 800dd8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	430a      	orrs	r2, r1
 800dd98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d00a      	beq.n	800ddbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	685b      	ldr	r3, [r3, #4]
 800ddac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	430a      	orrs	r2, r1
 800ddba:	605a      	str	r2, [r3, #4]
  }
}
 800ddbc:	bf00      	nop
 800ddbe:	370c      	adds	r7, #12
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc6:	4770      	bx	lr

0800ddc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	b086      	sub	sp, #24
 800ddcc:	af02      	add	r7, sp, #8
 800ddce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	2200      	movs	r2, #0
 800ddd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ddd8:	f7f9 fac8 	bl	800736c <HAL_GetTick>
 800dddc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	f003 0308 	and.w	r3, r3, #8
 800dde8:	2b08      	cmp	r3, #8
 800ddea:	d10e      	bne.n	800de0a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ddec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ddf0:	9300      	str	r3, [sp, #0]
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	2200      	movs	r2, #0
 800ddf6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ddfa:	6878      	ldr	r0, [r7, #4]
 800ddfc:	f000 f81b 	bl	800de36 <UART_WaitOnFlagUntilTimeout>
 800de00:	4603      	mov	r3, r0
 800de02:	2b00      	cmp	r3, #0
 800de04:	d001      	beq.n	800de0a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800de06:	2303      	movs	r3, #3
 800de08:	e011      	b.n	800de2e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	2220      	movs	r2, #32
 800de0e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	2220      	movs	r2, #32
 800de14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	2200      	movs	r2, #0
 800de1c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	2200      	movs	r2, #0
 800de22:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	2200      	movs	r2, #0
 800de28:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800de2c:	2300      	movs	r3, #0
}
 800de2e:	4618      	mov	r0, r3
 800de30:	3710      	adds	r7, #16
 800de32:	46bd      	mov	sp, r7
 800de34:	bd80      	pop	{r7, pc}

0800de36 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800de36:	b580      	push	{r7, lr}
 800de38:	b09c      	sub	sp, #112	; 0x70
 800de3a:	af00      	add	r7, sp, #0
 800de3c:	60f8      	str	r0, [r7, #12]
 800de3e:	60b9      	str	r1, [r7, #8]
 800de40:	603b      	str	r3, [r7, #0]
 800de42:	4613      	mov	r3, r2
 800de44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800de46:	e0a7      	b.n	800df98 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800de48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800de4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de4e:	f000 80a3 	beq.w	800df98 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800de52:	f7f9 fa8b 	bl	800736c <HAL_GetTick>
 800de56:	4602      	mov	r2, r0
 800de58:	683b      	ldr	r3, [r7, #0]
 800de5a:	1ad3      	subs	r3, r2, r3
 800de5c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800de5e:	429a      	cmp	r2, r3
 800de60:	d302      	bcc.n	800de68 <UART_WaitOnFlagUntilTimeout+0x32>
 800de62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800de64:	2b00      	cmp	r3, #0
 800de66:	d13f      	bne.n	800dee8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de70:	e853 3f00 	ldrex	r3, [r3]
 800de74:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800de76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de78:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800de7c:	667b      	str	r3, [r7, #100]	; 0x64
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	461a      	mov	r2, r3
 800de84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800de86:	65fb      	str	r3, [r7, #92]	; 0x5c
 800de88:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de8a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800de8c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800de8e:	e841 2300 	strex	r3, r2, [r1]
 800de92:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800de94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800de96:	2b00      	cmp	r3, #0
 800de98:	d1e6      	bne.n	800de68 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	3308      	adds	r3, #8
 800dea0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dea2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dea4:	e853 3f00 	ldrex	r3, [r3]
 800dea8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800deaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800deac:	f023 0301 	bic.w	r3, r3, #1
 800deb0:	663b      	str	r3, [r7, #96]	; 0x60
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	3308      	adds	r3, #8
 800deb8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800deba:	64ba      	str	r2, [r7, #72]	; 0x48
 800debc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800debe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dec0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dec2:	e841 2300 	strex	r3, r2, [r1]
 800dec6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800dec8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800deca:	2b00      	cmp	r3, #0
 800decc:	d1e5      	bne.n	800de9a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	2220      	movs	r2, #32
 800ded2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	2220      	movs	r2, #32
 800ded8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	2200      	movs	r2, #0
 800dee0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800dee4:	2303      	movs	r3, #3
 800dee6:	e068      	b.n	800dfba <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	f003 0304 	and.w	r3, r3, #4
 800def2:	2b00      	cmp	r3, #0
 800def4:	d050      	beq.n	800df98 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	69db      	ldr	r3, [r3, #28]
 800defc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800df00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800df04:	d148      	bne.n	800df98 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800df0e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df18:	e853 3f00 	ldrex	r3, [r3]
 800df1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800df1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df20:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800df24:	66fb      	str	r3, [r7, #108]	; 0x6c
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	461a      	mov	r2, r3
 800df2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800df2e:	637b      	str	r3, [r7, #52]	; 0x34
 800df30:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df32:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800df34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800df36:	e841 2300 	strex	r3, r2, [r1]
 800df3a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800df3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d1e6      	bne.n	800df10 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	3308      	adds	r3, #8
 800df48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df4a:	697b      	ldr	r3, [r7, #20]
 800df4c:	e853 3f00 	ldrex	r3, [r3]
 800df50:	613b      	str	r3, [r7, #16]
   return(result);
 800df52:	693b      	ldr	r3, [r7, #16]
 800df54:	f023 0301 	bic.w	r3, r3, #1
 800df58:	66bb      	str	r3, [r7, #104]	; 0x68
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	3308      	adds	r3, #8
 800df60:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800df62:	623a      	str	r2, [r7, #32]
 800df64:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df66:	69f9      	ldr	r1, [r7, #28]
 800df68:	6a3a      	ldr	r2, [r7, #32]
 800df6a:	e841 2300 	strex	r3, r2, [r1]
 800df6e:	61bb      	str	r3, [r7, #24]
   return(result);
 800df70:	69bb      	ldr	r3, [r7, #24]
 800df72:	2b00      	cmp	r3, #0
 800df74:	d1e5      	bne.n	800df42 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	2220      	movs	r2, #32
 800df7a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	2220      	movs	r2, #32
 800df80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	2220      	movs	r2, #32
 800df88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	2200      	movs	r2, #0
 800df90:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800df94:	2303      	movs	r3, #3
 800df96:	e010      	b.n	800dfba <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	69da      	ldr	r2, [r3, #28]
 800df9e:	68bb      	ldr	r3, [r7, #8]
 800dfa0:	4013      	ands	r3, r2
 800dfa2:	68ba      	ldr	r2, [r7, #8]
 800dfa4:	429a      	cmp	r2, r3
 800dfa6:	bf0c      	ite	eq
 800dfa8:	2301      	moveq	r3, #1
 800dfaa:	2300      	movne	r3, #0
 800dfac:	b2db      	uxtb	r3, r3
 800dfae:	461a      	mov	r2, r3
 800dfb0:	79fb      	ldrb	r3, [r7, #7]
 800dfb2:	429a      	cmp	r2, r3
 800dfb4:	f43f af48 	beq.w	800de48 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800dfb8:	2300      	movs	r3, #0
}
 800dfba:	4618      	mov	r0, r3
 800dfbc:	3770      	adds	r7, #112	; 0x70
 800dfbe:	46bd      	mov	sp, r7
 800dfc0:	bd80      	pop	{r7, pc}
	...

0800dfc4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800dfc4:	b480      	push	{r7}
 800dfc6:	b083      	sub	sp, #12
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	6078      	str	r0, [r7, #4]
 800dfcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800dfce:	683b      	ldr	r3, [r7, #0]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d121      	bne.n	800e01a <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	681a      	ldr	r2, [r3, #0]
 800dfda:	4b27      	ldr	r3, [pc, #156]	; (800e078 <FMC_SDRAM_Init+0xb4>)
 800dfdc:	4013      	ands	r3, r2
 800dfde:	683a      	ldr	r2, [r7, #0]
 800dfe0:	6851      	ldr	r1, [r2, #4]
 800dfe2:	683a      	ldr	r2, [r7, #0]
 800dfe4:	6892      	ldr	r2, [r2, #8]
 800dfe6:	4311      	orrs	r1, r2
 800dfe8:	683a      	ldr	r2, [r7, #0]
 800dfea:	68d2      	ldr	r2, [r2, #12]
 800dfec:	4311      	orrs	r1, r2
 800dfee:	683a      	ldr	r2, [r7, #0]
 800dff0:	6912      	ldr	r2, [r2, #16]
 800dff2:	4311      	orrs	r1, r2
 800dff4:	683a      	ldr	r2, [r7, #0]
 800dff6:	6952      	ldr	r2, [r2, #20]
 800dff8:	4311      	orrs	r1, r2
 800dffa:	683a      	ldr	r2, [r7, #0]
 800dffc:	6992      	ldr	r2, [r2, #24]
 800dffe:	4311      	orrs	r1, r2
 800e000:	683a      	ldr	r2, [r7, #0]
 800e002:	69d2      	ldr	r2, [r2, #28]
 800e004:	4311      	orrs	r1, r2
 800e006:	683a      	ldr	r2, [r7, #0]
 800e008:	6a12      	ldr	r2, [r2, #32]
 800e00a:	4311      	orrs	r1, r2
 800e00c:	683a      	ldr	r2, [r7, #0]
 800e00e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800e010:	430a      	orrs	r2, r1
 800e012:	431a      	orrs	r2, r3
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	601a      	str	r2, [r3, #0]
 800e018:	e026      	b.n	800e068 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800e022:	683b      	ldr	r3, [r7, #0]
 800e024:	69d9      	ldr	r1, [r3, #28]
 800e026:	683b      	ldr	r3, [r7, #0]
 800e028:	6a1b      	ldr	r3, [r3, #32]
 800e02a:	4319      	orrs	r1, r3
 800e02c:	683b      	ldr	r3, [r7, #0]
 800e02e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e030:	430b      	orrs	r3, r1
 800e032:	431a      	orrs	r2, r3
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	685a      	ldr	r2, [r3, #4]
 800e03c:	4b0e      	ldr	r3, [pc, #56]	; (800e078 <FMC_SDRAM_Init+0xb4>)
 800e03e:	4013      	ands	r3, r2
 800e040:	683a      	ldr	r2, [r7, #0]
 800e042:	6851      	ldr	r1, [r2, #4]
 800e044:	683a      	ldr	r2, [r7, #0]
 800e046:	6892      	ldr	r2, [r2, #8]
 800e048:	4311      	orrs	r1, r2
 800e04a:	683a      	ldr	r2, [r7, #0]
 800e04c:	68d2      	ldr	r2, [r2, #12]
 800e04e:	4311      	orrs	r1, r2
 800e050:	683a      	ldr	r2, [r7, #0]
 800e052:	6912      	ldr	r2, [r2, #16]
 800e054:	4311      	orrs	r1, r2
 800e056:	683a      	ldr	r2, [r7, #0]
 800e058:	6952      	ldr	r2, [r2, #20]
 800e05a:	4311      	orrs	r1, r2
 800e05c:	683a      	ldr	r2, [r7, #0]
 800e05e:	6992      	ldr	r2, [r2, #24]
 800e060:	430a      	orrs	r2, r1
 800e062:	431a      	orrs	r2, r3
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800e068:	2300      	movs	r3, #0
}
 800e06a:	4618      	mov	r0, r3
 800e06c:	370c      	adds	r7, #12
 800e06e:	46bd      	mov	sp, r7
 800e070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e074:	4770      	bx	lr
 800e076:	bf00      	nop
 800e078:	ffff8000 	.word	0xffff8000

0800e07c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800e07c:	b480      	push	{r7}
 800e07e:	b085      	sub	sp, #20
 800e080:	af00      	add	r7, sp, #0
 800e082:	60f8      	str	r0, [r7, #12]
 800e084:	60b9      	str	r1, [r7, #8]
 800e086:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d128      	bne.n	800e0e0 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	689b      	ldr	r3, [r3, #8]
 800e092:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800e096:	68bb      	ldr	r3, [r7, #8]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	1e59      	subs	r1, r3, #1
 800e09c:	68bb      	ldr	r3, [r7, #8]
 800e09e:	685b      	ldr	r3, [r3, #4]
 800e0a0:	3b01      	subs	r3, #1
 800e0a2:	011b      	lsls	r3, r3, #4
 800e0a4:	4319      	orrs	r1, r3
 800e0a6:	68bb      	ldr	r3, [r7, #8]
 800e0a8:	689b      	ldr	r3, [r3, #8]
 800e0aa:	3b01      	subs	r3, #1
 800e0ac:	021b      	lsls	r3, r3, #8
 800e0ae:	4319      	orrs	r1, r3
 800e0b0:	68bb      	ldr	r3, [r7, #8]
 800e0b2:	68db      	ldr	r3, [r3, #12]
 800e0b4:	3b01      	subs	r3, #1
 800e0b6:	031b      	lsls	r3, r3, #12
 800e0b8:	4319      	orrs	r1, r3
 800e0ba:	68bb      	ldr	r3, [r7, #8]
 800e0bc:	691b      	ldr	r3, [r3, #16]
 800e0be:	3b01      	subs	r3, #1
 800e0c0:	041b      	lsls	r3, r3, #16
 800e0c2:	4319      	orrs	r1, r3
 800e0c4:	68bb      	ldr	r3, [r7, #8]
 800e0c6:	695b      	ldr	r3, [r3, #20]
 800e0c8:	3b01      	subs	r3, #1
 800e0ca:	051b      	lsls	r3, r3, #20
 800e0cc:	4319      	orrs	r1, r3
 800e0ce:	68bb      	ldr	r3, [r7, #8]
 800e0d0:	699b      	ldr	r3, [r3, #24]
 800e0d2:	3b01      	subs	r3, #1
 800e0d4:	061b      	lsls	r3, r3, #24
 800e0d6:	430b      	orrs	r3, r1
 800e0d8:	431a      	orrs	r2, r3
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	609a      	str	r2, [r3, #8]
 800e0de:	e02d      	b.n	800e13c <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	689a      	ldr	r2, [r3, #8]
 800e0e4:	4b19      	ldr	r3, [pc, #100]	; (800e14c <FMC_SDRAM_Timing_Init+0xd0>)
 800e0e6:	4013      	ands	r3, r2
 800e0e8:	68ba      	ldr	r2, [r7, #8]
 800e0ea:	68d2      	ldr	r2, [r2, #12]
 800e0ec:	3a01      	subs	r2, #1
 800e0ee:	0311      	lsls	r1, r2, #12
 800e0f0:	68ba      	ldr	r2, [r7, #8]
 800e0f2:	6952      	ldr	r2, [r2, #20]
 800e0f4:	3a01      	subs	r2, #1
 800e0f6:	0512      	lsls	r2, r2, #20
 800e0f8:	430a      	orrs	r2, r1
 800e0fa:	431a      	orrs	r2, r3
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	68db      	ldr	r3, [r3, #12]
 800e104:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800e108:	68bb      	ldr	r3, [r7, #8]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	1e59      	subs	r1, r3, #1
 800e10e:	68bb      	ldr	r3, [r7, #8]
 800e110:	685b      	ldr	r3, [r3, #4]
 800e112:	3b01      	subs	r3, #1
 800e114:	011b      	lsls	r3, r3, #4
 800e116:	4319      	orrs	r1, r3
 800e118:	68bb      	ldr	r3, [r7, #8]
 800e11a:	689b      	ldr	r3, [r3, #8]
 800e11c:	3b01      	subs	r3, #1
 800e11e:	021b      	lsls	r3, r3, #8
 800e120:	4319      	orrs	r1, r3
 800e122:	68bb      	ldr	r3, [r7, #8]
 800e124:	691b      	ldr	r3, [r3, #16]
 800e126:	3b01      	subs	r3, #1
 800e128:	041b      	lsls	r3, r3, #16
 800e12a:	4319      	orrs	r1, r3
 800e12c:	68bb      	ldr	r3, [r7, #8]
 800e12e:	699b      	ldr	r3, [r3, #24]
 800e130:	3b01      	subs	r3, #1
 800e132:	061b      	lsls	r3, r3, #24
 800e134:	430b      	orrs	r3, r1
 800e136:	431a      	orrs	r2, r3
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800e13c:	2300      	movs	r3, #0
}
 800e13e:	4618      	mov	r0, r3
 800e140:	3714      	adds	r7, #20
 800e142:	46bd      	mov	sp, r7
 800e144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e148:	4770      	bx	lr
 800e14a:	bf00      	nop
 800e14c:	ff0f0fff 	.word	0xff0f0fff

0800e150 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800e150:	b480      	push	{r7}
 800e152:	b085      	sub	sp, #20
 800e154:	af00      	add	r7, sp, #0
 800e156:	60f8      	str	r0, [r7, #12]
 800e158:	60b9      	str	r1, [r7, #8]
 800e15a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	691a      	ldr	r2, [r3, #16]
 800e160:	4b0c      	ldr	r3, [pc, #48]	; (800e194 <FMC_SDRAM_SendCommand+0x44>)
 800e162:	4013      	ands	r3, r2
 800e164:	68ba      	ldr	r2, [r7, #8]
 800e166:	6811      	ldr	r1, [r2, #0]
 800e168:	68ba      	ldr	r2, [r7, #8]
 800e16a:	6852      	ldr	r2, [r2, #4]
 800e16c:	4311      	orrs	r1, r2
 800e16e:	68ba      	ldr	r2, [r7, #8]
 800e170:	6892      	ldr	r2, [r2, #8]
 800e172:	3a01      	subs	r2, #1
 800e174:	0152      	lsls	r2, r2, #5
 800e176:	4311      	orrs	r1, r2
 800e178:	68ba      	ldr	r2, [r7, #8]
 800e17a:	68d2      	ldr	r2, [r2, #12]
 800e17c:	0252      	lsls	r2, r2, #9
 800e17e:	430a      	orrs	r2, r1
 800e180:	431a      	orrs	r2, r3
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800e186:	2300      	movs	r3, #0
}
 800e188:	4618      	mov	r0, r3
 800e18a:	3714      	adds	r7, #20
 800e18c:	46bd      	mov	sp, r7
 800e18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e192:	4770      	bx	lr
 800e194:	ffc00000 	.word	0xffc00000

0800e198 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800e198:	b480      	push	{r7}
 800e19a:	b083      	sub	sp, #12
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	6078      	str	r0, [r7, #4]
 800e1a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	695a      	ldr	r2, [r3, #20]
 800e1a6:	4b07      	ldr	r3, [pc, #28]	; (800e1c4 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800e1a8:	4013      	ands	r3, r2
 800e1aa:	683a      	ldr	r2, [r7, #0]
 800e1ac:	0052      	lsls	r2, r2, #1
 800e1ae:	431a      	orrs	r2, r3
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800e1b4:	2300      	movs	r3, #0
}
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	370c      	adds	r7, #12
 800e1ba:	46bd      	mov	sp, r7
 800e1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c0:	4770      	bx	lr
 800e1c2:	bf00      	nop
 800e1c4:	ffffc001 	.word	0xffffc001

0800e1c8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800e1c8:	b084      	sub	sp, #16
 800e1ca:	b480      	push	{r7}
 800e1cc:	b085      	sub	sp, #20
 800e1ce:	af00      	add	r7, sp, #0
 800e1d0:	6078      	str	r0, [r7, #4]
 800e1d2:	f107 001c 	add.w	r0, r7, #28
 800e1d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800e1da:	2300      	movs	r3, #0
 800e1dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800e1de:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800e1e0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800e1e2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800e1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800e1e6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800e1e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800e1ea:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800e1ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800e1ee:	431a      	orrs	r2, r3
             Init.ClockDiv
 800e1f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800e1f2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800e1f4:	68fa      	ldr	r2, [r7, #12]
 800e1f6:	4313      	orrs	r3, r2
 800e1f8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	685a      	ldr	r2, [r3, #4]
 800e1fe:	4b07      	ldr	r3, [pc, #28]	; (800e21c <SDMMC_Init+0x54>)
 800e200:	4013      	ands	r3, r2
 800e202:	68fa      	ldr	r2, [r7, #12]
 800e204:	431a      	orrs	r2, r3
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800e20a:	2300      	movs	r3, #0
}
 800e20c:	4618      	mov	r0, r3
 800e20e:	3714      	adds	r7, #20
 800e210:	46bd      	mov	sp, r7
 800e212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e216:	b004      	add	sp, #16
 800e218:	4770      	bx	lr
 800e21a:	bf00      	nop
 800e21c:	ffff8100 	.word	0xffff8100

0800e220 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800e220:	b480      	push	{r7}
 800e222:	b083      	sub	sp, #12
 800e224:	af00      	add	r7, sp, #0
 800e226:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800e22e:	4618      	mov	r0, r3
 800e230:	370c      	adds	r7, #12
 800e232:	46bd      	mov	sp, r7
 800e234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e238:	4770      	bx	lr

0800e23a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800e23a:	b480      	push	{r7}
 800e23c:	b083      	sub	sp, #12
 800e23e:	af00      	add	r7, sp, #0
 800e240:	6078      	str	r0, [r7, #4]
 800e242:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800e244:	683b      	ldr	r3, [r7, #0]
 800e246:	681a      	ldr	r2, [r3, #0]
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e24e:	2300      	movs	r3, #0
}
 800e250:	4618      	mov	r0, r3
 800e252:	370c      	adds	r7, #12
 800e254:	46bd      	mov	sp, r7
 800e256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e25a:	4770      	bx	lr

0800e25c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800e25c:	b480      	push	{r7}
 800e25e:	b083      	sub	sp, #12
 800e260:	af00      	add	r7, sp, #0
 800e262:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	2203      	movs	r2, #3
 800e268:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800e26a:	2300      	movs	r3, #0
}
 800e26c:	4618      	mov	r0, r3
 800e26e:	370c      	adds	r7, #12
 800e270:	46bd      	mov	sp, r7
 800e272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e276:	4770      	bx	lr

0800e278 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800e278:	b480      	push	{r7}
 800e27a:	b083      	sub	sp, #12
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	f003 0303 	and.w	r3, r3, #3
}
 800e288:	4618      	mov	r0, r3
 800e28a:	370c      	adds	r7, #12
 800e28c:	46bd      	mov	sp, r7
 800e28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e292:	4770      	bx	lr

0800e294 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800e294:	b480      	push	{r7}
 800e296:	b085      	sub	sp, #20
 800e298:	af00      	add	r7, sp, #0
 800e29a:	6078      	str	r0, [r7, #4]
 800e29c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e29e:	2300      	movs	r3, #0
 800e2a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800e2a2:	683b      	ldr	r3, [r7, #0]
 800e2a4:	681a      	ldr	r2, [r3, #0]
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e2aa:	683b      	ldr	r3, [r7, #0]
 800e2ac:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800e2ae:	683b      	ldr	r3, [r7, #0]
 800e2b0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e2b2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800e2b4:	683b      	ldr	r3, [r7, #0]
 800e2b6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800e2b8:	431a      	orrs	r2, r3
                       Command->CPSM);
 800e2ba:	683b      	ldr	r3, [r7, #0]
 800e2bc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800e2be:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e2c0:	68fa      	ldr	r2, [r7, #12]
 800e2c2:	4313      	orrs	r3, r2
 800e2c4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	68da      	ldr	r2, [r3, #12]
 800e2ca:	4b06      	ldr	r3, [pc, #24]	; (800e2e4 <SDMMC_SendCommand+0x50>)
 800e2cc:	4013      	ands	r3, r2
 800e2ce:	68fa      	ldr	r2, [r7, #12]
 800e2d0:	431a      	orrs	r2, r3
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800e2d6:	2300      	movs	r3, #0
}
 800e2d8:	4618      	mov	r0, r3
 800e2da:	3714      	adds	r7, #20
 800e2dc:	46bd      	mov	sp, r7
 800e2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e2:	4770      	bx	lr
 800e2e4:	fffff000 	.word	0xfffff000

0800e2e8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800e2e8:	b480      	push	{r7}
 800e2ea:	b083      	sub	sp, #12
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	691b      	ldr	r3, [r3, #16]
 800e2f4:	b2db      	uxtb	r3, r3
}
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	370c      	adds	r7, #12
 800e2fa:	46bd      	mov	sp, r7
 800e2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e300:	4770      	bx	lr

0800e302 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800e302:	b480      	push	{r7}
 800e304:	b085      	sub	sp, #20
 800e306:	af00      	add	r7, sp, #0
 800e308:	6078      	str	r0, [r7, #4]
 800e30a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	3314      	adds	r3, #20
 800e310:	461a      	mov	r2, r3
 800e312:	683b      	ldr	r3, [r7, #0]
 800e314:	4413      	add	r3, r2
 800e316:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	681b      	ldr	r3, [r3, #0]
}  
 800e31c:	4618      	mov	r0, r3
 800e31e:	3714      	adds	r7, #20
 800e320:	46bd      	mov	sp, r7
 800e322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e326:	4770      	bx	lr

0800e328 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800e328:	b480      	push	{r7}
 800e32a:	b085      	sub	sp, #20
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
 800e330:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e332:	2300      	movs	r3, #0
 800e334:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800e336:	683b      	ldr	r3, [r7, #0]
 800e338:	681a      	ldr	r2, [r3, #0]
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800e33e:	683b      	ldr	r3, [r7, #0]
 800e340:	685a      	ldr	r2, [r3, #4]
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e346:	683b      	ldr	r3, [r7, #0]
 800e348:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800e34a:	683b      	ldr	r3, [r7, #0]
 800e34c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e34e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800e350:	683b      	ldr	r3, [r7, #0]
 800e352:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800e354:	431a      	orrs	r2, r3
                       Data->DPSM);
 800e356:	683b      	ldr	r3, [r7, #0]
 800e358:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800e35a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e35c:	68fa      	ldr	r2, [r7, #12]
 800e35e:	4313      	orrs	r3, r2
 800e360:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e366:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	431a      	orrs	r2, r3
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800e372:	2300      	movs	r3, #0

}
 800e374:	4618      	mov	r0, r3
 800e376:	3714      	adds	r7, #20
 800e378:	46bd      	mov	sp, r7
 800e37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e37e:	4770      	bx	lr

0800e380 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800e380:	b580      	push	{r7, lr}
 800e382:	b088      	sub	sp, #32
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
 800e388:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800e38a:	683b      	ldr	r3, [r7, #0]
 800e38c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800e38e:	2310      	movs	r3, #16
 800e390:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e392:	2340      	movs	r3, #64	; 0x40
 800e394:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e396:	2300      	movs	r3, #0
 800e398:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e39a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e39e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e3a0:	f107 0308 	add.w	r3, r7, #8
 800e3a4:	4619      	mov	r1, r3
 800e3a6:	6878      	ldr	r0, [r7, #4]
 800e3a8:	f7ff ff74 	bl	800e294 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800e3ac:	f241 3288 	movw	r2, #5000	; 0x1388
 800e3b0:	2110      	movs	r1, #16
 800e3b2:	6878      	ldr	r0, [r7, #4]
 800e3b4:	f000 f9d6 	bl	800e764 <SDMMC_GetCmdResp1>
 800e3b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e3ba:	69fb      	ldr	r3, [r7, #28]
}
 800e3bc:	4618      	mov	r0, r3
 800e3be:	3720      	adds	r7, #32
 800e3c0:	46bd      	mov	sp, r7
 800e3c2:	bd80      	pop	{r7, pc}

0800e3c4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800e3c4:	b580      	push	{r7, lr}
 800e3c6:	b088      	sub	sp, #32
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	6078      	str	r0, [r7, #4]
 800e3cc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e3ce:	683b      	ldr	r3, [r7, #0]
 800e3d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800e3d2:	2311      	movs	r3, #17
 800e3d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e3d6:	2340      	movs	r3, #64	; 0x40
 800e3d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e3da:	2300      	movs	r3, #0
 800e3dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e3de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e3e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e3e4:	f107 0308 	add.w	r3, r7, #8
 800e3e8:	4619      	mov	r1, r3
 800e3ea:	6878      	ldr	r0, [r7, #4]
 800e3ec:	f7ff ff52 	bl	800e294 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800e3f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800e3f4:	2111      	movs	r1, #17
 800e3f6:	6878      	ldr	r0, [r7, #4]
 800e3f8:	f000 f9b4 	bl	800e764 <SDMMC_GetCmdResp1>
 800e3fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e3fe:	69fb      	ldr	r3, [r7, #28]
}
 800e400:	4618      	mov	r0, r3
 800e402:	3720      	adds	r7, #32
 800e404:	46bd      	mov	sp, r7
 800e406:	bd80      	pop	{r7, pc}

0800e408 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800e408:	b580      	push	{r7, lr}
 800e40a:	b088      	sub	sp, #32
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	6078      	str	r0, [r7, #4]
 800e410:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e412:	683b      	ldr	r3, [r7, #0]
 800e414:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800e416:	2312      	movs	r3, #18
 800e418:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e41a:	2340      	movs	r3, #64	; 0x40
 800e41c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e41e:	2300      	movs	r3, #0
 800e420:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e422:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e426:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e428:	f107 0308 	add.w	r3, r7, #8
 800e42c:	4619      	mov	r1, r3
 800e42e:	6878      	ldr	r0, [r7, #4]
 800e430:	f7ff ff30 	bl	800e294 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800e434:	f241 3288 	movw	r2, #5000	; 0x1388
 800e438:	2112      	movs	r1, #18
 800e43a:	6878      	ldr	r0, [r7, #4]
 800e43c:	f000 f992 	bl	800e764 <SDMMC_GetCmdResp1>
 800e440:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e442:	69fb      	ldr	r3, [r7, #28]
}
 800e444:	4618      	mov	r0, r3
 800e446:	3720      	adds	r7, #32
 800e448:	46bd      	mov	sp, r7
 800e44a:	bd80      	pop	{r7, pc}

0800e44c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800e44c:	b580      	push	{r7, lr}
 800e44e:	b088      	sub	sp, #32
 800e450:	af00      	add	r7, sp, #0
 800e452:	6078      	str	r0, [r7, #4]
 800e454:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e456:	683b      	ldr	r3, [r7, #0]
 800e458:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800e45a:	2318      	movs	r3, #24
 800e45c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e45e:	2340      	movs	r3, #64	; 0x40
 800e460:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e462:	2300      	movs	r3, #0
 800e464:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e466:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e46a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e46c:	f107 0308 	add.w	r3, r7, #8
 800e470:	4619      	mov	r1, r3
 800e472:	6878      	ldr	r0, [r7, #4]
 800e474:	f7ff ff0e 	bl	800e294 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800e478:	f241 3288 	movw	r2, #5000	; 0x1388
 800e47c:	2118      	movs	r1, #24
 800e47e:	6878      	ldr	r0, [r7, #4]
 800e480:	f000 f970 	bl	800e764 <SDMMC_GetCmdResp1>
 800e484:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e486:	69fb      	ldr	r3, [r7, #28]
}
 800e488:	4618      	mov	r0, r3
 800e48a:	3720      	adds	r7, #32
 800e48c:	46bd      	mov	sp, r7
 800e48e:	bd80      	pop	{r7, pc}

0800e490 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800e490:	b580      	push	{r7, lr}
 800e492:	b088      	sub	sp, #32
 800e494:	af00      	add	r7, sp, #0
 800e496:	6078      	str	r0, [r7, #4]
 800e498:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e49a:	683b      	ldr	r3, [r7, #0]
 800e49c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800e49e:	2319      	movs	r3, #25
 800e4a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e4a2:	2340      	movs	r3, #64	; 0x40
 800e4a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e4a6:	2300      	movs	r3, #0
 800e4a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e4aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e4ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e4b0:	f107 0308 	add.w	r3, r7, #8
 800e4b4:	4619      	mov	r1, r3
 800e4b6:	6878      	ldr	r0, [r7, #4]
 800e4b8:	f7ff feec 	bl	800e294 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800e4bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800e4c0:	2119      	movs	r1, #25
 800e4c2:	6878      	ldr	r0, [r7, #4]
 800e4c4:	f000 f94e 	bl	800e764 <SDMMC_GetCmdResp1>
 800e4c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e4ca:	69fb      	ldr	r3, [r7, #28]
}
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	3720      	adds	r7, #32
 800e4d0:	46bd      	mov	sp, r7
 800e4d2:	bd80      	pop	{r7, pc}

0800e4d4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800e4d4:	b580      	push	{r7, lr}
 800e4d6:	b088      	sub	sp, #32
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800e4dc:	2300      	movs	r3, #0
 800e4de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800e4e0:	230c      	movs	r3, #12
 800e4e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e4e4:	2340      	movs	r3, #64	; 0x40
 800e4e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e4e8:	2300      	movs	r3, #0
 800e4ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e4ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e4f0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e4f2:	f107 0308 	add.w	r3, r7, #8
 800e4f6:	4619      	mov	r1, r3
 800e4f8:	6878      	ldr	r0, [r7, #4]
 800e4fa:	f7ff fecb 	bl	800e294 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800e4fe:	4a05      	ldr	r2, [pc, #20]	; (800e514 <SDMMC_CmdStopTransfer+0x40>)
 800e500:	210c      	movs	r1, #12
 800e502:	6878      	ldr	r0, [r7, #4]
 800e504:	f000 f92e 	bl	800e764 <SDMMC_GetCmdResp1>
 800e508:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e50a:	69fb      	ldr	r3, [r7, #28]
}
 800e50c:	4618      	mov	r0, r3
 800e50e:	3720      	adds	r7, #32
 800e510:	46bd      	mov	sp, r7
 800e512:	bd80      	pop	{r7, pc}
 800e514:	05f5e100 	.word	0x05f5e100

0800e518 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800e518:	b580      	push	{r7, lr}
 800e51a:	b08a      	sub	sp, #40	; 0x28
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	60f8      	str	r0, [r7, #12]
 800e520:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800e524:	683b      	ldr	r3, [r7, #0]
 800e526:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800e528:	2307      	movs	r3, #7
 800e52a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e52c:	2340      	movs	r3, #64	; 0x40
 800e52e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e530:	2300      	movs	r3, #0
 800e532:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e534:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e538:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e53a:	f107 0310 	add.w	r3, r7, #16
 800e53e:	4619      	mov	r1, r3
 800e540:	68f8      	ldr	r0, [r7, #12]
 800e542:	f7ff fea7 	bl	800e294 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800e546:	f241 3288 	movw	r2, #5000	; 0x1388
 800e54a:	2107      	movs	r1, #7
 800e54c:	68f8      	ldr	r0, [r7, #12]
 800e54e:	f000 f909 	bl	800e764 <SDMMC_GetCmdResp1>
 800e552:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800e554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e556:	4618      	mov	r0, r3
 800e558:	3728      	adds	r7, #40	; 0x28
 800e55a:	46bd      	mov	sp, r7
 800e55c:	bd80      	pop	{r7, pc}

0800e55e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800e55e:	b580      	push	{r7, lr}
 800e560:	b088      	sub	sp, #32
 800e562:	af00      	add	r7, sp, #0
 800e564:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800e566:	2300      	movs	r3, #0
 800e568:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800e56a:	2300      	movs	r3, #0
 800e56c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800e56e:	2300      	movs	r3, #0
 800e570:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e572:	2300      	movs	r3, #0
 800e574:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e576:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e57a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e57c:	f107 0308 	add.w	r3, r7, #8
 800e580:	4619      	mov	r1, r3
 800e582:	6878      	ldr	r0, [r7, #4]
 800e584:	f7ff fe86 	bl	800e294 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800e588:	6878      	ldr	r0, [r7, #4]
 800e58a:	f000 fb23 	bl	800ebd4 <SDMMC_GetCmdError>
 800e58e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e590:	69fb      	ldr	r3, [r7, #28]
}
 800e592:	4618      	mov	r0, r3
 800e594:	3720      	adds	r7, #32
 800e596:	46bd      	mov	sp, r7
 800e598:	bd80      	pop	{r7, pc}

0800e59a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800e59a:	b580      	push	{r7, lr}
 800e59c:	b088      	sub	sp, #32
 800e59e:	af00      	add	r7, sp, #0
 800e5a0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800e5a2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800e5a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800e5a8:	2308      	movs	r3, #8
 800e5aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e5ac:	2340      	movs	r3, #64	; 0x40
 800e5ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e5b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e5b8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e5ba:	f107 0308 	add.w	r3, r7, #8
 800e5be:	4619      	mov	r1, r3
 800e5c0:	6878      	ldr	r0, [r7, #4]
 800e5c2:	f7ff fe67 	bl	800e294 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800e5c6:	6878      	ldr	r0, [r7, #4]
 800e5c8:	f000 fab6 	bl	800eb38 <SDMMC_GetCmdResp7>
 800e5cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e5ce:	69fb      	ldr	r3, [r7, #28]
}
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	3720      	adds	r7, #32
 800e5d4:	46bd      	mov	sp, r7
 800e5d6:	bd80      	pop	{r7, pc}

0800e5d8 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e5d8:	b580      	push	{r7, lr}
 800e5da:	b088      	sub	sp, #32
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	6078      	str	r0, [r7, #4]
 800e5e0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800e5e2:	683b      	ldr	r3, [r7, #0]
 800e5e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800e5e6:	2337      	movs	r3, #55	; 0x37
 800e5e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e5ea:	2340      	movs	r3, #64	; 0x40
 800e5ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e5ee:	2300      	movs	r3, #0
 800e5f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e5f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e5f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e5f8:	f107 0308 	add.w	r3, r7, #8
 800e5fc:	4619      	mov	r1, r3
 800e5fe:	6878      	ldr	r0, [r7, #4]
 800e600:	f7ff fe48 	bl	800e294 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800e604:	f241 3288 	movw	r2, #5000	; 0x1388
 800e608:	2137      	movs	r1, #55	; 0x37
 800e60a:	6878      	ldr	r0, [r7, #4]
 800e60c:	f000 f8aa 	bl	800e764 <SDMMC_GetCmdResp1>
 800e610:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e612:	69fb      	ldr	r3, [r7, #28]
}
 800e614:	4618      	mov	r0, r3
 800e616:	3720      	adds	r7, #32
 800e618:	46bd      	mov	sp, r7
 800e61a:	bd80      	pop	{r7, pc}

0800e61c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e61c:	b580      	push	{r7, lr}
 800e61e:	b088      	sub	sp, #32
 800e620:	af00      	add	r7, sp, #0
 800e622:	6078      	str	r0, [r7, #4]
 800e624:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800e626:	683a      	ldr	r2, [r7, #0]
 800e628:	4b0d      	ldr	r3, [pc, #52]	; (800e660 <SDMMC_CmdAppOperCommand+0x44>)
 800e62a:	4313      	orrs	r3, r2
 800e62c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800e62e:	2329      	movs	r3, #41	; 0x29
 800e630:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e632:	2340      	movs	r3, #64	; 0x40
 800e634:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e636:	2300      	movs	r3, #0
 800e638:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e63a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e63e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e640:	f107 0308 	add.w	r3, r7, #8
 800e644:	4619      	mov	r1, r3
 800e646:	6878      	ldr	r0, [r7, #4]
 800e648:	f7ff fe24 	bl	800e294 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800e64c:	6878      	ldr	r0, [r7, #4]
 800e64e:	f000 f9bf 	bl	800e9d0 <SDMMC_GetCmdResp3>
 800e652:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e654:	69fb      	ldr	r3, [r7, #28]
}
 800e656:	4618      	mov	r0, r3
 800e658:	3720      	adds	r7, #32
 800e65a:	46bd      	mov	sp, r7
 800e65c:	bd80      	pop	{r7, pc}
 800e65e:	bf00      	nop
 800e660:	80100000 	.word	0x80100000

0800e664 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800e664:	b580      	push	{r7, lr}
 800e666:	b088      	sub	sp, #32
 800e668:	af00      	add	r7, sp, #0
 800e66a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800e66c:	2300      	movs	r3, #0
 800e66e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800e670:	2302      	movs	r3, #2
 800e672:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800e674:	23c0      	movs	r3, #192	; 0xc0
 800e676:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e678:	2300      	movs	r3, #0
 800e67a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e67c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e680:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e682:	f107 0308 	add.w	r3, r7, #8
 800e686:	4619      	mov	r1, r3
 800e688:	6878      	ldr	r0, [r7, #4]
 800e68a:	f7ff fe03 	bl	800e294 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800e68e:	6878      	ldr	r0, [r7, #4]
 800e690:	f000 f956 	bl	800e940 <SDMMC_GetCmdResp2>
 800e694:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e696:	69fb      	ldr	r3, [r7, #28]
}
 800e698:	4618      	mov	r0, r3
 800e69a:	3720      	adds	r7, #32
 800e69c:	46bd      	mov	sp, r7
 800e69e:	bd80      	pop	{r7, pc}

0800e6a0 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e6a0:	b580      	push	{r7, lr}
 800e6a2:	b088      	sub	sp, #32
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	6078      	str	r0, [r7, #4]
 800e6a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800e6aa:	683b      	ldr	r3, [r7, #0]
 800e6ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800e6ae:	2309      	movs	r3, #9
 800e6b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800e6b2:	23c0      	movs	r3, #192	; 0xc0
 800e6b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e6b6:	2300      	movs	r3, #0
 800e6b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e6ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e6be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e6c0:	f107 0308 	add.w	r3, r7, #8
 800e6c4:	4619      	mov	r1, r3
 800e6c6:	6878      	ldr	r0, [r7, #4]
 800e6c8:	f7ff fde4 	bl	800e294 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800e6cc:	6878      	ldr	r0, [r7, #4]
 800e6ce:	f000 f937 	bl	800e940 <SDMMC_GetCmdResp2>
 800e6d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e6d4:	69fb      	ldr	r3, [r7, #28]
}
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	3720      	adds	r7, #32
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	bd80      	pop	{r7, pc}

0800e6de <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800e6de:	b580      	push	{r7, lr}
 800e6e0:	b088      	sub	sp, #32
 800e6e2:	af00      	add	r7, sp, #0
 800e6e4:	6078      	str	r0, [r7, #4]
 800e6e6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800e6ec:	2303      	movs	r3, #3
 800e6ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e6f0:	2340      	movs	r3, #64	; 0x40
 800e6f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e6f4:	2300      	movs	r3, #0
 800e6f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e6f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e6fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e6fe:	f107 0308 	add.w	r3, r7, #8
 800e702:	4619      	mov	r1, r3
 800e704:	6878      	ldr	r0, [r7, #4]
 800e706:	f7ff fdc5 	bl	800e294 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800e70a:	683a      	ldr	r2, [r7, #0]
 800e70c:	2103      	movs	r1, #3
 800e70e:	6878      	ldr	r0, [r7, #4]
 800e710:	f000 f99c 	bl	800ea4c <SDMMC_GetCmdResp6>
 800e714:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e716:	69fb      	ldr	r3, [r7, #28]
}
 800e718:	4618      	mov	r0, r3
 800e71a:	3720      	adds	r7, #32
 800e71c:	46bd      	mov	sp, r7
 800e71e:	bd80      	pop	{r7, pc}

0800e720 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800e720:	b580      	push	{r7, lr}
 800e722:	b088      	sub	sp, #32
 800e724:	af00      	add	r7, sp, #0
 800e726:	6078      	str	r0, [r7, #4]
 800e728:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800e72a:	683b      	ldr	r3, [r7, #0]
 800e72c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800e72e:	230d      	movs	r3, #13
 800e730:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800e732:	2340      	movs	r3, #64	; 0x40
 800e734:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800e736:	2300      	movs	r3, #0
 800e738:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800e73a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e73e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800e740:	f107 0308 	add.w	r3, r7, #8
 800e744:	4619      	mov	r1, r3
 800e746:	6878      	ldr	r0, [r7, #4]
 800e748:	f7ff fda4 	bl	800e294 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800e74c:	f241 3288 	movw	r2, #5000	; 0x1388
 800e750:	210d      	movs	r1, #13
 800e752:	6878      	ldr	r0, [r7, #4]
 800e754:	f000 f806 	bl	800e764 <SDMMC_GetCmdResp1>
 800e758:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e75a:	69fb      	ldr	r3, [r7, #28]
}
 800e75c:	4618      	mov	r0, r3
 800e75e:	3720      	adds	r7, #32
 800e760:	46bd      	mov	sp, r7
 800e762:	bd80      	pop	{r7, pc}

0800e764 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800e764:	b580      	push	{r7, lr}
 800e766:	b088      	sub	sp, #32
 800e768:	af00      	add	r7, sp, #0
 800e76a:	60f8      	str	r0, [r7, #12]
 800e76c:	460b      	mov	r3, r1
 800e76e:	607a      	str	r2, [r7, #4]
 800e770:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e772:	4b70      	ldr	r3, [pc, #448]	; (800e934 <SDMMC_GetCmdResp1+0x1d0>)
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	4a70      	ldr	r2, [pc, #448]	; (800e938 <SDMMC_GetCmdResp1+0x1d4>)
 800e778:	fba2 2303 	umull	r2, r3, r2, r3
 800e77c:	0a5a      	lsrs	r2, r3, #9
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	fb02 f303 	mul.w	r3, r2, r3
 800e784:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800e786:	69fb      	ldr	r3, [r7, #28]
 800e788:	1e5a      	subs	r2, r3, #1
 800e78a:	61fa      	str	r2, [r7, #28]
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d102      	bne.n	800e796 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e790:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e794:	e0c9      	b.n	800e92a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e79a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e79c:	69bb      	ldr	r3, [r7, #24]
 800e79e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d0ef      	beq.n	800e786 <SDMMC_GetCmdResp1+0x22>
 800e7a6:	69bb      	ldr	r3, [r7, #24]
 800e7a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d1ea      	bne.n	800e786 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7b4:	f003 0304 	and.w	r3, r3, #4
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d004      	beq.n	800e7c6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	2204      	movs	r2, #4
 800e7c0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e7c2:	2304      	movs	r3, #4
 800e7c4:	e0b1      	b.n	800e92a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7ca:	f003 0301 	and.w	r3, r3, #1
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d004      	beq.n	800e7dc <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	2201      	movs	r2, #1
 800e7d6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e7d8:	2301      	movs	r3, #1
 800e7da:	e0a6      	b.n	800e92a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	22c5      	movs	r2, #197	; 0xc5
 800e7e0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e7e2:	68f8      	ldr	r0, [r7, #12]
 800e7e4:	f7ff fd80 	bl	800e2e8 <SDMMC_GetCommandResponse>
 800e7e8:	4603      	mov	r3, r0
 800e7ea:	461a      	mov	r2, r3
 800e7ec:	7afb      	ldrb	r3, [r7, #11]
 800e7ee:	4293      	cmp	r3, r2
 800e7f0:	d001      	beq.n	800e7f6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e7f2:	2301      	movs	r3, #1
 800e7f4:	e099      	b.n	800e92a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800e7f6:	2100      	movs	r1, #0
 800e7f8:	68f8      	ldr	r0, [r7, #12]
 800e7fa:	f7ff fd82 	bl	800e302 <SDMMC_GetResponse>
 800e7fe:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e800:	697a      	ldr	r2, [r7, #20]
 800e802:	4b4e      	ldr	r3, [pc, #312]	; (800e93c <SDMMC_GetCmdResp1+0x1d8>)
 800e804:	4013      	ands	r3, r2
 800e806:	2b00      	cmp	r3, #0
 800e808:	d101      	bne.n	800e80e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800e80a:	2300      	movs	r3, #0
 800e80c:	e08d      	b.n	800e92a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e80e:	697b      	ldr	r3, [r7, #20]
 800e810:	2b00      	cmp	r3, #0
 800e812:	da02      	bge.n	800e81a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e814:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e818:	e087      	b.n	800e92a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e81a:	697b      	ldr	r3, [r7, #20]
 800e81c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e820:	2b00      	cmp	r3, #0
 800e822:	d001      	beq.n	800e828 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e824:	2340      	movs	r3, #64	; 0x40
 800e826:	e080      	b.n	800e92a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e828:	697b      	ldr	r3, [r7, #20]
 800e82a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d001      	beq.n	800e836 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e832:	2380      	movs	r3, #128	; 0x80
 800e834:	e079      	b.n	800e92a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e836:	697b      	ldr	r3, [r7, #20]
 800e838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d002      	beq.n	800e846 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e840:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e844:	e071      	b.n	800e92a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e846:	697b      	ldr	r3, [r7, #20]
 800e848:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d002      	beq.n	800e856 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e850:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e854:	e069      	b.n	800e92a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e856:	697b      	ldr	r3, [r7, #20]
 800e858:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d002      	beq.n	800e866 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e860:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e864:	e061      	b.n	800e92a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e866:	697b      	ldr	r3, [r7, #20]
 800e868:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d002      	beq.n	800e876 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e870:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e874:	e059      	b.n	800e92a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e876:	697b      	ldr	r3, [r7, #20]
 800e878:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d002      	beq.n	800e886 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e884:	e051      	b.n	800e92a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e886:	697b      	ldr	r3, [r7, #20]
 800e888:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d002      	beq.n	800e896 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e890:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e894:	e049      	b.n	800e92a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e896:	697b      	ldr	r3, [r7, #20]
 800e898:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d002      	beq.n	800e8a6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e8a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e8a4:	e041      	b.n	800e92a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e8a6:	697b      	ldr	r3, [r7, #20]
 800e8a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d002      	beq.n	800e8b6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800e8b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e8b4:	e039      	b.n	800e92a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e8b6:	697b      	ldr	r3, [r7, #20]
 800e8b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d002      	beq.n	800e8c6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e8c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e8c4:	e031      	b.n	800e92a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e8c6:	697b      	ldr	r3, [r7, #20]
 800e8c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d002      	beq.n	800e8d6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e8d0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e8d4:	e029      	b.n	800e92a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e8d6:	697b      	ldr	r3, [r7, #20]
 800e8d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d002      	beq.n	800e8e6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e8e0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e8e4:	e021      	b.n	800e92a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e8e6:	697b      	ldr	r3, [r7, #20]
 800e8e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d002      	beq.n	800e8f6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e8f0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800e8f4:	e019      	b.n	800e92a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e8f6:	697b      	ldr	r3, [r7, #20]
 800e8f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d002      	beq.n	800e906 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e900:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e904:	e011      	b.n	800e92a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e906:	697b      	ldr	r3, [r7, #20]
 800e908:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d002      	beq.n	800e916 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800e910:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e914:	e009      	b.n	800e92a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800e916:	697b      	ldr	r3, [r7, #20]
 800e918:	f003 0308 	and.w	r3, r3, #8
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d002      	beq.n	800e926 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e920:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800e924:	e001      	b.n	800e92a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e926:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e92a:	4618      	mov	r0, r3
 800e92c:	3720      	adds	r7, #32
 800e92e:	46bd      	mov	sp, r7
 800e930:	bd80      	pop	{r7, pc}
 800e932:	bf00      	nop
 800e934:	200000a8 	.word	0x200000a8
 800e938:	10624dd3 	.word	0x10624dd3
 800e93c:	fdffe008 	.word	0xfdffe008

0800e940 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800e940:	b480      	push	{r7}
 800e942:	b085      	sub	sp, #20
 800e944:	af00      	add	r7, sp, #0
 800e946:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e948:	4b1f      	ldr	r3, [pc, #124]	; (800e9c8 <SDMMC_GetCmdResp2+0x88>)
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	4a1f      	ldr	r2, [pc, #124]	; (800e9cc <SDMMC_GetCmdResp2+0x8c>)
 800e94e:	fba2 2303 	umull	r2, r3, r2, r3
 800e952:	0a5b      	lsrs	r3, r3, #9
 800e954:	f241 3288 	movw	r2, #5000	; 0x1388
 800e958:	fb02 f303 	mul.w	r3, r2, r3
 800e95c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	1e5a      	subs	r2, r3, #1
 800e962:	60fa      	str	r2, [r7, #12]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d102      	bne.n	800e96e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e968:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e96c:	e026      	b.n	800e9bc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e972:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e974:	68bb      	ldr	r3, [r7, #8]
 800e976:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d0ef      	beq.n	800e95e <SDMMC_GetCmdResp2+0x1e>
 800e97e:	68bb      	ldr	r3, [r7, #8]
 800e980:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e984:	2b00      	cmp	r3, #0
 800e986:	d1ea      	bne.n	800e95e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e98c:	f003 0304 	and.w	r3, r3, #4
 800e990:	2b00      	cmp	r3, #0
 800e992:	d004      	beq.n	800e99e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	2204      	movs	r2, #4
 800e998:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e99a:	2304      	movs	r3, #4
 800e99c:	e00e      	b.n	800e9bc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9a2:	f003 0301 	and.w	r3, r3, #1
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d004      	beq.n	800e9b4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	2201      	movs	r2, #1
 800e9ae:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e9b0:	2301      	movs	r3, #1
 800e9b2:	e003      	b.n	800e9bc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	22c5      	movs	r2, #197	; 0xc5
 800e9b8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e9ba:	2300      	movs	r3, #0
}
 800e9bc:	4618      	mov	r0, r3
 800e9be:	3714      	adds	r7, #20
 800e9c0:	46bd      	mov	sp, r7
 800e9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c6:	4770      	bx	lr
 800e9c8:	200000a8 	.word	0x200000a8
 800e9cc:	10624dd3 	.word	0x10624dd3

0800e9d0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800e9d0:	b480      	push	{r7}
 800e9d2:	b085      	sub	sp, #20
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e9d8:	4b1a      	ldr	r3, [pc, #104]	; (800ea44 <SDMMC_GetCmdResp3+0x74>)
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	4a1a      	ldr	r2, [pc, #104]	; (800ea48 <SDMMC_GetCmdResp3+0x78>)
 800e9de:	fba2 2303 	umull	r2, r3, r2, r3
 800e9e2:	0a5b      	lsrs	r3, r3, #9
 800e9e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800e9e8:	fb02 f303 	mul.w	r3, r2, r3
 800e9ec:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	1e5a      	subs	r2, r3, #1
 800e9f2:	60fa      	str	r2, [r7, #12]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d102      	bne.n	800e9fe <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e9f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e9fc:	e01b      	b.n	800ea36 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea02:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ea04:	68bb      	ldr	r3, [r7, #8]
 800ea06:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d0ef      	beq.n	800e9ee <SDMMC_GetCmdResp3+0x1e>
 800ea0e:	68bb      	ldr	r3, [r7, #8]
 800ea10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d1ea      	bne.n	800e9ee <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea1c:	f003 0304 	and.w	r3, r3, #4
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d004      	beq.n	800ea2e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	2204      	movs	r2, #4
 800ea28:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ea2a:	2304      	movs	r3, #4
 800ea2c:	e003      	b.n	800ea36 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	22c5      	movs	r2, #197	; 0xc5
 800ea32:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ea34:	2300      	movs	r3, #0
}
 800ea36:	4618      	mov	r0, r3
 800ea38:	3714      	adds	r7, #20
 800ea3a:	46bd      	mov	sp, r7
 800ea3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea40:	4770      	bx	lr
 800ea42:	bf00      	nop
 800ea44:	200000a8 	.word	0x200000a8
 800ea48:	10624dd3 	.word	0x10624dd3

0800ea4c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800ea4c:	b580      	push	{r7, lr}
 800ea4e:	b088      	sub	sp, #32
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	60f8      	str	r0, [r7, #12]
 800ea54:	460b      	mov	r3, r1
 800ea56:	607a      	str	r2, [r7, #4]
 800ea58:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ea5a:	4b35      	ldr	r3, [pc, #212]	; (800eb30 <SDMMC_GetCmdResp6+0xe4>)
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	4a35      	ldr	r2, [pc, #212]	; (800eb34 <SDMMC_GetCmdResp6+0xe8>)
 800ea60:	fba2 2303 	umull	r2, r3, r2, r3
 800ea64:	0a5b      	lsrs	r3, r3, #9
 800ea66:	f241 3288 	movw	r2, #5000	; 0x1388
 800ea6a:	fb02 f303 	mul.w	r3, r2, r3
 800ea6e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800ea70:	69fb      	ldr	r3, [r7, #28]
 800ea72:	1e5a      	subs	r2, r3, #1
 800ea74:	61fa      	str	r2, [r7, #28]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d102      	bne.n	800ea80 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ea7a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ea7e:	e052      	b.n	800eb26 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea84:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ea86:	69bb      	ldr	r3, [r7, #24]
 800ea88:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d0ef      	beq.n	800ea70 <SDMMC_GetCmdResp6+0x24>
 800ea90:	69bb      	ldr	r3, [r7, #24]
 800ea92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d1ea      	bne.n	800ea70 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea9e:	f003 0304 	and.w	r3, r3, #4
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d004      	beq.n	800eab0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	2204      	movs	r2, #4
 800eaaa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800eaac:	2304      	movs	r3, #4
 800eaae:	e03a      	b.n	800eb26 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eab4:	f003 0301 	and.w	r3, r3, #1
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d004      	beq.n	800eac6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	2201      	movs	r2, #1
 800eac0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800eac2:	2301      	movs	r3, #1
 800eac4:	e02f      	b.n	800eb26 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800eac6:	68f8      	ldr	r0, [r7, #12]
 800eac8:	f7ff fc0e 	bl	800e2e8 <SDMMC_GetCommandResponse>
 800eacc:	4603      	mov	r3, r0
 800eace:	461a      	mov	r2, r3
 800ead0:	7afb      	ldrb	r3, [r7, #11]
 800ead2:	4293      	cmp	r3, r2
 800ead4:	d001      	beq.n	800eada <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ead6:	2301      	movs	r3, #1
 800ead8:	e025      	b.n	800eb26 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	22c5      	movs	r2, #197	; 0xc5
 800eade:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800eae0:	2100      	movs	r1, #0
 800eae2:	68f8      	ldr	r0, [r7, #12]
 800eae4:	f7ff fc0d 	bl	800e302 <SDMMC_GetResponse>
 800eae8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800eaea:	697b      	ldr	r3, [r7, #20]
 800eaec:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d106      	bne.n	800eb02 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800eaf4:	697b      	ldr	r3, [r7, #20]
 800eaf6:	0c1b      	lsrs	r3, r3, #16
 800eaf8:	b29a      	uxth	r2, r3
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800eafe:	2300      	movs	r3, #0
 800eb00:	e011      	b.n	800eb26 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800eb02:	697b      	ldr	r3, [r7, #20]
 800eb04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d002      	beq.n	800eb12 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800eb0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800eb10:	e009      	b.n	800eb26 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800eb12:	697b      	ldr	r3, [r7, #20]
 800eb14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d002      	beq.n	800eb22 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800eb1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800eb20:	e001      	b.n	800eb26 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800eb22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800eb26:	4618      	mov	r0, r3
 800eb28:	3720      	adds	r7, #32
 800eb2a:	46bd      	mov	sp, r7
 800eb2c:	bd80      	pop	{r7, pc}
 800eb2e:	bf00      	nop
 800eb30:	200000a8 	.word	0x200000a8
 800eb34:	10624dd3 	.word	0x10624dd3

0800eb38 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800eb38:	b480      	push	{r7}
 800eb3a:	b085      	sub	sp, #20
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800eb40:	4b22      	ldr	r3, [pc, #136]	; (800ebcc <SDMMC_GetCmdResp7+0x94>)
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	4a22      	ldr	r2, [pc, #136]	; (800ebd0 <SDMMC_GetCmdResp7+0x98>)
 800eb46:	fba2 2303 	umull	r2, r3, r2, r3
 800eb4a:	0a5b      	lsrs	r3, r3, #9
 800eb4c:	f241 3288 	movw	r2, #5000	; 0x1388
 800eb50:	fb02 f303 	mul.w	r3, r2, r3
 800eb54:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	1e5a      	subs	r2, r3, #1
 800eb5a:	60fa      	str	r2, [r7, #12]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d102      	bne.n	800eb66 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800eb60:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800eb64:	e02c      	b.n	800ebc0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb6a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800eb6c:	68bb      	ldr	r3, [r7, #8]
 800eb6e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d0ef      	beq.n	800eb56 <SDMMC_GetCmdResp7+0x1e>
 800eb76:	68bb      	ldr	r3, [r7, #8]
 800eb78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d1ea      	bne.n	800eb56 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb84:	f003 0304 	and.w	r3, r3, #4
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d004      	beq.n	800eb96 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	2204      	movs	r2, #4
 800eb90:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800eb92:	2304      	movs	r3, #4
 800eb94:	e014      	b.n	800ebc0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb9a:	f003 0301 	and.w	r3, r3, #1
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d004      	beq.n	800ebac <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	2201      	movs	r2, #1
 800eba6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800eba8:	2301      	movs	r3, #1
 800ebaa:	e009      	b.n	800ebc0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d002      	beq.n	800ebbe <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	2240      	movs	r2, #64	; 0x40
 800ebbc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ebbe:	2300      	movs	r3, #0
  
}
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	3714      	adds	r7, #20
 800ebc4:	46bd      	mov	sp, r7
 800ebc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebca:	4770      	bx	lr
 800ebcc:	200000a8 	.word	0x200000a8
 800ebd0:	10624dd3 	.word	0x10624dd3

0800ebd4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800ebd4:	b480      	push	{r7}
 800ebd6:	b085      	sub	sp, #20
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ebdc:	4b11      	ldr	r3, [pc, #68]	; (800ec24 <SDMMC_GetCmdError+0x50>)
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	4a11      	ldr	r2, [pc, #68]	; (800ec28 <SDMMC_GetCmdError+0x54>)
 800ebe2:	fba2 2303 	umull	r2, r3, r2, r3
 800ebe6:	0a5b      	lsrs	r3, r3, #9
 800ebe8:	f241 3288 	movw	r2, #5000	; 0x1388
 800ebec:	fb02 f303 	mul.w	r3, r2, r3
 800ebf0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	1e5a      	subs	r2, r3, #1
 800ebf6:	60fa      	str	r2, [r7, #12]
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d102      	bne.n	800ec02 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ebfc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ec00:	e009      	b.n	800ec16 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d0f1      	beq.n	800ebf2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	22c5      	movs	r2, #197	; 0xc5
 800ec12:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800ec14:	2300      	movs	r3, #0
}
 800ec16:	4618      	mov	r0, r3
 800ec18:	3714      	adds	r7, #20
 800ec1a:	46bd      	mov	sp, r7
 800ec1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec20:	4770      	bx	lr
 800ec22:	bf00      	nop
 800ec24:	200000a8 	.word	0x200000a8
 800ec28:	10624dd3 	.word	0x10624dd3

0800ec2c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ec2c:	b580      	push	{r7, lr}
 800ec2e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ec30:	4904      	ldr	r1, [pc, #16]	; (800ec44 <MX_FATFS_Init+0x18>)
 800ec32:	4805      	ldr	r0, [pc, #20]	; (800ec48 <MX_FATFS_Init+0x1c>)
 800ec34:	f002 fee6 	bl	8011a04 <FATFS_LinkDriver>
 800ec38:	4603      	mov	r3, r0
 800ec3a:	461a      	mov	r2, r3
 800ec3c:	4b03      	ldr	r3, [pc, #12]	; (800ec4c <MX_FATFS_Init+0x20>)
 800ec3e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ec40:	bf00      	nop
 800ec42:	bd80      	pop	{r7, pc}
 800ec44:	20000ec8 	.word	0x20000ec8
 800ec48:	08018000 	.word	0x08018000
 800ec4c:	20000ec4 	.word	0x20000ec4

0800ec50 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800ec50:	b480      	push	{r7}
 800ec52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800ec54:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800ec56:	4618      	mov	r0, r3
 800ec58:	46bd      	mov	sp, r7
 800ec5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec5e:	4770      	bx	lr

0800ec60 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800ec60:	b580      	push	{r7, lr}
 800ec62:	b082      	sub	sp, #8
 800ec64:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800ec66:	2300      	movs	r3, #0
 800ec68:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ec6a:	f000 f888 	bl	800ed7e <BSP_SD_IsDetected>
 800ec6e:	4603      	mov	r3, r0
 800ec70:	2b01      	cmp	r3, #1
 800ec72:	d001      	beq.n	800ec78 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800ec74:	2302      	movs	r3, #2
 800ec76:	e005      	b.n	800ec84 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800ec78:	4804      	ldr	r0, [pc, #16]	; (800ec8c <BSP_SD_Init+0x2c>)
 800ec7a:	f7fd f8b8 	bl	800bdee <HAL_SD_Init>
 800ec7e:	4603      	mov	r3, r0
 800ec80:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800ec82:	79fb      	ldrb	r3, [r7, #7]
}
 800ec84:	4618      	mov	r0, r3
 800ec86:	3708      	adds	r7, #8
 800ec88:	46bd      	mov	sp, r7
 800ec8a:	bd80      	pop	{r7, pc}
 800ec8c:	20000710 	.word	0x20000710

0800ec90 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800ec90:	b580      	push	{r7, lr}
 800ec92:	b086      	sub	sp, #24
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	60f8      	str	r0, [r7, #12]
 800ec98:	60b9      	str	r1, [r7, #8]
 800ec9a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ec9c:	2300      	movs	r3, #0
 800ec9e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	68ba      	ldr	r2, [r7, #8]
 800eca4:	68f9      	ldr	r1, [r7, #12]
 800eca6:	4806      	ldr	r0, [pc, #24]	; (800ecc0 <BSP_SD_ReadBlocks_DMA+0x30>)
 800eca8:	f7fd f95a 	bl	800bf60 <HAL_SD_ReadBlocks_DMA>
 800ecac:	4603      	mov	r3, r0
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d001      	beq.n	800ecb6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ecb2:	2301      	movs	r3, #1
 800ecb4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ecb6:	7dfb      	ldrb	r3, [r7, #23]
}
 800ecb8:	4618      	mov	r0, r3
 800ecba:	3718      	adds	r7, #24
 800ecbc:	46bd      	mov	sp, r7
 800ecbe:	bd80      	pop	{r7, pc}
 800ecc0:	20000710 	.word	0x20000710

0800ecc4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800ecc4:	b580      	push	{r7, lr}
 800ecc6:	b086      	sub	sp, #24
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	60f8      	str	r0, [r7, #12]
 800eccc:	60b9      	str	r1, [r7, #8]
 800ecce:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ecd0:	2300      	movs	r3, #0
 800ecd2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	68ba      	ldr	r2, [r7, #8]
 800ecd8:	68f9      	ldr	r1, [r7, #12]
 800ecda:	4806      	ldr	r0, [pc, #24]	; (800ecf4 <BSP_SD_WriteBlocks_DMA+0x30>)
 800ecdc:	f7fd fa22 	bl	800c124 <HAL_SD_WriteBlocks_DMA>
 800ece0:	4603      	mov	r3, r0
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d001      	beq.n	800ecea <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ece6:	2301      	movs	r3, #1
 800ece8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ecea:	7dfb      	ldrb	r3, [r7, #23]
}
 800ecec:	4618      	mov	r0, r3
 800ecee:	3718      	adds	r7, #24
 800ecf0:	46bd      	mov	sp, r7
 800ecf2:	bd80      	pop	{r7, pc}
 800ecf4:	20000710 	.word	0x20000710

0800ecf8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800ecf8:	b580      	push	{r7, lr}
 800ecfa:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ecfc:	4805      	ldr	r0, [pc, #20]	; (800ed14 <BSP_SD_GetCardState+0x1c>)
 800ecfe:	f7fd fe47 	bl	800c990 <HAL_SD_GetCardState>
 800ed02:	4603      	mov	r3, r0
 800ed04:	2b04      	cmp	r3, #4
 800ed06:	bf14      	ite	ne
 800ed08:	2301      	movne	r3, #1
 800ed0a:	2300      	moveq	r3, #0
 800ed0c:	b2db      	uxtb	r3, r3
}
 800ed0e:	4618      	mov	r0, r3
 800ed10:	bd80      	pop	{r7, pc}
 800ed12:	bf00      	nop
 800ed14:	20000710 	.word	0x20000710

0800ed18 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800ed18:	b580      	push	{r7, lr}
 800ed1a:	b082      	sub	sp, #8
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800ed20:	6879      	ldr	r1, [r7, #4]
 800ed22:	4803      	ldr	r0, [pc, #12]	; (800ed30 <BSP_SD_GetCardInfo+0x18>)
 800ed24:	f7fd fe08 	bl	800c938 <HAL_SD_GetCardInfo>
}
 800ed28:	bf00      	nop
 800ed2a:	3708      	adds	r7, #8
 800ed2c:	46bd      	mov	sp, r7
 800ed2e:	bd80      	pop	{r7, pc}
 800ed30:	20000710 	.word	0x20000710

0800ed34 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800ed34:	b580      	push	{r7, lr}
 800ed36:	b082      	sub	sp, #8
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800ed3c:	f000 f818 	bl	800ed70 <BSP_SD_AbortCallback>
}
 800ed40:	bf00      	nop
 800ed42:	3708      	adds	r7, #8
 800ed44:	46bd      	mov	sp, r7
 800ed46:	bd80      	pop	{r7, pc}

0800ed48 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ed48:	b580      	push	{r7, lr}
 800ed4a:	b082      	sub	sp, #8
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800ed50:	f000 f9c4 	bl	800f0dc <BSP_SD_WriteCpltCallback>
}
 800ed54:	bf00      	nop
 800ed56:	3708      	adds	r7, #8
 800ed58:	46bd      	mov	sp, r7
 800ed5a:	bd80      	pop	{r7, pc}

0800ed5c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ed5c:	b580      	push	{r7, lr}
 800ed5e:	b082      	sub	sp, #8
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800ed64:	f000 f9c8 	bl	800f0f8 <BSP_SD_ReadCpltCallback>
}
 800ed68:	bf00      	nop
 800ed6a:	3708      	adds	r7, #8
 800ed6c:	46bd      	mov	sp, r7
 800ed6e:	bd80      	pop	{r7, pc}

0800ed70 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800ed70:	b480      	push	{r7}
 800ed72:	af00      	add	r7, sp, #0

}
 800ed74:	bf00      	nop
 800ed76:	46bd      	mov	sp, r7
 800ed78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7c:	4770      	bx	lr

0800ed7e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800ed7e:	b580      	push	{r7, lr}
 800ed80:	b082      	sub	sp, #8
 800ed82:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800ed84:	2301      	movs	r3, #1
 800ed86:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800ed88:	f000 f80c 	bl	800eda4 <BSP_PlatformIsDetected>
 800ed8c:	4603      	mov	r3, r0
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d101      	bne.n	800ed96 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800ed92:	2300      	movs	r3, #0
 800ed94:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800ed96:	79fb      	ldrb	r3, [r7, #7]
 800ed98:	b2db      	uxtb	r3, r3
}
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	3708      	adds	r7, #8
 800ed9e:	46bd      	mov	sp, r7
 800eda0:	bd80      	pop	{r7, pc}
	...

0800eda4 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800eda4:	b580      	push	{r7, lr}
 800eda6:	b082      	sub	sp, #8
 800eda8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800edaa:	2301      	movs	r3, #1
 800edac:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800edae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800edb2:	4806      	ldr	r0, [pc, #24]	; (800edcc <BSP_PlatformIsDetected+0x28>)
 800edb4:	f7f9 ffc8 	bl	8008d48 <HAL_GPIO_ReadPin>
 800edb8:	4603      	mov	r3, r0
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d001      	beq.n	800edc2 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800edbe:	2300      	movs	r3, #0
 800edc0:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800edc2:	79fb      	ldrb	r3, [r7, #7]
}
 800edc4:	4618      	mov	r0, r3
 800edc6:	3708      	adds	r7, #8
 800edc8:	46bd      	mov	sp, r7
 800edca:	bd80      	pop	{r7, pc}
 800edcc:	40020800 	.word	0x40020800

0800edd0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800edd0:	b580      	push	{r7, lr}
 800edd2:	b084      	sub	sp, #16
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800edd8:	f002 feac 	bl	8011b34 <osKernelSysTick>
 800eddc:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800edde:	e006      	b.n	800edee <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ede0:	f7ff ff8a 	bl	800ecf8 <BSP_SD_GetCardState>
 800ede4:	4603      	mov	r3, r0
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d101      	bne.n	800edee <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800edea:	2300      	movs	r3, #0
 800edec:	e009      	b.n	800ee02 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800edee:	f002 fea1 	bl	8011b34 <osKernelSysTick>
 800edf2:	4602      	mov	r2, r0
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	1ad3      	subs	r3, r2, r3
 800edf8:	687a      	ldr	r2, [r7, #4]
 800edfa:	429a      	cmp	r2, r3
 800edfc:	d8f0      	bhi.n	800ede0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800edfe:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ee02:	4618      	mov	r0, r3
 800ee04:	3710      	adds	r7, #16
 800ee06:	46bd      	mov	sp, r7
 800ee08:	bd80      	pop	{r7, pc}
	...

0800ee0c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800ee0c:	b580      	push	{r7, lr}
 800ee0e:	b082      	sub	sp, #8
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	4603      	mov	r3, r0
 800ee14:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800ee16:	4b0b      	ldr	r3, [pc, #44]	; (800ee44 <SD_CheckStatus+0x38>)
 800ee18:	2201      	movs	r2, #1
 800ee1a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ee1c:	f7ff ff6c 	bl	800ecf8 <BSP_SD_GetCardState>
 800ee20:	4603      	mov	r3, r0
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d107      	bne.n	800ee36 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800ee26:	4b07      	ldr	r3, [pc, #28]	; (800ee44 <SD_CheckStatus+0x38>)
 800ee28:	781b      	ldrb	r3, [r3, #0]
 800ee2a:	b2db      	uxtb	r3, r3
 800ee2c:	f023 0301 	bic.w	r3, r3, #1
 800ee30:	b2da      	uxtb	r2, r3
 800ee32:	4b04      	ldr	r3, [pc, #16]	; (800ee44 <SD_CheckStatus+0x38>)
 800ee34:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800ee36:	4b03      	ldr	r3, [pc, #12]	; (800ee44 <SD_CheckStatus+0x38>)
 800ee38:	781b      	ldrb	r3, [r3, #0]
 800ee3a:	b2db      	uxtb	r3, r3
}
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	3708      	adds	r7, #8
 800ee40:	46bd      	mov	sp, r7
 800ee42:	bd80      	pop	{r7, pc}
 800ee44:	200000ed 	.word	0x200000ed

0800ee48 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800ee48:	b590      	push	{r4, r7, lr}
 800ee4a:	b087      	sub	sp, #28
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	4603      	mov	r3, r0
 800ee50:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800ee52:	4b20      	ldr	r3, [pc, #128]	; (800eed4 <SD_initialize+0x8c>)
 800ee54:	2201      	movs	r2, #1
 800ee56:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800ee58:	f002 fe60 	bl	8011b1c <osKernelRunning>
 800ee5c:	4603      	mov	r3, r0
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d030      	beq.n	800eec4 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800ee62:	f7ff fefd 	bl	800ec60 <BSP_SD_Init>
 800ee66:	4603      	mov	r3, r0
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d107      	bne.n	800ee7c <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800ee6c:	79fb      	ldrb	r3, [r7, #7]
 800ee6e:	4618      	mov	r0, r3
 800ee70:	f7ff ffcc 	bl	800ee0c <SD_CheckStatus>
 800ee74:	4603      	mov	r3, r0
 800ee76:	461a      	mov	r2, r3
 800ee78:	4b16      	ldr	r3, [pc, #88]	; (800eed4 <SD_initialize+0x8c>)
 800ee7a:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800ee7c:	4b15      	ldr	r3, [pc, #84]	; (800eed4 <SD_initialize+0x8c>)
 800ee7e:	781b      	ldrb	r3, [r3, #0]
 800ee80:	b2db      	uxtb	r3, r3
 800ee82:	2b01      	cmp	r3, #1
 800ee84:	d01e      	beq.n	800eec4 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800ee86:	4b14      	ldr	r3, [pc, #80]	; (800eed8 <SD_initialize+0x90>)
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d10e      	bne.n	800eeac <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800ee8e:	4b13      	ldr	r3, [pc, #76]	; (800eedc <SD_initialize+0x94>)
 800ee90:	f107 0408 	add.w	r4, r7, #8
 800ee94:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ee96:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800ee9a:	f107 0308 	add.w	r3, r7, #8
 800ee9e:	2100      	movs	r1, #0
 800eea0:	4618      	mov	r0, r3
 800eea2:	f002 ff80 	bl	8011da6 <osMessageCreate>
 800eea6:	4603      	mov	r3, r0
 800eea8:	4a0b      	ldr	r2, [pc, #44]	; (800eed8 <SD_initialize+0x90>)
 800eeaa:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800eeac:	4b0a      	ldr	r3, [pc, #40]	; (800eed8 <SD_initialize+0x90>)
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d107      	bne.n	800eec4 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800eeb4:	4b07      	ldr	r3, [pc, #28]	; (800eed4 <SD_initialize+0x8c>)
 800eeb6:	781b      	ldrb	r3, [r3, #0]
 800eeb8:	b2db      	uxtb	r3, r3
 800eeba:	f043 0301 	orr.w	r3, r3, #1
 800eebe:	b2da      	uxtb	r2, r3
 800eec0:	4b04      	ldr	r3, [pc, #16]	; (800eed4 <SD_initialize+0x8c>)
 800eec2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800eec4:	4b03      	ldr	r3, [pc, #12]	; (800eed4 <SD_initialize+0x8c>)
 800eec6:	781b      	ldrb	r3, [r3, #0]
 800eec8:	b2db      	uxtb	r3, r3
}
 800eeca:	4618      	mov	r0, r3
 800eecc:	371c      	adds	r7, #28
 800eece:	46bd      	mov	sp, r7
 800eed0:	bd90      	pop	{r4, r7, pc}
 800eed2:	bf00      	nop
 800eed4:	200000ed 	.word	0x200000ed
 800eed8:	20001330 	.word	0x20001330
 800eedc:	08015478 	.word	0x08015478

0800eee0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800eee0:	b580      	push	{r7, lr}
 800eee2:	b082      	sub	sp, #8
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	4603      	mov	r3, r0
 800eee8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800eeea:	79fb      	ldrb	r3, [r7, #7]
 800eeec:	4618      	mov	r0, r3
 800eeee:	f7ff ff8d 	bl	800ee0c <SD_CheckStatus>
 800eef2:	4603      	mov	r3, r0
}
 800eef4:	4618      	mov	r0, r3
 800eef6:	3708      	adds	r7, #8
 800eef8:	46bd      	mov	sp, r7
 800eefa:	bd80      	pop	{r7, pc}

0800eefc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800eefc:	b580      	push	{r7, lr}
 800eefe:	b08a      	sub	sp, #40	; 0x28
 800ef00:	af00      	add	r7, sp, #0
 800ef02:	60b9      	str	r1, [r7, #8]
 800ef04:	607a      	str	r2, [r7, #4]
 800ef06:	603b      	str	r3, [r7, #0]
 800ef08:	4603      	mov	r3, r0
 800ef0a:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800ef0c:	2301      	movs	r3, #1
 800ef0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ef12:	f247 5030 	movw	r0, #30000	; 0x7530
 800ef16:	f7ff ff5b 	bl	800edd0 <SD_CheckStatusWithTimeout>
 800ef1a:	4603      	mov	r3, r0
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	da02      	bge.n	800ef26 <SD_read+0x2a>
  {
    return res;
 800ef20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef24:	e032      	b.n	800ef8c <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800ef26:	683a      	ldr	r2, [r7, #0]
 800ef28:	6879      	ldr	r1, [r7, #4]
 800ef2a:	68b8      	ldr	r0, [r7, #8]
 800ef2c:	f7ff feb0 	bl	800ec90 <BSP_SD_ReadBlocks_DMA>
 800ef30:	4603      	mov	r3, r0
 800ef32:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800ef36:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d124      	bne.n	800ef88 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800ef3e:	4b15      	ldr	r3, [pc, #84]	; (800ef94 <SD_read+0x98>)
 800ef40:	6819      	ldr	r1, [r3, #0]
 800ef42:	f107 0314 	add.w	r3, r7, #20
 800ef46:	f247 5230 	movw	r2, #30000	; 0x7530
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	f002 ff94 	bl	8011e78 <osMessageGet>

    if (event.status == osEventMessage)
 800ef50:	697b      	ldr	r3, [r7, #20]
 800ef52:	2b10      	cmp	r3, #16
 800ef54:	d118      	bne.n	800ef88 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800ef56:	69bb      	ldr	r3, [r7, #24]
 800ef58:	2b01      	cmp	r3, #1
 800ef5a:	d115      	bne.n	800ef88 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800ef5c:	f002 fdea 	bl	8011b34 <osKernelSysTick>
 800ef60:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800ef62:	e008      	b.n	800ef76 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ef64:	f7ff fec8 	bl	800ecf8 <BSP_SD_GetCardState>
 800ef68:	4603      	mov	r3, r0
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d103      	bne.n	800ef76 <SD_read+0x7a>
              {
                res = RES_OK;
 800ef6e:	2300      	movs	r3, #0
 800ef70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800ef74:	e008      	b.n	800ef88 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800ef76:	f002 fddd 	bl	8011b34 <osKernelSysTick>
 800ef7a:	4602      	mov	r2, r0
 800ef7c:	6a3b      	ldr	r3, [r7, #32]
 800ef7e:	1ad3      	subs	r3, r2, r3
 800ef80:	f247 522f 	movw	r2, #29999	; 0x752f
 800ef84:	4293      	cmp	r3, r2
 800ef86:	d9ed      	bls.n	800ef64 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800ef88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	3728      	adds	r7, #40	; 0x28
 800ef90:	46bd      	mov	sp, r7
 800ef92:	bd80      	pop	{r7, pc}
 800ef94:	20001330 	.word	0x20001330

0800ef98 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800ef98:	b580      	push	{r7, lr}
 800ef9a:	b08a      	sub	sp, #40	; 0x28
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	60b9      	str	r1, [r7, #8]
 800efa0:	607a      	str	r2, [r7, #4]
 800efa2:	603b      	str	r3, [r7, #0]
 800efa4:	4603      	mov	r3, r0
 800efa6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800efa8:	2301      	movs	r3, #1
 800efaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800efae:	f247 5030 	movw	r0, #30000	; 0x7530
 800efb2:	f7ff ff0d 	bl	800edd0 <SD_CheckStatusWithTimeout>
 800efb6:	4603      	mov	r3, r0
 800efb8:	2b00      	cmp	r3, #0
 800efba:	da02      	bge.n	800efc2 <SD_write+0x2a>
  {
    return res;
 800efbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800efc0:	e02e      	b.n	800f020 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800efc2:	683a      	ldr	r2, [r7, #0]
 800efc4:	6879      	ldr	r1, [r7, #4]
 800efc6:	68b8      	ldr	r0, [r7, #8]
 800efc8:	f7ff fe7c 	bl	800ecc4 <BSP_SD_WriteBlocks_DMA>
 800efcc:	4603      	mov	r3, r0
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d124      	bne.n	800f01c <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800efd2:	4b15      	ldr	r3, [pc, #84]	; (800f028 <SD_write+0x90>)
 800efd4:	6819      	ldr	r1, [r3, #0]
 800efd6:	f107 0314 	add.w	r3, r7, #20
 800efda:	f247 5230 	movw	r2, #30000	; 0x7530
 800efde:	4618      	mov	r0, r3
 800efe0:	f002 ff4a 	bl	8011e78 <osMessageGet>

    if (event.status == osEventMessage)
 800efe4:	697b      	ldr	r3, [r7, #20]
 800efe6:	2b10      	cmp	r3, #16
 800efe8:	d118      	bne.n	800f01c <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800efea:	69bb      	ldr	r3, [r7, #24]
 800efec:	2b02      	cmp	r3, #2
 800efee:	d115      	bne.n	800f01c <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800eff0:	f002 fda0 	bl	8011b34 <osKernelSysTick>
 800eff4:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800eff6:	e008      	b.n	800f00a <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800eff8:	f7ff fe7e 	bl	800ecf8 <BSP_SD_GetCardState>
 800effc:	4603      	mov	r3, r0
 800effe:	2b00      	cmp	r3, #0
 800f000:	d103      	bne.n	800f00a <SD_write+0x72>
          {
            res = RES_OK;
 800f002:	2300      	movs	r3, #0
 800f004:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800f008:	e008      	b.n	800f01c <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800f00a:	f002 fd93 	bl	8011b34 <osKernelSysTick>
 800f00e:	4602      	mov	r2, r0
 800f010:	6a3b      	ldr	r3, [r7, #32]
 800f012:	1ad3      	subs	r3, r2, r3
 800f014:	f247 522f 	movw	r2, #29999	; 0x752f
 800f018:	4293      	cmp	r3, r2
 800f01a:	d9ed      	bls.n	800eff8 <SD_write+0x60>
    }

  }
#endif

  return res;
 800f01c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800f020:	4618      	mov	r0, r3
 800f022:	3728      	adds	r7, #40	; 0x28
 800f024:	46bd      	mov	sp, r7
 800f026:	bd80      	pop	{r7, pc}
 800f028:	20001330 	.word	0x20001330

0800f02c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800f02c:	b580      	push	{r7, lr}
 800f02e:	b08c      	sub	sp, #48	; 0x30
 800f030:	af00      	add	r7, sp, #0
 800f032:	4603      	mov	r3, r0
 800f034:	603a      	str	r2, [r7, #0]
 800f036:	71fb      	strb	r3, [r7, #7]
 800f038:	460b      	mov	r3, r1
 800f03a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800f03c:	2301      	movs	r3, #1
 800f03e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800f042:	4b25      	ldr	r3, [pc, #148]	; (800f0d8 <SD_ioctl+0xac>)
 800f044:	781b      	ldrb	r3, [r3, #0]
 800f046:	b2db      	uxtb	r3, r3
 800f048:	f003 0301 	and.w	r3, r3, #1
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d001      	beq.n	800f054 <SD_ioctl+0x28>
 800f050:	2303      	movs	r3, #3
 800f052:	e03c      	b.n	800f0ce <SD_ioctl+0xa2>

  switch (cmd)
 800f054:	79bb      	ldrb	r3, [r7, #6]
 800f056:	2b03      	cmp	r3, #3
 800f058:	d834      	bhi.n	800f0c4 <SD_ioctl+0x98>
 800f05a:	a201      	add	r2, pc, #4	; (adr r2, 800f060 <SD_ioctl+0x34>)
 800f05c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f060:	0800f071 	.word	0x0800f071
 800f064:	0800f079 	.word	0x0800f079
 800f068:	0800f091 	.word	0x0800f091
 800f06c:	0800f0ab 	.word	0x0800f0ab
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800f070:	2300      	movs	r3, #0
 800f072:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f076:	e028      	b.n	800f0ca <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800f078:	f107 030c 	add.w	r3, r7, #12
 800f07c:	4618      	mov	r0, r3
 800f07e:	f7ff fe4b 	bl	800ed18 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800f082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f084:	683b      	ldr	r3, [r7, #0]
 800f086:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f088:	2300      	movs	r3, #0
 800f08a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f08e:	e01c      	b.n	800f0ca <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f090:	f107 030c 	add.w	r3, r7, #12
 800f094:	4618      	mov	r0, r3
 800f096:	f7ff fe3f 	bl	800ed18 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800f09a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f09c:	b29a      	uxth	r2, r3
 800f09e:	683b      	ldr	r3, [r7, #0]
 800f0a0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800f0a2:	2300      	movs	r3, #0
 800f0a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f0a8:	e00f      	b.n	800f0ca <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f0aa:	f107 030c 	add.w	r3, r7, #12
 800f0ae:	4618      	mov	r0, r3
 800f0b0:	f7ff fe32 	bl	800ed18 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800f0b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0b6:	0a5a      	lsrs	r2, r3, #9
 800f0b8:	683b      	ldr	r3, [r7, #0]
 800f0ba:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f0bc:	2300      	movs	r3, #0
 800f0be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f0c2:	e002      	b.n	800f0ca <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800f0c4:	2304      	movs	r3, #4
 800f0c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800f0ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	3730      	adds	r7, #48	; 0x30
 800f0d2:	46bd      	mov	sp, r7
 800f0d4:	bd80      	pop	{r7, pc}
 800f0d6:	bf00      	nop
 800f0d8:	200000ed 	.word	0x200000ed

0800f0dc <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 800f0e0:	4b04      	ldr	r3, [pc, #16]	; (800f0f4 <BSP_SD_WriteCpltCallback+0x18>)
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	2200      	movs	r2, #0
 800f0e6:	2102      	movs	r1, #2
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	f002 fe85 	bl	8011df8 <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800f0ee:	bf00      	nop
 800f0f0:	bd80      	pop	{r7, pc}
 800f0f2:	bf00      	nop
 800f0f4:	20001330 	.word	0x20001330

0800f0f8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800f0f8:	b580      	push	{r7, lr}
 800f0fa:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800f0fc:	4b04      	ldr	r3, [pc, #16]	; (800f110 <BSP_SD_ReadCpltCallback+0x18>)
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	2200      	movs	r2, #0
 800f102:	2101      	movs	r1, #1
 800f104:	4618      	mov	r0, r3
 800f106:	f002 fe77 	bl	8011df8 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800f10a:	bf00      	nop
 800f10c:	bd80      	pop	{r7, pc}
 800f10e:	bf00      	nop
 800f110:	20001330 	.word	0x20001330

0800f114 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800f114:	b580      	push	{r7, lr}
 800f116:	b084      	sub	sp, #16
 800f118:	af00      	add	r7, sp, #0
 800f11a:	4603      	mov	r3, r0
 800f11c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800f11e:	79fb      	ldrb	r3, [r7, #7]
 800f120:	4a08      	ldr	r2, [pc, #32]	; (800f144 <disk_status+0x30>)
 800f122:	009b      	lsls	r3, r3, #2
 800f124:	4413      	add	r3, r2
 800f126:	685b      	ldr	r3, [r3, #4]
 800f128:	685b      	ldr	r3, [r3, #4]
 800f12a:	79fa      	ldrb	r2, [r7, #7]
 800f12c:	4905      	ldr	r1, [pc, #20]	; (800f144 <disk_status+0x30>)
 800f12e:	440a      	add	r2, r1
 800f130:	7a12      	ldrb	r2, [r2, #8]
 800f132:	4610      	mov	r0, r2
 800f134:	4798      	blx	r3
 800f136:	4603      	mov	r3, r0
 800f138:	73fb      	strb	r3, [r7, #15]
  return stat;
 800f13a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f13c:	4618      	mov	r0, r3
 800f13e:	3710      	adds	r7, #16
 800f140:	46bd      	mov	sp, r7
 800f142:	bd80      	pop	{r7, pc}
 800f144:	2000135c 	.word	0x2000135c

0800f148 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800f148:	b580      	push	{r7, lr}
 800f14a:	b084      	sub	sp, #16
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	4603      	mov	r3, r0
 800f150:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800f152:	2300      	movs	r3, #0
 800f154:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800f156:	79fb      	ldrb	r3, [r7, #7]
 800f158:	4a0d      	ldr	r2, [pc, #52]	; (800f190 <disk_initialize+0x48>)
 800f15a:	5cd3      	ldrb	r3, [r2, r3]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d111      	bne.n	800f184 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800f160:	79fb      	ldrb	r3, [r7, #7]
 800f162:	4a0b      	ldr	r2, [pc, #44]	; (800f190 <disk_initialize+0x48>)
 800f164:	2101      	movs	r1, #1
 800f166:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800f168:	79fb      	ldrb	r3, [r7, #7]
 800f16a:	4a09      	ldr	r2, [pc, #36]	; (800f190 <disk_initialize+0x48>)
 800f16c:	009b      	lsls	r3, r3, #2
 800f16e:	4413      	add	r3, r2
 800f170:	685b      	ldr	r3, [r3, #4]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	79fa      	ldrb	r2, [r7, #7]
 800f176:	4906      	ldr	r1, [pc, #24]	; (800f190 <disk_initialize+0x48>)
 800f178:	440a      	add	r2, r1
 800f17a:	7a12      	ldrb	r2, [r2, #8]
 800f17c:	4610      	mov	r0, r2
 800f17e:	4798      	blx	r3
 800f180:	4603      	mov	r3, r0
 800f182:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800f184:	7bfb      	ldrb	r3, [r7, #15]
}
 800f186:	4618      	mov	r0, r3
 800f188:	3710      	adds	r7, #16
 800f18a:	46bd      	mov	sp, r7
 800f18c:	bd80      	pop	{r7, pc}
 800f18e:	bf00      	nop
 800f190:	2000135c 	.word	0x2000135c

0800f194 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800f194:	b590      	push	{r4, r7, lr}
 800f196:	b087      	sub	sp, #28
 800f198:	af00      	add	r7, sp, #0
 800f19a:	60b9      	str	r1, [r7, #8]
 800f19c:	607a      	str	r2, [r7, #4]
 800f19e:	603b      	str	r3, [r7, #0]
 800f1a0:	4603      	mov	r3, r0
 800f1a2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800f1a4:	7bfb      	ldrb	r3, [r7, #15]
 800f1a6:	4a0a      	ldr	r2, [pc, #40]	; (800f1d0 <disk_read+0x3c>)
 800f1a8:	009b      	lsls	r3, r3, #2
 800f1aa:	4413      	add	r3, r2
 800f1ac:	685b      	ldr	r3, [r3, #4]
 800f1ae:	689c      	ldr	r4, [r3, #8]
 800f1b0:	7bfb      	ldrb	r3, [r7, #15]
 800f1b2:	4a07      	ldr	r2, [pc, #28]	; (800f1d0 <disk_read+0x3c>)
 800f1b4:	4413      	add	r3, r2
 800f1b6:	7a18      	ldrb	r0, [r3, #8]
 800f1b8:	683b      	ldr	r3, [r7, #0]
 800f1ba:	687a      	ldr	r2, [r7, #4]
 800f1bc:	68b9      	ldr	r1, [r7, #8]
 800f1be:	47a0      	blx	r4
 800f1c0:	4603      	mov	r3, r0
 800f1c2:	75fb      	strb	r3, [r7, #23]
  return res;
 800f1c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800f1c6:	4618      	mov	r0, r3
 800f1c8:	371c      	adds	r7, #28
 800f1ca:	46bd      	mov	sp, r7
 800f1cc:	bd90      	pop	{r4, r7, pc}
 800f1ce:	bf00      	nop
 800f1d0:	2000135c 	.word	0x2000135c

0800f1d4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800f1d4:	b590      	push	{r4, r7, lr}
 800f1d6:	b087      	sub	sp, #28
 800f1d8:	af00      	add	r7, sp, #0
 800f1da:	60b9      	str	r1, [r7, #8]
 800f1dc:	607a      	str	r2, [r7, #4]
 800f1de:	603b      	str	r3, [r7, #0]
 800f1e0:	4603      	mov	r3, r0
 800f1e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800f1e4:	7bfb      	ldrb	r3, [r7, #15]
 800f1e6:	4a0a      	ldr	r2, [pc, #40]	; (800f210 <disk_write+0x3c>)
 800f1e8:	009b      	lsls	r3, r3, #2
 800f1ea:	4413      	add	r3, r2
 800f1ec:	685b      	ldr	r3, [r3, #4]
 800f1ee:	68dc      	ldr	r4, [r3, #12]
 800f1f0:	7bfb      	ldrb	r3, [r7, #15]
 800f1f2:	4a07      	ldr	r2, [pc, #28]	; (800f210 <disk_write+0x3c>)
 800f1f4:	4413      	add	r3, r2
 800f1f6:	7a18      	ldrb	r0, [r3, #8]
 800f1f8:	683b      	ldr	r3, [r7, #0]
 800f1fa:	687a      	ldr	r2, [r7, #4]
 800f1fc:	68b9      	ldr	r1, [r7, #8]
 800f1fe:	47a0      	blx	r4
 800f200:	4603      	mov	r3, r0
 800f202:	75fb      	strb	r3, [r7, #23]
  return res;
 800f204:	7dfb      	ldrb	r3, [r7, #23]
}
 800f206:	4618      	mov	r0, r3
 800f208:	371c      	adds	r7, #28
 800f20a:	46bd      	mov	sp, r7
 800f20c:	bd90      	pop	{r4, r7, pc}
 800f20e:	bf00      	nop
 800f210:	2000135c 	.word	0x2000135c

0800f214 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800f214:	b580      	push	{r7, lr}
 800f216:	b084      	sub	sp, #16
 800f218:	af00      	add	r7, sp, #0
 800f21a:	4603      	mov	r3, r0
 800f21c:	603a      	str	r2, [r7, #0]
 800f21e:	71fb      	strb	r3, [r7, #7]
 800f220:	460b      	mov	r3, r1
 800f222:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800f224:	79fb      	ldrb	r3, [r7, #7]
 800f226:	4a09      	ldr	r2, [pc, #36]	; (800f24c <disk_ioctl+0x38>)
 800f228:	009b      	lsls	r3, r3, #2
 800f22a:	4413      	add	r3, r2
 800f22c:	685b      	ldr	r3, [r3, #4]
 800f22e:	691b      	ldr	r3, [r3, #16]
 800f230:	79fa      	ldrb	r2, [r7, #7]
 800f232:	4906      	ldr	r1, [pc, #24]	; (800f24c <disk_ioctl+0x38>)
 800f234:	440a      	add	r2, r1
 800f236:	7a10      	ldrb	r0, [r2, #8]
 800f238:	79b9      	ldrb	r1, [r7, #6]
 800f23a:	683a      	ldr	r2, [r7, #0]
 800f23c:	4798      	blx	r3
 800f23e:	4603      	mov	r3, r0
 800f240:	73fb      	strb	r3, [r7, #15]
  return res;
 800f242:	7bfb      	ldrb	r3, [r7, #15]
}
 800f244:	4618      	mov	r0, r3
 800f246:	3710      	adds	r7, #16
 800f248:	46bd      	mov	sp, r7
 800f24a:	bd80      	pop	{r7, pc}
 800f24c:	2000135c 	.word	0x2000135c

0800f250 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800f250:	b480      	push	{r7}
 800f252:	b085      	sub	sp, #20
 800f254:	af00      	add	r7, sp, #0
 800f256:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	3301      	adds	r3, #1
 800f25c:	781b      	ldrb	r3, [r3, #0]
 800f25e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800f260:	89fb      	ldrh	r3, [r7, #14]
 800f262:	021b      	lsls	r3, r3, #8
 800f264:	b21a      	sxth	r2, r3
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	781b      	ldrb	r3, [r3, #0]
 800f26a:	b21b      	sxth	r3, r3
 800f26c:	4313      	orrs	r3, r2
 800f26e:	b21b      	sxth	r3, r3
 800f270:	81fb      	strh	r3, [r7, #14]
	return rv;
 800f272:	89fb      	ldrh	r3, [r7, #14]
}
 800f274:	4618      	mov	r0, r3
 800f276:	3714      	adds	r7, #20
 800f278:	46bd      	mov	sp, r7
 800f27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f27e:	4770      	bx	lr

0800f280 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800f280:	b480      	push	{r7}
 800f282:	b085      	sub	sp, #20
 800f284:	af00      	add	r7, sp, #0
 800f286:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	3303      	adds	r3, #3
 800f28c:	781b      	ldrb	r3, [r3, #0]
 800f28e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	021b      	lsls	r3, r3, #8
 800f294:	687a      	ldr	r2, [r7, #4]
 800f296:	3202      	adds	r2, #2
 800f298:	7812      	ldrb	r2, [r2, #0]
 800f29a:	4313      	orrs	r3, r2
 800f29c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	021b      	lsls	r3, r3, #8
 800f2a2:	687a      	ldr	r2, [r7, #4]
 800f2a4:	3201      	adds	r2, #1
 800f2a6:	7812      	ldrb	r2, [r2, #0]
 800f2a8:	4313      	orrs	r3, r2
 800f2aa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	021b      	lsls	r3, r3, #8
 800f2b0:	687a      	ldr	r2, [r7, #4]
 800f2b2:	7812      	ldrb	r2, [r2, #0]
 800f2b4:	4313      	orrs	r3, r2
 800f2b6:	60fb      	str	r3, [r7, #12]
	return rv;
 800f2b8:	68fb      	ldr	r3, [r7, #12]
}
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	3714      	adds	r7, #20
 800f2be:	46bd      	mov	sp, r7
 800f2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c4:	4770      	bx	lr

0800f2c6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800f2c6:	b480      	push	{r7}
 800f2c8:	b083      	sub	sp, #12
 800f2ca:	af00      	add	r7, sp, #0
 800f2cc:	6078      	str	r0, [r7, #4]
 800f2ce:	460b      	mov	r3, r1
 800f2d0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	1c5a      	adds	r2, r3, #1
 800f2d6:	607a      	str	r2, [r7, #4]
 800f2d8:	887a      	ldrh	r2, [r7, #2]
 800f2da:	b2d2      	uxtb	r2, r2
 800f2dc:	701a      	strb	r2, [r3, #0]
 800f2de:	887b      	ldrh	r3, [r7, #2]
 800f2e0:	0a1b      	lsrs	r3, r3, #8
 800f2e2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	1c5a      	adds	r2, r3, #1
 800f2e8:	607a      	str	r2, [r7, #4]
 800f2ea:	887a      	ldrh	r2, [r7, #2]
 800f2ec:	b2d2      	uxtb	r2, r2
 800f2ee:	701a      	strb	r2, [r3, #0]
}
 800f2f0:	bf00      	nop
 800f2f2:	370c      	adds	r7, #12
 800f2f4:	46bd      	mov	sp, r7
 800f2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2fa:	4770      	bx	lr

0800f2fc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800f2fc:	b480      	push	{r7}
 800f2fe:	b083      	sub	sp, #12
 800f300:	af00      	add	r7, sp, #0
 800f302:	6078      	str	r0, [r7, #4]
 800f304:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	1c5a      	adds	r2, r3, #1
 800f30a:	607a      	str	r2, [r7, #4]
 800f30c:	683a      	ldr	r2, [r7, #0]
 800f30e:	b2d2      	uxtb	r2, r2
 800f310:	701a      	strb	r2, [r3, #0]
 800f312:	683b      	ldr	r3, [r7, #0]
 800f314:	0a1b      	lsrs	r3, r3, #8
 800f316:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	1c5a      	adds	r2, r3, #1
 800f31c:	607a      	str	r2, [r7, #4]
 800f31e:	683a      	ldr	r2, [r7, #0]
 800f320:	b2d2      	uxtb	r2, r2
 800f322:	701a      	strb	r2, [r3, #0]
 800f324:	683b      	ldr	r3, [r7, #0]
 800f326:	0a1b      	lsrs	r3, r3, #8
 800f328:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	1c5a      	adds	r2, r3, #1
 800f32e:	607a      	str	r2, [r7, #4]
 800f330:	683a      	ldr	r2, [r7, #0]
 800f332:	b2d2      	uxtb	r2, r2
 800f334:	701a      	strb	r2, [r3, #0]
 800f336:	683b      	ldr	r3, [r7, #0]
 800f338:	0a1b      	lsrs	r3, r3, #8
 800f33a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	1c5a      	adds	r2, r3, #1
 800f340:	607a      	str	r2, [r7, #4]
 800f342:	683a      	ldr	r2, [r7, #0]
 800f344:	b2d2      	uxtb	r2, r2
 800f346:	701a      	strb	r2, [r3, #0]
}
 800f348:	bf00      	nop
 800f34a:	370c      	adds	r7, #12
 800f34c:	46bd      	mov	sp, r7
 800f34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f352:	4770      	bx	lr

0800f354 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800f354:	b480      	push	{r7}
 800f356:	b087      	sub	sp, #28
 800f358:	af00      	add	r7, sp, #0
 800f35a:	60f8      	str	r0, [r7, #12]
 800f35c:	60b9      	str	r1, [r7, #8]
 800f35e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800f364:	68bb      	ldr	r3, [r7, #8]
 800f366:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d00d      	beq.n	800f38a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800f36e:	693a      	ldr	r2, [r7, #16]
 800f370:	1c53      	adds	r3, r2, #1
 800f372:	613b      	str	r3, [r7, #16]
 800f374:	697b      	ldr	r3, [r7, #20]
 800f376:	1c59      	adds	r1, r3, #1
 800f378:	6179      	str	r1, [r7, #20]
 800f37a:	7812      	ldrb	r2, [r2, #0]
 800f37c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	3b01      	subs	r3, #1
 800f382:	607b      	str	r3, [r7, #4]
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	2b00      	cmp	r3, #0
 800f388:	d1f1      	bne.n	800f36e <mem_cpy+0x1a>
	}
}
 800f38a:	bf00      	nop
 800f38c:	371c      	adds	r7, #28
 800f38e:	46bd      	mov	sp, r7
 800f390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f394:	4770      	bx	lr

0800f396 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800f396:	b480      	push	{r7}
 800f398:	b087      	sub	sp, #28
 800f39a:	af00      	add	r7, sp, #0
 800f39c:	60f8      	str	r0, [r7, #12]
 800f39e:	60b9      	str	r1, [r7, #8]
 800f3a0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800f3a6:	697b      	ldr	r3, [r7, #20]
 800f3a8:	1c5a      	adds	r2, r3, #1
 800f3aa:	617a      	str	r2, [r7, #20]
 800f3ac:	68ba      	ldr	r2, [r7, #8]
 800f3ae:	b2d2      	uxtb	r2, r2
 800f3b0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	3b01      	subs	r3, #1
 800f3b6:	607b      	str	r3, [r7, #4]
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d1f3      	bne.n	800f3a6 <mem_set+0x10>
}
 800f3be:	bf00      	nop
 800f3c0:	bf00      	nop
 800f3c2:	371c      	adds	r7, #28
 800f3c4:	46bd      	mov	sp, r7
 800f3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ca:	4770      	bx	lr

0800f3cc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800f3cc:	b480      	push	{r7}
 800f3ce:	b089      	sub	sp, #36	; 0x24
 800f3d0:	af00      	add	r7, sp, #0
 800f3d2:	60f8      	str	r0, [r7, #12]
 800f3d4:	60b9      	str	r1, [r7, #8]
 800f3d6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	61fb      	str	r3, [r7, #28]
 800f3dc:	68bb      	ldr	r3, [r7, #8]
 800f3de:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800f3e0:	2300      	movs	r3, #0
 800f3e2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800f3e4:	69fb      	ldr	r3, [r7, #28]
 800f3e6:	1c5a      	adds	r2, r3, #1
 800f3e8:	61fa      	str	r2, [r7, #28]
 800f3ea:	781b      	ldrb	r3, [r3, #0]
 800f3ec:	4619      	mov	r1, r3
 800f3ee:	69bb      	ldr	r3, [r7, #24]
 800f3f0:	1c5a      	adds	r2, r3, #1
 800f3f2:	61ba      	str	r2, [r7, #24]
 800f3f4:	781b      	ldrb	r3, [r3, #0]
 800f3f6:	1acb      	subs	r3, r1, r3
 800f3f8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	3b01      	subs	r3, #1
 800f3fe:	607b      	str	r3, [r7, #4]
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	2b00      	cmp	r3, #0
 800f404:	d002      	beq.n	800f40c <mem_cmp+0x40>
 800f406:	697b      	ldr	r3, [r7, #20]
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d0eb      	beq.n	800f3e4 <mem_cmp+0x18>

	return r;
 800f40c:	697b      	ldr	r3, [r7, #20]
}
 800f40e:	4618      	mov	r0, r3
 800f410:	3724      	adds	r7, #36	; 0x24
 800f412:	46bd      	mov	sp, r7
 800f414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f418:	4770      	bx	lr

0800f41a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800f41a:	b480      	push	{r7}
 800f41c:	b083      	sub	sp, #12
 800f41e:	af00      	add	r7, sp, #0
 800f420:	6078      	str	r0, [r7, #4]
 800f422:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800f424:	e002      	b.n	800f42c <chk_chr+0x12>
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	3301      	adds	r3, #1
 800f42a:	607b      	str	r3, [r7, #4]
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	781b      	ldrb	r3, [r3, #0]
 800f430:	2b00      	cmp	r3, #0
 800f432:	d005      	beq.n	800f440 <chk_chr+0x26>
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	781b      	ldrb	r3, [r3, #0]
 800f438:	461a      	mov	r2, r3
 800f43a:	683b      	ldr	r3, [r7, #0]
 800f43c:	4293      	cmp	r3, r2
 800f43e:	d1f2      	bne.n	800f426 <chk_chr+0xc>
	return *str;
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	781b      	ldrb	r3, [r3, #0]
}
 800f444:	4618      	mov	r0, r3
 800f446:	370c      	adds	r7, #12
 800f448:	46bd      	mov	sp, r7
 800f44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f44e:	4770      	bx	lr

0800f450 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800f450:	b580      	push	{r7, lr}
 800f452:	b082      	sub	sp, #8
 800f454:	af00      	add	r7, sp, #0
 800f456:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d009      	beq.n	800f472 <lock_fs+0x22>
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	68db      	ldr	r3, [r3, #12]
 800f462:	4618      	mov	r0, r3
 800f464:	f002 fb09 	bl	8011a7a <ff_req_grant>
 800f468:	4603      	mov	r3, r0
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d001      	beq.n	800f472 <lock_fs+0x22>
 800f46e:	2301      	movs	r3, #1
 800f470:	e000      	b.n	800f474 <lock_fs+0x24>
 800f472:	2300      	movs	r3, #0
}
 800f474:	4618      	mov	r0, r3
 800f476:	3708      	adds	r7, #8
 800f478:	46bd      	mov	sp, r7
 800f47a:	bd80      	pop	{r7, pc}

0800f47c <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800f47c:	b580      	push	{r7, lr}
 800f47e:	b082      	sub	sp, #8
 800f480:	af00      	add	r7, sp, #0
 800f482:	6078      	str	r0, [r7, #4]
 800f484:	460b      	mov	r3, r1
 800f486:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d00d      	beq.n	800f4aa <unlock_fs+0x2e>
 800f48e:	78fb      	ldrb	r3, [r7, #3]
 800f490:	2b0c      	cmp	r3, #12
 800f492:	d00a      	beq.n	800f4aa <unlock_fs+0x2e>
 800f494:	78fb      	ldrb	r3, [r7, #3]
 800f496:	2b0b      	cmp	r3, #11
 800f498:	d007      	beq.n	800f4aa <unlock_fs+0x2e>
 800f49a:	78fb      	ldrb	r3, [r7, #3]
 800f49c:	2b0f      	cmp	r3, #15
 800f49e:	d004      	beq.n	800f4aa <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	68db      	ldr	r3, [r3, #12]
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	f002 fafd 	bl	8011aa4 <ff_rel_grant>
	}
}
 800f4aa:	bf00      	nop
 800f4ac:	3708      	adds	r7, #8
 800f4ae:	46bd      	mov	sp, r7
 800f4b0:	bd80      	pop	{r7, pc}
	...

0800f4b4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f4b4:	b480      	push	{r7}
 800f4b6:	b085      	sub	sp, #20
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	6078      	str	r0, [r7, #4]
 800f4bc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f4be:	2300      	movs	r3, #0
 800f4c0:	60bb      	str	r3, [r7, #8]
 800f4c2:	68bb      	ldr	r3, [r7, #8]
 800f4c4:	60fb      	str	r3, [r7, #12]
 800f4c6:	e029      	b.n	800f51c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800f4c8:	4a27      	ldr	r2, [pc, #156]	; (800f568 <chk_lock+0xb4>)
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	011b      	lsls	r3, r3, #4
 800f4ce:	4413      	add	r3, r2
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d01d      	beq.n	800f512 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f4d6:	4a24      	ldr	r2, [pc, #144]	; (800f568 <chk_lock+0xb4>)
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	011b      	lsls	r3, r3, #4
 800f4dc:	4413      	add	r3, r2
 800f4de:	681a      	ldr	r2, [r3, #0]
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	429a      	cmp	r2, r3
 800f4e6:	d116      	bne.n	800f516 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800f4e8:	4a1f      	ldr	r2, [pc, #124]	; (800f568 <chk_lock+0xb4>)
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	011b      	lsls	r3, r3, #4
 800f4ee:	4413      	add	r3, r2
 800f4f0:	3304      	adds	r3, #4
 800f4f2:	681a      	ldr	r2, [r3, #0]
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f4f8:	429a      	cmp	r2, r3
 800f4fa:	d10c      	bne.n	800f516 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f4fc:	4a1a      	ldr	r2, [pc, #104]	; (800f568 <chk_lock+0xb4>)
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	011b      	lsls	r3, r3, #4
 800f502:	4413      	add	r3, r2
 800f504:	3308      	adds	r3, #8
 800f506:	681a      	ldr	r2, [r3, #0]
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800f50c:	429a      	cmp	r2, r3
 800f50e:	d102      	bne.n	800f516 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f510:	e007      	b.n	800f522 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800f512:	2301      	movs	r3, #1
 800f514:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	3301      	adds	r3, #1
 800f51a:	60fb      	str	r3, [r7, #12]
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	2b01      	cmp	r3, #1
 800f520:	d9d2      	bls.n	800f4c8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	2b02      	cmp	r3, #2
 800f526:	d109      	bne.n	800f53c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800f528:	68bb      	ldr	r3, [r7, #8]
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d102      	bne.n	800f534 <chk_lock+0x80>
 800f52e:	683b      	ldr	r3, [r7, #0]
 800f530:	2b02      	cmp	r3, #2
 800f532:	d101      	bne.n	800f538 <chk_lock+0x84>
 800f534:	2300      	movs	r3, #0
 800f536:	e010      	b.n	800f55a <chk_lock+0xa6>
 800f538:	2312      	movs	r3, #18
 800f53a:	e00e      	b.n	800f55a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800f53c:	683b      	ldr	r3, [r7, #0]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d108      	bne.n	800f554 <chk_lock+0xa0>
 800f542:	4a09      	ldr	r2, [pc, #36]	; (800f568 <chk_lock+0xb4>)
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	011b      	lsls	r3, r3, #4
 800f548:	4413      	add	r3, r2
 800f54a:	330c      	adds	r3, #12
 800f54c:	881b      	ldrh	r3, [r3, #0]
 800f54e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f552:	d101      	bne.n	800f558 <chk_lock+0xa4>
 800f554:	2310      	movs	r3, #16
 800f556:	e000      	b.n	800f55a <chk_lock+0xa6>
 800f558:	2300      	movs	r3, #0
}
 800f55a:	4618      	mov	r0, r3
 800f55c:	3714      	adds	r7, #20
 800f55e:	46bd      	mov	sp, r7
 800f560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f564:	4770      	bx	lr
 800f566:	bf00      	nop
 800f568:	2000133c 	.word	0x2000133c

0800f56c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800f56c:	b480      	push	{r7}
 800f56e:	b083      	sub	sp, #12
 800f570:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f572:	2300      	movs	r3, #0
 800f574:	607b      	str	r3, [r7, #4]
 800f576:	e002      	b.n	800f57e <enq_lock+0x12>
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	3301      	adds	r3, #1
 800f57c:	607b      	str	r3, [r7, #4]
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	2b01      	cmp	r3, #1
 800f582:	d806      	bhi.n	800f592 <enq_lock+0x26>
 800f584:	4a09      	ldr	r2, [pc, #36]	; (800f5ac <enq_lock+0x40>)
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	011b      	lsls	r3, r3, #4
 800f58a:	4413      	add	r3, r2
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d1f2      	bne.n	800f578 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	2b02      	cmp	r3, #2
 800f596:	bf14      	ite	ne
 800f598:	2301      	movne	r3, #1
 800f59a:	2300      	moveq	r3, #0
 800f59c:	b2db      	uxtb	r3, r3
}
 800f59e:	4618      	mov	r0, r3
 800f5a0:	370c      	adds	r7, #12
 800f5a2:	46bd      	mov	sp, r7
 800f5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a8:	4770      	bx	lr
 800f5aa:	bf00      	nop
 800f5ac:	2000133c 	.word	0x2000133c

0800f5b0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f5b0:	b480      	push	{r7}
 800f5b2:	b085      	sub	sp, #20
 800f5b4:	af00      	add	r7, sp, #0
 800f5b6:	6078      	str	r0, [r7, #4]
 800f5b8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f5ba:	2300      	movs	r3, #0
 800f5bc:	60fb      	str	r3, [r7, #12]
 800f5be:	e01f      	b.n	800f600 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800f5c0:	4a41      	ldr	r2, [pc, #260]	; (800f6c8 <inc_lock+0x118>)
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	011b      	lsls	r3, r3, #4
 800f5c6:	4413      	add	r3, r2
 800f5c8:	681a      	ldr	r2, [r3, #0]
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	429a      	cmp	r2, r3
 800f5d0:	d113      	bne.n	800f5fa <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800f5d2:	4a3d      	ldr	r2, [pc, #244]	; (800f6c8 <inc_lock+0x118>)
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	011b      	lsls	r3, r3, #4
 800f5d8:	4413      	add	r3, r2
 800f5da:	3304      	adds	r3, #4
 800f5dc:	681a      	ldr	r2, [r3, #0]
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800f5e2:	429a      	cmp	r2, r3
 800f5e4:	d109      	bne.n	800f5fa <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800f5e6:	4a38      	ldr	r2, [pc, #224]	; (800f6c8 <inc_lock+0x118>)
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	011b      	lsls	r3, r3, #4
 800f5ec:	4413      	add	r3, r2
 800f5ee:	3308      	adds	r3, #8
 800f5f0:	681a      	ldr	r2, [r3, #0]
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800f5f6:	429a      	cmp	r2, r3
 800f5f8:	d006      	beq.n	800f608 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	3301      	adds	r3, #1
 800f5fe:	60fb      	str	r3, [r7, #12]
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	2b01      	cmp	r3, #1
 800f604:	d9dc      	bls.n	800f5c0 <inc_lock+0x10>
 800f606:	e000      	b.n	800f60a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800f608:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	2b02      	cmp	r3, #2
 800f60e:	d132      	bne.n	800f676 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f610:	2300      	movs	r3, #0
 800f612:	60fb      	str	r3, [r7, #12]
 800f614:	e002      	b.n	800f61c <inc_lock+0x6c>
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	3301      	adds	r3, #1
 800f61a:	60fb      	str	r3, [r7, #12]
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	2b01      	cmp	r3, #1
 800f620:	d806      	bhi.n	800f630 <inc_lock+0x80>
 800f622:	4a29      	ldr	r2, [pc, #164]	; (800f6c8 <inc_lock+0x118>)
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	011b      	lsls	r3, r3, #4
 800f628:	4413      	add	r3, r2
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d1f2      	bne.n	800f616 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	2b02      	cmp	r3, #2
 800f634:	d101      	bne.n	800f63a <inc_lock+0x8a>
 800f636:	2300      	movs	r3, #0
 800f638:	e040      	b.n	800f6bc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	681a      	ldr	r2, [r3, #0]
 800f63e:	4922      	ldr	r1, [pc, #136]	; (800f6c8 <inc_lock+0x118>)
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	011b      	lsls	r3, r3, #4
 800f644:	440b      	add	r3, r1
 800f646:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	689a      	ldr	r2, [r3, #8]
 800f64c:	491e      	ldr	r1, [pc, #120]	; (800f6c8 <inc_lock+0x118>)
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	011b      	lsls	r3, r3, #4
 800f652:	440b      	add	r3, r1
 800f654:	3304      	adds	r3, #4
 800f656:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	695a      	ldr	r2, [r3, #20]
 800f65c:	491a      	ldr	r1, [pc, #104]	; (800f6c8 <inc_lock+0x118>)
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	011b      	lsls	r3, r3, #4
 800f662:	440b      	add	r3, r1
 800f664:	3308      	adds	r3, #8
 800f666:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800f668:	4a17      	ldr	r2, [pc, #92]	; (800f6c8 <inc_lock+0x118>)
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	011b      	lsls	r3, r3, #4
 800f66e:	4413      	add	r3, r2
 800f670:	330c      	adds	r3, #12
 800f672:	2200      	movs	r2, #0
 800f674:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800f676:	683b      	ldr	r3, [r7, #0]
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d009      	beq.n	800f690 <inc_lock+0xe0>
 800f67c:	4a12      	ldr	r2, [pc, #72]	; (800f6c8 <inc_lock+0x118>)
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	011b      	lsls	r3, r3, #4
 800f682:	4413      	add	r3, r2
 800f684:	330c      	adds	r3, #12
 800f686:	881b      	ldrh	r3, [r3, #0]
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d001      	beq.n	800f690 <inc_lock+0xe0>
 800f68c:	2300      	movs	r3, #0
 800f68e:	e015      	b.n	800f6bc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800f690:	683b      	ldr	r3, [r7, #0]
 800f692:	2b00      	cmp	r3, #0
 800f694:	d108      	bne.n	800f6a8 <inc_lock+0xf8>
 800f696:	4a0c      	ldr	r2, [pc, #48]	; (800f6c8 <inc_lock+0x118>)
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	011b      	lsls	r3, r3, #4
 800f69c:	4413      	add	r3, r2
 800f69e:	330c      	adds	r3, #12
 800f6a0:	881b      	ldrh	r3, [r3, #0]
 800f6a2:	3301      	adds	r3, #1
 800f6a4:	b29a      	uxth	r2, r3
 800f6a6:	e001      	b.n	800f6ac <inc_lock+0xfc>
 800f6a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f6ac:	4906      	ldr	r1, [pc, #24]	; (800f6c8 <inc_lock+0x118>)
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	011b      	lsls	r3, r3, #4
 800f6b2:	440b      	add	r3, r1
 800f6b4:	330c      	adds	r3, #12
 800f6b6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	3301      	adds	r3, #1
}
 800f6bc:	4618      	mov	r0, r3
 800f6be:	3714      	adds	r7, #20
 800f6c0:	46bd      	mov	sp, r7
 800f6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c6:	4770      	bx	lr
 800f6c8:	2000133c 	.word	0x2000133c

0800f6cc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800f6cc:	b480      	push	{r7}
 800f6ce:	b085      	sub	sp, #20
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	3b01      	subs	r3, #1
 800f6d8:	607b      	str	r3, [r7, #4]
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	2b01      	cmp	r3, #1
 800f6de:	d825      	bhi.n	800f72c <dec_lock+0x60>
		n = Files[i].ctr;
 800f6e0:	4a17      	ldr	r2, [pc, #92]	; (800f740 <dec_lock+0x74>)
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	011b      	lsls	r3, r3, #4
 800f6e6:	4413      	add	r3, r2
 800f6e8:	330c      	adds	r3, #12
 800f6ea:	881b      	ldrh	r3, [r3, #0]
 800f6ec:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800f6ee:	89fb      	ldrh	r3, [r7, #14]
 800f6f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f6f4:	d101      	bne.n	800f6fa <dec_lock+0x2e>
 800f6f6:	2300      	movs	r3, #0
 800f6f8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800f6fa:	89fb      	ldrh	r3, [r7, #14]
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d002      	beq.n	800f706 <dec_lock+0x3a>
 800f700:	89fb      	ldrh	r3, [r7, #14]
 800f702:	3b01      	subs	r3, #1
 800f704:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800f706:	4a0e      	ldr	r2, [pc, #56]	; (800f740 <dec_lock+0x74>)
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	011b      	lsls	r3, r3, #4
 800f70c:	4413      	add	r3, r2
 800f70e:	330c      	adds	r3, #12
 800f710:	89fa      	ldrh	r2, [r7, #14]
 800f712:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800f714:	89fb      	ldrh	r3, [r7, #14]
 800f716:	2b00      	cmp	r3, #0
 800f718:	d105      	bne.n	800f726 <dec_lock+0x5a>
 800f71a:	4a09      	ldr	r2, [pc, #36]	; (800f740 <dec_lock+0x74>)
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	011b      	lsls	r3, r3, #4
 800f720:	4413      	add	r3, r2
 800f722:	2200      	movs	r2, #0
 800f724:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800f726:	2300      	movs	r3, #0
 800f728:	737b      	strb	r3, [r7, #13]
 800f72a:	e001      	b.n	800f730 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800f72c:	2302      	movs	r3, #2
 800f72e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800f730:	7b7b      	ldrb	r3, [r7, #13]
}
 800f732:	4618      	mov	r0, r3
 800f734:	3714      	adds	r7, #20
 800f736:	46bd      	mov	sp, r7
 800f738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f73c:	4770      	bx	lr
 800f73e:	bf00      	nop
 800f740:	2000133c 	.word	0x2000133c

0800f744 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800f744:	b480      	push	{r7}
 800f746:	b085      	sub	sp, #20
 800f748:	af00      	add	r7, sp, #0
 800f74a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800f74c:	2300      	movs	r3, #0
 800f74e:	60fb      	str	r3, [r7, #12]
 800f750:	e010      	b.n	800f774 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f752:	4a0d      	ldr	r2, [pc, #52]	; (800f788 <clear_lock+0x44>)
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	011b      	lsls	r3, r3, #4
 800f758:	4413      	add	r3, r2
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	687a      	ldr	r2, [r7, #4]
 800f75e:	429a      	cmp	r2, r3
 800f760:	d105      	bne.n	800f76e <clear_lock+0x2a>
 800f762:	4a09      	ldr	r2, [pc, #36]	; (800f788 <clear_lock+0x44>)
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	011b      	lsls	r3, r3, #4
 800f768:	4413      	add	r3, r2
 800f76a:	2200      	movs	r2, #0
 800f76c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	3301      	adds	r3, #1
 800f772:	60fb      	str	r3, [r7, #12]
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	2b01      	cmp	r3, #1
 800f778:	d9eb      	bls.n	800f752 <clear_lock+0xe>
	}
}
 800f77a:	bf00      	nop
 800f77c:	bf00      	nop
 800f77e:	3714      	adds	r7, #20
 800f780:	46bd      	mov	sp, r7
 800f782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f786:	4770      	bx	lr
 800f788:	2000133c 	.word	0x2000133c

0800f78c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800f78c:	b580      	push	{r7, lr}
 800f78e:	b086      	sub	sp, #24
 800f790:	af00      	add	r7, sp, #0
 800f792:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800f794:	2300      	movs	r3, #0
 800f796:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	78db      	ldrb	r3, [r3, #3]
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d034      	beq.n	800f80a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f7a4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	7858      	ldrb	r0, [r3, #1]
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f7b0:	2301      	movs	r3, #1
 800f7b2:	697a      	ldr	r2, [r7, #20]
 800f7b4:	f7ff fd0e 	bl	800f1d4 <disk_write>
 800f7b8:	4603      	mov	r3, r0
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d002      	beq.n	800f7c4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800f7be:	2301      	movs	r3, #1
 800f7c0:	73fb      	strb	r3, [r7, #15]
 800f7c2:	e022      	b.n	800f80a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	2200      	movs	r2, #0
 800f7c8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7ce:	697a      	ldr	r2, [r7, #20]
 800f7d0:	1ad2      	subs	r2, r2, r3
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	69db      	ldr	r3, [r3, #28]
 800f7d6:	429a      	cmp	r2, r3
 800f7d8:	d217      	bcs.n	800f80a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	789b      	ldrb	r3, [r3, #2]
 800f7de:	613b      	str	r3, [r7, #16]
 800f7e0:	e010      	b.n	800f804 <sync_window+0x78>
					wsect += fs->fsize;
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	69db      	ldr	r3, [r3, #28]
 800f7e6:	697a      	ldr	r2, [r7, #20]
 800f7e8:	4413      	add	r3, r2
 800f7ea:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	7858      	ldrb	r0, [r3, #1]
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f7f6:	2301      	movs	r3, #1
 800f7f8:	697a      	ldr	r2, [r7, #20]
 800f7fa:	f7ff fceb 	bl	800f1d4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f7fe:	693b      	ldr	r3, [r7, #16]
 800f800:	3b01      	subs	r3, #1
 800f802:	613b      	str	r3, [r7, #16]
 800f804:	693b      	ldr	r3, [r7, #16]
 800f806:	2b01      	cmp	r3, #1
 800f808:	d8eb      	bhi.n	800f7e2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800f80a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f80c:	4618      	mov	r0, r3
 800f80e:	3718      	adds	r7, #24
 800f810:	46bd      	mov	sp, r7
 800f812:	bd80      	pop	{r7, pc}

0800f814 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800f814:	b580      	push	{r7, lr}
 800f816:	b084      	sub	sp, #16
 800f818:	af00      	add	r7, sp, #0
 800f81a:	6078      	str	r0, [r7, #4]
 800f81c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800f81e:	2300      	movs	r3, #0
 800f820:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f826:	683a      	ldr	r2, [r7, #0]
 800f828:	429a      	cmp	r2, r3
 800f82a:	d01b      	beq.n	800f864 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800f82c:	6878      	ldr	r0, [r7, #4]
 800f82e:	f7ff ffad 	bl	800f78c <sync_window>
 800f832:	4603      	mov	r3, r0
 800f834:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800f836:	7bfb      	ldrb	r3, [r7, #15]
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d113      	bne.n	800f864 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	7858      	ldrb	r0, [r3, #1]
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f846:	2301      	movs	r3, #1
 800f848:	683a      	ldr	r2, [r7, #0]
 800f84a:	f7ff fca3 	bl	800f194 <disk_read>
 800f84e:	4603      	mov	r3, r0
 800f850:	2b00      	cmp	r3, #0
 800f852:	d004      	beq.n	800f85e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800f854:	f04f 33ff 	mov.w	r3, #4294967295
 800f858:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800f85a:	2301      	movs	r3, #1
 800f85c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	683a      	ldr	r2, [r7, #0]
 800f862:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800f864:	7bfb      	ldrb	r3, [r7, #15]
}
 800f866:	4618      	mov	r0, r3
 800f868:	3710      	adds	r7, #16
 800f86a:	46bd      	mov	sp, r7
 800f86c:	bd80      	pop	{r7, pc}
	...

0800f870 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800f870:	b580      	push	{r7, lr}
 800f872:	b084      	sub	sp, #16
 800f874:	af00      	add	r7, sp, #0
 800f876:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800f878:	6878      	ldr	r0, [r7, #4]
 800f87a:	f7ff ff87 	bl	800f78c <sync_window>
 800f87e:	4603      	mov	r3, r0
 800f880:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f882:	7bfb      	ldrb	r3, [r7, #15]
 800f884:	2b00      	cmp	r3, #0
 800f886:	d158      	bne.n	800f93a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	781b      	ldrb	r3, [r3, #0]
 800f88c:	2b03      	cmp	r3, #3
 800f88e:	d148      	bne.n	800f922 <sync_fs+0xb2>
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	791b      	ldrb	r3, [r3, #4]
 800f894:	2b01      	cmp	r3, #1
 800f896:	d144      	bne.n	800f922 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	3334      	adds	r3, #52	; 0x34
 800f89c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f8a0:	2100      	movs	r1, #0
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	f7ff fd77 	bl	800f396 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	3334      	adds	r3, #52	; 0x34
 800f8ac:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f8b0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800f8b4:	4618      	mov	r0, r3
 800f8b6:	f7ff fd06 	bl	800f2c6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	3334      	adds	r3, #52	; 0x34
 800f8be:	4921      	ldr	r1, [pc, #132]	; (800f944 <sync_fs+0xd4>)
 800f8c0:	4618      	mov	r0, r3
 800f8c2:	f7ff fd1b 	bl	800f2fc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	3334      	adds	r3, #52	; 0x34
 800f8ca:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f8ce:	491e      	ldr	r1, [pc, #120]	; (800f948 <sync_fs+0xd8>)
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	f7ff fd13 	bl	800f2fc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	3334      	adds	r3, #52	; 0x34
 800f8da:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	695b      	ldr	r3, [r3, #20]
 800f8e2:	4619      	mov	r1, r3
 800f8e4:	4610      	mov	r0, r2
 800f8e6:	f7ff fd09 	bl	800f2fc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	3334      	adds	r3, #52	; 0x34
 800f8ee:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	691b      	ldr	r3, [r3, #16]
 800f8f6:	4619      	mov	r1, r3
 800f8f8:	4610      	mov	r0, r2
 800f8fa:	f7ff fcff 	bl	800f2fc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	6a1b      	ldr	r3, [r3, #32]
 800f902:	1c5a      	adds	r2, r3, #1
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	7858      	ldrb	r0, [r3, #1]
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f916:	2301      	movs	r3, #1
 800f918:	f7ff fc5c 	bl	800f1d4 <disk_write>
			fs->fsi_flag = 0;
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	2200      	movs	r2, #0
 800f920:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	785b      	ldrb	r3, [r3, #1]
 800f926:	2200      	movs	r2, #0
 800f928:	2100      	movs	r1, #0
 800f92a:	4618      	mov	r0, r3
 800f92c:	f7ff fc72 	bl	800f214 <disk_ioctl>
 800f930:	4603      	mov	r3, r0
 800f932:	2b00      	cmp	r3, #0
 800f934:	d001      	beq.n	800f93a <sync_fs+0xca>
 800f936:	2301      	movs	r3, #1
 800f938:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800f93a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f93c:	4618      	mov	r0, r3
 800f93e:	3710      	adds	r7, #16
 800f940:	46bd      	mov	sp, r7
 800f942:	bd80      	pop	{r7, pc}
 800f944:	41615252 	.word	0x41615252
 800f948:	61417272 	.word	0x61417272

0800f94c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800f94c:	b480      	push	{r7}
 800f94e:	b083      	sub	sp, #12
 800f950:	af00      	add	r7, sp, #0
 800f952:	6078      	str	r0, [r7, #4]
 800f954:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800f956:	683b      	ldr	r3, [r7, #0]
 800f958:	3b02      	subs	r3, #2
 800f95a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	699b      	ldr	r3, [r3, #24]
 800f960:	3b02      	subs	r3, #2
 800f962:	683a      	ldr	r2, [r7, #0]
 800f964:	429a      	cmp	r2, r3
 800f966:	d301      	bcc.n	800f96c <clust2sect+0x20>
 800f968:	2300      	movs	r3, #0
 800f96a:	e008      	b.n	800f97e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	895b      	ldrh	r3, [r3, #10]
 800f970:	461a      	mov	r2, r3
 800f972:	683b      	ldr	r3, [r7, #0]
 800f974:	fb03 f202 	mul.w	r2, r3, r2
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f97c:	4413      	add	r3, r2
}
 800f97e:	4618      	mov	r0, r3
 800f980:	370c      	adds	r7, #12
 800f982:	46bd      	mov	sp, r7
 800f984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f988:	4770      	bx	lr

0800f98a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800f98a:	b580      	push	{r7, lr}
 800f98c:	b086      	sub	sp, #24
 800f98e:	af00      	add	r7, sp, #0
 800f990:	6078      	str	r0, [r7, #4]
 800f992:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800f99a:	683b      	ldr	r3, [r7, #0]
 800f99c:	2b01      	cmp	r3, #1
 800f99e:	d904      	bls.n	800f9aa <get_fat+0x20>
 800f9a0:	693b      	ldr	r3, [r7, #16]
 800f9a2:	699b      	ldr	r3, [r3, #24]
 800f9a4:	683a      	ldr	r2, [r7, #0]
 800f9a6:	429a      	cmp	r2, r3
 800f9a8:	d302      	bcc.n	800f9b0 <get_fat+0x26>
		val = 1;	/* Internal error */
 800f9aa:	2301      	movs	r3, #1
 800f9ac:	617b      	str	r3, [r7, #20]
 800f9ae:	e08f      	b.n	800fad0 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800f9b0:	f04f 33ff 	mov.w	r3, #4294967295
 800f9b4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800f9b6:	693b      	ldr	r3, [r7, #16]
 800f9b8:	781b      	ldrb	r3, [r3, #0]
 800f9ba:	2b03      	cmp	r3, #3
 800f9bc:	d062      	beq.n	800fa84 <get_fat+0xfa>
 800f9be:	2b03      	cmp	r3, #3
 800f9c0:	dc7c      	bgt.n	800fabc <get_fat+0x132>
 800f9c2:	2b01      	cmp	r3, #1
 800f9c4:	d002      	beq.n	800f9cc <get_fat+0x42>
 800f9c6:	2b02      	cmp	r3, #2
 800f9c8:	d042      	beq.n	800fa50 <get_fat+0xc6>
 800f9ca:	e077      	b.n	800fabc <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800f9cc:	683b      	ldr	r3, [r7, #0]
 800f9ce:	60fb      	str	r3, [r7, #12]
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	085b      	lsrs	r3, r3, #1
 800f9d4:	68fa      	ldr	r2, [r7, #12]
 800f9d6:	4413      	add	r3, r2
 800f9d8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f9da:	693b      	ldr	r3, [r7, #16]
 800f9dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	0a5b      	lsrs	r3, r3, #9
 800f9e2:	4413      	add	r3, r2
 800f9e4:	4619      	mov	r1, r3
 800f9e6:	6938      	ldr	r0, [r7, #16]
 800f9e8:	f7ff ff14 	bl	800f814 <move_window>
 800f9ec:	4603      	mov	r3, r0
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d167      	bne.n	800fac2 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	1c5a      	adds	r2, r3, #1
 800f9f6:	60fa      	str	r2, [r7, #12]
 800f9f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f9fc:	693a      	ldr	r2, [r7, #16]
 800f9fe:	4413      	add	r3, r2
 800fa00:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fa04:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fa06:	693b      	ldr	r3, [r7, #16]
 800fa08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	0a5b      	lsrs	r3, r3, #9
 800fa0e:	4413      	add	r3, r2
 800fa10:	4619      	mov	r1, r3
 800fa12:	6938      	ldr	r0, [r7, #16]
 800fa14:	f7ff fefe 	bl	800f814 <move_window>
 800fa18:	4603      	mov	r3, r0
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d153      	bne.n	800fac6 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fa24:	693a      	ldr	r2, [r7, #16]
 800fa26:	4413      	add	r3, r2
 800fa28:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fa2c:	021b      	lsls	r3, r3, #8
 800fa2e:	461a      	mov	r2, r3
 800fa30:	68bb      	ldr	r3, [r7, #8]
 800fa32:	4313      	orrs	r3, r2
 800fa34:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800fa36:	683b      	ldr	r3, [r7, #0]
 800fa38:	f003 0301 	and.w	r3, r3, #1
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d002      	beq.n	800fa46 <get_fat+0xbc>
 800fa40:	68bb      	ldr	r3, [r7, #8]
 800fa42:	091b      	lsrs	r3, r3, #4
 800fa44:	e002      	b.n	800fa4c <get_fat+0xc2>
 800fa46:	68bb      	ldr	r3, [r7, #8]
 800fa48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fa4c:	617b      	str	r3, [r7, #20]
			break;
 800fa4e:	e03f      	b.n	800fad0 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800fa50:	693b      	ldr	r3, [r7, #16]
 800fa52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fa54:	683b      	ldr	r3, [r7, #0]
 800fa56:	0a1b      	lsrs	r3, r3, #8
 800fa58:	4413      	add	r3, r2
 800fa5a:	4619      	mov	r1, r3
 800fa5c:	6938      	ldr	r0, [r7, #16]
 800fa5e:	f7ff fed9 	bl	800f814 <move_window>
 800fa62:	4603      	mov	r3, r0
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d130      	bne.n	800faca <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800fa68:	693b      	ldr	r3, [r7, #16]
 800fa6a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800fa6e:	683b      	ldr	r3, [r7, #0]
 800fa70:	005b      	lsls	r3, r3, #1
 800fa72:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800fa76:	4413      	add	r3, r2
 800fa78:	4618      	mov	r0, r3
 800fa7a:	f7ff fbe9 	bl	800f250 <ld_word>
 800fa7e:	4603      	mov	r3, r0
 800fa80:	617b      	str	r3, [r7, #20]
			break;
 800fa82:	e025      	b.n	800fad0 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800fa84:	693b      	ldr	r3, [r7, #16]
 800fa86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fa88:	683b      	ldr	r3, [r7, #0]
 800fa8a:	09db      	lsrs	r3, r3, #7
 800fa8c:	4413      	add	r3, r2
 800fa8e:	4619      	mov	r1, r3
 800fa90:	6938      	ldr	r0, [r7, #16]
 800fa92:	f7ff febf 	bl	800f814 <move_window>
 800fa96:	4603      	mov	r3, r0
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d118      	bne.n	800face <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800fa9c:	693b      	ldr	r3, [r7, #16]
 800fa9e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800faa2:	683b      	ldr	r3, [r7, #0]
 800faa4:	009b      	lsls	r3, r3, #2
 800faa6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800faaa:	4413      	add	r3, r2
 800faac:	4618      	mov	r0, r3
 800faae:	f7ff fbe7 	bl	800f280 <ld_dword>
 800fab2:	4603      	mov	r3, r0
 800fab4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800fab8:	617b      	str	r3, [r7, #20]
			break;
 800faba:	e009      	b.n	800fad0 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800fabc:	2301      	movs	r3, #1
 800fabe:	617b      	str	r3, [r7, #20]
 800fac0:	e006      	b.n	800fad0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fac2:	bf00      	nop
 800fac4:	e004      	b.n	800fad0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fac6:	bf00      	nop
 800fac8:	e002      	b.n	800fad0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800faca:	bf00      	nop
 800facc:	e000      	b.n	800fad0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800face:	bf00      	nop
		}
	}

	return val;
 800fad0:	697b      	ldr	r3, [r7, #20]
}
 800fad2:	4618      	mov	r0, r3
 800fad4:	3718      	adds	r7, #24
 800fad6:	46bd      	mov	sp, r7
 800fad8:	bd80      	pop	{r7, pc}

0800fada <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800fada:	b590      	push	{r4, r7, lr}
 800fadc:	b089      	sub	sp, #36	; 0x24
 800fade:	af00      	add	r7, sp, #0
 800fae0:	60f8      	str	r0, [r7, #12]
 800fae2:	60b9      	str	r1, [r7, #8]
 800fae4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800fae6:	2302      	movs	r3, #2
 800fae8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800faea:	68bb      	ldr	r3, [r7, #8]
 800faec:	2b01      	cmp	r3, #1
 800faee:	f240 80d2 	bls.w	800fc96 <put_fat+0x1bc>
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	699b      	ldr	r3, [r3, #24]
 800faf6:	68ba      	ldr	r2, [r7, #8]
 800faf8:	429a      	cmp	r2, r3
 800fafa:	f080 80cc 	bcs.w	800fc96 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	781b      	ldrb	r3, [r3, #0]
 800fb02:	2b03      	cmp	r3, #3
 800fb04:	f000 8096 	beq.w	800fc34 <put_fat+0x15a>
 800fb08:	2b03      	cmp	r3, #3
 800fb0a:	f300 80cd 	bgt.w	800fca8 <put_fat+0x1ce>
 800fb0e:	2b01      	cmp	r3, #1
 800fb10:	d002      	beq.n	800fb18 <put_fat+0x3e>
 800fb12:	2b02      	cmp	r3, #2
 800fb14:	d06e      	beq.n	800fbf4 <put_fat+0x11a>
 800fb16:	e0c7      	b.n	800fca8 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800fb18:	68bb      	ldr	r3, [r7, #8]
 800fb1a:	61bb      	str	r3, [r7, #24]
 800fb1c:	69bb      	ldr	r3, [r7, #24]
 800fb1e:	085b      	lsrs	r3, r3, #1
 800fb20:	69ba      	ldr	r2, [r7, #24]
 800fb22:	4413      	add	r3, r2
 800fb24:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fb2a:	69bb      	ldr	r3, [r7, #24]
 800fb2c:	0a5b      	lsrs	r3, r3, #9
 800fb2e:	4413      	add	r3, r2
 800fb30:	4619      	mov	r1, r3
 800fb32:	68f8      	ldr	r0, [r7, #12]
 800fb34:	f7ff fe6e 	bl	800f814 <move_window>
 800fb38:	4603      	mov	r3, r0
 800fb3a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fb3c:	7ffb      	ldrb	r3, [r7, #31]
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	f040 80ab 	bne.w	800fc9a <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800fb4a:	69bb      	ldr	r3, [r7, #24]
 800fb4c:	1c59      	adds	r1, r3, #1
 800fb4e:	61b9      	str	r1, [r7, #24]
 800fb50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fb54:	4413      	add	r3, r2
 800fb56:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800fb58:	68bb      	ldr	r3, [r7, #8]
 800fb5a:	f003 0301 	and.w	r3, r3, #1
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d00d      	beq.n	800fb7e <put_fat+0xa4>
 800fb62:	697b      	ldr	r3, [r7, #20]
 800fb64:	781b      	ldrb	r3, [r3, #0]
 800fb66:	b25b      	sxtb	r3, r3
 800fb68:	f003 030f 	and.w	r3, r3, #15
 800fb6c:	b25a      	sxtb	r2, r3
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	b2db      	uxtb	r3, r3
 800fb72:	011b      	lsls	r3, r3, #4
 800fb74:	b25b      	sxtb	r3, r3
 800fb76:	4313      	orrs	r3, r2
 800fb78:	b25b      	sxtb	r3, r3
 800fb7a:	b2db      	uxtb	r3, r3
 800fb7c:	e001      	b.n	800fb82 <put_fat+0xa8>
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	b2db      	uxtb	r3, r3
 800fb82:	697a      	ldr	r2, [r7, #20]
 800fb84:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	2201      	movs	r2, #1
 800fb8a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fb90:	69bb      	ldr	r3, [r7, #24]
 800fb92:	0a5b      	lsrs	r3, r3, #9
 800fb94:	4413      	add	r3, r2
 800fb96:	4619      	mov	r1, r3
 800fb98:	68f8      	ldr	r0, [r7, #12]
 800fb9a:	f7ff fe3b 	bl	800f814 <move_window>
 800fb9e:	4603      	mov	r3, r0
 800fba0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fba2:	7ffb      	ldrb	r3, [r7, #31]
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d17a      	bne.n	800fc9e <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800fbae:	69bb      	ldr	r3, [r7, #24]
 800fbb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fbb4:	4413      	add	r3, r2
 800fbb6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800fbb8:	68bb      	ldr	r3, [r7, #8]
 800fbba:	f003 0301 	and.w	r3, r3, #1
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d003      	beq.n	800fbca <put_fat+0xf0>
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	091b      	lsrs	r3, r3, #4
 800fbc6:	b2db      	uxtb	r3, r3
 800fbc8:	e00e      	b.n	800fbe8 <put_fat+0x10e>
 800fbca:	697b      	ldr	r3, [r7, #20]
 800fbcc:	781b      	ldrb	r3, [r3, #0]
 800fbce:	b25b      	sxtb	r3, r3
 800fbd0:	f023 030f 	bic.w	r3, r3, #15
 800fbd4:	b25a      	sxtb	r2, r3
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	0a1b      	lsrs	r3, r3, #8
 800fbda:	b25b      	sxtb	r3, r3
 800fbdc:	f003 030f 	and.w	r3, r3, #15
 800fbe0:	b25b      	sxtb	r3, r3
 800fbe2:	4313      	orrs	r3, r2
 800fbe4:	b25b      	sxtb	r3, r3
 800fbe6:	b2db      	uxtb	r3, r3
 800fbe8:	697a      	ldr	r2, [r7, #20]
 800fbea:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	2201      	movs	r2, #1
 800fbf0:	70da      	strb	r2, [r3, #3]
			break;
 800fbf2:	e059      	b.n	800fca8 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fbf8:	68bb      	ldr	r3, [r7, #8]
 800fbfa:	0a1b      	lsrs	r3, r3, #8
 800fbfc:	4413      	add	r3, r2
 800fbfe:	4619      	mov	r1, r3
 800fc00:	68f8      	ldr	r0, [r7, #12]
 800fc02:	f7ff fe07 	bl	800f814 <move_window>
 800fc06:	4603      	mov	r3, r0
 800fc08:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fc0a:	7ffb      	ldrb	r3, [r7, #31]
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d148      	bne.n	800fca2 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800fc16:	68bb      	ldr	r3, [r7, #8]
 800fc18:	005b      	lsls	r3, r3, #1
 800fc1a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800fc1e:	4413      	add	r3, r2
 800fc20:	687a      	ldr	r2, [r7, #4]
 800fc22:	b292      	uxth	r2, r2
 800fc24:	4611      	mov	r1, r2
 800fc26:	4618      	mov	r0, r3
 800fc28:	f7ff fb4d 	bl	800f2c6 <st_word>
			fs->wflag = 1;
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	2201      	movs	r2, #1
 800fc30:	70da      	strb	r2, [r3, #3]
			break;
 800fc32:	e039      	b.n	800fca8 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fc38:	68bb      	ldr	r3, [r7, #8]
 800fc3a:	09db      	lsrs	r3, r3, #7
 800fc3c:	4413      	add	r3, r2
 800fc3e:	4619      	mov	r1, r3
 800fc40:	68f8      	ldr	r0, [r7, #12]
 800fc42:	f7ff fde7 	bl	800f814 <move_window>
 800fc46:	4603      	mov	r3, r0
 800fc48:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fc4a:	7ffb      	ldrb	r3, [r7, #31]
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d12a      	bne.n	800fca6 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800fc5c:	68bb      	ldr	r3, [r7, #8]
 800fc5e:	009b      	lsls	r3, r3, #2
 800fc60:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800fc64:	4413      	add	r3, r2
 800fc66:	4618      	mov	r0, r3
 800fc68:	f7ff fb0a 	bl	800f280 <ld_dword>
 800fc6c:	4603      	mov	r3, r0
 800fc6e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800fc72:	4323      	orrs	r3, r4
 800fc74:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800fc7c:	68bb      	ldr	r3, [r7, #8]
 800fc7e:	009b      	lsls	r3, r3, #2
 800fc80:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800fc84:	4413      	add	r3, r2
 800fc86:	6879      	ldr	r1, [r7, #4]
 800fc88:	4618      	mov	r0, r3
 800fc8a:	f7ff fb37 	bl	800f2fc <st_dword>
			fs->wflag = 1;
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	2201      	movs	r2, #1
 800fc92:	70da      	strb	r2, [r3, #3]
			break;
 800fc94:	e008      	b.n	800fca8 <put_fat+0x1ce>
		}
	}
 800fc96:	bf00      	nop
 800fc98:	e006      	b.n	800fca8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800fc9a:	bf00      	nop
 800fc9c:	e004      	b.n	800fca8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800fc9e:	bf00      	nop
 800fca0:	e002      	b.n	800fca8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800fca2:	bf00      	nop
 800fca4:	e000      	b.n	800fca8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800fca6:	bf00      	nop
	return res;
 800fca8:	7ffb      	ldrb	r3, [r7, #31]
}
 800fcaa:	4618      	mov	r0, r3
 800fcac:	3724      	adds	r7, #36	; 0x24
 800fcae:	46bd      	mov	sp, r7
 800fcb0:	bd90      	pop	{r4, r7, pc}

0800fcb2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800fcb2:	b580      	push	{r7, lr}
 800fcb4:	b088      	sub	sp, #32
 800fcb6:	af00      	add	r7, sp, #0
 800fcb8:	60f8      	str	r0, [r7, #12]
 800fcba:	60b9      	str	r1, [r7, #8]
 800fcbc:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800fcbe:	2300      	movs	r3, #0
 800fcc0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800fcc8:	68bb      	ldr	r3, [r7, #8]
 800fcca:	2b01      	cmp	r3, #1
 800fccc:	d904      	bls.n	800fcd8 <remove_chain+0x26>
 800fcce:	69bb      	ldr	r3, [r7, #24]
 800fcd0:	699b      	ldr	r3, [r3, #24]
 800fcd2:	68ba      	ldr	r2, [r7, #8]
 800fcd4:	429a      	cmp	r2, r3
 800fcd6:	d301      	bcc.n	800fcdc <remove_chain+0x2a>
 800fcd8:	2302      	movs	r3, #2
 800fcda:	e04b      	b.n	800fd74 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d00c      	beq.n	800fcfc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800fce2:	f04f 32ff 	mov.w	r2, #4294967295
 800fce6:	6879      	ldr	r1, [r7, #4]
 800fce8:	69b8      	ldr	r0, [r7, #24]
 800fcea:	f7ff fef6 	bl	800fada <put_fat>
 800fcee:	4603      	mov	r3, r0
 800fcf0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800fcf2:	7ffb      	ldrb	r3, [r7, #31]
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d001      	beq.n	800fcfc <remove_chain+0x4a>
 800fcf8:	7ffb      	ldrb	r3, [r7, #31]
 800fcfa:	e03b      	b.n	800fd74 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800fcfc:	68b9      	ldr	r1, [r7, #8]
 800fcfe:	68f8      	ldr	r0, [r7, #12]
 800fd00:	f7ff fe43 	bl	800f98a <get_fat>
 800fd04:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800fd06:	697b      	ldr	r3, [r7, #20]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d031      	beq.n	800fd70 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800fd0c:	697b      	ldr	r3, [r7, #20]
 800fd0e:	2b01      	cmp	r3, #1
 800fd10:	d101      	bne.n	800fd16 <remove_chain+0x64>
 800fd12:	2302      	movs	r3, #2
 800fd14:	e02e      	b.n	800fd74 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800fd16:	697b      	ldr	r3, [r7, #20]
 800fd18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd1c:	d101      	bne.n	800fd22 <remove_chain+0x70>
 800fd1e:	2301      	movs	r3, #1
 800fd20:	e028      	b.n	800fd74 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800fd22:	2200      	movs	r2, #0
 800fd24:	68b9      	ldr	r1, [r7, #8]
 800fd26:	69b8      	ldr	r0, [r7, #24]
 800fd28:	f7ff fed7 	bl	800fada <put_fat>
 800fd2c:	4603      	mov	r3, r0
 800fd2e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800fd30:	7ffb      	ldrb	r3, [r7, #31]
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d001      	beq.n	800fd3a <remove_chain+0x88>
 800fd36:	7ffb      	ldrb	r3, [r7, #31]
 800fd38:	e01c      	b.n	800fd74 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800fd3a:	69bb      	ldr	r3, [r7, #24]
 800fd3c:	695a      	ldr	r2, [r3, #20]
 800fd3e:	69bb      	ldr	r3, [r7, #24]
 800fd40:	699b      	ldr	r3, [r3, #24]
 800fd42:	3b02      	subs	r3, #2
 800fd44:	429a      	cmp	r2, r3
 800fd46:	d20b      	bcs.n	800fd60 <remove_chain+0xae>
			fs->free_clst++;
 800fd48:	69bb      	ldr	r3, [r7, #24]
 800fd4a:	695b      	ldr	r3, [r3, #20]
 800fd4c:	1c5a      	adds	r2, r3, #1
 800fd4e:	69bb      	ldr	r3, [r7, #24]
 800fd50:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800fd52:	69bb      	ldr	r3, [r7, #24]
 800fd54:	791b      	ldrb	r3, [r3, #4]
 800fd56:	f043 0301 	orr.w	r3, r3, #1
 800fd5a:	b2da      	uxtb	r2, r3
 800fd5c:	69bb      	ldr	r3, [r7, #24]
 800fd5e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800fd60:	697b      	ldr	r3, [r7, #20]
 800fd62:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800fd64:	69bb      	ldr	r3, [r7, #24]
 800fd66:	699b      	ldr	r3, [r3, #24]
 800fd68:	68ba      	ldr	r2, [r7, #8]
 800fd6a:	429a      	cmp	r2, r3
 800fd6c:	d3c6      	bcc.n	800fcfc <remove_chain+0x4a>
 800fd6e:	e000      	b.n	800fd72 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800fd70:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800fd72:	2300      	movs	r3, #0
}
 800fd74:	4618      	mov	r0, r3
 800fd76:	3720      	adds	r7, #32
 800fd78:	46bd      	mov	sp, r7
 800fd7a:	bd80      	pop	{r7, pc}

0800fd7c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800fd7c:	b580      	push	{r7, lr}
 800fd7e:	b088      	sub	sp, #32
 800fd80:	af00      	add	r7, sp, #0
 800fd82:	6078      	str	r0, [r7, #4]
 800fd84:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800fd8c:	683b      	ldr	r3, [r7, #0]
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d10d      	bne.n	800fdae <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800fd92:	693b      	ldr	r3, [r7, #16]
 800fd94:	691b      	ldr	r3, [r3, #16]
 800fd96:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800fd98:	69bb      	ldr	r3, [r7, #24]
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d004      	beq.n	800fda8 <create_chain+0x2c>
 800fd9e:	693b      	ldr	r3, [r7, #16]
 800fda0:	699b      	ldr	r3, [r3, #24]
 800fda2:	69ba      	ldr	r2, [r7, #24]
 800fda4:	429a      	cmp	r2, r3
 800fda6:	d31b      	bcc.n	800fde0 <create_chain+0x64>
 800fda8:	2301      	movs	r3, #1
 800fdaa:	61bb      	str	r3, [r7, #24]
 800fdac:	e018      	b.n	800fde0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800fdae:	6839      	ldr	r1, [r7, #0]
 800fdb0:	6878      	ldr	r0, [r7, #4]
 800fdb2:	f7ff fdea 	bl	800f98a <get_fat>
 800fdb6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	2b01      	cmp	r3, #1
 800fdbc:	d801      	bhi.n	800fdc2 <create_chain+0x46>
 800fdbe:	2301      	movs	r3, #1
 800fdc0:	e070      	b.n	800fea4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fdc8:	d101      	bne.n	800fdce <create_chain+0x52>
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	e06a      	b.n	800fea4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800fdce:	693b      	ldr	r3, [r7, #16]
 800fdd0:	699b      	ldr	r3, [r3, #24]
 800fdd2:	68fa      	ldr	r2, [r7, #12]
 800fdd4:	429a      	cmp	r2, r3
 800fdd6:	d201      	bcs.n	800fddc <create_chain+0x60>
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	e063      	b.n	800fea4 <create_chain+0x128>
		scl = clst;
 800fddc:	683b      	ldr	r3, [r7, #0]
 800fdde:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800fde0:	69bb      	ldr	r3, [r7, #24]
 800fde2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800fde4:	69fb      	ldr	r3, [r7, #28]
 800fde6:	3301      	adds	r3, #1
 800fde8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800fdea:	693b      	ldr	r3, [r7, #16]
 800fdec:	699b      	ldr	r3, [r3, #24]
 800fdee:	69fa      	ldr	r2, [r7, #28]
 800fdf0:	429a      	cmp	r2, r3
 800fdf2:	d307      	bcc.n	800fe04 <create_chain+0x88>
				ncl = 2;
 800fdf4:	2302      	movs	r3, #2
 800fdf6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800fdf8:	69fa      	ldr	r2, [r7, #28]
 800fdfa:	69bb      	ldr	r3, [r7, #24]
 800fdfc:	429a      	cmp	r2, r3
 800fdfe:	d901      	bls.n	800fe04 <create_chain+0x88>
 800fe00:	2300      	movs	r3, #0
 800fe02:	e04f      	b.n	800fea4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800fe04:	69f9      	ldr	r1, [r7, #28]
 800fe06:	6878      	ldr	r0, [r7, #4]
 800fe08:	f7ff fdbf 	bl	800f98a <get_fat>
 800fe0c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d00e      	beq.n	800fe32 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	2b01      	cmp	r3, #1
 800fe18:	d003      	beq.n	800fe22 <create_chain+0xa6>
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe20:	d101      	bne.n	800fe26 <create_chain+0xaa>
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	e03e      	b.n	800fea4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800fe26:	69fa      	ldr	r2, [r7, #28]
 800fe28:	69bb      	ldr	r3, [r7, #24]
 800fe2a:	429a      	cmp	r2, r3
 800fe2c:	d1da      	bne.n	800fde4 <create_chain+0x68>
 800fe2e:	2300      	movs	r3, #0
 800fe30:	e038      	b.n	800fea4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800fe32:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800fe34:	f04f 32ff 	mov.w	r2, #4294967295
 800fe38:	69f9      	ldr	r1, [r7, #28]
 800fe3a:	6938      	ldr	r0, [r7, #16]
 800fe3c:	f7ff fe4d 	bl	800fada <put_fat>
 800fe40:	4603      	mov	r3, r0
 800fe42:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800fe44:	7dfb      	ldrb	r3, [r7, #23]
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d109      	bne.n	800fe5e <create_chain+0xe2>
 800fe4a:	683b      	ldr	r3, [r7, #0]
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d006      	beq.n	800fe5e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800fe50:	69fa      	ldr	r2, [r7, #28]
 800fe52:	6839      	ldr	r1, [r7, #0]
 800fe54:	6938      	ldr	r0, [r7, #16]
 800fe56:	f7ff fe40 	bl	800fada <put_fat>
 800fe5a:	4603      	mov	r3, r0
 800fe5c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800fe5e:	7dfb      	ldrb	r3, [r7, #23]
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d116      	bne.n	800fe92 <create_chain+0x116>
		fs->last_clst = ncl;
 800fe64:	693b      	ldr	r3, [r7, #16]
 800fe66:	69fa      	ldr	r2, [r7, #28]
 800fe68:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800fe6a:	693b      	ldr	r3, [r7, #16]
 800fe6c:	695a      	ldr	r2, [r3, #20]
 800fe6e:	693b      	ldr	r3, [r7, #16]
 800fe70:	699b      	ldr	r3, [r3, #24]
 800fe72:	3b02      	subs	r3, #2
 800fe74:	429a      	cmp	r2, r3
 800fe76:	d804      	bhi.n	800fe82 <create_chain+0x106>
 800fe78:	693b      	ldr	r3, [r7, #16]
 800fe7a:	695b      	ldr	r3, [r3, #20]
 800fe7c:	1e5a      	subs	r2, r3, #1
 800fe7e:	693b      	ldr	r3, [r7, #16]
 800fe80:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800fe82:	693b      	ldr	r3, [r7, #16]
 800fe84:	791b      	ldrb	r3, [r3, #4]
 800fe86:	f043 0301 	orr.w	r3, r3, #1
 800fe8a:	b2da      	uxtb	r2, r3
 800fe8c:	693b      	ldr	r3, [r7, #16]
 800fe8e:	711a      	strb	r2, [r3, #4]
 800fe90:	e007      	b.n	800fea2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800fe92:	7dfb      	ldrb	r3, [r7, #23]
 800fe94:	2b01      	cmp	r3, #1
 800fe96:	d102      	bne.n	800fe9e <create_chain+0x122>
 800fe98:	f04f 33ff 	mov.w	r3, #4294967295
 800fe9c:	e000      	b.n	800fea0 <create_chain+0x124>
 800fe9e:	2301      	movs	r3, #1
 800fea0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800fea2:	69fb      	ldr	r3, [r7, #28]
}
 800fea4:	4618      	mov	r0, r3
 800fea6:	3720      	adds	r7, #32
 800fea8:	46bd      	mov	sp, r7
 800feaa:	bd80      	pop	{r7, pc}

0800feac <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800feac:	b480      	push	{r7}
 800feae:	b087      	sub	sp, #28
 800feb0:	af00      	add	r7, sp, #0
 800feb2:	6078      	str	r0, [r7, #4]
 800feb4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fec0:	3304      	adds	r3, #4
 800fec2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800fec4:	683b      	ldr	r3, [r7, #0]
 800fec6:	0a5b      	lsrs	r3, r3, #9
 800fec8:	68fa      	ldr	r2, [r7, #12]
 800feca:	8952      	ldrh	r2, [r2, #10]
 800fecc:	fbb3 f3f2 	udiv	r3, r3, r2
 800fed0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800fed2:	693b      	ldr	r3, [r7, #16]
 800fed4:	1d1a      	adds	r2, r3, #4
 800fed6:	613a      	str	r2, [r7, #16]
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800fedc:	68bb      	ldr	r3, [r7, #8]
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d101      	bne.n	800fee6 <clmt_clust+0x3a>
 800fee2:	2300      	movs	r3, #0
 800fee4:	e010      	b.n	800ff08 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800fee6:	697a      	ldr	r2, [r7, #20]
 800fee8:	68bb      	ldr	r3, [r7, #8]
 800feea:	429a      	cmp	r2, r3
 800feec:	d307      	bcc.n	800fefe <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800feee:	697a      	ldr	r2, [r7, #20]
 800fef0:	68bb      	ldr	r3, [r7, #8]
 800fef2:	1ad3      	subs	r3, r2, r3
 800fef4:	617b      	str	r3, [r7, #20]
 800fef6:	693b      	ldr	r3, [r7, #16]
 800fef8:	3304      	adds	r3, #4
 800fefa:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800fefc:	e7e9      	b.n	800fed2 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800fefe:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ff00:	693b      	ldr	r3, [r7, #16]
 800ff02:	681a      	ldr	r2, [r3, #0]
 800ff04:	697b      	ldr	r3, [r7, #20]
 800ff06:	4413      	add	r3, r2
}
 800ff08:	4618      	mov	r0, r3
 800ff0a:	371c      	adds	r7, #28
 800ff0c:	46bd      	mov	sp, r7
 800ff0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff12:	4770      	bx	lr

0800ff14 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ff14:	b580      	push	{r7, lr}
 800ff16:	b086      	sub	sp, #24
 800ff18:	af00      	add	r7, sp, #0
 800ff1a:	6078      	str	r0, [r7, #4]
 800ff1c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ff24:	683b      	ldr	r3, [r7, #0]
 800ff26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ff2a:	d204      	bcs.n	800ff36 <dir_sdi+0x22>
 800ff2c:	683b      	ldr	r3, [r7, #0]
 800ff2e:	f003 031f 	and.w	r3, r3, #31
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d001      	beq.n	800ff3a <dir_sdi+0x26>
		return FR_INT_ERR;
 800ff36:	2302      	movs	r3, #2
 800ff38:	e063      	b.n	8010002 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	683a      	ldr	r2, [r7, #0]
 800ff3e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	689b      	ldr	r3, [r3, #8]
 800ff44:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ff46:	697b      	ldr	r3, [r7, #20]
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d106      	bne.n	800ff5a <dir_sdi+0x46>
 800ff4c:	693b      	ldr	r3, [r7, #16]
 800ff4e:	781b      	ldrb	r3, [r3, #0]
 800ff50:	2b02      	cmp	r3, #2
 800ff52:	d902      	bls.n	800ff5a <dir_sdi+0x46>
		clst = fs->dirbase;
 800ff54:	693b      	ldr	r3, [r7, #16]
 800ff56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff58:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ff5a:	697b      	ldr	r3, [r7, #20]
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d10c      	bne.n	800ff7a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ff60:	683b      	ldr	r3, [r7, #0]
 800ff62:	095b      	lsrs	r3, r3, #5
 800ff64:	693a      	ldr	r2, [r7, #16]
 800ff66:	8912      	ldrh	r2, [r2, #8]
 800ff68:	4293      	cmp	r3, r2
 800ff6a:	d301      	bcc.n	800ff70 <dir_sdi+0x5c>
 800ff6c:	2302      	movs	r3, #2
 800ff6e:	e048      	b.n	8010002 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800ff70:	693b      	ldr	r3, [r7, #16]
 800ff72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	61da      	str	r2, [r3, #28]
 800ff78:	e029      	b.n	800ffce <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ff7a:	693b      	ldr	r3, [r7, #16]
 800ff7c:	895b      	ldrh	r3, [r3, #10]
 800ff7e:	025b      	lsls	r3, r3, #9
 800ff80:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ff82:	e019      	b.n	800ffb8 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	6979      	ldr	r1, [r7, #20]
 800ff88:	4618      	mov	r0, r3
 800ff8a:	f7ff fcfe 	bl	800f98a <get_fat>
 800ff8e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ff90:	697b      	ldr	r3, [r7, #20]
 800ff92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff96:	d101      	bne.n	800ff9c <dir_sdi+0x88>
 800ff98:	2301      	movs	r3, #1
 800ff9a:	e032      	b.n	8010002 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ff9c:	697b      	ldr	r3, [r7, #20]
 800ff9e:	2b01      	cmp	r3, #1
 800ffa0:	d904      	bls.n	800ffac <dir_sdi+0x98>
 800ffa2:	693b      	ldr	r3, [r7, #16]
 800ffa4:	699b      	ldr	r3, [r3, #24]
 800ffa6:	697a      	ldr	r2, [r7, #20]
 800ffa8:	429a      	cmp	r2, r3
 800ffaa:	d301      	bcc.n	800ffb0 <dir_sdi+0x9c>
 800ffac:	2302      	movs	r3, #2
 800ffae:	e028      	b.n	8010002 <dir_sdi+0xee>
			ofs -= csz;
 800ffb0:	683a      	ldr	r2, [r7, #0]
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	1ad3      	subs	r3, r2, r3
 800ffb6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ffb8:	683a      	ldr	r2, [r7, #0]
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	429a      	cmp	r2, r3
 800ffbe:	d2e1      	bcs.n	800ff84 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800ffc0:	6979      	ldr	r1, [r7, #20]
 800ffc2:	6938      	ldr	r0, [r7, #16]
 800ffc4:	f7ff fcc2 	bl	800f94c <clust2sect>
 800ffc8:	4602      	mov	r2, r0
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	697a      	ldr	r2, [r7, #20]
 800ffd2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	69db      	ldr	r3, [r3, #28]
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d101      	bne.n	800ffe0 <dir_sdi+0xcc>
 800ffdc:	2302      	movs	r3, #2
 800ffde:	e010      	b.n	8010002 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	69da      	ldr	r2, [r3, #28]
 800ffe4:	683b      	ldr	r3, [r7, #0]
 800ffe6:	0a5b      	lsrs	r3, r3, #9
 800ffe8:	441a      	add	r2, r3
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ffee:	693b      	ldr	r3, [r7, #16]
 800fff0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800fff4:	683b      	ldr	r3, [r7, #0]
 800fff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fffa:	441a      	add	r2, r3
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8010000:	2300      	movs	r3, #0
}
 8010002:	4618      	mov	r0, r3
 8010004:	3718      	adds	r7, #24
 8010006:	46bd      	mov	sp, r7
 8010008:	bd80      	pop	{r7, pc}

0801000a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801000a:	b580      	push	{r7, lr}
 801000c:	b086      	sub	sp, #24
 801000e:	af00      	add	r7, sp, #0
 8010010:	6078      	str	r0, [r7, #4]
 8010012:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	695b      	ldr	r3, [r3, #20]
 801001e:	3320      	adds	r3, #32
 8010020:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	69db      	ldr	r3, [r3, #28]
 8010026:	2b00      	cmp	r3, #0
 8010028:	d003      	beq.n	8010032 <dir_next+0x28>
 801002a:	68bb      	ldr	r3, [r7, #8]
 801002c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010030:	d301      	bcc.n	8010036 <dir_next+0x2c>
 8010032:	2304      	movs	r3, #4
 8010034:	e0aa      	b.n	801018c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8010036:	68bb      	ldr	r3, [r7, #8]
 8010038:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801003c:	2b00      	cmp	r3, #0
 801003e:	f040 8098 	bne.w	8010172 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	69db      	ldr	r3, [r3, #28]
 8010046:	1c5a      	adds	r2, r3, #1
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	699b      	ldr	r3, [r3, #24]
 8010050:	2b00      	cmp	r3, #0
 8010052:	d10b      	bne.n	801006c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8010054:	68bb      	ldr	r3, [r7, #8]
 8010056:	095b      	lsrs	r3, r3, #5
 8010058:	68fa      	ldr	r2, [r7, #12]
 801005a:	8912      	ldrh	r2, [r2, #8]
 801005c:	4293      	cmp	r3, r2
 801005e:	f0c0 8088 	bcc.w	8010172 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	2200      	movs	r2, #0
 8010066:	61da      	str	r2, [r3, #28]
 8010068:	2304      	movs	r3, #4
 801006a:	e08f      	b.n	801018c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801006c:	68bb      	ldr	r3, [r7, #8]
 801006e:	0a5b      	lsrs	r3, r3, #9
 8010070:	68fa      	ldr	r2, [r7, #12]
 8010072:	8952      	ldrh	r2, [r2, #10]
 8010074:	3a01      	subs	r2, #1
 8010076:	4013      	ands	r3, r2
 8010078:	2b00      	cmp	r3, #0
 801007a:	d17a      	bne.n	8010172 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801007c:	687a      	ldr	r2, [r7, #4]
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	699b      	ldr	r3, [r3, #24]
 8010082:	4619      	mov	r1, r3
 8010084:	4610      	mov	r0, r2
 8010086:	f7ff fc80 	bl	800f98a <get_fat>
 801008a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801008c:	697b      	ldr	r3, [r7, #20]
 801008e:	2b01      	cmp	r3, #1
 8010090:	d801      	bhi.n	8010096 <dir_next+0x8c>
 8010092:	2302      	movs	r3, #2
 8010094:	e07a      	b.n	801018c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8010096:	697b      	ldr	r3, [r7, #20]
 8010098:	f1b3 3fff 	cmp.w	r3, #4294967295
 801009c:	d101      	bne.n	80100a2 <dir_next+0x98>
 801009e:	2301      	movs	r3, #1
 80100a0:	e074      	b.n	801018c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	699b      	ldr	r3, [r3, #24]
 80100a6:	697a      	ldr	r2, [r7, #20]
 80100a8:	429a      	cmp	r2, r3
 80100aa:	d358      	bcc.n	801015e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80100ac:	683b      	ldr	r3, [r7, #0]
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d104      	bne.n	80100bc <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	2200      	movs	r2, #0
 80100b6:	61da      	str	r2, [r3, #28]
 80100b8:	2304      	movs	r3, #4
 80100ba:	e067      	b.n	801018c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80100bc:	687a      	ldr	r2, [r7, #4]
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	699b      	ldr	r3, [r3, #24]
 80100c2:	4619      	mov	r1, r3
 80100c4:	4610      	mov	r0, r2
 80100c6:	f7ff fe59 	bl	800fd7c <create_chain>
 80100ca:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80100cc:	697b      	ldr	r3, [r7, #20]
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d101      	bne.n	80100d6 <dir_next+0xcc>
 80100d2:	2307      	movs	r3, #7
 80100d4:	e05a      	b.n	801018c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80100d6:	697b      	ldr	r3, [r7, #20]
 80100d8:	2b01      	cmp	r3, #1
 80100da:	d101      	bne.n	80100e0 <dir_next+0xd6>
 80100dc:	2302      	movs	r3, #2
 80100de:	e055      	b.n	801018c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80100e0:	697b      	ldr	r3, [r7, #20]
 80100e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100e6:	d101      	bne.n	80100ec <dir_next+0xe2>
 80100e8:	2301      	movs	r3, #1
 80100ea:	e04f      	b.n	801018c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80100ec:	68f8      	ldr	r0, [r7, #12]
 80100ee:	f7ff fb4d 	bl	800f78c <sync_window>
 80100f2:	4603      	mov	r3, r0
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d001      	beq.n	80100fc <dir_next+0xf2>
 80100f8:	2301      	movs	r3, #1
 80100fa:	e047      	b.n	801018c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	3334      	adds	r3, #52	; 0x34
 8010100:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010104:	2100      	movs	r1, #0
 8010106:	4618      	mov	r0, r3
 8010108:	f7ff f945 	bl	800f396 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801010c:	2300      	movs	r3, #0
 801010e:	613b      	str	r3, [r7, #16]
 8010110:	6979      	ldr	r1, [r7, #20]
 8010112:	68f8      	ldr	r0, [r7, #12]
 8010114:	f7ff fc1a 	bl	800f94c <clust2sect>
 8010118:	4602      	mov	r2, r0
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	631a      	str	r2, [r3, #48]	; 0x30
 801011e:	e012      	b.n	8010146 <dir_next+0x13c>
						fs->wflag = 1;
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	2201      	movs	r2, #1
 8010124:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8010126:	68f8      	ldr	r0, [r7, #12]
 8010128:	f7ff fb30 	bl	800f78c <sync_window>
 801012c:	4603      	mov	r3, r0
 801012e:	2b00      	cmp	r3, #0
 8010130:	d001      	beq.n	8010136 <dir_next+0x12c>
 8010132:	2301      	movs	r3, #1
 8010134:	e02a      	b.n	801018c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010136:	693b      	ldr	r3, [r7, #16]
 8010138:	3301      	adds	r3, #1
 801013a:	613b      	str	r3, [r7, #16]
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010140:	1c5a      	adds	r2, r3, #1
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	631a      	str	r2, [r3, #48]	; 0x30
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	895b      	ldrh	r3, [r3, #10]
 801014a:	461a      	mov	r2, r3
 801014c:	693b      	ldr	r3, [r7, #16]
 801014e:	4293      	cmp	r3, r2
 8010150:	d3e6      	bcc.n	8010120 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010156:	693b      	ldr	r3, [r7, #16]
 8010158:	1ad2      	subs	r2, r2, r3
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	697a      	ldr	r2, [r7, #20]
 8010162:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8010164:	6979      	ldr	r1, [r7, #20]
 8010166:	68f8      	ldr	r0, [r7, #12]
 8010168:	f7ff fbf0 	bl	800f94c <clust2sect>
 801016c:	4602      	mov	r2, r0
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	68ba      	ldr	r2, [r7, #8]
 8010176:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801017e:	68bb      	ldr	r3, [r7, #8]
 8010180:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010184:	441a      	add	r2, r3
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801018a:	2300      	movs	r3, #0
}
 801018c:	4618      	mov	r0, r3
 801018e:	3718      	adds	r7, #24
 8010190:	46bd      	mov	sp, r7
 8010192:	bd80      	pop	{r7, pc}

08010194 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8010194:	b580      	push	{r7, lr}
 8010196:	b086      	sub	sp, #24
 8010198:	af00      	add	r7, sp, #0
 801019a:	6078      	str	r0, [r7, #4]
 801019c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80101a4:	2100      	movs	r1, #0
 80101a6:	6878      	ldr	r0, [r7, #4]
 80101a8:	f7ff feb4 	bl	800ff14 <dir_sdi>
 80101ac:	4603      	mov	r3, r0
 80101ae:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80101b0:	7dfb      	ldrb	r3, [r7, #23]
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d12b      	bne.n	801020e <dir_alloc+0x7a>
		n = 0;
 80101b6:	2300      	movs	r3, #0
 80101b8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	69db      	ldr	r3, [r3, #28]
 80101be:	4619      	mov	r1, r3
 80101c0:	68f8      	ldr	r0, [r7, #12]
 80101c2:	f7ff fb27 	bl	800f814 <move_window>
 80101c6:	4603      	mov	r3, r0
 80101c8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80101ca:	7dfb      	ldrb	r3, [r7, #23]
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d11d      	bne.n	801020c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	6a1b      	ldr	r3, [r3, #32]
 80101d4:	781b      	ldrb	r3, [r3, #0]
 80101d6:	2be5      	cmp	r3, #229	; 0xe5
 80101d8:	d004      	beq.n	80101e4 <dir_alloc+0x50>
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	6a1b      	ldr	r3, [r3, #32]
 80101de:	781b      	ldrb	r3, [r3, #0]
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d107      	bne.n	80101f4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80101e4:	693b      	ldr	r3, [r7, #16]
 80101e6:	3301      	adds	r3, #1
 80101e8:	613b      	str	r3, [r7, #16]
 80101ea:	693a      	ldr	r2, [r7, #16]
 80101ec:	683b      	ldr	r3, [r7, #0]
 80101ee:	429a      	cmp	r2, r3
 80101f0:	d102      	bne.n	80101f8 <dir_alloc+0x64>
 80101f2:	e00c      	b.n	801020e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80101f4:	2300      	movs	r3, #0
 80101f6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80101f8:	2101      	movs	r1, #1
 80101fa:	6878      	ldr	r0, [r7, #4]
 80101fc:	f7ff ff05 	bl	801000a <dir_next>
 8010200:	4603      	mov	r3, r0
 8010202:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8010204:	7dfb      	ldrb	r3, [r7, #23]
 8010206:	2b00      	cmp	r3, #0
 8010208:	d0d7      	beq.n	80101ba <dir_alloc+0x26>
 801020a:	e000      	b.n	801020e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801020c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801020e:	7dfb      	ldrb	r3, [r7, #23]
 8010210:	2b04      	cmp	r3, #4
 8010212:	d101      	bne.n	8010218 <dir_alloc+0x84>
 8010214:	2307      	movs	r3, #7
 8010216:	75fb      	strb	r3, [r7, #23]
	return res;
 8010218:	7dfb      	ldrb	r3, [r7, #23]
}
 801021a:	4618      	mov	r0, r3
 801021c:	3718      	adds	r7, #24
 801021e:	46bd      	mov	sp, r7
 8010220:	bd80      	pop	{r7, pc}

08010222 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8010222:	b580      	push	{r7, lr}
 8010224:	b084      	sub	sp, #16
 8010226:	af00      	add	r7, sp, #0
 8010228:	6078      	str	r0, [r7, #4]
 801022a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801022c:	683b      	ldr	r3, [r7, #0]
 801022e:	331a      	adds	r3, #26
 8010230:	4618      	mov	r0, r3
 8010232:	f7ff f80d 	bl	800f250 <ld_word>
 8010236:	4603      	mov	r3, r0
 8010238:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	781b      	ldrb	r3, [r3, #0]
 801023e:	2b03      	cmp	r3, #3
 8010240:	d109      	bne.n	8010256 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8010242:	683b      	ldr	r3, [r7, #0]
 8010244:	3314      	adds	r3, #20
 8010246:	4618      	mov	r0, r3
 8010248:	f7ff f802 	bl	800f250 <ld_word>
 801024c:	4603      	mov	r3, r0
 801024e:	041b      	lsls	r3, r3, #16
 8010250:	68fa      	ldr	r2, [r7, #12]
 8010252:	4313      	orrs	r3, r2
 8010254:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8010256:	68fb      	ldr	r3, [r7, #12]
}
 8010258:	4618      	mov	r0, r3
 801025a:	3710      	adds	r7, #16
 801025c:	46bd      	mov	sp, r7
 801025e:	bd80      	pop	{r7, pc}

08010260 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8010260:	b580      	push	{r7, lr}
 8010262:	b084      	sub	sp, #16
 8010264:	af00      	add	r7, sp, #0
 8010266:	60f8      	str	r0, [r7, #12]
 8010268:	60b9      	str	r1, [r7, #8]
 801026a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801026c:	68bb      	ldr	r3, [r7, #8]
 801026e:	331a      	adds	r3, #26
 8010270:	687a      	ldr	r2, [r7, #4]
 8010272:	b292      	uxth	r2, r2
 8010274:	4611      	mov	r1, r2
 8010276:	4618      	mov	r0, r3
 8010278:	f7ff f825 	bl	800f2c6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	781b      	ldrb	r3, [r3, #0]
 8010280:	2b03      	cmp	r3, #3
 8010282:	d109      	bne.n	8010298 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8010284:	68bb      	ldr	r3, [r7, #8]
 8010286:	f103 0214 	add.w	r2, r3, #20
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	0c1b      	lsrs	r3, r3, #16
 801028e:	b29b      	uxth	r3, r3
 8010290:	4619      	mov	r1, r3
 8010292:	4610      	mov	r0, r2
 8010294:	f7ff f817 	bl	800f2c6 <st_word>
	}
}
 8010298:	bf00      	nop
 801029a:	3710      	adds	r7, #16
 801029c:	46bd      	mov	sp, r7
 801029e:	bd80      	pop	{r7, pc}

080102a0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80102a0:	b580      	push	{r7, lr}
 80102a2:	b086      	sub	sp, #24
 80102a4:	af00      	add	r7, sp, #0
 80102a6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80102ae:	2100      	movs	r1, #0
 80102b0:	6878      	ldr	r0, [r7, #4]
 80102b2:	f7ff fe2f 	bl	800ff14 <dir_sdi>
 80102b6:	4603      	mov	r3, r0
 80102b8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80102ba:	7dfb      	ldrb	r3, [r7, #23]
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d001      	beq.n	80102c4 <dir_find+0x24>
 80102c0:	7dfb      	ldrb	r3, [r7, #23]
 80102c2:	e03e      	b.n	8010342 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	69db      	ldr	r3, [r3, #28]
 80102c8:	4619      	mov	r1, r3
 80102ca:	6938      	ldr	r0, [r7, #16]
 80102cc:	f7ff faa2 	bl	800f814 <move_window>
 80102d0:	4603      	mov	r3, r0
 80102d2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80102d4:	7dfb      	ldrb	r3, [r7, #23]
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d12f      	bne.n	801033a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	6a1b      	ldr	r3, [r3, #32]
 80102de:	781b      	ldrb	r3, [r3, #0]
 80102e0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80102e2:	7bfb      	ldrb	r3, [r7, #15]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d102      	bne.n	80102ee <dir_find+0x4e>
 80102e8:	2304      	movs	r3, #4
 80102ea:	75fb      	strb	r3, [r7, #23]
 80102ec:	e028      	b.n	8010340 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	6a1b      	ldr	r3, [r3, #32]
 80102f2:	330b      	adds	r3, #11
 80102f4:	781b      	ldrb	r3, [r3, #0]
 80102f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80102fa:	b2da      	uxtb	r2, r3
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	6a1b      	ldr	r3, [r3, #32]
 8010304:	330b      	adds	r3, #11
 8010306:	781b      	ldrb	r3, [r3, #0]
 8010308:	f003 0308 	and.w	r3, r3, #8
 801030c:	2b00      	cmp	r3, #0
 801030e:	d10a      	bne.n	8010326 <dir_find+0x86>
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	6a18      	ldr	r0, [r3, #32]
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	3324      	adds	r3, #36	; 0x24
 8010318:	220b      	movs	r2, #11
 801031a:	4619      	mov	r1, r3
 801031c:	f7ff f856 	bl	800f3cc <mem_cmp>
 8010320:	4603      	mov	r3, r0
 8010322:	2b00      	cmp	r3, #0
 8010324:	d00b      	beq.n	801033e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8010326:	2100      	movs	r1, #0
 8010328:	6878      	ldr	r0, [r7, #4]
 801032a:	f7ff fe6e 	bl	801000a <dir_next>
 801032e:	4603      	mov	r3, r0
 8010330:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8010332:	7dfb      	ldrb	r3, [r7, #23]
 8010334:	2b00      	cmp	r3, #0
 8010336:	d0c5      	beq.n	80102c4 <dir_find+0x24>
 8010338:	e002      	b.n	8010340 <dir_find+0xa0>
		if (res != FR_OK) break;
 801033a:	bf00      	nop
 801033c:	e000      	b.n	8010340 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801033e:	bf00      	nop

	return res;
 8010340:	7dfb      	ldrb	r3, [r7, #23]
}
 8010342:	4618      	mov	r0, r3
 8010344:	3718      	adds	r7, #24
 8010346:	46bd      	mov	sp, r7
 8010348:	bd80      	pop	{r7, pc}

0801034a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801034a:	b580      	push	{r7, lr}
 801034c:	b084      	sub	sp, #16
 801034e:	af00      	add	r7, sp, #0
 8010350:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8010358:	2101      	movs	r1, #1
 801035a:	6878      	ldr	r0, [r7, #4]
 801035c:	f7ff ff1a 	bl	8010194 <dir_alloc>
 8010360:	4603      	mov	r3, r0
 8010362:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8010364:	7bfb      	ldrb	r3, [r7, #15]
 8010366:	2b00      	cmp	r3, #0
 8010368:	d11c      	bne.n	80103a4 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	69db      	ldr	r3, [r3, #28]
 801036e:	4619      	mov	r1, r3
 8010370:	68b8      	ldr	r0, [r7, #8]
 8010372:	f7ff fa4f 	bl	800f814 <move_window>
 8010376:	4603      	mov	r3, r0
 8010378:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801037a:	7bfb      	ldrb	r3, [r7, #15]
 801037c:	2b00      	cmp	r3, #0
 801037e:	d111      	bne.n	80103a4 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	6a1b      	ldr	r3, [r3, #32]
 8010384:	2220      	movs	r2, #32
 8010386:	2100      	movs	r1, #0
 8010388:	4618      	mov	r0, r3
 801038a:	f7ff f804 	bl	800f396 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	6a18      	ldr	r0, [r3, #32]
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	3324      	adds	r3, #36	; 0x24
 8010396:	220b      	movs	r2, #11
 8010398:	4619      	mov	r1, r3
 801039a:	f7fe ffdb 	bl	800f354 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 801039e:	68bb      	ldr	r3, [r7, #8]
 80103a0:	2201      	movs	r2, #1
 80103a2:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80103a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80103a6:	4618      	mov	r0, r3
 80103a8:	3710      	adds	r7, #16
 80103aa:	46bd      	mov	sp, r7
 80103ac:	bd80      	pop	{r7, pc}
	...

080103b0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80103b0:	b580      	push	{r7, lr}
 80103b2:	b088      	sub	sp, #32
 80103b4:	af00      	add	r7, sp, #0
 80103b6:	6078      	str	r0, [r7, #4]
 80103b8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80103ba:	683b      	ldr	r3, [r7, #0]
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	60fb      	str	r3, [r7, #12]
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	3324      	adds	r3, #36	; 0x24
 80103c4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80103c6:	220b      	movs	r2, #11
 80103c8:	2120      	movs	r1, #32
 80103ca:	68b8      	ldr	r0, [r7, #8]
 80103cc:	f7fe ffe3 	bl	800f396 <mem_set>
	si = i = 0; ni = 8;
 80103d0:	2300      	movs	r3, #0
 80103d2:	613b      	str	r3, [r7, #16]
 80103d4:	693b      	ldr	r3, [r7, #16]
 80103d6:	61fb      	str	r3, [r7, #28]
 80103d8:	2308      	movs	r3, #8
 80103da:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80103dc:	69fb      	ldr	r3, [r7, #28]
 80103de:	1c5a      	adds	r2, r3, #1
 80103e0:	61fa      	str	r2, [r7, #28]
 80103e2:	68fa      	ldr	r2, [r7, #12]
 80103e4:	4413      	add	r3, r2
 80103e6:	781b      	ldrb	r3, [r3, #0]
 80103e8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80103ea:	7efb      	ldrb	r3, [r7, #27]
 80103ec:	2b20      	cmp	r3, #32
 80103ee:	d94e      	bls.n	801048e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80103f0:	7efb      	ldrb	r3, [r7, #27]
 80103f2:	2b2f      	cmp	r3, #47	; 0x2f
 80103f4:	d006      	beq.n	8010404 <create_name+0x54>
 80103f6:	7efb      	ldrb	r3, [r7, #27]
 80103f8:	2b5c      	cmp	r3, #92	; 0x5c
 80103fa:	d110      	bne.n	801041e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80103fc:	e002      	b.n	8010404 <create_name+0x54>
 80103fe:	69fb      	ldr	r3, [r7, #28]
 8010400:	3301      	adds	r3, #1
 8010402:	61fb      	str	r3, [r7, #28]
 8010404:	68fa      	ldr	r2, [r7, #12]
 8010406:	69fb      	ldr	r3, [r7, #28]
 8010408:	4413      	add	r3, r2
 801040a:	781b      	ldrb	r3, [r3, #0]
 801040c:	2b2f      	cmp	r3, #47	; 0x2f
 801040e:	d0f6      	beq.n	80103fe <create_name+0x4e>
 8010410:	68fa      	ldr	r2, [r7, #12]
 8010412:	69fb      	ldr	r3, [r7, #28]
 8010414:	4413      	add	r3, r2
 8010416:	781b      	ldrb	r3, [r3, #0]
 8010418:	2b5c      	cmp	r3, #92	; 0x5c
 801041a:	d0f0      	beq.n	80103fe <create_name+0x4e>
			break;
 801041c:	e038      	b.n	8010490 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 801041e:	7efb      	ldrb	r3, [r7, #27]
 8010420:	2b2e      	cmp	r3, #46	; 0x2e
 8010422:	d003      	beq.n	801042c <create_name+0x7c>
 8010424:	693a      	ldr	r2, [r7, #16]
 8010426:	697b      	ldr	r3, [r7, #20]
 8010428:	429a      	cmp	r2, r3
 801042a:	d30c      	bcc.n	8010446 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 801042c:	697b      	ldr	r3, [r7, #20]
 801042e:	2b0b      	cmp	r3, #11
 8010430:	d002      	beq.n	8010438 <create_name+0x88>
 8010432:	7efb      	ldrb	r3, [r7, #27]
 8010434:	2b2e      	cmp	r3, #46	; 0x2e
 8010436:	d001      	beq.n	801043c <create_name+0x8c>
 8010438:	2306      	movs	r3, #6
 801043a:	e044      	b.n	80104c6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 801043c:	2308      	movs	r3, #8
 801043e:	613b      	str	r3, [r7, #16]
 8010440:	230b      	movs	r3, #11
 8010442:	617b      	str	r3, [r7, #20]
			continue;
 8010444:	e022      	b.n	801048c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8010446:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801044a:	2b00      	cmp	r3, #0
 801044c:	da04      	bge.n	8010458 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 801044e:	7efb      	ldrb	r3, [r7, #27]
 8010450:	3b80      	subs	r3, #128	; 0x80
 8010452:	4a1f      	ldr	r2, [pc, #124]	; (80104d0 <create_name+0x120>)
 8010454:	5cd3      	ldrb	r3, [r2, r3]
 8010456:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8010458:	7efb      	ldrb	r3, [r7, #27]
 801045a:	4619      	mov	r1, r3
 801045c:	481d      	ldr	r0, [pc, #116]	; (80104d4 <create_name+0x124>)
 801045e:	f7fe ffdc 	bl	800f41a <chk_chr>
 8010462:	4603      	mov	r3, r0
 8010464:	2b00      	cmp	r3, #0
 8010466:	d001      	beq.n	801046c <create_name+0xbc>
 8010468:	2306      	movs	r3, #6
 801046a:	e02c      	b.n	80104c6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 801046c:	7efb      	ldrb	r3, [r7, #27]
 801046e:	2b60      	cmp	r3, #96	; 0x60
 8010470:	d905      	bls.n	801047e <create_name+0xce>
 8010472:	7efb      	ldrb	r3, [r7, #27]
 8010474:	2b7a      	cmp	r3, #122	; 0x7a
 8010476:	d802      	bhi.n	801047e <create_name+0xce>
 8010478:	7efb      	ldrb	r3, [r7, #27]
 801047a:	3b20      	subs	r3, #32
 801047c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 801047e:	693b      	ldr	r3, [r7, #16]
 8010480:	1c5a      	adds	r2, r3, #1
 8010482:	613a      	str	r2, [r7, #16]
 8010484:	68ba      	ldr	r2, [r7, #8]
 8010486:	4413      	add	r3, r2
 8010488:	7efa      	ldrb	r2, [r7, #27]
 801048a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 801048c:	e7a6      	b.n	80103dc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 801048e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8010490:	68fa      	ldr	r2, [r7, #12]
 8010492:	69fb      	ldr	r3, [r7, #28]
 8010494:	441a      	add	r2, r3
 8010496:	683b      	ldr	r3, [r7, #0]
 8010498:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 801049a:	693b      	ldr	r3, [r7, #16]
 801049c:	2b00      	cmp	r3, #0
 801049e:	d101      	bne.n	80104a4 <create_name+0xf4>
 80104a0:	2306      	movs	r3, #6
 80104a2:	e010      	b.n	80104c6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80104a4:	68bb      	ldr	r3, [r7, #8]
 80104a6:	781b      	ldrb	r3, [r3, #0]
 80104a8:	2be5      	cmp	r3, #229	; 0xe5
 80104aa:	d102      	bne.n	80104b2 <create_name+0x102>
 80104ac:	68bb      	ldr	r3, [r7, #8]
 80104ae:	2205      	movs	r2, #5
 80104b0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80104b2:	7efb      	ldrb	r3, [r7, #27]
 80104b4:	2b20      	cmp	r3, #32
 80104b6:	d801      	bhi.n	80104bc <create_name+0x10c>
 80104b8:	2204      	movs	r2, #4
 80104ba:	e000      	b.n	80104be <create_name+0x10e>
 80104bc:	2200      	movs	r2, #0
 80104be:	68bb      	ldr	r3, [r7, #8]
 80104c0:	330b      	adds	r3, #11
 80104c2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80104c4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80104c6:	4618      	mov	r0, r3
 80104c8:	3720      	adds	r7, #32
 80104ca:	46bd      	mov	sp, r7
 80104cc:	bd80      	pop	{r7, pc}
 80104ce:	bf00      	nop
 80104d0:	08018014 	.word	0x08018014
 80104d4:	08015488 	.word	0x08015488

080104d8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80104d8:	b580      	push	{r7, lr}
 80104da:	b086      	sub	sp, #24
 80104dc:	af00      	add	r7, sp, #0
 80104de:	6078      	str	r0, [r7, #4]
 80104e0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80104e6:	693b      	ldr	r3, [r7, #16]
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80104ec:	e002      	b.n	80104f4 <follow_path+0x1c>
 80104ee:	683b      	ldr	r3, [r7, #0]
 80104f0:	3301      	adds	r3, #1
 80104f2:	603b      	str	r3, [r7, #0]
 80104f4:	683b      	ldr	r3, [r7, #0]
 80104f6:	781b      	ldrb	r3, [r3, #0]
 80104f8:	2b2f      	cmp	r3, #47	; 0x2f
 80104fa:	d0f8      	beq.n	80104ee <follow_path+0x16>
 80104fc:	683b      	ldr	r3, [r7, #0]
 80104fe:	781b      	ldrb	r3, [r3, #0]
 8010500:	2b5c      	cmp	r3, #92	; 0x5c
 8010502:	d0f4      	beq.n	80104ee <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8010504:	693b      	ldr	r3, [r7, #16]
 8010506:	2200      	movs	r2, #0
 8010508:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801050a:	683b      	ldr	r3, [r7, #0]
 801050c:	781b      	ldrb	r3, [r3, #0]
 801050e:	2b1f      	cmp	r3, #31
 8010510:	d80a      	bhi.n	8010528 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	2280      	movs	r2, #128	; 0x80
 8010516:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801051a:	2100      	movs	r1, #0
 801051c:	6878      	ldr	r0, [r7, #4]
 801051e:	f7ff fcf9 	bl	800ff14 <dir_sdi>
 8010522:	4603      	mov	r3, r0
 8010524:	75fb      	strb	r3, [r7, #23]
 8010526:	e043      	b.n	80105b0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010528:	463b      	mov	r3, r7
 801052a:	4619      	mov	r1, r3
 801052c:	6878      	ldr	r0, [r7, #4]
 801052e:	f7ff ff3f 	bl	80103b0 <create_name>
 8010532:	4603      	mov	r3, r0
 8010534:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010536:	7dfb      	ldrb	r3, [r7, #23]
 8010538:	2b00      	cmp	r3, #0
 801053a:	d134      	bne.n	80105a6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 801053c:	6878      	ldr	r0, [r7, #4]
 801053e:	f7ff feaf 	bl	80102a0 <dir_find>
 8010542:	4603      	mov	r3, r0
 8010544:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801054c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801054e:	7dfb      	ldrb	r3, [r7, #23]
 8010550:	2b00      	cmp	r3, #0
 8010552:	d00a      	beq.n	801056a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8010554:	7dfb      	ldrb	r3, [r7, #23]
 8010556:	2b04      	cmp	r3, #4
 8010558:	d127      	bne.n	80105aa <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801055a:	7afb      	ldrb	r3, [r7, #11]
 801055c:	f003 0304 	and.w	r3, r3, #4
 8010560:	2b00      	cmp	r3, #0
 8010562:	d122      	bne.n	80105aa <follow_path+0xd2>
 8010564:	2305      	movs	r3, #5
 8010566:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8010568:	e01f      	b.n	80105aa <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801056a:	7afb      	ldrb	r3, [r7, #11]
 801056c:	f003 0304 	and.w	r3, r3, #4
 8010570:	2b00      	cmp	r3, #0
 8010572:	d11c      	bne.n	80105ae <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8010574:	693b      	ldr	r3, [r7, #16]
 8010576:	799b      	ldrb	r3, [r3, #6]
 8010578:	f003 0310 	and.w	r3, r3, #16
 801057c:	2b00      	cmp	r3, #0
 801057e:	d102      	bne.n	8010586 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8010580:	2305      	movs	r3, #5
 8010582:	75fb      	strb	r3, [r7, #23]
 8010584:	e014      	b.n	80105b0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	695b      	ldr	r3, [r3, #20]
 8010590:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010594:	4413      	add	r3, r2
 8010596:	4619      	mov	r1, r3
 8010598:	68f8      	ldr	r0, [r7, #12]
 801059a:	f7ff fe42 	bl	8010222 <ld_clust>
 801059e:	4602      	mov	r2, r0
 80105a0:	693b      	ldr	r3, [r7, #16]
 80105a2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80105a4:	e7c0      	b.n	8010528 <follow_path+0x50>
			if (res != FR_OK) break;
 80105a6:	bf00      	nop
 80105a8:	e002      	b.n	80105b0 <follow_path+0xd8>
				break;
 80105aa:	bf00      	nop
 80105ac:	e000      	b.n	80105b0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80105ae:	bf00      	nop
			}
		}
	}

	return res;
 80105b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80105b2:	4618      	mov	r0, r3
 80105b4:	3718      	adds	r7, #24
 80105b6:	46bd      	mov	sp, r7
 80105b8:	bd80      	pop	{r7, pc}

080105ba <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80105ba:	b480      	push	{r7}
 80105bc:	b087      	sub	sp, #28
 80105be:	af00      	add	r7, sp, #0
 80105c0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80105c2:	f04f 33ff 	mov.w	r3, #4294967295
 80105c6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d031      	beq.n	8010634 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	617b      	str	r3, [r7, #20]
 80105d6:	e002      	b.n	80105de <get_ldnumber+0x24>
 80105d8:	697b      	ldr	r3, [r7, #20]
 80105da:	3301      	adds	r3, #1
 80105dc:	617b      	str	r3, [r7, #20]
 80105de:	697b      	ldr	r3, [r7, #20]
 80105e0:	781b      	ldrb	r3, [r3, #0]
 80105e2:	2b20      	cmp	r3, #32
 80105e4:	d903      	bls.n	80105ee <get_ldnumber+0x34>
 80105e6:	697b      	ldr	r3, [r7, #20]
 80105e8:	781b      	ldrb	r3, [r3, #0]
 80105ea:	2b3a      	cmp	r3, #58	; 0x3a
 80105ec:	d1f4      	bne.n	80105d8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80105ee:	697b      	ldr	r3, [r7, #20]
 80105f0:	781b      	ldrb	r3, [r3, #0]
 80105f2:	2b3a      	cmp	r3, #58	; 0x3a
 80105f4:	d11c      	bne.n	8010630 <get_ldnumber+0x76>
			tp = *path;
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	1c5a      	adds	r2, r3, #1
 8010600:	60fa      	str	r2, [r7, #12]
 8010602:	781b      	ldrb	r3, [r3, #0]
 8010604:	3b30      	subs	r3, #48	; 0x30
 8010606:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8010608:	68bb      	ldr	r3, [r7, #8]
 801060a:	2b09      	cmp	r3, #9
 801060c:	d80e      	bhi.n	801062c <get_ldnumber+0x72>
 801060e:	68fa      	ldr	r2, [r7, #12]
 8010610:	697b      	ldr	r3, [r7, #20]
 8010612:	429a      	cmp	r2, r3
 8010614:	d10a      	bne.n	801062c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8010616:	68bb      	ldr	r3, [r7, #8]
 8010618:	2b00      	cmp	r3, #0
 801061a:	d107      	bne.n	801062c <get_ldnumber+0x72>
					vol = (int)i;
 801061c:	68bb      	ldr	r3, [r7, #8]
 801061e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8010620:	697b      	ldr	r3, [r7, #20]
 8010622:	3301      	adds	r3, #1
 8010624:	617b      	str	r3, [r7, #20]
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	697a      	ldr	r2, [r7, #20]
 801062a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801062c:	693b      	ldr	r3, [r7, #16]
 801062e:	e002      	b.n	8010636 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8010630:	2300      	movs	r3, #0
 8010632:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8010634:	693b      	ldr	r3, [r7, #16]
}
 8010636:	4618      	mov	r0, r3
 8010638:	371c      	adds	r7, #28
 801063a:	46bd      	mov	sp, r7
 801063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010640:	4770      	bx	lr
	...

08010644 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8010644:	b580      	push	{r7, lr}
 8010646:	b082      	sub	sp, #8
 8010648:	af00      	add	r7, sp, #0
 801064a:	6078      	str	r0, [r7, #4]
 801064c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	2200      	movs	r2, #0
 8010652:	70da      	strb	r2, [r3, #3]
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	f04f 32ff 	mov.w	r2, #4294967295
 801065a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801065c:	6839      	ldr	r1, [r7, #0]
 801065e:	6878      	ldr	r0, [r7, #4]
 8010660:	f7ff f8d8 	bl	800f814 <move_window>
 8010664:	4603      	mov	r3, r0
 8010666:	2b00      	cmp	r3, #0
 8010668:	d001      	beq.n	801066e <check_fs+0x2a>
 801066a:	2304      	movs	r3, #4
 801066c:	e038      	b.n	80106e0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	3334      	adds	r3, #52	; 0x34
 8010672:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010676:	4618      	mov	r0, r3
 8010678:	f7fe fdea 	bl	800f250 <ld_word>
 801067c:	4603      	mov	r3, r0
 801067e:	461a      	mov	r2, r3
 8010680:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010684:	429a      	cmp	r2, r3
 8010686:	d001      	beq.n	801068c <check_fs+0x48>
 8010688:	2303      	movs	r3, #3
 801068a:	e029      	b.n	80106e0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010692:	2be9      	cmp	r3, #233	; 0xe9
 8010694:	d009      	beq.n	80106aa <check_fs+0x66>
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801069c:	2beb      	cmp	r3, #235	; 0xeb
 801069e:	d11e      	bne.n	80106de <check_fs+0x9a>
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80106a6:	2b90      	cmp	r3, #144	; 0x90
 80106a8:	d119      	bne.n	80106de <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	3334      	adds	r3, #52	; 0x34
 80106ae:	3336      	adds	r3, #54	; 0x36
 80106b0:	4618      	mov	r0, r3
 80106b2:	f7fe fde5 	bl	800f280 <ld_dword>
 80106b6:	4603      	mov	r3, r0
 80106b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80106bc:	4a0a      	ldr	r2, [pc, #40]	; (80106e8 <check_fs+0xa4>)
 80106be:	4293      	cmp	r3, r2
 80106c0:	d101      	bne.n	80106c6 <check_fs+0x82>
 80106c2:	2300      	movs	r3, #0
 80106c4:	e00c      	b.n	80106e0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	3334      	adds	r3, #52	; 0x34
 80106ca:	3352      	adds	r3, #82	; 0x52
 80106cc:	4618      	mov	r0, r3
 80106ce:	f7fe fdd7 	bl	800f280 <ld_dword>
 80106d2:	4603      	mov	r3, r0
 80106d4:	4a05      	ldr	r2, [pc, #20]	; (80106ec <check_fs+0xa8>)
 80106d6:	4293      	cmp	r3, r2
 80106d8:	d101      	bne.n	80106de <check_fs+0x9a>
 80106da:	2300      	movs	r3, #0
 80106dc:	e000      	b.n	80106e0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80106de:	2302      	movs	r3, #2
}
 80106e0:	4618      	mov	r0, r3
 80106e2:	3708      	adds	r7, #8
 80106e4:	46bd      	mov	sp, r7
 80106e6:	bd80      	pop	{r7, pc}
 80106e8:	00544146 	.word	0x00544146
 80106ec:	33544146 	.word	0x33544146

080106f0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80106f0:	b580      	push	{r7, lr}
 80106f2:	b096      	sub	sp, #88	; 0x58
 80106f4:	af00      	add	r7, sp, #0
 80106f6:	60f8      	str	r0, [r7, #12]
 80106f8:	60b9      	str	r1, [r7, #8]
 80106fa:	4613      	mov	r3, r2
 80106fc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80106fe:	68bb      	ldr	r3, [r7, #8]
 8010700:	2200      	movs	r2, #0
 8010702:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8010704:	68f8      	ldr	r0, [r7, #12]
 8010706:	f7ff ff58 	bl	80105ba <get_ldnumber>
 801070a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801070c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801070e:	2b00      	cmp	r3, #0
 8010710:	da01      	bge.n	8010716 <find_volume+0x26>
 8010712:	230b      	movs	r3, #11
 8010714:	e235      	b.n	8010b82 <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8010716:	4aa5      	ldr	r2, [pc, #660]	; (80109ac <find_volume+0x2bc>)
 8010718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801071a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801071e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8010720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010722:	2b00      	cmp	r3, #0
 8010724:	d101      	bne.n	801072a <find_volume+0x3a>
 8010726:	230c      	movs	r3, #12
 8010728:	e22b      	b.n	8010b82 <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 801072a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801072c:	f7fe fe90 	bl	800f450 <lock_fs>
 8010730:	4603      	mov	r3, r0
 8010732:	2b00      	cmp	r3, #0
 8010734:	d101      	bne.n	801073a <find_volume+0x4a>
 8010736:	230f      	movs	r3, #15
 8010738:	e223      	b.n	8010b82 <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 801073a:	68bb      	ldr	r3, [r7, #8]
 801073c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801073e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8010740:	79fb      	ldrb	r3, [r7, #7]
 8010742:	f023 0301 	bic.w	r3, r3, #1
 8010746:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8010748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801074a:	781b      	ldrb	r3, [r3, #0]
 801074c:	2b00      	cmp	r3, #0
 801074e:	d01a      	beq.n	8010786 <find_volume+0x96>
		stat = disk_status(fs->drv);
 8010750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010752:	785b      	ldrb	r3, [r3, #1]
 8010754:	4618      	mov	r0, r3
 8010756:	f7fe fcdd 	bl	800f114 <disk_status>
 801075a:	4603      	mov	r3, r0
 801075c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8010760:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010764:	f003 0301 	and.w	r3, r3, #1
 8010768:	2b00      	cmp	r3, #0
 801076a:	d10c      	bne.n	8010786 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801076c:	79fb      	ldrb	r3, [r7, #7]
 801076e:	2b00      	cmp	r3, #0
 8010770:	d007      	beq.n	8010782 <find_volume+0x92>
 8010772:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010776:	f003 0304 	and.w	r3, r3, #4
 801077a:	2b00      	cmp	r3, #0
 801077c:	d001      	beq.n	8010782 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 801077e:	230a      	movs	r3, #10
 8010780:	e1ff      	b.n	8010b82 <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 8010782:	2300      	movs	r3, #0
 8010784:	e1fd      	b.n	8010b82 <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8010786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010788:	2200      	movs	r2, #0
 801078a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801078c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801078e:	b2da      	uxtb	r2, r3
 8010790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010792:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8010794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010796:	785b      	ldrb	r3, [r3, #1]
 8010798:	4618      	mov	r0, r3
 801079a:	f7fe fcd5 	bl	800f148 <disk_initialize>
 801079e:	4603      	mov	r3, r0
 80107a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80107a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80107a8:	f003 0301 	and.w	r3, r3, #1
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d001      	beq.n	80107b4 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80107b0:	2303      	movs	r3, #3
 80107b2:	e1e6      	b.n	8010b82 <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80107b4:	79fb      	ldrb	r3, [r7, #7]
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d007      	beq.n	80107ca <find_volume+0xda>
 80107ba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80107be:	f003 0304 	and.w	r3, r3, #4
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d001      	beq.n	80107ca <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 80107c6:	230a      	movs	r3, #10
 80107c8:	e1db      	b.n	8010b82 <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80107ca:	2300      	movs	r3, #0
 80107cc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80107ce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80107d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80107d2:	f7ff ff37 	bl	8010644 <check_fs>
 80107d6:	4603      	mov	r3, r0
 80107d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80107dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80107e0:	2b02      	cmp	r3, #2
 80107e2:	d149      	bne.n	8010878 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80107e4:	2300      	movs	r3, #0
 80107e6:	643b      	str	r3, [r7, #64]	; 0x40
 80107e8:	e01e      	b.n	8010828 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80107ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107ec:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80107f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107f2:	011b      	lsls	r3, r3, #4
 80107f4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80107f8:	4413      	add	r3, r2
 80107fa:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80107fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107fe:	3304      	adds	r3, #4
 8010800:	781b      	ldrb	r3, [r3, #0]
 8010802:	2b00      	cmp	r3, #0
 8010804:	d006      	beq.n	8010814 <find_volume+0x124>
 8010806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010808:	3308      	adds	r3, #8
 801080a:	4618      	mov	r0, r3
 801080c:	f7fe fd38 	bl	800f280 <ld_dword>
 8010810:	4602      	mov	r2, r0
 8010812:	e000      	b.n	8010816 <find_volume+0x126>
 8010814:	2200      	movs	r2, #0
 8010816:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010818:	009b      	lsls	r3, r3, #2
 801081a:	3358      	adds	r3, #88	; 0x58
 801081c:	443b      	add	r3, r7
 801081e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010822:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010824:	3301      	adds	r3, #1
 8010826:	643b      	str	r3, [r7, #64]	; 0x40
 8010828:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801082a:	2b03      	cmp	r3, #3
 801082c:	d9dd      	bls.n	80107ea <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801082e:	2300      	movs	r3, #0
 8010830:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8010832:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010834:	2b00      	cmp	r3, #0
 8010836:	d002      	beq.n	801083e <find_volume+0x14e>
 8010838:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801083a:	3b01      	subs	r3, #1
 801083c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801083e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010840:	009b      	lsls	r3, r3, #2
 8010842:	3358      	adds	r3, #88	; 0x58
 8010844:	443b      	add	r3, r7
 8010846:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801084a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801084c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801084e:	2b00      	cmp	r3, #0
 8010850:	d005      	beq.n	801085e <find_volume+0x16e>
 8010852:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010854:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010856:	f7ff fef5 	bl	8010644 <check_fs>
 801085a:	4603      	mov	r3, r0
 801085c:	e000      	b.n	8010860 <find_volume+0x170>
 801085e:	2303      	movs	r3, #3
 8010860:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8010864:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010868:	2b01      	cmp	r3, #1
 801086a:	d905      	bls.n	8010878 <find_volume+0x188>
 801086c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801086e:	3301      	adds	r3, #1
 8010870:	643b      	str	r3, [r7, #64]	; 0x40
 8010872:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010874:	2b03      	cmp	r3, #3
 8010876:	d9e2      	bls.n	801083e <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8010878:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801087c:	2b04      	cmp	r3, #4
 801087e:	d101      	bne.n	8010884 <find_volume+0x194>
 8010880:	2301      	movs	r3, #1
 8010882:	e17e      	b.n	8010b82 <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8010884:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010888:	2b01      	cmp	r3, #1
 801088a:	d901      	bls.n	8010890 <find_volume+0x1a0>
 801088c:	230d      	movs	r3, #13
 801088e:	e178      	b.n	8010b82 <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8010890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010892:	3334      	adds	r3, #52	; 0x34
 8010894:	330b      	adds	r3, #11
 8010896:	4618      	mov	r0, r3
 8010898:	f7fe fcda 	bl	800f250 <ld_word>
 801089c:	4603      	mov	r3, r0
 801089e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80108a2:	d001      	beq.n	80108a8 <find_volume+0x1b8>
 80108a4:	230d      	movs	r3, #13
 80108a6:	e16c      	b.n	8010b82 <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80108a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108aa:	3334      	adds	r3, #52	; 0x34
 80108ac:	3316      	adds	r3, #22
 80108ae:	4618      	mov	r0, r3
 80108b0:	f7fe fcce 	bl	800f250 <ld_word>
 80108b4:	4603      	mov	r3, r0
 80108b6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80108b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d106      	bne.n	80108cc <find_volume+0x1dc>
 80108be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108c0:	3334      	adds	r3, #52	; 0x34
 80108c2:	3324      	adds	r3, #36	; 0x24
 80108c4:	4618      	mov	r0, r3
 80108c6:	f7fe fcdb 	bl	800f280 <ld_dword>
 80108ca:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80108cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80108d0:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80108d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108d4:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80108d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108da:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80108dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108de:	789b      	ldrb	r3, [r3, #2]
 80108e0:	2b01      	cmp	r3, #1
 80108e2:	d005      	beq.n	80108f0 <find_volume+0x200>
 80108e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108e6:	789b      	ldrb	r3, [r3, #2]
 80108e8:	2b02      	cmp	r3, #2
 80108ea:	d001      	beq.n	80108f0 <find_volume+0x200>
 80108ec:	230d      	movs	r3, #13
 80108ee:	e148      	b.n	8010b82 <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80108f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108f2:	789b      	ldrb	r3, [r3, #2]
 80108f4:	461a      	mov	r2, r3
 80108f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80108f8:	fb02 f303 	mul.w	r3, r2, r3
 80108fc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80108fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010900:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010904:	b29a      	uxth	r2, r3
 8010906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010908:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801090a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801090c:	895b      	ldrh	r3, [r3, #10]
 801090e:	2b00      	cmp	r3, #0
 8010910:	d008      	beq.n	8010924 <find_volume+0x234>
 8010912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010914:	895b      	ldrh	r3, [r3, #10]
 8010916:	461a      	mov	r2, r3
 8010918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801091a:	895b      	ldrh	r3, [r3, #10]
 801091c:	3b01      	subs	r3, #1
 801091e:	4013      	ands	r3, r2
 8010920:	2b00      	cmp	r3, #0
 8010922:	d001      	beq.n	8010928 <find_volume+0x238>
 8010924:	230d      	movs	r3, #13
 8010926:	e12c      	b.n	8010b82 <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8010928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801092a:	3334      	adds	r3, #52	; 0x34
 801092c:	3311      	adds	r3, #17
 801092e:	4618      	mov	r0, r3
 8010930:	f7fe fc8e 	bl	800f250 <ld_word>
 8010934:	4603      	mov	r3, r0
 8010936:	461a      	mov	r2, r3
 8010938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801093a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801093c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801093e:	891b      	ldrh	r3, [r3, #8]
 8010940:	f003 030f 	and.w	r3, r3, #15
 8010944:	b29b      	uxth	r3, r3
 8010946:	2b00      	cmp	r3, #0
 8010948:	d001      	beq.n	801094e <find_volume+0x25e>
 801094a:	230d      	movs	r3, #13
 801094c:	e119      	b.n	8010b82 <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801094e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010950:	3334      	adds	r3, #52	; 0x34
 8010952:	3313      	adds	r3, #19
 8010954:	4618      	mov	r0, r3
 8010956:	f7fe fc7b 	bl	800f250 <ld_word>
 801095a:	4603      	mov	r3, r0
 801095c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801095e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010960:	2b00      	cmp	r3, #0
 8010962:	d106      	bne.n	8010972 <find_volume+0x282>
 8010964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010966:	3334      	adds	r3, #52	; 0x34
 8010968:	3320      	adds	r3, #32
 801096a:	4618      	mov	r0, r3
 801096c:	f7fe fc88 	bl	800f280 <ld_dword>
 8010970:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8010972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010974:	3334      	adds	r3, #52	; 0x34
 8010976:	330e      	adds	r3, #14
 8010978:	4618      	mov	r0, r3
 801097a:	f7fe fc69 	bl	800f250 <ld_word>
 801097e:	4603      	mov	r3, r0
 8010980:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8010982:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010984:	2b00      	cmp	r3, #0
 8010986:	d101      	bne.n	801098c <find_volume+0x29c>
 8010988:	230d      	movs	r3, #13
 801098a:	e0fa      	b.n	8010b82 <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801098c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801098e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010990:	4413      	add	r3, r2
 8010992:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010994:	8912      	ldrh	r2, [r2, #8]
 8010996:	0912      	lsrs	r2, r2, #4
 8010998:	b292      	uxth	r2, r2
 801099a:	4413      	add	r3, r2
 801099c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801099e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80109a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109a2:	429a      	cmp	r2, r3
 80109a4:	d204      	bcs.n	80109b0 <find_volume+0x2c0>
 80109a6:	230d      	movs	r3, #13
 80109a8:	e0eb      	b.n	8010b82 <find_volume+0x492>
 80109aa:	bf00      	nop
 80109ac:	20001334 	.word	0x20001334
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80109b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80109b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109b4:	1ad3      	subs	r3, r2, r3
 80109b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80109b8:	8952      	ldrh	r2, [r2, #10]
 80109ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80109be:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80109c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d101      	bne.n	80109ca <find_volume+0x2da>
 80109c6:	230d      	movs	r3, #13
 80109c8:	e0db      	b.n	8010b82 <find_volume+0x492>
		fmt = FS_FAT32;
 80109ca:	2303      	movs	r3, #3
 80109cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80109d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109d2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80109d6:	4293      	cmp	r3, r2
 80109d8:	d802      	bhi.n	80109e0 <find_volume+0x2f0>
 80109da:	2302      	movs	r3, #2
 80109dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80109e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109e2:	f640 72f5 	movw	r2, #4085	; 0xff5
 80109e6:	4293      	cmp	r3, r2
 80109e8:	d802      	bhi.n	80109f0 <find_volume+0x300>
 80109ea:	2301      	movs	r3, #1
 80109ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80109f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109f2:	1c9a      	adds	r2, r3, #2
 80109f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109f6:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80109f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109fa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80109fc:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80109fe:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010a00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a02:	441a      	add	r2, r3
 8010a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a06:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8010a08:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a0c:	441a      	add	r2, r3
 8010a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a10:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8010a12:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010a16:	2b03      	cmp	r3, #3
 8010a18:	d11e      	bne.n	8010a58 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8010a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a1c:	3334      	adds	r3, #52	; 0x34
 8010a1e:	332a      	adds	r3, #42	; 0x2a
 8010a20:	4618      	mov	r0, r3
 8010a22:	f7fe fc15 	bl	800f250 <ld_word>
 8010a26:	4603      	mov	r3, r0
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d001      	beq.n	8010a30 <find_volume+0x340>
 8010a2c:	230d      	movs	r3, #13
 8010a2e:	e0a8      	b.n	8010b82 <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8010a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a32:	891b      	ldrh	r3, [r3, #8]
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d001      	beq.n	8010a3c <find_volume+0x34c>
 8010a38:	230d      	movs	r3, #13
 8010a3a:	e0a2      	b.n	8010b82 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8010a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a3e:	3334      	adds	r3, #52	; 0x34
 8010a40:	332c      	adds	r3, #44	; 0x2c
 8010a42:	4618      	mov	r0, r3
 8010a44:	f7fe fc1c 	bl	800f280 <ld_dword>
 8010a48:	4602      	mov	r2, r0
 8010a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a4c:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8010a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a50:	699b      	ldr	r3, [r3, #24]
 8010a52:	009b      	lsls	r3, r3, #2
 8010a54:	647b      	str	r3, [r7, #68]	; 0x44
 8010a56:	e01f      	b.n	8010a98 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8010a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a5a:	891b      	ldrh	r3, [r3, #8]
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d101      	bne.n	8010a64 <find_volume+0x374>
 8010a60:	230d      	movs	r3, #13
 8010a62:	e08e      	b.n	8010b82 <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8010a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010a68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a6a:	441a      	add	r2, r3
 8010a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a6e:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8010a70:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010a74:	2b02      	cmp	r3, #2
 8010a76:	d103      	bne.n	8010a80 <find_volume+0x390>
 8010a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a7a:	699b      	ldr	r3, [r3, #24]
 8010a7c:	005b      	lsls	r3, r3, #1
 8010a7e:	e00a      	b.n	8010a96 <find_volume+0x3a6>
 8010a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a82:	699a      	ldr	r2, [r3, #24]
 8010a84:	4613      	mov	r3, r2
 8010a86:	005b      	lsls	r3, r3, #1
 8010a88:	4413      	add	r3, r2
 8010a8a:	085a      	lsrs	r2, r3, #1
 8010a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a8e:	699b      	ldr	r3, [r3, #24]
 8010a90:	f003 0301 	and.w	r3, r3, #1
 8010a94:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8010a96:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8010a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a9a:	69da      	ldr	r2, [r3, #28]
 8010a9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a9e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8010aa2:	0a5b      	lsrs	r3, r3, #9
 8010aa4:	429a      	cmp	r2, r3
 8010aa6:	d201      	bcs.n	8010aac <find_volume+0x3bc>
 8010aa8:	230d      	movs	r3, #13
 8010aaa:	e06a      	b.n	8010b82 <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8010aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010aae:	f04f 32ff 	mov.w	r2, #4294967295
 8010ab2:	615a      	str	r2, [r3, #20]
 8010ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ab6:	695a      	ldr	r2, [r3, #20]
 8010ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010aba:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8010abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010abe:	2280      	movs	r2, #128	; 0x80
 8010ac0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8010ac2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010ac6:	2b03      	cmp	r3, #3
 8010ac8:	d149      	bne.n	8010b5e <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8010aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010acc:	3334      	adds	r3, #52	; 0x34
 8010ace:	3330      	adds	r3, #48	; 0x30
 8010ad0:	4618      	mov	r0, r3
 8010ad2:	f7fe fbbd 	bl	800f250 <ld_word>
 8010ad6:	4603      	mov	r3, r0
 8010ad8:	2b01      	cmp	r3, #1
 8010ada:	d140      	bne.n	8010b5e <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8010adc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010ade:	3301      	adds	r3, #1
 8010ae0:	4619      	mov	r1, r3
 8010ae2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010ae4:	f7fe fe96 	bl	800f814 <move_window>
 8010ae8:	4603      	mov	r3, r0
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d137      	bne.n	8010b5e <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 8010aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010af0:	2200      	movs	r2, #0
 8010af2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010af6:	3334      	adds	r3, #52	; 0x34
 8010af8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010afc:	4618      	mov	r0, r3
 8010afe:	f7fe fba7 	bl	800f250 <ld_word>
 8010b02:	4603      	mov	r3, r0
 8010b04:	461a      	mov	r2, r3
 8010b06:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010b0a:	429a      	cmp	r2, r3
 8010b0c:	d127      	bne.n	8010b5e <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8010b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b10:	3334      	adds	r3, #52	; 0x34
 8010b12:	4618      	mov	r0, r3
 8010b14:	f7fe fbb4 	bl	800f280 <ld_dword>
 8010b18:	4603      	mov	r3, r0
 8010b1a:	4a1c      	ldr	r2, [pc, #112]	; (8010b8c <find_volume+0x49c>)
 8010b1c:	4293      	cmp	r3, r2
 8010b1e:	d11e      	bne.n	8010b5e <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8010b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b22:	3334      	adds	r3, #52	; 0x34
 8010b24:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010b28:	4618      	mov	r0, r3
 8010b2a:	f7fe fba9 	bl	800f280 <ld_dword>
 8010b2e:	4603      	mov	r3, r0
 8010b30:	4a17      	ldr	r2, [pc, #92]	; (8010b90 <find_volume+0x4a0>)
 8010b32:	4293      	cmp	r3, r2
 8010b34:	d113      	bne.n	8010b5e <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8010b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b38:	3334      	adds	r3, #52	; 0x34
 8010b3a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8010b3e:	4618      	mov	r0, r3
 8010b40:	f7fe fb9e 	bl	800f280 <ld_dword>
 8010b44:	4602      	mov	r2, r0
 8010b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b48:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8010b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b4c:	3334      	adds	r3, #52	; 0x34
 8010b4e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8010b52:	4618      	mov	r0, r3
 8010b54:	f7fe fb94 	bl	800f280 <ld_dword>
 8010b58:	4602      	mov	r2, r0
 8010b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b5c:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8010b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b60:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8010b64:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8010b66:	4b0b      	ldr	r3, [pc, #44]	; (8010b94 <find_volume+0x4a4>)
 8010b68:	881b      	ldrh	r3, [r3, #0]
 8010b6a:	3301      	adds	r3, #1
 8010b6c:	b29a      	uxth	r2, r3
 8010b6e:	4b09      	ldr	r3, [pc, #36]	; (8010b94 <find_volume+0x4a4>)
 8010b70:	801a      	strh	r2, [r3, #0]
 8010b72:	4b08      	ldr	r3, [pc, #32]	; (8010b94 <find_volume+0x4a4>)
 8010b74:	881a      	ldrh	r2, [r3, #0]
 8010b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b78:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8010b7a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010b7c:	f7fe fde2 	bl	800f744 <clear_lock>
#endif
	return FR_OK;
 8010b80:	2300      	movs	r3, #0
}
 8010b82:	4618      	mov	r0, r3
 8010b84:	3758      	adds	r7, #88	; 0x58
 8010b86:	46bd      	mov	sp, r7
 8010b88:	bd80      	pop	{r7, pc}
 8010b8a:	bf00      	nop
 8010b8c:	41615252 	.word	0x41615252
 8010b90:	61417272 	.word	0x61417272
 8010b94:	20001338 	.word	0x20001338

08010b98 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8010b98:	b580      	push	{r7, lr}
 8010b9a:	b084      	sub	sp, #16
 8010b9c:	af00      	add	r7, sp, #0
 8010b9e:	6078      	str	r0, [r7, #4]
 8010ba0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8010ba2:	2309      	movs	r3, #9
 8010ba4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d02e      	beq.n	8010c0a <validate+0x72>
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d02a      	beq.n	8010c0a <validate+0x72>
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	781b      	ldrb	r3, [r3, #0]
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d025      	beq.n	8010c0a <validate+0x72>
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	889a      	ldrh	r2, [r3, #4]
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	88db      	ldrh	r3, [r3, #6]
 8010bc8:	429a      	cmp	r2, r3
 8010bca:	d11e      	bne.n	8010c0a <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	4618      	mov	r0, r3
 8010bd2:	f7fe fc3d 	bl	800f450 <lock_fs>
 8010bd6:	4603      	mov	r3, r0
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d014      	beq.n	8010c06 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	785b      	ldrb	r3, [r3, #1]
 8010be2:	4618      	mov	r0, r3
 8010be4:	f7fe fa96 	bl	800f114 <disk_status>
 8010be8:	4603      	mov	r3, r0
 8010bea:	f003 0301 	and.w	r3, r3, #1
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d102      	bne.n	8010bf8 <validate+0x60>
				res = FR_OK;
 8010bf2:	2300      	movs	r3, #0
 8010bf4:	73fb      	strb	r3, [r7, #15]
 8010bf6:	e008      	b.n	8010c0a <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	2100      	movs	r1, #0
 8010bfe:	4618      	mov	r0, r3
 8010c00:	f7fe fc3c 	bl	800f47c <unlock_fs>
 8010c04:	e001      	b.n	8010c0a <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8010c06:	230f      	movs	r3, #15
 8010c08:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8010c0a:	7bfb      	ldrb	r3, [r7, #15]
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d102      	bne.n	8010c16 <validate+0x7e>
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	e000      	b.n	8010c18 <validate+0x80>
 8010c16:	2300      	movs	r3, #0
 8010c18:	683a      	ldr	r2, [r7, #0]
 8010c1a:	6013      	str	r3, [r2, #0]
	return res;
 8010c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c1e:	4618      	mov	r0, r3
 8010c20:	3710      	adds	r7, #16
 8010c22:	46bd      	mov	sp, r7
 8010c24:	bd80      	pop	{r7, pc}
	...

08010c28 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8010c28:	b580      	push	{r7, lr}
 8010c2a:	b088      	sub	sp, #32
 8010c2c:	af00      	add	r7, sp, #0
 8010c2e:	60f8      	str	r0, [r7, #12]
 8010c30:	60b9      	str	r1, [r7, #8]
 8010c32:	4613      	mov	r3, r2
 8010c34:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8010c36:	68bb      	ldr	r3, [r7, #8]
 8010c38:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8010c3a:	f107 0310 	add.w	r3, r7, #16
 8010c3e:	4618      	mov	r0, r3
 8010c40:	f7ff fcbb 	bl	80105ba <get_ldnumber>
 8010c44:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8010c46:	69fb      	ldr	r3, [r7, #28]
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	da01      	bge.n	8010c50 <f_mount+0x28>
 8010c4c:	230b      	movs	r3, #11
 8010c4e:	e048      	b.n	8010ce2 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010c50:	4a26      	ldr	r2, [pc, #152]	; (8010cec <f_mount+0xc4>)
 8010c52:	69fb      	ldr	r3, [r7, #28]
 8010c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010c58:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8010c5a:	69bb      	ldr	r3, [r7, #24]
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d00f      	beq.n	8010c80 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8010c60:	69b8      	ldr	r0, [r7, #24]
 8010c62:	f7fe fd6f 	bl	800f744 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8010c66:	69bb      	ldr	r3, [r7, #24]
 8010c68:	68db      	ldr	r3, [r3, #12]
 8010c6a:	4618      	mov	r0, r3
 8010c6c:	f000 fef9 	bl	8011a62 <ff_del_syncobj>
 8010c70:	4603      	mov	r3, r0
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d101      	bne.n	8010c7a <f_mount+0x52>
 8010c76:	2302      	movs	r3, #2
 8010c78:	e033      	b.n	8010ce2 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8010c7a:	69bb      	ldr	r3, [r7, #24]
 8010c7c:	2200      	movs	r2, #0
 8010c7e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d00f      	beq.n	8010ca6 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8010c86:	68fb      	ldr	r3, [r7, #12]
 8010c88:	2200      	movs	r2, #0
 8010c8a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8010c8c:	69fb      	ldr	r3, [r7, #28]
 8010c8e:	b2da      	uxtb	r2, r3
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	330c      	adds	r3, #12
 8010c94:	4619      	mov	r1, r3
 8010c96:	4610      	mov	r0, r2
 8010c98:	f000 fec3 	bl	8011a22 <ff_cre_syncobj>
 8010c9c:	4603      	mov	r3, r0
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d101      	bne.n	8010ca6 <f_mount+0x7e>
 8010ca2:	2302      	movs	r3, #2
 8010ca4:	e01d      	b.n	8010ce2 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010ca6:	68fa      	ldr	r2, [r7, #12]
 8010ca8:	4910      	ldr	r1, [pc, #64]	; (8010cec <f_mount+0xc4>)
 8010caa:	69fb      	ldr	r3, [r7, #28]
 8010cac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d002      	beq.n	8010cbc <f_mount+0x94>
 8010cb6:	79fb      	ldrb	r3, [r7, #7]
 8010cb8:	2b01      	cmp	r3, #1
 8010cba:	d001      	beq.n	8010cc0 <f_mount+0x98>
 8010cbc:	2300      	movs	r3, #0
 8010cbe:	e010      	b.n	8010ce2 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8010cc0:	f107 010c 	add.w	r1, r7, #12
 8010cc4:	f107 0308 	add.w	r3, r7, #8
 8010cc8:	2200      	movs	r2, #0
 8010cca:	4618      	mov	r0, r3
 8010ccc:	f7ff fd10 	bl	80106f0 <find_volume>
 8010cd0:	4603      	mov	r3, r0
 8010cd2:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8010cd4:	68fb      	ldr	r3, [r7, #12]
 8010cd6:	7dfa      	ldrb	r2, [r7, #23]
 8010cd8:	4611      	mov	r1, r2
 8010cda:	4618      	mov	r0, r3
 8010cdc:	f7fe fbce 	bl	800f47c <unlock_fs>
 8010ce0:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ce2:	4618      	mov	r0, r3
 8010ce4:	3720      	adds	r7, #32
 8010ce6:	46bd      	mov	sp, r7
 8010ce8:	bd80      	pop	{r7, pc}
 8010cea:	bf00      	nop
 8010cec:	20001334 	.word	0x20001334

08010cf0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010cf0:	b580      	push	{r7, lr}
 8010cf2:	b098      	sub	sp, #96	; 0x60
 8010cf4:	af00      	add	r7, sp, #0
 8010cf6:	60f8      	str	r0, [r7, #12]
 8010cf8:	60b9      	str	r1, [r7, #8]
 8010cfa:	4613      	mov	r3, r2
 8010cfc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8010cfe:	68fb      	ldr	r3, [r7, #12]
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d101      	bne.n	8010d08 <f_open+0x18>
 8010d04:	2309      	movs	r3, #9
 8010d06:	e1b4      	b.n	8011072 <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8010d08:	79fb      	ldrb	r3, [r7, #7]
 8010d0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010d0e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8010d10:	79fa      	ldrb	r2, [r7, #7]
 8010d12:	f107 0110 	add.w	r1, r7, #16
 8010d16:	f107 0308 	add.w	r3, r7, #8
 8010d1a:	4618      	mov	r0, r3
 8010d1c:	f7ff fce8 	bl	80106f0 <find_volume>
 8010d20:	4603      	mov	r3, r0
 8010d22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8010d26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	f040 8191 	bne.w	8011052 <f_open+0x362>
		dj.obj.fs = fs;
 8010d30:	693b      	ldr	r3, [r7, #16]
 8010d32:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8010d34:	68ba      	ldr	r2, [r7, #8]
 8010d36:	f107 0314 	add.w	r3, r7, #20
 8010d3a:	4611      	mov	r1, r2
 8010d3c:	4618      	mov	r0, r3
 8010d3e:	f7ff fbcb 	bl	80104d8 <follow_path>
 8010d42:	4603      	mov	r3, r0
 8010d44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8010d48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d11a      	bne.n	8010d86 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8010d50:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010d54:	b25b      	sxtb	r3, r3
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	da03      	bge.n	8010d62 <f_open+0x72>
				res = FR_INVALID_NAME;
 8010d5a:	2306      	movs	r3, #6
 8010d5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010d60:	e011      	b.n	8010d86 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010d62:	79fb      	ldrb	r3, [r7, #7]
 8010d64:	f023 0301 	bic.w	r3, r3, #1
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	bf14      	ite	ne
 8010d6c:	2301      	movne	r3, #1
 8010d6e:	2300      	moveq	r3, #0
 8010d70:	b2db      	uxtb	r3, r3
 8010d72:	461a      	mov	r2, r3
 8010d74:	f107 0314 	add.w	r3, r7, #20
 8010d78:	4611      	mov	r1, r2
 8010d7a:	4618      	mov	r0, r3
 8010d7c:	f7fe fb9a 	bl	800f4b4 <chk_lock>
 8010d80:	4603      	mov	r3, r0
 8010d82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8010d86:	79fb      	ldrb	r3, [r7, #7]
 8010d88:	f003 031c 	and.w	r3, r3, #28
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d07f      	beq.n	8010e90 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8010d90:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d017      	beq.n	8010dc8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8010d98:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010d9c:	2b04      	cmp	r3, #4
 8010d9e:	d10e      	bne.n	8010dbe <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010da0:	f7fe fbe4 	bl	800f56c <enq_lock>
 8010da4:	4603      	mov	r3, r0
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d006      	beq.n	8010db8 <f_open+0xc8>
 8010daa:	f107 0314 	add.w	r3, r7, #20
 8010dae:	4618      	mov	r0, r3
 8010db0:	f7ff facb 	bl	801034a <dir_register>
 8010db4:	4603      	mov	r3, r0
 8010db6:	e000      	b.n	8010dba <f_open+0xca>
 8010db8:	2312      	movs	r3, #18
 8010dba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8010dbe:	79fb      	ldrb	r3, [r7, #7]
 8010dc0:	f043 0308 	orr.w	r3, r3, #8
 8010dc4:	71fb      	strb	r3, [r7, #7]
 8010dc6:	e010      	b.n	8010dea <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8010dc8:	7ebb      	ldrb	r3, [r7, #26]
 8010dca:	f003 0311 	and.w	r3, r3, #17
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d003      	beq.n	8010dda <f_open+0xea>
					res = FR_DENIED;
 8010dd2:	2307      	movs	r3, #7
 8010dd4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010dd8:	e007      	b.n	8010dea <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8010dda:	79fb      	ldrb	r3, [r7, #7]
 8010ddc:	f003 0304 	and.w	r3, r3, #4
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d002      	beq.n	8010dea <f_open+0xfa>
 8010de4:	2308      	movs	r3, #8
 8010de6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8010dea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d168      	bne.n	8010ec4 <f_open+0x1d4>
 8010df2:	79fb      	ldrb	r3, [r7, #7]
 8010df4:	f003 0308 	and.w	r3, r3, #8
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d063      	beq.n	8010ec4 <f_open+0x1d4>
				dw = GET_FATTIME();
 8010dfc:	f7fd ff28 	bl	800ec50 <get_fattime>
 8010e00:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8010e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e04:	330e      	adds	r3, #14
 8010e06:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010e08:	4618      	mov	r0, r3
 8010e0a:	f7fe fa77 	bl	800f2fc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8010e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e10:	3316      	adds	r3, #22
 8010e12:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010e14:	4618      	mov	r0, r3
 8010e16:	f7fe fa71 	bl	800f2fc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8010e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e1c:	330b      	adds	r3, #11
 8010e1e:	2220      	movs	r2, #32
 8010e20:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8010e22:	693b      	ldr	r3, [r7, #16]
 8010e24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010e26:	4611      	mov	r1, r2
 8010e28:	4618      	mov	r0, r3
 8010e2a:	f7ff f9fa 	bl	8010222 <ld_clust>
 8010e2e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8010e30:	693b      	ldr	r3, [r7, #16]
 8010e32:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010e34:	2200      	movs	r2, #0
 8010e36:	4618      	mov	r0, r3
 8010e38:	f7ff fa12 	bl	8010260 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8010e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e3e:	331c      	adds	r3, #28
 8010e40:	2100      	movs	r1, #0
 8010e42:	4618      	mov	r0, r3
 8010e44:	f7fe fa5a 	bl	800f2fc <st_dword>
					fs->wflag = 1;
 8010e48:	693b      	ldr	r3, [r7, #16]
 8010e4a:	2201      	movs	r2, #1
 8010e4c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8010e4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d037      	beq.n	8010ec4 <f_open+0x1d4>
						dw = fs->winsect;
 8010e54:	693b      	ldr	r3, [r7, #16]
 8010e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e58:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8010e5a:	f107 0314 	add.w	r3, r7, #20
 8010e5e:	2200      	movs	r2, #0
 8010e60:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8010e62:	4618      	mov	r0, r3
 8010e64:	f7fe ff25 	bl	800fcb2 <remove_chain>
 8010e68:	4603      	mov	r3, r0
 8010e6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8010e6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d126      	bne.n	8010ec4 <f_open+0x1d4>
							res = move_window(fs, dw);
 8010e76:	693b      	ldr	r3, [r7, #16]
 8010e78:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010e7a:	4618      	mov	r0, r3
 8010e7c:	f7fe fcca 	bl	800f814 <move_window>
 8010e80:	4603      	mov	r3, r0
 8010e82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8010e86:	693b      	ldr	r3, [r7, #16]
 8010e88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010e8a:	3a01      	subs	r2, #1
 8010e8c:	611a      	str	r2, [r3, #16]
 8010e8e:	e019      	b.n	8010ec4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8010e90:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d115      	bne.n	8010ec4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8010e98:	7ebb      	ldrb	r3, [r7, #26]
 8010e9a:	f003 0310 	and.w	r3, r3, #16
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d003      	beq.n	8010eaa <f_open+0x1ba>
					res = FR_NO_FILE;
 8010ea2:	2304      	movs	r3, #4
 8010ea4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010ea8:	e00c      	b.n	8010ec4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8010eaa:	79fb      	ldrb	r3, [r7, #7]
 8010eac:	f003 0302 	and.w	r3, r3, #2
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d007      	beq.n	8010ec4 <f_open+0x1d4>
 8010eb4:	7ebb      	ldrb	r3, [r7, #26]
 8010eb6:	f003 0301 	and.w	r3, r3, #1
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d002      	beq.n	8010ec4 <f_open+0x1d4>
						res = FR_DENIED;
 8010ebe:	2307      	movs	r3, #7
 8010ec0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8010ec4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d128      	bne.n	8010f1e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8010ecc:	79fb      	ldrb	r3, [r7, #7]
 8010ece:	f003 0308 	and.w	r3, r3, #8
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d003      	beq.n	8010ede <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8010ed6:	79fb      	ldrb	r3, [r7, #7]
 8010ed8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010edc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8010ede:	693b      	ldr	r3, [r7, #16]
 8010ee0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8010ee6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010eec:	79fb      	ldrb	r3, [r7, #7]
 8010eee:	f023 0301 	bic.w	r3, r3, #1
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	bf14      	ite	ne
 8010ef6:	2301      	movne	r3, #1
 8010ef8:	2300      	moveq	r3, #0
 8010efa:	b2db      	uxtb	r3, r3
 8010efc:	461a      	mov	r2, r3
 8010efe:	f107 0314 	add.w	r3, r7, #20
 8010f02:	4611      	mov	r1, r2
 8010f04:	4618      	mov	r0, r3
 8010f06:	f7fe fb53 	bl	800f5b0 <inc_lock>
 8010f0a:	4602      	mov	r2, r0
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	691b      	ldr	r3, [r3, #16]
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d102      	bne.n	8010f1e <f_open+0x22e>
 8010f18:	2302      	movs	r3, #2
 8010f1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8010f1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	f040 8095 	bne.w	8011052 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8010f28:	693b      	ldr	r3, [r7, #16]
 8010f2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010f2c:	4611      	mov	r1, r2
 8010f2e:	4618      	mov	r0, r3
 8010f30:	f7ff f977 	bl	8010222 <ld_clust>
 8010f34:	4602      	mov	r2, r0
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8010f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f3c:	331c      	adds	r3, #28
 8010f3e:	4618      	mov	r0, r3
 8010f40:	f7fe f99e 	bl	800f280 <ld_dword>
 8010f44:	4602      	mov	r2, r0
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8010f4a:	68fb      	ldr	r3, [r7, #12]
 8010f4c:	2200      	movs	r2, #0
 8010f4e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8010f50:	693a      	ldr	r2, [r7, #16]
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8010f56:	693b      	ldr	r3, [r7, #16]
 8010f58:	88da      	ldrh	r2, [r3, #6]
 8010f5a:	68fb      	ldr	r3, [r7, #12]
 8010f5c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8010f5e:	68fb      	ldr	r3, [r7, #12]
 8010f60:	79fa      	ldrb	r2, [r7, #7]
 8010f62:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8010f64:	68fb      	ldr	r3, [r7, #12]
 8010f66:	2200      	movs	r2, #0
 8010f68:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8010f6a:	68fb      	ldr	r3, [r7, #12]
 8010f6c:	2200      	movs	r2, #0
 8010f6e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	2200      	movs	r2, #0
 8010f74:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	3330      	adds	r3, #48	; 0x30
 8010f7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010f7e:	2100      	movs	r1, #0
 8010f80:	4618      	mov	r0, r3
 8010f82:	f7fe fa08 	bl	800f396 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8010f86:	79fb      	ldrb	r3, [r7, #7]
 8010f88:	f003 0320 	and.w	r3, r3, #32
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d060      	beq.n	8011052 <f_open+0x362>
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	68db      	ldr	r3, [r3, #12]
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d05c      	beq.n	8011052 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8010f98:	68fb      	ldr	r3, [r7, #12]
 8010f9a:	68da      	ldr	r2, [r3, #12]
 8010f9c:	68fb      	ldr	r3, [r7, #12]
 8010f9e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8010fa0:	693b      	ldr	r3, [r7, #16]
 8010fa2:	895b      	ldrh	r3, [r3, #10]
 8010fa4:	025b      	lsls	r3, r3, #9
 8010fa6:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8010fa8:	68fb      	ldr	r3, [r7, #12]
 8010faa:	689b      	ldr	r3, [r3, #8]
 8010fac:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	68db      	ldr	r3, [r3, #12]
 8010fb2:	657b      	str	r3, [r7, #84]	; 0x54
 8010fb4:	e016      	b.n	8010fe4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8010fb6:	68fb      	ldr	r3, [r7, #12]
 8010fb8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010fba:	4618      	mov	r0, r3
 8010fbc:	f7fe fce5 	bl	800f98a <get_fat>
 8010fc0:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8010fc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010fc4:	2b01      	cmp	r3, #1
 8010fc6:	d802      	bhi.n	8010fce <f_open+0x2de>
 8010fc8:	2302      	movs	r3, #2
 8010fca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8010fce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010fd4:	d102      	bne.n	8010fdc <f_open+0x2ec>
 8010fd6:	2301      	movs	r3, #1
 8010fd8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010fdc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010fde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010fe0:	1ad3      	subs	r3, r2, r3
 8010fe2:	657b      	str	r3, [r7, #84]	; 0x54
 8010fe4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d103      	bne.n	8010ff4 <f_open+0x304>
 8010fec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010fee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010ff0:	429a      	cmp	r2, r3
 8010ff2:	d8e0      	bhi.n	8010fb6 <f_open+0x2c6>
				}
				fp->clust = clst;
 8010ff4:	68fb      	ldr	r3, [r7, #12]
 8010ff6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010ff8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8010ffa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d127      	bne.n	8011052 <f_open+0x362>
 8011002:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011004:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011008:	2b00      	cmp	r3, #0
 801100a:	d022      	beq.n	8011052 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801100c:	693b      	ldr	r3, [r7, #16]
 801100e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011010:	4618      	mov	r0, r3
 8011012:	f7fe fc9b 	bl	800f94c <clust2sect>
 8011016:	6478      	str	r0, [r7, #68]	; 0x44
 8011018:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801101a:	2b00      	cmp	r3, #0
 801101c:	d103      	bne.n	8011026 <f_open+0x336>
						res = FR_INT_ERR;
 801101e:	2302      	movs	r3, #2
 8011020:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8011024:	e015      	b.n	8011052 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8011026:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011028:	0a5a      	lsrs	r2, r3, #9
 801102a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801102c:	441a      	add	r2, r3
 801102e:	68fb      	ldr	r3, [r7, #12]
 8011030:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8011032:	693b      	ldr	r3, [r7, #16]
 8011034:	7858      	ldrb	r0, [r3, #1]
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801103c:	68fb      	ldr	r3, [r7, #12]
 801103e:	6a1a      	ldr	r2, [r3, #32]
 8011040:	2301      	movs	r3, #1
 8011042:	f7fe f8a7 	bl	800f194 <disk_read>
 8011046:	4603      	mov	r3, r0
 8011048:	2b00      	cmp	r3, #0
 801104a:	d002      	beq.n	8011052 <f_open+0x362>
 801104c:	2301      	movs	r3, #1
 801104e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8011052:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011056:	2b00      	cmp	r3, #0
 8011058:	d002      	beq.n	8011060 <f_open+0x370>
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	2200      	movs	r2, #0
 801105e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8011060:	693b      	ldr	r3, [r7, #16]
 8011062:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8011066:	4611      	mov	r1, r2
 8011068:	4618      	mov	r0, r3
 801106a:	f7fe fa07 	bl	800f47c <unlock_fs>
 801106e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8011072:	4618      	mov	r0, r3
 8011074:	3760      	adds	r7, #96	; 0x60
 8011076:	46bd      	mov	sp, r7
 8011078:	bd80      	pop	{r7, pc}

0801107a <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 801107a:	b580      	push	{r7, lr}
 801107c:	b08e      	sub	sp, #56	; 0x38
 801107e:	af00      	add	r7, sp, #0
 8011080:	60f8      	str	r0, [r7, #12]
 8011082:	60b9      	str	r1, [r7, #8]
 8011084:	607a      	str	r2, [r7, #4]
 8011086:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8011088:	68bb      	ldr	r3, [r7, #8]
 801108a:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 801108c:	683b      	ldr	r3, [r7, #0]
 801108e:	2200      	movs	r2, #0
 8011090:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	f107 0214 	add.w	r2, r7, #20
 8011098:	4611      	mov	r1, r2
 801109a:	4618      	mov	r0, r3
 801109c:	f7ff fd7c 	bl	8010b98 <validate>
 80110a0:	4603      	mov	r3, r0
 80110a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80110a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d107      	bne.n	80110be <f_read+0x44>
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	7d5b      	ldrb	r3, [r3, #21]
 80110b2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80110b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d009      	beq.n	80110d2 <f_read+0x58>
 80110be:	697b      	ldr	r3, [r7, #20]
 80110c0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80110c4:	4611      	mov	r1, r2
 80110c6:	4618      	mov	r0, r3
 80110c8:	f7fe f9d8 	bl	800f47c <unlock_fs>
 80110cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80110d0:	e13d      	b.n	801134e <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80110d2:	68fb      	ldr	r3, [r7, #12]
 80110d4:	7d1b      	ldrb	r3, [r3, #20]
 80110d6:	f003 0301 	and.w	r3, r3, #1
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d106      	bne.n	80110ec <f_read+0x72>
 80110de:	697b      	ldr	r3, [r7, #20]
 80110e0:	2107      	movs	r1, #7
 80110e2:	4618      	mov	r0, r3
 80110e4:	f7fe f9ca 	bl	800f47c <unlock_fs>
 80110e8:	2307      	movs	r3, #7
 80110ea:	e130      	b.n	801134e <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 80110ec:	68fb      	ldr	r3, [r7, #12]
 80110ee:	68da      	ldr	r2, [r3, #12]
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	699b      	ldr	r3, [r3, #24]
 80110f4:	1ad3      	subs	r3, r2, r3
 80110f6:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80110f8:	687a      	ldr	r2, [r7, #4]
 80110fa:	6a3b      	ldr	r3, [r7, #32]
 80110fc:	429a      	cmp	r2, r3
 80110fe:	f240 811c 	bls.w	801133a <f_read+0x2c0>
 8011102:	6a3b      	ldr	r3, [r7, #32]
 8011104:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8011106:	e118      	b.n	801133a <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8011108:	68fb      	ldr	r3, [r7, #12]
 801110a:	699b      	ldr	r3, [r3, #24]
 801110c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011110:	2b00      	cmp	r3, #0
 8011112:	f040 80e4 	bne.w	80112de <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	699b      	ldr	r3, [r3, #24]
 801111a:	0a5b      	lsrs	r3, r3, #9
 801111c:	697a      	ldr	r2, [r7, #20]
 801111e:	8952      	ldrh	r2, [r2, #10]
 8011120:	3a01      	subs	r2, #1
 8011122:	4013      	ands	r3, r2
 8011124:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8011126:	69fb      	ldr	r3, [r7, #28]
 8011128:	2b00      	cmp	r3, #0
 801112a:	d139      	bne.n	80111a0 <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	699b      	ldr	r3, [r3, #24]
 8011130:	2b00      	cmp	r3, #0
 8011132:	d103      	bne.n	801113c <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8011134:	68fb      	ldr	r3, [r7, #12]
 8011136:	689b      	ldr	r3, [r3, #8]
 8011138:	633b      	str	r3, [r7, #48]	; 0x30
 801113a:	e013      	b.n	8011164 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011140:	2b00      	cmp	r3, #0
 8011142:	d007      	beq.n	8011154 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	699b      	ldr	r3, [r3, #24]
 8011148:	4619      	mov	r1, r3
 801114a:	68f8      	ldr	r0, [r7, #12]
 801114c:	f7fe feae 	bl	800feac <clmt_clust>
 8011150:	6338      	str	r0, [r7, #48]	; 0x30
 8011152:	e007      	b.n	8011164 <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8011154:	68fa      	ldr	r2, [r7, #12]
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	69db      	ldr	r3, [r3, #28]
 801115a:	4619      	mov	r1, r3
 801115c:	4610      	mov	r0, r2
 801115e:	f7fe fc14 	bl	800f98a <get_fat>
 8011162:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8011164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011166:	2b01      	cmp	r3, #1
 8011168:	d809      	bhi.n	801117e <f_read+0x104>
 801116a:	68fb      	ldr	r3, [r7, #12]
 801116c:	2202      	movs	r2, #2
 801116e:	755a      	strb	r2, [r3, #21]
 8011170:	697b      	ldr	r3, [r7, #20]
 8011172:	2102      	movs	r1, #2
 8011174:	4618      	mov	r0, r3
 8011176:	f7fe f981 	bl	800f47c <unlock_fs>
 801117a:	2302      	movs	r3, #2
 801117c:	e0e7      	b.n	801134e <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801117e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011184:	d109      	bne.n	801119a <f_read+0x120>
 8011186:	68fb      	ldr	r3, [r7, #12]
 8011188:	2201      	movs	r2, #1
 801118a:	755a      	strb	r2, [r3, #21]
 801118c:	697b      	ldr	r3, [r7, #20]
 801118e:	2101      	movs	r1, #1
 8011190:	4618      	mov	r0, r3
 8011192:	f7fe f973 	bl	800f47c <unlock_fs>
 8011196:	2301      	movs	r3, #1
 8011198:	e0d9      	b.n	801134e <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 801119a:	68fb      	ldr	r3, [r7, #12]
 801119c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801119e:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80111a0:	697a      	ldr	r2, [r7, #20]
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	69db      	ldr	r3, [r3, #28]
 80111a6:	4619      	mov	r1, r3
 80111a8:	4610      	mov	r0, r2
 80111aa:	f7fe fbcf 	bl	800f94c <clust2sect>
 80111ae:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80111b0:	69bb      	ldr	r3, [r7, #24]
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d109      	bne.n	80111ca <f_read+0x150>
 80111b6:	68fb      	ldr	r3, [r7, #12]
 80111b8:	2202      	movs	r2, #2
 80111ba:	755a      	strb	r2, [r3, #21]
 80111bc:	697b      	ldr	r3, [r7, #20]
 80111be:	2102      	movs	r1, #2
 80111c0:	4618      	mov	r0, r3
 80111c2:	f7fe f95b 	bl	800f47c <unlock_fs>
 80111c6:	2302      	movs	r3, #2
 80111c8:	e0c1      	b.n	801134e <f_read+0x2d4>
			sect += csect;
 80111ca:	69ba      	ldr	r2, [r7, #24]
 80111cc:	69fb      	ldr	r3, [r7, #28]
 80111ce:	4413      	add	r3, r2
 80111d0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	0a5b      	lsrs	r3, r3, #9
 80111d6:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80111d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d03e      	beq.n	801125c <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80111de:	69fa      	ldr	r2, [r7, #28]
 80111e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111e2:	4413      	add	r3, r2
 80111e4:	697a      	ldr	r2, [r7, #20]
 80111e6:	8952      	ldrh	r2, [r2, #10]
 80111e8:	4293      	cmp	r3, r2
 80111ea:	d905      	bls.n	80111f8 <f_read+0x17e>
					cc = fs->csize - csect;
 80111ec:	697b      	ldr	r3, [r7, #20]
 80111ee:	895b      	ldrh	r3, [r3, #10]
 80111f0:	461a      	mov	r2, r3
 80111f2:	69fb      	ldr	r3, [r7, #28]
 80111f4:	1ad3      	subs	r3, r2, r3
 80111f6:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80111f8:	697b      	ldr	r3, [r7, #20]
 80111fa:	7858      	ldrb	r0, [r3, #1]
 80111fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111fe:	69ba      	ldr	r2, [r7, #24]
 8011200:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011202:	f7fd ffc7 	bl	800f194 <disk_read>
 8011206:	4603      	mov	r3, r0
 8011208:	2b00      	cmp	r3, #0
 801120a:	d009      	beq.n	8011220 <f_read+0x1a6>
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	2201      	movs	r2, #1
 8011210:	755a      	strb	r2, [r3, #21]
 8011212:	697b      	ldr	r3, [r7, #20]
 8011214:	2101      	movs	r1, #1
 8011216:	4618      	mov	r0, r3
 8011218:	f7fe f930 	bl	800f47c <unlock_fs>
 801121c:	2301      	movs	r3, #1
 801121e:	e096      	b.n	801134e <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8011220:	68fb      	ldr	r3, [r7, #12]
 8011222:	7d1b      	ldrb	r3, [r3, #20]
 8011224:	b25b      	sxtb	r3, r3
 8011226:	2b00      	cmp	r3, #0
 8011228:	da14      	bge.n	8011254 <f_read+0x1da>
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	6a1a      	ldr	r2, [r3, #32]
 801122e:	69bb      	ldr	r3, [r7, #24]
 8011230:	1ad3      	subs	r3, r2, r3
 8011232:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011234:	429a      	cmp	r2, r3
 8011236:	d90d      	bls.n	8011254 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	6a1a      	ldr	r2, [r3, #32]
 801123c:	69bb      	ldr	r3, [r7, #24]
 801123e:	1ad3      	subs	r3, r2, r3
 8011240:	025b      	lsls	r3, r3, #9
 8011242:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011244:	18d0      	adds	r0, r2, r3
 8011246:	68fb      	ldr	r3, [r7, #12]
 8011248:	3330      	adds	r3, #48	; 0x30
 801124a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801124e:	4619      	mov	r1, r3
 8011250:	f7fe f880 	bl	800f354 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8011254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011256:	025b      	lsls	r3, r3, #9
 8011258:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 801125a:	e05a      	b.n	8011312 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801125c:	68fb      	ldr	r3, [r7, #12]
 801125e:	6a1b      	ldr	r3, [r3, #32]
 8011260:	69ba      	ldr	r2, [r7, #24]
 8011262:	429a      	cmp	r2, r3
 8011264:	d038      	beq.n	80112d8 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8011266:	68fb      	ldr	r3, [r7, #12]
 8011268:	7d1b      	ldrb	r3, [r3, #20]
 801126a:	b25b      	sxtb	r3, r3
 801126c:	2b00      	cmp	r3, #0
 801126e:	da1d      	bge.n	80112ac <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011270:	697b      	ldr	r3, [r7, #20]
 8011272:	7858      	ldrb	r0, [r3, #1]
 8011274:	68fb      	ldr	r3, [r7, #12]
 8011276:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801127a:	68fb      	ldr	r3, [r7, #12]
 801127c:	6a1a      	ldr	r2, [r3, #32]
 801127e:	2301      	movs	r3, #1
 8011280:	f7fd ffa8 	bl	800f1d4 <disk_write>
 8011284:	4603      	mov	r3, r0
 8011286:	2b00      	cmp	r3, #0
 8011288:	d009      	beq.n	801129e <f_read+0x224>
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	2201      	movs	r2, #1
 801128e:	755a      	strb	r2, [r3, #21]
 8011290:	697b      	ldr	r3, [r7, #20]
 8011292:	2101      	movs	r1, #1
 8011294:	4618      	mov	r0, r3
 8011296:	f7fe f8f1 	bl	800f47c <unlock_fs>
 801129a:	2301      	movs	r3, #1
 801129c:	e057      	b.n	801134e <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	7d1b      	ldrb	r3, [r3, #20]
 80112a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80112a6:	b2da      	uxtb	r2, r3
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80112ac:	697b      	ldr	r3, [r7, #20]
 80112ae:	7858      	ldrb	r0, [r3, #1]
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80112b6:	2301      	movs	r3, #1
 80112b8:	69ba      	ldr	r2, [r7, #24]
 80112ba:	f7fd ff6b 	bl	800f194 <disk_read>
 80112be:	4603      	mov	r3, r0
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d009      	beq.n	80112d8 <f_read+0x25e>
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	2201      	movs	r2, #1
 80112c8:	755a      	strb	r2, [r3, #21]
 80112ca:	697b      	ldr	r3, [r7, #20]
 80112cc:	2101      	movs	r1, #1
 80112ce:	4618      	mov	r0, r3
 80112d0:	f7fe f8d4 	bl	800f47c <unlock_fs>
 80112d4:	2301      	movs	r3, #1
 80112d6:	e03a      	b.n	801134e <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	69ba      	ldr	r2, [r7, #24]
 80112dc:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	699b      	ldr	r3, [r3, #24]
 80112e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80112e6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80112ea:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80112ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	429a      	cmp	r2, r3
 80112f2:	d901      	bls.n	80112f8 <f_read+0x27e>
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80112f8:	68fb      	ldr	r3, [r7, #12]
 80112fa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80112fe:	68fb      	ldr	r3, [r7, #12]
 8011300:	699b      	ldr	r3, [r3, #24]
 8011302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011306:	4413      	add	r3, r2
 8011308:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801130a:	4619      	mov	r1, r3
 801130c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801130e:	f7fe f821 	bl	800f354 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8011312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011316:	4413      	add	r3, r2
 8011318:	627b      	str	r3, [r7, #36]	; 0x24
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	699a      	ldr	r2, [r3, #24]
 801131e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011320:	441a      	add	r2, r3
 8011322:	68fb      	ldr	r3, [r7, #12]
 8011324:	619a      	str	r2, [r3, #24]
 8011326:	683b      	ldr	r3, [r7, #0]
 8011328:	681a      	ldr	r2, [r3, #0]
 801132a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801132c:	441a      	add	r2, r3
 801132e:	683b      	ldr	r3, [r7, #0]
 8011330:	601a      	str	r2, [r3, #0]
 8011332:	687a      	ldr	r2, [r7, #4]
 8011334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011336:	1ad3      	subs	r3, r2, r3
 8011338:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	2b00      	cmp	r3, #0
 801133e:	f47f aee3 	bne.w	8011108 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8011342:	697b      	ldr	r3, [r7, #20]
 8011344:	2100      	movs	r1, #0
 8011346:	4618      	mov	r0, r3
 8011348:	f7fe f898 	bl	800f47c <unlock_fs>
 801134c:	2300      	movs	r3, #0
}
 801134e:	4618      	mov	r0, r3
 8011350:	3738      	adds	r7, #56	; 0x38
 8011352:	46bd      	mov	sp, r7
 8011354:	bd80      	pop	{r7, pc}

08011356 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8011356:	b580      	push	{r7, lr}
 8011358:	b086      	sub	sp, #24
 801135a:	af00      	add	r7, sp, #0
 801135c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	f107 0208 	add.w	r2, r7, #8
 8011364:	4611      	mov	r1, r2
 8011366:	4618      	mov	r0, r3
 8011368:	f7ff fc16 	bl	8010b98 <validate>
 801136c:	4603      	mov	r3, r0
 801136e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011370:	7dfb      	ldrb	r3, [r7, #23]
 8011372:	2b00      	cmp	r3, #0
 8011374:	d16d      	bne.n	8011452 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	7d1b      	ldrb	r3, [r3, #20]
 801137a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801137e:	2b00      	cmp	r3, #0
 8011380:	d067      	beq.n	8011452 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	7d1b      	ldrb	r3, [r3, #20]
 8011386:	b25b      	sxtb	r3, r3
 8011388:	2b00      	cmp	r3, #0
 801138a:	da1a      	bge.n	80113c2 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801138c:	68bb      	ldr	r3, [r7, #8]
 801138e:	7858      	ldrb	r0, [r3, #1]
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	6a1a      	ldr	r2, [r3, #32]
 801139a:	2301      	movs	r3, #1
 801139c:	f7fd ff1a 	bl	800f1d4 <disk_write>
 80113a0:	4603      	mov	r3, r0
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d006      	beq.n	80113b4 <f_sync+0x5e>
 80113a6:	68bb      	ldr	r3, [r7, #8]
 80113a8:	2101      	movs	r1, #1
 80113aa:	4618      	mov	r0, r3
 80113ac:	f7fe f866 	bl	800f47c <unlock_fs>
 80113b0:	2301      	movs	r3, #1
 80113b2:	e055      	b.n	8011460 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	7d1b      	ldrb	r3, [r3, #20]
 80113b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80113bc:	b2da      	uxtb	r2, r3
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80113c2:	f7fd fc45 	bl	800ec50 <get_fattime>
 80113c6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80113c8:	68ba      	ldr	r2, [r7, #8]
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113ce:	4619      	mov	r1, r3
 80113d0:	4610      	mov	r0, r2
 80113d2:	f7fe fa1f 	bl	800f814 <move_window>
 80113d6:	4603      	mov	r3, r0
 80113d8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80113da:	7dfb      	ldrb	r3, [r7, #23]
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d138      	bne.n	8011452 <f_sync+0xfc>
					dir = fp->dir_ptr;
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80113e4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80113e6:	68fb      	ldr	r3, [r7, #12]
 80113e8:	330b      	adds	r3, #11
 80113ea:	781a      	ldrb	r2, [r3, #0]
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	330b      	adds	r3, #11
 80113f0:	f042 0220 	orr.w	r2, r2, #32
 80113f4:	b2d2      	uxtb	r2, r2
 80113f6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	6818      	ldr	r0, [r3, #0]
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	689b      	ldr	r3, [r3, #8]
 8011400:	461a      	mov	r2, r3
 8011402:	68f9      	ldr	r1, [r7, #12]
 8011404:	f7fe ff2c 	bl	8010260 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8011408:	68fb      	ldr	r3, [r7, #12]
 801140a:	f103 021c 	add.w	r2, r3, #28
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	68db      	ldr	r3, [r3, #12]
 8011412:	4619      	mov	r1, r3
 8011414:	4610      	mov	r0, r2
 8011416:	f7fd ff71 	bl	800f2fc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801141a:	68fb      	ldr	r3, [r7, #12]
 801141c:	3316      	adds	r3, #22
 801141e:	6939      	ldr	r1, [r7, #16]
 8011420:	4618      	mov	r0, r3
 8011422:	f7fd ff6b 	bl	800f2fc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8011426:	68fb      	ldr	r3, [r7, #12]
 8011428:	3312      	adds	r3, #18
 801142a:	2100      	movs	r1, #0
 801142c:	4618      	mov	r0, r3
 801142e:	f7fd ff4a 	bl	800f2c6 <st_word>
					fs->wflag = 1;
 8011432:	68bb      	ldr	r3, [r7, #8]
 8011434:	2201      	movs	r2, #1
 8011436:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8011438:	68bb      	ldr	r3, [r7, #8]
 801143a:	4618      	mov	r0, r3
 801143c:	f7fe fa18 	bl	800f870 <sync_fs>
 8011440:	4603      	mov	r3, r0
 8011442:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	7d1b      	ldrb	r3, [r3, #20]
 8011448:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801144c:	b2da      	uxtb	r2, r3
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8011452:	68bb      	ldr	r3, [r7, #8]
 8011454:	7dfa      	ldrb	r2, [r7, #23]
 8011456:	4611      	mov	r1, r2
 8011458:	4618      	mov	r0, r3
 801145a:	f7fe f80f 	bl	800f47c <unlock_fs>
 801145e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011460:	4618      	mov	r0, r3
 8011462:	3718      	adds	r7, #24
 8011464:	46bd      	mov	sp, r7
 8011466:	bd80      	pop	{r7, pc}

08011468 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8011468:	b580      	push	{r7, lr}
 801146a:	b084      	sub	sp, #16
 801146c:	af00      	add	r7, sp, #0
 801146e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8011470:	6878      	ldr	r0, [r7, #4]
 8011472:	f7ff ff70 	bl	8011356 <f_sync>
 8011476:	4603      	mov	r3, r0
 8011478:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801147a:	7bfb      	ldrb	r3, [r7, #15]
 801147c:	2b00      	cmp	r3, #0
 801147e:	d11d      	bne.n	80114bc <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	f107 0208 	add.w	r2, r7, #8
 8011486:	4611      	mov	r1, r2
 8011488:	4618      	mov	r0, r3
 801148a:	f7ff fb85 	bl	8010b98 <validate>
 801148e:	4603      	mov	r3, r0
 8011490:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011492:	7bfb      	ldrb	r3, [r7, #15]
 8011494:	2b00      	cmp	r3, #0
 8011496:	d111      	bne.n	80114bc <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	691b      	ldr	r3, [r3, #16]
 801149c:	4618      	mov	r0, r3
 801149e:	f7fe f915 	bl	800f6cc <dec_lock>
 80114a2:	4603      	mov	r3, r0
 80114a4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80114a6:	7bfb      	ldrb	r3, [r7, #15]
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d102      	bne.n	80114b2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	2200      	movs	r2, #0
 80114b0:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 80114b2:	68bb      	ldr	r3, [r7, #8]
 80114b4:	2100      	movs	r1, #0
 80114b6:	4618      	mov	r0, r3
 80114b8:	f7fd ffe0 	bl	800f47c <unlock_fs>
#endif
		}
	}
	return res;
 80114bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80114be:	4618      	mov	r0, r3
 80114c0:	3710      	adds	r7, #16
 80114c2:	46bd      	mov	sp, r7
 80114c4:	bd80      	pop	{r7, pc}

080114c6 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80114c6:	b580      	push	{r7, lr}
 80114c8:	b090      	sub	sp, #64	; 0x40
 80114ca:	af00      	add	r7, sp, #0
 80114cc:	6078      	str	r0, [r7, #4]
 80114ce:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	f107 0208 	add.w	r2, r7, #8
 80114d6:	4611      	mov	r1, r2
 80114d8:	4618      	mov	r0, r3
 80114da:	f7ff fb5d 	bl	8010b98 <validate>
 80114de:	4603      	mov	r3, r0
 80114e0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80114e4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d103      	bne.n	80114f4 <f_lseek+0x2e>
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	7d5b      	ldrb	r3, [r3, #21]
 80114f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80114f4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d009      	beq.n	8011510 <f_lseek+0x4a>
 80114fc:	68bb      	ldr	r3, [r7, #8]
 80114fe:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8011502:	4611      	mov	r1, r2
 8011504:	4618      	mov	r0, r3
 8011506:	f7fd ffb9 	bl	800f47c <unlock_fs>
 801150a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801150e:	e229      	b.n	8011964 <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011514:	2b00      	cmp	r3, #0
 8011516:	f000 80ea 	beq.w	80116ee <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 801151a:	683b      	ldr	r3, [r7, #0]
 801151c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011520:	d164      	bne.n	80115ec <f_lseek+0x126>
			tbl = fp->cltbl;
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011526:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8011528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801152a:	1d1a      	adds	r2, r3, #4
 801152c:	627a      	str	r2, [r7, #36]	; 0x24
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	617b      	str	r3, [r7, #20]
 8011532:	2302      	movs	r3, #2
 8011534:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	689b      	ldr	r3, [r3, #8]
 801153a:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 801153c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801153e:	2b00      	cmp	r3, #0
 8011540:	d044      	beq.n	80115cc <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8011542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011544:	613b      	str	r3, [r7, #16]
 8011546:	2300      	movs	r3, #0
 8011548:	62fb      	str	r3, [r7, #44]	; 0x2c
 801154a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801154c:	3302      	adds	r3, #2
 801154e:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8011550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011552:	60fb      	str	r3, [r7, #12]
 8011554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011556:	3301      	adds	r3, #1
 8011558:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801155e:	4618      	mov	r0, r3
 8011560:	f7fe fa13 	bl	800f98a <get_fat>
 8011564:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8011566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011568:	2b01      	cmp	r3, #1
 801156a:	d809      	bhi.n	8011580 <f_lseek+0xba>
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	2202      	movs	r2, #2
 8011570:	755a      	strb	r2, [r3, #21]
 8011572:	68bb      	ldr	r3, [r7, #8]
 8011574:	2102      	movs	r1, #2
 8011576:	4618      	mov	r0, r3
 8011578:	f7fd ff80 	bl	800f47c <unlock_fs>
 801157c:	2302      	movs	r3, #2
 801157e:	e1f1      	b.n	8011964 <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011586:	d109      	bne.n	801159c <f_lseek+0xd6>
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	2201      	movs	r2, #1
 801158c:	755a      	strb	r2, [r3, #21]
 801158e:	68bb      	ldr	r3, [r7, #8]
 8011590:	2101      	movs	r1, #1
 8011592:	4618      	mov	r0, r3
 8011594:	f7fd ff72 	bl	800f47c <unlock_fs>
 8011598:	2301      	movs	r3, #1
 801159a:	e1e3      	b.n	8011964 <f_lseek+0x49e>
					} while (cl == pcl + 1);
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	3301      	adds	r3, #1
 80115a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80115a2:	429a      	cmp	r2, r3
 80115a4:	d0d4      	beq.n	8011550 <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80115a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80115a8:	697b      	ldr	r3, [r7, #20]
 80115aa:	429a      	cmp	r2, r3
 80115ac:	d809      	bhi.n	80115c2 <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 80115ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115b0:	1d1a      	adds	r2, r3, #4
 80115b2:	627a      	str	r2, [r7, #36]	; 0x24
 80115b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80115b6:	601a      	str	r2, [r3, #0]
 80115b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115ba:	1d1a      	adds	r2, r3, #4
 80115bc:	627a      	str	r2, [r7, #36]	; 0x24
 80115be:	693a      	ldr	r2, [r7, #16]
 80115c0:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80115c2:	68bb      	ldr	r3, [r7, #8]
 80115c4:	699b      	ldr	r3, [r3, #24]
 80115c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80115c8:	429a      	cmp	r2, r3
 80115ca:	d3ba      	bcc.n	8011542 <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80115d2:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80115d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80115d6:	697b      	ldr	r3, [r7, #20]
 80115d8:	429a      	cmp	r2, r3
 80115da:	d803      	bhi.n	80115e4 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 80115dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115de:	2200      	movs	r2, #0
 80115e0:	601a      	str	r2, [r3, #0]
 80115e2:	e1b6      	b.n	8011952 <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80115e4:	2311      	movs	r3, #17
 80115e6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80115ea:	e1b2      	b.n	8011952 <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	68db      	ldr	r3, [r3, #12]
 80115f0:	683a      	ldr	r2, [r7, #0]
 80115f2:	429a      	cmp	r2, r3
 80115f4:	d902      	bls.n	80115fc <f_lseek+0x136>
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	68db      	ldr	r3, [r3, #12]
 80115fa:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	683a      	ldr	r2, [r7, #0]
 8011600:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8011602:	683b      	ldr	r3, [r7, #0]
 8011604:	2b00      	cmp	r3, #0
 8011606:	f000 81a4 	beq.w	8011952 <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 801160a:	683b      	ldr	r3, [r7, #0]
 801160c:	3b01      	subs	r3, #1
 801160e:	4619      	mov	r1, r3
 8011610:	6878      	ldr	r0, [r7, #4]
 8011612:	f7fe fc4b 	bl	800feac <clmt_clust>
 8011616:	4602      	mov	r2, r0
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 801161c:	68ba      	ldr	r2, [r7, #8]
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	69db      	ldr	r3, [r3, #28]
 8011622:	4619      	mov	r1, r3
 8011624:	4610      	mov	r0, r2
 8011626:	f7fe f991 	bl	800f94c <clust2sect>
 801162a:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 801162c:	69bb      	ldr	r3, [r7, #24]
 801162e:	2b00      	cmp	r3, #0
 8011630:	d109      	bne.n	8011646 <f_lseek+0x180>
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	2202      	movs	r2, #2
 8011636:	755a      	strb	r2, [r3, #21]
 8011638:	68bb      	ldr	r3, [r7, #8]
 801163a:	2102      	movs	r1, #2
 801163c:	4618      	mov	r0, r3
 801163e:	f7fd ff1d 	bl	800f47c <unlock_fs>
 8011642:	2302      	movs	r3, #2
 8011644:	e18e      	b.n	8011964 <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8011646:	683b      	ldr	r3, [r7, #0]
 8011648:	3b01      	subs	r3, #1
 801164a:	0a5b      	lsrs	r3, r3, #9
 801164c:	68ba      	ldr	r2, [r7, #8]
 801164e:	8952      	ldrh	r2, [r2, #10]
 8011650:	3a01      	subs	r2, #1
 8011652:	4013      	ands	r3, r2
 8011654:	69ba      	ldr	r2, [r7, #24]
 8011656:	4413      	add	r3, r2
 8011658:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	699b      	ldr	r3, [r3, #24]
 801165e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011662:	2b00      	cmp	r3, #0
 8011664:	f000 8175 	beq.w	8011952 <f_lseek+0x48c>
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	6a1b      	ldr	r3, [r3, #32]
 801166c:	69ba      	ldr	r2, [r7, #24]
 801166e:	429a      	cmp	r2, r3
 8011670:	f000 816f 	beq.w	8011952 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	7d1b      	ldrb	r3, [r3, #20]
 8011678:	b25b      	sxtb	r3, r3
 801167a:	2b00      	cmp	r3, #0
 801167c:	da1d      	bge.n	80116ba <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801167e:	68bb      	ldr	r3, [r7, #8]
 8011680:	7858      	ldrb	r0, [r3, #1]
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	6a1a      	ldr	r2, [r3, #32]
 801168c:	2301      	movs	r3, #1
 801168e:	f7fd fda1 	bl	800f1d4 <disk_write>
 8011692:	4603      	mov	r3, r0
 8011694:	2b00      	cmp	r3, #0
 8011696:	d009      	beq.n	80116ac <f_lseek+0x1e6>
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	2201      	movs	r2, #1
 801169c:	755a      	strb	r2, [r3, #21]
 801169e:	68bb      	ldr	r3, [r7, #8]
 80116a0:	2101      	movs	r1, #1
 80116a2:	4618      	mov	r0, r3
 80116a4:	f7fd feea 	bl	800f47c <unlock_fs>
 80116a8:	2301      	movs	r3, #1
 80116aa:	e15b      	b.n	8011964 <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	7d1b      	ldrb	r3, [r3, #20]
 80116b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80116b4:	b2da      	uxtb	r2, r3
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80116ba:	68bb      	ldr	r3, [r7, #8]
 80116bc:	7858      	ldrb	r0, [r3, #1]
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80116c4:	2301      	movs	r3, #1
 80116c6:	69ba      	ldr	r2, [r7, #24]
 80116c8:	f7fd fd64 	bl	800f194 <disk_read>
 80116cc:	4603      	mov	r3, r0
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d009      	beq.n	80116e6 <f_lseek+0x220>
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	2201      	movs	r2, #1
 80116d6:	755a      	strb	r2, [r3, #21]
 80116d8:	68bb      	ldr	r3, [r7, #8]
 80116da:	2101      	movs	r1, #1
 80116dc:	4618      	mov	r0, r3
 80116de:	f7fd fecd 	bl	800f47c <unlock_fs>
 80116e2:	2301      	movs	r3, #1
 80116e4:	e13e      	b.n	8011964 <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	69ba      	ldr	r2, [r7, #24]
 80116ea:	621a      	str	r2, [r3, #32]
 80116ec:	e131      	b.n	8011952 <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	68db      	ldr	r3, [r3, #12]
 80116f2:	683a      	ldr	r2, [r7, #0]
 80116f4:	429a      	cmp	r2, r3
 80116f6:	d908      	bls.n	801170a <f_lseek+0x244>
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	7d1b      	ldrb	r3, [r3, #20]
 80116fc:	f003 0302 	and.w	r3, r3, #2
 8011700:	2b00      	cmp	r3, #0
 8011702:	d102      	bne.n	801170a <f_lseek+0x244>
			ofs = fp->obj.objsize;
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	68db      	ldr	r3, [r3, #12]
 8011708:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	699b      	ldr	r3, [r3, #24]
 801170e:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8011710:	2300      	movs	r3, #0
 8011712:	637b      	str	r3, [r7, #52]	; 0x34
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011718:	619a      	str	r2, [r3, #24]
		if (ofs) {
 801171a:	683b      	ldr	r3, [r7, #0]
 801171c:	2b00      	cmp	r3, #0
 801171e:	f000 80c0 	beq.w	80118a2 <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8011722:	68bb      	ldr	r3, [r7, #8]
 8011724:	895b      	ldrh	r3, [r3, #10]
 8011726:	025b      	lsls	r3, r3, #9
 8011728:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 801172a:	6a3b      	ldr	r3, [r7, #32]
 801172c:	2b00      	cmp	r3, #0
 801172e:	d01b      	beq.n	8011768 <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8011730:	683b      	ldr	r3, [r7, #0]
 8011732:	1e5a      	subs	r2, r3, #1
 8011734:	69fb      	ldr	r3, [r7, #28]
 8011736:	fbb2 f2f3 	udiv	r2, r2, r3
 801173a:	6a3b      	ldr	r3, [r7, #32]
 801173c:	1e59      	subs	r1, r3, #1
 801173e:	69fb      	ldr	r3, [r7, #28]
 8011740:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8011744:	429a      	cmp	r2, r3
 8011746:	d30f      	bcc.n	8011768 <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8011748:	6a3b      	ldr	r3, [r7, #32]
 801174a:	1e5a      	subs	r2, r3, #1
 801174c:	69fb      	ldr	r3, [r7, #28]
 801174e:	425b      	negs	r3, r3
 8011750:	401a      	ands	r2, r3
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	699b      	ldr	r3, [r3, #24]
 801175a:	683a      	ldr	r2, [r7, #0]
 801175c:	1ad3      	subs	r3, r2, r3
 801175e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	69db      	ldr	r3, [r3, #28]
 8011764:	63bb      	str	r3, [r7, #56]	; 0x38
 8011766:	e02c      	b.n	80117c2 <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	689b      	ldr	r3, [r3, #8]
 801176c:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 801176e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011770:	2b00      	cmp	r3, #0
 8011772:	d123      	bne.n	80117bc <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	2100      	movs	r1, #0
 8011778:	4618      	mov	r0, r3
 801177a:	f7fe faff 	bl	800fd7c <create_chain>
 801177e:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011782:	2b01      	cmp	r3, #1
 8011784:	d109      	bne.n	801179a <f_lseek+0x2d4>
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	2202      	movs	r2, #2
 801178a:	755a      	strb	r2, [r3, #21]
 801178c:	68bb      	ldr	r3, [r7, #8]
 801178e:	2102      	movs	r1, #2
 8011790:	4618      	mov	r0, r3
 8011792:	f7fd fe73 	bl	800f47c <unlock_fs>
 8011796:	2302      	movs	r3, #2
 8011798:	e0e4      	b.n	8011964 <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801179a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801179c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117a0:	d109      	bne.n	80117b6 <f_lseek+0x2f0>
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	2201      	movs	r2, #1
 80117a6:	755a      	strb	r2, [r3, #21]
 80117a8:	68bb      	ldr	r3, [r7, #8]
 80117aa:	2101      	movs	r1, #1
 80117ac:	4618      	mov	r0, r3
 80117ae:	f7fd fe65 	bl	800f47c <unlock_fs>
 80117b2:	2301      	movs	r3, #1
 80117b4:	e0d6      	b.n	8011964 <f_lseek+0x49e>
					fp->obj.sclust = clst;
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80117ba:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80117c0:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80117c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d06c      	beq.n	80118a2 <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 80117c8:	e044      	b.n	8011854 <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 80117ca:	683a      	ldr	r2, [r7, #0]
 80117cc:	69fb      	ldr	r3, [r7, #28]
 80117ce:	1ad3      	subs	r3, r2, r3
 80117d0:	603b      	str	r3, [r7, #0]
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	699a      	ldr	r2, [r3, #24]
 80117d6:	69fb      	ldr	r3, [r7, #28]
 80117d8:	441a      	add	r2, r3
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	7d1b      	ldrb	r3, [r3, #20]
 80117e2:	f003 0302 	and.w	r3, r3, #2
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d00b      	beq.n	8011802 <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80117ee:	4618      	mov	r0, r3
 80117f0:	f7fe fac4 	bl	800fd7c <create_chain>
 80117f4:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80117f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d108      	bne.n	801180e <f_lseek+0x348>
							ofs = 0; break;
 80117fc:	2300      	movs	r3, #0
 80117fe:	603b      	str	r3, [r7, #0]
 8011800:	e02c      	b.n	801185c <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011806:	4618      	mov	r0, r3
 8011808:	f7fe f8bf 	bl	800f98a <get_fat>
 801180c:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801180e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011814:	d109      	bne.n	801182a <f_lseek+0x364>
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	2201      	movs	r2, #1
 801181a:	755a      	strb	r2, [r3, #21]
 801181c:	68bb      	ldr	r3, [r7, #8]
 801181e:	2101      	movs	r1, #1
 8011820:	4618      	mov	r0, r3
 8011822:	f7fd fe2b 	bl	800f47c <unlock_fs>
 8011826:	2301      	movs	r3, #1
 8011828:	e09c      	b.n	8011964 <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 801182a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801182c:	2b01      	cmp	r3, #1
 801182e:	d904      	bls.n	801183a <f_lseek+0x374>
 8011830:	68bb      	ldr	r3, [r7, #8]
 8011832:	699b      	ldr	r3, [r3, #24]
 8011834:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011836:	429a      	cmp	r2, r3
 8011838:	d309      	bcc.n	801184e <f_lseek+0x388>
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	2202      	movs	r2, #2
 801183e:	755a      	strb	r2, [r3, #21]
 8011840:	68bb      	ldr	r3, [r7, #8]
 8011842:	2102      	movs	r1, #2
 8011844:	4618      	mov	r0, r3
 8011846:	f7fd fe19 	bl	800f47c <unlock_fs>
 801184a:	2302      	movs	r3, #2
 801184c:	e08a      	b.n	8011964 <f_lseek+0x49e>
					fp->clust = clst;
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011852:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8011854:	683a      	ldr	r2, [r7, #0]
 8011856:	69fb      	ldr	r3, [r7, #28]
 8011858:	429a      	cmp	r2, r3
 801185a:	d8b6      	bhi.n	80117ca <f_lseek+0x304>
				}
				fp->fptr += ofs;
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	699a      	ldr	r2, [r3, #24]
 8011860:	683b      	ldr	r3, [r7, #0]
 8011862:	441a      	add	r2, r3
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8011868:	683b      	ldr	r3, [r7, #0]
 801186a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801186e:	2b00      	cmp	r3, #0
 8011870:	d017      	beq.n	80118a2 <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8011872:	68bb      	ldr	r3, [r7, #8]
 8011874:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011876:	4618      	mov	r0, r3
 8011878:	f7fe f868 	bl	800f94c <clust2sect>
 801187c:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 801187e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011880:	2b00      	cmp	r3, #0
 8011882:	d109      	bne.n	8011898 <f_lseek+0x3d2>
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	2202      	movs	r2, #2
 8011888:	755a      	strb	r2, [r3, #21]
 801188a:	68bb      	ldr	r3, [r7, #8]
 801188c:	2102      	movs	r1, #2
 801188e:	4618      	mov	r0, r3
 8011890:	f7fd fdf4 	bl	800f47c <unlock_fs>
 8011894:	2302      	movs	r3, #2
 8011896:	e065      	b.n	8011964 <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 8011898:	683b      	ldr	r3, [r7, #0]
 801189a:	0a5b      	lsrs	r3, r3, #9
 801189c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801189e:	4413      	add	r3, r2
 80118a0:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	699a      	ldr	r2, [r3, #24]
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	68db      	ldr	r3, [r3, #12]
 80118aa:	429a      	cmp	r2, r3
 80118ac:	d90a      	bls.n	80118c4 <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	699a      	ldr	r2, [r3, #24]
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	7d1b      	ldrb	r3, [r3, #20]
 80118ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80118be:	b2da      	uxtb	r2, r3
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	699b      	ldr	r3, [r3, #24]
 80118c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d040      	beq.n	8011952 <f_lseek+0x48c>
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	6a1b      	ldr	r3, [r3, #32]
 80118d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80118d6:	429a      	cmp	r2, r3
 80118d8:	d03b      	beq.n	8011952 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	7d1b      	ldrb	r3, [r3, #20]
 80118de:	b25b      	sxtb	r3, r3
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	da1d      	bge.n	8011920 <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80118e4:	68bb      	ldr	r3, [r7, #8]
 80118e6:	7858      	ldrb	r0, [r3, #1]
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	6a1a      	ldr	r2, [r3, #32]
 80118f2:	2301      	movs	r3, #1
 80118f4:	f7fd fc6e 	bl	800f1d4 <disk_write>
 80118f8:	4603      	mov	r3, r0
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d009      	beq.n	8011912 <f_lseek+0x44c>
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	2201      	movs	r2, #1
 8011902:	755a      	strb	r2, [r3, #21]
 8011904:	68bb      	ldr	r3, [r7, #8]
 8011906:	2101      	movs	r1, #1
 8011908:	4618      	mov	r0, r3
 801190a:	f7fd fdb7 	bl	800f47c <unlock_fs>
 801190e:	2301      	movs	r3, #1
 8011910:	e028      	b.n	8011964 <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	7d1b      	ldrb	r3, [r3, #20]
 8011916:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801191a:	b2da      	uxtb	r2, r3
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8011920:	68bb      	ldr	r3, [r7, #8]
 8011922:	7858      	ldrb	r0, [r3, #1]
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801192a:	2301      	movs	r3, #1
 801192c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801192e:	f7fd fc31 	bl	800f194 <disk_read>
 8011932:	4603      	mov	r3, r0
 8011934:	2b00      	cmp	r3, #0
 8011936:	d009      	beq.n	801194c <f_lseek+0x486>
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	2201      	movs	r2, #1
 801193c:	755a      	strb	r2, [r3, #21]
 801193e:	68bb      	ldr	r3, [r7, #8]
 8011940:	2101      	movs	r1, #1
 8011942:	4618      	mov	r0, r3
 8011944:	f7fd fd9a 	bl	800f47c <unlock_fs>
 8011948:	2301      	movs	r3, #1
 801194a:	e00b      	b.n	8011964 <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011950:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8011952:	68bb      	ldr	r3, [r7, #8]
 8011954:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8011958:	4611      	mov	r1, r2
 801195a:	4618      	mov	r0, r3
 801195c:	f7fd fd8e 	bl	800f47c <unlock_fs>
 8011960:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8011964:	4618      	mov	r0, r3
 8011966:	3740      	adds	r7, #64	; 0x40
 8011968:	46bd      	mov	sp, r7
 801196a:	bd80      	pop	{r7, pc}

0801196c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801196c:	b480      	push	{r7}
 801196e:	b087      	sub	sp, #28
 8011970:	af00      	add	r7, sp, #0
 8011972:	60f8      	str	r0, [r7, #12]
 8011974:	60b9      	str	r1, [r7, #8]
 8011976:	4613      	mov	r3, r2
 8011978:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801197a:	2301      	movs	r3, #1
 801197c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801197e:	2300      	movs	r3, #0
 8011980:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011982:	4b1f      	ldr	r3, [pc, #124]	; (8011a00 <FATFS_LinkDriverEx+0x94>)
 8011984:	7a5b      	ldrb	r3, [r3, #9]
 8011986:	b2db      	uxtb	r3, r3
 8011988:	2b00      	cmp	r3, #0
 801198a:	d131      	bne.n	80119f0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801198c:	4b1c      	ldr	r3, [pc, #112]	; (8011a00 <FATFS_LinkDriverEx+0x94>)
 801198e:	7a5b      	ldrb	r3, [r3, #9]
 8011990:	b2db      	uxtb	r3, r3
 8011992:	461a      	mov	r2, r3
 8011994:	4b1a      	ldr	r3, [pc, #104]	; (8011a00 <FATFS_LinkDriverEx+0x94>)
 8011996:	2100      	movs	r1, #0
 8011998:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801199a:	4b19      	ldr	r3, [pc, #100]	; (8011a00 <FATFS_LinkDriverEx+0x94>)
 801199c:	7a5b      	ldrb	r3, [r3, #9]
 801199e:	b2db      	uxtb	r3, r3
 80119a0:	4a17      	ldr	r2, [pc, #92]	; (8011a00 <FATFS_LinkDriverEx+0x94>)
 80119a2:	009b      	lsls	r3, r3, #2
 80119a4:	4413      	add	r3, r2
 80119a6:	68fa      	ldr	r2, [r7, #12]
 80119a8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80119aa:	4b15      	ldr	r3, [pc, #84]	; (8011a00 <FATFS_LinkDriverEx+0x94>)
 80119ac:	7a5b      	ldrb	r3, [r3, #9]
 80119ae:	b2db      	uxtb	r3, r3
 80119b0:	461a      	mov	r2, r3
 80119b2:	4b13      	ldr	r3, [pc, #76]	; (8011a00 <FATFS_LinkDriverEx+0x94>)
 80119b4:	4413      	add	r3, r2
 80119b6:	79fa      	ldrb	r2, [r7, #7]
 80119b8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80119ba:	4b11      	ldr	r3, [pc, #68]	; (8011a00 <FATFS_LinkDriverEx+0x94>)
 80119bc:	7a5b      	ldrb	r3, [r3, #9]
 80119be:	b2db      	uxtb	r3, r3
 80119c0:	1c5a      	adds	r2, r3, #1
 80119c2:	b2d1      	uxtb	r1, r2
 80119c4:	4a0e      	ldr	r2, [pc, #56]	; (8011a00 <FATFS_LinkDriverEx+0x94>)
 80119c6:	7251      	strb	r1, [r2, #9]
 80119c8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80119ca:	7dbb      	ldrb	r3, [r7, #22]
 80119cc:	3330      	adds	r3, #48	; 0x30
 80119ce:	b2da      	uxtb	r2, r3
 80119d0:	68bb      	ldr	r3, [r7, #8]
 80119d2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80119d4:	68bb      	ldr	r3, [r7, #8]
 80119d6:	3301      	adds	r3, #1
 80119d8:	223a      	movs	r2, #58	; 0x3a
 80119da:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80119dc:	68bb      	ldr	r3, [r7, #8]
 80119de:	3302      	adds	r3, #2
 80119e0:	222f      	movs	r2, #47	; 0x2f
 80119e2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80119e4:	68bb      	ldr	r3, [r7, #8]
 80119e6:	3303      	adds	r3, #3
 80119e8:	2200      	movs	r2, #0
 80119ea:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80119ec:	2300      	movs	r3, #0
 80119ee:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80119f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80119f2:	4618      	mov	r0, r3
 80119f4:	371c      	adds	r7, #28
 80119f6:	46bd      	mov	sp, r7
 80119f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119fc:	4770      	bx	lr
 80119fe:	bf00      	nop
 8011a00:	2000135c 	.word	0x2000135c

08011a04 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011a04:	b580      	push	{r7, lr}
 8011a06:	b082      	sub	sp, #8
 8011a08:	af00      	add	r7, sp, #0
 8011a0a:	6078      	str	r0, [r7, #4]
 8011a0c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8011a0e:	2200      	movs	r2, #0
 8011a10:	6839      	ldr	r1, [r7, #0]
 8011a12:	6878      	ldr	r0, [r7, #4]
 8011a14:	f7ff ffaa 	bl	801196c <FATFS_LinkDriverEx>
 8011a18:	4603      	mov	r3, r0
}
 8011a1a:	4618      	mov	r0, r3
 8011a1c:	3708      	adds	r7, #8
 8011a1e:	46bd      	mov	sp, r7
 8011a20:	bd80      	pop	{r7, pc}

08011a22 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8011a22:	b580      	push	{r7, lr}
 8011a24:	b086      	sub	sp, #24
 8011a26:	af00      	add	r7, sp, #0
 8011a28:	4603      	mov	r3, r0
 8011a2a:	6039      	str	r1, [r7, #0]
 8011a2c:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 8011a2e:	2300      	movs	r3, #0
 8011a30:	60fb      	str	r3, [r7, #12]
 8011a32:	2300      	movs	r3, #0
 8011a34:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 8011a36:	f107 030c 	add.w	r3, r7, #12
 8011a3a:	2101      	movs	r1, #1
 8011a3c:	4618      	mov	r0, r3
 8011a3e:	f000 f8e9 	bl	8011c14 <osSemaphoreCreate>
 8011a42:	4602      	mov	r2, r0
 8011a44:	683b      	ldr	r3, [r7, #0]
 8011a46:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 8011a48:	683b      	ldr	r3, [r7, #0]
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	bf14      	ite	ne
 8011a50:	2301      	movne	r3, #1
 8011a52:	2300      	moveq	r3, #0
 8011a54:	b2db      	uxtb	r3, r3
 8011a56:	617b      	str	r3, [r7, #20]

    return ret;
 8011a58:	697b      	ldr	r3, [r7, #20]
}
 8011a5a:	4618      	mov	r0, r3
 8011a5c:	3718      	adds	r7, #24
 8011a5e:	46bd      	mov	sp, r7
 8011a60:	bd80      	pop	{r7, pc}

08011a62 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8011a62:	b580      	push	{r7, lr}
 8011a64:	b082      	sub	sp, #8
 8011a66:	af00      	add	r7, sp, #0
 8011a68:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8011a6a:	6878      	ldr	r0, [r7, #4]
 8011a6c:	f000 f988 	bl	8011d80 <osSemaphoreDelete>
#endif
    return 1;
 8011a70:	2301      	movs	r3, #1
}
 8011a72:	4618      	mov	r0, r3
 8011a74:	3708      	adds	r7, #8
 8011a76:	46bd      	mov	sp, r7
 8011a78:	bd80      	pop	{r7, pc}

08011a7a <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8011a7a:	b580      	push	{r7, lr}
 8011a7c:	b084      	sub	sp, #16
 8011a7e:	af00      	add	r7, sp, #0
 8011a80:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8011a82:	2300      	movs	r3, #0
 8011a84:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8011a86:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8011a8a:	6878      	ldr	r0, [r7, #4]
 8011a8c:	f000 f8f4 	bl	8011c78 <osSemaphoreWait>
 8011a90:	4603      	mov	r3, r0
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d101      	bne.n	8011a9a <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 8011a96:	2301      	movs	r3, #1
 8011a98:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011a9a:	68fb      	ldr	r3, [r7, #12]
}
 8011a9c:	4618      	mov	r0, r3
 8011a9e:	3710      	adds	r7, #16
 8011aa0:	46bd      	mov	sp, r7
 8011aa2:	bd80      	pop	{r7, pc}

08011aa4 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8011aa4:	b580      	push	{r7, lr}
 8011aa6:	b082      	sub	sp, #8
 8011aa8:	af00      	add	r7, sp, #0
 8011aaa:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8011aac:	6878      	ldr	r0, [r7, #4]
 8011aae:	f000 f931 	bl	8011d14 <osSemaphoreRelease>
#endif
}
 8011ab2:	bf00      	nop
 8011ab4:	3708      	adds	r7, #8
 8011ab6:	46bd      	mov	sp, r7
 8011ab8:	bd80      	pop	{r7, pc}

08011aba <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8011aba:	b480      	push	{r7}
 8011abc:	b085      	sub	sp, #20
 8011abe:	af00      	add	r7, sp, #0
 8011ac0:	4603      	mov	r3, r0
 8011ac2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8011ac4:	2300      	movs	r3, #0
 8011ac6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8011ac8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011acc:	2b84      	cmp	r3, #132	; 0x84
 8011ace:	d005      	beq.n	8011adc <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8011ad0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011ad4:	68fb      	ldr	r3, [r7, #12]
 8011ad6:	4413      	add	r3, r2
 8011ad8:	3303      	adds	r3, #3
 8011ada:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8011adc:	68fb      	ldr	r3, [r7, #12]
}
 8011ade:	4618      	mov	r0, r3
 8011ae0:	3714      	adds	r7, #20
 8011ae2:	46bd      	mov	sp, r7
 8011ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ae8:	4770      	bx	lr

08011aea <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8011aea:	b480      	push	{r7}
 8011aec:	b083      	sub	sp, #12
 8011aee:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011af0:	f3ef 8305 	mrs	r3, IPSR
 8011af4:	607b      	str	r3, [r7, #4]
  return(result);
 8011af6:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	bf14      	ite	ne
 8011afc:	2301      	movne	r3, #1
 8011afe:	2300      	moveq	r3, #0
 8011b00:	b2db      	uxtb	r3, r3
}
 8011b02:	4618      	mov	r0, r3
 8011b04:	370c      	adds	r7, #12
 8011b06:	46bd      	mov	sp, r7
 8011b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b0c:	4770      	bx	lr

08011b0e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8011b0e:	b580      	push	{r7, lr}
 8011b10:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8011b12:	f001 fcc7 	bl	80134a4 <vTaskStartScheduler>
  
  return osOK;
 8011b16:	2300      	movs	r3, #0
}
 8011b18:	4618      	mov	r0, r3
 8011b1a:	bd80      	pop	{r7, pc}

08011b1c <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8011b1c:	b580      	push	{r7, lr}
 8011b1e:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8011b20:	f002 f91a 	bl	8013d58 <xTaskGetSchedulerState>
 8011b24:	4603      	mov	r3, r0
 8011b26:	2b01      	cmp	r3, #1
 8011b28:	d101      	bne.n	8011b2e <osKernelRunning+0x12>
    return 0;
 8011b2a:	2300      	movs	r3, #0
 8011b2c:	e000      	b.n	8011b30 <osKernelRunning+0x14>
  else
    return 1;
 8011b2e:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8011b30:	4618      	mov	r0, r3
 8011b32:	bd80      	pop	{r7, pc}

08011b34 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8011b34:	b580      	push	{r7, lr}
 8011b36:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8011b38:	f7ff ffd7 	bl	8011aea <inHandlerMode>
 8011b3c:	4603      	mov	r3, r0
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d003      	beq.n	8011b4a <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8011b42:	f001 fdcf 	bl	80136e4 <xTaskGetTickCountFromISR>
 8011b46:	4603      	mov	r3, r0
 8011b48:	e002      	b.n	8011b50 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8011b4a:	f001 fdbb 	bl	80136c4 <xTaskGetTickCount>
 8011b4e:	4603      	mov	r3, r0
  }
}
 8011b50:	4618      	mov	r0, r3
 8011b52:	bd80      	pop	{r7, pc}

08011b54 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8011b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b56:	b089      	sub	sp, #36	; 0x24
 8011b58:	af04      	add	r7, sp, #16
 8011b5a:	6078      	str	r0, [r7, #4]
 8011b5c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	695b      	ldr	r3, [r3, #20]
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d020      	beq.n	8011ba8 <osThreadCreate+0x54>
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	699b      	ldr	r3, [r3, #24]
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d01c      	beq.n	8011ba8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	685c      	ldr	r4, [r3, #4]
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	681d      	ldr	r5, [r3, #0]
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	691e      	ldr	r6, [r3, #16]
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8011b80:	4618      	mov	r0, r3
 8011b82:	f7ff ff9a 	bl	8011aba <makeFreeRtosPriority>
 8011b86:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	695b      	ldr	r3, [r3, #20]
 8011b8c:	687a      	ldr	r2, [r7, #4]
 8011b8e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011b90:	9202      	str	r2, [sp, #8]
 8011b92:	9301      	str	r3, [sp, #4]
 8011b94:	9100      	str	r1, [sp, #0]
 8011b96:	683b      	ldr	r3, [r7, #0]
 8011b98:	4632      	mov	r2, r6
 8011b9a:	4629      	mov	r1, r5
 8011b9c:	4620      	mov	r0, r4
 8011b9e:	f001 fa15 	bl	8012fcc <xTaskCreateStatic>
 8011ba2:	4603      	mov	r3, r0
 8011ba4:	60fb      	str	r3, [r7, #12]
 8011ba6:	e01c      	b.n	8011be2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	685c      	ldr	r4, [r3, #4]
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011bb4:	b29e      	uxth	r6, r3
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8011bbc:	4618      	mov	r0, r3
 8011bbe:	f7ff ff7c 	bl	8011aba <makeFreeRtosPriority>
 8011bc2:	4602      	mov	r2, r0
 8011bc4:	f107 030c 	add.w	r3, r7, #12
 8011bc8:	9301      	str	r3, [sp, #4]
 8011bca:	9200      	str	r2, [sp, #0]
 8011bcc:	683b      	ldr	r3, [r7, #0]
 8011bce:	4632      	mov	r2, r6
 8011bd0:	4629      	mov	r1, r5
 8011bd2:	4620      	mov	r0, r4
 8011bd4:	f001 fa5d 	bl	8013092 <xTaskCreate>
 8011bd8:	4603      	mov	r3, r0
 8011bda:	2b01      	cmp	r3, #1
 8011bdc:	d001      	beq.n	8011be2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8011bde:	2300      	movs	r3, #0
 8011be0:	e000      	b.n	8011be4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8011be2:	68fb      	ldr	r3, [r7, #12]
}
 8011be4:	4618      	mov	r0, r3
 8011be6:	3714      	adds	r7, #20
 8011be8:	46bd      	mov	sp, r7
 8011bea:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011bec <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8011bec:	b580      	push	{r7, lr}
 8011bee:	b084      	sub	sp, #16
 8011bf0:	af00      	add	r7, sp, #0
 8011bf2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8011bf8:	68fb      	ldr	r3, [r7, #12]
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d001      	beq.n	8011c02 <osDelay+0x16>
 8011bfe:	68fb      	ldr	r3, [r7, #12]
 8011c00:	e000      	b.n	8011c04 <osDelay+0x18>
 8011c02:	2301      	movs	r3, #1
 8011c04:	4618      	mov	r0, r3
 8011c06:	f001 fc17 	bl	8013438 <vTaskDelay>
  
  return osOK;
 8011c0a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8011c0c:	4618      	mov	r0, r3
 8011c0e:	3710      	adds	r7, #16
 8011c10:	46bd      	mov	sp, r7
 8011c12:	bd80      	pop	{r7, pc}

08011c14 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8011c14:	b580      	push	{r7, lr}
 8011c16:	b086      	sub	sp, #24
 8011c18:	af02      	add	r7, sp, #8
 8011c1a:	6078      	str	r0, [r7, #4]
 8011c1c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	685b      	ldr	r3, [r3, #4]
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d00f      	beq.n	8011c46 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8011c26:	683b      	ldr	r3, [r7, #0]
 8011c28:	2b01      	cmp	r3, #1
 8011c2a:	d10a      	bne.n	8011c42 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	685b      	ldr	r3, [r3, #4]
 8011c30:	2203      	movs	r2, #3
 8011c32:	9200      	str	r2, [sp, #0]
 8011c34:	2200      	movs	r2, #0
 8011c36:	2100      	movs	r1, #0
 8011c38:	2001      	movs	r0, #1
 8011c3a:	f000 faaf 	bl	801219c <xQueueGenericCreateStatic>
 8011c3e:	4603      	mov	r3, r0
 8011c40:	e016      	b.n	8011c70 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8011c42:	2300      	movs	r3, #0
 8011c44:	e014      	b.n	8011c70 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8011c46:	683b      	ldr	r3, [r7, #0]
 8011c48:	2b01      	cmp	r3, #1
 8011c4a:	d110      	bne.n	8011c6e <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8011c4c:	2203      	movs	r2, #3
 8011c4e:	2100      	movs	r1, #0
 8011c50:	2001      	movs	r0, #1
 8011c52:	f000 fb25 	bl	80122a0 <xQueueGenericCreate>
 8011c56:	60f8      	str	r0, [r7, #12]
 8011c58:	68fb      	ldr	r3, [r7, #12]
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d005      	beq.n	8011c6a <osSemaphoreCreate+0x56>
 8011c5e:	2300      	movs	r3, #0
 8011c60:	2200      	movs	r2, #0
 8011c62:	2100      	movs	r1, #0
 8011c64:	68f8      	ldr	r0, [r7, #12]
 8011c66:	f000 fb7d 	bl	8012364 <xQueueGenericSend>
      return sema;
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	e000      	b.n	8011c70 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8011c6e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8011c70:	4618      	mov	r0, r3
 8011c72:	3710      	adds	r7, #16
 8011c74:	46bd      	mov	sp, r7
 8011c76:	bd80      	pop	{r7, pc}

08011c78 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8011c78:	b580      	push	{r7, lr}
 8011c7a:	b084      	sub	sp, #16
 8011c7c:	af00      	add	r7, sp, #0
 8011c7e:	6078      	str	r0, [r7, #4]
 8011c80:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8011c82:	2300      	movs	r3, #0
 8011c84:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d101      	bne.n	8011c90 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8011c8c:	2380      	movs	r3, #128	; 0x80
 8011c8e:	e03a      	b.n	8011d06 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8011c90:	2300      	movs	r3, #0
 8011c92:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8011c94:	683b      	ldr	r3, [r7, #0]
 8011c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c9a:	d103      	bne.n	8011ca4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8011c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8011ca0:	60fb      	str	r3, [r7, #12]
 8011ca2:	e009      	b.n	8011cb8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8011ca4:	683b      	ldr	r3, [r7, #0]
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d006      	beq.n	8011cb8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8011caa:	683b      	ldr	r3, [r7, #0]
 8011cac:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d101      	bne.n	8011cb8 <osSemaphoreWait+0x40>
      ticks = 1;
 8011cb4:	2301      	movs	r3, #1
 8011cb6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8011cb8:	f7ff ff17 	bl	8011aea <inHandlerMode>
 8011cbc:	4603      	mov	r3, r0
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d017      	beq.n	8011cf2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8011cc2:	f107 0308 	add.w	r3, r7, #8
 8011cc6:	461a      	mov	r2, r3
 8011cc8:	2100      	movs	r1, #0
 8011cca:	6878      	ldr	r0, [r7, #4]
 8011ccc:	f000 ff80 	bl	8012bd0 <xQueueReceiveFromISR>
 8011cd0:	4603      	mov	r3, r0
 8011cd2:	2b01      	cmp	r3, #1
 8011cd4:	d001      	beq.n	8011cda <osSemaphoreWait+0x62>
      return osErrorOS;
 8011cd6:	23ff      	movs	r3, #255	; 0xff
 8011cd8:	e015      	b.n	8011d06 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8011cda:	68bb      	ldr	r3, [r7, #8]
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d011      	beq.n	8011d04 <osSemaphoreWait+0x8c>
 8011ce0:	4b0b      	ldr	r3, [pc, #44]	; (8011d10 <osSemaphoreWait+0x98>)
 8011ce2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011ce6:	601a      	str	r2, [r3, #0]
 8011ce8:	f3bf 8f4f 	dsb	sy
 8011cec:	f3bf 8f6f 	isb	sy
 8011cf0:	e008      	b.n	8011d04 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8011cf2:	68f9      	ldr	r1, [r7, #12]
 8011cf4:	6878      	ldr	r0, [r7, #4]
 8011cf6:	f000 fe57 	bl	80129a8 <xQueueSemaphoreTake>
 8011cfa:	4603      	mov	r3, r0
 8011cfc:	2b01      	cmp	r3, #1
 8011cfe:	d001      	beq.n	8011d04 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8011d00:	23ff      	movs	r3, #255	; 0xff
 8011d02:	e000      	b.n	8011d06 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8011d04:	2300      	movs	r3, #0
}
 8011d06:	4618      	mov	r0, r3
 8011d08:	3710      	adds	r7, #16
 8011d0a:	46bd      	mov	sp, r7
 8011d0c:	bd80      	pop	{r7, pc}
 8011d0e:	bf00      	nop
 8011d10:	e000ed04 	.word	0xe000ed04

08011d14 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8011d14:	b580      	push	{r7, lr}
 8011d16:	b084      	sub	sp, #16
 8011d18:	af00      	add	r7, sp, #0
 8011d1a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8011d1c:	2300      	movs	r3, #0
 8011d1e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8011d20:	2300      	movs	r3, #0
 8011d22:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8011d24:	f7ff fee1 	bl	8011aea <inHandlerMode>
 8011d28:	4603      	mov	r3, r0
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d016      	beq.n	8011d5c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8011d2e:	f107 0308 	add.w	r3, r7, #8
 8011d32:	4619      	mov	r1, r3
 8011d34:	6878      	ldr	r0, [r7, #4]
 8011d36:	f000 fcbb 	bl	80126b0 <xQueueGiveFromISR>
 8011d3a:	4603      	mov	r3, r0
 8011d3c:	2b01      	cmp	r3, #1
 8011d3e:	d001      	beq.n	8011d44 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8011d40:	23ff      	movs	r3, #255	; 0xff
 8011d42:	e017      	b.n	8011d74 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011d44:	68bb      	ldr	r3, [r7, #8]
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d013      	beq.n	8011d72 <osSemaphoreRelease+0x5e>
 8011d4a:	4b0c      	ldr	r3, [pc, #48]	; (8011d7c <osSemaphoreRelease+0x68>)
 8011d4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011d50:	601a      	str	r2, [r3, #0]
 8011d52:	f3bf 8f4f 	dsb	sy
 8011d56:	f3bf 8f6f 	isb	sy
 8011d5a:	e00a      	b.n	8011d72 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8011d5c:	2300      	movs	r3, #0
 8011d5e:	2200      	movs	r2, #0
 8011d60:	2100      	movs	r1, #0
 8011d62:	6878      	ldr	r0, [r7, #4]
 8011d64:	f000 fafe 	bl	8012364 <xQueueGenericSend>
 8011d68:	4603      	mov	r3, r0
 8011d6a:	2b01      	cmp	r3, #1
 8011d6c:	d001      	beq.n	8011d72 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8011d6e:	23ff      	movs	r3, #255	; 0xff
 8011d70:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8011d72:	68fb      	ldr	r3, [r7, #12]
}
 8011d74:	4618      	mov	r0, r3
 8011d76:	3710      	adds	r7, #16
 8011d78:	46bd      	mov	sp, r7
 8011d7a:	bd80      	pop	{r7, pc}
 8011d7c:	e000ed04 	.word	0xe000ed04

08011d80 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8011d80:	b580      	push	{r7, lr}
 8011d82:	b082      	sub	sp, #8
 8011d84:	af00      	add	r7, sp, #0
 8011d86:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8011d88:	f7ff feaf 	bl	8011aea <inHandlerMode>
 8011d8c:	4603      	mov	r3, r0
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d001      	beq.n	8011d96 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8011d92:	2382      	movs	r3, #130	; 0x82
 8011d94:	e003      	b.n	8011d9e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8011d96:	6878      	ldr	r0, [r7, #4]
 8011d98:	f000 ffa0 	bl	8012cdc <vQueueDelete>

  return osOK; 
 8011d9c:	2300      	movs	r3, #0
}
 8011d9e:	4618      	mov	r0, r3
 8011da0:	3708      	adds	r7, #8
 8011da2:	46bd      	mov	sp, r7
 8011da4:	bd80      	pop	{r7, pc}

08011da6 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8011da6:	b590      	push	{r4, r7, lr}
 8011da8:	b085      	sub	sp, #20
 8011daa:	af02      	add	r7, sp, #8
 8011dac:	6078      	str	r0, [r7, #4]
 8011dae:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	689b      	ldr	r3, [r3, #8]
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d011      	beq.n	8011ddc <osMessageCreate+0x36>
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	68db      	ldr	r3, [r3, #12]
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d00d      	beq.n	8011ddc <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	6818      	ldr	r0, [r3, #0]
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	6859      	ldr	r1, [r3, #4]
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	689a      	ldr	r2, [r3, #8]
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	68db      	ldr	r3, [r3, #12]
 8011dd0:	2400      	movs	r4, #0
 8011dd2:	9400      	str	r4, [sp, #0]
 8011dd4:	f000 f9e2 	bl	801219c <xQueueGenericCreateStatic>
 8011dd8:	4603      	mov	r3, r0
 8011dda:	e008      	b.n	8011dee <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	6818      	ldr	r0, [r3, #0]
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	685b      	ldr	r3, [r3, #4]
 8011de4:	2200      	movs	r2, #0
 8011de6:	4619      	mov	r1, r3
 8011de8:	f000 fa5a 	bl	80122a0 <xQueueGenericCreate>
 8011dec:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8011dee:	4618      	mov	r0, r3
 8011df0:	370c      	adds	r7, #12
 8011df2:	46bd      	mov	sp, r7
 8011df4:	bd90      	pop	{r4, r7, pc}
	...

08011df8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8011df8:	b580      	push	{r7, lr}
 8011dfa:	b086      	sub	sp, #24
 8011dfc:	af00      	add	r7, sp, #0
 8011dfe:	60f8      	str	r0, [r7, #12]
 8011e00:	60b9      	str	r1, [r7, #8]
 8011e02:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8011e04:	2300      	movs	r3, #0
 8011e06:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8011e0c:	697b      	ldr	r3, [r7, #20]
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d101      	bne.n	8011e16 <osMessagePut+0x1e>
    ticks = 1;
 8011e12:	2301      	movs	r3, #1
 8011e14:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8011e16:	f7ff fe68 	bl	8011aea <inHandlerMode>
 8011e1a:	4603      	mov	r3, r0
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d018      	beq.n	8011e52 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8011e20:	f107 0210 	add.w	r2, r7, #16
 8011e24:	f107 0108 	add.w	r1, r7, #8
 8011e28:	2300      	movs	r3, #0
 8011e2a:	68f8      	ldr	r0, [r7, #12]
 8011e2c:	f000 fba0 	bl	8012570 <xQueueGenericSendFromISR>
 8011e30:	4603      	mov	r3, r0
 8011e32:	2b01      	cmp	r3, #1
 8011e34:	d001      	beq.n	8011e3a <osMessagePut+0x42>
      return osErrorOS;
 8011e36:	23ff      	movs	r3, #255	; 0xff
 8011e38:	e018      	b.n	8011e6c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011e3a:	693b      	ldr	r3, [r7, #16]
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d014      	beq.n	8011e6a <osMessagePut+0x72>
 8011e40:	4b0c      	ldr	r3, [pc, #48]	; (8011e74 <osMessagePut+0x7c>)
 8011e42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011e46:	601a      	str	r2, [r3, #0]
 8011e48:	f3bf 8f4f 	dsb	sy
 8011e4c:	f3bf 8f6f 	isb	sy
 8011e50:	e00b      	b.n	8011e6a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8011e52:	f107 0108 	add.w	r1, r7, #8
 8011e56:	2300      	movs	r3, #0
 8011e58:	697a      	ldr	r2, [r7, #20]
 8011e5a:	68f8      	ldr	r0, [r7, #12]
 8011e5c:	f000 fa82 	bl	8012364 <xQueueGenericSend>
 8011e60:	4603      	mov	r3, r0
 8011e62:	2b01      	cmp	r3, #1
 8011e64:	d001      	beq.n	8011e6a <osMessagePut+0x72>
      return osErrorOS;
 8011e66:	23ff      	movs	r3, #255	; 0xff
 8011e68:	e000      	b.n	8011e6c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8011e6a:	2300      	movs	r3, #0
}
 8011e6c:	4618      	mov	r0, r3
 8011e6e:	3718      	adds	r7, #24
 8011e70:	46bd      	mov	sp, r7
 8011e72:	bd80      	pop	{r7, pc}
 8011e74:	e000ed04 	.word	0xe000ed04

08011e78 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8011e78:	b590      	push	{r4, r7, lr}
 8011e7a:	b08b      	sub	sp, #44	; 0x2c
 8011e7c:	af00      	add	r7, sp, #0
 8011e7e:	60f8      	str	r0, [r7, #12]
 8011e80:	60b9      	str	r1, [r7, #8]
 8011e82:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8011e84:	68bb      	ldr	r3, [r7, #8]
 8011e86:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8011e88:	2300      	movs	r3, #0
 8011e8a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8011e8c:	68bb      	ldr	r3, [r7, #8]
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d10a      	bne.n	8011ea8 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8011e92:	2380      	movs	r3, #128	; 0x80
 8011e94:	617b      	str	r3, [r7, #20]
    return event;
 8011e96:	68fb      	ldr	r3, [r7, #12]
 8011e98:	461c      	mov	r4, r3
 8011e9a:	f107 0314 	add.w	r3, r7, #20
 8011e9e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011ea2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011ea6:	e054      	b.n	8011f52 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8011ea8:	2300      	movs	r3, #0
 8011eaa:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8011eac:	2300      	movs	r3, #0
 8011eae:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011eb6:	d103      	bne.n	8011ec0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8011eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8011ebc:	627b      	str	r3, [r7, #36]	; 0x24
 8011ebe:	e009      	b.n	8011ed4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d006      	beq.n	8011ed4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8011eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d101      	bne.n	8011ed4 <osMessageGet+0x5c>
      ticks = 1;
 8011ed0:	2301      	movs	r3, #1
 8011ed2:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8011ed4:	f7ff fe09 	bl	8011aea <inHandlerMode>
 8011ed8:	4603      	mov	r3, r0
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d01c      	beq.n	8011f18 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8011ede:	f107 0220 	add.w	r2, r7, #32
 8011ee2:	f107 0314 	add.w	r3, r7, #20
 8011ee6:	3304      	adds	r3, #4
 8011ee8:	4619      	mov	r1, r3
 8011eea:	68b8      	ldr	r0, [r7, #8]
 8011eec:	f000 fe70 	bl	8012bd0 <xQueueReceiveFromISR>
 8011ef0:	4603      	mov	r3, r0
 8011ef2:	2b01      	cmp	r3, #1
 8011ef4:	d102      	bne.n	8011efc <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8011ef6:	2310      	movs	r3, #16
 8011ef8:	617b      	str	r3, [r7, #20]
 8011efa:	e001      	b.n	8011f00 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8011efc:	2300      	movs	r3, #0
 8011efe:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011f00:	6a3b      	ldr	r3, [r7, #32]
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d01d      	beq.n	8011f42 <osMessageGet+0xca>
 8011f06:	4b15      	ldr	r3, [pc, #84]	; (8011f5c <osMessageGet+0xe4>)
 8011f08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f0c:	601a      	str	r2, [r3, #0]
 8011f0e:	f3bf 8f4f 	dsb	sy
 8011f12:	f3bf 8f6f 	isb	sy
 8011f16:	e014      	b.n	8011f42 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8011f18:	f107 0314 	add.w	r3, r7, #20
 8011f1c:	3304      	adds	r3, #4
 8011f1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011f20:	4619      	mov	r1, r3
 8011f22:	68b8      	ldr	r0, [r7, #8]
 8011f24:	f000 fc5a 	bl	80127dc <xQueueReceive>
 8011f28:	4603      	mov	r3, r0
 8011f2a:	2b01      	cmp	r3, #1
 8011f2c:	d102      	bne.n	8011f34 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8011f2e:	2310      	movs	r3, #16
 8011f30:	617b      	str	r3, [r7, #20]
 8011f32:	e006      	b.n	8011f42 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8011f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d101      	bne.n	8011f3e <osMessageGet+0xc6>
 8011f3a:	2300      	movs	r3, #0
 8011f3c:	e000      	b.n	8011f40 <osMessageGet+0xc8>
 8011f3e:	2340      	movs	r3, #64	; 0x40
 8011f40:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	461c      	mov	r4, r3
 8011f46:	f107 0314 	add.w	r3, r7, #20
 8011f4a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011f4e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8011f52:	68f8      	ldr	r0, [r7, #12]
 8011f54:	372c      	adds	r7, #44	; 0x2c
 8011f56:	46bd      	mov	sp, r7
 8011f58:	bd90      	pop	{r4, r7, pc}
 8011f5a:	bf00      	nop
 8011f5c:	e000ed04 	.word	0xe000ed04

08011f60 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8011f60:	b480      	push	{r7}
 8011f62:	b083      	sub	sp, #12
 8011f64:	af00      	add	r7, sp, #0
 8011f66:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	f103 0208 	add.w	r2, r3, #8
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	f04f 32ff 	mov.w	r2, #4294967295
 8011f78:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	f103 0208 	add.w	r2, r3, #8
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	f103 0208 	add.w	r2, r3, #8
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	2200      	movs	r2, #0
 8011f92:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011f94:	bf00      	nop
 8011f96:	370c      	adds	r7, #12
 8011f98:	46bd      	mov	sp, r7
 8011f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f9e:	4770      	bx	lr

08011fa0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8011fa0:	b480      	push	{r7}
 8011fa2:	b083      	sub	sp, #12
 8011fa4:	af00      	add	r7, sp, #0
 8011fa6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	2200      	movs	r2, #0
 8011fac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8011fae:	bf00      	nop
 8011fb0:	370c      	adds	r7, #12
 8011fb2:	46bd      	mov	sp, r7
 8011fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fb8:	4770      	bx	lr

08011fba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011fba:	b480      	push	{r7}
 8011fbc:	b085      	sub	sp, #20
 8011fbe:	af00      	add	r7, sp, #0
 8011fc0:	6078      	str	r0, [r7, #4]
 8011fc2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	685b      	ldr	r3, [r3, #4]
 8011fc8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8011fca:	683b      	ldr	r3, [r7, #0]
 8011fcc:	68fa      	ldr	r2, [r7, #12]
 8011fce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8011fd0:	68fb      	ldr	r3, [r7, #12]
 8011fd2:	689a      	ldr	r2, [r3, #8]
 8011fd4:	683b      	ldr	r3, [r7, #0]
 8011fd6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011fd8:	68fb      	ldr	r3, [r7, #12]
 8011fda:	689b      	ldr	r3, [r3, #8]
 8011fdc:	683a      	ldr	r2, [r7, #0]
 8011fde:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8011fe0:	68fb      	ldr	r3, [r7, #12]
 8011fe2:	683a      	ldr	r2, [r7, #0]
 8011fe4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8011fe6:	683b      	ldr	r3, [r7, #0]
 8011fe8:	687a      	ldr	r2, [r7, #4]
 8011fea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	681b      	ldr	r3, [r3, #0]
 8011ff0:	1c5a      	adds	r2, r3, #1
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	601a      	str	r2, [r3, #0]
}
 8011ff6:	bf00      	nop
 8011ff8:	3714      	adds	r7, #20
 8011ffa:	46bd      	mov	sp, r7
 8011ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012000:	4770      	bx	lr

08012002 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012002:	b480      	push	{r7}
 8012004:	b085      	sub	sp, #20
 8012006:	af00      	add	r7, sp, #0
 8012008:	6078      	str	r0, [r7, #4]
 801200a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801200c:	683b      	ldr	r3, [r7, #0]
 801200e:	681b      	ldr	r3, [r3, #0]
 8012010:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012012:	68bb      	ldr	r3, [r7, #8]
 8012014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012018:	d103      	bne.n	8012022 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	691b      	ldr	r3, [r3, #16]
 801201e:	60fb      	str	r3, [r7, #12]
 8012020:	e00c      	b.n	801203c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	3308      	adds	r3, #8
 8012026:	60fb      	str	r3, [r7, #12]
 8012028:	e002      	b.n	8012030 <vListInsert+0x2e>
 801202a:	68fb      	ldr	r3, [r7, #12]
 801202c:	685b      	ldr	r3, [r3, #4]
 801202e:	60fb      	str	r3, [r7, #12]
 8012030:	68fb      	ldr	r3, [r7, #12]
 8012032:	685b      	ldr	r3, [r3, #4]
 8012034:	681b      	ldr	r3, [r3, #0]
 8012036:	68ba      	ldr	r2, [r7, #8]
 8012038:	429a      	cmp	r2, r3
 801203a:	d2f6      	bcs.n	801202a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801203c:	68fb      	ldr	r3, [r7, #12]
 801203e:	685a      	ldr	r2, [r3, #4]
 8012040:	683b      	ldr	r3, [r7, #0]
 8012042:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012044:	683b      	ldr	r3, [r7, #0]
 8012046:	685b      	ldr	r3, [r3, #4]
 8012048:	683a      	ldr	r2, [r7, #0]
 801204a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801204c:	683b      	ldr	r3, [r7, #0]
 801204e:	68fa      	ldr	r2, [r7, #12]
 8012050:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8012052:	68fb      	ldr	r3, [r7, #12]
 8012054:	683a      	ldr	r2, [r7, #0]
 8012056:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012058:	683b      	ldr	r3, [r7, #0]
 801205a:	687a      	ldr	r2, [r7, #4]
 801205c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	681b      	ldr	r3, [r3, #0]
 8012062:	1c5a      	adds	r2, r3, #1
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	601a      	str	r2, [r3, #0]
}
 8012068:	bf00      	nop
 801206a:	3714      	adds	r7, #20
 801206c:	46bd      	mov	sp, r7
 801206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012072:	4770      	bx	lr

08012074 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012074:	b480      	push	{r7}
 8012076:	b085      	sub	sp, #20
 8012078:	af00      	add	r7, sp, #0
 801207a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	691b      	ldr	r3, [r3, #16]
 8012080:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	685b      	ldr	r3, [r3, #4]
 8012086:	687a      	ldr	r2, [r7, #4]
 8012088:	6892      	ldr	r2, [r2, #8]
 801208a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	689b      	ldr	r3, [r3, #8]
 8012090:	687a      	ldr	r2, [r7, #4]
 8012092:	6852      	ldr	r2, [r2, #4]
 8012094:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012096:	68fb      	ldr	r3, [r7, #12]
 8012098:	685b      	ldr	r3, [r3, #4]
 801209a:	687a      	ldr	r2, [r7, #4]
 801209c:	429a      	cmp	r2, r3
 801209e:	d103      	bne.n	80120a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	689a      	ldr	r2, [r3, #8]
 80120a4:	68fb      	ldr	r3, [r7, #12]
 80120a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	2200      	movs	r2, #0
 80120ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80120ae:	68fb      	ldr	r3, [r7, #12]
 80120b0:	681b      	ldr	r3, [r3, #0]
 80120b2:	1e5a      	subs	r2, r3, #1
 80120b4:	68fb      	ldr	r3, [r7, #12]
 80120b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80120b8:	68fb      	ldr	r3, [r7, #12]
 80120ba:	681b      	ldr	r3, [r3, #0]
}
 80120bc:	4618      	mov	r0, r3
 80120be:	3714      	adds	r7, #20
 80120c0:	46bd      	mov	sp, r7
 80120c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120c6:	4770      	bx	lr

080120c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80120c8:	b580      	push	{r7, lr}
 80120ca:	b084      	sub	sp, #16
 80120cc:	af00      	add	r7, sp, #0
 80120ce:	6078      	str	r0, [r7, #4]
 80120d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80120d6:	68fb      	ldr	r3, [r7, #12]
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d10c      	bne.n	80120f6 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80120dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120e0:	b672      	cpsid	i
 80120e2:	f383 8811 	msr	BASEPRI, r3
 80120e6:	f3bf 8f6f 	isb	sy
 80120ea:	f3bf 8f4f 	dsb	sy
 80120ee:	b662      	cpsie	i
 80120f0:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80120f2:	bf00      	nop
 80120f4:	e7fe      	b.n	80120f4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80120f6:	f002 f979 	bl	80143ec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80120fa:	68fb      	ldr	r3, [r7, #12]
 80120fc:	681a      	ldr	r2, [r3, #0]
 80120fe:	68fb      	ldr	r3, [r7, #12]
 8012100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012102:	68f9      	ldr	r1, [r7, #12]
 8012104:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012106:	fb01 f303 	mul.w	r3, r1, r3
 801210a:	441a      	add	r2, r3
 801210c:	68fb      	ldr	r3, [r7, #12]
 801210e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8012110:	68fb      	ldr	r3, [r7, #12]
 8012112:	2200      	movs	r2, #0
 8012114:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8012116:	68fb      	ldr	r3, [r7, #12]
 8012118:	681a      	ldr	r2, [r3, #0]
 801211a:	68fb      	ldr	r3, [r7, #12]
 801211c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801211e:	68fb      	ldr	r3, [r7, #12]
 8012120:	681a      	ldr	r2, [r3, #0]
 8012122:	68fb      	ldr	r3, [r7, #12]
 8012124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012126:	3b01      	subs	r3, #1
 8012128:	68f9      	ldr	r1, [r7, #12]
 801212a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801212c:	fb01 f303 	mul.w	r3, r1, r3
 8012130:	441a      	add	r2, r3
 8012132:	68fb      	ldr	r3, [r7, #12]
 8012134:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8012136:	68fb      	ldr	r3, [r7, #12]
 8012138:	22ff      	movs	r2, #255	; 0xff
 801213a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801213e:	68fb      	ldr	r3, [r7, #12]
 8012140:	22ff      	movs	r2, #255	; 0xff
 8012142:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8012146:	683b      	ldr	r3, [r7, #0]
 8012148:	2b00      	cmp	r3, #0
 801214a:	d114      	bne.n	8012176 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801214c:	68fb      	ldr	r3, [r7, #12]
 801214e:	691b      	ldr	r3, [r3, #16]
 8012150:	2b00      	cmp	r3, #0
 8012152:	d01a      	beq.n	801218a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012154:	68fb      	ldr	r3, [r7, #12]
 8012156:	3310      	adds	r3, #16
 8012158:	4618      	mov	r0, r3
 801215a:	f001 fc37 	bl	80139cc <xTaskRemoveFromEventList>
 801215e:	4603      	mov	r3, r0
 8012160:	2b00      	cmp	r3, #0
 8012162:	d012      	beq.n	801218a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8012164:	4b0c      	ldr	r3, [pc, #48]	; (8012198 <xQueueGenericReset+0xd0>)
 8012166:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801216a:	601a      	str	r2, [r3, #0]
 801216c:	f3bf 8f4f 	dsb	sy
 8012170:	f3bf 8f6f 	isb	sy
 8012174:	e009      	b.n	801218a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012176:	68fb      	ldr	r3, [r7, #12]
 8012178:	3310      	adds	r3, #16
 801217a:	4618      	mov	r0, r3
 801217c:	f7ff fef0 	bl	8011f60 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012180:	68fb      	ldr	r3, [r7, #12]
 8012182:	3324      	adds	r3, #36	; 0x24
 8012184:	4618      	mov	r0, r3
 8012186:	f7ff feeb 	bl	8011f60 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801218a:	f002 f963 	bl	8014454 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801218e:	2301      	movs	r3, #1
}
 8012190:	4618      	mov	r0, r3
 8012192:	3710      	adds	r7, #16
 8012194:	46bd      	mov	sp, r7
 8012196:	bd80      	pop	{r7, pc}
 8012198:	e000ed04 	.word	0xe000ed04

0801219c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801219c:	b580      	push	{r7, lr}
 801219e:	b08e      	sub	sp, #56	; 0x38
 80121a0:	af02      	add	r7, sp, #8
 80121a2:	60f8      	str	r0, [r7, #12]
 80121a4:	60b9      	str	r1, [r7, #8]
 80121a6:	607a      	str	r2, [r7, #4]
 80121a8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80121aa:	68fb      	ldr	r3, [r7, #12]
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d10c      	bne.n	80121ca <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80121b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121b4:	b672      	cpsid	i
 80121b6:	f383 8811 	msr	BASEPRI, r3
 80121ba:	f3bf 8f6f 	isb	sy
 80121be:	f3bf 8f4f 	dsb	sy
 80121c2:	b662      	cpsie	i
 80121c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80121c6:	bf00      	nop
 80121c8:	e7fe      	b.n	80121c8 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80121ca:	683b      	ldr	r3, [r7, #0]
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d10c      	bne.n	80121ea <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80121d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121d4:	b672      	cpsid	i
 80121d6:	f383 8811 	msr	BASEPRI, r3
 80121da:	f3bf 8f6f 	isb	sy
 80121de:	f3bf 8f4f 	dsb	sy
 80121e2:	b662      	cpsie	i
 80121e4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80121e6:	bf00      	nop
 80121e8:	e7fe      	b.n	80121e8 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d002      	beq.n	80121f6 <xQueueGenericCreateStatic+0x5a>
 80121f0:	68bb      	ldr	r3, [r7, #8]
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d001      	beq.n	80121fa <xQueueGenericCreateStatic+0x5e>
 80121f6:	2301      	movs	r3, #1
 80121f8:	e000      	b.n	80121fc <xQueueGenericCreateStatic+0x60>
 80121fa:	2300      	movs	r3, #0
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d10c      	bne.n	801221a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8012200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012204:	b672      	cpsid	i
 8012206:	f383 8811 	msr	BASEPRI, r3
 801220a:	f3bf 8f6f 	isb	sy
 801220e:	f3bf 8f4f 	dsb	sy
 8012212:	b662      	cpsie	i
 8012214:	623b      	str	r3, [r7, #32]
}
 8012216:	bf00      	nop
 8012218:	e7fe      	b.n	8012218 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	2b00      	cmp	r3, #0
 801221e:	d102      	bne.n	8012226 <xQueueGenericCreateStatic+0x8a>
 8012220:	68bb      	ldr	r3, [r7, #8]
 8012222:	2b00      	cmp	r3, #0
 8012224:	d101      	bne.n	801222a <xQueueGenericCreateStatic+0x8e>
 8012226:	2301      	movs	r3, #1
 8012228:	e000      	b.n	801222c <xQueueGenericCreateStatic+0x90>
 801222a:	2300      	movs	r3, #0
 801222c:	2b00      	cmp	r3, #0
 801222e:	d10c      	bne.n	801224a <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8012230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012234:	b672      	cpsid	i
 8012236:	f383 8811 	msr	BASEPRI, r3
 801223a:	f3bf 8f6f 	isb	sy
 801223e:	f3bf 8f4f 	dsb	sy
 8012242:	b662      	cpsie	i
 8012244:	61fb      	str	r3, [r7, #28]
}
 8012246:	bf00      	nop
 8012248:	e7fe      	b.n	8012248 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801224a:	2348      	movs	r3, #72	; 0x48
 801224c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801224e:	697b      	ldr	r3, [r7, #20]
 8012250:	2b48      	cmp	r3, #72	; 0x48
 8012252:	d00c      	beq.n	801226e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8012254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012258:	b672      	cpsid	i
 801225a:	f383 8811 	msr	BASEPRI, r3
 801225e:	f3bf 8f6f 	isb	sy
 8012262:	f3bf 8f4f 	dsb	sy
 8012266:	b662      	cpsie	i
 8012268:	61bb      	str	r3, [r7, #24]
}
 801226a:	bf00      	nop
 801226c:	e7fe      	b.n	801226c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801226e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012270:	683b      	ldr	r3, [r7, #0]
 8012272:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8012274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012276:	2b00      	cmp	r3, #0
 8012278:	d00d      	beq.n	8012296 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801227a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801227c:	2201      	movs	r2, #1
 801227e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012282:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8012286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012288:	9300      	str	r3, [sp, #0]
 801228a:	4613      	mov	r3, r2
 801228c:	687a      	ldr	r2, [r7, #4]
 801228e:	68b9      	ldr	r1, [r7, #8]
 8012290:	68f8      	ldr	r0, [r7, #12]
 8012292:	f000 f847 	bl	8012324 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8012298:	4618      	mov	r0, r3
 801229a:	3730      	adds	r7, #48	; 0x30
 801229c:	46bd      	mov	sp, r7
 801229e:	bd80      	pop	{r7, pc}

080122a0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80122a0:	b580      	push	{r7, lr}
 80122a2:	b08a      	sub	sp, #40	; 0x28
 80122a4:	af02      	add	r7, sp, #8
 80122a6:	60f8      	str	r0, [r7, #12]
 80122a8:	60b9      	str	r1, [r7, #8]
 80122aa:	4613      	mov	r3, r2
 80122ac:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80122ae:	68fb      	ldr	r3, [r7, #12]
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d10c      	bne.n	80122ce <xQueueGenericCreate+0x2e>
	__asm volatile
 80122b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122b8:	b672      	cpsid	i
 80122ba:	f383 8811 	msr	BASEPRI, r3
 80122be:	f3bf 8f6f 	isb	sy
 80122c2:	f3bf 8f4f 	dsb	sy
 80122c6:	b662      	cpsie	i
 80122c8:	613b      	str	r3, [r7, #16]
}
 80122ca:	bf00      	nop
 80122cc:	e7fe      	b.n	80122cc <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80122ce:	68bb      	ldr	r3, [r7, #8]
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d102      	bne.n	80122da <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80122d4:	2300      	movs	r3, #0
 80122d6:	61fb      	str	r3, [r7, #28]
 80122d8:	e004      	b.n	80122e4 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80122da:	68fb      	ldr	r3, [r7, #12]
 80122dc:	68ba      	ldr	r2, [r7, #8]
 80122de:	fb02 f303 	mul.w	r3, r2, r3
 80122e2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80122e4:	69fb      	ldr	r3, [r7, #28]
 80122e6:	3348      	adds	r3, #72	; 0x48
 80122e8:	4618      	mov	r0, r3
 80122ea:	f002 f9ab 	bl	8014644 <pvPortMalloc>
 80122ee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80122f0:	69bb      	ldr	r3, [r7, #24]
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d011      	beq.n	801231a <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80122f6:	69bb      	ldr	r3, [r7, #24]
 80122f8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80122fa:	697b      	ldr	r3, [r7, #20]
 80122fc:	3348      	adds	r3, #72	; 0x48
 80122fe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8012300:	69bb      	ldr	r3, [r7, #24]
 8012302:	2200      	movs	r2, #0
 8012304:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012308:	79fa      	ldrb	r2, [r7, #7]
 801230a:	69bb      	ldr	r3, [r7, #24]
 801230c:	9300      	str	r3, [sp, #0]
 801230e:	4613      	mov	r3, r2
 8012310:	697a      	ldr	r2, [r7, #20]
 8012312:	68b9      	ldr	r1, [r7, #8]
 8012314:	68f8      	ldr	r0, [r7, #12]
 8012316:	f000 f805 	bl	8012324 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801231a:	69bb      	ldr	r3, [r7, #24]
	}
 801231c:	4618      	mov	r0, r3
 801231e:	3720      	adds	r7, #32
 8012320:	46bd      	mov	sp, r7
 8012322:	bd80      	pop	{r7, pc}

08012324 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8012324:	b580      	push	{r7, lr}
 8012326:	b084      	sub	sp, #16
 8012328:	af00      	add	r7, sp, #0
 801232a:	60f8      	str	r0, [r7, #12]
 801232c:	60b9      	str	r1, [r7, #8]
 801232e:	607a      	str	r2, [r7, #4]
 8012330:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8012332:	68bb      	ldr	r3, [r7, #8]
 8012334:	2b00      	cmp	r3, #0
 8012336:	d103      	bne.n	8012340 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012338:	69bb      	ldr	r3, [r7, #24]
 801233a:	69ba      	ldr	r2, [r7, #24]
 801233c:	601a      	str	r2, [r3, #0]
 801233e:	e002      	b.n	8012346 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012340:	69bb      	ldr	r3, [r7, #24]
 8012342:	687a      	ldr	r2, [r7, #4]
 8012344:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8012346:	69bb      	ldr	r3, [r7, #24]
 8012348:	68fa      	ldr	r2, [r7, #12]
 801234a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801234c:	69bb      	ldr	r3, [r7, #24]
 801234e:	68ba      	ldr	r2, [r7, #8]
 8012350:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8012352:	2101      	movs	r1, #1
 8012354:	69b8      	ldr	r0, [r7, #24]
 8012356:	f7ff feb7 	bl	80120c8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801235a:	bf00      	nop
 801235c:	3710      	adds	r7, #16
 801235e:	46bd      	mov	sp, r7
 8012360:	bd80      	pop	{r7, pc}
	...

08012364 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8012364:	b580      	push	{r7, lr}
 8012366:	b08e      	sub	sp, #56	; 0x38
 8012368:	af00      	add	r7, sp, #0
 801236a:	60f8      	str	r0, [r7, #12]
 801236c:	60b9      	str	r1, [r7, #8]
 801236e:	607a      	str	r2, [r7, #4]
 8012370:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8012372:	2300      	movs	r3, #0
 8012374:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012376:	68fb      	ldr	r3, [r7, #12]
 8012378:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801237a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801237c:	2b00      	cmp	r3, #0
 801237e:	d10c      	bne.n	801239a <xQueueGenericSend+0x36>
	__asm volatile
 8012380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012384:	b672      	cpsid	i
 8012386:	f383 8811 	msr	BASEPRI, r3
 801238a:	f3bf 8f6f 	isb	sy
 801238e:	f3bf 8f4f 	dsb	sy
 8012392:	b662      	cpsie	i
 8012394:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8012396:	bf00      	nop
 8012398:	e7fe      	b.n	8012398 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801239a:	68bb      	ldr	r3, [r7, #8]
 801239c:	2b00      	cmp	r3, #0
 801239e:	d103      	bne.n	80123a8 <xQueueGenericSend+0x44>
 80123a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d101      	bne.n	80123ac <xQueueGenericSend+0x48>
 80123a8:	2301      	movs	r3, #1
 80123aa:	e000      	b.n	80123ae <xQueueGenericSend+0x4a>
 80123ac:	2300      	movs	r3, #0
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d10c      	bne.n	80123cc <xQueueGenericSend+0x68>
	__asm volatile
 80123b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123b6:	b672      	cpsid	i
 80123b8:	f383 8811 	msr	BASEPRI, r3
 80123bc:	f3bf 8f6f 	isb	sy
 80123c0:	f3bf 8f4f 	dsb	sy
 80123c4:	b662      	cpsie	i
 80123c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80123c8:	bf00      	nop
 80123ca:	e7fe      	b.n	80123ca <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80123cc:	683b      	ldr	r3, [r7, #0]
 80123ce:	2b02      	cmp	r3, #2
 80123d0:	d103      	bne.n	80123da <xQueueGenericSend+0x76>
 80123d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80123d6:	2b01      	cmp	r3, #1
 80123d8:	d101      	bne.n	80123de <xQueueGenericSend+0x7a>
 80123da:	2301      	movs	r3, #1
 80123dc:	e000      	b.n	80123e0 <xQueueGenericSend+0x7c>
 80123de:	2300      	movs	r3, #0
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	d10c      	bne.n	80123fe <xQueueGenericSend+0x9a>
	__asm volatile
 80123e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123e8:	b672      	cpsid	i
 80123ea:	f383 8811 	msr	BASEPRI, r3
 80123ee:	f3bf 8f6f 	isb	sy
 80123f2:	f3bf 8f4f 	dsb	sy
 80123f6:	b662      	cpsie	i
 80123f8:	623b      	str	r3, [r7, #32]
}
 80123fa:	bf00      	nop
 80123fc:	e7fe      	b.n	80123fc <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80123fe:	f001 fcab 	bl	8013d58 <xTaskGetSchedulerState>
 8012402:	4603      	mov	r3, r0
 8012404:	2b00      	cmp	r3, #0
 8012406:	d102      	bne.n	801240e <xQueueGenericSend+0xaa>
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	2b00      	cmp	r3, #0
 801240c:	d101      	bne.n	8012412 <xQueueGenericSend+0xae>
 801240e:	2301      	movs	r3, #1
 8012410:	e000      	b.n	8012414 <xQueueGenericSend+0xb0>
 8012412:	2300      	movs	r3, #0
 8012414:	2b00      	cmp	r3, #0
 8012416:	d10c      	bne.n	8012432 <xQueueGenericSend+0xce>
	__asm volatile
 8012418:	f04f 0350 	mov.w	r3, #80	; 0x50
 801241c:	b672      	cpsid	i
 801241e:	f383 8811 	msr	BASEPRI, r3
 8012422:	f3bf 8f6f 	isb	sy
 8012426:	f3bf 8f4f 	dsb	sy
 801242a:	b662      	cpsie	i
 801242c:	61fb      	str	r3, [r7, #28]
}
 801242e:	bf00      	nop
 8012430:	e7fe      	b.n	8012430 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012432:	f001 ffdb 	bl	80143ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012438:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801243a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801243c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801243e:	429a      	cmp	r2, r3
 8012440:	d302      	bcc.n	8012448 <xQueueGenericSend+0xe4>
 8012442:	683b      	ldr	r3, [r7, #0]
 8012444:	2b02      	cmp	r3, #2
 8012446:	d129      	bne.n	801249c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012448:	683a      	ldr	r2, [r7, #0]
 801244a:	68b9      	ldr	r1, [r7, #8]
 801244c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801244e:	f000 fc82 	bl	8012d56 <prvCopyDataToQueue>
 8012452:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012458:	2b00      	cmp	r3, #0
 801245a:	d010      	beq.n	801247e <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801245c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801245e:	3324      	adds	r3, #36	; 0x24
 8012460:	4618      	mov	r0, r3
 8012462:	f001 fab3 	bl	80139cc <xTaskRemoveFromEventList>
 8012466:	4603      	mov	r3, r0
 8012468:	2b00      	cmp	r3, #0
 801246a:	d013      	beq.n	8012494 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801246c:	4b3f      	ldr	r3, [pc, #252]	; (801256c <xQueueGenericSend+0x208>)
 801246e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012472:	601a      	str	r2, [r3, #0]
 8012474:	f3bf 8f4f 	dsb	sy
 8012478:	f3bf 8f6f 	isb	sy
 801247c:	e00a      	b.n	8012494 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801247e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012480:	2b00      	cmp	r3, #0
 8012482:	d007      	beq.n	8012494 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8012484:	4b39      	ldr	r3, [pc, #228]	; (801256c <xQueueGenericSend+0x208>)
 8012486:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801248a:	601a      	str	r2, [r3, #0]
 801248c:	f3bf 8f4f 	dsb	sy
 8012490:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8012494:	f001 ffde 	bl	8014454 <vPortExitCritical>
				return pdPASS;
 8012498:	2301      	movs	r3, #1
 801249a:	e063      	b.n	8012564 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d103      	bne.n	80124aa <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80124a2:	f001 ffd7 	bl	8014454 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80124a6:	2300      	movs	r3, #0
 80124a8:	e05c      	b.n	8012564 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80124aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d106      	bne.n	80124be <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80124b0:	f107 0314 	add.w	r3, r7, #20
 80124b4:	4618      	mov	r0, r3
 80124b6:	f001 faed 	bl	8013a94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80124ba:	2301      	movs	r3, #1
 80124bc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80124be:	f001 ffc9 	bl	8014454 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80124c2:	f001 f853 	bl	801356c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80124c6:	f001 ff91 	bl	80143ec <vPortEnterCritical>
 80124ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80124d0:	b25b      	sxtb	r3, r3
 80124d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124d6:	d103      	bne.n	80124e0 <xQueueGenericSend+0x17c>
 80124d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124da:	2200      	movs	r2, #0
 80124dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80124e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80124e6:	b25b      	sxtb	r3, r3
 80124e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124ec:	d103      	bne.n	80124f6 <xQueueGenericSend+0x192>
 80124ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124f0:	2200      	movs	r2, #0
 80124f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80124f6:	f001 ffad 	bl	8014454 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80124fa:	1d3a      	adds	r2, r7, #4
 80124fc:	f107 0314 	add.w	r3, r7, #20
 8012500:	4611      	mov	r1, r2
 8012502:	4618      	mov	r0, r3
 8012504:	f001 fadc 	bl	8013ac0 <xTaskCheckForTimeOut>
 8012508:	4603      	mov	r3, r0
 801250a:	2b00      	cmp	r3, #0
 801250c:	d124      	bne.n	8012558 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801250e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012510:	f000 fd19 	bl	8012f46 <prvIsQueueFull>
 8012514:	4603      	mov	r3, r0
 8012516:	2b00      	cmp	r3, #0
 8012518:	d018      	beq.n	801254c <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801251a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801251c:	3310      	adds	r3, #16
 801251e:	687a      	ldr	r2, [r7, #4]
 8012520:	4611      	mov	r1, r2
 8012522:	4618      	mov	r0, r3
 8012524:	f001 fa2c 	bl	8013980 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8012528:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801252a:	f000 fca4 	bl	8012e76 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801252e:	f001 f82b 	bl	8013588 <xTaskResumeAll>
 8012532:	4603      	mov	r3, r0
 8012534:	2b00      	cmp	r3, #0
 8012536:	f47f af7c 	bne.w	8012432 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 801253a:	4b0c      	ldr	r3, [pc, #48]	; (801256c <xQueueGenericSend+0x208>)
 801253c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012540:	601a      	str	r2, [r3, #0]
 8012542:	f3bf 8f4f 	dsb	sy
 8012546:	f3bf 8f6f 	isb	sy
 801254a:	e772      	b.n	8012432 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801254c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801254e:	f000 fc92 	bl	8012e76 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012552:	f001 f819 	bl	8013588 <xTaskResumeAll>
 8012556:	e76c      	b.n	8012432 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8012558:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801255a:	f000 fc8c 	bl	8012e76 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801255e:	f001 f813 	bl	8013588 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8012562:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8012564:	4618      	mov	r0, r3
 8012566:	3738      	adds	r7, #56	; 0x38
 8012568:	46bd      	mov	sp, r7
 801256a:	bd80      	pop	{r7, pc}
 801256c:	e000ed04 	.word	0xe000ed04

08012570 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8012570:	b580      	push	{r7, lr}
 8012572:	b08e      	sub	sp, #56	; 0x38
 8012574:	af00      	add	r7, sp, #0
 8012576:	60f8      	str	r0, [r7, #12]
 8012578:	60b9      	str	r1, [r7, #8]
 801257a:	607a      	str	r2, [r7, #4]
 801257c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801257e:	68fb      	ldr	r3, [r7, #12]
 8012580:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012584:	2b00      	cmp	r3, #0
 8012586:	d10c      	bne.n	80125a2 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8012588:	f04f 0350 	mov.w	r3, #80	; 0x50
 801258c:	b672      	cpsid	i
 801258e:	f383 8811 	msr	BASEPRI, r3
 8012592:	f3bf 8f6f 	isb	sy
 8012596:	f3bf 8f4f 	dsb	sy
 801259a:	b662      	cpsie	i
 801259c:	627b      	str	r3, [r7, #36]	; 0x24
}
 801259e:	bf00      	nop
 80125a0:	e7fe      	b.n	80125a0 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80125a2:	68bb      	ldr	r3, [r7, #8]
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d103      	bne.n	80125b0 <xQueueGenericSendFromISR+0x40>
 80125a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d101      	bne.n	80125b4 <xQueueGenericSendFromISR+0x44>
 80125b0:	2301      	movs	r3, #1
 80125b2:	e000      	b.n	80125b6 <xQueueGenericSendFromISR+0x46>
 80125b4:	2300      	movs	r3, #0
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d10c      	bne.n	80125d4 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80125ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125be:	b672      	cpsid	i
 80125c0:	f383 8811 	msr	BASEPRI, r3
 80125c4:	f3bf 8f6f 	isb	sy
 80125c8:	f3bf 8f4f 	dsb	sy
 80125cc:	b662      	cpsie	i
 80125ce:	623b      	str	r3, [r7, #32]
}
 80125d0:	bf00      	nop
 80125d2:	e7fe      	b.n	80125d2 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80125d4:	683b      	ldr	r3, [r7, #0]
 80125d6:	2b02      	cmp	r3, #2
 80125d8:	d103      	bne.n	80125e2 <xQueueGenericSendFromISR+0x72>
 80125da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80125de:	2b01      	cmp	r3, #1
 80125e0:	d101      	bne.n	80125e6 <xQueueGenericSendFromISR+0x76>
 80125e2:	2301      	movs	r3, #1
 80125e4:	e000      	b.n	80125e8 <xQueueGenericSendFromISR+0x78>
 80125e6:	2300      	movs	r3, #0
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d10c      	bne.n	8012606 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80125ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125f0:	b672      	cpsid	i
 80125f2:	f383 8811 	msr	BASEPRI, r3
 80125f6:	f3bf 8f6f 	isb	sy
 80125fa:	f3bf 8f4f 	dsb	sy
 80125fe:	b662      	cpsie	i
 8012600:	61fb      	str	r3, [r7, #28]
}
 8012602:	bf00      	nop
 8012604:	e7fe      	b.n	8012604 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012606:	f001 ffd9 	bl	80145bc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801260a:	f3ef 8211 	mrs	r2, BASEPRI
 801260e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012612:	b672      	cpsid	i
 8012614:	f383 8811 	msr	BASEPRI, r3
 8012618:	f3bf 8f6f 	isb	sy
 801261c:	f3bf 8f4f 	dsb	sy
 8012620:	b662      	cpsie	i
 8012622:	61ba      	str	r2, [r7, #24]
 8012624:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8012626:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012628:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801262a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801262c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801262e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012632:	429a      	cmp	r2, r3
 8012634:	d302      	bcc.n	801263c <xQueueGenericSendFromISR+0xcc>
 8012636:	683b      	ldr	r3, [r7, #0]
 8012638:	2b02      	cmp	r3, #2
 801263a:	d12c      	bne.n	8012696 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801263c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801263e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012642:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012646:	683a      	ldr	r2, [r7, #0]
 8012648:	68b9      	ldr	r1, [r7, #8]
 801264a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801264c:	f000 fb83 	bl	8012d56 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012650:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8012654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012658:	d112      	bne.n	8012680 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801265a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801265c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801265e:	2b00      	cmp	r3, #0
 8012660:	d016      	beq.n	8012690 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012664:	3324      	adds	r3, #36	; 0x24
 8012666:	4618      	mov	r0, r3
 8012668:	f001 f9b0 	bl	80139cc <xTaskRemoveFromEventList>
 801266c:	4603      	mov	r3, r0
 801266e:	2b00      	cmp	r3, #0
 8012670:	d00e      	beq.n	8012690 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	2b00      	cmp	r3, #0
 8012676:	d00b      	beq.n	8012690 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	2201      	movs	r2, #1
 801267c:	601a      	str	r2, [r3, #0]
 801267e:	e007      	b.n	8012690 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012680:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012684:	3301      	adds	r3, #1
 8012686:	b2db      	uxtb	r3, r3
 8012688:	b25a      	sxtb	r2, r3
 801268a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801268c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012690:	2301      	movs	r3, #1
 8012692:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8012694:	e001      	b.n	801269a <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012696:	2300      	movs	r3, #0
 8012698:	637b      	str	r3, [r7, #52]	; 0x34
 801269a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801269c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801269e:	693b      	ldr	r3, [r7, #16]
 80126a0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80126a4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80126a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80126a8:	4618      	mov	r0, r3
 80126aa:	3738      	adds	r7, #56	; 0x38
 80126ac:	46bd      	mov	sp, r7
 80126ae:	bd80      	pop	{r7, pc}

080126b0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80126b0:	b580      	push	{r7, lr}
 80126b2:	b08e      	sub	sp, #56	; 0x38
 80126b4:	af00      	add	r7, sp, #0
 80126b6:	6078      	str	r0, [r7, #4]
 80126b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80126be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d10c      	bne.n	80126de <xQueueGiveFromISR+0x2e>
	__asm volatile
 80126c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126c8:	b672      	cpsid	i
 80126ca:	f383 8811 	msr	BASEPRI, r3
 80126ce:	f3bf 8f6f 	isb	sy
 80126d2:	f3bf 8f4f 	dsb	sy
 80126d6:	b662      	cpsie	i
 80126d8:	623b      	str	r3, [r7, #32]
}
 80126da:	bf00      	nop
 80126dc:	e7fe      	b.n	80126dc <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80126de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d00c      	beq.n	8012700 <xQueueGiveFromISR+0x50>
	__asm volatile
 80126e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126ea:	b672      	cpsid	i
 80126ec:	f383 8811 	msr	BASEPRI, r3
 80126f0:	f3bf 8f6f 	isb	sy
 80126f4:	f3bf 8f4f 	dsb	sy
 80126f8:	b662      	cpsie	i
 80126fa:	61fb      	str	r3, [r7, #28]
}
 80126fc:	bf00      	nop
 80126fe:	e7fe      	b.n	80126fe <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8012700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012702:	681b      	ldr	r3, [r3, #0]
 8012704:	2b00      	cmp	r3, #0
 8012706:	d103      	bne.n	8012710 <xQueueGiveFromISR+0x60>
 8012708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801270a:	689b      	ldr	r3, [r3, #8]
 801270c:	2b00      	cmp	r3, #0
 801270e:	d101      	bne.n	8012714 <xQueueGiveFromISR+0x64>
 8012710:	2301      	movs	r3, #1
 8012712:	e000      	b.n	8012716 <xQueueGiveFromISR+0x66>
 8012714:	2300      	movs	r3, #0
 8012716:	2b00      	cmp	r3, #0
 8012718:	d10c      	bne.n	8012734 <xQueueGiveFromISR+0x84>
	__asm volatile
 801271a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801271e:	b672      	cpsid	i
 8012720:	f383 8811 	msr	BASEPRI, r3
 8012724:	f3bf 8f6f 	isb	sy
 8012728:	f3bf 8f4f 	dsb	sy
 801272c:	b662      	cpsie	i
 801272e:	61bb      	str	r3, [r7, #24]
}
 8012730:	bf00      	nop
 8012732:	e7fe      	b.n	8012732 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012734:	f001 ff42 	bl	80145bc <vPortValidateInterruptPriority>
	__asm volatile
 8012738:	f3ef 8211 	mrs	r2, BASEPRI
 801273c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012740:	b672      	cpsid	i
 8012742:	f383 8811 	msr	BASEPRI, r3
 8012746:	f3bf 8f6f 	isb	sy
 801274a:	f3bf 8f4f 	dsb	sy
 801274e:	b662      	cpsie	i
 8012750:	617a      	str	r2, [r7, #20]
 8012752:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8012754:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012756:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801275a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801275c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 801275e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012762:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012764:	429a      	cmp	r2, r3
 8012766:	d22b      	bcs.n	80127c0 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801276a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801276e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012774:	1c5a      	adds	r2, r3, #1
 8012776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012778:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801277a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801277e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012782:	d112      	bne.n	80127aa <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012788:	2b00      	cmp	r3, #0
 801278a:	d016      	beq.n	80127ba <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801278c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801278e:	3324      	adds	r3, #36	; 0x24
 8012790:	4618      	mov	r0, r3
 8012792:	f001 f91b 	bl	80139cc <xTaskRemoveFromEventList>
 8012796:	4603      	mov	r3, r0
 8012798:	2b00      	cmp	r3, #0
 801279a:	d00e      	beq.n	80127ba <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801279c:	683b      	ldr	r3, [r7, #0]
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d00b      	beq.n	80127ba <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80127a2:	683b      	ldr	r3, [r7, #0]
 80127a4:	2201      	movs	r2, #1
 80127a6:	601a      	str	r2, [r3, #0]
 80127a8:	e007      	b.n	80127ba <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80127aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80127ae:	3301      	adds	r3, #1
 80127b0:	b2db      	uxtb	r3, r3
 80127b2:	b25a      	sxtb	r2, r3
 80127b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80127ba:	2301      	movs	r3, #1
 80127bc:	637b      	str	r3, [r7, #52]	; 0x34
 80127be:	e001      	b.n	80127c4 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80127c0:	2300      	movs	r3, #0
 80127c2:	637b      	str	r3, [r7, #52]	; 0x34
 80127c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127c6:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80127c8:	68fb      	ldr	r3, [r7, #12]
 80127ca:	f383 8811 	msr	BASEPRI, r3
}
 80127ce:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80127d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80127d2:	4618      	mov	r0, r3
 80127d4:	3738      	adds	r7, #56	; 0x38
 80127d6:	46bd      	mov	sp, r7
 80127d8:	bd80      	pop	{r7, pc}
	...

080127dc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80127dc:	b580      	push	{r7, lr}
 80127de:	b08c      	sub	sp, #48	; 0x30
 80127e0:	af00      	add	r7, sp, #0
 80127e2:	60f8      	str	r0, [r7, #12]
 80127e4:	60b9      	str	r1, [r7, #8]
 80127e6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80127e8:	2300      	movs	r3, #0
 80127ea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80127ec:	68fb      	ldr	r3, [r7, #12]
 80127ee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80127f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	d10c      	bne.n	8012810 <xQueueReceive+0x34>
	__asm volatile
 80127f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127fa:	b672      	cpsid	i
 80127fc:	f383 8811 	msr	BASEPRI, r3
 8012800:	f3bf 8f6f 	isb	sy
 8012804:	f3bf 8f4f 	dsb	sy
 8012808:	b662      	cpsie	i
 801280a:	623b      	str	r3, [r7, #32]
}
 801280c:	bf00      	nop
 801280e:	e7fe      	b.n	801280e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012810:	68bb      	ldr	r3, [r7, #8]
 8012812:	2b00      	cmp	r3, #0
 8012814:	d103      	bne.n	801281e <xQueueReceive+0x42>
 8012816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801281a:	2b00      	cmp	r3, #0
 801281c:	d101      	bne.n	8012822 <xQueueReceive+0x46>
 801281e:	2301      	movs	r3, #1
 8012820:	e000      	b.n	8012824 <xQueueReceive+0x48>
 8012822:	2300      	movs	r3, #0
 8012824:	2b00      	cmp	r3, #0
 8012826:	d10c      	bne.n	8012842 <xQueueReceive+0x66>
	__asm volatile
 8012828:	f04f 0350 	mov.w	r3, #80	; 0x50
 801282c:	b672      	cpsid	i
 801282e:	f383 8811 	msr	BASEPRI, r3
 8012832:	f3bf 8f6f 	isb	sy
 8012836:	f3bf 8f4f 	dsb	sy
 801283a:	b662      	cpsie	i
 801283c:	61fb      	str	r3, [r7, #28]
}
 801283e:	bf00      	nop
 8012840:	e7fe      	b.n	8012840 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012842:	f001 fa89 	bl	8013d58 <xTaskGetSchedulerState>
 8012846:	4603      	mov	r3, r0
 8012848:	2b00      	cmp	r3, #0
 801284a:	d102      	bne.n	8012852 <xQueueReceive+0x76>
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	2b00      	cmp	r3, #0
 8012850:	d101      	bne.n	8012856 <xQueueReceive+0x7a>
 8012852:	2301      	movs	r3, #1
 8012854:	e000      	b.n	8012858 <xQueueReceive+0x7c>
 8012856:	2300      	movs	r3, #0
 8012858:	2b00      	cmp	r3, #0
 801285a:	d10c      	bne.n	8012876 <xQueueReceive+0x9a>
	__asm volatile
 801285c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012860:	b672      	cpsid	i
 8012862:	f383 8811 	msr	BASEPRI, r3
 8012866:	f3bf 8f6f 	isb	sy
 801286a:	f3bf 8f4f 	dsb	sy
 801286e:	b662      	cpsie	i
 8012870:	61bb      	str	r3, [r7, #24]
}
 8012872:	bf00      	nop
 8012874:	e7fe      	b.n	8012874 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012876:	f001 fdb9 	bl	80143ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801287a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801287c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801287e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012882:	2b00      	cmp	r3, #0
 8012884:	d01f      	beq.n	80128c6 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012886:	68b9      	ldr	r1, [r7, #8]
 8012888:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801288a:	f000 face 	bl	8012e2a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801288e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012890:	1e5a      	subs	r2, r3, #1
 8012892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012894:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012898:	691b      	ldr	r3, [r3, #16]
 801289a:	2b00      	cmp	r3, #0
 801289c:	d00f      	beq.n	80128be <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801289e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128a0:	3310      	adds	r3, #16
 80128a2:	4618      	mov	r0, r3
 80128a4:	f001 f892 	bl	80139cc <xTaskRemoveFromEventList>
 80128a8:	4603      	mov	r3, r0
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d007      	beq.n	80128be <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80128ae:	4b3d      	ldr	r3, [pc, #244]	; (80129a4 <xQueueReceive+0x1c8>)
 80128b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80128b4:	601a      	str	r2, [r3, #0]
 80128b6:	f3bf 8f4f 	dsb	sy
 80128ba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80128be:	f001 fdc9 	bl	8014454 <vPortExitCritical>
				return pdPASS;
 80128c2:	2301      	movs	r3, #1
 80128c4:	e069      	b.n	801299a <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	d103      	bne.n	80128d4 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80128cc:	f001 fdc2 	bl	8014454 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80128d0:	2300      	movs	r3, #0
 80128d2:	e062      	b.n	801299a <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80128d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	d106      	bne.n	80128e8 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80128da:	f107 0310 	add.w	r3, r7, #16
 80128de:	4618      	mov	r0, r3
 80128e0:	f001 f8d8 	bl	8013a94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80128e4:	2301      	movs	r3, #1
 80128e6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80128e8:	f001 fdb4 	bl	8014454 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80128ec:	f000 fe3e 	bl	801356c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80128f0:	f001 fd7c 	bl	80143ec <vPortEnterCritical>
 80128f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80128fa:	b25b      	sxtb	r3, r3
 80128fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012900:	d103      	bne.n	801290a <xQueueReceive+0x12e>
 8012902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012904:	2200      	movs	r2, #0
 8012906:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801290a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801290c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012910:	b25b      	sxtb	r3, r3
 8012912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012916:	d103      	bne.n	8012920 <xQueueReceive+0x144>
 8012918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801291a:	2200      	movs	r2, #0
 801291c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012920:	f001 fd98 	bl	8014454 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012924:	1d3a      	adds	r2, r7, #4
 8012926:	f107 0310 	add.w	r3, r7, #16
 801292a:	4611      	mov	r1, r2
 801292c:	4618      	mov	r0, r3
 801292e:	f001 f8c7 	bl	8013ac0 <xTaskCheckForTimeOut>
 8012932:	4603      	mov	r3, r0
 8012934:	2b00      	cmp	r3, #0
 8012936:	d123      	bne.n	8012980 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012938:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801293a:	f000 faee 	bl	8012f1a <prvIsQueueEmpty>
 801293e:	4603      	mov	r3, r0
 8012940:	2b00      	cmp	r3, #0
 8012942:	d017      	beq.n	8012974 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012946:	3324      	adds	r3, #36	; 0x24
 8012948:	687a      	ldr	r2, [r7, #4]
 801294a:	4611      	mov	r1, r2
 801294c:	4618      	mov	r0, r3
 801294e:	f001 f817 	bl	8013980 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012952:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012954:	f000 fa8f 	bl	8012e76 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012958:	f000 fe16 	bl	8013588 <xTaskResumeAll>
 801295c:	4603      	mov	r3, r0
 801295e:	2b00      	cmp	r3, #0
 8012960:	d189      	bne.n	8012876 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8012962:	4b10      	ldr	r3, [pc, #64]	; (80129a4 <xQueueReceive+0x1c8>)
 8012964:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012968:	601a      	str	r2, [r3, #0]
 801296a:	f3bf 8f4f 	dsb	sy
 801296e:	f3bf 8f6f 	isb	sy
 8012972:	e780      	b.n	8012876 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8012974:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012976:	f000 fa7e 	bl	8012e76 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801297a:	f000 fe05 	bl	8013588 <xTaskResumeAll>
 801297e:	e77a      	b.n	8012876 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8012980:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012982:	f000 fa78 	bl	8012e76 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012986:	f000 fdff 	bl	8013588 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801298a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801298c:	f000 fac5 	bl	8012f1a <prvIsQueueEmpty>
 8012990:	4603      	mov	r3, r0
 8012992:	2b00      	cmp	r3, #0
 8012994:	f43f af6f 	beq.w	8012876 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012998:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801299a:	4618      	mov	r0, r3
 801299c:	3730      	adds	r7, #48	; 0x30
 801299e:	46bd      	mov	sp, r7
 80129a0:	bd80      	pop	{r7, pc}
 80129a2:	bf00      	nop
 80129a4:	e000ed04 	.word	0xe000ed04

080129a8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80129a8:	b580      	push	{r7, lr}
 80129aa:	b08e      	sub	sp, #56	; 0x38
 80129ac:	af00      	add	r7, sp, #0
 80129ae:	6078      	str	r0, [r7, #4]
 80129b0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80129b2:	2300      	movs	r3, #0
 80129b4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80129ba:	2300      	movs	r3, #0
 80129bc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80129be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d10c      	bne.n	80129de <xQueueSemaphoreTake+0x36>
	__asm volatile
 80129c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129c8:	b672      	cpsid	i
 80129ca:	f383 8811 	msr	BASEPRI, r3
 80129ce:	f3bf 8f6f 	isb	sy
 80129d2:	f3bf 8f4f 	dsb	sy
 80129d6:	b662      	cpsie	i
 80129d8:	623b      	str	r3, [r7, #32]
}
 80129da:	bf00      	nop
 80129dc:	e7fe      	b.n	80129dc <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80129de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d00c      	beq.n	8012a00 <xQueueSemaphoreTake+0x58>
	__asm volatile
 80129e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129ea:	b672      	cpsid	i
 80129ec:	f383 8811 	msr	BASEPRI, r3
 80129f0:	f3bf 8f6f 	isb	sy
 80129f4:	f3bf 8f4f 	dsb	sy
 80129f8:	b662      	cpsie	i
 80129fa:	61fb      	str	r3, [r7, #28]
}
 80129fc:	bf00      	nop
 80129fe:	e7fe      	b.n	80129fe <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012a00:	f001 f9aa 	bl	8013d58 <xTaskGetSchedulerState>
 8012a04:	4603      	mov	r3, r0
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d102      	bne.n	8012a10 <xQueueSemaphoreTake+0x68>
 8012a0a:	683b      	ldr	r3, [r7, #0]
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d101      	bne.n	8012a14 <xQueueSemaphoreTake+0x6c>
 8012a10:	2301      	movs	r3, #1
 8012a12:	e000      	b.n	8012a16 <xQueueSemaphoreTake+0x6e>
 8012a14:	2300      	movs	r3, #0
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d10c      	bne.n	8012a34 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8012a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a1e:	b672      	cpsid	i
 8012a20:	f383 8811 	msr	BASEPRI, r3
 8012a24:	f3bf 8f6f 	isb	sy
 8012a28:	f3bf 8f4f 	dsb	sy
 8012a2c:	b662      	cpsie	i
 8012a2e:	61bb      	str	r3, [r7, #24]
}
 8012a30:	bf00      	nop
 8012a32:	e7fe      	b.n	8012a32 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012a34:	f001 fcda 	bl	80143ec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8012a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012a3c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8012a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	d024      	beq.n	8012a8e <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8012a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a46:	1e5a      	subs	r2, r3, #1
 8012a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a4a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a4e:	681b      	ldr	r3, [r3, #0]
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	d104      	bne.n	8012a5e <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8012a54:	f001 fb46 	bl	80140e4 <pvTaskIncrementMutexHeldCount>
 8012a58:	4602      	mov	r2, r0
 8012a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a5c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a60:	691b      	ldr	r3, [r3, #16]
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d00f      	beq.n	8012a86 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a68:	3310      	adds	r3, #16
 8012a6a:	4618      	mov	r0, r3
 8012a6c:	f000 ffae 	bl	80139cc <xTaskRemoveFromEventList>
 8012a70:	4603      	mov	r3, r0
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	d007      	beq.n	8012a86 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012a76:	4b55      	ldr	r3, [pc, #340]	; (8012bcc <xQueueSemaphoreTake+0x224>)
 8012a78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012a7c:	601a      	str	r2, [r3, #0]
 8012a7e:	f3bf 8f4f 	dsb	sy
 8012a82:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012a86:	f001 fce5 	bl	8014454 <vPortExitCritical>
				return pdPASS;
 8012a8a:	2301      	movs	r3, #1
 8012a8c:	e099      	b.n	8012bc2 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012a8e:	683b      	ldr	r3, [r7, #0]
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	d113      	bne.n	8012abc <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8012a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d00c      	beq.n	8012ab4 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8012a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a9e:	b672      	cpsid	i
 8012aa0:	f383 8811 	msr	BASEPRI, r3
 8012aa4:	f3bf 8f6f 	isb	sy
 8012aa8:	f3bf 8f4f 	dsb	sy
 8012aac:	b662      	cpsie	i
 8012aae:	617b      	str	r3, [r7, #20]
}
 8012ab0:	bf00      	nop
 8012ab2:	e7fe      	b.n	8012ab2 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8012ab4:	f001 fcce 	bl	8014454 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012ab8:	2300      	movs	r3, #0
 8012aba:	e082      	b.n	8012bc2 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d106      	bne.n	8012ad0 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012ac2:	f107 030c 	add.w	r3, r7, #12
 8012ac6:	4618      	mov	r0, r3
 8012ac8:	f000 ffe4 	bl	8013a94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012acc:	2301      	movs	r3, #1
 8012ace:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012ad0:	f001 fcc0 	bl	8014454 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012ad4:	f000 fd4a 	bl	801356c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012ad8:	f001 fc88 	bl	80143ec <vPortEnterCritical>
 8012adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ade:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012ae2:	b25b      	sxtb	r3, r3
 8012ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ae8:	d103      	bne.n	8012af2 <xQueueSemaphoreTake+0x14a>
 8012aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012aec:	2200      	movs	r2, #0
 8012aee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012af4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012af8:	b25b      	sxtb	r3, r3
 8012afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012afe:	d103      	bne.n	8012b08 <xQueueSemaphoreTake+0x160>
 8012b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b02:	2200      	movs	r2, #0
 8012b04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012b08:	f001 fca4 	bl	8014454 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012b0c:	463a      	mov	r2, r7
 8012b0e:	f107 030c 	add.w	r3, r7, #12
 8012b12:	4611      	mov	r1, r2
 8012b14:	4618      	mov	r0, r3
 8012b16:	f000 ffd3 	bl	8013ac0 <xTaskCheckForTimeOut>
 8012b1a:	4603      	mov	r3, r0
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d132      	bne.n	8012b86 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012b20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012b22:	f000 f9fa 	bl	8012f1a <prvIsQueueEmpty>
 8012b26:	4603      	mov	r3, r0
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	d026      	beq.n	8012b7a <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b2e:	681b      	ldr	r3, [r3, #0]
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d109      	bne.n	8012b48 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8012b34:	f001 fc5a 	bl	80143ec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b3a:	689b      	ldr	r3, [r3, #8]
 8012b3c:	4618      	mov	r0, r3
 8012b3e:	f001 f929 	bl	8013d94 <xTaskPriorityInherit>
 8012b42:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8012b44:	f001 fc86 	bl	8014454 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b4a:	3324      	adds	r3, #36	; 0x24
 8012b4c:	683a      	ldr	r2, [r7, #0]
 8012b4e:	4611      	mov	r1, r2
 8012b50:	4618      	mov	r0, r3
 8012b52:	f000 ff15 	bl	8013980 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012b56:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012b58:	f000 f98d 	bl	8012e76 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012b5c:	f000 fd14 	bl	8013588 <xTaskResumeAll>
 8012b60:	4603      	mov	r3, r0
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	f47f af66 	bne.w	8012a34 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8012b68:	4b18      	ldr	r3, [pc, #96]	; (8012bcc <xQueueSemaphoreTake+0x224>)
 8012b6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012b6e:	601a      	str	r2, [r3, #0]
 8012b70:	f3bf 8f4f 	dsb	sy
 8012b74:	f3bf 8f6f 	isb	sy
 8012b78:	e75c      	b.n	8012a34 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8012b7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012b7c:	f000 f97b 	bl	8012e76 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012b80:	f000 fd02 	bl	8013588 <xTaskResumeAll>
 8012b84:	e756      	b.n	8012a34 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8012b86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012b88:	f000 f975 	bl	8012e76 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012b8c:	f000 fcfc 	bl	8013588 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012b90:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012b92:	f000 f9c2 	bl	8012f1a <prvIsQueueEmpty>
 8012b96:	4603      	mov	r3, r0
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	f43f af4b 	beq.w	8012a34 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8012b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d00d      	beq.n	8012bc0 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8012ba4:	f001 fc22 	bl	80143ec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8012ba8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012baa:	f000 f8bc 	bl	8012d26 <prvGetDisinheritPriorityAfterTimeout>
 8012bae:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8012bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bb2:	689b      	ldr	r3, [r3, #8]
 8012bb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012bb6:	4618      	mov	r0, r3
 8012bb8:	f001 f9f6 	bl	8013fa8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8012bbc:	f001 fc4a 	bl	8014454 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012bc0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012bc2:	4618      	mov	r0, r3
 8012bc4:	3738      	adds	r7, #56	; 0x38
 8012bc6:	46bd      	mov	sp, r7
 8012bc8:	bd80      	pop	{r7, pc}
 8012bca:	bf00      	nop
 8012bcc:	e000ed04 	.word	0xe000ed04

08012bd0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012bd0:	b580      	push	{r7, lr}
 8012bd2:	b08e      	sub	sp, #56	; 0x38
 8012bd4:	af00      	add	r7, sp, #0
 8012bd6:	60f8      	str	r0, [r7, #12]
 8012bd8:	60b9      	str	r1, [r7, #8]
 8012bda:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012bdc:	68fb      	ldr	r3, [r7, #12]
 8012bde:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d10c      	bne.n	8012c00 <xQueueReceiveFromISR+0x30>
	__asm volatile
 8012be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bea:	b672      	cpsid	i
 8012bec:	f383 8811 	msr	BASEPRI, r3
 8012bf0:	f3bf 8f6f 	isb	sy
 8012bf4:	f3bf 8f4f 	dsb	sy
 8012bf8:	b662      	cpsie	i
 8012bfa:	623b      	str	r3, [r7, #32]
}
 8012bfc:	bf00      	nop
 8012bfe:	e7fe      	b.n	8012bfe <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012c00:	68bb      	ldr	r3, [r7, #8]
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	d103      	bne.n	8012c0e <xQueueReceiveFromISR+0x3e>
 8012c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d101      	bne.n	8012c12 <xQueueReceiveFromISR+0x42>
 8012c0e:	2301      	movs	r3, #1
 8012c10:	e000      	b.n	8012c14 <xQueueReceiveFromISR+0x44>
 8012c12:	2300      	movs	r3, #0
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d10c      	bne.n	8012c32 <xQueueReceiveFromISR+0x62>
	__asm volatile
 8012c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c1c:	b672      	cpsid	i
 8012c1e:	f383 8811 	msr	BASEPRI, r3
 8012c22:	f3bf 8f6f 	isb	sy
 8012c26:	f3bf 8f4f 	dsb	sy
 8012c2a:	b662      	cpsie	i
 8012c2c:	61fb      	str	r3, [r7, #28]
}
 8012c2e:	bf00      	nop
 8012c30:	e7fe      	b.n	8012c30 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012c32:	f001 fcc3 	bl	80145bc <vPortValidateInterruptPriority>
	__asm volatile
 8012c36:	f3ef 8211 	mrs	r2, BASEPRI
 8012c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c3e:	b672      	cpsid	i
 8012c40:	f383 8811 	msr	BASEPRI, r3
 8012c44:	f3bf 8f6f 	isb	sy
 8012c48:	f3bf 8f4f 	dsb	sy
 8012c4c:	b662      	cpsie	i
 8012c4e:	61ba      	str	r2, [r7, #24]
 8012c50:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8012c52:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012c54:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012c5a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d02f      	beq.n	8012cc2 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8012c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012c68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012c6c:	68b9      	ldr	r1, [r7, #8]
 8012c6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012c70:	f000 f8db 	bl	8012e2a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c76:	1e5a      	subs	r2, r3, #1
 8012c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c7a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8012c7c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c84:	d112      	bne.n	8012cac <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c88:	691b      	ldr	r3, [r3, #16]
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d016      	beq.n	8012cbc <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c90:	3310      	adds	r3, #16
 8012c92:	4618      	mov	r0, r3
 8012c94:	f000 fe9a 	bl	80139cc <xTaskRemoveFromEventList>
 8012c98:	4603      	mov	r3, r0
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	d00e      	beq.n	8012cbc <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d00b      	beq.n	8012cbc <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	2201      	movs	r2, #1
 8012ca8:	601a      	str	r2, [r3, #0]
 8012caa:	e007      	b.n	8012cbc <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8012cac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012cb0:	3301      	adds	r3, #1
 8012cb2:	b2db      	uxtb	r3, r3
 8012cb4:	b25a      	sxtb	r2, r3
 8012cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8012cbc:	2301      	movs	r3, #1
 8012cbe:	637b      	str	r3, [r7, #52]	; 0x34
 8012cc0:	e001      	b.n	8012cc6 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8012cc2:	2300      	movs	r3, #0
 8012cc4:	637b      	str	r3, [r7, #52]	; 0x34
 8012cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cc8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8012cca:	693b      	ldr	r3, [r7, #16]
 8012ccc:	f383 8811 	msr	BASEPRI, r3
}
 8012cd0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012cd4:	4618      	mov	r0, r3
 8012cd6:	3738      	adds	r7, #56	; 0x38
 8012cd8:	46bd      	mov	sp, r7
 8012cda:	bd80      	pop	{r7, pc}

08012cdc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8012cdc:	b580      	push	{r7, lr}
 8012cde:	b084      	sub	sp, #16
 8012ce0:	af00      	add	r7, sp, #0
 8012ce2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012ce8:	68fb      	ldr	r3, [r7, #12]
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	d10c      	bne.n	8012d08 <vQueueDelete+0x2c>
	__asm volatile
 8012cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cf2:	b672      	cpsid	i
 8012cf4:	f383 8811 	msr	BASEPRI, r3
 8012cf8:	f3bf 8f6f 	isb	sy
 8012cfc:	f3bf 8f4f 	dsb	sy
 8012d00:	b662      	cpsie	i
 8012d02:	60bb      	str	r3, [r7, #8]
}
 8012d04:	bf00      	nop
 8012d06:	e7fe      	b.n	8012d06 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8012d08:	68f8      	ldr	r0, [r7, #12]
 8012d0a:	f000 f935 	bl	8012f78 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8012d0e:	68fb      	ldr	r3, [r7, #12]
 8012d10:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	d102      	bne.n	8012d1e <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 8012d18:	68f8      	ldr	r0, [r7, #12]
 8012d1a:	f001 fd63 	bl	80147e4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8012d1e:	bf00      	nop
 8012d20:	3710      	adds	r7, #16
 8012d22:	46bd      	mov	sp, r7
 8012d24:	bd80      	pop	{r7, pc}

08012d26 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8012d26:	b480      	push	{r7}
 8012d28:	b085      	sub	sp, #20
 8012d2a:	af00      	add	r7, sp, #0
 8012d2c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	d006      	beq.n	8012d44 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d3a:	681b      	ldr	r3, [r3, #0]
 8012d3c:	f1c3 0307 	rsb	r3, r3, #7
 8012d40:	60fb      	str	r3, [r7, #12]
 8012d42:	e001      	b.n	8012d48 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8012d44:	2300      	movs	r3, #0
 8012d46:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8012d48:	68fb      	ldr	r3, [r7, #12]
	}
 8012d4a:	4618      	mov	r0, r3
 8012d4c:	3714      	adds	r7, #20
 8012d4e:	46bd      	mov	sp, r7
 8012d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d54:	4770      	bx	lr

08012d56 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8012d56:	b580      	push	{r7, lr}
 8012d58:	b086      	sub	sp, #24
 8012d5a:	af00      	add	r7, sp, #0
 8012d5c:	60f8      	str	r0, [r7, #12]
 8012d5e:	60b9      	str	r1, [r7, #8]
 8012d60:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8012d62:	2300      	movs	r3, #0
 8012d64:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012d66:	68fb      	ldr	r3, [r7, #12]
 8012d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012d6a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012d6c:	68fb      	ldr	r3, [r7, #12]
 8012d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012d70:	2b00      	cmp	r3, #0
 8012d72:	d10d      	bne.n	8012d90 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012d74:	68fb      	ldr	r3, [r7, #12]
 8012d76:	681b      	ldr	r3, [r3, #0]
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d14d      	bne.n	8012e18 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012d7c:	68fb      	ldr	r3, [r7, #12]
 8012d7e:	689b      	ldr	r3, [r3, #8]
 8012d80:	4618      	mov	r0, r3
 8012d82:	f001 f887 	bl	8013e94 <xTaskPriorityDisinherit>
 8012d86:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8012d88:	68fb      	ldr	r3, [r7, #12]
 8012d8a:	2200      	movs	r2, #0
 8012d8c:	609a      	str	r2, [r3, #8]
 8012d8e:	e043      	b.n	8012e18 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	d119      	bne.n	8012dca <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012d96:	68fb      	ldr	r3, [r7, #12]
 8012d98:	6858      	ldr	r0, [r3, #4]
 8012d9a:	68fb      	ldr	r3, [r7, #12]
 8012d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012d9e:	461a      	mov	r2, r3
 8012da0:	68b9      	ldr	r1, [r7, #8]
 8012da2:	f001 fe63 	bl	8014a6c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012da6:	68fb      	ldr	r3, [r7, #12]
 8012da8:	685a      	ldr	r2, [r3, #4]
 8012daa:	68fb      	ldr	r3, [r7, #12]
 8012dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012dae:	441a      	add	r2, r3
 8012db0:	68fb      	ldr	r3, [r7, #12]
 8012db2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012db4:	68fb      	ldr	r3, [r7, #12]
 8012db6:	685a      	ldr	r2, [r3, #4]
 8012db8:	68fb      	ldr	r3, [r7, #12]
 8012dba:	689b      	ldr	r3, [r3, #8]
 8012dbc:	429a      	cmp	r2, r3
 8012dbe:	d32b      	bcc.n	8012e18 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8012dc0:	68fb      	ldr	r3, [r7, #12]
 8012dc2:	681a      	ldr	r2, [r3, #0]
 8012dc4:	68fb      	ldr	r3, [r7, #12]
 8012dc6:	605a      	str	r2, [r3, #4]
 8012dc8:	e026      	b.n	8012e18 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8012dca:	68fb      	ldr	r3, [r7, #12]
 8012dcc:	68d8      	ldr	r0, [r3, #12]
 8012dce:	68fb      	ldr	r3, [r7, #12]
 8012dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012dd2:	461a      	mov	r2, r3
 8012dd4:	68b9      	ldr	r1, [r7, #8]
 8012dd6:	f001 fe49 	bl	8014a6c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	68da      	ldr	r2, [r3, #12]
 8012dde:	68fb      	ldr	r3, [r7, #12]
 8012de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012de2:	425b      	negs	r3, r3
 8012de4:	441a      	add	r2, r3
 8012de6:	68fb      	ldr	r3, [r7, #12]
 8012de8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012dea:	68fb      	ldr	r3, [r7, #12]
 8012dec:	68da      	ldr	r2, [r3, #12]
 8012dee:	68fb      	ldr	r3, [r7, #12]
 8012df0:	681b      	ldr	r3, [r3, #0]
 8012df2:	429a      	cmp	r2, r3
 8012df4:	d207      	bcs.n	8012e06 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8012df6:	68fb      	ldr	r3, [r7, #12]
 8012df8:	689a      	ldr	r2, [r3, #8]
 8012dfa:	68fb      	ldr	r3, [r7, #12]
 8012dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012dfe:	425b      	negs	r3, r3
 8012e00:	441a      	add	r2, r3
 8012e02:	68fb      	ldr	r3, [r7, #12]
 8012e04:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	2b02      	cmp	r3, #2
 8012e0a:	d105      	bne.n	8012e18 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012e0c:	693b      	ldr	r3, [r7, #16]
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d002      	beq.n	8012e18 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8012e12:	693b      	ldr	r3, [r7, #16]
 8012e14:	3b01      	subs	r3, #1
 8012e16:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012e18:	693b      	ldr	r3, [r7, #16]
 8012e1a:	1c5a      	adds	r2, r3, #1
 8012e1c:	68fb      	ldr	r3, [r7, #12]
 8012e1e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8012e20:	697b      	ldr	r3, [r7, #20]
}
 8012e22:	4618      	mov	r0, r3
 8012e24:	3718      	adds	r7, #24
 8012e26:	46bd      	mov	sp, r7
 8012e28:	bd80      	pop	{r7, pc}

08012e2a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8012e2a:	b580      	push	{r7, lr}
 8012e2c:	b082      	sub	sp, #8
 8012e2e:	af00      	add	r7, sp, #0
 8012e30:	6078      	str	r0, [r7, #4]
 8012e32:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d018      	beq.n	8012e6e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	68da      	ldr	r2, [r3, #12]
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012e44:	441a      	add	r2, r3
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	68da      	ldr	r2, [r3, #12]
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	689b      	ldr	r3, [r3, #8]
 8012e52:	429a      	cmp	r2, r3
 8012e54:	d303      	bcc.n	8012e5e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	681a      	ldr	r2, [r3, #0]
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	68d9      	ldr	r1, [r3, #12]
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012e66:	461a      	mov	r2, r3
 8012e68:	6838      	ldr	r0, [r7, #0]
 8012e6a:	f001 fdff 	bl	8014a6c <memcpy>
	}
}
 8012e6e:	bf00      	nop
 8012e70:	3708      	adds	r7, #8
 8012e72:	46bd      	mov	sp, r7
 8012e74:	bd80      	pop	{r7, pc}

08012e76 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012e76:	b580      	push	{r7, lr}
 8012e78:	b084      	sub	sp, #16
 8012e7a:	af00      	add	r7, sp, #0
 8012e7c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012e7e:	f001 fab5 	bl	80143ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012e88:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012e8a:	e011      	b.n	8012eb0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d012      	beq.n	8012eba <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	3324      	adds	r3, #36	; 0x24
 8012e98:	4618      	mov	r0, r3
 8012e9a:	f000 fd97 	bl	80139cc <xTaskRemoveFromEventList>
 8012e9e:	4603      	mov	r3, r0
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	d001      	beq.n	8012ea8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8012ea4:	f000 fe72 	bl	8013b8c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8012ea8:	7bfb      	ldrb	r3, [r7, #15]
 8012eaa:	3b01      	subs	r3, #1
 8012eac:	b2db      	uxtb	r3, r3
 8012eae:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012eb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	dce9      	bgt.n	8012e8c <prvUnlockQueue+0x16>
 8012eb8:	e000      	b.n	8012ebc <prvUnlockQueue+0x46>
					break;
 8012eba:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	22ff      	movs	r2, #255	; 0xff
 8012ec0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8012ec4:	f001 fac6 	bl	8014454 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8012ec8:	f001 fa90 	bl	80143ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012ed2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012ed4:	e011      	b.n	8012efa <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	691b      	ldr	r3, [r3, #16]
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d012      	beq.n	8012f04 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	3310      	adds	r3, #16
 8012ee2:	4618      	mov	r0, r3
 8012ee4:	f000 fd72 	bl	80139cc <xTaskRemoveFromEventList>
 8012ee8:	4603      	mov	r3, r0
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d001      	beq.n	8012ef2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8012eee:	f000 fe4d 	bl	8013b8c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8012ef2:	7bbb      	ldrb	r3, [r7, #14]
 8012ef4:	3b01      	subs	r3, #1
 8012ef6:	b2db      	uxtb	r3, r3
 8012ef8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012efa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	dce9      	bgt.n	8012ed6 <prvUnlockQueue+0x60>
 8012f02:	e000      	b.n	8012f06 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8012f04:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	22ff      	movs	r2, #255	; 0xff
 8012f0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8012f0e:	f001 faa1 	bl	8014454 <vPortExitCritical>
}
 8012f12:	bf00      	nop
 8012f14:	3710      	adds	r7, #16
 8012f16:	46bd      	mov	sp, r7
 8012f18:	bd80      	pop	{r7, pc}

08012f1a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8012f1a:	b580      	push	{r7, lr}
 8012f1c:	b084      	sub	sp, #16
 8012f1e:	af00      	add	r7, sp, #0
 8012f20:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012f22:	f001 fa63 	bl	80143ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d102      	bne.n	8012f34 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8012f2e:	2301      	movs	r3, #1
 8012f30:	60fb      	str	r3, [r7, #12]
 8012f32:	e001      	b.n	8012f38 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8012f34:	2300      	movs	r3, #0
 8012f36:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012f38:	f001 fa8c 	bl	8014454 <vPortExitCritical>

	return xReturn;
 8012f3c:	68fb      	ldr	r3, [r7, #12]
}
 8012f3e:	4618      	mov	r0, r3
 8012f40:	3710      	adds	r7, #16
 8012f42:	46bd      	mov	sp, r7
 8012f44:	bd80      	pop	{r7, pc}

08012f46 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8012f46:	b580      	push	{r7, lr}
 8012f48:	b084      	sub	sp, #16
 8012f4a:	af00      	add	r7, sp, #0
 8012f4c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012f4e:	f001 fa4d 	bl	80143ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012f5a:	429a      	cmp	r2, r3
 8012f5c:	d102      	bne.n	8012f64 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8012f5e:	2301      	movs	r3, #1
 8012f60:	60fb      	str	r3, [r7, #12]
 8012f62:	e001      	b.n	8012f68 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8012f64:	2300      	movs	r3, #0
 8012f66:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012f68:	f001 fa74 	bl	8014454 <vPortExitCritical>

	return xReturn;
 8012f6c:	68fb      	ldr	r3, [r7, #12]
}
 8012f6e:	4618      	mov	r0, r3
 8012f70:	3710      	adds	r7, #16
 8012f72:	46bd      	mov	sp, r7
 8012f74:	bd80      	pop	{r7, pc}
	...

08012f78 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8012f78:	b480      	push	{r7}
 8012f7a:	b085      	sub	sp, #20
 8012f7c:	af00      	add	r7, sp, #0
 8012f7e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012f80:	2300      	movs	r3, #0
 8012f82:	60fb      	str	r3, [r7, #12]
 8012f84:	e016      	b.n	8012fb4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8012f86:	4a10      	ldr	r2, [pc, #64]	; (8012fc8 <vQueueUnregisterQueue+0x50>)
 8012f88:	68fb      	ldr	r3, [r7, #12]
 8012f8a:	00db      	lsls	r3, r3, #3
 8012f8c:	4413      	add	r3, r2
 8012f8e:	685b      	ldr	r3, [r3, #4]
 8012f90:	687a      	ldr	r2, [r7, #4]
 8012f92:	429a      	cmp	r2, r3
 8012f94:	d10b      	bne.n	8012fae <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8012f96:	4a0c      	ldr	r2, [pc, #48]	; (8012fc8 <vQueueUnregisterQueue+0x50>)
 8012f98:	68fb      	ldr	r3, [r7, #12]
 8012f9a:	2100      	movs	r1, #0
 8012f9c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8012fa0:	4a09      	ldr	r2, [pc, #36]	; (8012fc8 <vQueueUnregisterQueue+0x50>)
 8012fa2:	68fb      	ldr	r3, [r7, #12]
 8012fa4:	00db      	lsls	r3, r3, #3
 8012fa6:	4413      	add	r3, r2
 8012fa8:	2200      	movs	r2, #0
 8012faa:	605a      	str	r2, [r3, #4]
				break;
 8012fac:	e006      	b.n	8012fbc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012fae:	68fb      	ldr	r3, [r7, #12]
 8012fb0:	3301      	adds	r3, #1
 8012fb2:	60fb      	str	r3, [r7, #12]
 8012fb4:	68fb      	ldr	r3, [r7, #12]
 8012fb6:	2b07      	cmp	r3, #7
 8012fb8:	d9e5      	bls.n	8012f86 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8012fba:	bf00      	nop
 8012fbc:	bf00      	nop
 8012fbe:	3714      	adds	r7, #20
 8012fc0:	46bd      	mov	sp, r7
 8012fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fc6:	4770      	bx	lr
 8012fc8:	20001368 	.word	0x20001368

08012fcc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8012fcc:	b580      	push	{r7, lr}
 8012fce:	b08e      	sub	sp, #56	; 0x38
 8012fd0:	af04      	add	r7, sp, #16
 8012fd2:	60f8      	str	r0, [r7, #12]
 8012fd4:	60b9      	str	r1, [r7, #8]
 8012fd6:	607a      	str	r2, [r7, #4]
 8012fd8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8012fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d10c      	bne.n	8012ffa <xTaskCreateStatic+0x2e>
	__asm volatile
 8012fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fe4:	b672      	cpsid	i
 8012fe6:	f383 8811 	msr	BASEPRI, r3
 8012fea:	f3bf 8f6f 	isb	sy
 8012fee:	f3bf 8f4f 	dsb	sy
 8012ff2:	b662      	cpsie	i
 8012ff4:	623b      	str	r3, [r7, #32]
}
 8012ff6:	bf00      	nop
 8012ff8:	e7fe      	b.n	8012ff8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8012ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	d10c      	bne.n	801301a <xTaskCreateStatic+0x4e>
	__asm volatile
 8013000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013004:	b672      	cpsid	i
 8013006:	f383 8811 	msr	BASEPRI, r3
 801300a:	f3bf 8f6f 	isb	sy
 801300e:	f3bf 8f4f 	dsb	sy
 8013012:	b662      	cpsie	i
 8013014:	61fb      	str	r3, [r7, #28]
}
 8013016:	bf00      	nop
 8013018:	e7fe      	b.n	8013018 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801301a:	2354      	movs	r3, #84	; 0x54
 801301c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801301e:	693b      	ldr	r3, [r7, #16]
 8013020:	2b54      	cmp	r3, #84	; 0x54
 8013022:	d00c      	beq.n	801303e <xTaskCreateStatic+0x72>
	__asm volatile
 8013024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013028:	b672      	cpsid	i
 801302a:	f383 8811 	msr	BASEPRI, r3
 801302e:	f3bf 8f6f 	isb	sy
 8013032:	f3bf 8f4f 	dsb	sy
 8013036:	b662      	cpsie	i
 8013038:	61bb      	str	r3, [r7, #24]
}
 801303a:	bf00      	nop
 801303c:	e7fe      	b.n	801303c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801303e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013042:	2b00      	cmp	r3, #0
 8013044:	d01e      	beq.n	8013084 <xTaskCreateStatic+0xb8>
 8013046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013048:	2b00      	cmp	r3, #0
 801304a:	d01b      	beq.n	8013084 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801304c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801304e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013052:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013054:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8013056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013058:	2202      	movs	r2, #2
 801305a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801305e:	2300      	movs	r3, #0
 8013060:	9303      	str	r3, [sp, #12]
 8013062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013064:	9302      	str	r3, [sp, #8]
 8013066:	f107 0314 	add.w	r3, r7, #20
 801306a:	9301      	str	r3, [sp, #4]
 801306c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801306e:	9300      	str	r3, [sp, #0]
 8013070:	683b      	ldr	r3, [r7, #0]
 8013072:	687a      	ldr	r2, [r7, #4]
 8013074:	68b9      	ldr	r1, [r7, #8]
 8013076:	68f8      	ldr	r0, [r7, #12]
 8013078:	f000 f850 	bl	801311c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801307c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801307e:	f000 f8df 	bl	8013240 <prvAddNewTaskToReadyList>
 8013082:	e001      	b.n	8013088 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8013084:	2300      	movs	r3, #0
 8013086:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8013088:	697b      	ldr	r3, [r7, #20]
	}
 801308a:	4618      	mov	r0, r3
 801308c:	3728      	adds	r7, #40	; 0x28
 801308e:	46bd      	mov	sp, r7
 8013090:	bd80      	pop	{r7, pc}

08013092 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8013092:	b580      	push	{r7, lr}
 8013094:	b08c      	sub	sp, #48	; 0x30
 8013096:	af04      	add	r7, sp, #16
 8013098:	60f8      	str	r0, [r7, #12]
 801309a:	60b9      	str	r1, [r7, #8]
 801309c:	603b      	str	r3, [r7, #0]
 801309e:	4613      	mov	r3, r2
 80130a0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80130a2:	88fb      	ldrh	r3, [r7, #6]
 80130a4:	009b      	lsls	r3, r3, #2
 80130a6:	4618      	mov	r0, r3
 80130a8:	f001 facc 	bl	8014644 <pvPortMalloc>
 80130ac:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80130ae:	697b      	ldr	r3, [r7, #20]
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d00e      	beq.n	80130d2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80130b4:	2054      	movs	r0, #84	; 0x54
 80130b6:	f001 fac5 	bl	8014644 <pvPortMalloc>
 80130ba:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80130bc:	69fb      	ldr	r3, [r7, #28]
 80130be:	2b00      	cmp	r3, #0
 80130c0:	d003      	beq.n	80130ca <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80130c2:	69fb      	ldr	r3, [r7, #28]
 80130c4:	697a      	ldr	r2, [r7, #20]
 80130c6:	631a      	str	r2, [r3, #48]	; 0x30
 80130c8:	e005      	b.n	80130d6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80130ca:	6978      	ldr	r0, [r7, #20]
 80130cc:	f001 fb8a 	bl	80147e4 <vPortFree>
 80130d0:	e001      	b.n	80130d6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80130d2:	2300      	movs	r3, #0
 80130d4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80130d6:	69fb      	ldr	r3, [r7, #28]
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d017      	beq.n	801310c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80130dc:	69fb      	ldr	r3, [r7, #28]
 80130de:	2200      	movs	r2, #0
 80130e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80130e4:	88fa      	ldrh	r2, [r7, #6]
 80130e6:	2300      	movs	r3, #0
 80130e8:	9303      	str	r3, [sp, #12]
 80130ea:	69fb      	ldr	r3, [r7, #28]
 80130ec:	9302      	str	r3, [sp, #8]
 80130ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130f0:	9301      	str	r3, [sp, #4]
 80130f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130f4:	9300      	str	r3, [sp, #0]
 80130f6:	683b      	ldr	r3, [r7, #0]
 80130f8:	68b9      	ldr	r1, [r7, #8]
 80130fa:	68f8      	ldr	r0, [r7, #12]
 80130fc:	f000 f80e 	bl	801311c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013100:	69f8      	ldr	r0, [r7, #28]
 8013102:	f000 f89d 	bl	8013240 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8013106:	2301      	movs	r3, #1
 8013108:	61bb      	str	r3, [r7, #24]
 801310a:	e002      	b.n	8013112 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801310c:	f04f 33ff 	mov.w	r3, #4294967295
 8013110:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8013112:	69bb      	ldr	r3, [r7, #24]
	}
 8013114:	4618      	mov	r0, r3
 8013116:	3720      	adds	r7, #32
 8013118:	46bd      	mov	sp, r7
 801311a:	bd80      	pop	{r7, pc}

0801311c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801311c:	b580      	push	{r7, lr}
 801311e:	b088      	sub	sp, #32
 8013120:	af00      	add	r7, sp, #0
 8013122:	60f8      	str	r0, [r7, #12]
 8013124:	60b9      	str	r1, [r7, #8]
 8013126:	607a      	str	r2, [r7, #4]
 8013128:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801312a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801312c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	009b      	lsls	r3, r3, #2
 8013132:	461a      	mov	r2, r3
 8013134:	21a5      	movs	r1, #165	; 0xa5
 8013136:	f001 fca7 	bl	8014a88 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801313a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801313c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801313e:	6879      	ldr	r1, [r7, #4]
 8013140:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8013144:	440b      	add	r3, r1
 8013146:	009b      	lsls	r3, r3, #2
 8013148:	4413      	add	r3, r2
 801314a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801314c:	69bb      	ldr	r3, [r7, #24]
 801314e:	f023 0307 	bic.w	r3, r3, #7
 8013152:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8013154:	69bb      	ldr	r3, [r7, #24]
 8013156:	f003 0307 	and.w	r3, r3, #7
 801315a:	2b00      	cmp	r3, #0
 801315c:	d00c      	beq.n	8013178 <prvInitialiseNewTask+0x5c>
	__asm volatile
 801315e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013162:	b672      	cpsid	i
 8013164:	f383 8811 	msr	BASEPRI, r3
 8013168:	f3bf 8f6f 	isb	sy
 801316c:	f3bf 8f4f 	dsb	sy
 8013170:	b662      	cpsie	i
 8013172:	617b      	str	r3, [r7, #20]
}
 8013174:	bf00      	nop
 8013176:	e7fe      	b.n	8013176 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8013178:	68bb      	ldr	r3, [r7, #8]
 801317a:	2b00      	cmp	r3, #0
 801317c:	d01f      	beq.n	80131be <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801317e:	2300      	movs	r3, #0
 8013180:	61fb      	str	r3, [r7, #28]
 8013182:	e012      	b.n	80131aa <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013184:	68ba      	ldr	r2, [r7, #8]
 8013186:	69fb      	ldr	r3, [r7, #28]
 8013188:	4413      	add	r3, r2
 801318a:	7819      	ldrb	r1, [r3, #0]
 801318c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801318e:	69fb      	ldr	r3, [r7, #28]
 8013190:	4413      	add	r3, r2
 8013192:	3334      	adds	r3, #52	; 0x34
 8013194:	460a      	mov	r2, r1
 8013196:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8013198:	68ba      	ldr	r2, [r7, #8]
 801319a:	69fb      	ldr	r3, [r7, #28]
 801319c:	4413      	add	r3, r2
 801319e:	781b      	ldrb	r3, [r3, #0]
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	d006      	beq.n	80131b2 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80131a4:	69fb      	ldr	r3, [r7, #28]
 80131a6:	3301      	adds	r3, #1
 80131a8:	61fb      	str	r3, [r7, #28]
 80131aa:	69fb      	ldr	r3, [r7, #28]
 80131ac:	2b0f      	cmp	r3, #15
 80131ae:	d9e9      	bls.n	8013184 <prvInitialiseNewTask+0x68>
 80131b0:	e000      	b.n	80131b4 <prvInitialiseNewTask+0x98>
			{
				break;
 80131b2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80131b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131b6:	2200      	movs	r2, #0
 80131b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80131bc:	e003      	b.n	80131c6 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80131be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131c0:	2200      	movs	r2, #0
 80131c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80131c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131c8:	2b06      	cmp	r3, #6
 80131ca:	d901      	bls.n	80131d0 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80131cc:	2306      	movs	r3, #6
 80131ce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80131d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80131d4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80131d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80131da:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80131dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131de:	2200      	movs	r2, #0
 80131e0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80131e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131e4:	3304      	adds	r3, #4
 80131e6:	4618      	mov	r0, r3
 80131e8:	f7fe feda 	bl	8011fa0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80131ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131ee:	3318      	adds	r3, #24
 80131f0:	4618      	mov	r0, r3
 80131f2:	f7fe fed5 	bl	8011fa0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80131f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80131fa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80131fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131fe:	f1c3 0207 	rsb	r2, r3, #7
 8013202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013204:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013208:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801320a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801320c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801320e:	2200      	movs	r2, #0
 8013210:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013214:	2200      	movs	r2, #0
 8013216:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801321a:	683a      	ldr	r2, [r7, #0]
 801321c:	68f9      	ldr	r1, [r7, #12]
 801321e:	69b8      	ldr	r0, [r7, #24]
 8013220:	f000 ffda 	bl	80141d8 <pxPortInitialiseStack>
 8013224:	4602      	mov	r2, r0
 8013226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013228:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801322a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801322c:	2b00      	cmp	r3, #0
 801322e:	d002      	beq.n	8013236 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013232:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013234:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013236:	bf00      	nop
 8013238:	3720      	adds	r7, #32
 801323a:	46bd      	mov	sp, r7
 801323c:	bd80      	pop	{r7, pc}
	...

08013240 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8013240:	b580      	push	{r7, lr}
 8013242:	b082      	sub	sp, #8
 8013244:	af00      	add	r7, sp, #0
 8013246:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013248:	f001 f8d0 	bl	80143ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801324c:	4b2a      	ldr	r3, [pc, #168]	; (80132f8 <prvAddNewTaskToReadyList+0xb8>)
 801324e:	681b      	ldr	r3, [r3, #0]
 8013250:	3301      	adds	r3, #1
 8013252:	4a29      	ldr	r2, [pc, #164]	; (80132f8 <prvAddNewTaskToReadyList+0xb8>)
 8013254:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8013256:	4b29      	ldr	r3, [pc, #164]	; (80132fc <prvAddNewTaskToReadyList+0xbc>)
 8013258:	681b      	ldr	r3, [r3, #0]
 801325a:	2b00      	cmp	r3, #0
 801325c:	d109      	bne.n	8013272 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801325e:	4a27      	ldr	r2, [pc, #156]	; (80132fc <prvAddNewTaskToReadyList+0xbc>)
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013264:	4b24      	ldr	r3, [pc, #144]	; (80132f8 <prvAddNewTaskToReadyList+0xb8>)
 8013266:	681b      	ldr	r3, [r3, #0]
 8013268:	2b01      	cmp	r3, #1
 801326a:	d110      	bne.n	801328e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801326c:	f000 fcb4 	bl	8013bd8 <prvInitialiseTaskLists>
 8013270:	e00d      	b.n	801328e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8013272:	4b23      	ldr	r3, [pc, #140]	; (8013300 <prvAddNewTaskToReadyList+0xc0>)
 8013274:	681b      	ldr	r3, [r3, #0]
 8013276:	2b00      	cmp	r3, #0
 8013278:	d109      	bne.n	801328e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801327a:	4b20      	ldr	r3, [pc, #128]	; (80132fc <prvAddNewTaskToReadyList+0xbc>)
 801327c:	681b      	ldr	r3, [r3, #0]
 801327e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013284:	429a      	cmp	r2, r3
 8013286:	d802      	bhi.n	801328e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8013288:	4a1c      	ldr	r2, [pc, #112]	; (80132fc <prvAddNewTaskToReadyList+0xbc>)
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801328e:	4b1d      	ldr	r3, [pc, #116]	; (8013304 <prvAddNewTaskToReadyList+0xc4>)
 8013290:	681b      	ldr	r3, [r3, #0]
 8013292:	3301      	adds	r3, #1
 8013294:	4a1b      	ldr	r2, [pc, #108]	; (8013304 <prvAddNewTaskToReadyList+0xc4>)
 8013296:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801329c:	2201      	movs	r2, #1
 801329e:	409a      	lsls	r2, r3
 80132a0:	4b19      	ldr	r3, [pc, #100]	; (8013308 <prvAddNewTaskToReadyList+0xc8>)
 80132a2:	681b      	ldr	r3, [r3, #0]
 80132a4:	4313      	orrs	r3, r2
 80132a6:	4a18      	ldr	r2, [pc, #96]	; (8013308 <prvAddNewTaskToReadyList+0xc8>)
 80132a8:	6013      	str	r3, [r2, #0]
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80132ae:	4613      	mov	r3, r2
 80132b0:	009b      	lsls	r3, r3, #2
 80132b2:	4413      	add	r3, r2
 80132b4:	009b      	lsls	r3, r3, #2
 80132b6:	4a15      	ldr	r2, [pc, #84]	; (801330c <prvAddNewTaskToReadyList+0xcc>)
 80132b8:	441a      	add	r2, r3
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	3304      	adds	r3, #4
 80132be:	4619      	mov	r1, r3
 80132c0:	4610      	mov	r0, r2
 80132c2:	f7fe fe7a 	bl	8011fba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80132c6:	f001 f8c5 	bl	8014454 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80132ca:	4b0d      	ldr	r3, [pc, #52]	; (8013300 <prvAddNewTaskToReadyList+0xc0>)
 80132cc:	681b      	ldr	r3, [r3, #0]
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d00e      	beq.n	80132f0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80132d2:	4b0a      	ldr	r3, [pc, #40]	; (80132fc <prvAddNewTaskToReadyList+0xbc>)
 80132d4:	681b      	ldr	r3, [r3, #0]
 80132d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80132dc:	429a      	cmp	r2, r3
 80132de:	d207      	bcs.n	80132f0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80132e0:	4b0b      	ldr	r3, [pc, #44]	; (8013310 <prvAddNewTaskToReadyList+0xd0>)
 80132e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80132e6:	601a      	str	r2, [r3, #0]
 80132e8:	f3bf 8f4f 	dsb	sy
 80132ec:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80132f0:	bf00      	nop
 80132f2:	3708      	adds	r7, #8
 80132f4:	46bd      	mov	sp, r7
 80132f6:	bd80      	pop	{r7, pc}
 80132f8:	200014a8 	.word	0x200014a8
 80132fc:	200013a8 	.word	0x200013a8
 8013300:	200014b4 	.word	0x200014b4
 8013304:	200014c4 	.word	0x200014c4
 8013308:	200014b0 	.word	0x200014b0
 801330c:	200013ac 	.word	0x200013ac
 8013310:	e000ed04 	.word	0xe000ed04

08013314 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8013314:	b580      	push	{r7, lr}
 8013316:	b084      	sub	sp, #16
 8013318:	af00      	add	r7, sp, #0
 801331a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 801331c:	f001 f866 	bl	80143ec <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	2b00      	cmp	r3, #0
 8013324:	d102      	bne.n	801332c <vTaskDelete+0x18>
 8013326:	4b3a      	ldr	r3, [pc, #232]	; (8013410 <vTaskDelete+0xfc>)
 8013328:	681b      	ldr	r3, [r3, #0]
 801332a:	e000      	b.n	801332e <vTaskDelete+0x1a>
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013330:	68fb      	ldr	r3, [r7, #12]
 8013332:	3304      	adds	r3, #4
 8013334:	4618      	mov	r0, r3
 8013336:	f7fe fe9d 	bl	8012074 <uxListRemove>
 801333a:	4603      	mov	r3, r0
 801333c:	2b00      	cmp	r3, #0
 801333e:	d115      	bne.n	801336c <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8013340:	68fb      	ldr	r3, [r7, #12]
 8013342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013344:	4933      	ldr	r1, [pc, #204]	; (8013414 <vTaskDelete+0x100>)
 8013346:	4613      	mov	r3, r2
 8013348:	009b      	lsls	r3, r3, #2
 801334a:	4413      	add	r3, r2
 801334c:	009b      	lsls	r3, r3, #2
 801334e:	440b      	add	r3, r1
 8013350:	681b      	ldr	r3, [r3, #0]
 8013352:	2b00      	cmp	r3, #0
 8013354:	d10a      	bne.n	801336c <vTaskDelete+0x58>
 8013356:	68fb      	ldr	r3, [r7, #12]
 8013358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801335a:	2201      	movs	r2, #1
 801335c:	fa02 f303 	lsl.w	r3, r2, r3
 8013360:	43da      	mvns	r2, r3
 8013362:	4b2d      	ldr	r3, [pc, #180]	; (8013418 <vTaskDelete+0x104>)
 8013364:	681b      	ldr	r3, [r3, #0]
 8013366:	4013      	ands	r3, r2
 8013368:	4a2b      	ldr	r2, [pc, #172]	; (8013418 <vTaskDelete+0x104>)
 801336a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801336c:	68fb      	ldr	r3, [r7, #12]
 801336e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013370:	2b00      	cmp	r3, #0
 8013372:	d004      	beq.n	801337e <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013374:	68fb      	ldr	r3, [r7, #12]
 8013376:	3318      	adds	r3, #24
 8013378:	4618      	mov	r0, r3
 801337a:	f7fe fe7b 	bl	8012074 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 801337e:	4b27      	ldr	r3, [pc, #156]	; (801341c <vTaskDelete+0x108>)
 8013380:	681b      	ldr	r3, [r3, #0]
 8013382:	3301      	adds	r3, #1
 8013384:	4a25      	ldr	r2, [pc, #148]	; (801341c <vTaskDelete+0x108>)
 8013386:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8013388:	4b21      	ldr	r3, [pc, #132]	; (8013410 <vTaskDelete+0xfc>)
 801338a:	681b      	ldr	r3, [r3, #0]
 801338c:	68fa      	ldr	r2, [r7, #12]
 801338e:	429a      	cmp	r2, r3
 8013390:	d10b      	bne.n	80133aa <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8013392:	68fb      	ldr	r3, [r7, #12]
 8013394:	3304      	adds	r3, #4
 8013396:	4619      	mov	r1, r3
 8013398:	4821      	ldr	r0, [pc, #132]	; (8013420 <vTaskDelete+0x10c>)
 801339a:	f7fe fe0e 	bl	8011fba <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 801339e:	4b21      	ldr	r3, [pc, #132]	; (8013424 <vTaskDelete+0x110>)
 80133a0:	681b      	ldr	r3, [r3, #0]
 80133a2:	3301      	adds	r3, #1
 80133a4:	4a1f      	ldr	r2, [pc, #124]	; (8013424 <vTaskDelete+0x110>)
 80133a6:	6013      	str	r3, [r2, #0]
 80133a8:	e009      	b.n	80133be <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80133aa:	4b1f      	ldr	r3, [pc, #124]	; (8013428 <vTaskDelete+0x114>)
 80133ac:	681b      	ldr	r3, [r3, #0]
 80133ae:	3b01      	subs	r3, #1
 80133b0:	4a1d      	ldr	r2, [pc, #116]	; (8013428 <vTaskDelete+0x114>)
 80133b2:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 80133b4:	68f8      	ldr	r0, [r7, #12]
 80133b6:	f000 fc7d 	bl	8013cb4 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80133ba:	f000 fcad 	bl	8013d18 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 80133be:	f001 f849 	bl	8014454 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80133c2:	4b1a      	ldr	r3, [pc, #104]	; (801342c <vTaskDelete+0x118>)
 80133c4:	681b      	ldr	r3, [r3, #0]
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d01d      	beq.n	8013406 <vTaskDelete+0xf2>
		{
			if( pxTCB == pxCurrentTCB )
 80133ca:	4b11      	ldr	r3, [pc, #68]	; (8013410 <vTaskDelete+0xfc>)
 80133cc:	681b      	ldr	r3, [r3, #0]
 80133ce:	68fa      	ldr	r2, [r7, #12]
 80133d0:	429a      	cmp	r2, r3
 80133d2:	d118      	bne.n	8013406 <vTaskDelete+0xf2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80133d4:	4b16      	ldr	r3, [pc, #88]	; (8013430 <vTaskDelete+0x11c>)
 80133d6:	681b      	ldr	r3, [r3, #0]
 80133d8:	2b00      	cmp	r3, #0
 80133da:	d00c      	beq.n	80133f6 <vTaskDelete+0xe2>
	__asm volatile
 80133dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133e0:	b672      	cpsid	i
 80133e2:	f383 8811 	msr	BASEPRI, r3
 80133e6:	f3bf 8f6f 	isb	sy
 80133ea:	f3bf 8f4f 	dsb	sy
 80133ee:	b662      	cpsie	i
 80133f0:	60bb      	str	r3, [r7, #8]
}
 80133f2:	bf00      	nop
 80133f4:	e7fe      	b.n	80133f4 <vTaskDelete+0xe0>
				portYIELD_WITHIN_API();
 80133f6:	4b0f      	ldr	r3, [pc, #60]	; (8013434 <vTaskDelete+0x120>)
 80133f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80133fc:	601a      	str	r2, [r3, #0]
 80133fe:	f3bf 8f4f 	dsb	sy
 8013402:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8013406:	bf00      	nop
 8013408:	3710      	adds	r7, #16
 801340a:	46bd      	mov	sp, r7
 801340c:	bd80      	pop	{r7, pc}
 801340e:	bf00      	nop
 8013410:	200013a8 	.word	0x200013a8
 8013414:	200013ac 	.word	0x200013ac
 8013418:	200014b0 	.word	0x200014b0
 801341c:	200014c4 	.word	0x200014c4
 8013420:	2000147c 	.word	0x2000147c
 8013424:	20001490 	.word	0x20001490
 8013428:	200014a8 	.word	0x200014a8
 801342c:	200014b4 	.word	0x200014b4
 8013430:	200014d0 	.word	0x200014d0
 8013434:	e000ed04 	.word	0xe000ed04

08013438 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8013438:	b580      	push	{r7, lr}
 801343a:	b084      	sub	sp, #16
 801343c:	af00      	add	r7, sp, #0
 801343e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8013440:	2300      	movs	r3, #0
 8013442:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	2b00      	cmp	r3, #0
 8013448:	d019      	beq.n	801347e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801344a:	4b14      	ldr	r3, [pc, #80]	; (801349c <vTaskDelay+0x64>)
 801344c:	681b      	ldr	r3, [r3, #0]
 801344e:	2b00      	cmp	r3, #0
 8013450:	d00c      	beq.n	801346c <vTaskDelay+0x34>
	__asm volatile
 8013452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013456:	b672      	cpsid	i
 8013458:	f383 8811 	msr	BASEPRI, r3
 801345c:	f3bf 8f6f 	isb	sy
 8013460:	f3bf 8f4f 	dsb	sy
 8013464:	b662      	cpsie	i
 8013466:	60bb      	str	r3, [r7, #8]
}
 8013468:	bf00      	nop
 801346a:	e7fe      	b.n	801346a <vTaskDelay+0x32>
			vTaskSuspendAll();
 801346c:	f000 f87e 	bl	801356c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8013470:	2100      	movs	r1, #0
 8013472:	6878      	ldr	r0, [r7, #4]
 8013474:	f000 fe4a 	bl	801410c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8013478:	f000 f886 	bl	8013588 <xTaskResumeAll>
 801347c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801347e:	68fb      	ldr	r3, [r7, #12]
 8013480:	2b00      	cmp	r3, #0
 8013482:	d107      	bne.n	8013494 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8013484:	4b06      	ldr	r3, [pc, #24]	; (80134a0 <vTaskDelay+0x68>)
 8013486:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801348a:	601a      	str	r2, [r3, #0]
 801348c:	f3bf 8f4f 	dsb	sy
 8013490:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013494:	bf00      	nop
 8013496:	3710      	adds	r7, #16
 8013498:	46bd      	mov	sp, r7
 801349a:	bd80      	pop	{r7, pc}
 801349c:	200014d0 	.word	0x200014d0
 80134a0:	e000ed04 	.word	0xe000ed04

080134a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80134a4:	b580      	push	{r7, lr}
 80134a6:	b08a      	sub	sp, #40	; 0x28
 80134a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80134aa:	2300      	movs	r3, #0
 80134ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80134ae:	2300      	movs	r3, #0
 80134b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80134b2:	463a      	mov	r2, r7
 80134b4:	1d39      	adds	r1, r7, #4
 80134b6:	f107 0308 	add.w	r3, r7, #8
 80134ba:	4618      	mov	r0, r3
 80134bc:	f7ed f894 	bl	80005e8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80134c0:	6839      	ldr	r1, [r7, #0]
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	68ba      	ldr	r2, [r7, #8]
 80134c6:	9202      	str	r2, [sp, #8]
 80134c8:	9301      	str	r3, [sp, #4]
 80134ca:	2300      	movs	r3, #0
 80134cc:	9300      	str	r3, [sp, #0]
 80134ce:	2300      	movs	r3, #0
 80134d0:	460a      	mov	r2, r1
 80134d2:	4920      	ldr	r1, [pc, #128]	; (8013554 <vTaskStartScheduler+0xb0>)
 80134d4:	4820      	ldr	r0, [pc, #128]	; (8013558 <vTaskStartScheduler+0xb4>)
 80134d6:	f7ff fd79 	bl	8012fcc <xTaskCreateStatic>
 80134da:	4603      	mov	r3, r0
 80134dc:	4a1f      	ldr	r2, [pc, #124]	; (801355c <vTaskStartScheduler+0xb8>)
 80134de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80134e0:	4b1e      	ldr	r3, [pc, #120]	; (801355c <vTaskStartScheduler+0xb8>)
 80134e2:	681b      	ldr	r3, [r3, #0]
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	d002      	beq.n	80134ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80134e8:	2301      	movs	r3, #1
 80134ea:	617b      	str	r3, [r7, #20]
 80134ec:	e001      	b.n	80134f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80134ee:	2300      	movs	r3, #0
 80134f0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80134f2:	697b      	ldr	r3, [r7, #20]
 80134f4:	2b01      	cmp	r3, #1
 80134f6:	d118      	bne.n	801352a <vTaskStartScheduler+0x86>
	__asm volatile
 80134f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134fc:	b672      	cpsid	i
 80134fe:	f383 8811 	msr	BASEPRI, r3
 8013502:	f3bf 8f6f 	isb	sy
 8013506:	f3bf 8f4f 	dsb	sy
 801350a:	b662      	cpsie	i
 801350c:	613b      	str	r3, [r7, #16]
}
 801350e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013510:	4b13      	ldr	r3, [pc, #76]	; (8013560 <vTaskStartScheduler+0xbc>)
 8013512:	f04f 32ff 	mov.w	r2, #4294967295
 8013516:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8013518:	4b12      	ldr	r3, [pc, #72]	; (8013564 <vTaskStartScheduler+0xc0>)
 801351a:	2201      	movs	r2, #1
 801351c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801351e:	4b12      	ldr	r3, [pc, #72]	; (8013568 <vTaskStartScheduler+0xc4>)
 8013520:	2200      	movs	r2, #0
 8013522:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013524:	f000 fee4 	bl	80142f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013528:	e010      	b.n	801354c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801352a:	697b      	ldr	r3, [r7, #20]
 801352c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013530:	d10c      	bne.n	801354c <vTaskStartScheduler+0xa8>
	__asm volatile
 8013532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013536:	b672      	cpsid	i
 8013538:	f383 8811 	msr	BASEPRI, r3
 801353c:	f3bf 8f6f 	isb	sy
 8013540:	f3bf 8f4f 	dsb	sy
 8013544:	b662      	cpsie	i
 8013546:	60fb      	str	r3, [r7, #12]
}
 8013548:	bf00      	nop
 801354a:	e7fe      	b.n	801354a <vTaskStartScheduler+0xa6>
}
 801354c:	bf00      	nop
 801354e:	3718      	adds	r7, #24
 8013550:	46bd      	mov	sp, r7
 8013552:	bd80      	pop	{r7, pc}
 8013554:	080154cc 	.word	0x080154cc
 8013558:	08013ba5 	.word	0x08013ba5
 801355c:	200014cc 	.word	0x200014cc
 8013560:	200014c8 	.word	0x200014c8
 8013564:	200014b4 	.word	0x200014b4
 8013568:	200014ac 	.word	0x200014ac

0801356c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801356c:	b480      	push	{r7}
 801356e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8013570:	4b04      	ldr	r3, [pc, #16]	; (8013584 <vTaskSuspendAll+0x18>)
 8013572:	681b      	ldr	r3, [r3, #0]
 8013574:	3301      	adds	r3, #1
 8013576:	4a03      	ldr	r2, [pc, #12]	; (8013584 <vTaskSuspendAll+0x18>)
 8013578:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 801357a:	bf00      	nop
 801357c:	46bd      	mov	sp, r7
 801357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013582:	4770      	bx	lr
 8013584:	200014d0 	.word	0x200014d0

08013588 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013588:	b580      	push	{r7, lr}
 801358a:	b084      	sub	sp, #16
 801358c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801358e:	2300      	movs	r3, #0
 8013590:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013592:	2300      	movs	r3, #0
 8013594:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8013596:	4b42      	ldr	r3, [pc, #264]	; (80136a0 <xTaskResumeAll+0x118>)
 8013598:	681b      	ldr	r3, [r3, #0]
 801359a:	2b00      	cmp	r3, #0
 801359c:	d10c      	bne.n	80135b8 <xTaskResumeAll+0x30>
	__asm volatile
 801359e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135a2:	b672      	cpsid	i
 80135a4:	f383 8811 	msr	BASEPRI, r3
 80135a8:	f3bf 8f6f 	isb	sy
 80135ac:	f3bf 8f4f 	dsb	sy
 80135b0:	b662      	cpsie	i
 80135b2:	603b      	str	r3, [r7, #0]
}
 80135b4:	bf00      	nop
 80135b6:	e7fe      	b.n	80135b6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80135b8:	f000 ff18 	bl	80143ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80135bc:	4b38      	ldr	r3, [pc, #224]	; (80136a0 <xTaskResumeAll+0x118>)
 80135be:	681b      	ldr	r3, [r3, #0]
 80135c0:	3b01      	subs	r3, #1
 80135c2:	4a37      	ldr	r2, [pc, #220]	; (80136a0 <xTaskResumeAll+0x118>)
 80135c4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80135c6:	4b36      	ldr	r3, [pc, #216]	; (80136a0 <xTaskResumeAll+0x118>)
 80135c8:	681b      	ldr	r3, [r3, #0]
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d161      	bne.n	8013692 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80135ce:	4b35      	ldr	r3, [pc, #212]	; (80136a4 <xTaskResumeAll+0x11c>)
 80135d0:	681b      	ldr	r3, [r3, #0]
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	d05d      	beq.n	8013692 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80135d6:	e02e      	b.n	8013636 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80135d8:	4b33      	ldr	r3, [pc, #204]	; (80136a8 <xTaskResumeAll+0x120>)
 80135da:	68db      	ldr	r3, [r3, #12]
 80135dc:	68db      	ldr	r3, [r3, #12]
 80135de:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80135e0:	68fb      	ldr	r3, [r7, #12]
 80135e2:	3318      	adds	r3, #24
 80135e4:	4618      	mov	r0, r3
 80135e6:	f7fe fd45 	bl	8012074 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80135ea:	68fb      	ldr	r3, [r7, #12]
 80135ec:	3304      	adds	r3, #4
 80135ee:	4618      	mov	r0, r3
 80135f0:	f7fe fd40 	bl	8012074 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80135f4:	68fb      	ldr	r3, [r7, #12]
 80135f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135f8:	2201      	movs	r2, #1
 80135fa:	409a      	lsls	r2, r3
 80135fc:	4b2b      	ldr	r3, [pc, #172]	; (80136ac <xTaskResumeAll+0x124>)
 80135fe:	681b      	ldr	r3, [r3, #0]
 8013600:	4313      	orrs	r3, r2
 8013602:	4a2a      	ldr	r2, [pc, #168]	; (80136ac <xTaskResumeAll+0x124>)
 8013604:	6013      	str	r3, [r2, #0]
 8013606:	68fb      	ldr	r3, [r7, #12]
 8013608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801360a:	4613      	mov	r3, r2
 801360c:	009b      	lsls	r3, r3, #2
 801360e:	4413      	add	r3, r2
 8013610:	009b      	lsls	r3, r3, #2
 8013612:	4a27      	ldr	r2, [pc, #156]	; (80136b0 <xTaskResumeAll+0x128>)
 8013614:	441a      	add	r2, r3
 8013616:	68fb      	ldr	r3, [r7, #12]
 8013618:	3304      	adds	r3, #4
 801361a:	4619      	mov	r1, r3
 801361c:	4610      	mov	r0, r2
 801361e:	f7fe fccc 	bl	8011fba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013622:	68fb      	ldr	r3, [r7, #12]
 8013624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013626:	4b23      	ldr	r3, [pc, #140]	; (80136b4 <xTaskResumeAll+0x12c>)
 8013628:	681b      	ldr	r3, [r3, #0]
 801362a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801362c:	429a      	cmp	r2, r3
 801362e:	d302      	bcc.n	8013636 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8013630:	4b21      	ldr	r3, [pc, #132]	; (80136b8 <xTaskResumeAll+0x130>)
 8013632:	2201      	movs	r2, #1
 8013634:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013636:	4b1c      	ldr	r3, [pc, #112]	; (80136a8 <xTaskResumeAll+0x120>)
 8013638:	681b      	ldr	r3, [r3, #0]
 801363a:	2b00      	cmp	r3, #0
 801363c:	d1cc      	bne.n	80135d8 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801363e:	68fb      	ldr	r3, [r7, #12]
 8013640:	2b00      	cmp	r3, #0
 8013642:	d001      	beq.n	8013648 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013644:	f000 fb68 	bl	8013d18 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8013648:	4b1c      	ldr	r3, [pc, #112]	; (80136bc <xTaskResumeAll+0x134>)
 801364a:	681b      	ldr	r3, [r3, #0]
 801364c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	2b00      	cmp	r3, #0
 8013652:	d010      	beq.n	8013676 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013654:	f000 f858 	bl	8013708 <xTaskIncrementTick>
 8013658:	4603      	mov	r3, r0
 801365a:	2b00      	cmp	r3, #0
 801365c:	d002      	beq.n	8013664 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 801365e:	4b16      	ldr	r3, [pc, #88]	; (80136b8 <xTaskResumeAll+0x130>)
 8013660:	2201      	movs	r2, #1
 8013662:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	3b01      	subs	r3, #1
 8013668:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	2b00      	cmp	r3, #0
 801366e:	d1f1      	bne.n	8013654 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8013670:	4b12      	ldr	r3, [pc, #72]	; (80136bc <xTaskResumeAll+0x134>)
 8013672:	2200      	movs	r2, #0
 8013674:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013676:	4b10      	ldr	r3, [pc, #64]	; (80136b8 <xTaskResumeAll+0x130>)
 8013678:	681b      	ldr	r3, [r3, #0]
 801367a:	2b00      	cmp	r3, #0
 801367c:	d009      	beq.n	8013692 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801367e:	2301      	movs	r3, #1
 8013680:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013682:	4b0f      	ldr	r3, [pc, #60]	; (80136c0 <xTaskResumeAll+0x138>)
 8013684:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013688:	601a      	str	r2, [r3, #0]
 801368a:	f3bf 8f4f 	dsb	sy
 801368e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013692:	f000 fedf 	bl	8014454 <vPortExitCritical>

	return xAlreadyYielded;
 8013696:	68bb      	ldr	r3, [r7, #8]
}
 8013698:	4618      	mov	r0, r3
 801369a:	3710      	adds	r7, #16
 801369c:	46bd      	mov	sp, r7
 801369e:	bd80      	pop	{r7, pc}
 80136a0:	200014d0 	.word	0x200014d0
 80136a4:	200014a8 	.word	0x200014a8
 80136a8:	20001468 	.word	0x20001468
 80136ac:	200014b0 	.word	0x200014b0
 80136b0:	200013ac 	.word	0x200013ac
 80136b4:	200013a8 	.word	0x200013a8
 80136b8:	200014bc 	.word	0x200014bc
 80136bc:	200014b8 	.word	0x200014b8
 80136c0:	e000ed04 	.word	0xe000ed04

080136c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80136c4:	b480      	push	{r7}
 80136c6:	b083      	sub	sp, #12
 80136c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80136ca:	4b05      	ldr	r3, [pc, #20]	; (80136e0 <xTaskGetTickCount+0x1c>)
 80136cc:	681b      	ldr	r3, [r3, #0]
 80136ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80136d0:	687b      	ldr	r3, [r7, #4]
}
 80136d2:	4618      	mov	r0, r3
 80136d4:	370c      	adds	r7, #12
 80136d6:	46bd      	mov	sp, r7
 80136d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136dc:	4770      	bx	lr
 80136de:	bf00      	nop
 80136e0:	200014ac 	.word	0x200014ac

080136e4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80136e4:	b580      	push	{r7, lr}
 80136e6:	b082      	sub	sp, #8
 80136e8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80136ea:	f000 ff67 	bl	80145bc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80136ee:	2300      	movs	r3, #0
 80136f0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80136f2:	4b04      	ldr	r3, [pc, #16]	; (8013704 <xTaskGetTickCountFromISR+0x20>)
 80136f4:	681b      	ldr	r3, [r3, #0]
 80136f6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80136f8:	683b      	ldr	r3, [r7, #0]
}
 80136fa:	4618      	mov	r0, r3
 80136fc:	3708      	adds	r7, #8
 80136fe:	46bd      	mov	sp, r7
 8013700:	bd80      	pop	{r7, pc}
 8013702:	bf00      	nop
 8013704:	200014ac 	.word	0x200014ac

08013708 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013708:	b580      	push	{r7, lr}
 801370a:	b086      	sub	sp, #24
 801370c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801370e:	2300      	movs	r3, #0
 8013710:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013712:	4b4f      	ldr	r3, [pc, #316]	; (8013850 <xTaskIncrementTick+0x148>)
 8013714:	681b      	ldr	r3, [r3, #0]
 8013716:	2b00      	cmp	r3, #0
 8013718:	f040 808a 	bne.w	8013830 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801371c:	4b4d      	ldr	r3, [pc, #308]	; (8013854 <xTaskIncrementTick+0x14c>)
 801371e:	681b      	ldr	r3, [r3, #0]
 8013720:	3301      	adds	r3, #1
 8013722:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8013724:	4a4b      	ldr	r2, [pc, #300]	; (8013854 <xTaskIncrementTick+0x14c>)
 8013726:	693b      	ldr	r3, [r7, #16]
 8013728:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801372a:	693b      	ldr	r3, [r7, #16]
 801372c:	2b00      	cmp	r3, #0
 801372e:	d122      	bne.n	8013776 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8013730:	4b49      	ldr	r3, [pc, #292]	; (8013858 <xTaskIncrementTick+0x150>)
 8013732:	681b      	ldr	r3, [r3, #0]
 8013734:	681b      	ldr	r3, [r3, #0]
 8013736:	2b00      	cmp	r3, #0
 8013738:	d00c      	beq.n	8013754 <xTaskIncrementTick+0x4c>
	__asm volatile
 801373a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801373e:	b672      	cpsid	i
 8013740:	f383 8811 	msr	BASEPRI, r3
 8013744:	f3bf 8f6f 	isb	sy
 8013748:	f3bf 8f4f 	dsb	sy
 801374c:	b662      	cpsie	i
 801374e:	603b      	str	r3, [r7, #0]
}
 8013750:	bf00      	nop
 8013752:	e7fe      	b.n	8013752 <xTaskIncrementTick+0x4a>
 8013754:	4b40      	ldr	r3, [pc, #256]	; (8013858 <xTaskIncrementTick+0x150>)
 8013756:	681b      	ldr	r3, [r3, #0]
 8013758:	60fb      	str	r3, [r7, #12]
 801375a:	4b40      	ldr	r3, [pc, #256]	; (801385c <xTaskIncrementTick+0x154>)
 801375c:	681b      	ldr	r3, [r3, #0]
 801375e:	4a3e      	ldr	r2, [pc, #248]	; (8013858 <xTaskIncrementTick+0x150>)
 8013760:	6013      	str	r3, [r2, #0]
 8013762:	4a3e      	ldr	r2, [pc, #248]	; (801385c <xTaskIncrementTick+0x154>)
 8013764:	68fb      	ldr	r3, [r7, #12]
 8013766:	6013      	str	r3, [r2, #0]
 8013768:	4b3d      	ldr	r3, [pc, #244]	; (8013860 <xTaskIncrementTick+0x158>)
 801376a:	681b      	ldr	r3, [r3, #0]
 801376c:	3301      	adds	r3, #1
 801376e:	4a3c      	ldr	r2, [pc, #240]	; (8013860 <xTaskIncrementTick+0x158>)
 8013770:	6013      	str	r3, [r2, #0]
 8013772:	f000 fad1 	bl	8013d18 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8013776:	4b3b      	ldr	r3, [pc, #236]	; (8013864 <xTaskIncrementTick+0x15c>)
 8013778:	681b      	ldr	r3, [r3, #0]
 801377a:	693a      	ldr	r2, [r7, #16]
 801377c:	429a      	cmp	r2, r3
 801377e:	d348      	bcc.n	8013812 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013780:	4b35      	ldr	r3, [pc, #212]	; (8013858 <xTaskIncrementTick+0x150>)
 8013782:	681b      	ldr	r3, [r3, #0]
 8013784:	681b      	ldr	r3, [r3, #0]
 8013786:	2b00      	cmp	r3, #0
 8013788:	d104      	bne.n	8013794 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801378a:	4b36      	ldr	r3, [pc, #216]	; (8013864 <xTaskIncrementTick+0x15c>)
 801378c:	f04f 32ff 	mov.w	r2, #4294967295
 8013790:	601a      	str	r2, [r3, #0]
					break;
 8013792:	e03e      	b.n	8013812 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013794:	4b30      	ldr	r3, [pc, #192]	; (8013858 <xTaskIncrementTick+0x150>)
 8013796:	681b      	ldr	r3, [r3, #0]
 8013798:	68db      	ldr	r3, [r3, #12]
 801379a:	68db      	ldr	r3, [r3, #12]
 801379c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801379e:	68bb      	ldr	r3, [r7, #8]
 80137a0:	685b      	ldr	r3, [r3, #4]
 80137a2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80137a4:	693a      	ldr	r2, [r7, #16]
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	429a      	cmp	r2, r3
 80137aa:	d203      	bcs.n	80137b4 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80137ac:	4a2d      	ldr	r2, [pc, #180]	; (8013864 <xTaskIncrementTick+0x15c>)
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80137b2:	e02e      	b.n	8013812 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80137b4:	68bb      	ldr	r3, [r7, #8]
 80137b6:	3304      	adds	r3, #4
 80137b8:	4618      	mov	r0, r3
 80137ba:	f7fe fc5b 	bl	8012074 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80137be:	68bb      	ldr	r3, [r7, #8]
 80137c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d004      	beq.n	80137d0 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80137c6:	68bb      	ldr	r3, [r7, #8]
 80137c8:	3318      	adds	r3, #24
 80137ca:	4618      	mov	r0, r3
 80137cc:	f7fe fc52 	bl	8012074 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80137d0:	68bb      	ldr	r3, [r7, #8]
 80137d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80137d4:	2201      	movs	r2, #1
 80137d6:	409a      	lsls	r2, r3
 80137d8:	4b23      	ldr	r3, [pc, #140]	; (8013868 <xTaskIncrementTick+0x160>)
 80137da:	681b      	ldr	r3, [r3, #0]
 80137dc:	4313      	orrs	r3, r2
 80137de:	4a22      	ldr	r2, [pc, #136]	; (8013868 <xTaskIncrementTick+0x160>)
 80137e0:	6013      	str	r3, [r2, #0]
 80137e2:	68bb      	ldr	r3, [r7, #8]
 80137e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80137e6:	4613      	mov	r3, r2
 80137e8:	009b      	lsls	r3, r3, #2
 80137ea:	4413      	add	r3, r2
 80137ec:	009b      	lsls	r3, r3, #2
 80137ee:	4a1f      	ldr	r2, [pc, #124]	; (801386c <xTaskIncrementTick+0x164>)
 80137f0:	441a      	add	r2, r3
 80137f2:	68bb      	ldr	r3, [r7, #8]
 80137f4:	3304      	adds	r3, #4
 80137f6:	4619      	mov	r1, r3
 80137f8:	4610      	mov	r0, r2
 80137fa:	f7fe fbde 	bl	8011fba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80137fe:	68bb      	ldr	r3, [r7, #8]
 8013800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013802:	4b1b      	ldr	r3, [pc, #108]	; (8013870 <xTaskIncrementTick+0x168>)
 8013804:	681b      	ldr	r3, [r3, #0]
 8013806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013808:	429a      	cmp	r2, r3
 801380a:	d3b9      	bcc.n	8013780 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 801380c:	2301      	movs	r3, #1
 801380e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013810:	e7b6      	b.n	8013780 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013812:	4b17      	ldr	r3, [pc, #92]	; (8013870 <xTaskIncrementTick+0x168>)
 8013814:	681b      	ldr	r3, [r3, #0]
 8013816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013818:	4914      	ldr	r1, [pc, #80]	; (801386c <xTaskIncrementTick+0x164>)
 801381a:	4613      	mov	r3, r2
 801381c:	009b      	lsls	r3, r3, #2
 801381e:	4413      	add	r3, r2
 8013820:	009b      	lsls	r3, r3, #2
 8013822:	440b      	add	r3, r1
 8013824:	681b      	ldr	r3, [r3, #0]
 8013826:	2b01      	cmp	r3, #1
 8013828:	d907      	bls.n	801383a <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 801382a:	2301      	movs	r3, #1
 801382c:	617b      	str	r3, [r7, #20]
 801382e:	e004      	b.n	801383a <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8013830:	4b10      	ldr	r3, [pc, #64]	; (8013874 <xTaskIncrementTick+0x16c>)
 8013832:	681b      	ldr	r3, [r3, #0]
 8013834:	3301      	adds	r3, #1
 8013836:	4a0f      	ldr	r2, [pc, #60]	; (8013874 <xTaskIncrementTick+0x16c>)
 8013838:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 801383a:	4b0f      	ldr	r3, [pc, #60]	; (8013878 <xTaskIncrementTick+0x170>)
 801383c:	681b      	ldr	r3, [r3, #0]
 801383e:	2b00      	cmp	r3, #0
 8013840:	d001      	beq.n	8013846 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8013842:	2301      	movs	r3, #1
 8013844:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8013846:	697b      	ldr	r3, [r7, #20]
}
 8013848:	4618      	mov	r0, r3
 801384a:	3718      	adds	r7, #24
 801384c:	46bd      	mov	sp, r7
 801384e:	bd80      	pop	{r7, pc}
 8013850:	200014d0 	.word	0x200014d0
 8013854:	200014ac 	.word	0x200014ac
 8013858:	20001460 	.word	0x20001460
 801385c:	20001464 	.word	0x20001464
 8013860:	200014c0 	.word	0x200014c0
 8013864:	200014c8 	.word	0x200014c8
 8013868:	200014b0 	.word	0x200014b0
 801386c:	200013ac 	.word	0x200013ac
 8013870:	200013a8 	.word	0x200013a8
 8013874:	200014b8 	.word	0x200014b8
 8013878:	200014bc 	.word	0x200014bc

0801387c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801387c:	b580      	push	{r7, lr}
 801387e:	b088      	sub	sp, #32
 8013880:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013882:	4b3a      	ldr	r3, [pc, #232]	; (801396c <vTaskSwitchContext+0xf0>)
 8013884:	681b      	ldr	r3, [r3, #0]
 8013886:	2b00      	cmp	r3, #0
 8013888:	d003      	beq.n	8013892 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801388a:	4b39      	ldr	r3, [pc, #228]	; (8013970 <vTaskSwitchContext+0xf4>)
 801388c:	2201      	movs	r2, #1
 801388e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013890:	e068      	b.n	8013964 <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 8013892:	4b37      	ldr	r3, [pc, #220]	; (8013970 <vTaskSwitchContext+0xf4>)
 8013894:	2200      	movs	r2, #0
 8013896:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8013898:	4b36      	ldr	r3, [pc, #216]	; (8013974 <vTaskSwitchContext+0xf8>)
 801389a:	681b      	ldr	r3, [r3, #0]
 801389c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801389e:	61fb      	str	r3, [r7, #28]
 80138a0:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 80138a4:	61bb      	str	r3, [r7, #24]
 80138a6:	69fb      	ldr	r3, [r7, #28]
 80138a8:	681b      	ldr	r3, [r3, #0]
 80138aa:	69ba      	ldr	r2, [r7, #24]
 80138ac:	429a      	cmp	r2, r3
 80138ae:	d111      	bne.n	80138d4 <vTaskSwitchContext+0x58>
 80138b0:	69fb      	ldr	r3, [r7, #28]
 80138b2:	3304      	adds	r3, #4
 80138b4:	681b      	ldr	r3, [r3, #0]
 80138b6:	69ba      	ldr	r2, [r7, #24]
 80138b8:	429a      	cmp	r2, r3
 80138ba:	d10b      	bne.n	80138d4 <vTaskSwitchContext+0x58>
 80138bc:	69fb      	ldr	r3, [r7, #28]
 80138be:	3308      	adds	r3, #8
 80138c0:	681b      	ldr	r3, [r3, #0]
 80138c2:	69ba      	ldr	r2, [r7, #24]
 80138c4:	429a      	cmp	r2, r3
 80138c6:	d105      	bne.n	80138d4 <vTaskSwitchContext+0x58>
 80138c8:	69fb      	ldr	r3, [r7, #28]
 80138ca:	330c      	adds	r3, #12
 80138cc:	681b      	ldr	r3, [r3, #0]
 80138ce:	69ba      	ldr	r2, [r7, #24]
 80138d0:	429a      	cmp	r2, r3
 80138d2:	d008      	beq.n	80138e6 <vTaskSwitchContext+0x6a>
 80138d4:	4b27      	ldr	r3, [pc, #156]	; (8013974 <vTaskSwitchContext+0xf8>)
 80138d6:	681a      	ldr	r2, [r3, #0]
 80138d8:	4b26      	ldr	r3, [pc, #152]	; (8013974 <vTaskSwitchContext+0xf8>)
 80138da:	681b      	ldr	r3, [r3, #0]
 80138dc:	3334      	adds	r3, #52	; 0x34
 80138de:	4619      	mov	r1, r3
 80138e0:	4610      	mov	r0, r2
 80138e2:	f7ec fe6e 	bl	80005c2 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80138e6:	4b24      	ldr	r3, [pc, #144]	; (8013978 <vTaskSwitchContext+0xfc>)
 80138e8:	681b      	ldr	r3, [r3, #0]
 80138ea:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80138ec:	68fb      	ldr	r3, [r7, #12]
 80138ee:	fab3 f383 	clz	r3, r3
 80138f2:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80138f4:	7afb      	ldrb	r3, [r7, #11]
 80138f6:	f1c3 031f 	rsb	r3, r3, #31
 80138fa:	617b      	str	r3, [r7, #20]
 80138fc:	491f      	ldr	r1, [pc, #124]	; (801397c <vTaskSwitchContext+0x100>)
 80138fe:	697a      	ldr	r2, [r7, #20]
 8013900:	4613      	mov	r3, r2
 8013902:	009b      	lsls	r3, r3, #2
 8013904:	4413      	add	r3, r2
 8013906:	009b      	lsls	r3, r3, #2
 8013908:	440b      	add	r3, r1
 801390a:	681b      	ldr	r3, [r3, #0]
 801390c:	2b00      	cmp	r3, #0
 801390e:	d10c      	bne.n	801392a <vTaskSwitchContext+0xae>
	__asm volatile
 8013910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013914:	b672      	cpsid	i
 8013916:	f383 8811 	msr	BASEPRI, r3
 801391a:	f3bf 8f6f 	isb	sy
 801391e:	f3bf 8f4f 	dsb	sy
 8013922:	b662      	cpsie	i
 8013924:	607b      	str	r3, [r7, #4]
}
 8013926:	bf00      	nop
 8013928:	e7fe      	b.n	8013928 <vTaskSwitchContext+0xac>
 801392a:	697a      	ldr	r2, [r7, #20]
 801392c:	4613      	mov	r3, r2
 801392e:	009b      	lsls	r3, r3, #2
 8013930:	4413      	add	r3, r2
 8013932:	009b      	lsls	r3, r3, #2
 8013934:	4a11      	ldr	r2, [pc, #68]	; (801397c <vTaskSwitchContext+0x100>)
 8013936:	4413      	add	r3, r2
 8013938:	613b      	str	r3, [r7, #16]
 801393a:	693b      	ldr	r3, [r7, #16]
 801393c:	685b      	ldr	r3, [r3, #4]
 801393e:	685a      	ldr	r2, [r3, #4]
 8013940:	693b      	ldr	r3, [r7, #16]
 8013942:	605a      	str	r2, [r3, #4]
 8013944:	693b      	ldr	r3, [r7, #16]
 8013946:	685a      	ldr	r2, [r3, #4]
 8013948:	693b      	ldr	r3, [r7, #16]
 801394a:	3308      	adds	r3, #8
 801394c:	429a      	cmp	r2, r3
 801394e:	d104      	bne.n	801395a <vTaskSwitchContext+0xde>
 8013950:	693b      	ldr	r3, [r7, #16]
 8013952:	685b      	ldr	r3, [r3, #4]
 8013954:	685a      	ldr	r2, [r3, #4]
 8013956:	693b      	ldr	r3, [r7, #16]
 8013958:	605a      	str	r2, [r3, #4]
 801395a:	693b      	ldr	r3, [r7, #16]
 801395c:	685b      	ldr	r3, [r3, #4]
 801395e:	68db      	ldr	r3, [r3, #12]
 8013960:	4a04      	ldr	r2, [pc, #16]	; (8013974 <vTaskSwitchContext+0xf8>)
 8013962:	6013      	str	r3, [r2, #0]
}
 8013964:	bf00      	nop
 8013966:	3720      	adds	r7, #32
 8013968:	46bd      	mov	sp, r7
 801396a:	bd80      	pop	{r7, pc}
 801396c:	200014d0 	.word	0x200014d0
 8013970:	200014bc 	.word	0x200014bc
 8013974:	200013a8 	.word	0x200013a8
 8013978:	200014b0 	.word	0x200014b0
 801397c:	200013ac 	.word	0x200013ac

08013980 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8013980:	b580      	push	{r7, lr}
 8013982:	b084      	sub	sp, #16
 8013984:	af00      	add	r7, sp, #0
 8013986:	6078      	str	r0, [r7, #4]
 8013988:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	2b00      	cmp	r3, #0
 801398e:	d10c      	bne.n	80139aa <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8013990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013994:	b672      	cpsid	i
 8013996:	f383 8811 	msr	BASEPRI, r3
 801399a:	f3bf 8f6f 	isb	sy
 801399e:	f3bf 8f4f 	dsb	sy
 80139a2:	b662      	cpsie	i
 80139a4:	60fb      	str	r3, [r7, #12]
}
 80139a6:	bf00      	nop
 80139a8:	e7fe      	b.n	80139a8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80139aa:	4b07      	ldr	r3, [pc, #28]	; (80139c8 <vTaskPlaceOnEventList+0x48>)
 80139ac:	681b      	ldr	r3, [r3, #0]
 80139ae:	3318      	adds	r3, #24
 80139b0:	4619      	mov	r1, r3
 80139b2:	6878      	ldr	r0, [r7, #4]
 80139b4:	f7fe fb25 	bl	8012002 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80139b8:	2101      	movs	r1, #1
 80139ba:	6838      	ldr	r0, [r7, #0]
 80139bc:	f000 fba6 	bl	801410c <prvAddCurrentTaskToDelayedList>
}
 80139c0:	bf00      	nop
 80139c2:	3710      	adds	r7, #16
 80139c4:	46bd      	mov	sp, r7
 80139c6:	bd80      	pop	{r7, pc}
 80139c8:	200013a8 	.word	0x200013a8

080139cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80139cc:	b580      	push	{r7, lr}
 80139ce:	b086      	sub	sp, #24
 80139d0:	af00      	add	r7, sp, #0
 80139d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	68db      	ldr	r3, [r3, #12]
 80139d8:	68db      	ldr	r3, [r3, #12]
 80139da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80139dc:	693b      	ldr	r3, [r7, #16]
 80139de:	2b00      	cmp	r3, #0
 80139e0:	d10c      	bne.n	80139fc <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80139e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139e6:	b672      	cpsid	i
 80139e8:	f383 8811 	msr	BASEPRI, r3
 80139ec:	f3bf 8f6f 	isb	sy
 80139f0:	f3bf 8f4f 	dsb	sy
 80139f4:	b662      	cpsie	i
 80139f6:	60fb      	str	r3, [r7, #12]
}
 80139f8:	bf00      	nop
 80139fa:	e7fe      	b.n	80139fa <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80139fc:	693b      	ldr	r3, [r7, #16]
 80139fe:	3318      	adds	r3, #24
 8013a00:	4618      	mov	r0, r3
 8013a02:	f7fe fb37 	bl	8012074 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013a06:	4b1d      	ldr	r3, [pc, #116]	; (8013a7c <xTaskRemoveFromEventList+0xb0>)
 8013a08:	681b      	ldr	r3, [r3, #0]
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	d11c      	bne.n	8013a48 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013a0e:	693b      	ldr	r3, [r7, #16]
 8013a10:	3304      	adds	r3, #4
 8013a12:	4618      	mov	r0, r3
 8013a14:	f7fe fb2e 	bl	8012074 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8013a18:	693b      	ldr	r3, [r7, #16]
 8013a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a1c:	2201      	movs	r2, #1
 8013a1e:	409a      	lsls	r2, r3
 8013a20:	4b17      	ldr	r3, [pc, #92]	; (8013a80 <xTaskRemoveFromEventList+0xb4>)
 8013a22:	681b      	ldr	r3, [r3, #0]
 8013a24:	4313      	orrs	r3, r2
 8013a26:	4a16      	ldr	r2, [pc, #88]	; (8013a80 <xTaskRemoveFromEventList+0xb4>)
 8013a28:	6013      	str	r3, [r2, #0]
 8013a2a:	693b      	ldr	r3, [r7, #16]
 8013a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a2e:	4613      	mov	r3, r2
 8013a30:	009b      	lsls	r3, r3, #2
 8013a32:	4413      	add	r3, r2
 8013a34:	009b      	lsls	r3, r3, #2
 8013a36:	4a13      	ldr	r2, [pc, #76]	; (8013a84 <xTaskRemoveFromEventList+0xb8>)
 8013a38:	441a      	add	r2, r3
 8013a3a:	693b      	ldr	r3, [r7, #16]
 8013a3c:	3304      	adds	r3, #4
 8013a3e:	4619      	mov	r1, r3
 8013a40:	4610      	mov	r0, r2
 8013a42:	f7fe faba 	bl	8011fba <vListInsertEnd>
 8013a46:	e005      	b.n	8013a54 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8013a48:	693b      	ldr	r3, [r7, #16]
 8013a4a:	3318      	adds	r3, #24
 8013a4c:	4619      	mov	r1, r3
 8013a4e:	480e      	ldr	r0, [pc, #56]	; (8013a88 <xTaskRemoveFromEventList+0xbc>)
 8013a50:	f7fe fab3 	bl	8011fba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013a54:	693b      	ldr	r3, [r7, #16]
 8013a56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a58:	4b0c      	ldr	r3, [pc, #48]	; (8013a8c <xTaskRemoveFromEventList+0xc0>)
 8013a5a:	681b      	ldr	r3, [r3, #0]
 8013a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a5e:	429a      	cmp	r2, r3
 8013a60:	d905      	bls.n	8013a6e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8013a62:	2301      	movs	r3, #1
 8013a64:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8013a66:	4b0a      	ldr	r3, [pc, #40]	; (8013a90 <xTaskRemoveFromEventList+0xc4>)
 8013a68:	2201      	movs	r2, #1
 8013a6a:	601a      	str	r2, [r3, #0]
 8013a6c:	e001      	b.n	8013a72 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8013a6e:	2300      	movs	r3, #0
 8013a70:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8013a72:	697b      	ldr	r3, [r7, #20]
}
 8013a74:	4618      	mov	r0, r3
 8013a76:	3718      	adds	r7, #24
 8013a78:	46bd      	mov	sp, r7
 8013a7a:	bd80      	pop	{r7, pc}
 8013a7c:	200014d0 	.word	0x200014d0
 8013a80:	200014b0 	.word	0x200014b0
 8013a84:	200013ac 	.word	0x200013ac
 8013a88:	20001468 	.word	0x20001468
 8013a8c:	200013a8 	.word	0x200013a8
 8013a90:	200014bc 	.word	0x200014bc

08013a94 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8013a94:	b480      	push	{r7}
 8013a96:	b083      	sub	sp, #12
 8013a98:	af00      	add	r7, sp, #0
 8013a9a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8013a9c:	4b06      	ldr	r3, [pc, #24]	; (8013ab8 <vTaskInternalSetTimeOutState+0x24>)
 8013a9e:	681a      	ldr	r2, [r3, #0]
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8013aa4:	4b05      	ldr	r3, [pc, #20]	; (8013abc <vTaskInternalSetTimeOutState+0x28>)
 8013aa6:	681a      	ldr	r2, [r3, #0]
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	605a      	str	r2, [r3, #4]
}
 8013aac:	bf00      	nop
 8013aae:	370c      	adds	r7, #12
 8013ab0:	46bd      	mov	sp, r7
 8013ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ab6:	4770      	bx	lr
 8013ab8:	200014c0 	.word	0x200014c0
 8013abc:	200014ac 	.word	0x200014ac

08013ac0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8013ac0:	b580      	push	{r7, lr}
 8013ac2:	b088      	sub	sp, #32
 8013ac4:	af00      	add	r7, sp, #0
 8013ac6:	6078      	str	r0, [r7, #4]
 8013ac8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	d10c      	bne.n	8013aea <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8013ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ad4:	b672      	cpsid	i
 8013ad6:	f383 8811 	msr	BASEPRI, r3
 8013ada:	f3bf 8f6f 	isb	sy
 8013ade:	f3bf 8f4f 	dsb	sy
 8013ae2:	b662      	cpsie	i
 8013ae4:	613b      	str	r3, [r7, #16]
}
 8013ae6:	bf00      	nop
 8013ae8:	e7fe      	b.n	8013ae8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8013aea:	683b      	ldr	r3, [r7, #0]
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d10c      	bne.n	8013b0a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8013af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013af4:	b672      	cpsid	i
 8013af6:	f383 8811 	msr	BASEPRI, r3
 8013afa:	f3bf 8f6f 	isb	sy
 8013afe:	f3bf 8f4f 	dsb	sy
 8013b02:	b662      	cpsie	i
 8013b04:	60fb      	str	r3, [r7, #12]
}
 8013b06:	bf00      	nop
 8013b08:	e7fe      	b.n	8013b08 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8013b0a:	f000 fc6f 	bl	80143ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8013b0e:	4b1d      	ldr	r3, [pc, #116]	; (8013b84 <xTaskCheckForTimeOut+0xc4>)
 8013b10:	681b      	ldr	r3, [r3, #0]
 8013b12:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	685b      	ldr	r3, [r3, #4]
 8013b18:	69ba      	ldr	r2, [r7, #24]
 8013b1a:	1ad3      	subs	r3, r2, r3
 8013b1c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8013b1e:	683b      	ldr	r3, [r7, #0]
 8013b20:	681b      	ldr	r3, [r3, #0]
 8013b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b26:	d102      	bne.n	8013b2e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8013b28:	2300      	movs	r3, #0
 8013b2a:	61fb      	str	r3, [r7, #28]
 8013b2c:	e023      	b.n	8013b76 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	681a      	ldr	r2, [r3, #0]
 8013b32:	4b15      	ldr	r3, [pc, #84]	; (8013b88 <xTaskCheckForTimeOut+0xc8>)
 8013b34:	681b      	ldr	r3, [r3, #0]
 8013b36:	429a      	cmp	r2, r3
 8013b38:	d007      	beq.n	8013b4a <xTaskCheckForTimeOut+0x8a>
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	685b      	ldr	r3, [r3, #4]
 8013b3e:	69ba      	ldr	r2, [r7, #24]
 8013b40:	429a      	cmp	r2, r3
 8013b42:	d302      	bcc.n	8013b4a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8013b44:	2301      	movs	r3, #1
 8013b46:	61fb      	str	r3, [r7, #28]
 8013b48:	e015      	b.n	8013b76 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8013b4a:	683b      	ldr	r3, [r7, #0]
 8013b4c:	681b      	ldr	r3, [r3, #0]
 8013b4e:	697a      	ldr	r2, [r7, #20]
 8013b50:	429a      	cmp	r2, r3
 8013b52:	d20b      	bcs.n	8013b6c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8013b54:	683b      	ldr	r3, [r7, #0]
 8013b56:	681a      	ldr	r2, [r3, #0]
 8013b58:	697b      	ldr	r3, [r7, #20]
 8013b5a:	1ad2      	subs	r2, r2, r3
 8013b5c:	683b      	ldr	r3, [r7, #0]
 8013b5e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8013b60:	6878      	ldr	r0, [r7, #4]
 8013b62:	f7ff ff97 	bl	8013a94 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8013b66:	2300      	movs	r3, #0
 8013b68:	61fb      	str	r3, [r7, #28]
 8013b6a:	e004      	b.n	8013b76 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8013b6c:	683b      	ldr	r3, [r7, #0]
 8013b6e:	2200      	movs	r2, #0
 8013b70:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8013b72:	2301      	movs	r3, #1
 8013b74:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8013b76:	f000 fc6d 	bl	8014454 <vPortExitCritical>

	return xReturn;
 8013b7a:	69fb      	ldr	r3, [r7, #28]
}
 8013b7c:	4618      	mov	r0, r3
 8013b7e:	3720      	adds	r7, #32
 8013b80:	46bd      	mov	sp, r7
 8013b82:	bd80      	pop	{r7, pc}
 8013b84:	200014ac 	.word	0x200014ac
 8013b88:	200014c0 	.word	0x200014c0

08013b8c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8013b8c:	b480      	push	{r7}
 8013b8e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8013b90:	4b03      	ldr	r3, [pc, #12]	; (8013ba0 <vTaskMissedYield+0x14>)
 8013b92:	2201      	movs	r2, #1
 8013b94:	601a      	str	r2, [r3, #0]
}
 8013b96:	bf00      	nop
 8013b98:	46bd      	mov	sp, r7
 8013b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b9e:	4770      	bx	lr
 8013ba0:	200014bc 	.word	0x200014bc

08013ba4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8013ba4:	b580      	push	{r7, lr}
 8013ba6:	b082      	sub	sp, #8
 8013ba8:	af00      	add	r7, sp, #0
 8013baa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8013bac:	f000 f854 	bl	8013c58 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8013bb0:	4b07      	ldr	r3, [pc, #28]	; (8013bd0 <prvIdleTask+0x2c>)
 8013bb2:	681b      	ldr	r3, [r3, #0]
 8013bb4:	2b01      	cmp	r3, #1
 8013bb6:	d907      	bls.n	8013bc8 <prvIdleTask+0x24>
			{
				taskYIELD();
 8013bb8:	4b06      	ldr	r3, [pc, #24]	; (8013bd4 <prvIdleTask+0x30>)
 8013bba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013bbe:	601a      	str	r2, [r3, #0]
 8013bc0:	f3bf 8f4f 	dsb	sy
 8013bc4:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8013bc8:	f7ec fcf4 	bl	80005b4 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8013bcc:	e7ee      	b.n	8013bac <prvIdleTask+0x8>
 8013bce:	bf00      	nop
 8013bd0:	200013ac 	.word	0x200013ac
 8013bd4:	e000ed04 	.word	0xe000ed04

08013bd8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8013bd8:	b580      	push	{r7, lr}
 8013bda:	b082      	sub	sp, #8
 8013bdc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013bde:	2300      	movs	r3, #0
 8013be0:	607b      	str	r3, [r7, #4]
 8013be2:	e00c      	b.n	8013bfe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8013be4:	687a      	ldr	r2, [r7, #4]
 8013be6:	4613      	mov	r3, r2
 8013be8:	009b      	lsls	r3, r3, #2
 8013bea:	4413      	add	r3, r2
 8013bec:	009b      	lsls	r3, r3, #2
 8013bee:	4a12      	ldr	r2, [pc, #72]	; (8013c38 <prvInitialiseTaskLists+0x60>)
 8013bf0:	4413      	add	r3, r2
 8013bf2:	4618      	mov	r0, r3
 8013bf4:	f7fe f9b4 	bl	8011f60 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	3301      	adds	r3, #1
 8013bfc:	607b      	str	r3, [r7, #4]
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	2b06      	cmp	r3, #6
 8013c02:	d9ef      	bls.n	8013be4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8013c04:	480d      	ldr	r0, [pc, #52]	; (8013c3c <prvInitialiseTaskLists+0x64>)
 8013c06:	f7fe f9ab 	bl	8011f60 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8013c0a:	480d      	ldr	r0, [pc, #52]	; (8013c40 <prvInitialiseTaskLists+0x68>)
 8013c0c:	f7fe f9a8 	bl	8011f60 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8013c10:	480c      	ldr	r0, [pc, #48]	; (8013c44 <prvInitialiseTaskLists+0x6c>)
 8013c12:	f7fe f9a5 	bl	8011f60 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8013c16:	480c      	ldr	r0, [pc, #48]	; (8013c48 <prvInitialiseTaskLists+0x70>)
 8013c18:	f7fe f9a2 	bl	8011f60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8013c1c:	480b      	ldr	r0, [pc, #44]	; (8013c4c <prvInitialiseTaskLists+0x74>)
 8013c1e:	f7fe f99f 	bl	8011f60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8013c22:	4b0b      	ldr	r3, [pc, #44]	; (8013c50 <prvInitialiseTaskLists+0x78>)
 8013c24:	4a05      	ldr	r2, [pc, #20]	; (8013c3c <prvInitialiseTaskLists+0x64>)
 8013c26:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013c28:	4b0a      	ldr	r3, [pc, #40]	; (8013c54 <prvInitialiseTaskLists+0x7c>)
 8013c2a:	4a05      	ldr	r2, [pc, #20]	; (8013c40 <prvInitialiseTaskLists+0x68>)
 8013c2c:	601a      	str	r2, [r3, #0]
}
 8013c2e:	bf00      	nop
 8013c30:	3708      	adds	r7, #8
 8013c32:	46bd      	mov	sp, r7
 8013c34:	bd80      	pop	{r7, pc}
 8013c36:	bf00      	nop
 8013c38:	200013ac 	.word	0x200013ac
 8013c3c:	20001438 	.word	0x20001438
 8013c40:	2000144c 	.word	0x2000144c
 8013c44:	20001468 	.word	0x20001468
 8013c48:	2000147c 	.word	0x2000147c
 8013c4c:	20001494 	.word	0x20001494
 8013c50:	20001460 	.word	0x20001460
 8013c54:	20001464 	.word	0x20001464

08013c58 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8013c58:	b580      	push	{r7, lr}
 8013c5a:	b082      	sub	sp, #8
 8013c5c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013c5e:	e019      	b.n	8013c94 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8013c60:	f000 fbc4 	bl	80143ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013c64:	4b10      	ldr	r3, [pc, #64]	; (8013ca8 <prvCheckTasksWaitingTermination+0x50>)
 8013c66:	68db      	ldr	r3, [r3, #12]
 8013c68:	68db      	ldr	r3, [r3, #12]
 8013c6a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	3304      	adds	r3, #4
 8013c70:	4618      	mov	r0, r3
 8013c72:	f7fe f9ff 	bl	8012074 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8013c76:	4b0d      	ldr	r3, [pc, #52]	; (8013cac <prvCheckTasksWaitingTermination+0x54>)
 8013c78:	681b      	ldr	r3, [r3, #0]
 8013c7a:	3b01      	subs	r3, #1
 8013c7c:	4a0b      	ldr	r2, [pc, #44]	; (8013cac <prvCheckTasksWaitingTermination+0x54>)
 8013c7e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8013c80:	4b0b      	ldr	r3, [pc, #44]	; (8013cb0 <prvCheckTasksWaitingTermination+0x58>)
 8013c82:	681b      	ldr	r3, [r3, #0]
 8013c84:	3b01      	subs	r3, #1
 8013c86:	4a0a      	ldr	r2, [pc, #40]	; (8013cb0 <prvCheckTasksWaitingTermination+0x58>)
 8013c88:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8013c8a:	f000 fbe3 	bl	8014454 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8013c8e:	6878      	ldr	r0, [r7, #4]
 8013c90:	f000 f810 	bl	8013cb4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013c94:	4b06      	ldr	r3, [pc, #24]	; (8013cb0 <prvCheckTasksWaitingTermination+0x58>)
 8013c96:	681b      	ldr	r3, [r3, #0]
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d1e1      	bne.n	8013c60 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8013c9c:	bf00      	nop
 8013c9e:	bf00      	nop
 8013ca0:	3708      	adds	r7, #8
 8013ca2:	46bd      	mov	sp, r7
 8013ca4:	bd80      	pop	{r7, pc}
 8013ca6:	bf00      	nop
 8013ca8:	2000147c 	.word	0x2000147c
 8013cac:	200014a8 	.word	0x200014a8
 8013cb0:	20001490 	.word	0x20001490

08013cb4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8013cb4:	b580      	push	{r7, lr}
 8013cb6:	b084      	sub	sp, #16
 8013cb8:	af00      	add	r7, sp, #0
 8013cba:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013cc2:	2b00      	cmp	r3, #0
 8013cc4:	d108      	bne.n	8013cd8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013cca:	4618      	mov	r0, r3
 8013ccc:	f000 fd8a 	bl	80147e4 <vPortFree>
				vPortFree( pxTCB );
 8013cd0:	6878      	ldr	r0, [r7, #4]
 8013cd2:	f000 fd87 	bl	80147e4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8013cd6:	e01a      	b.n	8013d0e <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013cde:	2b01      	cmp	r3, #1
 8013ce0:	d103      	bne.n	8013cea <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8013ce2:	6878      	ldr	r0, [r7, #4]
 8013ce4:	f000 fd7e 	bl	80147e4 <vPortFree>
	}
 8013ce8:	e011      	b.n	8013d0e <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013cf0:	2b02      	cmp	r3, #2
 8013cf2:	d00c      	beq.n	8013d0e <prvDeleteTCB+0x5a>
	__asm volatile
 8013cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cf8:	b672      	cpsid	i
 8013cfa:	f383 8811 	msr	BASEPRI, r3
 8013cfe:	f3bf 8f6f 	isb	sy
 8013d02:	f3bf 8f4f 	dsb	sy
 8013d06:	b662      	cpsie	i
 8013d08:	60fb      	str	r3, [r7, #12]
}
 8013d0a:	bf00      	nop
 8013d0c:	e7fe      	b.n	8013d0c <prvDeleteTCB+0x58>
	}
 8013d0e:	bf00      	nop
 8013d10:	3710      	adds	r7, #16
 8013d12:	46bd      	mov	sp, r7
 8013d14:	bd80      	pop	{r7, pc}
	...

08013d18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8013d18:	b480      	push	{r7}
 8013d1a:	b083      	sub	sp, #12
 8013d1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013d1e:	4b0c      	ldr	r3, [pc, #48]	; (8013d50 <prvResetNextTaskUnblockTime+0x38>)
 8013d20:	681b      	ldr	r3, [r3, #0]
 8013d22:	681b      	ldr	r3, [r3, #0]
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d104      	bne.n	8013d32 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8013d28:	4b0a      	ldr	r3, [pc, #40]	; (8013d54 <prvResetNextTaskUnblockTime+0x3c>)
 8013d2a:	f04f 32ff 	mov.w	r2, #4294967295
 8013d2e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8013d30:	e008      	b.n	8013d44 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013d32:	4b07      	ldr	r3, [pc, #28]	; (8013d50 <prvResetNextTaskUnblockTime+0x38>)
 8013d34:	681b      	ldr	r3, [r3, #0]
 8013d36:	68db      	ldr	r3, [r3, #12]
 8013d38:	68db      	ldr	r3, [r3, #12]
 8013d3a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	685b      	ldr	r3, [r3, #4]
 8013d40:	4a04      	ldr	r2, [pc, #16]	; (8013d54 <prvResetNextTaskUnblockTime+0x3c>)
 8013d42:	6013      	str	r3, [r2, #0]
}
 8013d44:	bf00      	nop
 8013d46:	370c      	adds	r7, #12
 8013d48:	46bd      	mov	sp, r7
 8013d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d4e:	4770      	bx	lr
 8013d50:	20001460 	.word	0x20001460
 8013d54:	200014c8 	.word	0x200014c8

08013d58 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8013d58:	b480      	push	{r7}
 8013d5a:	b083      	sub	sp, #12
 8013d5c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8013d5e:	4b0b      	ldr	r3, [pc, #44]	; (8013d8c <xTaskGetSchedulerState+0x34>)
 8013d60:	681b      	ldr	r3, [r3, #0]
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d102      	bne.n	8013d6c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8013d66:	2301      	movs	r3, #1
 8013d68:	607b      	str	r3, [r7, #4]
 8013d6a:	e008      	b.n	8013d7e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013d6c:	4b08      	ldr	r3, [pc, #32]	; (8013d90 <xTaskGetSchedulerState+0x38>)
 8013d6e:	681b      	ldr	r3, [r3, #0]
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	d102      	bne.n	8013d7a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8013d74:	2302      	movs	r3, #2
 8013d76:	607b      	str	r3, [r7, #4]
 8013d78:	e001      	b.n	8013d7e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8013d7a:	2300      	movs	r3, #0
 8013d7c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8013d7e:	687b      	ldr	r3, [r7, #4]
	}
 8013d80:	4618      	mov	r0, r3
 8013d82:	370c      	adds	r7, #12
 8013d84:	46bd      	mov	sp, r7
 8013d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d8a:	4770      	bx	lr
 8013d8c:	200014b4 	.word	0x200014b4
 8013d90:	200014d0 	.word	0x200014d0

08013d94 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8013d94:	b580      	push	{r7, lr}
 8013d96:	b084      	sub	sp, #16
 8013d98:	af00      	add	r7, sp, #0
 8013d9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8013da0:	2300      	movs	r3, #0
 8013da2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d069      	beq.n	8013e7e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8013daa:	68bb      	ldr	r3, [r7, #8]
 8013dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013dae:	4b36      	ldr	r3, [pc, #216]	; (8013e88 <xTaskPriorityInherit+0xf4>)
 8013db0:	681b      	ldr	r3, [r3, #0]
 8013db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013db4:	429a      	cmp	r2, r3
 8013db6:	d259      	bcs.n	8013e6c <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013db8:	68bb      	ldr	r3, [r7, #8]
 8013dba:	699b      	ldr	r3, [r3, #24]
 8013dbc:	2b00      	cmp	r3, #0
 8013dbe:	db06      	blt.n	8013dce <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013dc0:	4b31      	ldr	r3, [pc, #196]	; (8013e88 <xTaskPriorityInherit+0xf4>)
 8013dc2:	681b      	ldr	r3, [r3, #0]
 8013dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013dc6:	f1c3 0207 	rsb	r2, r3, #7
 8013dca:	68bb      	ldr	r3, [r7, #8]
 8013dcc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8013dce:	68bb      	ldr	r3, [r7, #8]
 8013dd0:	6959      	ldr	r1, [r3, #20]
 8013dd2:	68bb      	ldr	r3, [r7, #8]
 8013dd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013dd6:	4613      	mov	r3, r2
 8013dd8:	009b      	lsls	r3, r3, #2
 8013dda:	4413      	add	r3, r2
 8013ddc:	009b      	lsls	r3, r3, #2
 8013dde:	4a2b      	ldr	r2, [pc, #172]	; (8013e8c <xTaskPriorityInherit+0xf8>)
 8013de0:	4413      	add	r3, r2
 8013de2:	4299      	cmp	r1, r3
 8013de4:	d13a      	bne.n	8013e5c <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013de6:	68bb      	ldr	r3, [r7, #8]
 8013de8:	3304      	adds	r3, #4
 8013dea:	4618      	mov	r0, r3
 8013dec:	f7fe f942 	bl	8012074 <uxListRemove>
 8013df0:	4603      	mov	r3, r0
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	d115      	bne.n	8013e22 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8013df6:	68bb      	ldr	r3, [r7, #8]
 8013df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013dfa:	4924      	ldr	r1, [pc, #144]	; (8013e8c <xTaskPriorityInherit+0xf8>)
 8013dfc:	4613      	mov	r3, r2
 8013dfe:	009b      	lsls	r3, r3, #2
 8013e00:	4413      	add	r3, r2
 8013e02:	009b      	lsls	r3, r3, #2
 8013e04:	440b      	add	r3, r1
 8013e06:	681b      	ldr	r3, [r3, #0]
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d10a      	bne.n	8013e22 <xTaskPriorityInherit+0x8e>
 8013e0c:	68bb      	ldr	r3, [r7, #8]
 8013e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e10:	2201      	movs	r2, #1
 8013e12:	fa02 f303 	lsl.w	r3, r2, r3
 8013e16:	43da      	mvns	r2, r3
 8013e18:	4b1d      	ldr	r3, [pc, #116]	; (8013e90 <xTaskPriorityInherit+0xfc>)
 8013e1a:	681b      	ldr	r3, [r3, #0]
 8013e1c:	4013      	ands	r3, r2
 8013e1e:	4a1c      	ldr	r2, [pc, #112]	; (8013e90 <xTaskPriorityInherit+0xfc>)
 8013e20:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013e22:	4b19      	ldr	r3, [pc, #100]	; (8013e88 <xTaskPriorityInherit+0xf4>)
 8013e24:	681b      	ldr	r3, [r3, #0]
 8013e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e28:	68bb      	ldr	r3, [r7, #8]
 8013e2a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8013e2c:	68bb      	ldr	r3, [r7, #8]
 8013e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e30:	2201      	movs	r2, #1
 8013e32:	409a      	lsls	r2, r3
 8013e34:	4b16      	ldr	r3, [pc, #88]	; (8013e90 <xTaskPriorityInherit+0xfc>)
 8013e36:	681b      	ldr	r3, [r3, #0]
 8013e38:	4313      	orrs	r3, r2
 8013e3a:	4a15      	ldr	r2, [pc, #84]	; (8013e90 <xTaskPriorityInherit+0xfc>)
 8013e3c:	6013      	str	r3, [r2, #0]
 8013e3e:	68bb      	ldr	r3, [r7, #8]
 8013e40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e42:	4613      	mov	r3, r2
 8013e44:	009b      	lsls	r3, r3, #2
 8013e46:	4413      	add	r3, r2
 8013e48:	009b      	lsls	r3, r3, #2
 8013e4a:	4a10      	ldr	r2, [pc, #64]	; (8013e8c <xTaskPriorityInherit+0xf8>)
 8013e4c:	441a      	add	r2, r3
 8013e4e:	68bb      	ldr	r3, [r7, #8]
 8013e50:	3304      	adds	r3, #4
 8013e52:	4619      	mov	r1, r3
 8013e54:	4610      	mov	r0, r2
 8013e56:	f7fe f8b0 	bl	8011fba <vListInsertEnd>
 8013e5a:	e004      	b.n	8013e66 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013e5c:	4b0a      	ldr	r3, [pc, #40]	; (8013e88 <xTaskPriorityInherit+0xf4>)
 8013e5e:	681b      	ldr	r3, [r3, #0]
 8013e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e62:	68bb      	ldr	r3, [r7, #8]
 8013e64:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8013e66:	2301      	movs	r3, #1
 8013e68:	60fb      	str	r3, [r7, #12]
 8013e6a:	e008      	b.n	8013e7e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8013e6c:	68bb      	ldr	r3, [r7, #8]
 8013e6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013e70:	4b05      	ldr	r3, [pc, #20]	; (8013e88 <xTaskPriorityInherit+0xf4>)
 8013e72:	681b      	ldr	r3, [r3, #0]
 8013e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e76:	429a      	cmp	r2, r3
 8013e78:	d201      	bcs.n	8013e7e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8013e7a:	2301      	movs	r3, #1
 8013e7c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013e7e:	68fb      	ldr	r3, [r7, #12]
	}
 8013e80:	4618      	mov	r0, r3
 8013e82:	3710      	adds	r7, #16
 8013e84:	46bd      	mov	sp, r7
 8013e86:	bd80      	pop	{r7, pc}
 8013e88:	200013a8 	.word	0x200013a8
 8013e8c:	200013ac 	.word	0x200013ac
 8013e90:	200014b0 	.word	0x200014b0

08013e94 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8013e94:	b580      	push	{r7, lr}
 8013e96:	b086      	sub	sp, #24
 8013e98:	af00      	add	r7, sp, #0
 8013e9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8013ea0:	2300      	movs	r3, #0
 8013ea2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d072      	beq.n	8013f90 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8013eaa:	4b3c      	ldr	r3, [pc, #240]	; (8013f9c <xTaskPriorityDisinherit+0x108>)
 8013eac:	681b      	ldr	r3, [r3, #0]
 8013eae:	693a      	ldr	r2, [r7, #16]
 8013eb0:	429a      	cmp	r2, r3
 8013eb2:	d00c      	beq.n	8013ece <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8013eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013eb8:	b672      	cpsid	i
 8013eba:	f383 8811 	msr	BASEPRI, r3
 8013ebe:	f3bf 8f6f 	isb	sy
 8013ec2:	f3bf 8f4f 	dsb	sy
 8013ec6:	b662      	cpsie	i
 8013ec8:	60fb      	str	r3, [r7, #12]
}
 8013eca:	bf00      	nop
 8013ecc:	e7fe      	b.n	8013ecc <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8013ece:	693b      	ldr	r3, [r7, #16]
 8013ed0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	d10c      	bne.n	8013ef0 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8013ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013eda:	b672      	cpsid	i
 8013edc:	f383 8811 	msr	BASEPRI, r3
 8013ee0:	f3bf 8f6f 	isb	sy
 8013ee4:	f3bf 8f4f 	dsb	sy
 8013ee8:	b662      	cpsie	i
 8013eea:	60bb      	str	r3, [r7, #8]
}
 8013eec:	bf00      	nop
 8013eee:	e7fe      	b.n	8013eee <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8013ef0:	693b      	ldr	r3, [r7, #16]
 8013ef2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013ef4:	1e5a      	subs	r2, r3, #1
 8013ef6:	693b      	ldr	r3, [r7, #16]
 8013ef8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8013efa:	693b      	ldr	r3, [r7, #16]
 8013efc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013efe:	693b      	ldr	r3, [r7, #16]
 8013f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013f02:	429a      	cmp	r2, r3
 8013f04:	d044      	beq.n	8013f90 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8013f06:	693b      	ldr	r3, [r7, #16]
 8013f08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013f0a:	2b00      	cmp	r3, #0
 8013f0c:	d140      	bne.n	8013f90 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013f0e:	693b      	ldr	r3, [r7, #16]
 8013f10:	3304      	adds	r3, #4
 8013f12:	4618      	mov	r0, r3
 8013f14:	f7fe f8ae 	bl	8012074 <uxListRemove>
 8013f18:	4603      	mov	r3, r0
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d115      	bne.n	8013f4a <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8013f1e:	693b      	ldr	r3, [r7, #16]
 8013f20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f22:	491f      	ldr	r1, [pc, #124]	; (8013fa0 <xTaskPriorityDisinherit+0x10c>)
 8013f24:	4613      	mov	r3, r2
 8013f26:	009b      	lsls	r3, r3, #2
 8013f28:	4413      	add	r3, r2
 8013f2a:	009b      	lsls	r3, r3, #2
 8013f2c:	440b      	add	r3, r1
 8013f2e:	681b      	ldr	r3, [r3, #0]
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	d10a      	bne.n	8013f4a <xTaskPriorityDisinherit+0xb6>
 8013f34:	693b      	ldr	r3, [r7, #16]
 8013f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f38:	2201      	movs	r2, #1
 8013f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8013f3e:	43da      	mvns	r2, r3
 8013f40:	4b18      	ldr	r3, [pc, #96]	; (8013fa4 <xTaskPriorityDisinherit+0x110>)
 8013f42:	681b      	ldr	r3, [r3, #0]
 8013f44:	4013      	ands	r3, r2
 8013f46:	4a17      	ldr	r2, [pc, #92]	; (8013fa4 <xTaskPriorityDisinherit+0x110>)
 8013f48:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8013f4a:	693b      	ldr	r3, [r7, #16]
 8013f4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013f4e:	693b      	ldr	r3, [r7, #16]
 8013f50:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013f52:	693b      	ldr	r3, [r7, #16]
 8013f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f56:	f1c3 0207 	rsb	r2, r3, #7
 8013f5a:	693b      	ldr	r3, [r7, #16]
 8013f5c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8013f5e:	693b      	ldr	r3, [r7, #16]
 8013f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f62:	2201      	movs	r2, #1
 8013f64:	409a      	lsls	r2, r3
 8013f66:	4b0f      	ldr	r3, [pc, #60]	; (8013fa4 <xTaskPriorityDisinherit+0x110>)
 8013f68:	681b      	ldr	r3, [r3, #0]
 8013f6a:	4313      	orrs	r3, r2
 8013f6c:	4a0d      	ldr	r2, [pc, #52]	; (8013fa4 <xTaskPriorityDisinherit+0x110>)
 8013f6e:	6013      	str	r3, [r2, #0]
 8013f70:	693b      	ldr	r3, [r7, #16]
 8013f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f74:	4613      	mov	r3, r2
 8013f76:	009b      	lsls	r3, r3, #2
 8013f78:	4413      	add	r3, r2
 8013f7a:	009b      	lsls	r3, r3, #2
 8013f7c:	4a08      	ldr	r2, [pc, #32]	; (8013fa0 <xTaskPriorityDisinherit+0x10c>)
 8013f7e:	441a      	add	r2, r3
 8013f80:	693b      	ldr	r3, [r7, #16]
 8013f82:	3304      	adds	r3, #4
 8013f84:	4619      	mov	r1, r3
 8013f86:	4610      	mov	r0, r2
 8013f88:	f7fe f817 	bl	8011fba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8013f8c:	2301      	movs	r3, #1
 8013f8e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013f90:	697b      	ldr	r3, [r7, #20]
	}
 8013f92:	4618      	mov	r0, r3
 8013f94:	3718      	adds	r7, #24
 8013f96:	46bd      	mov	sp, r7
 8013f98:	bd80      	pop	{r7, pc}
 8013f9a:	bf00      	nop
 8013f9c:	200013a8 	.word	0x200013a8
 8013fa0:	200013ac 	.word	0x200013ac
 8013fa4:	200014b0 	.word	0x200014b0

08013fa8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8013fa8:	b580      	push	{r7, lr}
 8013faa:	b088      	sub	sp, #32
 8013fac:	af00      	add	r7, sp, #0
 8013fae:	6078      	str	r0, [r7, #4]
 8013fb0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8013fb6:	2301      	movs	r3, #1
 8013fb8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	f000 8087 	beq.w	80140d0 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8013fc2:	69bb      	ldr	r3, [r7, #24]
 8013fc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013fc6:	2b00      	cmp	r3, #0
 8013fc8:	d10c      	bne.n	8013fe4 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8013fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fce:	b672      	cpsid	i
 8013fd0:	f383 8811 	msr	BASEPRI, r3
 8013fd4:	f3bf 8f6f 	isb	sy
 8013fd8:	f3bf 8f4f 	dsb	sy
 8013fdc:	b662      	cpsie	i
 8013fde:	60fb      	str	r3, [r7, #12]
}
 8013fe0:	bf00      	nop
 8013fe2:	e7fe      	b.n	8013fe2 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8013fe4:	69bb      	ldr	r3, [r7, #24]
 8013fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013fe8:	683a      	ldr	r2, [r7, #0]
 8013fea:	429a      	cmp	r2, r3
 8013fec:	d902      	bls.n	8013ff4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8013fee:	683b      	ldr	r3, [r7, #0]
 8013ff0:	61fb      	str	r3, [r7, #28]
 8013ff2:	e002      	b.n	8013ffa <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8013ff4:	69bb      	ldr	r3, [r7, #24]
 8013ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013ff8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8013ffa:	69bb      	ldr	r3, [r7, #24]
 8013ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ffe:	69fa      	ldr	r2, [r7, #28]
 8014000:	429a      	cmp	r2, r3
 8014002:	d065      	beq.n	80140d0 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8014004:	69bb      	ldr	r3, [r7, #24]
 8014006:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014008:	697a      	ldr	r2, [r7, #20]
 801400a:	429a      	cmp	r2, r3
 801400c:	d160      	bne.n	80140d0 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801400e:	4b32      	ldr	r3, [pc, #200]	; (80140d8 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8014010:	681b      	ldr	r3, [r3, #0]
 8014012:	69ba      	ldr	r2, [r7, #24]
 8014014:	429a      	cmp	r2, r3
 8014016:	d10c      	bne.n	8014032 <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 8014018:	f04f 0350 	mov.w	r3, #80	; 0x50
 801401c:	b672      	cpsid	i
 801401e:	f383 8811 	msr	BASEPRI, r3
 8014022:	f3bf 8f6f 	isb	sy
 8014026:	f3bf 8f4f 	dsb	sy
 801402a:	b662      	cpsie	i
 801402c:	60bb      	str	r3, [r7, #8]
}
 801402e:	bf00      	nop
 8014030:	e7fe      	b.n	8014030 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8014032:	69bb      	ldr	r3, [r7, #24]
 8014034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014036:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8014038:	69bb      	ldr	r3, [r7, #24]
 801403a:	69fa      	ldr	r2, [r7, #28]
 801403c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801403e:	69bb      	ldr	r3, [r7, #24]
 8014040:	699b      	ldr	r3, [r3, #24]
 8014042:	2b00      	cmp	r3, #0
 8014044:	db04      	blt.n	8014050 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014046:	69fb      	ldr	r3, [r7, #28]
 8014048:	f1c3 0207 	rsb	r2, r3, #7
 801404c:	69bb      	ldr	r3, [r7, #24]
 801404e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8014050:	69bb      	ldr	r3, [r7, #24]
 8014052:	6959      	ldr	r1, [r3, #20]
 8014054:	693a      	ldr	r2, [r7, #16]
 8014056:	4613      	mov	r3, r2
 8014058:	009b      	lsls	r3, r3, #2
 801405a:	4413      	add	r3, r2
 801405c:	009b      	lsls	r3, r3, #2
 801405e:	4a1f      	ldr	r2, [pc, #124]	; (80140dc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8014060:	4413      	add	r3, r2
 8014062:	4299      	cmp	r1, r3
 8014064:	d134      	bne.n	80140d0 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014066:	69bb      	ldr	r3, [r7, #24]
 8014068:	3304      	adds	r3, #4
 801406a:	4618      	mov	r0, r3
 801406c:	f7fe f802 	bl	8012074 <uxListRemove>
 8014070:	4603      	mov	r3, r0
 8014072:	2b00      	cmp	r3, #0
 8014074:	d115      	bne.n	80140a2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8014076:	69bb      	ldr	r3, [r7, #24]
 8014078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801407a:	4918      	ldr	r1, [pc, #96]	; (80140dc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 801407c:	4613      	mov	r3, r2
 801407e:	009b      	lsls	r3, r3, #2
 8014080:	4413      	add	r3, r2
 8014082:	009b      	lsls	r3, r3, #2
 8014084:	440b      	add	r3, r1
 8014086:	681b      	ldr	r3, [r3, #0]
 8014088:	2b00      	cmp	r3, #0
 801408a:	d10a      	bne.n	80140a2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
 801408c:	69bb      	ldr	r3, [r7, #24]
 801408e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014090:	2201      	movs	r2, #1
 8014092:	fa02 f303 	lsl.w	r3, r2, r3
 8014096:	43da      	mvns	r2, r3
 8014098:	4b11      	ldr	r3, [pc, #68]	; (80140e0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801409a:	681b      	ldr	r3, [r3, #0]
 801409c:	4013      	ands	r3, r2
 801409e:	4a10      	ldr	r2, [pc, #64]	; (80140e0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80140a0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80140a2:	69bb      	ldr	r3, [r7, #24]
 80140a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140a6:	2201      	movs	r2, #1
 80140a8:	409a      	lsls	r2, r3
 80140aa:	4b0d      	ldr	r3, [pc, #52]	; (80140e0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80140ac:	681b      	ldr	r3, [r3, #0]
 80140ae:	4313      	orrs	r3, r2
 80140b0:	4a0b      	ldr	r2, [pc, #44]	; (80140e0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80140b2:	6013      	str	r3, [r2, #0]
 80140b4:	69bb      	ldr	r3, [r7, #24]
 80140b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80140b8:	4613      	mov	r3, r2
 80140ba:	009b      	lsls	r3, r3, #2
 80140bc:	4413      	add	r3, r2
 80140be:	009b      	lsls	r3, r3, #2
 80140c0:	4a06      	ldr	r2, [pc, #24]	; (80140dc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80140c2:	441a      	add	r2, r3
 80140c4:	69bb      	ldr	r3, [r7, #24]
 80140c6:	3304      	adds	r3, #4
 80140c8:	4619      	mov	r1, r3
 80140ca:	4610      	mov	r0, r2
 80140cc:	f7fd ff75 	bl	8011fba <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80140d0:	bf00      	nop
 80140d2:	3720      	adds	r7, #32
 80140d4:	46bd      	mov	sp, r7
 80140d6:	bd80      	pop	{r7, pc}
 80140d8:	200013a8 	.word	0x200013a8
 80140dc:	200013ac 	.word	0x200013ac
 80140e0:	200014b0 	.word	0x200014b0

080140e4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80140e4:	b480      	push	{r7}
 80140e6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80140e8:	4b07      	ldr	r3, [pc, #28]	; (8014108 <pvTaskIncrementMutexHeldCount+0x24>)
 80140ea:	681b      	ldr	r3, [r3, #0]
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	d004      	beq.n	80140fa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80140f0:	4b05      	ldr	r3, [pc, #20]	; (8014108 <pvTaskIncrementMutexHeldCount+0x24>)
 80140f2:	681b      	ldr	r3, [r3, #0]
 80140f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80140f6:	3201      	adds	r2, #1
 80140f8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80140fa:	4b03      	ldr	r3, [pc, #12]	; (8014108 <pvTaskIncrementMutexHeldCount+0x24>)
 80140fc:	681b      	ldr	r3, [r3, #0]
	}
 80140fe:	4618      	mov	r0, r3
 8014100:	46bd      	mov	sp, r7
 8014102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014106:	4770      	bx	lr
 8014108:	200013a8 	.word	0x200013a8

0801410c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801410c:	b580      	push	{r7, lr}
 801410e:	b084      	sub	sp, #16
 8014110:	af00      	add	r7, sp, #0
 8014112:	6078      	str	r0, [r7, #4]
 8014114:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8014116:	4b29      	ldr	r3, [pc, #164]	; (80141bc <prvAddCurrentTaskToDelayedList+0xb0>)
 8014118:	681b      	ldr	r3, [r3, #0]
 801411a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801411c:	4b28      	ldr	r3, [pc, #160]	; (80141c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 801411e:	681b      	ldr	r3, [r3, #0]
 8014120:	3304      	adds	r3, #4
 8014122:	4618      	mov	r0, r3
 8014124:	f7fd ffa6 	bl	8012074 <uxListRemove>
 8014128:	4603      	mov	r3, r0
 801412a:	2b00      	cmp	r3, #0
 801412c:	d10b      	bne.n	8014146 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801412e:	4b24      	ldr	r3, [pc, #144]	; (80141c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014130:	681b      	ldr	r3, [r3, #0]
 8014132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014134:	2201      	movs	r2, #1
 8014136:	fa02 f303 	lsl.w	r3, r2, r3
 801413a:	43da      	mvns	r2, r3
 801413c:	4b21      	ldr	r3, [pc, #132]	; (80141c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 801413e:	681b      	ldr	r3, [r3, #0]
 8014140:	4013      	ands	r3, r2
 8014142:	4a20      	ldr	r2, [pc, #128]	; (80141c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8014144:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	f1b3 3fff 	cmp.w	r3, #4294967295
 801414c:	d10a      	bne.n	8014164 <prvAddCurrentTaskToDelayedList+0x58>
 801414e:	683b      	ldr	r3, [r7, #0]
 8014150:	2b00      	cmp	r3, #0
 8014152:	d007      	beq.n	8014164 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014154:	4b1a      	ldr	r3, [pc, #104]	; (80141c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014156:	681b      	ldr	r3, [r3, #0]
 8014158:	3304      	adds	r3, #4
 801415a:	4619      	mov	r1, r3
 801415c:	481a      	ldr	r0, [pc, #104]	; (80141c8 <prvAddCurrentTaskToDelayedList+0xbc>)
 801415e:	f7fd ff2c 	bl	8011fba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8014162:	e026      	b.n	80141b2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8014164:	68fa      	ldr	r2, [r7, #12]
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	4413      	add	r3, r2
 801416a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801416c:	4b14      	ldr	r3, [pc, #80]	; (80141c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 801416e:	681b      	ldr	r3, [r3, #0]
 8014170:	68ba      	ldr	r2, [r7, #8]
 8014172:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8014174:	68ba      	ldr	r2, [r7, #8]
 8014176:	68fb      	ldr	r3, [r7, #12]
 8014178:	429a      	cmp	r2, r3
 801417a:	d209      	bcs.n	8014190 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801417c:	4b13      	ldr	r3, [pc, #76]	; (80141cc <prvAddCurrentTaskToDelayedList+0xc0>)
 801417e:	681a      	ldr	r2, [r3, #0]
 8014180:	4b0f      	ldr	r3, [pc, #60]	; (80141c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014182:	681b      	ldr	r3, [r3, #0]
 8014184:	3304      	adds	r3, #4
 8014186:	4619      	mov	r1, r3
 8014188:	4610      	mov	r0, r2
 801418a:	f7fd ff3a 	bl	8012002 <vListInsert>
}
 801418e:	e010      	b.n	80141b2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014190:	4b0f      	ldr	r3, [pc, #60]	; (80141d0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8014192:	681a      	ldr	r2, [r3, #0]
 8014194:	4b0a      	ldr	r3, [pc, #40]	; (80141c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014196:	681b      	ldr	r3, [r3, #0]
 8014198:	3304      	adds	r3, #4
 801419a:	4619      	mov	r1, r3
 801419c:	4610      	mov	r0, r2
 801419e:	f7fd ff30 	bl	8012002 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80141a2:	4b0c      	ldr	r3, [pc, #48]	; (80141d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80141a4:	681b      	ldr	r3, [r3, #0]
 80141a6:	68ba      	ldr	r2, [r7, #8]
 80141a8:	429a      	cmp	r2, r3
 80141aa:	d202      	bcs.n	80141b2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80141ac:	4a09      	ldr	r2, [pc, #36]	; (80141d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80141ae:	68bb      	ldr	r3, [r7, #8]
 80141b0:	6013      	str	r3, [r2, #0]
}
 80141b2:	bf00      	nop
 80141b4:	3710      	adds	r7, #16
 80141b6:	46bd      	mov	sp, r7
 80141b8:	bd80      	pop	{r7, pc}
 80141ba:	bf00      	nop
 80141bc:	200014ac 	.word	0x200014ac
 80141c0:	200013a8 	.word	0x200013a8
 80141c4:	200014b0 	.word	0x200014b0
 80141c8:	20001494 	.word	0x20001494
 80141cc:	20001464 	.word	0x20001464
 80141d0:	20001460 	.word	0x20001460
 80141d4:	200014c8 	.word	0x200014c8

080141d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80141d8:	b480      	push	{r7}
 80141da:	b085      	sub	sp, #20
 80141dc:	af00      	add	r7, sp, #0
 80141de:	60f8      	str	r0, [r7, #12]
 80141e0:	60b9      	str	r1, [r7, #8]
 80141e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80141e4:	68fb      	ldr	r3, [r7, #12]
 80141e6:	3b04      	subs	r3, #4
 80141e8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80141ea:	68fb      	ldr	r3, [r7, #12]
 80141ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80141f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80141f2:	68fb      	ldr	r3, [r7, #12]
 80141f4:	3b04      	subs	r3, #4
 80141f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80141f8:	68bb      	ldr	r3, [r7, #8]
 80141fa:	f023 0201 	bic.w	r2, r3, #1
 80141fe:	68fb      	ldr	r3, [r7, #12]
 8014200:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014202:	68fb      	ldr	r3, [r7, #12]
 8014204:	3b04      	subs	r3, #4
 8014206:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014208:	4a0c      	ldr	r2, [pc, #48]	; (801423c <pxPortInitialiseStack+0x64>)
 801420a:	68fb      	ldr	r3, [r7, #12]
 801420c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801420e:	68fb      	ldr	r3, [r7, #12]
 8014210:	3b14      	subs	r3, #20
 8014212:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014214:	687a      	ldr	r2, [r7, #4]
 8014216:	68fb      	ldr	r3, [r7, #12]
 8014218:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801421a:	68fb      	ldr	r3, [r7, #12]
 801421c:	3b04      	subs	r3, #4
 801421e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014220:	68fb      	ldr	r3, [r7, #12]
 8014222:	f06f 0202 	mvn.w	r2, #2
 8014226:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014228:	68fb      	ldr	r3, [r7, #12]
 801422a:	3b20      	subs	r3, #32
 801422c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801422e:	68fb      	ldr	r3, [r7, #12]
}
 8014230:	4618      	mov	r0, r3
 8014232:	3714      	adds	r7, #20
 8014234:	46bd      	mov	sp, r7
 8014236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801423a:	4770      	bx	lr
 801423c:	08014241 	.word	0x08014241

08014240 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014240:	b480      	push	{r7}
 8014242:	b085      	sub	sp, #20
 8014244:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8014246:	2300      	movs	r3, #0
 8014248:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801424a:	4b14      	ldr	r3, [pc, #80]	; (801429c <prvTaskExitError+0x5c>)
 801424c:	681b      	ldr	r3, [r3, #0]
 801424e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014252:	d00c      	beq.n	801426e <prvTaskExitError+0x2e>
	__asm volatile
 8014254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014258:	b672      	cpsid	i
 801425a:	f383 8811 	msr	BASEPRI, r3
 801425e:	f3bf 8f6f 	isb	sy
 8014262:	f3bf 8f4f 	dsb	sy
 8014266:	b662      	cpsie	i
 8014268:	60fb      	str	r3, [r7, #12]
}
 801426a:	bf00      	nop
 801426c:	e7fe      	b.n	801426c <prvTaskExitError+0x2c>
	__asm volatile
 801426e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014272:	b672      	cpsid	i
 8014274:	f383 8811 	msr	BASEPRI, r3
 8014278:	f3bf 8f6f 	isb	sy
 801427c:	f3bf 8f4f 	dsb	sy
 8014280:	b662      	cpsie	i
 8014282:	60bb      	str	r3, [r7, #8]
}
 8014284:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8014286:	bf00      	nop
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	2b00      	cmp	r3, #0
 801428c:	d0fc      	beq.n	8014288 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801428e:	bf00      	nop
 8014290:	bf00      	nop
 8014292:	3714      	adds	r7, #20
 8014294:	46bd      	mov	sp, r7
 8014296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801429a:	4770      	bx	lr
 801429c:	200000f0 	.word	0x200000f0

080142a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80142a0:	4b07      	ldr	r3, [pc, #28]	; (80142c0 <pxCurrentTCBConst2>)
 80142a2:	6819      	ldr	r1, [r3, #0]
 80142a4:	6808      	ldr	r0, [r1, #0]
 80142a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142aa:	f380 8809 	msr	PSP, r0
 80142ae:	f3bf 8f6f 	isb	sy
 80142b2:	f04f 0000 	mov.w	r0, #0
 80142b6:	f380 8811 	msr	BASEPRI, r0
 80142ba:	4770      	bx	lr
 80142bc:	f3af 8000 	nop.w

080142c0 <pxCurrentTCBConst2>:
 80142c0:	200013a8 	.word	0x200013a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80142c4:	bf00      	nop
 80142c6:	bf00      	nop

080142c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80142c8:	4808      	ldr	r0, [pc, #32]	; (80142ec <prvPortStartFirstTask+0x24>)
 80142ca:	6800      	ldr	r0, [r0, #0]
 80142cc:	6800      	ldr	r0, [r0, #0]
 80142ce:	f380 8808 	msr	MSP, r0
 80142d2:	f04f 0000 	mov.w	r0, #0
 80142d6:	f380 8814 	msr	CONTROL, r0
 80142da:	b662      	cpsie	i
 80142dc:	b661      	cpsie	f
 80142de:	f3bf 8f4f 	dsb	sy
 80142e2:	f3bf 8f6f 	isb	sy
 80142e6:	df00      	svc	0
 80142e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80142ea:	bf00      	nop
 80142ec:	e000ed08 	.word	0xe000ed08

080142f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80142f0:	b580      	push	{r7, lr}
 80142f2:	b084      	sub	sp, #16
 80142f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80142f6:	4b37      	ldr	r3, [pc, #220]	; (80143d4 <xPortStartScheduler+0xe4>)
 80142f8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80142fa:	68fb      	ldr	r3, [r7, #12]
 80142fc:	781b      	ldrb	r3, [r3, #0]
 80142fe:	b2db      	uxtb	r3, r3
 8014300:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014302:	68fb      	ldr	r3, [r7, #12]
 8014304:	22ff      	movs	r2, #255	; 0xff
 8014306:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014308:	68fb      	ldr	r3, [r7, #12]
 801430a:	781b      	ldrb	r3, [r3, #0]
 801430c:	b2db      	uxtb	r3, r3
 801430e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014310:	78fb      	ldrb	r3, [r7, #3]
 8014312:	b2db      	uxtb	r3, r3
 8014314:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8014318:	b2da      	uxtb	r2, r3
 801431a:	4b2f      	ldr	r3, [pc, #188]	; (80143d8 <xPortStartScheduler+0xe8>)
 801431c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801431e:	4b2f      	ldr	r3, [pc, #188]	; (80143dc <xPortStartScheduler+0xec>)
 8014320:	2207      	movs	r2, #7
 8014322:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014324:	e009      	b.n	801433a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8014326:	4b2d      	ldr	r3, [pc, #180]	; (80143dc <xPortStartScheduler+0xec>)
 8014328:	681b      	ldr	r3, [r3, #0]
 801432a:	3b01      	subs	r3, #1
 801432c:	4a2b      	ldr	r2, [pc, #172]	; (80143dc <xPortStartScheduler+0xec>)
 801432e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014330:	78fb      	ldrb	r3, [r7, #3]
 8014332:	b2db      	uxtb	r3, r3
 8014334:	005b      	lsls	r3, r3, #1
 8014336:	b2db      	uxtb	r3, r3
 8014338:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801433a:	78fb      	ldrb	r3, [r7, #3]
 801433c:	b2db      	uxtb	r3, r3
 801433e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014342:	2b80      	cmp	r3, #128	; 0x80
 8014344:	d0ef      	beq.n	8014326 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014346:	4b25      	ldr	r3, [pc, #148]	; (80143dc <xPortStartScheduler+0xec>)
 8014348:	681b      	ldr	r3, [r3, #0]
 801434a:	f1c3 0307 	rsb	r3, r3, #7
 801434e:	2b04      	cmp	r3, #4
 8014350:	d00c      	beq.n	801436c <xPortStartScheduler+0x7c>
	__asm volatile
 8014352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014356:	b672      	cpsid	i
 8014358:	f383 8811 	msr	BASEPRI, r3
 801435c:	f3bf 8f6f 	isb	sy
 8014360:	f3bf 8f4f 	dsb	sy
 8014364:	b662      	cpsie	i
 8014366:	60bb      	str	r3, [r7, #8]
}
 8014368:	bf00      	nop
 801436a:	e7fe      	b.n	801436a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801436c:	4b1b      	ldr	r3, [pc, #108]	; (80143dc <xPortStartScheduler+0xec>)
 801436e:	681b      	ldr	r3, [r3, #0]
 8014370:	021b      	lsls	r3, r3, #8
 8014372:	4a1a      	ldr	r2, [pc, #104]	; (80143dc <xPortStartScheduler+0xec>)
 8014374:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014376:	4b19      	ldr	r3, [pc, #100]	; (80143dc <xPortStartScheduler+0xec>)
 8014378:	681b      	ldr	r3, [r3, #0]
 801437a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801437e:	4a17      	ldr	r2, [pc, #92]	; (80143dc <xPortStartScheduler+0xec>)
 8014380:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	b2da      	uxtb	r2, r3
 8014386:	68fb      	ldr	r3, [r7, #12]
 8014388:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801438a:	4b15      	ldr	r3, [pc, #84]	; (80143e0 <xPortStartScheduler+0xf0>)
 801438c:	681b      	ldr	r3, [r3, #0]
 801438e:	4a14      	ldr	r2, [pc, #80]	; (80143e0 <xPortStartScheduler+0xf0>)
 8014390:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014394:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014396:	4b12      	ldr	r3, [pc, #72]	; (80143e0 <xPortStartScheduler+0xf0>)
 8014398:	681b      	ldr	r3, [r3, #0]
 801439a:	4a11      	ldr	r2, [pc, #68]	; (80143e0 <xPortStartScheduler+0xf0>)
 801439c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80143a0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80143a2:	f000 f8dd 	bl	8014560 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80143a6:	4b0f      	ldr	r3, [pc, #60]	; (80143e4 <xPortStartScheduler+0xf4>)
 80143a8:	2200      	movs	r2, #0
 80143aa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80143ac:	f000 f8fc 	bl	80145a8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80143b0:	4b0d      	ldr	r3, [pc, #52]	; (80143e8 <xPortStartScheduler+0xf8>)
 80143b2:	681b      	ldr	r3, [r3, #0]
 80143b4:	4a0c      	ldr	r2, [pc, #48]	; (80143e8 <xPortStartScheduler+0xf8>)
 80143b6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80143ba:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80143bc:	f7ff ff84 	bl	80142c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80143c0:	f7ff fa5c 	bl	801387c <vTaskSwitchContext>
	prvTaskExitError();
 80143c4:	f7ff ff3c 	bl	8014240 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80143c8:	2300      	movs	r3, #0
}
 80143ca:	4618      	mov	r0, r3
 80143cc:	3710      	adds	r7, #16
 80143ce:	46bd      	mov	sp, r7
 80143d0:	bd80      	pop	{r7, pc}
 80143d2:	bf00      	nop
 80143d4:	e000e400 	.word	0xe000e400
 80143d8:	200014d4 	.word	0x200014d4
 80143dc:	200014d8 	.word	0x200014d8
 80143e0:	e000ed20 	.word	0xe000ed20
 80143e4:	200000f0 	.word	0x200000f0
 80143e8:	e000ef34 	.word	0xe000ef34

080143ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80143ec:	b480      	push	{r7}
 80143ee:	b083      	sub	sp, #12
 80143f0:	af00      	add	r7, sp, #0
	__asm volatile
 80143f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143f6:	b672      	cpsid	i
 80143f8:	f383 8811 	msr	BASEPRI, r3
 80143fc:	f3bf 8f6f 	isb	sy
 8014400:	f3bf 8f4f 	dsb	sy
 8014404:	b662      	cpsie	i
 8014406:	607b      	str	r3, [r7, #4]
}
 8014408:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801440a:	4b10      	ldr	r3, [pc, #64]	; (801444c <vPortEnterCritical+0x60>)
 801440c:	681b      	ldr	r3, [r3, #0]
 801440e:	3301      	adds	r3, #1
 8014410:	4a0e      	ldr	r2, [pc, #56]	; (801444c <vPortEnterCritical+0x60>)
 8014412:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014414:	4b0d      	ldr	r3, [pc, #52]	; (801444c <vPortEnterCritical+0x60>)
 8014416:	681b      	ldr	r3, [r3, #0]
 8014418:	2b01      	cmp	r3, #1
 801441a:	d111      	bne.n	8014440 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801441c:	4b0c      	ldr	r3, [pc, #48]	; (8014450 <vPortEnterCritical+0x64>)
 801441e:	681b      	ldr	r3, [r3, #0]
 8014420:	b2db      	uxtb	r3, r3
 8014422:	2b00      	cmp	r3, #0
 8014424:	d00c      	beq.n	8014440 <vPortEnterCritical+0x54>
	__asm volatile
 8014426:	f04f 0350 	mov.w	r3, #80	; 0x50
 801442a:	b672      	cpsid	i
 801442c:	f383 8811 	msr	BASEPRI, r3
 8014430:	f3bf 8f6f 	isb	sy
 8014434:	f3bf 8f4f 	dsb	sy
 8014438:	b662      	cpsie	i
 801443a:	603b      	str	r3, [r7, #0]
}
 801443c:	bf00      	nop
 801443e:	e7fe      	b.n	801443e <vPortEnterCritical+0x52>
	}
}
 8014440:	bf00      	nop
 8014442:	370c      	adds	r7, #12
 8014444:	46bd      	mov	sp, r7
 8014446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801444a:	4770      	bx	lr
 801444c:	200000f0 	.word	0x200000f0
 8014450:	e000ed04 	.word	0xe000ed04

08014454 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014454:	b480      	push	{r7}
 8014456:	b083      	sub	sp, #12
 8014458:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801445a:	4b13      	ldr	r3, [pc, #76]	; (80144a8 <vPortExitCritical+0x54>)
 801445c:	681b      	ldr	r3, [r3, #0]
 801445e:	2b00      	cmp	r3, #0
 8014460:	d10c      	bne.n	801447c <vPortExitCritical+0x28>
	__asm volatile
 8014462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014466:	b672      	cpsid	i
 8014468:	f383 8811 	msr	BASEPRI, r3
 801446c:	f3bf 8f6f 	isb	sy
 8014470:	f3bf 8f4f 	dsb	sy
 8014474:	b662      	cpsie	i
 8014476:	607b      	str	r3, [r7, #4]
}
 8014478:	bf00      	nop
 801447a:	e7fe      	b.n	801447a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 801447c:	4b0a      	ldr	r3, [pc, #40]	; (80144a8 <vPortExitCritical+0x54>)
 801447e:	681b      	ldr	r3, [r3, #0]
 8014480:	3b01      	subs	r3, #1
 8014482:	4a09      	ldr	r2, [pc, #36]	; (80144a8 <vPortExitCritical+0x54>)
 8014484:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014486:	4b08      	ldr	r3, [pc, #32]	; (80144a8 <vPortExitCritical+0x54>)
 8014488:	681b      	ldr	r3, [r3, #0]
 801448a:	2b00      	cmp	r3, #0
 801448c:	d105      	bne.n	801449a <vPortExitCritical+0x46>
 801448e:	2300      	movs	r3, #0
 8014490:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014492:	683b      	ldr	r3, [r7, #0]
 8014494:	f383 8811 	msr	BASEPRI, r3
}
 8014498:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801449a:	bf00      	nop
 801449c:	370c      	adds	r7, #12
 801449e:	46bd      	mov	sp, r7
 80144a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144a4:	4770      	bx	lr
 80144a6:	bf00      	nop
 80144a8:	200000f0 	.word	0x200000f0
 80144ac:	00000000 	.word	0x00000000

080144b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80144b0:	f3ef 8009 	mrs	r0, PSP
 80144b4:	f3bf 8f6f 	isb	sy
 80144b8:	4b15      	ldr	r3, [pc, #84]	; (8014510 <pxCurrentTCBConst>)
 80144ba:	681a      	ldr	r2, [r3, #0]
 80144bc:	f01e 0f10 	tst.w	lr, #16
 80144c0:	bf08      	it	eq
 80144c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80144c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144ca:	6010      	str	r0, [r2, #0]
 80144cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80144d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80144d4:	b672      	cpsid	i
 80144d6:	f380 8811 	msr	BASEPRI, r0
 80144da:	f3bf 8f4f 	dsb	sy
 80144de:	f3bf 8f6f 	isb	sy
 80144e2:	b662      	cpsie	i
 80144e4:	f7ff f9ca 	bl	801387c <vTaskSwitchContext>
 80144e8:	f04f 0000 	mov.w	r0, #0
 80144ec:	f380 8811 	msr	BASEPRI, r0
 80144f0:	bc09      	pop	{r0, r3}
 80144f2:	6819      	ldr	r1, [r3, #0]
 80144f4:	6808      	ldr	r0, [r1, #0]
 80144f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144fa:	f01e 0f10 	tst.w	lr, #16
 80144fe:	bf08      	it	eq
 8014500:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014504:	f380 8809 	msr	PSP, r0
 8014508:	f3bf 8f6f 	isb	sy
 801450c:	4770      	bx	lr
 801450e:	bf00      	nop

08014510 <pxCurrentTCBConst>:
 8014510:	200013a8 	.word	0x200013a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014514:	bf00      	nop
 8014516:	bf00      	nop

08014518 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014518:	b580      	push	{r7, lr}
 801451a:	b082      	sub	sp, #8
 801451c:	af00      	add	r7, sp, #0
	__asm volatile
 801451e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014522:	b672      	cpsid	i
 8014524:	f383 8811 	msr	BASEPRI, r3
 8014528:	f3bf 8f6f 	isb	sy
 801452c:	f3bf 8f4f 	dsb	sy
 8014530:	b662      	cpsie	i
 8014532:	607b      	str	r3, [r7, #4]
}
 8014534:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014536:	f7ff f8e7 	bl	8013708 <xTaskIncrementTick>
 801453a:	4603      	mov	r3, r0
 801453c:	2b00      	cmp	r3, #0
 801453e:	d003      	beq.n	8014548 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8014540:	4b06      	ldr	r3, [pc, #24]	; (801455c <SysTick_Handler+0x44>)
 8014542:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014546:	601a      	str	r2, [r3, #0]
 8014548:	2300      	movs	r3, #0
 801454a:	603b      	str	r3, [r7, #0]
	__asm volatile
 801454c:	683b      	ldr	r3, [r7, #0]
 801454e:	f383 8811 	msr	BASEPRI, r3
}
 8014552:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8014554:	bf00      	nop
 8014556:	3708      	adds	r7, #8
 8014558:	46bd      	mov	sp, r7
 801455a:	bd80      	pop	{r7, pc}
 801455c:	e000ed04 	.word	0xe000ed04

08014560 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8014560:	b480      	push	{r7}
 8014562:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014564:	4b0b      	ldr	r3, [pc, #44]	; (8014594 <vPortSetupTimerInterrupt+0x34>)
 8014566:	2200      	movs	r2, #0
 8014568:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801456a:	4b0b      	ldr	r3, [pc, #44]	; (8014598 <vPortSetupTimerInterrupt+0x38>)
 801456c:	2200      	movs	r2, #0
 801456e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014570:	4b0a      	ldr	r3, [pc, #40]	; (801459c <vPortSetupTimerInterrupt+0x3c>)
 8014572:	681b      	ldr	r3, [r3, #0]
 8014574:	4a0a      	ldr	r2, [pc, #40]	; (80145a0 <vPortSetupTimerInterrupt+0x40>)
 8014576:	fba2 2303 	umull	r2, r3, r2, r3
 801457a:	099b      	lsrs	r3, r3, #6
 801457c:	4a09      	ldr	r2, [pc, #36]	; (80145a4 <vPortSetupTimerInterrupt+0x44>)
 801457e:	3b01      	subs	r3, #1
 8014580:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8014582:	4b04      	ldr	r3, [pc, #16]	; (8014594 <vPortSetupTimerInterrupt+0x34>)
 8014584:	2207      	movs	r2, #7
 8014586:	601a      	str	r2, [r3, #0]
}
 8014588:	bf00      	nop
 801458a:	46bd      	mov	sp, r7
 801458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014590:	4770      	bx	lr
 8014592:	bf00      	nop
 8014594:	e000e010 	.word	0xe000e010
 8014598:	e000e018 	.word	0xe000e018
 801459c:	200000a8 	.word	0x200000a8
 80145a0:	10624dd3 	.word	0x10624dd3
 80145a4:	e000e014 	.word	0xe000e014

080145a8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80145a8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80145b8 <vPortEnableVFP+0x10>
 80145ac:	6801      	ldr	r1, [r0, #0]
 80145ae:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80145b2:	6001      	str	r1, [r0, #0]
 80145b4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80145b6:	bf00      	nop
 80145b8:	e000ed88 	.word	0xe000ed88

080145bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80145bc:	b480      	push	{r7}
 80145be:	b085      	sub	sp, #20
 80145c0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80145c2:	f3ef 8305 	mrs	r3, IPSR
 80145c6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80145c8:	68fb      	ldr	r3, [r7, #12]
 80145ca:	2b0f      	cmp	r3, #15
 80145cc:	d916      	bls.n	80145fc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80145ce:	4a19      	ldr	r2, [pc, #100]	; (8014634 <vPortValidateInterruptPriority+0x78>)
 80145d0:	68fb      	ldr	r3, [r7, #12]
 80145d2:	4413      	add	r3, r2
 80145d4:	781b      	ldrb	r3, [r3, #0]
 80145d6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80145d8:	4b17      	ldr	r3, [pc, #92]	; (8014638 <vPortValidateInterruptPriority+0x7c>)
 80145da:	781b      	ldrb	r3, [r3, #0]
 80145dc:	7afa      	ldrb	r2, [r7, #11]
 80145de:	429a      	cmp	r2, r3
 80145e0:	d20c      	bcs.n	80145fc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 80145e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145e6:	b672      	cpsid	i
 80145e8:	f383 8811 	msr	BASEPRI, r3
 80145ec:	f3bf 8f6f 	isb	sy
 80145f0:	f3bf 8f4f 	dsb	sy
 80145f4:	b662      	cpsie	i
 80145f6:	607b      	str	r3, [r7, #4]
}
 80145f8:	bf00      	nop
 80145fa:	e7fe      	b.n	80145fa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80145fc:	4b0f      	ldr	r3, [pc, #60]	; (801463c <vPortValidateInterruptPriority+0x80>)
 80145fe:	681b      	ldr	r3, [r3, #0]
 8014600:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8014604:	4b0e      	ldr	r3, [pc, #56]	; (8014640 <vPortValidateInterruptPriority+0x84>)
 8014606:	681b      	ldr	r3, [r3, #0]
 8014608:	429a      	cmp	r2, r3
 801460a:	d90c      	bls.n	8014626 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 801460c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014610:	b672      	cpsid	i
 8014612:	f383 8811 	msr	BASEPRI, r3
 8014616:	f3bf 8f6f 	isb	sy
 801461a:	f3bf 8f4f 	dsb	sy
 801461e:	b662      	cpsie	i
 8014620:	603b      	str	r3, [r7, #0]
}
 8014622:	bf00      	nop
 8014624:	e7fe      	b.n	8014624 <vPortValidateInterruptPriority+0x68>
	}
 8014626:	bf00      	nop
 8014628:	3714      	adds	r7, #20
 801462a:	46bd      	mov	sp, r7
 801462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014630:	4770      	bx	lr
 8014632:	bf00      	nop
 8014634:	e000e3f0 	.word	0xe000e3f0
 8014638:	200014d4 	.word	0x200014d4
 801463c:	e000ed0c 	.word	0xe000ed0c
 8014640:	200014d8 	.word	0x200014d8

08014644 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014644:	b580      	push	{r7, lr}
 8014646:	b08a      	sub	sp, #40	; 0x28
 8014648:	af00      	add	r7, sp, #0
 801464a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801464c:	2300      	movs	r3, #0
 801464e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014650:	f7fe ff8c 	bl	801356c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014654:	4b5e      	ldr	r3, [pc, #376]	; (80147d0 <pvPortMalloc+0x18c>)
 8014656:	681b      	ldr	r3, [r3, #0]
 8014658:	2b00      	cmp	r3, #0
 801465a:	d101      	bne.n	8014660 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801465c:	f000 f920 	bl	80148a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014660:	4b5c      	ldr	r3, [pc, #368]	; (80147d4 <pvPortMalloc+0x190>)
 8014662:	681a      	ldr	r2, [r3, #0]
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	4013      	ands	r3, r2
 8014668:	2b00      	cmp	r3, #0
 801466a:	f040 8092 	bne.w	8014792 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	2b00      	cmp	r3, #0
 8014672:	d01f      	beq.n	80146b4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8014674:	2208      	movs	r2, #8
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	4413      	add	r3, r2
 801467a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	f003 0307 	and.w	r3, r3, #7
 8014682:	2b00      	cmp	r3, #0
 8014684:	d016      	beq.n	80146b4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	f023 0307 	bic.w	r3, r3, #7
 801468c:	3308      	adds	r3, #8
 801468e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	f003 0307 	and.w	r3, r3, #7
 8014696:	2b00      	cmp	r3, #0
 8014698:	d00c      	beq.n	80146b4 <pvPortMalloc+0x70>
	__asm volatile
 801469a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801469e:	b672      	cpsid	i
 80146a0:	f383 8811 	msr	BASEPRI, r3
 80146a4:	f3bf 8f6f 	isb	sy
 80146a8:	f3bf 8f4f 	dsb	sy
 80146ac:	b662      	cpsie	i
 80146ae:	617b      	str	r3, [r7, #20]
}
 80146b0:	bf00      	nop
 80146b2:	e7fe      	b.n	80146b2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	d06b      	beq.n	8014792 <pvPortMalloc+0x14e>
 80146ba:	4b47      	ldr	r3, [pc, #284]	; (80147d8 <pvPortMalloc+0x194>)
 80146bc:	681b      	ldr	r3, [r3, #0]
 80146be:	687a      	ldr	r2, [r7, #4]
 80146c0:	429a      	cmp	r2, r3
 80146c2:	d866      	bhi.n	8014792 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80146c4:	4b45      	ldr	r3, [pc, #276]	; (80147dc <pvPortMalloc+0x198>)
 80146c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80146c8:	4b44      	ldr	r3, [pc, #272]	; (80147dc <pvPortMalloc+0x198>)
 80146ca:	681b      	ldr	r3, [r3, #0]
 80146cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80146ce:	e004      	b.n	80146da <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80146d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80146d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146d6:	681b      	ldr	r3, [r3, #0]
 80146d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80146da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146dc:	685b      	ldr	r3, [r3, #4]
 80146de:	687a      	ldr	r2, [r7, #4]
 80146e0:	429a      	cmp	r2, r3
 80146e2:	d903      	bls.n	80146ec <pvPortMalloc+0xa8>
 80146e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146e6:	681b      	ldr	r3, [r3, #0]
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	d1f1      	bne.n	80146d0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80146ec:	4b38      	ldr	r3, [pc, #224]	; (80147d0 <pvPortMalloc+0x18c>)
 80146ee:	681b      	ldr	r3, [r3, #0]
 80146f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80146f2:	429a      	cmp	r2, r3
 80146f4:	d04d      	beq.n	8014792 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80146f6:	6a3b      	ldr	r3, [r7, #32]
 80146f8:	681b      	ldr	r3, [r3, #0]
 80146fa:	2208      	movs	r2, #8
 80146fc:	4413      	add	r3, r2
 80146fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014702:	681a      	ldr	r2, [r3, #0]
 8014704:	6a3b      	ldr	r3, [r7, #32]
 8014706:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8014708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801470a:	685a      	ldr	r2, [r3, #4]
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	1ad2      	subs	r2, r2, r3
 8014710:	2308      	movs	r3, #8
 8014712:	005b      	lsls	r3, r3, #1
 8014714:	429a      	cmp	r2, r3
 8014716:	d921      	bls.n	801475c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8014718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	4413      	add	r3, r2
 801471e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014720:	69bb      	ldr	r3, [r7, #24]
 8014722:	f003 0307 	and.w	r3, r3, #7
 8014726:	2b00      	cmp	r3, #0
 8014728:	d00c      	beq.n	8014744 <pvPortMalloc+0x100>
	__asm volatile
 801472a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801472e:	b672      	cpsid	i
 8014730:	f383 8811 	msr	BASEPRI, r3
 8014734:	f3bf 8f6f 	isb	sy
 8014738:	f3bf 8f4f 	dsb	sy
 801473c:	b662      	cpsie	i
 801473e:	613b      	str	r3, [r7, #16]
}
 8014740:	bf00      	nop
 8014742:	e7fe      	b.n	8014742 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014746:	685a      	ldr	r2, [r3, #4]
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	1ad2      	subs	r2, r2, r3
 801474c:	69bb      	ldr	r3, [r7, #24]
 801474e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8014750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014752:	687a      	ldr	r2, [r7, #4]
 8014754:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8014756:	69b8      	ldr	r0, [r7, #24]
 8014758:	f000 f904 	bl	8014964 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801475c:	4b1e      	ldr	r3, [pc, #120]	; (80147d8 <pvPortMalloc+0x194>)
 801475e:	681a      	ldr	r2, [r3, #0]
 8014760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014762:	685b      	ldr	r3, [r3, #4]
 8014764:	1ad3      	subs	r3, r2, r3
 8014766:	4a1c      	ldr	r2, [pc, #112]	; (80147d8 <pvPortMalloc+0x194>)
 8014768:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801476a:	4b1b      	ldr	r3, [pc, #108]	; (80147d8 <pvPortMalloc+0x194>)
 801476c:	681a      	ldr	r2, [r3, #0]
 801476e:	4b1c      	ldr	r3, [pc, #112]	; (80147e0 <pvPortMalloc+0x19c>)
 8014770:	681b      	ldr	r3, [r3, #0]
 8014772:	429a      	cmp	r2, r3
 8014774:	d203      	bcs.n	801477e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8014776:	4b18      	ldr	r3, [pc, #96]	; (80147d8 <pvPortMalloc+0x194>)
 8014778:	681b      	ldr	r3, [r3, #0]
 801477a:	4a19      	ldr	r2, [pc, #100]	; (80147e0 <pvPortMalloc+0x19c>)
 801477c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801477e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014780:	685a      	ldr	r2, [r3, #4]
 8014782:	4b14      	ldr	r3, [pc, #80]	; (80147d4 <pvPortMalloc+0x190>)
 8014784:	681b      	ldr	r3, [r3, #0]
 8014786:	431a      	orrs	r2, r3
 8014788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801478a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801478c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801478e:	2200      	movs	r2, #0
 8014790:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8014792:	f7fe fef9 	bl	8013588 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8014796:	69fb      	ldr	r3, [r7, #28]
 8014798:	2b00      	cmp	r3, #0
 801479a:	d101      	bne.n	80147a0 <pvPortMalloc+0x15c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 801479c:	f7eb ff1c 	bl	80005d8 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80147a0:	69fb      	ldr	r3, [r7, #28]
 80147a2:	f003 0307 	and.w	r3, r3, #7
 80147a6:	2b00      	cmp	r3, #0
 80147a8:	d00c      	beq.n	80147c4 <pvPortMalloc+0x180>
	__asm volatile
 80147aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147ae:	b672      	cpsid	i
 80147b0:	f383 8811 	msr	BASEPRI, r3
 80147b4:	f3bf 8f6f 	isb	sy
 80147b8:	f3bf 8f4f 	dsb	sy
 80147bc:	b662      	cpsie	i
 80147be:	60fb      	str	r3, [r7, #12]
}
 80147c0:	bf00      	nop
 80147c2:	e7fe      	b.n	80147c2 <pvPortMalloc+0x17e>
	return pvReturn;
 80147c4:	69fb      	ldr	r3, [r7, #28]
}
 80147c6:	4618      	mov	r0, r3
 80147c8:	3728      	adds	r7, #40	; 0x28
 80147ca:	46bd      	mov	sp, r7
 80147cc:	bd80      	pop	{r7, pc}
 80147ce:	bf00      	nop
 80147d0:	200094e4 	.word	0x200094e4
 80147d4:	200094f0 	.word	0x200094f0
 80147d8:	200094e8 	.word	0x200094e8
 80147dc:	200094dc 	.word	0x200094dc
 80147e0:	200094ec 	.word	0x200094ec

080147e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80147e4:	b580      	push	{r7, lr}
 80147e6:	b086      	sub	sp, #24
 80147e8:	af00      	add	r7, sp, #0
 80147ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	d04c      	beq.n	8014890 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80147f6:	2308      	movs	r3, #8
 80147f8:	425b      	negs	r3, r3
 80147fa:	697a      	ldr	r2, [r7, #20]
 80147fc:	4413      	add	r3, r2
 80147fe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8014800:	697b      	ldr	r3, [r7, #20]
 8014802:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8014804:	693b      	ldr	r3, [r7, #16]
 8014806:	685a      	ldr	r2, [r3, #4]
 8014808:	4b23      	ldr	r3, [pc, #140]	; (8014898 <vPortFree+0xb4>)
 801480a:	681b      	ldr	r3, [r3, #0]
 801480c:	4013      	ands	r3, r2
 801480e:	2b00      	cmp	r3, #0
 8014810:	d10c      	bne.n	801482c <vPortFree+0x48>
	__asm volatile
 8014812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014816:	b672      	cpsid	i
 8014818:	f383 8811 	msr	BASEPRI, r3
 801481c:	f3bf 8f6f 	isb	sy
 8014820:	f3bf 8f4f 	dsb	sy
 8014824:	b662      	cpsie	i
 8014826:	60fb      	str	r3, [r7, #12]
}
 8014828:	bf00      	nop
 801482a:	e7fe      	b.n	801482a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801482c:	693b      	ldr	r3, [r7, #16]
 801482e:	681b      	ldr	r3, [r3, #0]
 8014830:	2b00      	cmp	r3, #0
 8014832:	d00c      	beq.n	801484e <vPortFree+0x6a>
	__asm volatile
 8014834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014838:	b672      	cpsid	i
 801483a:	f383 8811 	msr	BASEPRI, r3
 801483e:	f3bf 8f6f 	isb	sy
 8014842:	f3bf 8f4f 	dsb	sy
 8014846:	b662      	cpsie	i
 8014848:	60bb      	str	r3, [r7, #8]
}
 801484a:	bf00      	nop
 801484c:	e7fe      	b.n	801484c <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801484e:	693b      	ldr	r3, [r7, #16]
 8014850:	685a      	ldr	r2, [r3, #4]
 8014852:	4b11      	ldr	r3, [pc, #68]	; (8014898 <vPortFree+0xb4>)
 8014854:	681b      	ldr	r3, [r3, #0]
 8014856:	4013      	ands	r3, r2
 8014858:	2b00      	cmp	r3, #0
 801485a:	d019      	beq.n	8014890 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801485c:	693b      	ldr	r3, [r7, #16]
 801485e:	681b      	ldr	r3, [r3, #0]
 8014860:	2b00      	cmp	r3, #0
 8014862:	d115      	bne.n	8014890 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8014864:	693b      	ldr	r3, [r7, #16]
 8014866:	685a      	ldr	r2, [r3, #4]
 8014868:	4b0b      	ldr	r3, [pc, #44]	; (8014898 <vPortFree+0xb4>)
 801486a:	681b      	ldr	r3, [r3, #0]
 801486c:	43db      	mvns	r3, r3
 801486e:	401a      	ands	r2, r3
 8014870:	693b      	ldr	r3, [r7, #16]
 8014872:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8014874:	f7fe fe7a 	bl	801356c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8014878:	693b      	ldr	r3, [r7, #16]
 801487a:	685a      	ldr	r2, [r3, #4]
 801487c:	4b07      	ldr	r3, [pc, #28]	; (801489c <vPortFree+0xb8>)
 801487e:	681b      	ldr	r3, [r3, #0]
 8014880:	4413      	add	r3, r2
 8014882:	4a06      	ldr	r2, [pc, #24]	; (801489c <vPortFree+0xb8>)
 8014884:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8014886:	6938      	ldr	r0, [r7, #16]
 8014888:	f000 f86c 	bl	8014964 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 801488c:	f7fe fe7c 	bl	8013588 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8014890:	bf00      	nop
 8014892:	3718      	adds	r7, #24
 8014894:	46bd      	mov	sp, r7
 8014896:	bd80      	pop	{r7, pc}
 8014898:	200094f0 	.word	0x200094f0
 801489c:	200094e8 	.word	0x200094e8

080148a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80148a0:	b480      	push	{r7}
 80148a2:	b085      	sub	sp, #20
 80148a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80148a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80148aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80148ac:	4b27      	ldr	r3, [pc, #156]	; (801494c <prvHeapInit+0xac>)
 80148ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80148b0:	68fb      	ldr	r3, [r7, #12]
 80148b2:	f003 0307 	and.w	r3, r3, #7
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	d00c      	beq.n	80148d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80148ba:	68fb      	ldr	r3, [r7, #12]
 80148bc:	3307      	adds	r3, #7
 80148be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80148c0:	68fb      	ldr	r3, [r7, #12]
 80148c2:	f023 0307 	bic.w	r3, r3, #7
 80148c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80148c8:	68ba      	ldr	r2, [r7, #8]
 80148ca:	68fb      	ldr	r3, [r7, #12]
 80148cc:	1ad3      	subs	r3, r2, r3
 80148ce:	4a1f      	ldr	r2, [pc, #124]	; (801494c <prvHeapInit+0xac>)
 80148d0:	4413      	add	r3, r2
 80148d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80148d4:	68fb      	ldr	r3, [r7, #12]
 80148d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80148d8:	4a1d      	ldr	r2, [pc, #116]	; (8014950 <prvHeapInit+0xb0>)
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80148de:	4b1c      	ldr	r3, [pc, #112]	; (8014950 <prvHeapInit+0xb0>)
 80148e0:	2200      	movs	r2, #0
 80148e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	68ba      	ldr	r2, [r7, #8]
 80148e8:	4413      	add	r3, r2
 80148ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80148ec:	2208      	movs	r2, #8
 80148ee:	68fb      	ldr	r3, [r7, #12]
 80148f0:	1a9b      	subs	r3, r3, r2
 80148f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80148f4:	68fb      	ldr	r3, [r7, #12]
 80148f6:	f023 0307 	bic.w	r3, r3, #7
 80148fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80148fc:	68fb      	ldr	r3, [r7, #12]
 80148fe:	4a15      	ldr	r2, [pc, #84]	; (8014954 <prvHeapInit+0xb4>)
 8014900:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8014902:	4b14      	ldr	r3, [pc, #80]	; (8014954 <prvHeapInit+0xb4>)
 8014904:	681b      	ldr	r3, [r3, #0]
 8014906:	2200      	movs	r2, #0
 8014908:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801490a:	4b12      	ldr	r3, [pc, #72]	; (8014954 <prvHeapInit+0xb4>)
 801490c:	681b      	ldr	r3, [r3, #0]
 801490e:	2200      	movs	r2, #0
 8014910:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8014916:	683b      	ldr	r3, [r7, #0]
 8014918:	68fa      	ldr	r2, [r7, #12]
 801491a:	1ad2      	subs	r2, r2, r3
 801491c:	683b      	ldr	r3, [r7, #0]
 801491e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8014920:	4b0c      	ldr	r3, [pc, #48]	; (8014954 <prvHeapInit+0xb4>)
 8014922:	681a      	ldr	r2, [r3, #0]
 8014924:	683b      	ldr	r3, [r7, #0]
 8014926:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014928:	683b      	ldr	r3, [r7, #0]
 801492a:	685b      	ldr	r3, [r3, #4]
 801492c:	4a0a      	ldr	r2, [pc, #40]	; (8014958 <prvHeapInit+0xb8>)
 801492e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014930:	683b      	ldr	r3, [r7, #0]
 8014932:	685b      	ldr	r3, [r3, #4]
 8014934:	4a09      	ldr	r2, [pc, #36]	; (801495c <prvHeapInit+0xbc>)
 8014936:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8014938:	4b09      	ldr	r3, [pc, #36]	; (8014960 <prvHeapInit+0xc0>)
 801493a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801493e:	601a      	str	r2, [r3, #0]
}
 8014940:	bf00      	nop
 8014942:	3714      	adds	r7, #20
 8014944:	46bd      	mov	sp, r7
 8014946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801494a:	4770      	bx	lr
 801494c:	200014dc 	.word	0x200014dc
 8014950:	200094dc 	.word	0x200094dc
 8014954:	200094e4 	.word	0x200094e4
 8014958:	200094ec 	.word	0x200094ec
 801495c:	200094e8 	.word	0x200094e8
 8014960:	200094f0 	.word	0x200094f0

08014964 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8014964:	b480      	push	{r7}
 8014966:	b085      	sub	sp, #20
 8014968:	af00      	add	r7, sp, #0
 801496a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801496c:	4b28      	ldr	r3, [pc, #160]	; (8014a10 <prvInsertBlockIntoFreeList+0xac>)
 801496e:	60fb      	str	r3, [r7, #12]
 8014970:	e002      	b.n	8014978 <prvInsertBlockIntoFreeList+0x14>
 8014972:	68fb      	ldr	r3, [r7, #12]
 8014974:	681b      	ldr	r3, [r3, #0]
 8014976:	60fb      	str	r3, [r7, #12]
 8014978:	68fb      	ldr	r3, [r7, #12]
 801497a:	681b      	ldr	r3, [r3, #0]
 801497c:	687a      	ldr	r2, [r7, #4]
 801497e:	429a      	cmp	r2, r3
 8014980:	d8f7      	bhi.n	8014972 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8014982:	68fb      	ldr	r3, [r7, #12]
 8014984:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8014986:	68fb      	ldr	r3, [r7, #12]
 8014988:	685b      	ldr	r3, [r3, #4]
 801498a:	68ba      	ldr	r2, [r7, #8]
 801498c:	4413      	add	r3, r2
 801498e:	687a      	ldr	r2, [r7, #4]
 8014990:	429a      	cmp	r2, r3
 8014992:	d108      	bne.n	80149a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8014994:	68fb      	ldr	r3, [r7, #12]
 8014996:	685a      	ldr	r2, [r3, #4]
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	685b      	ldr	r3, [r3, #4]
 801499c:	441a      	add	r2, r3
 801499e:	68fb      	ldr	r3, [r7, #12]
 80149a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80149a2:	68fb      	ldr	r3, [r7, #12]
 80149a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80149a6:	687b      	ldr	r3, [r7, #4]
 80149a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	685b      	ldr	r3, [r3, #4]
 80149ae:	68ba      	ldr	r2, [r7, #8]
 80149b0:	441a      	add	r2, r3
 80149b2:	68fb      	ldr	r3, [r7, #12]
 80149b4:	681b      	ldr	r3, [r3, #0]
 80149b6:	429a      	cmp	r2, r3
 80149b8:	d118      	bne.n	80149ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80149ba:	68fb      	ldr	r3, [r7, #12]
 80149bc:	681a      	ldr	r2, [r3, #0]
 80149be:	4b15      	ldr	r3, [pc, #84]	; (8014a14 <prvInsertBlockIntoFreeList+0xb0>)
 80149c0:	681b      	ldr	r3, [r3, #0]
 80149c2:	429a      	cmp	r2, r3
 80149c4:	d00d      	beq.n	80149e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	685a      	ldr	r2, [r3, #4]
 80149ca:	68fb      	ldr	r3, [r7, #12]
 80149cc:	681b      	ldr	r3, [r3, #0]
 80149ce:	685b      	ldr	r3, [r3, #4]
 80149d0:	441a      	add	r2, r3
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80149d6:	68fb      	ldr	r3, [r7, #12]
 80149d8:	681b      	ldr	r3, [r3, #0]
 80149da:	681a      	ldr	r2, [r3, #0]
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	601a      	str	r2, [r3, #0]
 80149e0:	e008      	b.n	80149f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80149e2:	4b0c      	ldr	r3, [pc, #48]	; (8014a14 <prvInsertBlockIntoFreeList+0xb0>)
 80149e4:	681a      	ldr	r2, [r3, #0]
 80149e6:	687b      	ldr	r3, [r7, #4]
 80149e8:	601a      	str	r2, [r3, #0]
 80149ea:	e003      	b.n	80149f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80149ec:	68fb      	ldr	r3, [r7, #12]
 80149ee:	681a      	ldr	r2, [r3, #0]
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80149f4:	68fa      	ldr	r2, [r7, #12]
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	429a      	cmp	r2, r3
 80149fa:	d002      	beq.n	8014a02 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80149fc:	68fb      	ldr	r3, [r7, #12]
 80149fe:	687a      	ldr	r2, [r7, #4]
 8014a00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014a02:	bf00      	nop
 8014a04:	3714      	adds	r7, #20
 8014a06:	46bd      	mov	sp, r7
 8014a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a0c:	4770      	bx	lr
 8014a0e:	bf00      	nop
 8014a10:	200094dc 	.word	0x200094dc
 8014a14:	200094e4 	.word	0x200094e4

08014a18 <__errno>:
 8014a18:	4b01      	ldr	r3, [pc, #4]	; (8014a20 <__errno+0x8>)
 8014a1a:	6818      	ldr	r0, [r3, #0]
 8014a1c:	4770      	bx	lr
 8014a1e:	bf00      	nop
 8014a20:	200000f4 	.word	0x200000f4

08014a24 <__libc_init_array>:
 8014a24:	b570      	push	{r4, r5, r6, lr}
 8014a26:	4d0d      	ldr	r5, [pc, #52]	; (8014a5c <__libc_init_array+0x38>)
 8014a28:	4c0d      	ldr	r4, [pc, #52]	; (8014a60 <__libc_init_array+0x3c>)
 8014a2a:	1b64      	subs	r4, r4, r5
 8014a2c:	10a4      	asrs	r4, r4, #2
 8014a2e:	2600      	movs	r6, #0
 8014a30:	42a6      	cmp	r6, r4
 8014a32:	d109      	bne.n	8014a48 <__libc_init_array+0x24>
 8014a34:	4d0b      	ldr	r5, [pc, #44]	; (8014a64 <__libc_init_array+0x40>)
 8014a36:	4c0c      	ldr	r4, [pc, #48]	; (8014a68 <__libc_init_array+0x44>)
 8014a38:	f000 fc8e 	bl	8015358 <_init>
 8014a3c:	1b64      	subs	r4, r4, r5
 8014a3e:	10a4      	asrs	r4, r4, #2
 8014a40:	2600      	movs	r6, #0
 8014a42:	42a6      	cmp	r6, r4
 8014a44:	d105      	bne.n	8014a52 <__libc_init_array+0x2e>
 8014a46:	bd70      	pop	{r4, r5, r6, pc}
 8014a48:	f855 3b04 	ldr.w	r3, [r5], #4
 8014a4c:	4798      	blx	r3
 8014a4e:	3601      	adds	r6, #1
 8014a50:	e7ee      	b.n	8014a30 <__libc_init_array+0xc>
 8014a52:	f855 3b04 	ldr.w	r3, [r5], #4
 8014a56:	4798      	blx	r3
 8014a58:	3601      	adds	r6, #1
 8014a5a:	e7f2      	b.n	8014a42 <__libc_init_array+0x1e>
 8014a5c:	080180d0 	.word	0x080180d0
 8014a60:	080180d0 	.word	0x080180d0
 8014a64:	080180d0 	.word	0x080180d0
 8014a68:	080180d4 	.word	0x080180d4

08014a6c <memcpy>:
 8014a6c:	440a      	add	r2, r1
 8014a6e:	4291      	cmp	r1, r2
 8014a70:	f100 33ff 	add.w	r3, r0, #4294967295
 8014a74:	d100      	bne.n	8014a78 <memcpy+0xc>
 8014a76:	4770      	bx	lr
 8014a78:	b510      	push	{r4, lr}
 8014a7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014a7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014a82:	4291      	cmp	r1, r2
 8014a84:	d1f9      	bne.n	8014a7a <memcpy+0xe>
 8014a86:	bd10      	pop	{r4, pc}

08014a88 <memset>:
 8014a88:	4402      	add	r2, r0
 8014a8a:	4603      	mov	r3, r0
 8014a8c:	4293      	cmp	r3, r2
 8014a8e:	d100      	bne.n	8014a92 <memset+0xa>
 8014a90:	4770      	bx	lr
 8014a92:	f803 1b01 	strb.w	r1, [r3], #1
 8014a96:	e7f9      	b.n	8014a8c <memset+0x4>

08014a98 <siprintf>:
 8014a98:	b40e      	push	{r1, r2, r3}
 8014a9a:	b500      	push	{lr}
 8014a9c:	b09c      	sub	sp, #112	; 0x70
 8014a9e:	ab1d      	add	r3, sp, #116	; 0x74
 8014aa0:	9002      	str	r0, [sp, #8]
 8014aa2:	9006      	str	r0, [sp, #24]
 8014aa4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014aa8:	4809      	ldr	r0, [pc, #36]	; (8014ad0 <siprintf+0x38>)
 8014aaa:	9107      	str	r1, [sp, #28]
 8014aac:	9104      	str	r1, [sp, #16]
 8014aae:	4909      	ldr	r1, [pc, #36]	; (8014ad4 <siprintf+0x3c>)
 8014ab0:	f853 2b04 	ldr.w	r2, [r3], #4
 8014ab4:	9105      	str	r1, [sp, #20]
 8014ab6:	6800      	ldr	r0, [r0, #0]
 8014ab8:	9301      	str	r3, [sp, #4]
 8014aba:	a902      	add	r1, sp, #8
 8014abc:	f000 f868 	bl	8014b90 <_svfiprintf_r>
 8014ac0:	9b02      	ldr	r3, [sp, #8]
 8014ac2:	2200      	movs	r2, #0
 8014ac4:	701a      	strb	r2, [r3, #0]
 8014ac6:	b01c      	add	sp, #112	; 0x70
 8014ac8:	f85d eb04 	ldr.w	lr, [sp], #4
 8014acc:	b003      	add	sp, #12
 8014ace:	4770      	bx	lr
 8014ad0:	200000f4 	.word	0x200000f4
 8014ad4:	ffff0208 	.word	0xffff0208

08014ad8 <__ssputs_r>:
 8014ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014adc:	688e      	ldr	r6, [r1, #8]
 8014ade:	429e      	cmp	r6, r3
 8014ae0:	4682      	mov	sl, r0
 8014ae2:	460c      	mov	r4, r1
 8014ae4:	4690      	mov	r8, r2
 8014ae6:	461f      	mov	r7, r3
 8014ae8:	d838      	bhi.n	8014b5c <__ssputs_r+0x84>
 8014aea:	898a      	ldrh	r2, [r1, #12]
 8014aec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014af0:	d032      	beq.n	8014b58 <__ssputs_r+0x80>
 8014af2:	6825      	ldr	r5, [r4, #0]
 8014af4:	6909      	ldr	r1, [r1, #16]
 8014af6:	eba5 0901 	sub.w	r9, r5, r1
 8014afa:	6965      	ldr	r5, [r4, #20]
 8014afc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014b00:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014b04:	3301      	adds	r3, #1
 8014b06:	444b      	add	r3, r9
 8014b08:	106d      	asrs	r5, r5, #1
 8014b0a:	429d      	cmp	r5, r3
 8014b0c:	bf38      	it	cc
 8014b0e:	461d      	movcc	r5, r3
 8014b10:	0553      	lsls	r3, r2, #21
 8014b12:	d531      	bpl.n	8014b78 <__ssputs_r+0xa0>
 8014b14:	4629      	mov	r1, r5
 8014b16:	f000 fb55 	bl	80151c4 <_malloc_r>
 8014b1a:	4606      	mov	r6, r0
 8014b1c:	b950      	cbnz	r0, 8014b34 <__ssputs_r+0x5c>
 8014b1e:	230c      	movs	r3, #12
 8014b20:	f8ca 3000 	str.w	r3, [sl]
 8014b24:	89a3      	ldrh	r3, [r4, #12]
 8014b26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014b2a:	81a3      	strh	r3, [r4, #12]
 8014b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8014b30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014b34:	6921      	ldr	r1, [r4, #16]
 8014b36:	464a      	mov	r2, r9
 8014b38:	f7ff ff98 	bl	8014a6c <memcpy>
 8014b3c:	89a3      	ldrh	r3, [r4, #12]
 8014b3e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014b42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014b46:	81a3      	strh	r3, [r4, #12]
 8014b48:	6126      	str	r6, [r4, #16]
 8014b4a:	6165      	str	r5, [r4, #20]
 8014b4c:	444e      	add	r6, r9
 8014b4e:	eba5 0509 	sub.w	r5, r5, r9
 8014b52:	6026      	str	r6, [r4, #0]
 8014b54:	60a5      	str	r5, [r4, #8]
 8014b56:	463e      	mov	r6, r7
 8014b58:	42be      	cmp	r6, r7
 8014b5a:	d900      	bls.n	8014b5e <__ssputs_r+0x86>
 8014b5c:	463e      	mov	r6, r7
 8014b5e:	6820      	ldr	r0, [r4, #0]
 8014b60:	4632      	mov	r2, r6
 8014b62:	4641      	mov	r1, r8
 8014b64:	f000 faa8 	bl	80150b8 <memmove>
 8014b68:	68a3      	ldr	r3, [r4, #8]
 8014b6a:	1b9b      	subs	r3, r3, r6
 8014b6c:	60a3      	str	r3, [r4, #8]
 8014b6e:	6823      	ldr	r3, [r4, #0]
 8014b70:	4433      	add	r3, r6
 8014b72:	6023      	str	r3, [r4, #0]
 8014b74:	2000      	movs	r0, #0
 8014b76:	e7db      	b.n	8014b30 <__ssputs_r+0x58>
 8014b78:	462a      	mov	r2, r5
 8014b7a:	f000 fb97 	bl	80152ac <_realloc_r>
 8014b7e:	4606      	mov	r6, r0
 8014b80:	2800      	cmp	r0, #0
 8014b82:	d1e1      	bne.n	8014b48 <__ssputs_r+0x70>
 8014b84:	6921      	ldr	r1, [r4, #16]
 8014b86:	4650      	mov	r0, sl
 8014b88:	f000 fab0 	bl	80150ec <_free_r>
 8014b8c:	e7c7      	b.n	8014b1e <__ssputs_r+0x46>
	...

08014b90 <_svfiprintf_r>:
 8014b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b94:	4698      	mov	r8, r3
 8014b96:	898b      	ldrh	r3, [r1, #12]
 8014b98:	061b      	lsls	r3, r3, #24
 8014b9a:	b09d      	sub	sp, #116	; 0x74
 8014b9c:	4607      	mov	r7, r0
 8014b9e:	460d      	mov	r5, r1
 8014ba0:	4614      	mov	r4, r2
 8014ba2:	d50e      	bpl.n	8014bc2 <_svfiprintf_r+0x32>
 8014ba4:	690b      	ldr	r3, [r1, #16]
 8014ba6:	b963      	cbnz	r3, 8014bc2 <_svfiprintf_r+0x32>
 8014ba8:	2140      	movs	r1, #64	; 0x40
 8014baa:	f000 fb0b 	bl	80151c4 <_malloc_r>
 8014bae:	6028      	str	r0, [r5, #0]
 8014bb0:	6128      	str	r0, [r5, #16]
 8014bb2:	b920      	cbnz	r0, 8014bbe <_svfiprintf_r+0x2e>
 8014bb4:	230c      	movs	r3, #12
 8014bb6:	603b      	str	r3, [r7, #0]
 8014bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8014bbc:	e0d1      	b.n	8014d62 <_svfiprintf_r+0x1d2>
 8014bbe:	2340      	movs	r3, #64	; 0x40
 8014bc0:	616b      	str	r3, [r5, #20]
 8014bc2:	2300      	movs	r3, #0
 8014bc4:	9309      	str	r3, [sp, #36]	; 0x24
 8014bc6:	2320      	movs	r3, #32
 8014bc8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014bcc:	f8cd 800c 	str.w	r8, [sp, #12]
 8014bd0:	2330      	movs	r3, #48	; 0x30
 8014bd2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8014d7c <_svfiprintf_r+0x1ec>
 8014bd6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014bda:	f04f 0901 	mov.w	r9, #1
 8014bde:	4623      	mov	r3, r4
 8014be0:	469a      	mov	sl, r3
 8014be2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014be6:	b10a      	cbz	r2, 8014bec <_svfiprintf_r+0x5c>
 8014be8:	2a25      	cmp	r2, #37	; 0x25
 8014bea:	d1f9      	bne.n	8014be0 <_svfiprintf_r+0x50>
 8014bec:	ebba 0b04 	subs.w	fp, sl, r4
 8014bf0:	d00b      	beq.n	8014c0a <_svfiprintf_r+0x7a>
 8014bf2:	465b      	mov	r3, fp
 8014bf4:	4622      	mov	r2, r4
 8014bf6:	4629      	mov	r1, r5
 8014bf8:	4638      	mov	r0, r7
 8014bfa:	f7ff ff6d 	bl	8014ad8 <__ssputs_r>
 8014bfe:	3001      	adds	r0, #1
 8014c00:	f000 80aa 	beq.w	8014d58 <_svfiprintf_r+0x1c8>
 8014c04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014c06:	445a      	add	r2, fp
 8014c08:	9209      	str	r2, [sp, #36]	; 0x24
 8014c0a:	f89a 3000 	ldrb.w	r3, [sl]
 8014c0e:	2b00      	cmp	r3, #0
 8014c10:	f000 80a2 	beq.w	8014d58 <_svfiprintf_r+0x1c8>
 8014c14:	2300      	movs	r3, #0
 8014c16:	f04f 32ff 	mov.w	r2, #4294967295
 8014c1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014c1e:	f10a 0a01 	add.w	sl, sl, #1
 8014c22:	9304      	str	r3, [sp, #16]
 8014c24:	9307      	str	r3, [sp, #28]
 8014c26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014c2a:	931a      	str	r3, [sp, #104]	; 0x68
 8014c2c:	4654      	mov	r4, sl
 8014c2e:	2205      	movs	r2, #5
 8014c30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014c34:	4851      	ldr	r0, [pc, #324]	; (8014d7c <_svfiprintf_r+0x1ec>)
 8014c36:	f7eb faeb 	bl	8000210 <memchr>
 8014c3a:	9a04      	ldr	r2, [sp, #16]
 8014c3c:	b9d8      	cbnz	r0, 8014c76 <_svfiprintf_r+0xe6>
 8014c3e:	06d0      	lsls	r0, r2, #27
 8014c40:	bf44      	itt	mi
 8014c42:	2320      	movmi	r3, #32
 8014c44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014c48:	0711      	lsls	r1, r2, #28
 8014c4a:	bf44      	itt	mi
 8014c4c:	232b      	movmi	r3, #43	; 0x2b
 8014c4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014c52:	f89a 3000 	ldrb.w	r3, [sl]
 8014c56:	2b2a      	cmp	r3, #42	; 0x2a
 8014c58:	d015      	beq.n	8014c86 <_svfiprintf_r+0xf6>
 8014c5a:	9a07      	ldr	r2, [sp, #28]
 8014c5c:	4654      	mov	r4, sl
 8014c5e:	2000      	movs	r0, #0
 8014c60:	f04f 0c0a 	mov.w	ip, #10
 8014c64:	4621      	mov	r1, r4
 8014c66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014c6a:	3b30      	subs	r3, #48	; 0x30
 8014c6c:	2b09      	cmp	r3, #9
 8014c6e:	d94e      	bls.n	8014d0e <_svfiprintf_r+0x17e>
 8014c70:	b1b0      	cbz	r0, 8014ca0 <_svfiprintf_r+0x110>
 8014c72:	9207      	str	r2, [sp, #28]
 8014c74:	e014      	b.n	8014ca0 <_svfiprintf_r+0x110>
 8014c76:	eba0 0308 	sub.w	r3, r0, r8
 8014c7a:	fa09 f303 	lsl.w	r3, r9, r3
 8014c7e:	4313      	orrs	r3, r2
 8014c80:	9304      	str	r3, [sp, #16]
 8014c82:	46a2      	mov	sl, r4
 8014c84:	e7d2      	b.n	8014c2c <_svfiprintf_r+0x9c>
 8014c86:	9b03      	ldr	r3, [sp, #12]
 8014c88:	1d19      	adds	r1, r3, #4
 8014c8a:	681b      	ldr	r3, [r3, #0]
 8014c8c:	9103      	str	r1, [sp, #12]
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	bfbb      	ittet	lt
 8014c92:	425b      	neglt	r3, r3
 8014c94:	f042 0202 	orrlt.w	r2, r2, #2
 8014c98:	9307      	strge	r3, [sp, #28]
 8014c9a:	9307      	strlt	r3, [sp, #28]
 8014c9c:	bfb8      	it	lt
 8014c9e:	9204      	strlt	r2, [sp, #16]
 8014ca0:	7823      	ldrb	r3, [r4, #0]
 8014ca2:	2b2e      	cmp	r3, #46	; 0x2e
 8014ca4:	d10c      	bne.n	8014cc0 <_svfiprintf_r+0x130>
 8014ca6:	7863      	ldrb	r3, [r4, #1]
 8014ca8:	2b2a      	cmp	r3, #42	; 0x2a
 8014caa:	d135      	bne.n	8014d18 <_svfiprintf_r+0x188>
 8014cac:	9b03      	ldr	r3, [sp, #12]
 8014cae:	1d1a      	adds	r2, r3, #4
 8014cb0:	681b      	ldr	r3, [r3, #0]
 8014cb2:	9203      	str	r2, [sp, #12]
 8014cb4:	2b00      	cmp	r3, #0
 8014cb6:	bfb8      	it	lt
 8014cb8:	f04f 33ff 	movlt.w	r3, #4294967295
 8014cbc:	3402      	adds	r4, #2
 8014cbe:	9305      	str	r3, [sp, #20]
 8014cc0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8014d8c <_svfiprintf_r+0x1fc>
 8014cc4:	7821      	ldrb	r1, [r4, #0]
 8014cc6:	2203      	movs	r2, #3
 8014cc8:	4650      	mov	r0, sl
 8014cca:	f7eb faa1 	bl	8000210 <memchr>
 8014cce:	b140      	cbz	r0, 8014ce2 <_svfiprintf_r+0x152>
 8014cd0:	2340      	movs	r3, #64	; 0x40
 8014cd2:	eba0 000a 	sub.w	r0, r0, sl
 8014cd6:	fa03 f000 	lsl.w	r0, r3, r0
 8014cda:	9b04      	ldr	r3, [sp, #16]
 8014cdc:	4303      	orrs	r3, r0
 8014cde:	3401      	adds	r4, #1
 8014ce0:	9304      	str	r3, [sp, #16]
 8014ce2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014ce6:	4826      	ldr	r0, [pc, #152]	; (8014d80 <_svfiprintf_r+0x1f0>)
 8014ce8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014cec:	2206      	movs	r2, #6
 8014cee:	f7eb fa8f 	bl	8000210 <memchr>
 8014cf2:	2800      	cmp	r0, #0
 8014cf4:	d038      	beq.n	8014d68 <_svfiprintf_r+0x1d8>
 8014cf6:	4b23      	ldr	r3, [pc, #140]	; (8014d84 <_svfiprintf_r+0x1f4>)
 8014cf8:	bb1b      	cbnz	r3, 8014d42 <_svfiprintf_r+0x1b2>
 8014cfa:	9b03      	ldr	r3, [sp, #12]
 8014cfc:	3307      	adds	r3, #7
 8014cfe:	f023 0307 	bic.w	r3, r3, #7
 8014d02:	3308      	adds	r3, #8
 8014d04:	9303      	str	r3, [sp, #12]
 8014d06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d08:	4433      	add	r3, r6
 8014d0a:	9309      	str	r3, [sp, #36]	; 0x24
 8014d0c:	e767      	b.n	8014bde <_svfiprintf_r+0x4e>
 8014d0e:	fb0c 3202 	mla	r2, ip, r2, r3
 8014d12:	460c      	mov	r4, r1
 8014d14:	2001      	movs	r0, #1
 8014d16:	e7a5      	b.n	8014c64 <_svfiprintf_r+0xd4>
 8014d18:	2300      	movs	r3, #0
 8014d1a:	3401      	adds	r4, #1
 8014d1c:	9305      	str	r3, [sp, #20]
 8014d1e:	4619      	mov	r1, r3
 8014d20:	f04f 0c0a 	mov.w	ip, #10
 8014d24:	4620      	mov	r0, r4
 8014d26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014d2a:	3a30      	subs	r2, #48	; 0x30
 8014d2c:	2a09      	cmp	r2, #9
 8014d2e:	d903      	bls.n	8014d38 <_svfiprintf_r+0x1a8>
 8014d30:	2b00      	cmp	r3, #0
 8014d32:	d0c5      	beq.n	8014cc0 <_svfiprintf_r+0x130>
 8014d34:	9105      	str	r1, [sp, #20]
 8014d36:	e7c3      	b.n	8014cc0 <_svfiprintf_r+0x130>
 8014d38:	fb0c 2101 	mla	r1, ip, r1, r2
 8014d3c:	4604      	mov	r4, r0
 8014d3e:	2301      	movs	r3, #1
 8014d40:	e7f0      	b.n	8014d24 <_svfiprintf_r+0x194>
 8014d42:	ab03      	add	r3, sp, #12
 8014d44:	9300      	str	r3, [sp, #0]
 8014d46:	462a      	mov	r2, r5
 8014d48:	4b0f      	ldr	r3, [pc, #60]	; (8014d88 <_svfiprintf_r+0x1f8>)
 8014d4a:	a904      	add	r1, sp, #16
 8014d4c:	4638      	mov	r0, r7
 8014d4e:	f3af 8000 	nop.w
 8014d52:	1c42      	adds	r2, r0, #1
 8014d54:	4606      	mov	r6, r0
 8014d56:	d1d6      	bne.n	8014d06 <_svfiprintf_r+0x176>
 8014d58:	89ab      	ldrh	r3, [r5, #12]
 8014d5a:	065b      	lsls	r3, r3, #25
 8014d5c:	f53f af2c 	bmi.w	8014bb8 <_svfiprintf_r+0x28>
 8014d60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014d62:	b01d      	add	sp, #116	; 0x74
 8014d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d68:	ab03      	add	r3, sp, #12
 8014d6a:	9300      	str	r3, [sp, #0]
 8014d6c:	462a      	mov	r2, r5
 8014d6e:	4b06      	ldr	r3, [pc, #24]	; (8014d88 <_svfiprintf_r+0x1f8>)
 8014d70:	a904      	add	r1, sp, #16
 8014d72:	4638      	mov	r0, r7
 8014d74:	f000 f87a 	bl	8014e6c <_printf_i>
 8014d78:	e7eb      	b.n	8014d52 <_svfiprintf_r+0x1c2>
 8014d7a:	bf00      	nop
 8014d7c:	08018094 	.word	0x08018094
 8014d80:	0801809e 	.word	0x0801809e
 8014d84:	00000000 	.word	0x00000000
 8014d88:	08014ad9 	.word	0x08014ad9
 8014d8c:	0801809a 	.word	0x0801809a

08014d90 <_printf_common>:
 8014d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014d94:	4616      	mov	r6, r2
 8014d96:	4699      	mov	r9, r3
 8014d98:	688a      	ldr	r2, [r1, #8]
 8014d9a:	690b      	ldr	r3, [r1, #16]
 8014d9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014da0:	4293      	cmp	r3, r2
 8014da2:	bfb8      	it	lt
 8014da4:	4613      	movlt	r3, r2
 8014da6:	6033      	str	r3, [r6, #0]
 8014da8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014dac:	4607      	mov	r7, r0
 8014dae:	460c      	mov	r4, r1
 8014db0:	b10a      	cbz	r2, 8014db6 <_printf_common+0x26>
 8014db2:	3301      	adds	r3, #1
 8014db4:	6033      	str	r3, [r6, #0]
 8014db6:	6823      	ldr	r3, [r4, #0]
 8014db8:	0699      	lsls	r1, r3, #26
 8014dba:	bf42      	ittt	mi
 8014dbc:	6833      	ldrmi	r3, [r6, #0]
 8014dbe:	3302      	addmi	r3, #2
 8014dc0:	6033      	strmi	r3, [r6, #0]
 8014dc2:	6825      	ldr	r5, [r4, #0]
 8014dc4:	f015 0506 	ands.w	r5, r5, #6
 8014dc8:	d106      	bne.n	8014dd8 <_printf_common+0x48>
 8014dca:	f104 0a19 	add.w	sl, r4, #25
 8014dce:	68e3      	ldr	r3, [r4, #12]
 8014dd0:	6832      	ldr	r2, [r6, #0]
 8014dd2:	1a9b      	subs	r3, r3, r2
 8014dd4:	42ab      	cmp	r3, r5
 8014dd6:	dc26      	bgt.n	8014e26 <_printf_common+0x96>
 8014dd8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014ddc:	1e13      	subs	r3, r2, #0
 8014dde:	6822      	ldr	r2, [r4, #0]
 8014de0:	bf18      	it	ne
 8014de2:	2301      	movne	r3, #1
 8014de4:	0692      	lsls	r2, r2, #26
 8014de6:	d42b      	bmi.n	8014e40 <_printf_common+0xb0>
 8014de8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014dec:	4649      	mov	r1, r9
 8014dee:	4638      	mov	r0, r7
 8014df0:	47c0      	blx	r8
 8014df2:	3001      	adds	r0, #1
 8014df4:	d01e      	beq.n	8014e34 <_printf_common+0xa4>
 8014df6:	6823      	ldr	r3, [r4, #0]
 8014df8:	68e5      	ldr	r5, [r4, #12]
 8014dfa:	6832      	ldr	r2, [r6, #0]
 8014dfc:	f003 0306 	and.w	r3, r3, #6
 8014e00:	2b04      	cmp	r3, #4
 8014e02:	bf08      	it	eq
 8014e04:	1aad      	subeq	r5, r5, r2
 8014e06:	68a3      	ldr	r3, [r4, #8]
 8014e08:	6922      	ldr	r2, [r4, #16]
 8014e0a:	bf0c      	ite	eq
 8014e0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014e10:	2500      	movne	r5, #0
 8014e12:	4293      	cmp	r3, r2
 8014e14:	bfc4      	itt	gt
 8014e16:	1a9b      	subgt	r3, r3, r2
 8014e18:	18ed      	addgt	r5, r5, r3
 8014e1a:	2600      	movs	r6, #0
 8014e1c:	341a      	adds	r4, #26
 8014e1e:	42b5      	cmp	r5, r6
 8014e20:	d11a      	bne.n	8014e58 <_printf_common+0xc8>
 8014e22:	2000      	movs	r0, #0
 8014e24:	e008      	b.n	8014e38 <_printf_common+0xa8>
 8014e26:	2301      	movs	r3, #1
 8014e28:	4652      	mov	r2, sl
 8014e2a:	4649      	mov	r1, r9
 8014e2c:	4638      	mov	r0, r7
 8014e2e:	47c0      	blx	r8
 8014e30:	3001      	adds	r0, #1
 8014e32:	d103      	bne.n	8014e3c <_printf_common+0xac>
 8014e34:	f04f 30ff 	mov.w	r0, #4294967295
 8014e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014e3c:	3501      	adds	r5, #1
 8014e3e:	e7c6      	b.n	8014dce <_printf_common+0x3e>
 8014e40:	18e1      	adds	r1, r4, r3
 8014e42:	1c5a      	adds	r2, r3, #1
 8014e44:	2030      	movs	r0, #48	; 0x30
 8014e46:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014e4a:	4422      	add	r2, r4
 8014e4c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014e50:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014e54:	3302      	adds	r3, #2
 8014e56:	e7c7      	b.n	8014de8 <_printf_common+0x58>
 8014e58:	2301      	movs	r3, #1
 8014e5a:	4622      	mov	r2, r4
 8014e5c:	4649      	mov	r1, r9
 8014e5e:	4638      	mov	r0, r7
 8014e60:	47c0      	blx	r8
 8014e62:	3001      	adds	r0, #1
 8014e64:	d0e6      	beq.n	8014e34 <_printf_common+0xa4>
 8014e66:	3601      	adds	r6, #1
 8014e68:	e7d9      	b.n	8014e1e <_printf_common+0x8e>
	...

08014e6c <_printf_i>:
 8014e6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014e70:	7e0f      	ldrb	r7, [r1, #24]
 8014e72:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014e74:	2f78      	cmp	r7, #120	; 0x78
 8014e76:	4691      	mov	r9, r2
 8014e78:	4680      	mov	r8, r0
 8014e7a:	460c      	mov	r4, r1
 8014e7c:	469a      	mov	sl, r3
 8014e7e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8014e82:	d807      	bhi.n	8014e94 <_printf_i+0x28>
 8014e84:	2f62      	cmp	r7, #98	; 0x62
 8014e86:	d80a      	bhi.n	8014e9e <_printf_i+0x32>
 8014e88:	2f00      	cmp	r7, #0
 8014e8a:	f000 80d8 	beq.w	801503e <_printf_i+0x1d2>
 8014e8e:	2f58      	cmp	r7, #88	; 0x58
 8014e90:	f000 80a3 	beq.w	8014fda <_printf_i+0x16e>
 8014e94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014e98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014e9c:	e03a      	b.n	8014f14 <_printf_i+0xa8>
 8014e9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014ea2:	2b15      	cmp	r3, #21
 8014ea4:	d8f6      	bhi.n	8014e94 <_printf_i+0x28>
 8014ea6:	a101      	add	r1, pc, #4	; (adr r1, 8014eac <_printf_i+0x40>)
 8014ea8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014eac:	08014f05 	.word	0x08014f05
 8014eb0:	08014f19 	.word	0x08014f19
 8014eb4:	08014e95 	.word	0x08014e95
 8014eb8:	08014e95 	.word	0x08014e95
 8014ebc:	08014e95 	.word	0x08014e95
 8014ec0:	08014e95 	.word	0x08014e95
 8014ec4:	08014f19 	.word	0x08014f19
 8014ec8:	08014e95 	.word	0x08014e95
 8014ecc:	08014e95 	.word	0x08014e95
 8014ed0:	08014e95 	.word	0x08014e95
 8014ed4:	08014e95 	.word	0x08014e95
 8014ed8:	08015025 	.word	0x08015025
 8014edc:	08014f49 	.word	0x08014f49
 8014ee0:	08015007 	.word	0x08015007
 8014ee4:	08014e95 	.word	0x08014e95
 8014ee8:	08014e95 	.word	0x08014e95
 8014eec:	08015047 	.word	0x08015047
 8014ef0:	08014e95 	.word	0x08014e95
 8014ef4:	08014f49 	.word	0x08014f49
 8014ef8:	08014e95 	.word	0x08014e95
 8014efc:	08014e95 	.word	0x08014e95
 8014f00:	0801500f 	.word	0x0801500f
 8014f04:	682b      	ldr	r3, [r5, #0]
 8014f06:	1d1a      	adds	r2, r3, #4
 8014f08:	681b      	ldr	r3, [r3, #0]
 8014f0a:	602a      	str	r2, [r5, #0]
 8014f0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014f10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014f14:	2301      	movs	r3, #1
 8014f16:	e0a3      	b.n	8015060 <_printf_i+0x1f4>
 8014f18:	6820      	ldr	r0, [r4, #0]
 8014f1a:	6829      	ldr	r1, [r5, #0]
 8014f1c:	0606      	lsls	r6, r0, #24
 8014f1e:	f101 0304 	add.w	r3, r1, #4
 8014f22:	d50a      	bpl.n	8014f3a <_printf_i+0xce>
 8014f24:	680e      	ldr	r6, [r1, #0]
 8014f26:	602b      	str	r3, [r5, #0]
 8014f28:	2e00      	cmp	r6, #0
 8014f2a:	da03      	bge.n	8014f34 <_printf_i+0xc8>
 8014f2c:	232d      	movs	r3, #45	; 0x2d
 8014f2e:	4276      	negs	r6, r6
 8014f30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014f34:	485e      	ldr	r0, [pc, #376]	; (80150b0 <_printf_i+0x244>)
 8014f36:	230a      	movs	r3, #10
 8014f38:	e019      	b.n	8014f6e <_printf_i+0x102>
 8014f3a:	680e      	ldr	r6, [r1, #0]
 8014f3c:	602b      	str	r3, [r5, #0]
 8014f3e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014f42:	bf18      	it	ne
 8014f44:	b236      	sxthne	r6, r6
 8014f46:	e7ef      	b.n	8014f28 <_printf_i+0xbc>
 8014f48:	682b      	ldr	r3, [r5, #0]
 8014f4a:	6820      	ldr	r0, [r4, #0]
 8014f4c:	1d19      	adds	r1, r3, #4
 8014f4e:	6029      	str	r1, [r5, #0]
 8014f50:	0601      	lsls	r1, r0, #24
 8014f52:	d501      	bpl.n	8014f58 <_printf_i+0xec>
 8014f54:	681e      	ldr	r6, [r3, #0]
 8014f56:	e002      	b.n	8014f5e <_printf_i+0xf2>
 8014f58:	0646      	lsls	r6, r0, #25
 8014f5a:	d5fb      	bpl.n	8014f54 <_printf_i+0xe8>
 8014f5c:	881e      	ldrh	r6, [r3, #0]
 8014f5e:	4854      	ldr	r0, [pc, #336]	; (80150b0 <_printf_i+0x244>)
 8014f60:	2f6f      	cmp	r7, #111	; 0x6f
 8014f62:	bf0c      	ite	eq
 8014f64:	2308      	moveq	r3, #8
 8014f66:	230a      	movne	r3, #10
 8014f68:	2100      	movs	r1, #0
 8014f6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014f6e:	6865      	ldr	r5, [r4, #4]
 8014f70:	60a5      	str	r5, [r4, #8]
 8014f72:	2d00      	cmp	r5, #0
 8014f74:	bfa2      	ittt	ge
 8014f76:	6821      	ldrge	r1, [r4, #0]
 8014f78:	f021 0104 	bicge.w	r1, r1, #4
 8014f7c:	6021      	strge	r1, [r4, #0]
 8014f7e:	b90e      	cbnz	r6, 8014f84 <_printf_i+0x118>
 8014f80:	2d00      	cmp	r5, #0
 8014f82:	d04d      	beq.n	8015020 <_printf_i+0x1b4>
 8014f84:	4615      	mov	r5, r2
 8014f86:	fbb6 f1f3 	udiv	r1, r6, r3
 8014f8a:	fb03 6711 	mls	r7, r3, r1, r6
 8014f8e:	5dc7      	ldrb	r7, [r0, r7]
 8014f90:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014f94:	4637      	mov	r7, r6
 8014f96:	42bb      	cmp	r3, r7
 8014f98:	460e      	mov	r6, r1
 8014f9a:	d9f4      	bls.n	8014f86 <_printf_i+0x11a>
 8014f9c:	2b08      	cmp	r3, #8
 8014f9e:	d10b      	bne.n	8014fb8 <_printf_i+0x14c>
 8014fa0:	6823      	ldr	r3, [r4, #0]
 8014fa2:	07de      	lsls	r6, r3, #31
 8014fa4:	d508      	bpl.n	8014fb8 <_printf_i+0x14c>
 8014fa6:	6923      	ldr	r3, [r4, #16]
 8014fa8:	6861      	ldr	r1, [r4, #4]
 8014faa:	4299      	cmp	r1, r3
 8014fac:	bfde      	ittt	le
 8014fae:	2330      	movle	r3, #48	; 0x30
 8014fb0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014fb4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014fb8:	1b52      	subs	r2, r2, r5
 8014fba:	6122      	str	r2, [r4, #16]
 8014fbc:	f8cd a000 	str.w	sl, [sp]
 8014fc0:	464b      	mov	r3, r9
 8014fc2:	aa03      	add	r2, sp, #12
 8014fc4:	4621      	mov	r1, r4
 8014fc6:	4640      	mov	r0, r8
 8014fc8:	f7ff fee2 	bl	8014d90 <_printf_common>
 8014fcc:	3001      	adds	r0, #1
 8014fce:	d14c      	bne.n	801506a <_printf_i+0x1fe>
 8014fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8014fd4:	b004      	add	sp, #16
 8014fd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014fda:	4835      	ldr	r0, [pc, #212]	; (80150b0 <_printf_i+0x244>)
 8014fdc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8014fe0:	6829      	ldr	r1, [r5, #0]
 8014fe2:	6823      	ldr	r3, [r4, #0]
 8014fe4:	f851 6b04 	ldr.w	r6, [r1], #4
 8014fe8:	6029      	str	r1, [r5, #0]
 8014fea:	061d      	lsls	r5, r3, #24
 8014fec:	d514      	bpl.n	8015018 <_printf_i+0x1ac>
 8014fee:	07df      	lsls	r7, r3, #31
 8014ff0:	bf44      	itt	mi
 8014ff2:	f043 0320 	orrmi.w	r3, r3, #32
 8014ff6:	6023      	strmi	r3, [r4, #0]
 8014ff8:	b91e      	cbnz	r6, 8015002 <_printf_i+0x196>
 8014ffa:	6823      	ldr	r3, [r4, #0]
 8014ffc:	f023 0320 	bic.w	r3, r3, #32
 8015000:	6023      	str	r3, [r4, #0]
 8015002:	2310      	movs	r3, #16
 8015004:	e7b0      	b.n	8014f68 <_printf_i+0xfc>
 8015006:	6823      	ldr	r3, [r4, #0]
 8015008:	f043 0320 	orr.w	r3, r3, #32
 801500c:	6023      	str	r3, [r4, #0]
 801500e:	2378      	movs	r3, #120	; 0x78
 8015010:	4828      	ldr	r0, [pc, #160]	; (80150b4 <_printf_i+0x248>)
 8015012:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015016:	e7e3      	b.n	8014fe0 <_printf_i+0x174>
 8015018:	0659      	lsls	r1, r3, #25
 801501a:	bf48      	it	mi
 801501c:	b2b6      	uxthmi	r6, r6
 801501e:	e7e6      	b.n	8014fee <_printf_i+0x182>
 8015020:	4615      	mov	r5, r2
 8015022:	e7bb      	b.n	8014f9c <_printf_i+0x130>
 8015024:	682b      	ldr	r3, [r5, #0]
 8015026:	6826      	ldr	r6, [r4, #0]
 8015028:	6961      	ldr	r1, [r4, #20]
 801502a:	1d18      	adds	r0, r3, #4
 801502c:	6028      	str	r0, [r5, #0]
 801502e:	0635      	lsls	r5, r6, #24
 8015030:	681b      	ldr	r3, [r3, #0]
 8015032:	d501      	bpl.n	8015038 <_printf_i+0x1cc>
 8015034:	6019      	str	r1, [r3, #0]
 8015036:	e002      	b.n	801503e <_printf_i+0x1d2>
 8015038:	0670      	lsls	r0, r6, #25
 801503a:	d5fb      	bpl.n	8015034 <_printf_i+0x1c8>
 801503c:	8019      	strh	r1, [r3, #0]
 801503e:	2300      	movs	r3, #0
 8015040:	6123      	str	r3, [r4, #16]
 8015042:	4615      	mov	r5, r2
 8015044:	e7ba      	b.n	8014fbc <_printf_i+0x150>
 8015046:	682b      	ldr	r3, [r5, #0]
 8015048:	1d1a      	adds	r2, r3, #4
 801504a:	602a      	str	r2, [r5, #0]
 801504c:	681d      	ldr	r5, [r3, #0]
 801504e:	6862      	ldr	r2, [r4, #4]
 8015050:	2100      	movs	r1, #0
 8015052:	4628      	mov	r0, r5
 8015054:	f7eb f8dc 	bl	8000210 <memchr>
 8015058:	b108      	cbz	r0, 801505e <_printf_i+0x1f2>
 801505a:	1b40      	subs	r0, r0, r5
 801505c:	6060      	str	r0, [r4, #4]
 801505e:	6863      	ldr	r3, [r4, #4]
 8015060:	6123      	str	r3, [r4, #16]
 8015062:	2300      	movs	r3, #0
 8015064:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015068:	e7a8      	b.n	8014fbc <_printf_i+0x150>
 801506a:	6923      	ldr	r3, [r4, #16]
 801506c:	462a      	mov	r2, r5
 801506e:	4649      	mov	r1, r9
 8015070:	4640      	mov	r0, r8
 8015072:	47d0      	blx	sl
 8015074:	3001      	adds	r0, #1
 8015076:	d0ab      	beq.n	8014fd0 <_printf_i+0x164>
 8015078:	6823      	ldr	r3, [r4, #0]
 801507a:	079b      	lsls	r3, r3, #30
 801507c:	d413      	bmi.n	80150a6 <_printf_i+0x23a>
 801507e:	68e0      	ldr	r0, [r4, #12]
 8015080:	9b03      	ldr	r3, [sp, #12]
 8015082:	4298      	cmp	r0, r3
 8015084:	bfb8      	it	lt
 8015086:	4618      	movlt	r0, r3
 8015088:	e7a4      	b.n	8014fd4 <_printf_i+0x168>
 801508a:	2301      	movs	r3, #1
 801508c:	4632      	mov	r2, r6
 801508e:	4649      	mov	r1, r9
 8015090:	4640      	mov	r0, r8
 8015092:	47d0      	blx	sl
 8015094:	3001      	adds	r0, #1
 8015096:	d09b      	beq.n	8014fd0 <_printf_i+0x164>
 8015098:	3501      	adds	r5, #1
 801509a:	68e3      	ldr	r3, [r4, #12]
 801509c:	9903      	ldr	r1, [sp, #12]
 801509e:	1a5b      	subs	r3, r3, r1
 80150a0:	42ab      	cmp	r3, r5
 80150a2:	dcf2      	bgt.n	801508a <_printf_i+0x21e>
 80150a4:	e7eb      	b.n	801507e <_printf_i+0x212>
 80150a6:	2500      	movs	r5, #0
 80150a8:	f104 0619 	add.w	r6, r4, #25
 80150ac:	e7f5      	b.n	801509a <_printf_i+0x22e>
 80150ae:	bf00      	nop
 80150b0:	080180a5 	.word	0x080180a5
 80150b4:	080180b6 	.word	0x080180b6

080150b8 <memmove>:
 80150b8:	4288      	cmp	r0, r1
 80150ba:	b510      	push	{r4, lr}
 80150bc:	eb01 0402 	add.w	r4, r1, r2
 80150c0:	d902      	bls.n	80150c8 <memmove+0x10>
 80150c2:	4284      	cmp	r4, r0
 80150c4:	4623      	mov	r3, r4
 80150c6:	d807      	bhi.n	80150d8 <memmove+0x20>
 80150c8:	1e43      	subs	r3, r0, #1
 80150ca:	42a1      	cmp	r1, r4
 80150cc:	d008      	beq.n	80150e0 <memmove+0x28>
 80150ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80150d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80150d6:	e7f8      	b.n	80150ca <memmove+0x12>
 80150d8:	4402      	add	r2, r0
 80150da:	4601      	mov	r1, r0
 80150dc:	428a      	cmp	r2, r1
 80150de:	d100      	bne.n	80150e2 <memmove+0x2a>
 80150e0:	bd10      	pop	{r4, pc}
 80150e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80150e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80150ea:	e7f7      	b.n	80150dc <memmove+0x24>

080150ec <_free_r>:
 80150ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80150ee:	2900      	cmp	r1, #0
 80150f0:	d044      	beq.n	801517c <_free_r+0x90>
 80150f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80150f6:	9001      	str	r0, [sp, #4]
 80150f8:	2b00      	cmp	r3, #0
 80150fa:	f1a1 0404 	sub.w	r4, r1, #4
 80150fe:	bfb8      	it	lt
 8015100:	18e4      	addlt	r4, r4, r3
 8015102:	f000 f913 	bl	801532c <__malloc_lock>
 8015106:	4a1e      	ldr	r2, [pc, #120]	; (8015180 <_free_r+0x94>)
 8015108:	9801      	ldr	r0, [sp, #4]
 801510a:	6813      	ldr	r3, [r2, #0]
 801510c:	b933      	cbnz	r3, 801511c <_free_r+0x30>
 801510e:	6063      	str	r3, [r4, #4]
 8015110:	6014      	str	r4, [r2, #0]
 8015112:	b003      	add	sp, #12
 8015114:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015118:	f000 b90e 	b.w	8015338 <__malloc_unlock>
 801511c:	42a3      	cmp	r3, r4
 801511e:	d908      	bls.n	8015132 <_free_r+0x46>
 8015120:	6825      	ldr	r5, [r4, #0]
 8015122:	1961      	adds	r1, r4, r5
 8015124:	428b      	cmp	r3, r1
 8015126:	bf01      	itttt	eq
 8015128:	6819      	ldreq	r1, [r3, #0]
 801512a:	685b      	ldreq	r3, [r3, #4]
 801512c:	1949      	addeq	r1, r1, r5
 801512e:	6021      	streq	r1, [r4, #0]
 8015130:	e7ed      	b.n	801510e <_free_r+0x22>
 8015132:	461a      	mov	r2, r3
 8015134:	685b      	ldr	r3, [r3, #4]
 8015136:	b10b      	cbz	r3, 801513c <_free_r+0x50>
 8015138:	42a3      	cmp	r3, r4
 801513a:	d9fa      	bls.n	8015132 <_free_r+0x46>
 801513c:	6811      	ldr	r1, [r2, #0]
 801513e:	1855      	adds	r5, r2, r1
 8015140:	42a5      	cmp	r5, r4
 8015142:	d10b      	bne.n	801515c <_free_r+0x70>
 8015144:	6824      	ldr	r4, [r4, #0]
 8015146:	4421      	add	r1, r4
 8015148:	1854      	adds	r4, r2, r1
 801514a:	42a3      	cmp	r3, r4
 801514c:	6011      	str	r1, [r2, #0]
 801514e:	d1e0      	bne.n	8015112 <_free_r+0x26>
 8015150:	681c      	ldr	r4, [r3, #0]
 8015152:	685b      	ldr	r3, [r3, #4]
 8015154:	6053      	str	r3, [r2, #4]
 8015156:	4421      	add	r1, r4
 8015158:	6011      	str	r1, [r2, #0]
 801515a:	e7da      	b.n	8015112 <_free_r+0x26>
 801515c:	d902      	bls.n	8015164 <_free_r+0x78>
 801515e:	230c      	movs	r3, #12
 8015160:	6003      	str	r3, [r0, #0]
 8015162:	e7d6      	b.n	8015112 <_free_r+0x26>
 8015164:	6825      	ldr	r5, [r4, #0]
 8015166:	1961      	adds	r1, r4, r5
 8015168:	428b      	cmp	r3, r1
 801516a:	bf04      	itt	eq
 801516c:	6819      	ldreq	r1, [r3, #0]
 801516e:	685b      	ldreq	r3, [r3, #4]
 8015170:	6063      	str	r3, [r4, #4]
 8015172:	bf04      	itt	eq
 8015174:	1949      	addeq	r1, r1, r5
 8015176:	6021      	streq	r1, [r4, #0]
 8015178:	6054      	str	r4, [r2, #4]
 801517a:	e7ca      	b.n	8015112 <_free_r+0x26>
 801517c:	b003      	add	sp, #12
 801517e:	bd30      	pop	{r4, r5, pc}
 8015180:	200094f4 	.word	0x200094f4

08015184 <sbrk_aligned>:
 8015184:	b570      	push	{r4, r5, r6, lr}
 8015186:	4e0e      	ldr	r6, [pc, #56]	; (80151c0 <sbrk_aligned+0x3c>)
 8015188:	460c      	mov	r4, r1
 801518a:	6831      	ldr	r1, [r6, #0]
 801518c:	4605      	mov	r5, r0
 801518e:	b911      	cbnz	r1, 8015196 <sbrk_aligned+0x12>
 8015190:	f000 f8bc 	bl	801530c <_sbrk_r>
 8015194:	6030      	str	r0, [r6, #0]
 8015196:	4621      	mov	r1, r4
 8015198:	4628      	mov	r0, r5
 801519a:	f000 f8b7 	bl	801530c <_sbrk_r>
 801519e:	1c43      	adds	r3, r0, #1
 80151a0:	d00a      	beq.n	80151b8 <sbrk_aligned+0x34>
 80151a2:	1cc4      	adds	r4, r0, #3
 80151a4:	f024 0403 	bic.w	r4, r4, #3
 80151a8:	42a0      	cmp	r0, r4
 80151aa:	d007      	beq.n	80151bc <sbrk_aligned+0x38>
 80151ac:	1a21      	subs	r1, r4, r0
 80151ae:	4628      	mov	r0, r5
 80151b0:	f000 f8ac 	bl	801530c <_sbrk_r>
 80151b4:	3001      	adds	r0, #1
 80151b6:	d101      	bne.n	80151bc <sbrk_aligned+0x38>
 80151b8:	f04f 34ff 	mov.w	r4, #4294967295
 80151bc:	4620      	mov	r0, r4
 80151be:	bd70      	pop	{r4, r5, r6, pc}
 80151c0:	200094f8 	.word	0x200094f8

080151c4 <_malloc_r>:
 80151c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80151c8:	1ccd      	adds	r5, r1, #3
 80151ca:	f025 0503 	bic.w	r5, r5, #3
 80151ce:	3508      	adds	r5, #8
 80151d0:	2d0c      	cmp	r5, #12
 80151d2:	bf38      	it	cc
 80151d4:	250c      	movcc	r5, #12
 80151d6:	2d00      	cmp	r5, #0
 80151d8:	4607      	mov	r7, r0
 80151da:	db01      	blt.n	80151e0 <_malloc_r+0x1c>
 80151dc:	42a9      	cmp	r1, r5
 80151de:	d905      	bls.n	80151ec <_malloc_r+0x28>
 80151e0:	230c      	movs	r3, #12
 80151e2:	603b      	str	r3, [r7, #0]
 80151e4:	2600      	movs	r6, #0
 80151e6:	4630      	mov	r0, r6
 80151e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80151ec:	4e2e      	ldr	r6, [pc, #184]	; (80152a8 <_malloc_r+0xe4>)
 80151ee:	f000 f89d 	bl	801532c <__malloc_lock>
 80151f2:	6833      	ldr	r3, [r6, #0]
 80151f4:	461c      	mov	r4, r3
 80151f6:	bb34      	cbnz	r4, 8015246 <_malloc_r+0x82>
 80151f8:	4629      	mov	r1, r5
 80151fa:	4638      	mov	r0, r7
 80151fc:	f7ff ffc2 	bl	8015184 <sbrk_aligned>
 8015200:	1c43      	adds	r3, r0, #1
 8015202:	4604      	mov	r4, r0
 8015204:	d14d      	bne.n	80152a2 <_malloc_r+0xde>
 8015206:	6834      	ldr	r4, [r6, #0]
 8015208:	4626      	mov	r6, r4
 801520a:	2e00      	cmp	r6, #0
 801520c:	d140      	bne.n	8015290 <_malloc_r+0xcc>
 801520e:	6823      	ldr	r3, [r4, #0]
 8015210:	4631      	mov	r1, r6
 8015212:	4638      	mov	r0, r7
 8015214:	eb04 0803 	add.w	r8, r4, r3
 8015218:	f000 f878 	bl	801530c <_sbrk_r>
 801521c:	4580      	cmp	r8, r0
 801521e:	d13a      	bne.n	8015296 <_malloc_r+0xd2>
 8015220:	6821      	ldr	r1, [r4, #0]
 8015222:	3503      	adds	r5, #3
 8015224:	1a6d      	subs	r5, r5, r1
 8015226:	f025 0503 	bic.w	r5, r5, #3
 801522a:	3508      	adds	r5, #8
 801522c:	2d0c      	cmp	r5, #12
 801522e:	bf38      	it	cc
 8015230:	250c      	movcc	r5, #12
 8015232:	4629      	mov	r1, r5
 8015234:	4638      	mov	r0, r7
 8015236:	f7ff ffa5 	bl	8015184 <sbrk_aligned>
 801523a:	3001      	adds	r0, #1
 801523c:	d02b      	beq.n	8015296 <_malloc_r+0xd2>
 801523e:	6823      	ldr	r3, [r4, #0]
 8015240:	442b      	add	r3, r5
 8015242:	6023      	str	r3, [r4, #0]
 8015244:	e00e      	b.n	8015264 <_malloc_r+0xa0>
 8015246:	6822      	ldr	r2, [r4, #0]
 8015248:	1b52      	subs	r2, r2, r5
 801524a:	d41e      	bmi.n	801528a <_malloc_r+0xc6>
 801524c:	2a0b      	cmp	r2, #11
 801524e:	d916      	bls.n	801527e <_malloc_r+0xba>
 8015250:	1961      	adds	r1, r4, r5
 8015252:	42a3      	cmp	r3, r4
 8015254:	6025      	str	r5, [r4, #0]
 8015256:	bf18      	it	ne
 8015258:	6059      	strne	r1, [r3, #4]
 801525a:	6863      	ldr	r3, [r4, #4]
 801525c:	bf08      	it	eq
 801525e:	6031      	streq	r1, [r6, #0]
 8015260:	5162      	str	r2, [r4, r5]
 8015262:	604b      	str	r3, [r1, #4]
 8015264:	4638      	mov	r0, r7
 8015266:	f104 060b 	add.w	r6, r4, #11
 801526a:	f000 f865 	bl	8015338 <__malloc_unlock>
 801526e:	f026 0607 	bic.w	r6, r6, #7
 8015272:	1d23      	adds	r3, r4, #4
 8015274:	1af2      	subs	r2, r6, r3
 8015276:	d0b6      	beq.n	80151e6 <_malloc_r+0x22>
 8015278:	1b9b      	subs	r3, r3, r6
 801527a:	50a3      	str	r3, [r4, r2]
 801527c:	e7b3      	b.n	80151e6 <_malloc_r+0x22>
 801527e:	6862      	ldr	r2, [r4, #4]
 8015280:	42a3      	cmp	r3, r4
 8015282:	bf0c      	ite	eq
 8015284:	6032      	streq	r2, [r6, #0]
 8015286:	605a      	strne	r2, [r3, #4]
 8015288:	e7ec      	b.n	8015264 <_malloc_r+0xa0>
 801528a:	4623      	mov	r3, r4
 801528c:	6864      	ldr	r4, [r4, #4]
 801528e:	e7b2      	b.n	80151f6 <_malloc_r+0x32>
 8015290:	4634      	mov	r4, r6
 8015292:	6876      	ldr	r6, [r6, #4]
 8015294:	e7b9      	b.n	801520a <_malloc_r+0x46>
 8015296:	230c      	movs	r3, #12
 8015298:	603b      	str	r3, [r7, #0]
 801529a:	4638      	mov	r0, r7
 801529c:	f000 f84c 	bl	8015338 <__malloc_unlock>
 80152a0:	e7a1      	b.n	80151e6 <_malloc_r+0x22>
 80152a2:	6025      	str	r5, [r4, #0]
 80152a4:	e7de      	b.n	8015264 <_malloc_r+0xa0>
 80152a6:	bf00      	nop
 80152a8:	200094f4 	.word	0x200094f4

080152ac <_realloc_r>:
 80152ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80152b0:	4680      	mov	r8, r0
 80152b2:	4614      	mov	r4, r2
 80152b4:	460e      	mov	r6, r1
 80152b6:	b921      	cbnz	r1, 80152c2 <_realloc_r+0x16>
 80152b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80152bc:	4611      	mov	r1, r2
 80152be:	f7ff bf81 	b.w	80151c4 <_malloc_r>
 80152c2:	b92a      	cbnz	r2, 80152d0 <_realloc_r+0x24>
 80152c4:	f7ff ff12 	bl	80150ec <_free_r>
 80152c8:	4625      	mov	r5, r4
 80152ca:	4628      	mov	r0, r5
 80152cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80152d0:	f000 f838 	bl	8015344 <_malloc_usable_size_r>
 80152d4:	4284      	cmp	r4, r0
 80152d6:	4607      	mov	r7, r0
 80152d8:	d802      	bhi.n	80152e0 <_realloc_r+0x34>
 80152da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80152de:	d812      	bhi.n	8015306 <_realloc_r+0x5a>
 80152e0:	4621      	mov	r1, r4
 80152e2:	4640      	mov	r0, r8
 80152e4:	f7ff ff6e 	bl	80151c4 <_malloc_r>
 80152e8:	4605      	mov	r5, r0
 80152ea:	2800      	cmp	r0, #0
 80152ec:	d0ed      	beq.n	80152ca <_realloc_r+0x1e>
 80152ee:	42bc      	cmp	r4, r7
 80152f0:	4622      	mov	r2, r4
 80152f2:	4631      	mov	r1, r6
 80152f4:	bf28      	it	cs
 80152f6:	463a      	movcs	r2, r7
 80152f8:	f7ff fbb8 	bl	8014a6c <memcpy>
 80152fc:	4631      	mov	r1, r6
 80152fe:	4640      	mov	r0, r8
 8015300:	f7ff fef4 	bl	80150ec <_free_r>
 8015304:	e7e1      	b.n	80152ca <_realloc_r+0x1e>
 8015306:	4635      	mov	r5, r6
 8015308:	e7df      	b.n	80152ca <_realloc_r+0x1e>
	...

0801530c <_sbrk_r>:
 801530c:	b538      	push	{r3, r4, r5, lr}
 801530e:	4d06      	ldr	r5, [pc, #24]	; (8015328 <_sbrk_r+0x1c>)
 8015310:	2300      	movs	r3, #0
 8015312:	4604      	mov	r4, r0
 8015314:	4608      	mov	r0, r1
 8015316:	602b      	str	r3, [r5, #0]
 8015318:	f7f0 fb2a 	bl	8005970 <_sbrk>
 801531c:	1c43      	adds	r3, r0, #1
 801531e:	d102      	bne.n	8015326 <_sbrk_r+0x1a>
 8015320:	682b      	ldr	r3, [r5, #0]
 8015322:	b103      	cbz	r3, 8015326 <_sbrk_r+0x1a>
 8015324:	6023      	str	r3, [r4, #0]
 8015326:	bd38      	pop	{r3, r4, r5, pc}
 8015328:	200094fc 	.word	0x200094fc

0801532c <__malloc_lock>:
 801532c:	4801      	ldr	r0, [pc, #4]	; (8015334 <__malloc_lock+0x8>)
 801532e:	f000 b811 	b.w	8015354 <__retarget_lock_acquire_recursive>
 8015332:	bf00      	nop
 8015334:	20009500 	.word	0x20009500

08015338 <__malloc_unlock>:
 8015338:	4801      	ldr	r0, [pc, #4]	; (8015340 <__malloc_unlock+0x8>)
 801533a:	f000 b80c 	b.w	8015356 <__retarget_lock_release_recursive>
 801533e:	bf00      	nop
 8015340:	20009500 	.word	0x20009500

08015344 <_malloc_usable_size_r>:
 8015344:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015348:	1f18      	subs	r0, r3, #4
 801534a:	2b00      	cmp	r3, #0
 801534c:	bfbc      	itt	lt
 801534e:	580b      	ldrlt	r3, [r1, r0]
 8015350:	18c0      	addlt	r0, r0, r3
 8015352:	4770      	bx	lr

08015354 <__retarget_lock_acquire_recursive>:
 8015354:	4770      	bx	lr

08015356 <__retarget_lock_release_recursive>:
 8015356:	4770      	bx	lr

08015358 <_init>:
 8015358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801535a:	bf00      	nop
 801535c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801535e:	bc08      	pop	{r3}
 8015360:	469e      	mov	lr, r3
 8015362:	4770      	bx	lr

08015364 <_fini>:
 8015364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015366:	bf00      	nop
 8015368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801536a:	bc08      	pop	{r3}
 801536c:	469e      	mov	lr, r3
 801536e:	4770      	bx	lr
