
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013954  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002d10  08013b24  08013b24  00023b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016834  08016834  00030090  2**0
                  CONTENTS
  4 .ARM          00000008  08016834  08016834  00026834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801683c  0801683c  00030090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801683c  0801683c  0002683c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016840  08016840  00026840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08016844  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000092d0  20000090  080168d4  00030090  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20009360  080168d4  00039360  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003307a  00000000  00000000  000300c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006820  00000000  00000000  0006313a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002a58  00000000  00000000  00069960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000027b8  00000000  00000000  0006c3b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002fa4a  00000000  00000000  0006eb70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00032b41  00000000  00000000  0009e5ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001136c2  00000000  00000000  000d10fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001e47bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b234  00000000  00000000  001e4810  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000090 	.word	0x20000090
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08013b0c 	.word	0x08013b0c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000094 	.word	0x20000094
 800020c:	08013b0c 	.word	0x08013b0c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b974 	b.w	8000510 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468e      	mov	lr, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14d      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024e:	428a      	cmp	r2, r1
 8000250:	4694      	mov	ip, r2
 8000252:	d969      	bls.n	8000328 <__udivmoddi4+0xe8>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b152      	cbz	r2, 8000270 <__udivmoddi4+0x30>
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	f1c2 0120 	rsb	r1, r2, #32
 8000262:	fa20 f101 	lsr.w	r1, r0, r1
 8000266:	fa0c fc02 	lsl.w	ip, ip, r2
 800026a:	ea41 0e03 	orr.w	lr, r1, r3
 800026e:	4094      	lsls	r4, r2
 8000270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000274:	0c21      	lsrs	r1, r4, #16
 8000276:	fbbe f6f8 	udiv	r6, lr, r8
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fb08 e316 	mls	r3, r8, r6, lr
 8000282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000286:	fb06 f107 	mul.w	r1, r6, r7
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295
 8000296:	f080 811f 	bcs.w	80004d8 <__udivmoddi4+0x298>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 811c 	bls.w	80004d8 <__udivmoddi4+0x298>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 f707 	mul.w	r7, r0, r7
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x92>
 80002bc:	eb1c 0404 	adds.w	r4, ip, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c4:	f080 810a 	bcs.w	80004dc <__udivmoddi4+0x29c>
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	f240 8107 	bls.w	80004dc <__udivmoddi4+0x29c>
 80002ce:	4464      	add	r4, ip
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d6:	1be4      	subs	r4, r4, r7
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa4>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xc2>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	f000 80ef 	beq.w	80004d2 <__udivmoddi4+0x292>
 80002f4:	2600      	movs	r6, #0
 80002f6:	e9c5 0100 	strd	r0, r1, [r5]
 80002fa:	4630      	mov	r0, r6
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f683 	clz	r6, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d14a      	bne.n	80003a0 <__udivmoddi4+0x160>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd4>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80f9 	bhi.w	8000506 <__udivmoddi4+0x2c6>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	469e      	mov	lr, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa4>
 8000322:	e9c5 4e00 	strd	r4, lr, [r5]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa4>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xec>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 8092 	bne.w	800045a <__udivmoddi4+0x21a>
 8000336:	eba1 010c 	sub.w	r1, r1, ip
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2601      	movs	r6, #1
 8000344:	0c20      	lsrs	r0, r4, #16
 8000346:	fbb1 f3f7 	udiv	r3, r1, r7
 800034a:	fb07 1113 	mls	r1, r7, r3, r1
 800034e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000352:	fb0e f003 	mul.w	r0, lr, r3
 8000356:	4288      	cmp	r0, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x12c>
 800035a:	eb1c 0101 	adds.w	r1, ip, r1
 800035e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x12a>
 8000364:	4288      	cmp	r0, r1
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2c0>
 800036a:	4643      	mov	r3, r8
 800036c:	1a09      	subs	r1, r1, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb1 f0f7 	udiv	r0, r1, r7
 8000374:	fb07 1110 	mls	r1, r7, r0, r1
 8000378:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x156>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x154>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2ca>
 8000394:	4608      	mov	r0, r1
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039e:	e79c      	b.n	80002da <__udivmoddi4+0x9a>
 80003a0:	f1c6 0720 	rsb	r7, r6, #32
 80003a4:	40b3      	lsls	r3, r6
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa20 f407 	lsr.w	r4, r0, r7
 80003b2:	fa01 f306 	lsl.w	r3, r1, r6
 80003b6:	431c      	orrs	r4, r3
 80003b8:	40f9      	lsrs	r1, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fa00 f306 	lsl.w	r3, r0, r6
 80003c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	fb09 1118 	mls	r1, r9, r8, r1
 80003d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	4288      	cmp	r0, r1
 80003da:	fa02 f206 	lsl.w	r2, r2, r6
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b8>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2bc>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2bc>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4461      	add	r1, ip
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000400:	fb09 1110 	mls	r1, r9, r0, r1
 8000404:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000408:	fb00 fe0e 	mul.w	lr, r0, lr
 800040c:	458e      	cmp	lr, r1
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1e2>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f100 34ff 	add.w	r4, r0, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2b4>
 800041a:	458e      	cmp	lr, r1
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2b4>
 800041e:	3802      	subs	r0, #2
 8000420:	4461      	add	r1, ip
 8000422:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000426:	fba0 9402 	umull	r9, r4, r0, r2
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	42a1      	cmp	r1, r4
 8000430:	46c8      	mov	r8, r9
 8000432:	46a6      	mov	lr, r4
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x2a4>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x2a0>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x212>
 800043a:	ebb3 0208 	subs.w	r2, r3, r8
 800043e:	eb61 010e 	sbc.w	r1, r1, lr
 8000442:	fa01 f707 	lsl.w	r7, r1, r7
 8000446:	fa22 f306 	lsr.w	r3, r2, r6
 800044a:	40f1      	lsrs	r1, r6
 800044c:	431f      	orrs	r7, r3
 800044e:	e9c5 7100 	strd	r7, r1, [r5]
 8000452:	2600      	movs	r6, #0
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d8      	lsrs	r0, r3
 8000460:	fa0c fc02 	lsl.w	ip, ip, r2
 8000464:	fa21 f303 	lsr.w	r3, r1, r3
 8000468:	4091      	lsls	r1, r2
 800046a:	4301      	orrs	r1, r0
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb3 f0f7 	udiv	r0, r3, r7
 8000478:	fb07 3610 	mls	r6, r7, r0, r3
 800047c:	0c0b      	lsrs	r3, r1, #16
 800047e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000482:	fb00 f60e 	mul.w	r6, r0, lr
 8000486:	429e      	cmp	r6, r3
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x260>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b8>
 8000498:	429e      	cmp	r6, r3
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b8>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1b9b      	subs	r3, r3, r6
 80004a2:	b289      	uxth	r1, r1
 80004a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b0:	fb06 f30e 	mul.w	r3, r6, lr
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x28a>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 80004c6:	3e02      	subs	r6, #2
 80004c8:	4461      	add	r1, ip
 80004ca:	1ac9      	subs	r1, r1, r3
 80004cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0x104>
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e705      	b.n	80002e4 <__udivmoddi4+0xa4>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e3      	b.n	80002a4 <__udivmoddi4+0x64>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6f8      	b.n	80002d2 <__udivmoddi4+0x92>
 80004e0:	454b      	cmp	r3, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f8>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f8>
 80004f0:	4646      	mov	r6, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x28a>
 80004f4:	4620      	mov	r0, r4
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1e2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x260>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b8>
 8000500:	3b02      	subs	r3, #2
 8000502:	4461      	add	r1, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x12c>
 8000506:	4630      	mov	r0, r6
 8000508:	e709      	b.n	800031e <__udivmoddi4+0xde>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x156>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000518:	bf00      	nop
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr

08000522 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000522:	b480      	push	{r7}
 8000524:	b083      	sub	sp, #12
 8000526:	af00      	add	r7, sp, #0
 8000528:	6078      	str	r0, [r7, #4]
 800052a:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800052c:	bf00      	nop
 800052e:	370c      	adds	r7, #12
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr

08000538 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 800053c:	bf00      	nop
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
	...

08000548 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000548:	b480      	push	{r7}
 800054a:	b085      	sub	sp, #20
 800054c:	af00      	add	r7, sp, #0
 800054e:	60f8      	str	r0, [r7, #12]
 8000550:	60b9      	str	r1, [r7, #8]
 8000552:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	4a07      	ldr	r2, [pc, #28]	; (8000574 <vApplicationGetIdleTaskMemory+0x2c>)
 8000558:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800055a:	68bb      	ldr	r3, [r7, #8]
 800055c:	4a06      	ldr	r2, [pc, #24]	; (8000578 <vApplicationGetIdleTaskMemory+0x30>)
 800055e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	2280      	movs	r2, #128	; 0x80
 8000564:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000566:	bf00      	nop
 8000568:	3714      	adds	r7, #20
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	200000ac 	.word	0x200000ac
 8000578:	20000100 	.word	0x20000100

0800057c <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8000586:	20c8      	movs	r0, #200	; 0xc8
 8000588:	f002 f922 	bl	80027d0 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 800058c:	f000 fa7a 	bl	8000a84 <ft5336_I2C_InitializeIfRequired>
}
 8000590:	bf00      	nop
 8000592:	3708      	adds	r7, #8
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}

08000598 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	4603      	mov	r3, r0
 80005a0:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 80005a2:	bf00      	nop
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr

080005ae <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 80005ae:	b580      	push	{r7, lr}
 80005b0:	b084      	sub	sp, #16
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	4603      	mov	r3, r0
 80005b6:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 80005b8:	2300      	movs	r3, #0
 80005ba:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 80005bc:	2300      	movs	r3, #0
 80005be:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 80005c0:	2300      	movs	r3, #0
 80005c2:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80005c4:	f000 fa5e 	bl	8000a84 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80005c8:	2300      	movs	r3, #0
 80005ca:	73fb      	strb	r3, [r7, #15]
 80005cc:	e010      	b.n	80005f0 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 80005ce:	88fb      	ldrh	r3, [r7, #6]
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	21a8      	movs	r1, #168	; 0xa8
 80005d4:	4618      	mov	r0, r3
 80005d6:	f002 f8dd 	bl	8002794 <TS_IO_Read>
 80005da:	4603      	mov	r3, r0
 80005dc:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 80005de:	7b7b      	ldrb	r3, [r7, #13]
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	2b51      	cmp	r3, #81	; 0x51
 80005e4:	d101      	bne.n	80005ea <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 80005e6:	2301      	movs	r3, #1
 80005e8:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80005ea:	7bfb      	ldrb	r3, [r7, #15]
 80005ec:	3301      	adds	r3, #1
 80005ee:	73fb      	strb	r3, [r7, #15]
 80005f0:	7bfb      	ldrb	r3, [r7, #15]
 80005f2:	2b02      	cmp	r3, #2
 80005f4:	d802      	bhi.n	80005fc <ft5336_ReadID+0x4e>
 80005f6:	7bbb      	ldrb	r3, [r7, #14]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d0e8      	beq.n	80005ce <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 80005fc:	7b7b      	ldrb	r3, [r7, #13]
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	b29b      	uxth	r3, r3
}
 8000602:	4618      	mov	r0, r3
 8000604:	3710      	adds	r7, #16
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}

0800060a <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 800060a:	b580      	push	{r7, lr}
 800060c:	b082      	sub	sp, #8
 800060e:	af00      	add	r7, sp, #0
 8000610:	4603      	mov	r3, r0
 8000612:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8000614:	88fb      	ldrh	r3, [r7, #6]
 8000616:	4618      	mov	r0, r3
 8000618:	f000 fa44 	bl	8000aa4 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 800061c:	88fb      	ldrh	r3, [r7, #6]
 800061e:	4618      	mov	r0, r3
 8000620:	f000 f932 	bl	8000888 <ft5336_TS_DisableIT>
}
 8000624:	bf00      	nop
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}

0800062c <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8000636:	2300      	movs	r3, #0
 8000638:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 800063a:	88fb      	ldrh	r3, [r7, #6]
 800063c:	b2db      	uxtb	r3, r3
 800063e:	2102      	movs	r1, #2
 8000640:	4618      	mov	r0, r3
 8000642:	f002 f8a7 	bl	8002794 <TS_IO_Read>
 8000646:	4603      	mov	r3, r0
 8000648:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 800064a:	7bfb      	ldrb	r3, [r7, #15]
 800064c:	b2db      	uxtb	r3, r3
 800064e:	f003 030f 	and.w	r3, r3, #15
 8000652:	b2db      	uxtb	r3, r3
 8000654:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8000656:	7bfb      	ldrb	r3, [r7, #15]
 8000658:	b2db      	uxtb	r3, r3
 800065a:	2b05      	cmp	r3, #5
 800065c:	d901      	bls.n	8000662 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 800065e:	2300      	movs	r3, #0
 8000660:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8000662:	7bfb      	ldrb	r3, [r7, #15]
 8000664:	b2da      	uxtb	r2, r3
 8000666:	4b05      	ldr	r3, [pc, #20]	; (800067c <ft5336_TS_DetectTouch+0x50>)
 8000668:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 800066a:	4b04      	ldr	r3, [pc, #16]	; (800067c <ft5336_TS_DetectTouch+0x50>)
 800066c:	2200      	movs	r2, #0
 800066e:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8000670:	7bfb      	ldrb	r3, [r7, #15]
 8000672:	b2db      	uxtb	r3, r3
}
 8000674:	4618      	mov	r0, r3
 8000676:	3710      	adds	r7, #16
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	20000300 	.word	0x20000300

08000680 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b086      	sub	sp, #24
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	60b9      	str	r1, [r7, #8]
 800068a:	607a      	str	r2, [r7, #4]
 800068c:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 800068e:	2300      	movs	r3, #0
 8000690:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8000696:	2300      	movs	r3, #0
 8000698:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 800069a:	2300      	movs	r3, #0
 800069c:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 800069e:	2300      	movs	r3, #0
 80006a0:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 80006a2:	4b6d      	ldr	r3, [pc, #436]	; (8000858 <ft5336_TS_GetXY+0x1d8>)
 80006a4:	789a      	ldrb	r2, [r3, #2]
 80006a6:	4b6c      	ldr	r3, [pc, #432]	; (8000858 <ft5336_TS_GetXY+0x1d8>)
 80006a8:	785b      	ldrb	r3, [r3, #1]
 80006aa:	429a      	cmp	r2, r3
 80006ac:	f080 80cf 	bcs.w	800084e <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 80006b0:	4b69      	ldr	r3, [pc, #420]	; (8000858 <ft5336_TS_GetXY+0x1d8>)
 80006b2:	789b      	ldrb	r3, [r3, #2]
 80006b4:	2b09      	cmp	r3, #9
 80006b6:	d871      	bhi.n	800079c <ft5336_TS_GetXY+0x11c>
 80006b8:	a201      	add	r2, pc, #4	; (adr r2, 80006c0 <ft5336_TS_GetXY+0x40>)
 80006ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006be:	bf00      	nop
 80006c0:	080006e9 	.word	0x080006e9
 80006c4:	080006fb 	.word	0x080006fb
 80006c8:	0800070d 	.word	0x0800070d
 80006cc:	0800071f 	.word	0x0800071f
 80006d0:	08000731 	.word	0x08000731
 80006d4:	08000743 	.word	0x08000743
 80006d8:	08000755 	.word	0x08000755
 80006dc:	08000767 	.word	0x08000767
 80006e0:	08000779 	.word	0x08000779
 80006e4:	0800078b 	.word	0x0800078b
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 80006e8:	2304      	movs	r3, #4
 80006ea:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 80006ec:	2303      	movs	r3, #3
 80006ee:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 80006f0:	2306      	movs	r3, #6
 80006f2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 80006f4:	2305      	movs	r3, #5
 80006f6:	753b      	strb	r3, [r7, #20]
      break;
 80006f8:	e051      	b.n	800079e <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 80006fa:	230a      	movs	r3, #10
 80006fc:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 80006fe:	2309      	movs	r3, #9
 8000700:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8000702:	230c      	movs	r3, #12
 8000704:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 8000706:	230b      	movs	r3, #11
 8000708:	753b      	strb	r3, [r7, #20]
      break;
 800070a:	e048      	b.n	800079e <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 800070c:	2310      	movs	r3, #16
 800070e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8000710:	230f      	movs	r3, #15
 8000712:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8000714:	2312      	movs	r3, #18
 8000716:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 8000718:	2311      	movs	r3, #17
 800071a:	753b      	strb	r3, [r7, #20]
      break;
 800071c:	e03f      	b.n	800079e <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 800071e:	2316      	movs	r3, #22
 8000720:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8000722:	2315      	movs	r3, #21
 8000724:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 8000726:	2318      	movs	r3, #24
 8000728:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 800072a:	2317      	movs	r3, #23
 800072c:	753b      	strb	r3, [r7, #20]
      break;
 800072e:	e036      	b.n	800079e <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8000730:	231c      	movs	r3, #28
 8000732:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8000734:	231b      	movs	r3, #27
 8000736:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 8000738:	231e      	movs	r3, #30
 800073a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 800073c:	231d      	movs	r3, #29
 800073e:	753b      	strb	r3, [r7, #20]
      break;
 8000740:	e02d      	b.n	800079e <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8000742:	2322      	movs	r3, #34	; 0x22
 8000744:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 8000746:	2321      	movs	r3, #33	; 0x21
 8000748:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 800074a:	2324      	movs	r3, #36	; 0x24
 800074c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 800074e:	2323      	movs	r3, #35	; 0x23
 8000750:	753b      	strb	r3, [r7, #20]
      break;
 8000752:	e024      	b.n	800079e <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8000754:	2328      	movs	r3, #40	; 0x28
 8000756:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 8000758:	2327      	movs	r3, #39	; 0x27
 800075a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 800075c:	232a      	movs	r3, #42	; 0x2a
 800075e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8000760:	2329      	movs	r3, #41	; 0x29
 8000762:	753b      	strb	r3, [r7, #20]
      break;
 8000764:	e01b      	b.n	800079e <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8000766:	232e      	movs	r3, #46	; 0x2e
 8000768:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 800076a:	232d      	movs	r3, #45	; 0x2d
 800076c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 800076e:	2330      	movs	r3, #48	; 0x30
 8000770:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 8000772:	232f      	movs	r3, #47	; 0x2f
 8000774:	753b      	strb	r3, [r7, #20]
      break;
 8000776:	e012      	b.n	800079e <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8000778:	2334      	movs	r3, #52	; 0x34
 800077a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 800077c:	2333      	movs	r3, #51	; 0x33
 800077e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8000780:	2336      	movs	r3, #54	; 0x36
 8000782:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8000784:	2335      	movs	r3, #53	; 0x35
 8000786:	753b      	strb	r3, [r7, #20]
      break;
 8000788:	e009      	b.n	800079e <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 800078a:	233a      	movs	r3, #58	; 0x3a
 800078c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 800078e:	2339      	movs	r3, #57	; 0x39
 8000790:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8000792:	233c      	movs	r3, #60	; 0x3c
 8000794:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8000796:	233b      	movs	r3, #59	; 0x3b
 8000798:	753b      	strb	r3, [r7, #20]
      break;
 800079a:	e000      	b.n	800079e <ft5336_TS_GetXY+0x11e>

    default :
      break;
 800079c:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 800079e:	89fb      	ldrh	r3, [r7, #14]
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	7dfa      	ldrb	r2, [r7, #23]
 80007a4:	4611      	mov	r1, r2
 80007a6:	4618      	mov	r0, r3
 80007a8:	f001 fff4 	bl	8002794 <TS_IO_Read>
 80007ac:	4603      	mov	r3, r0
 80007ae:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80007b0:	7cfb      	ldrb	r3, [r7, #19]
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	b29a      	uxth	r2, r3
 80007b6:	4b29      	ldr	r3, [pc, #164]	; (800085c <ft5336_TS_GetXY+0x1dc>)
 80007b8:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80007ba:	89fb      	ldrh	r3, [r7, #14]
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	7dba      	ldrb	r2, [r7, #22]
 80007c0:	4611      	mov	r1, r2
 80007c2:	4618      	mov	r0, r3
 80007c4:	f001 ffe6 	bl	8002794 <TS_IO_Read>
 80007c8:	4603      	mov	r3, r0
 80007ca:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80007cc:	7cfb      	ldrb	r3, [r7, #19]
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	021b      	lsls	r3, r3, #8
 80007d2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80007d6:	b21a      	sxth	r2, r3
 80007d8:	4b20      	ldr	r3, [pc, #128]	; (800085c <ft5336_TS_GetXY+0x1dc>)
 80007da:	881b      	ldrh	r3, [r3, #0]
 80007dc:	b21b      	sxth	r3, r3
 80007de:	4313      	orrs	r3, r2
 80007e0:	b21b      	sxth	r3, r3
 80007e2:	b29a      	uxth	r2, r3
 80007e4:	4b1d      	ldr	r3, [pc, #116]	; (800085c <ft5336_TS_GetXY+0x1dc>)
 80007e6:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 80007e8:	4b1c      	ldr	r3, [pc, #112]	; (800085c <ft5336_TS_GetXY+0x1dc>)
 80007ea:	881a      	ldrh	r2, [r3, #0]
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 80007f0:	89fb      	ldrh	r3, [r7, #14]
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	7d7a      	ldrb	r2, [r7, #21]
 80007f6:	4611      	mov	r1, r2
 80007f8:	4618      	mov	r0, r3
 80007fa:	f001 ffcb 	bl	8002794 <TS_IO_Read>
 80007fe:	4603      	mov	r3, r0
 8000800:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000802:	7cfb      	ldrb	r3, [r7, #19]
 8000804:	b2db      	uxtb	r3, r3
 8000806:	b29a      	uxth	r2, r3
 8000808:	4b14      	ldr	r3, [pc, #80]	; (800085c <ft5336_TS_GetXY+0x1dc>)
 800080a:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 800080c:	89fb      	ldrh	r3, [r7, #14]
 800080e:	b2db      	uxtb	r3, r3
 8000810:	7d3a      	ldrb	r2, [r7, #20]
 8000812:	4611      	mov	r1, r2
 8000814:	4618      	mov	r0, r3
 8000816:	f001 ffbd 	bl	8002794 <TS_IO_Read>
 800081a:	4603      	mov	r3, r0
 800081c:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800081e:	7cfb      	ldrb	r3, [r7, #19]
 8000820:	b2db      	uxtb	r3, r3
 8000822:	021b      	lsls	r3, r3, #8
 8000824:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000828:	b21a      	sxth	r2, r3
 800082a:	4b0c      	ldr	r3, [pc, #48]	; (800085c <ft5336_TS_GetXY+0x1dc>)
 800082c:	881b      	ldrh	r3, [r3, #0]
 800082e:	b21b      	sxth	r3, r3
 8000830:	4313      	orrs	r3, r2
 8000832:	b21b      	sxth	r3, r3
 8000834:	b29a      	uxth	r2, r3
 8000836:	4b09      	ldr	r3, [pc, #36]	; (800085c <ft5336_TS_GetXY+0x1dc>)
 8000838:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 800083a:	4b08      	ldr	r3, [pc, #32]	; (800085c <ft5336_TS_GetXY+0x1dc>)
 800083c:	881a      	ldrh	r2, [r3, #0]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8000842:	4b05      	ldr	r3, [pc, #20]	; (8000858 <ft5336_TS_GetXY+0x1d8>)
 8000844:	789b      	ldrb	r3, [r3, #2]
 8000846:	3301      	adds	r3, #1
 8000848:	b2da      	uxtb	r2, r3
 800084a:	4b03      	ldr	r3, [pc, #12]	; (8000858 <ft5336_TS_GetXY+0x1d8>)
 800084c:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 800084e:	bf00      	nop
 8000850:	3718      	adds	r7, #24
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20000300 	.word	0x20000300
 800085c:	20000304 	.word	0x20000304

08000860 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 800086a:	2300      	movs	r3, #0
 800086c:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800086e:	2301      	movs	r3, #1
 8000870:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8000872:	88fb      	ldrh	r3, [r7, #6]
 8000874:	b2db      	uxtb	r3, r3
 8000876:	7bfa      	ldrb	r2, [r7, #15]
 8000878:	21a4      	movs	r1, #164	; 0xa4
 800087a:	4618      	mov	r0, r3
 800087c:	f001 ff70 	bl	8002760 <TS_IO_Write>
}
 8000880:	bf00      	nop
 8000882:	3710      	adds	r7, #16
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}

08000888 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8000892:	2300      	movs	r3, #0
 8000894:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8000896:	2300      	movs	r3, #0
 8000898:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800089a:	88fb      	ldrh	r3, [r7, #6]
 800089c:	b2db      	uxtb	r3, r3
 800089e:	7bfa      	ldrb	r2, [r7, #15]
 80008a0:	21a4      	movs	r1, #164	; 0xa4
 80008a2:	4618      	mov	r0, r3
 80008a4:	f001 ff5c 	bl	8002760 <TS_IO_Write>
}
 80008a8:	bf00      	nop
 80008aa:	3710      	adds	r7, #16
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 80008ba:	2300      	movs	r3, #0
}
 80008bc:	4618      	mov	r0, r3
 80008be:	370c      	adds	r7, #12
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr

080008c8 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 80008d2:	bf00      	nop
 80008d4:	370c      	adds	r7, #12
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr

080008de <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 80008de:	b580      	push	{r7, lr}
 80008e0:	b084      	sub	sp, #16
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	4603      	mov	r3, r0
 80008e6:	6039      	str	r1, [r7, #0]
 80008e8:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 80008ee:	88fb      	ldrh	r3, [r7, #6]
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	2101      	movs	r1, #1
 80008f4:	4618      	mov	r0, r3
 80008f6:	f001 ff4d 	bl	8002794 <TS_IO_Read>
 80008fa:	4603      	mov	r3, r0
 80008fc:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 80008fe:	7bfb      	ldrb	r3, [r7, #15]
 8000900:	b2db      	uxtb	r3, r3
 8000902:	461a      	mov	r2, r3
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	601a      	str	r2, [r3, #0]
}
 8000908:	bf00      	nop
 800090a:	3710      	adds	r7, #16
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}

08000910 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b086      	sub	sp, #24
 8000914:	af00      	add	r7, sp, #0
 8000916:	60b9      	str	r1, [r7, #8]
 8000918:	607a      	str	r2, [r7, #4]
 800091a:	603b      	str	r3, [r7, #0]
 800091c:	4603      	mov	r3, r0
 800091e:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8000920:	2300      	movs	r3, #0
 8000922:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 8000924:	2300      	movs	r3, #0
 8000926:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 8000928:	2300      	movs	r3, #0
 800092a:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 800092c:	2300      	movs	r3, #0
 800092e:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8000930:	4b4d      	ldr	r3, [pc, #308]	; (8000a68 <ft5336_TS_GetTouchInfo+0x158>)
 8000932:	785b      	ldrb	r3, [r3, #1]
 8000934:	461a      	mov	r2, r3
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	4293      	cmp	r3, r2
 800093a:	f080 8090 	bcs.w	8000a5e <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 800093e:	68bb      	ldr	r3, [r7, #8]
 8000940:	2b09      	cmp	r3, #9
 8000942:	d85d      	bhi.n	8000a00 <ft5336_TS_GetTouchInfo+0xf0>
 8000944:	a201      	add	r2, pc, #4	; (adr r2, 800094c <ft5336_TS_GetTouchInfo+0x3c>)
 8000946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800094a:	bf00      	nop
 800094c:	08000975 	.word	0x08000975
 8000950:	08000983 	.word	0x08000983
 8000954:	08000991 	.word	0x08000991
 8000958:	0800099f 	.word	0x0800099f
 800095c:	080009ad 	.word	0x080009ad
 8000960:	080009bb 	.word	0x080009bb
 8000964:	080009c9 	.word	0x080009c9
 8000968:	080009d7 	.word	0x080009d7
 800096c:	080009e5 	.word	0x080009e5
 8000970:	080009f3 	.word	0x080009f3
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 8000974:	2303      	movs	r3, #3
 8000976:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 8000978:	2307      	movs	r3, #7
 800097a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 800097c:	2308      	movs	r3, #8
 800097e:	757b      	strb	r3, [r7, #21]
      break;
 8000980:	e03f      	b.n	8000a02 <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 8000982:	2309      	movs	r3, #9
 8000984:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 8000986:	230d      	movs	r3, #13
 8000988:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 800098a:	230e      	movs	r3, #14
 800098c:	757b      	strb	r3, [r7, #21]
      break;
 800098e:	e038      	b.n	8000a02 <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 8000990:	230f      	movs	r3, #15
 8000992:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8000994:	2313      	movs	r3, #19
 8000996:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 8000998:	2314      	movs	r3, #20
 800099a:	757b      	strb	r3, [r7, #21]
      break;
 800099c:	e031      	b.n	8000a02 <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 800099e:	2315      	movs	r3, #21
 80009a0:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 80009a2:	2319      	movs	r3, #25
 80009a4:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 80009a6:	231a      	movs	r3, #26
 80009a8:	757b      	strb	r3, [r7, #21]
      break;
 80009aa:	e02a      	b.n	8000a02 <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 80009ac:	231b      	movs	r3, #27
 80009ae:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 80009b0:	231f      	movs	r3, #31
 80009b2:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 80009b4:	2320      	movs	r3, #32
 80009b6:	757b      	strb	r3, [r7, #21]
      break;
 80009b8:	e023      	b.n	8000a02 <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 80009ba:	2321      	movs	r3, #33	; 0x21
 80009bc:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 80009be:	2325      	movs	r3, #37	; 0x25
 80009c0:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 80009c2:	2326      	movs	r3, #38	; 0x26
 80009c4:	757b      	strb	r3, [r7, #21]
      break;
 80009c6:	e01c      	b.n	8000a02 <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 80009c8:	2327      	movs	r3, #39	; 0x27
 80009ca:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 80009cc:	232b      	movs	r3, #43	; 0x2b
 80009ce:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 80009d0:	232c      	movs	r3, #44	; 0x2c
 80009d2:	757b      	strb	r3, [r7, #21]
      break;
 80009d4:	e015      	b.n	8000a02 <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 80009d6:	232d      	movs	r3, #45	; 0x2d
 80009d8:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 80009da:	2331      	movs	r3, #49	; 0x31
 80009dc:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 80009de:	2332      	movs	r3, #50	; 0x32
 80009e0:	757b      	strb	r3, [r7, #21]
      break;
 80009e2:	e00e      	b.n	8000a02 <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 80009e4:	2333      	movs	r3, #51	; 0x33
 80009e6:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 80009e8:	2337      	movs	r3, #55	; 0x37
 80009ea:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 80009ec:	2338      	movs	r3, #56	; 0x38
 80009ee:	757b      	strb	r3, [r7, #21]
      break;
 80009f0:	e007      	b.n	8000a02 <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 80009f2:	2339      	movs	r3, #57	; 0x39
 80009f4:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 80009f6:	233d      	movs	r3, #61	; 0x3d
 80009f8:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 80009fa:	233e      	movs	r3, #62	; 0x3e
 80009fc:	757b      	strb	r3, [r7, #21]
      break;
 80009fe:	e000      	b.n	8000a02 <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 8000a00:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000a02:	89fb      	ldrh	r3, [r7, #14]
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	7dfa      	ldrb	r2, [r7, #23]
 8000a08:	4611      	mov	r1, r2
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f001 fec2 	bl	8002794 <TS_IO_Read>
 8000a10:	4603      	mov	r3, r0
 8000a12:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8000a14:	7d3b      	ldrb	r3, [r7, #20]
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	119b      	asrs	r3, r3, #6
 8000a1a:	f003 0203 	and.w	r2, r3, #3
 8000a1e:	6a3b      	ldr	r3, [r7, #32]
 8000a20:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8000a22:	89fb      	ldrh	r3, [r7, #14]
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	7dba      	ldrb	r2, [r7, #22]
 8000a28:	4611      	mov	r1, r2
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f001 feb2 	bl	8002794 <TS_IO_Read>
 8000a30:	4603      	mov	r3, r0
 8000a32:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8000a34:	7d3b      	ldrb	r3, [r7, #20]
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	461a      	mov	r2, r3
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8000a3e:	89fb      	ldrh	r3, [r7, #14]
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	7d7a      	ldrb	r2, [r7, #21]
 8000a44:	4611      	mov	r1, r2
 8000a46:	4618      	mov	r0, r3
 8000a48:	f001 fea4 	bl	8002794 <TS_IO_Read>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8000a50:	7d3b      	ldrb	r3, [r7, #20]
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	111b      	asrs	r3, r3, #4
 8000a56:	f003 0204 	and.w	r2, r3, #4
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 8000a5e:	bf00      	nop
 8000a60:	3718      	adds	r7, #24
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20000300 	.word	0x20000300

08000a6c <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8000a70:	4b03      	ldr	r3, [pc, #12]	; (8000a80 <ft5336_Get_I2C_InitializedStatus+0x14>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	20000300 	.word	0x20000300

08000a84 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8000a88:	f7ff fff0 	bl	8000a6c <ft5336_Get_I2C_InitializedStatus>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d104      	bne.n	8000a9c <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8000a92:	f001 fe5b 	bl	800274c <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8000a96:	4b02      	ldr	r3, [pc, #8]	; (8000aa0 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8000a98:	2201      	movs	r2, #1
 8000a9a:	701a      	strb	r2, [r3, #0]
  }
}
 8000a9c:	bf00      	nop
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	20000300 	.word	0x20000300

08000aa4 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b085      	sub	sp, #20
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8000ab2:	68fb      	ldr	r3, [r7, #12]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3714      	adds	r7, #20
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000ac4:	f3bf 8f4f 	dsb	sy
}
 8000ac8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000aca:	f3bf 8f6f 	isb	sy
}
 8000ace:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000ad0:	4b0d      	ldr	r3, [pc, #52]	; (8000b08 <SCB_EnableICache+0x48>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000ad8:	f3bf 8f4f 	dsb	sy
}
 8000adc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ade:	f3bf 8f6f 	isb	sy
}
 8000ae2:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000ae4:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <SCB_EnableICache+0x48>)
 8000ae6:	695b      	ldr	r3, [r3, #20]
 8000ae8:	4a07      	ldr	r2, [pc, #28]	; (8000b08 <SCB_EnableICache+0x48>)
 8000aea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aee:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000af0:	f3bf 8f4f 	dsb	sy
}
 8000af4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000af6:	f3bf 8f6f 	isb	sy
}
 8000afa:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	e000ed00 	.word	0xe000ed00

08000b0c <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000b12:	4b1f      	ldr	r3, [pc, #124]	; (8000b90 <SCB_EnableDCache+0x84>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000b1a:	f3bf 8f4f 	dsb	sy
}
 8000b1e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000b20:	4b1b      	ldr	r3, [pc, #108]	; (8000b90 <SCB_EnableDCache+0x84>)
 8000b22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000b26:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	0b5b      	lsrs	r3, r3, #13
 8000b2c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000b30:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	08db      	lsrs	r3, r3, #3
 8000b36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000b3a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	015a      	lsls	r2, r3, #5
 8000b40:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000b44:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000b46:	68ba      	ldr	r2, [r7, #8]
 8000b48:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000b4a:	4911      	ldr	r1, [pc, #68]	; (8000b90 <SCB_EnableDCache+0x84>)
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000b52:	68bb      	ldr	r3, [r7, #8]
 8000b54:	1e5a      	subs	r2, r3, #1
 8000b56:	60ba      	str	r2, [r7, #8]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d1ef      	bne.n	8000b3c <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	1e5a      	subs	r2, r3, #1
 8000b60:	60fa      	str	r2, [r7, #12]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d1e5      	bne.n	8000b32 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000b66:	f3bf 8f4f 	dsb	sy
}
 8000b6a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000b6c:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <SCB_EnableDCache+0x84>)
 8000b6e:	695b      	ldr	r3, [r3, #20]
 8000b70:	4a07      	ldr	r2, [pc, #28]	; (8000b90 <SCB_EnableDCache+0x84>)
 8000b72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b76:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b78:	f3bf 8f4f 	dsb	sy
}
 8000b7c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b7e:	f3bf 8f6f 	isb	sy
}
 8000b82:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000b84:	bf00      	nop
 8000b86:	3714      	adds	r7, #20
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <InCircle>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t InCircle(Point xy, Point Circle, uint8_t Radius) {
 8000b94:	b480      	push	{r7}
 8000b96:	b085      	sub	sp, #20
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	60f8      	str	r0, [r7, #12]
 8000b9c:	60b9      	str	r1, [r7, #8]
 8000b9e:	4613      	mov	r3, r2
 8000ba0:	71fb      	strb	r3, [r7, #7]
	return ((xy.X - Circle.X) * (xy.X - Circle.X)
 8000ba2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000bac:	1ad3      	subs	r3, r2, r3
 8000bae:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000bb2:	4611      	mov	r1, r2
 8000bb4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000bb8:	1a8a      	subs	r2, r1, r2
 8000bba:	fb03 f202 	mul.w	r2, r3, r2
			+ (xy.Y - Circle.Y) * (xy.Y - Circle.Y)) <= Radius*Radius;
 8000bbe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000bc8:	1acb      	subs	r3, r1, r3
 8000bca:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8000bce:	4608      	mov	r0, r1
 8000bd0:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8000bd4:	1a41      	subs	r1, r0, r1
 8000bd6:	fb01 f303 	mul.w	r3, r1, r3
 8000bda:	441a      	add	r2, r3
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	79f9      	ldrb	r1, [r7, #7]
 8000be0:	fb01 f303 	mul.w	r3, r1, r3
 8000be4:	429a      	cmp	r2, r3
 8000be6:	bfd4      	ite	le
 8000be8:	2301      	movle	r3, #1
 8000bea:	2300      	movgt	r3, #0
 8000bec:	b2db      	uxtb	r3, r3
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3714      	adds	r7, #20
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
	...

08000bfc <Addition>:
void Addition(char Offset){
 8000bfc:	b480      	push	{r7}
 8000bfe:	b085      	sub	sp, #20
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	71fb      	strb	r3, [r7, #7]
	if (Offset){
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d022      	beq.n	8000c52 <Addition+0x56>
		for (uint16_t i = 0;i<AUDIO_BLOCK_SIZE/2;i++){
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	81fb      	strh	r3, [r7, #14]
 8000c10:	e01b      	b.n	8000c4a <Addition+0x4e>
			((int16_t*)AUDIO_BUFFER_OUT + AUDIO_BLOCK_SIZE/2)[i] = (((int16_t*)AUDIO_BUFFER_IN + AUDIO_BLOCK_SIZE/2)[i]+((int16_t*)AUDIO_BUFFER_READ + AUDIO_BLOCK_SIZE/2)[i])/2;
 8000c12:	89fb      	ldrh	r3, [r7, #14]
 8000c14:	005a      	lsls	r2, r3, #1
 8000c16:	4b23      	ldr	r3, [pc, #140]	; (8000ca4 <Addition+0xa8>)
 8000c18:	4413      	add	r3, r2
 8000c1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c1e:	4619      	mov	r1, r3
 8000c20:	89fb      	ldrh	r3, [r7, #14]
 8000c22:	005a      	lsls	r2, r3, #1
 8000c24:	4b20      	ldr	r3, [pc, #128]	; (8000ca8 <Addition+0xac>)
 8000c26:	4413      	add	r3, r2
 8000c28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c2c:	440b      	add	r3, r1
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	da00      	bge.n	8000c34 <Addition+0x38>
 8000c32:	3301      	adds	r3, #1
 8000c34:	105b      	asrs	r3, r3, #1
 8000c36:	4619      	mov	r1, r3
 8000c38:	89fb      	ldrh	r3, [r7, #14]
 8000c3a:	005a      	lsls	r2, r3, #1
 8000c3c:	4b1b      	ldr	r3, [pc, #108]	; (8000cac <Addition+0xb0>)
 8000c3e:	4413      	add	r3, r2
 8000c40:	b20a      	sxth	r2, r1
 8000c42:	801a      	strh	r2, [r3, #0]
		for (uint16_t i = 0;i<AUDIO_BLOCK_SIZE/2;i++){
 8000c44:	89fb      	ldrh	r3, [r7, #14]
 8000c46:	3301      	adds	r3, #1
 8000c48:	81fb      	strh	r3, [r7, #14]
 8000c4a:	89fb      	ldrh	r3, [r7, #14]
 8000c4c:	2bff      	cmp	r3, #255	; 0xff
 8000c4e:	d9e0      	bls.n	8000c12 <Addition+0x16>
	}else{
		for (uint16_t i = 0;i<AUDIO_BLOCK_SIZE/2;i++){
			((int16_t*)AUDIO_BUFFER_OUT)[i] = (((int16_t*)AUDIO_BUFFER_IN)[i]+((int16_t*)AUDIO_BUFFER_READ)[i])/2;
		}
	}
}
 8000c50:	e021      	b.n	8000c96 <Addition+0x9a>
		for (uint16_t i = 0;i<AUDIO_BLOCK_SIZE/2;i++){
 8000c52:	2300      	movs	r3, #0
 8000c54:	81bb      	strh	r3, [r7, #12]
 8000c56:	e01b      	b.n	8000c90 <Addition+0x94>
			((int16_t*)AUDIO_BUFFER_OUT)[i] = (((int16_t*)AUDIO_BUFFER_IN)[i]+((int16_t*)AUDIO_BUFFER_READ)[i])/2;
 8000c58:	89bb      	ldrh	r3, [r7, #12]
 8000c5a:	005a      	lsls	r2, r3, #1
 8000c5c:	4b14      	ldr	r3, [pc, #80]	; (8000cb0 <Addition+0xb4>)
 8000c5e:	4413      	add	r3, r2
 8000c60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c64:	4619      	mov	r1, r3
 8000c66:	89bb      	ldrh	r3, [r7, #12]
 8000c68:	005a      	lsls	r2, r3, #1
 8000c6a:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <Addition+0xb8>)
 8000c6c:	4413      	add	r3, r2
 8000c6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c72:	440b      	add	r3, r1
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	da00      	bge.n	8000c7a <Addition+0x7e>
 8000c78:	3301      	adds	r3, #1
 8000c7a:	105b      	asrs	r3, r3, #1
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	89bb      	ldrh	r3, [r7, #12]
 8000c80:	005a      	lsls	r2, r3, #1
 8000c82:	4b0d      	ldr	r3, [pc, #52]	; (8000cb8 <Addition+0xbc>)
 8000c84:	4413      	add	r3, r2
 8000c86:	b20a      	sxth	r2, r1
 8000c88:	801a      	strh	r2, [r3, #0]
		for (uint16_t i = 0;i<AUDIO_BLOCK_SIZE/2;i++){
 8000c8a:	89bb      	ldrh	r3, [r7, #12]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	81bb      	strh	r3, [r7, #12]
 8000c90:	89bb      	ldrh	r3, [r7, #12]
 8000c92:	2bff      	cmp	r3, #255	; 0xff
 8000c94:	d9e0      	bls.n	8000c58 <Addition+0x5c>
}
 8000c96:	bf00      	nop
 8000c98:	3714      	adds	r7, #20
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	c007fa00 	.word	0xc007fa00
 8000ca8:	c0080200 	.word	0xc0080200
 8000cac:	c007fe00 	.word	0xc007fe00
 8000cb0:	c007f800 	.word	0xc007f800
 8000cb4:	c0080000 	.word	0xc0080000
 8000cb8:	c007fc00 	.word	0xc007fc00

08000cbc <DrawPlayButton>:
void DrawPlayButton(uint32_t Color){
 8000cbc:	b590      	push	{r4, r7, lr}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
	BSP_LCD_SetFont(&Font24);
 8000cc4:	481e      	ldr	r0, [pc, #120]	; (8000d40 <DrawPlayButton+0x84>)
 8000cc6:	f002 faaf 	bl	8003228 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(Color);
 8000cca:	6878      	ldr	r0, [r7, #4]
 8000ccc:	f002 fa7a 	bl	80031c4 <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle( PLAY_BUTTON_X, PLAY_BUTTON_Y, R);
 8000cd0:	f002 f9e0 	bl	8003094 <BSP_LCD_GetXSize>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	4a1a      	ldr	r2, [pc, #104]	; (8000d44 <DrawPlayButton+0x88>)
 8000cda:	fba2 2303 	umull	r2, r3, r2, r3
 8000cde:	085b      	lsrs	r3, r3, #1
 8000ce0:	b29c      	uxth	r4, r3
 8000ce2:	f002 f9eb 	bl	80030bc <BSP_LCD_GetYSize>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	085b      	lsrs	r3, r3, #1
 8000cea:	b29b      	uxth	r3, r3
 8000cec:	3b28      	subs	r3, #40	; 0x28
 8000cee:	b29b      	uxth	r3, r3
 8000cf0:	2228      	movs	r2, #40	; 0x28
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f002 fd75 	bl	80037e4 <BSP_LCD_FillCircle>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000cfa:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000cfe:	f002 fa61 	bl	80031c4 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(Color);
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f002 fa76 	bl	80031f4 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayChar(PLAY_BUTTON_X-6, PLAY_BUTTON_Y-11, (char)'P');
 8000d08:	f002 f9c4 	bl	8003094 <BSP_LCD_GetXSize>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	005b      	lsls	r3, r3, #1
 8000d10:	4a0c      	ldr	r2, [pc, #48]	; (8000d44 <DrawPlayButton+0x88>)
 8000d12:	fba2 2303 	umull	r2, r3, r2, r3
 8000d16:	085b      	lsrs	r3, r3, #1
 8000d18:	b29b      	uxth	r3, r3
 8000d1a:	3b06      	subs	r3, #6
 8000d1c:	b29c      	uxth	r4, r3
 8000d1e:	f002 f9cd 	bl	80030bc <BSP_LCD_GetYSize>
 8000d22:	4603      	mov	r3, r0
 8000d24:	085b      	lsrs	r3, r3, #1
 8000d26:	b29b      	uxth	r3, r3
 8000d28:	3b33      	subs	r3, #51	; 0x33
 8000d2a:	b29b      	uxth	r3, r3
 8000d2c:	2250      	movs	r2, #80	; 0x50
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4620      	mov	r0, r4
 8000d32:	f002 fabb 	bl	80032ac <BSP_LCD_DisplayChar>
}
 8000d36:	bf00      	nop
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd90      	pop	{r4, r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000028 	.word	0x20000028
 8000d44:	aaaaaaab 	.word	0xaaaaaaab

08000d48 <DrawONButton>:
//	BSP_LCD_FillCircle( REC_BUTTON_X, REC_BUTTON_Y, R);
//	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
//	BSP_LCD_SetBackColor(Color);
//	BSP_LCD_DisplayChar(REC_BUTTON_X-6, REC_BUTTON_Y-11,(char)'R');
//}
void DrawONButton(){
 8000d48:	b598      	push	{r3, r4, r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
	BSP_LCD_Clear(LCD_COLOR_BLACK);
 8000d4c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000d50:	f002 fa84 	bl	800325c <BSP_LCD_Clear>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000d54:	f04f 30ff 	mov.w	r0, #4294967295
 8000d58:	f002 fa34 	bl	80031c4 <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle(ON_X, ON_Y, R);
 8000d5c:	f002 f99a 	bl	8003094 <BSP_LCD_GetXSize>
 8000d60:	4603      	mov	r3, r0
 8000d62:	085b      	lsrs	r3, r3, #1
 8000d64:	b29c      	uxth	r4, r3
 8000d66:	f002 f9a9 	bl	80030bc <BSP_LCD_GetYSize>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	085b      	lsrs	r3, r3, #1
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	2228      	movs	r2, #40	; 0x28
 8000d72:	4619      	mov	r1, r3
 8000d74:	4620      	mov	r0, r4
 8000d76:	f002 fd35 	bl	80037e4 <BSP_LCD_FillCircle>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000d7a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000d7e:	f002 fa21 	bl	80031c4 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8000d82:	f04f 30ff 	mov.w	r0, #4294967295
 8000d86:	f002 fa35 	bl	80031f4 <BSP_LCD_SetBackColor>
	BSP_LCD_SetFont(&Font24);
 8000d8a:	4815      	ldr	r0, [pc, #84]	; (8000de0 <DrawONButton+0x98>)
 8000d8c:	f002 fa4c 	bl	8003228 <BSP_LCD_SetFont>
	BSP_LCD_DisplayChar(ON_X-14, ON_Y-11,(char)'O');
 8000d90:	f002 f980 	bl	8003094 <BSP_LCD_GetXSize>
 8000d94:	4603      	mov	r3, r0
 8000d96:	085b      	lsrs	r3, r3, #1
 8000d98:	b29b      	uxth	r3, r3
 8000d9a:	3b0e      	subs	r3, #14
 8000d9c:	b29c      	uxth	r4, r3
 8000d9e:	f002 f98d 	bl	80030bc <BSP_LCD_GetYSize>
 8000da2:	4603      	mov	r3, r0
 8000da4:	085b      	lsrs	r3, r3, #1
 8000da6:	b29b      	uxth	r3, r3
 8000da8:	3b0b      	subs	r3, #11
 8000daa:	b29b      	uxth	r3, r3
 8000dac:	224f      	movs	r2, #79	; 0x4f
 8000dae:	4619      	mov	r1, r3
 8000db0:	4620      	mov	r0, r4
 8000db2:	f002 fa7b 	bl	80032ac <BSP_LCD_DisplayChar>
	BSP_LCD_DisplayChar(ON_X+1, ON_Y-11,(char)'N');
 8000db6:	f002 f96d 	bl	8003094 <BSP_LCD_GetXSize>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	085b      	lsrs	r3, r3, #1
 8000dbe:	b29b      	uxth	r3, r3
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	b29c      	uxth	r4, r3
 8000dc4:	f002 f97a 	bl	80030bc <BSP_LCD_GetYSize>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	085b      	lsrs	r3, r3, #1
 8000dcc:	b29b      	uxth	r3, r3
 8000dce:	3b0b      	subs	r3, #11
 8000dd0:	b29b      	uxth	r3, r3
 8000dd2:	224e      	movs	r2, #78	; 0x4e
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4620      	mov	r0, r4
 8000dd8:	f002 fa68 	bl	80032ac <BSP_LCD_DisplayChar>
}
 8000ddc:	bf00      	nop
 8000dde:	bd98      	pop	{r3, r4, r7, pc}
 8000de0:	20000028 	.word	0x20000028

08000de4 <DrawOFFutton>:
void DrawOFFutton(){
 8000de4:	b598      	push	{r3, r4, r7, lr}
 8000de6:	af00      	add	r7, sp, #0
	BSP_LCD_Clear(LCD_COLOR_BLACK);
 8000de8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000dec:	f002 fa36 	bl	800325c <BSP_LCD_Clear>
	BSP_LCD_SetTextColor(LCD_COLOR_ORANGE);
 8000df0:	4829      	ldr	r0, [pc, #164]	; (8000e98 <DrawOFFutton+0xb4>)
 8000df2:	f002 f9e7 	bl	80031c4 <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle(OFF_X, OFF_Y, R/2);
 8000df6:	f002 f94d 	bl	8003094 <BSP_LCD_GetXSize>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	b29b      	uxth	r3, r3
 8000dfe:	3b1e      	subs	r3, #30
 8000e00:	b29c      	uxth	r4, r3
 8000e02:	f002 f95b 	bl	80030bc <BSP_LCD_GetYSize>
 8000e06:	4603      	mov	r3, r0
 8000e08:	b29b      	uxth	r3, r3
 8000e0a:	3b1e      	subs	r3, #30
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	2214      	movs	r2, #20
 8000e10:	4619      	mov	r1, r3
 8000e12:	4620      	mov	r0, r4
 8000e14:	f002 fce6 	bl	80037e4 <BSP_LCD_FillCircle>
	BSP_LCD_SetBackColor(LCD_COLOR_ORANGE);
 8000e18:	481f      	ldr	r0, [pc, #124]	; (8000e98 <DrawOFFutton+0xb4>)
 8000e1a:	f002 f9eb 	bl	80031f4 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000e1e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000e22:	f002 f9cf 	bl	80031c4 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font16);
 8000e26:	481d      	ldr	r0, [pc, #116]	; (8000e9c <DrawOFFutton+0xb8>)
 8000e28:	f002 f9fe 	bl	8003228 <BSP_LCD_SetFont>
	BSP_LCD_DisplayChar(OFF_X-14, OFF_Y-7,(char)'O');
 8000e2c:	f002 f932 	bl	8003094 <BSP_LCD_GetXSize>
 8000e30:	4603      	mov	r3, r0
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	3b2c      	subs	r3, #44	; 0x2c
 8000e36:	b29c      	uxth	r4, r3
 8000e38:	f002 f940 	bl	80030bc <BSP_LCD_GetYSize>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	b29b      	uxth	r3, r3
 8000e40:	3b25      	subs	r3, #37	; 0x25
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	224f      	movs	r2, #79	; 0x4f
 8000e46:	4619      	mov	r1, r3
 8000e48:	4620      	mov	r0, r4
 8000e4a:	f002 fa2f 	bl	80032ac <BSP_LCD_DisplayChar>
	BSP_LCD_DisplayChar(OFF_X-4, OFF_Y-7,(char)'F');
 8000e4e:	f002 f921 	bl	8003094 <BSP_LCD_GetXSize>
 8000e52:	4603      	mov	r3, r0
 8000e54:	b29b      	uxth	r3, r3
 8000e56:	3b22      	subs	r3, #34	; 0x22
 8000e58:	b29c      	uxth	r4, r3
 8000e5a:	f002 f92f 	bl	80030bc <BSP_LCD_GetYSize>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	b29b      	uxth	r3, r3
 8000e62:	3b25      	subs	r3, #37	; 0x25
 8000e64:	b29b      	uxth	r3, r3
 8000e66:	2246      	movs	r2, #70	; 0x46
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	f002 fa1e 	bl	80032ac <BSP_LCD_DisplayChar>
	BSP_LCD_DisplayChar(OFF_X+6, OFF_Y-7,(char)'F');
 8000e70:	f002 f910 	bl	8003094 <BSP_LCD_GetXSize>
 8000e74:	4603      	mov	r3, r0
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	3b18      	subs	r3, #24
 8000e7a:	b29c      	uxth	r4, r3
 8000e7c:	f002 f91e 	bl	80030bc <BSP_LCD_GetYSize>
 8000e80:	4603      	mov	r3, r0
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	3b25      	subs	r3, #37	; 0x25
 8000e86:	b29b      	uxth	r3, r3
 8000e88:	2246      	movs	r2, #70	; 0x46
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	f002 fa0d 	bl	80032ac <BSP_LCD_DisplayChar>
}
 8000e92:	bf00      	nop
 8000e94:	bd98      	pop	{r3, r4, r7, pc}
 8000e96:	bf00      	nop
 8000e98:	ffffa500 	.word	0xffffa500
 8000e9c:	20000030 	.word	0x20000030

08000ea0 <SD_Init>:
void SD_Init() {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	f5ad 6d80 	sub.w	sp, sp, #1024	; 0x400
 8000ea6:	af00      	add	r7, sp, #0
	uint16_t rtext[_MAX_SS];/* File read buffer */
	FRESULT Res;
	if (f_mount(&SDFatFS, (TCHAR const*) SDPath, 0) != FR_OK) {
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	490a      	ldr	r1, [pc, #40]	; (8000ed4 <SD_Init+0x34>)
 8000eac:	480a      	ldr	r0, [pc, #40]	; (8000ed8 <SD_Init+0x38>)
 8000eae:	f00e fef9 	bl	800fca4 <f_mount>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d002      	beq.n	8000ebe <SD_Init+0x1e>
		Error_Handler();
 8000eb8:	f001 fa78 	bl	80023ac <Error_Handler>
//			BSP_LCD_DisplayStringAt(0, 50, (uint8_t*) "SD - Formatage Ok",
//					CENTER_MODE);
//			//Open file for writing (Create)
//		}
	}
}
 8000ebc:	e005      	b.n	8000eca <SD_Init+0x2a>
		BSP_LCD_DisplayStringAt(0, 40, (uint8_t*) "SD - Mount Ok", CENTER_MODE);
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	4a06      	ldr	r2, [pc, #24]	; (8000edc <SD_Init+0x3c>)
 8000ec2:	2128      	movs	r1, #40	; 0x28
 8000ec4:	2000      	movs	r0, #0
 8000ec6:	f002 fa35 	bl	8003334 <BSP_LCD_DisplayStringAt>
}
 8000eca:	bf00      	nop
 8000ecc:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20000d34 	.word	0x20000d34
 8000ed8:	20000d38 	.word	0x20000d38
 8000edc:	08013b3c 	.word	0x08013b3c

08000ee0 <Audio_Init>:
void Audio_Init() {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af02      	add	r7, sp, #8
	if (BSP_AUDIO_IN_OUT_Init(INPUT_DEVICE_INPUT_LINE_1,
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	9300      	str	r3, [sp, #0]
 8000eea:	2310      	movs	r3, #16
 8000eec:	f245 6222 	movw	r2, #22050	; 0x5622
 8000ef0:	2102      	movs	r1, #2
 8000ef2:	f44f 7040 	mov.w	r0, #768	; 0x300
 8000ef6:	f001 fe59 	bl	8002bac <BSP_AUDIO_IN_OUT_Init>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d105      	bne.n	8000f0c <Audio_Init+0x2c>
	OUTPUT_DEVICE_HEADPHONE, Audio_freq,
	Audio_bit_res,
	Audio_chan) == AUDIO_OK) {
		BSP_LCD_DisplayStringAt(0, 20, (uint8_t*) "Init Audio - OK",
 8000f00:	2301      	movs	r3, #1
 8000f02:	4a17      	ldr	r2, [pc, #92]	; (8000f60 <Audio_Init+0x80>)
 8000f04:	2114      	movs	r1, #20
 8000f06:	2000      	movs	r0, #0
 8000f08:	f002 fa14 	bl	8003334 <BSP_LCD_DisplayStringAt>
				CENTER_MODE);
	}

	/* Initialize SDRAM buffers */
	memset((uint16_t*) AUDIO_BUFFER_IN, 0, AUDIO_BLOCK_SIZE * 2);
 8000f0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f10:	2100      	movs	r1, #0
 8000f12:	4814      	ldr	r0, [pc, #80]	; (8000f64 <Audio_Init+0x84>)
 8000f14:	f012 fdf2 	bl	8013afc <memset>
	memset((uint16_t*) AUDIO_BUFFER_OUT, 0, AUDIO_BLOCK_SIZE * 2);
 8000f18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	4812      	ldr	r0, [pc, #72]	; (8000f68 <Audio_Init+0x88>)
 8000f20:	f012 fdec 	bl	8013afc <memset>
	memset((uint16_t*) AUDIO_BUFFER_READ, 0, AUDIO_BLOCK_SIZE * 2);
 8000f24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f28:	2100      	movs	r1, #0
 8000f2a:	4810      	ldr	r0, [pc, #64]	; (8000f6c <Audio_Init+0x8c>)
 8000f2c:	f012 fde6 	bl	8013afc <memset>

	/* Start Recording */
//	BSP_AUDIO_IN_Record((uint16_t*) AUDIO_BUFFER_IN, AUDIO_BLOCK_SIZE);
//	BSP_AUDIO_IN_SetVolume(191);
	BSP_AUDIO_OUT_SetVolume(50);
 8000f30:	2032      	movs	r0, #50	; 0x32
 8000f32:	f001 fc83 	bl	800283c <BSP_AUDIO_OUT_SetVolume>
	/* Start Playback */
	BSP_AUDIO_OUT_SetAudioFrameSlot(CODEC_AUDIOFRAME_SLOT_02);
 8000f36:	2005      	movs	r0, #5
 8000f38:	f001 fc98 	bl	800286c <BSP_AUDIO_OUT_SetAudioFrameSlot>
	if (BSP_AUDIO_OUT_Play((uint16_t*) AUDIO_BUFFER_OUT,
 8000f3c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f40:	4809      	ldr	r0, [pc, #36]	; (8000f68 <Audio_Init+0x88>)
 8000f42:	f001 fc51 	bl	80027e8 <BSP_AUDIO_OUT_Play>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d105      	bne.n	8000f58 <Audio_Init+0x78>
	AUDIO_BLOCK_SIZE * 2) == AUDIO_OK) {
		BSP_LCD_DisplayStringAt(0, 30, (uint8_t*) "Play Audio - OK",
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	4a08      	ldr	r2, [pc, #32]	; (8000f70 <Audio_Init+0x90>)
 8000f50:	211e      	movs	r1, #30
 8000f52:	2000      	movs	r0, #0
 8000f54:	f002 f9ee 	bl	8003334 <BSP_LCD_DisplayStringAt>
				CENTER_MODE);
	}

}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	08013b4c 	.word	0x08013b4c
 8000f64:	c007f800 	.word	0xc007f800
 8000f68:	c007fc00 	.word	0xc007fc00
 8000f6c:	c0080000 	.word	0xc0080000
 8000f70:	08013b5c 	.word	0x08013b5c

08000f74 <LCD_Init>:
void LCD_Init() {
 8000f74:	b598      	push	{r3, r4, r7, lr}
 8000f76:	af00      	add	r7, sp, #0
	BSP_LCD_Init();
 8000f78:	f002 f81c 	bl	8002fb4 <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8000f7c:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8000f80:	2000      	movs	r0, #0
 8000f82:	f002 f8af 	bl	80030e4 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_LayerDefaultInit(1,
	LCD_FB_START_ADDRESS + BSP_LCD_GetXSize() * BSP_LCD_GetYSize() * 4);
 8000f86:	f002 f885 	bl	8003094 <BSP_LCD_GetXSize>
 8000f8a:	4604      	mov	r4, r0
 8000f8c:	f002 f896 	bl	80030bc <BSP_LCD_GetYSize>
 8000f90:	4603      	mov	r3, r0
 8000f92:	fb04 f303 	mul.w	r3, r4, r3
 8000f96:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
	BSP_LCD_LayerDefaultInit(1,
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	2001      	movs	r0, #1
 8000fa0:	f002 f8a0 	bl	80030e4 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_DisplayOn();
 8000fa4:	f002 fcbe 	bl	8003924 <BSP_LCD_DisplayOn>
	BSP_LCD_SelectLayer(1);
 8000fa8:	2001      	movs	r0, #1
 8000faa:	f002 f8fb 	bl	80031a4 <BSP_LCD_SelectLayer>
	BSP_LCD_Clear(LCD_COLOR_BLACK);
 8000fae:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000fb2:	f002 f953 	bl	800325c <BSP_LCD_Clear>
	BSP_LCD_SetFont(&Font12);
 8000fb6:	481f      	ldr	r0, [pc, #124]	; (8001034 <LCD_Init+0xc0>)
 8000fb8:	f002 f936 	bl	8003228 <BSP_LCD_SetFont>
	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8000fbc:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000fc0:	f002 f918 	bl	80031f4 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_LIGHTBLUE);
 8000fc4:	481c      	ldr	r0, [pc, #112]	; (8001038 <LCD_Init+0xc4>)
 8000fc6:	f002 f8fd 	bl	80031c4 <BSP_LCD_SetTextColor>
	if (BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize()) != TS_OK) {
 8000fca:	f002 f863 	bl	8003094 <BSP_LCD_GetXSize>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	b29c      	uxth	r4, r3
 8000fd2:	f002 f873 	bl	80030bc <BSP_LCD_GetYSize>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	b29b      	uxth	r3, r3
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4620      	mov	r0, r4
 8000fde:	f003 f86f 	bl	80040c0 <BSP_TS_Init>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d01d      	beq.n	8001024 <LCD_Init+0xb0>
		BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8000fe8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000fec:	f002 f902 	bl	80031f4 <BSP_LCD_SetBackColor>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8000ff0:	4812      	ldr	r0, [pc, #72]	; (800103c <LCD_Init+0xc8>)
 8000ff2:	f002 f8e7 	bl	80031c4 <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 95, (uint8_t*) "ERROR",
 8000ff6:	f002 f861 	bl	80030bc <BSP_LCD_GetYSize>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	3b5f      	subs	r3, #95	; 0x5f
 8001000:	b299      	uxth	r1, r3
 8001002:	2301      	movs	r3, #1
 8001004:	4a0e      	ldr	r2, [pc, #56]	; (8001040 <LCD_Init+0xcc>)
 8001006:	2000      	movs	r0, #0
 8001008:	f002 f994 	bl	8003334 <BSP_LCD_DisplayStringAt>
				CENTER_MODE);
		BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80,
 800100c:	f002 f856 	bl	80030bc <BSP_LCD_GetYSize>
 8001010:	4603      	mov	r3, r0
 8001012:	b29b      	uxth	r3, r3
 8001014:	3b50      	subs	r3, #80	; 0x50
 8001016:	b299      	uxth	r1, r3
 8001018:	2301      	movs	r3, #1
 800101a:	4a0a      	ldr	r2, [pc, #40]	; (8001044 <LCD_Init+0xd0>)
 800101c:	2000      	movs	r0, #0
 800101e:	f002 f989 	bl	8003334 <BSP_LCD_DisplayStringAt>
				(uint8_t*) "Touchscreen cannot be initialized", CENTER_MODE);
	} else {
		BSP_LCD_DisplayStringAt(0, 10, (uint8_t*) "Init Ecran - OK",
				CENTER_MODE);
	}
}
 8001022:	e005      	b.n	8001030 <LCD_Init+0xbc>
		BSP_LCD_DisplayStringAt(0, 10, (uint8_t*) "Init Ecran - OK",
 8001024:	2301      	movs	r3, #1
 8001026:	4a08      	ldr	r2, [pc, #32]	; (8001048 <LCD_Init+0xd4>)
 8001028:	210a      	movs	r1, #10
 800102a:	2000      	movs	r0, #0
 800102c:	f002 f982 	bl	8003334 <BSP_LCD_DisplayStringAt>
}
 8001030:	bf00      	nop
 8001032:	bd98      	pop	{r3, r4, r7, pc}
 8001034:	20000038 	.word	0x20000038
 8001038:	ff8080ff 	.word	0xff8080ff
 800103c:	ffff0000 	.word	0xffff0000
 8001040:	08013b6c 	.word	0x08013b6c
 8001044:	08013b74 	.word	0x08013b74
 8001048:	08013b98 	.word	0x08013b98

0800104c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800104c:	b5b0      	push	{r4, r5, r7, lr}
 800104e:	b09a      	sub	sp, #104	; 0x68
 8001050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8001052:	f7ff fd35 	bl	8000ac0 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8001056:	f7ff fd59 	bl	8000b0c <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800105a:	f005 fc8a 	bl	8006972 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800105e:	f000 f871 	bl	8001144 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001062:	f000 f8df 	bl	8001224 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001066:	f000 fb79 	bl	800175c <MX_GPIO_Init>
  MX_DMA_Init();
 800106a:	f000 fab9 	bl	80015e0 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 800106e:	f000 fa67 	bl	8001540 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8001072:	f00c fe19 	bl	800dca8 <MX_FATFS_Init>
  MX_FMC_Init();
 8001076:	f000 fae9 	bl	800164c <MX_FMC_Init>
  MX_LTDC_Init();
 800107a:	f000 f937 	bl	80012ec <MX_LTDC_Init>
  MX_USART1_UART_Init();
 800107e:	f000 fa7f 	bl	8001580 <MX_USART1_UART_Init>
  MX_DMA2D_Init();
 8001082:	f000 f901 	bl	8001288 <MX_DMA2D_Init>
  MX_SAI2_Init();
 8001086:	f000 f9b3 	bl	80013f0 <MX_SAI2_Init>
  /* USER CODE BEGIN 2 */
	LCD_Init();
 800108a:	f7ff ff73 	bl	8000f74 <LCD_Init>
	Audio_Init();
 800108e:	f7ff ff27 	bl	8000ee0 <Audio_Init>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of WakeUp */
  osMessageQDef(WakeUp, 1, uint8_t);
 8001092:	4b24      	ldr	r3, [pc, #144]	; (8001124 <main+0xd8>)
 8001094:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8001098:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800109a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  WakeUpHandle = osMessageCreate(osMessageQ(WakeUp), NULL);
 800109e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80010a2:	2100      	movs	r1, #0
 80010a4:	4618      	mov	r0, r3
 80010a6:	f00f febc 	bl	8010e22 <osMessageCreate>
 80010aa:	4603      	mov	r3, r0
 80010ac:	4a1e      	ldr	r2, [pc, #120]	; (8001128 <main+0xdc>)
 80010ae:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 512);
 80010b0:	4b1e      	ldr	r3, [pc, #120]	; (800112c <main+0xe0>)
 80010b2:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80010b6:	461d      	mov	r5, r3
 80010b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80010c4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80010c8:	2100      	movs	r1, #0
 80010ca:	4618      	mov	r0, r3
 80010cc:	f00f fd80 	bl	8010bd0 <osThreadCreate>
 80010d0:	4603      	mov	r3, r0
 80010d2:	4a17      	ldr	r2, [pc, #92]	; (8001130 <main+0xe4>)
 80010d4:	6013      	str	r3, [r2, #0]

  /* definition and creation of SD */
  osThreadDef(SD, StartSD, osPriorityHigh, 0, 512);
 80010d6:	4b17      	ldr	r3, [pc, #92]	; (8001134 <main+0xe8>)
 80010d8:	f107 0420 	add.w	r4, r7, #32
 80010dc:	461d      	mov	r5, r3
 80010de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SDHandle = osThreadCreate(osThread(SD), NULL);
 80010ea:	f107 0320 	add.w	r3, r7, #32
 80010ee:	2100      	movs	r1, #0
 80010f0:	4618      	mov	r0, r3
 80010f2:	f00f fd6d 	bl	8010bd0 <osThreadCreate>
 80010f6:	4603      	mov	r3, r0
 80010f8:	4a0f      	ldr	r2, [pc, #60]	; (8001138 <main+0xec>)
 80010fa:	6013      	str	r3, [r2, #0]

  /* definition and creation of Record */
  osThreadDef(Record, StartRecord, osPriorityHigh, 0, 256);
 80010fc:	4b0f      	ldr	r3, [pc, #60]	; (800113c <main+0xf0>)
 80010fe:	1d3c      	adds	r4, r7, #4
 8001100:	461d      	mov	r5, r3
 8001102:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001104:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001106:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800110a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  RecordHandle = osThreadCreate(osThread(Record), NULL);
 800110e:	1d3b      	adds	r3, r7, #4
 8001110:	2100      	movs	r1, #0
 8001112:	4618      	mov	r0, r3
 8001114:	f00f fd5c 	bl	8010bd0 <osThreadCreate>
 8001118:	4603      	mov	r3, r0
 800111a:	4a09      	ldr	r2, [pc, #36]	; (8001140 <main+0xf4>)
 800111c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800111e:	f00f fd34 	bl	8010b8a <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001122:	e7fe      	b.n	8001122 <main+0xd6>
 8001124:	08013ba8 	.word	0x08013ba8
 8001128:	200007f8 	.word	0x200007f8
 800112c:	08013bb8 	.word	0x08013bb8
 8001130:	200007ec 	.word	0x200007ec
 8001134:	08013bd4 	.word	0x08013bd4
 8001138:	200007f0 	.word	0x200007f0
 800113c:	08013bf0 	.word	0x08013bf0
 8001140:	200007f4 	.word	0x200007f4

08001144 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b094      	sub	sp, #80	; 0x50
 8001148:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800114a:	f107 0320 	add.w	r3, r7, #32
 800114e:	2230      	movs	r2, #48	; 0x30
 8001150:	2100      	movs	r1, #0
 8001152:	4618      	mov	r0, r3
 8001154:	f012 fcd2 	bl	8013afc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001158:	f107 030c 	add.w	r3, r7, #12
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001168:	f007 ffd2 	bl	8009110 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800116c:	4b2b      	ldr	r3, [pc, #172]	; (800121c <SystemClock_Config+0xd8>)
 800116e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001170:	4a2a      	ldr	r2, [pc, #168]	; (800121c <SystemClock_Config+0xd8>)
 8001172:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001176:	6413      	str	r3, [r2, #64]	; 0x40
 8001178:	4b28      	ldr	r3, [pc, #160]	; (800121c <SystemClock_Config+0xd8>)
 800117a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001180:	60bb      	str	r3, [r7, #8]
 8001182:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001184:	4b26      	ldr	r3, [pc, #152]	; (8001220 <SystemClock_Config+0xdc>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a25      	ldr	r2, [pc, #148]	; (8001220 <SystemClock_Config+0xdc>)
 800118a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800118e:	6013      	str	r3, [r2, #0]
 8001190:	4b23      	ldr	r3, [pc, #140]	; (8001220 <SystemClock_Config+0xdc>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001198:	607b      	str	r3, [r7, #4]
 800119a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800119c:	2301      	movs	r3, #1
 800119e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011a6:	2302      	movs	r3, #2
 80011a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80011b0:	2319      	movs	r3, #25
 80011b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 80011b4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80011b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011ba:	2302      	movs	r3, #2
 80011bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80011be:	2309      	movs	r3, #9
 80011c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011c2:	f107 0320 	add.w	r3, r7, #32
 80011c6:	4618      	mov	r0, r3
 80011c8:	f008 f802 	bl	80091d0 <HAL_RCC_OscConfig>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80011d2:	f001 f8eb 	bl	80023ac <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80011d6:	f007 ffab 	bl	8009130 <HAL_PWREx_EnableOverDrive>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80011e0:	f001 f8e4 	bl	80023ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011e4:	230f      	movs	r3, #15
 80011e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011e8:	2302      	movs	r3, #2
 80011ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011f0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80011fc:	f107 030c 	add.w	r3, r7, #12
 8001200:	2106      	movs	r1, #6
 8001202:	4618      	mov	r0, r3
 8001204:	f008 fa88 	bl	8009718 <HAL_RCC_ClockConfig>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <SystemClock_Config+0xce>
  {
    Error_Handler();
 800120e:	f001 f8cd 	bl	80023ac <Error_Handler>
  }
}
 8001212:	bf00      	nop
 8001214:	3750      	adds	r7, #80	; 0x50
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40023800 	.word	0x40023800
 8001220:	40007000 	.word	0x40007000

08001224 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b0a2      	sub	sp, #136	; 0x88
 8001228:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800122a:	1d3b      	adds	r3, r7, #4
 800122c:	2284      	movs	r2, #132	; 0x84
 800122e:	2100      	movs	r1, #0
 8001230:	4618      	mov	r0, r3
 8001232:	f012 fc63 	bl	8013afc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 8001236:	4b13      	ldr	r3, [pc, #76]	; (8001284 <PeriphCommonClock_Config+0x60>)
 8001238:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800123a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800123e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8001240:	2305      	movs	r3, #5
 8001242:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001244:	2302      	movs	r3, #2
 8001246:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001248:	2303      	movs	r3, #3
 800124a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800124c:	2301      	movs	r3, #1
 800124e:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001250:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001254:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8001256:	2300      	movs	r3, #0
 8001258:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800125a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800125e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8001262:	2300      	movs	r3, #0
 8001264:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001268:	1d3b      	adds	r3, r7, #4
 800126a:	4618      	mov	r0, r3
 800126c:	f008 fc6c 	bl	8009b48 <HAL_RCCEx_PeriphCLKConfig>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8001276:	f001 f899 	bl	80023ac <Error_Handler>
  }
}
 800127a:	bf00      	nop
 800127c:	3788      	adds	r7, #136	; 0x88
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	00b00008 	.word	0x00b00008

08001288 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800128c:	4b15      	ldr	r3, [pc, #84]	; (80012e4 <MX_DMA2D_Init+0x5c>)
 800128e:	4a16      	ldr	r2, [pc, #88]	; (80012e8 <MX_DMA2D_Init+0x60>)
 8001290:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001292:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <MX_DMA2D_Init+0x5c>)
 8001294:	2200      	movs	r2, #0
 8001296:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001298:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <MX_DMA2D_Init+0x5c>)
 800129a:	2200      	movs	r2, #0
 800129c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800129e:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <MX_DMA2D_Init+0x5c>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80012a4:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <MX_DMA2D_Init+0x5c>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80012aa:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <MX_DMA2D_Init+0x5c>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80012b0:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <MX_DMA2D_Init+0x5c>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80012b6:	4b0b      	ldr	r3, [pc, #44]	; (80012e4 <MX_DMA2D_Init+0x5c>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80012bc:	4809      	ldr	r0, [pc, #36]	; (80012e4 <MX_DMA2D_Init+0x5c>)
 80012be:	f006 f88f 	bl	80073e0 <HAL_DMA2D_Init>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80012c8:	f001 f870 	bl	80023ac <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80012cc:	2101      	movs	r1, #1
 80012ce:	4805      	ldr	r0, [pc, #20]	; (80012e4 <MX_DMA2D_Init+0x5c>)
 80012d0:	f006 f9e4 	bl	800769c <HAL_DMA2D_ConfigLayer>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80012da:	f001 f867 	bl	80023ac <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20000308 	.word	0x20000308
 80012e8:	4002b000 	.word	0x4002b000

080012ec <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08e      	sub	sp, #56	; 0x38
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80012f2:	1d3b      	adds	r3, r7, #4
 80012f4:	2234      	movs	r2, #52	; 0x34
 80012f6:	2100      	movs	r1, #0
 80012f8:	4618      	mov	r0, r3
 80012fa:	f012 fbff 	bl	8013afc <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80012fe:	4b3a      	ldr	r3, [pc, #232]	; (80013e8 <MX_LTDC_Init+0xfc>)
 8001300:	4a3a      	ldr	r2, [pc, #232]	; (80013ec <MX_LTDC_Init+0x100>)
 8001302:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001304:	4b38      	ldr	r3, [pc, #224]	; (80013e8 <MX_LTDC_Init+0xfc>)
 8001306:	2200      	movs	r2, #0
 8001308:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800130a:	4b37      	ldr	r3, [pc, #220]	; (80013e8 <MX_LTDC_Init+0xfc>)
 800130c:	2200      	movs	r2, #0
 800130e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001310:	4b35      	ldr	r3, [pc, #212]	; (80013e8 <MX_LTDC_Init+0xfc>)
 8001312:	2200      	movs	r2, #0
 8001314:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001316:	4b34      	ldr	r3, [pc, #208]	; (80013e8 <MX_LTDC_Init+0xfc>)
 8001318:	2200      	movs	r2, #0
 800131a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 800131c:	4b32      	ldr	r3, [pc, #200]	; (80013e8 <MX_LTDC_Init+0xfc>)
 800131e:	2228      	movs	r2, #40	; 0x28
 8001320:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8001322:	4b31      	ldr	r3, [pc, #196]	; (80013e8 <MX_LTDC_Init+0xfc>)
 8001324:	2209      	movs	r2, #9
 8001326:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8001328:	4b2f      	ldr	r3, [pc, #188]	; (80013e8 <MX_LTDC_Init+0xfc>)
 800132a:	2235      	movs	r2, #53	; 0x35
 800132c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800132e:	4b2e      	ldr	r3, [pc, #184]	; (80013e8 <MX_LTDC_Init+0xfc>)
 8001330:	220b      	movs	r2, #11
 8001332:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8001334:	4b2c      	ldr	r3, [pc, #176]	; (80013e8 <MX_LTDC_Init+0xfc>)
 8001336:	f240 2215 	movw	r2, #533	; 0x215
 800133a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 800133c:	4b2a      	ldr	r3, [pc, #168]	; (80013e8 <MX_LTDC_Init+0xfc>)
 800133e:	f240 121b 	movw	r2, #283	; 0x11b
 8001342:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8001344:	4b28      	ldr	r3, [pc, #160]	; (80013e8 <MX_LTDC_Init+0xfc>)
 8001346:	f240 2235 	movw	r2, #565	; 0x235
 800134a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 800134c:	4b26      	ldr	r3, [pc, #152]	; (80013e8 <MX_LTDC_Init+0xfc>)
 800134e:	f240 121d 	movw	r2, #285	; 0x11d
 8001352:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001354:	4b24      	ldr	r3, [pc, #144]	; (80013e8 <MX_LTDC_Init+0xfc>)
 8001356:	2200      	movs	r2, #0
 8001358:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800135c:	4b22      	ldr	r3, [pc, #136]	; (80013e8 <MX_LTDC_Init+0xfc>)
 800135e:	2200      	movs	r2, #0
 8001360:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001364:	4b20      	ldr	r3, [pc, #128]	; (80013e8 <MX_LTDC_Init+0xfc>)
 8001366:	2200      	movs	r2, #0
 8001368:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800136c:	481e      	ldr	r0, [pc, #120]	; (80013e8 <MX_LTDC_Init+0xfc>)
 800136e:	f007 fb57 	bl	8008a20 <HAL_LTDC_Init>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001378:	f001 f818 	bl	80023ac <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800137c:	2300      	movs	r3, #0
 800137e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8001380:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001384:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001386:	2300      	movs	r3, #0
 8001388:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 800138a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800138e:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001390:	2302      	movs	r3, #2
 8001392:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001394:	23ff      	movs	r3, #255	; 0xff
 8001396:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001398:	2300      	movs	r3, #0
 800139a:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800139c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80013a0:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80013a2:	2307      	movs	r3, #7
 80013a4:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 80013a6:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80013aa:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 80013ac:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80013b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 80013b2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80013b6:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80013ca:	1d3b      	adds	r3, r7, #4
 80013cc:	2200      	movs	r2, #0
 80013ce:	4619      	mov	r1, r3
 80013d0:	4805      	ldr	r0, [pc, #20]	; (80013e8 <MX_LTDC_Init+0xfc>)
 80013d2:	f007 fcb7 	bl	8008d44 <HAL_LTDC_ConfigLayer>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 80013dc:	f000 ffe6 	bl	80023ac <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80013e0:	bf00      	nop
 80013e2:	3738      	adds	r7, #56	; 0x38
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	20000348 	.word	0x20000348
 80013ec:	40016800 	.word	0x40016800

080013f0 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 80013f4:	4b4e      	ldr	r3, [pc, #312]	; (8001530 <MX_SAI2_Init+0x140>)
 80013f6:	4a4f      	ldr	r2, [pc, #316]	; (8001534 <MX_SAI2_Init+0x144>)
 80013f8:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 80013fa:	4b4d      	ldr	r3, [pc, #308]	; (8001530 <MX_SAI2_Init+0x140>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001400:	4b4b      	ldr	r3, [pc, #300]	; (8001530 <MX_SAI2_Init+0x140>)
 8001402:	2200      	movs	r2, #0
 8001404:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8001406:	4b4a      	ldr	r3, [pc, #296]	; (8001530 <MX_SAI2_Init+0x140>)
 8001408:	2240      	movs	r2, #64	; 0x40
 800140a:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800140c:	4b48      	ldr	r3, [pc, #288]	; (8001530 <MX_SAI2_Init+0x140>)
 800140e:	2200      	movs	r2, #0
 8001410:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001412:	4b47      	ldr	r3, [pc, #284]	; (8001530 <MX_SAI2_Init+0x140>)
 8001414:	2200      	movs	r2, #0
 8001416:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001418:	4b45      	ldr	r3, [pc, #276]	; (8001530 <MX_SAI2_Init+0x140>)
 800141a:	2200      	movs	r2, #0
 800141c:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800141e:	4b44      	ldr	r3, [pc, #272]	; (8001530 <MX_SAI2_Init+0x140>)
 8001420:	2200      	movs	r2, #0
 8001422:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001424:	4b42      	ldr	r3, [pc, #264]	; (8001530 <MX_SAI2_Init+0x140>)
 8001426:	2200      	movs	r2, #0
 8001428:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800142a:	4b41      	ldr	r3, [pc, #260]	; (8001530 <MX_SAI2_Init+0x140>)
 800142c:	2200      	movs	r2, #0
 800142e:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8001430:	4b3f      	ldr	r3, [pc, #252]	; (8001530 <MX_SAI2_Init+0x140>)
 8001432:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001436:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001438:	4b3d      	ldr	r3, [pc, #244]	; (8001530 <MX_SAI2_Init+0x140>)
 800143a:	2200      	movs	r2, #0
 800143c:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 800143e:	4b3c      	ldr	r3, [pc, #240]	; (8001530 <MX_SAI2_Init+0x140>)
 8001440:	2200      	movs	r2, #0
 8001442:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001444:	4b3a      	ldr	r3, [pc, #232]	; (8001530 <MX_SAI2_Init+0x140>)
 8001446:	2200      	movs	r2, #0
 8001448:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800144a:	4b39      	ldr	r3, [pc, #228]	; (8001530 <MX_SAI2_Init+0x140>)
 800144c:	2200      	movs	r2, #0
 800144e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001450:	4b37      	ldr	r3, [pc, #220]	; (8001530 <MX_SAI2_Init+0x140>)
 8001452:	2208      	movs	r2, #8
 8001454:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001456:	4b36      	ldr	r3, [pc, #216]	; (8001530 <MX_SAI2_Init+0x140>)
 8001458:	2201      	movs	r2, #1
 800145a:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800145c:	4b34      	ldr	r3, [pc, #208]	; (8001530 <MX_SAI2_Init+0x140>)
 800145e:	2200      	movs	r2, #0
 8001460:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001462:	4b33      	ldr	r3, [pc, #204]	; (8001530 <MX_SAI2_Init+0x140>)
 8001464:	2200      	movs	r2, #0
 8001466:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001468:	4b31      	ldr	r3, [pc, #196]	; (8001530 <MX_SAI2_Init+0x140>)
 800146a:	2200      	movs	r2, #0
 800146c:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 800146e:	4b30      	ldr	r3, [pc, #192]	; (8001530 <MX_SAI2_Init+0x140>)
 8001470:	2200      	movs	r2, #0
 8001472:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001474:	4b2e      	ldr	r3, [pc, #184]	; (8001530 <MX_SAI2_Init+0x140>)
 8001476:	2200      	movs	r2, #0
 8001478:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 800147a:	4b2d      	ldr	r3, [pc, #180]	; (8001530 <MX_SAI2_Init+0x140>)
 800147c:	2201      	movs	r2, #1
 800147e:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001480:	4b2b      	ldr	r3, [pc, #172]	; (8001530 <MX_SAI2_Init+0x140>)
 8001482:	2200      	movs	r2, #0
 8001484:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001486:	482a      	ldr	r0, [pc, #168]	; (8001530 <MX_SAI2_Init+0x140>)
 8001488:	f009 f99e 	bl	800a7c8 <HAL_SAI_Init>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_SAI2_Init+0xa6>
  {
    Error_Handler();
 8001492:	f000 ff8b 	bl	80023ac <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001496:	4b28      	ldr	r3, [pc, #160]	; (8001538 <MX_SAI2_Init+0x148>)
 8001498:	4a28      	ldr	r2, [pc, #160]	; (800153c <MX_SAI2_Init+0x14c>)
 800149a:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 800149c:	4b26      	ldr	r3, [pc, #152]	; (8001538 <MX_SAI2_Init+0x148>)
 800149e:	2200      	movs	r2, #0
 80014a0:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 80014a2:	4b25      	ldr	r3, [pc, #148]	; (8001538 <MX_SAI2_Init+0x148>)
 80014a4:	2203      	movs	r2, #3
 80014a6:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 80014a8:	4b23      	ldr	r3, [pc, #140]	; (8001538 <MX_SAI2_Init+0x148>)
 80014aa:	2240      	movs	r2, #64	; 0x40
 80014ac:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80014ae:	4b22      	ldr	r3, [pc, #136]	; (8001538 <MX_SAI2_Init+0x148>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80014b4:	4b20      	ldr	r3, [pc, #128]	; (8001538 <MX_SAI2_Init+0x148>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 80014ba:	4b1f      	ldr	r3, [pc, #124]	; (8001538 <MX_SAI2_Init+0x148>)
 80014bc:	2201      	movs	r2, #1
 80014be:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80014c0:	4b1d      	ldr	r3, [pc, #116]	; (8001538 <MX_SAI2_Init+0x148>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80014c6:	4b1c      	ldr	r3, [pc, #112]	; (8001538 <MX_SAI2_Init+0x148>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80014cc:	4b1a      	ldr	r3, [pc, #104]	; (8001538 <MX_SAI2_Init+0x148>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 80014d2:	4b19      	ldr	r3, [pc, #100]	; (8001538 <MX_SAI2_Init+0x148>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 80014d8:	4b17      	ldr	r3, [pc, #92]	; (8001538 <MX_SAI2_Init+0x148>)
 80014da:	2200      	movs	r2, #0
 80014dc:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80014de:	4b16      	ldr	r3, [pc, #88]	; (8001538 <MX_SAI2_Init+0x148>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 80014e4:	4b14      	ldr	r3, [pc, #80]	; (8001538 <MX_SAI2_Init+0x148>)
 80014e6:	2208      	movs	r2, #8
 80014e8:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 80014ea:	4b13      	ldr	r3, [pc, #76]	; (8001538 <MX_SAI2_Init+0x148>)
 80014ec:	2201      	movs	r2, #1
 80014ee:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80014f0:	4b11      	ldr	r3, [pc, #68]	; (8001538 <MX_SAI2_Init+0x148>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80014f6:	4b10      	ldr	r3, [pc, #64]	; (8001538 <MX_SAI2_Init+0x148>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80014fc:	4b0e      	ldr	r3, [pc, #56]	; (8001538 <MX_SAI2_Init+0x148>)
 80014fe:	2200      	movs	r2, #0
 8001500:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001502:	4b0d      	ldr	r3, [pc, #52]	; (8001538 <MX_SAI2_Init+0x148>)
 8001504:	2200      	movs	r2, #0
 8001506:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001508:	4b0b      	ldr	r3, [pc, #44]	; (8001538 <MX_SAI2_Init+0x148>)
 800150a:	2200      	movs	r2, #0
 800150c:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 800150e:	4b0a      	ldr	r3, [pc, #40]	; (8001538 <MX_SAI2_Init+0x148>)
 8001510:	2201      	movs	r2, #1
 8001512:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8001514:	4b08      	ldr	r3, [pc, #32]	; (8001538 <MX_SAI2_Init+0x148>)
 8001516:	2200      	movs	r2, #0
 8001518:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 800151a:	4807      	ldr	r0, [pc, #28]	; (8001538 <MX_SAI2_Init+0x148>)
 800151c:	f009 f954 	bl	800a7c8 <HAL_SAI_Init>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_SAI2_Init+0x13a>
  {
    Error_Handler();
 8001526:	f000 ff41 	bl	80023ac <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	200003f0 	.word	0x200003f0
 8001534:	40015c04 	.word	0x40015c04
 8001538:	20000474 	.word	0x20000474
 800153c:	40015c24 	.word	0x40015c24

08001540 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001544:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <MX_SDMMC1_SD_Init+0x38>)
 8001546:	4a0d      	ldr	r2, [pc, #52]	; (800157c <MX_SDMMC1_SD_Init+0x3c>)
 8001548:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800154a:	4b0b      	ldr	r3, [pc, #44]	; (8001578 <MX_SDMMC1_SD_Init+0x38>)
 800154c:	2200      	movs	r2, #0
 800154e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001550:	4b09      	ldr	r3, [pc, #36]	; (8001578 <MX_SDMMC1_SD_Init+0x38>)
 8001552:	2200      	movs	r2, #0
 8001554:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001556:	4b08      	ldr	r3, [pc, #32]	; (8001578 <MX_SDMMC1_SD_Init+0x38>)
 8001558:	2200      	movs	r2, #0
 800155a:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 800155c:	4b06      	ldr	r3, [pc, #24]	; (8001578 <MX_SDMMC1_SD_Init+0x38>)
 800155e:	2200      	movs	r2, #0
 8001560:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001562:	4b05      	ldr	r3, [pc, #20]	; (8001578 <MX_SDMMC1_SD_Init+0x38>)
 8001564:	2200      	movs	r2, #0
 8001566:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001568:	4b03      	ldr	r3, [pc, #12]	; (8001578 <MX_SDMMC1_SD_Init+0x38>)
 800156a:	2200      	movs	r2, #0
 800156c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800156e:	bf00      	nop
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	200005b8 	.word	0x200005b8
 800157c:	40012c00 	.word	0x40012c00

08001580 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001584:	4b14      	ldr	r3, [pc, #80]	; (80015d8 <MX_USART1_UART_Init+0x58>)
 8001586:	4a15      	ldr	r2, [pc, #84]	; (80015dc <MX_USART1_UART_Init+0x5c>)
 8001588:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800158a:	4b13      	ldr	r3, [pc, #76]	; (80015d8 <MX_USART1_UART_Init+0x58>)
 800158c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001590:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001592:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <MX_USART1_UART_Init+0x58>)
 8001594:	2200      	movs	r2, #0
 8001596:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001598:	4b0f      	ldr	r3, [pc, #60]	; (80015d8 <MX_USART1_UART_Init+0x58>)
 800159a:	2200      	movs	r2, #0
 800159c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800159e:	4b0e      	ldr	r3, [pc, #56]	; (80015d8 <MX_USART1_UART_Init+0x58>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015a4:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <MX_USART1_UART_Init+0x58>)
 80015a6:	220c      	movs	r2, #12
 80015a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015aa:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <MX_USART1_UART_Init+0x58>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015b0:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <MX_USART1_UART_Init+0x58>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015b6:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <MX_USART1_UART_Init+0x58>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015bc:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <MX_USART1_UART_Init+0x58>)
 80015be:	2200      	movs	r2, #0
 80015c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015c2:	4805      	ldr	r0, [pc, #20]	; (80015d8 <MX_USART1_UART_Init+0x58>)
 80015c4:	f00b f8ea 	bl	800c79c <HAL_UART_Init>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80015ce:	f000 feed 	bl	80023ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	200006fc 	.word	0x200006fc
 80015dc:	40011000 	.word	0x40011000

080015e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80015e6:	4b18      	ldr	r3, [pc, #96]	; (8001648 <MX_DMA_Init+0x68>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	4a17      	ldr	r2, [pc, #92]	; (8001648 <MX_DMA_Init+0x68>)
 80015ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015f0:	6313      	str	r3, [r2, #48]	; 0x30
 80015f2:	4b15      	ldr	r3, [pc, #84]	; (8001648 <MX_DMA_Init+0x68>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015fa:	607b      	str	r3, [r7, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80015fe:	2200      	movs	r2, #0
 8001600:	2105      	movs	r1, #5
 8001602:	203b      	movs	r0, #59	; 0x3b
 8001604:	f005 fabe 	bl	8006b84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001608:	203b      	movs	r0, #59	; 0x3b
 800160a:	f005 fad7 	bl	8006bbc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 800160e:	2200      	movs	r2, #0
 8001610:	2105      	movs	r1, #5
 8001612:	203c      	movs	r0, #60	; 0x3c
 8001614:	f005 fab6 	bl	8006b84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8001618:	203c      	movs	r0, #60	; 0x3c
 800161a:	f005 facf 	bl	8006bbc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 800161e:	2200      	movs	r2, #0
 8001620:	2105      	movs	r1, #5
 8001622:	2045      	movs	r0, #69	; 0x45
 8001624:	f005 faae 	bl	8006b84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001628:	2045      	movs	r0, #69	; 0x45
 800162a:	f005 fac7 	bl	8006bbc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 800162e:	2200      	movs	r2, #0
 8001630:	2105      	movs	r1, #5
 8001632:	2046      	movs	r0, #70	; 0x46
 8001634:	f005 faa6 	bl	8006b84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001638:	2046      	movs	r0, #70	; 0x46
 800163a:	f005 fabf 	bl	8006bbc <HAL_NVIC_EnableIRQ>

}
 800163e:	bf00      	nop
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40023800 	.word	0x40023800

0800164c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b088      	sub	sp, #32
 8001650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001652:	1d3b      	adds	r3, r7, #4
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]
 800165e:	611a      	str	r2, [r3, #16]
 8001660:	615a      	str	r2, [r3, #20]
 8001662:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001664:	4b3a      	ldr	r3, [pc, #232]	; (8001750 <MX_FMC_Init+0x104>)
 8001666:	4a3b      	ldr	r2, [pc, #236]	; (8001754 <MX_FMC_Init+0x108>)
 8001668:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800166a:	4b39      	ldr	r3, [pc, #228]	; (8001750 <MX_FMC_Init+0x104>)
 800166c:	2200      	movs	r2, #0
 800166e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001670:	4b37      	ldr	r3, [pc, #220]	; (8001750 <MX_FMC_Init+0x104>)
 8001672:	2200      	movs	r2, #0
 8001674:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001676:	4b36      	ldr	r3, [pc, #216]	; (8001750 <MX_FMC_Init+0x104>)
 8001678:	2204      	movs	r2, #4
 800167a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800167c:	4b34      	ldr	r3, [pc, #208]	; (8001750 <MX_FMC_Init+0x104>)
 800167e:	2210      	movs	r2, #16
 8001680:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001682:	4b33      	ldr	r3, [pc, #204]	; (8001750 <MX_FMC_Init+0x104>)
 8001684:	2240      	movs	r2, #64	; 0x40
 8001686:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8001688:	4b31      	ldr	r3, [pc, #196]	; (8001750 <MX_FMC_Init+0x104>)
 800168a:	2280      	movs	r2, #128	; 0x80
 800168c:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800168e:	4b30      	ldr	r3, [pc, #192]	; (8001750 <MX_FMC_Init+0x104>)
 8001690:	2200      	movs	r2, #0
 8001692:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8001694:	4b2e      	ldr	r3, [pc, #184]	; (8001750 <MX_FMC_Init+0x104>)
 8001696:	2200      	movs	r2, #0
 8001698:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800169a:	4b2d      	ldr	r3, [pc, #180]	; (8001750 <MX_FMC_Init+0x104>)
 800169c:	2200      	movs	r2, #0
 800169e:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80016a0:	4b2b      	ldr	r3, [pc, #172]	; (8001750 <MX_FMC_Init+0x104>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 80016a6:	2310      	movs	r3, #16
 80016a8:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 80016aa:	2310      	movs	r3, #16
 80016ac:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 80016ae:	2310      	movs	r3, #16
 80016b0:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 80016b2:	2310      	movs	r3, #16
 80016b4:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 80016b6:	2310      	movs	r3, #16
 80016b8:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 80016ba:	2310      	movs	r3, #16
 80016bc:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 80016be:	2310      	movs	r3, #16
 80016c0:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80016c2:	1d3b      	adds	r3, r7, #4
 80016c4:	4619      	mov	r1, r3
 80016c6:	4822      	ldr	r0, [pc, #136]	; (8001750 <MX_FMC_Init+0x104>)
 80016c8:	f00a fcf8 	bl	800c0bc <HAL_SDRAM_Init>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 80016d2:	f000 fe6b 	bl	80023ac <Error_Handler>
  }

  /** Perform the SDRAM2 memory initialization sequence
  */
  hsdram2.Instance = FMC_SDRAM_DEVICE;
 80016d6:	4b20      	ldr	r3, [pc, #128]	; (8001758 <MX_FMC_Init+0x10c>)
 80016d8:	4a1e      	ldr	r2, [pc, #120]	; (8001754 <MX_FMC_Init+0x108>)
 80016da:	601a      	str	r2, [r3, #0]
  /* hsdram2.Init */
  hsdram2.Init.SDBank = FMC_SDRAM_BANK2;
 80016dc:	4b1e      	ldr	r3, [pc, #120]	; (8001758 <MX_FMC_Init+0x10c>)
 80016de:	2201      	movs	r2, #1
 80016e0:	605a      	str	r2, [r3, #4]
  hsdram2.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80016e2:	4b1d      	ldr	r3, [pc, #116]	; (8001758 <MX_FMC_Init+0x10c>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	609a      	str	r2, [r3, #8]
  hsdram2.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80016e8:	4b1b      	ldr	r3, [pc, #108]	; (8001758 <MX_FMC_Init+0x10c>)
 80016ea:	2204      	movs	r2, #4
 80016ec:	60da      	str	r2, [r3, #12]
  hsdram2.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80016ee:	4b1a      	ldr	r3, [pc, #104]	; (8001758 <MX_FMC_Init+0x10c>)
 80016f0:	2210      	movs	r2, #16
 80016f2:	611a      	str	r2, [r3, #16]
  hsdram2.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80016f4:	4b18      	ldr	r3, [pc, #96]	; (8001758 <MX_FMC_Init+0x10c>)
 80016f6:	2240      	movs	r2, #64	; 0x40
 80016f8:	615a      	str	r2, [r3, #20]
  hsdram2.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 80016fa:	4b17      	ldr	r3, [pc, #92]	; (8001758 <MX_FMC_Init+0x10c>)
 80016fc:	2280      	movs	r2, #128	; 0x80
 80016fe:	619a      	str	r2, [r3, #24]
  hsdram2.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001700:	4b15      	ldr	r3, [pc, #84]	; (8001758 <MX_FMC_Init+0x10c>)
 8001702:	2200      	movs	r2, #0
 8001704:	61da      	str	r2, [r3, #28]
  hsdram2.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8001706:	4b14      	ldr	r3, [pc, #80]	; (8001758 <MX_FMC_Init+0x10c>)
 8001708:	2200      	movs	r2, #0
 800170a:	621a      	str	r2, [r3, #32]
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800170c:	4b12      	ldr	r3, [pc, #72]	; (8001758 <MX_FMC_Init+0x10c>)
 800170e:	2200      	movs	r2, #0
 8001710:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram2.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001712:	4b11      	ldr	r3, [pc, #68]	; (8001758 <MX_FMC_Init+0x10c>)
 8001714:	2200      	movs	r2, #0
 8001716:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8001718:	2310      	movs	r3, #16
 800171a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 800171c:	2310      	movs	r3, #16
 800171e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8001720:	2310      	movs	r3, #16
 8001722:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8001724:	2310      	movs	r3, #16
 8001726:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8001728:	2310      	movs	r3, #16
 800172a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 800172c:	2310      	movs	r3, #16
 800172e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8001730:	2310      	movs	r3, #16
 8001732:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
 8001734:	1d3b      	adds	r3, r7, #4
 8001736:	4619      	mov	r1, r3
 8001738:	4807      	ldr	r0, [pc, #28]	; (8001758 <MX_FMC_Init+0x10c>)
 800173a:	f00a fcbf 	bl	800c0bc <HAL_SDRAM_Init>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_FMC_Init+0xfc>
  {
    Error_Handler( );
 8001744:	f000 fe32 	bl	80023ac <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001748:	bf00      	nop
 800174a:	3720      	adds	r7, #32
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	20000784 	.word	0x20000784
 8001754:	a0000140 	.word	0xa0000140
 8001758:	200007b8 	.word	0x200007b8

0800175c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b090      	sub	sp, #64	; 0x40
 8001760:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001762:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	605a      	str	r2, [r3, #4]
 800176c:	609a      	str	r2, [r3, #8]
 800176e:	60da      	str	r2, [r3, #12]
 8001770:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001772:	4bae      	ldr	r3, [pc, #696]	; (8001a2c <MX_GPIO_Init+0x2d0>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	4aad      	ldr	r2, [pc, #692]	; (8001a2c <MX_GPIO_Init+0x2d0>)
 8001778:	f043 0310 	orr.w	r3, r3, #16
 800177c:	6313      	str	r3, [r2, #48]	; 0x30
 800177e:	4bab      	ldr	r3, [pc, #684]	; (8001a2c <MX_GPIO_Init+0x2d0>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	f003 0310 	and.w	r3, r3, #16
 8001786:	62bb      	str	r3, [r7, #40]	; 0x28
 8001788:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800178a:	4ba8      	ldr	r3, [pc, #672]	; (8001a2c <MX_GPIO_Init+0x2d0>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	4aa7      	ldr	r2, [pc, #668]	; (8001a2c <MX_GPIO_Init+0x2d0>)
 8001790:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001794:	6313      	str	r3, [r2, #48]	; 0x30
 8001796:	4ba5      	ldr	r3, [pc, #660]	; (8001a2c <MX_GPIO_Init+0x2d0>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800179e:	627b      	str	r3, [r7, #36]	; 0x24
 80017a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a2:	4ba2      	ldr	r3, [pc, #648]	; (8001a2c <MX_GPIO_Init+0x2d0>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	4aa1      	ldr	r2, [pc, #644]	; (8001a2c <MX_GPIO_Init+0x2d0>)
 80017a8:	f043 0302 	orr.w	r3, r3, #2
 80017ac:	6313      	str	r3, [r2, #48]	; 0x30
 80017ae:	4b9f      	ldr	r3, [pc, #636]	; (8001a2c <MX_GPIO_Init+0x2d0>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	623b      	str	r3, [r7, #32]
 80017b8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017ba:	4b9c      	ldr	r3, [pc, #624]	; (8001a2c <MX_GPIO_Init+0x2d0>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	4a9b      	ldr	r2, [pc, #620]	; (8001a2c <MX_GPIO_Init+0x2d0>)
 80017c0:	f043 0308 	orr.w	r3, r3, #8
 80017c4:	6313      	str	r3, [r2, #48]	; 0x30
 80017c6:	4b99      	ldr	r3, [pc, #612]	; (8001a2c <MX_GPIO_Init+0x2d0>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	f003 0308 	and.w	r3, r3, #8
 80017ce:	61fb      	str	r3, [r7, #28]
 80017d0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017d2:	4b96      	ldr	r3, [pc, #600]	; (8001a2c <MX_GPIO_Init+0x2d0>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	4a95      	ldr	r2, [pc, #596]	; (8001a2c <MX_GPIO_Init+0x2d0>)
 80017d8:	f043 0304 	orr.w	r3, r3, #4
 80017dc:	6313      	str	r3, [r2, #48]	; 0x30
 80017de:	4b93      	ldr	r3, [pc, #588]	; (8001a2c <MX_GPIO_Init+0x2d0>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	f003 0304 	and.w	r3, r3, #4
 80017e6:	61bb      	str	r3, [r7, #24]
 80017e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ea:	4b90      	ldr	r3, [pc, #576]	; (8001a2c <MX_GPIO_Init+0x2d0>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	4a8f      	ldr	r2, [pc, #572]	; (8001a2c <MX_GPIO_Init+0x2d0>)
 80017f0:	f043 0301 	orr.w	r3, r3, #1
 80017f4:	6313      	str	r3, [r2, #48]	; 0x30
 80017f6:	4b8d      	ldr	r3, [pc, #564]	; (8001a2c <MX_GPIO_Init+0x2d0>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	617b      	str	r3, [r7, #20]
 8001800:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001802:	4b8a      	ldr	r3, [pc, #552]	; (8001a2c <MX_GPIO_Init+0x2d0>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	4a89      	ldr	r2, [pc, #548]	; (8001a2c <MX_GPIO_Init+0x2d0>)
 8001808:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800180c:	6313      	str	r3, [r2, #48]	; 0x30
 800180e:	4b87      	ldr	r3, [pc, #540]	; (8001a2c <MX_GPIO_Init+0x2d0>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001816:	613b      	str	r3, [r7, #16]
 8001818:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800181a:	4b84      	ldr	r3, [pc, #528]	; (8001a2c <MX_GPIO_Init+0x2d0>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	4a83      	ldr	r2, [pc, #524]	; (8001a2c <MX_GPIO_Init+0x2d0>)
 8001820:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001824:	6313      	str	r3, [r2, #48]	; 0x30
 8001826:	4b81      	ldr	r3, [pc, #516]	; (8001a2c <MX_GPIO_Init+0x2d0>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001832:	4b7e      	ldr	r3, [pc, #504]	; (8001a2c <MX_GPIO_Init+0x2d0>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	4a7d      	ldr	r2, [pc, #500]	; (8001a2c <MX_GPIO_Init+0x2d0>)
 8001838:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800183c:	6313      	str	r3, [r2, #48]	; 0x30
 800183e:	4b7b      	ldr	r3, [pc, #492]	; (8001a2c <MX_GPIO_Init+0x2d0>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001846:	60bb      	str	r3, [r7, #8]
 8001848:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800184a:	4b78      	ldr	r3, [pc, #480]	; (8001a2c <MX_GPIO_Init+0x2d0>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	4a77      	ldr	r2, [pc, #476]	; (8001a2c <MX_GPIO_Init+0x2d0>)
 8001850:	f043 0320 	orr.w	r3, r3, #32
 8001854:	6313      	str	r3, [r2, #48]	; 0x30
 8001856:	4b75      	ldr	r3, [pc, #468]	; (8001a2c <MX_GPIO_Init+0x2d0>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	f003 0320 	and.w	r3, r3, #32
 800185e:	607b      	str	r3, [r7, #4]
 8001860:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001862:	4b72      	ldr	r3, [pc, #456]	; (8001a2c <MX_GPIO_Init+0x2d0>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	4a71      	ldr	r2, [pc, #452]	; (8001a2c <MX_GPIO_Init+0x2d0>)
 8001868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800186c:	6313      	str	r3, [r2, #48]	; 0x30
 800186e:	4b6f      	ldr	r3, [pc, #444]	; (8001a2c <MX_GPIO_Init+0x2d0>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001876:	603b      	str	r3, [r7, #0]
 8001878:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800187a:	2201      	movs	r2, #1
 800187c:	2120      	movs	r1, #32
 800187e:	486c      	ldr	r0, [pc, #432]	; (8001a30 <MX_GPIO_Init+0x2d4>)
 8001880:	f006 fb0a 	bl	8007e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8001884:	2200      	movs	r2, #0
 8001886:	f241 010c 	movw	r1, #4108	; 0x100c
 800188a:	486a      	ldr	r0, [pc, #424]	; (8001a34 <MX_GPIO_Init+0x2d8>)
 800188c:	f006 fb04 	bl	8007e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8001890:	2200      	movs	r2, #0
 8001892:	2108      	movs	r1, #8
 8001894:	4868      	ldr	r0, [pc, #416]	; (8001a38 <MX_GPIO_Init+0x2dc>)
 8001896:	f006 faff 	bl	8007e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, DCMI_PWR_EN_Pin|LED2_Pin|LED1_Pin|LED3_Pin, GPIO_PIN_RESET);
 800189a:	2200      	movs	r2, #0
 800189c:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 80018a0:	4866      	ldr	r0, [pc, #408]	; (8001a3c <MX_GPIO_Init+0x2e0>)
 80018a2:	f006 faf9 	bl	8007e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80018a6:	2200      	movs	r2, #0
 80018a8:	21c8      	movs	r1, #200	; 0xc8
 80018aa:	4865      	ldr	r0, [pc, #404]	; (8001a40 <MX_GPIO_Init+0x2e4>)
 80018ac:	f006 faf4 	bl	8007e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80018b0:	2308      	movs	r3, #8
 80018b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018b4:	2300      	movs	r3, #0
 80018b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b8:	2300      	movs	r3, #0
 80018ba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80018bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018c0:	4619      	mov	r1, r3
 80018c2:	4860      	ldr	r0, [pc, #384]	; (8001a44 <MX_GPIO_Init+0x2e8>)
 80018c4:	f006 f818 	bl	80078f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80018c8:	2304      	movs	r3, #4
 80018ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018cc:	2302      	movs	r3, #2
 80018ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d4:	2303      	movs	r3, #3
 80018d6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80018d8:	2309      	movs	r3, #9
 80018da:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80018dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018e0:	4619      	mov	r1, r3
 80018e2:	4858      	ldr	r0, [pc, #352]	; (8001a44 <MX_GPIO_Init+0x2e8>)
 80018e4:	f006 f808 	bl	80078f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80018e8:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80018ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ee:	2302      	movs	r3, #2
 80018f0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f6:	2303      	movs	r3, #3
 80018f8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80018fa:	230b      	movs	r3, #11
 80018fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001902:	4619      	mov	r1, r3
 8001904:	484e      	ldr	r0, [pc, #312]	; (8001a40 <MX_GPIO_Init+0x2e4>)
 8001906:	f005 fff7 	bl	80078f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 800190a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800190e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001910:	2312      	movs	r3, #18
 8001912:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001918:	2300      	movs	r3, #0
 800191a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800191c:	2304      	movs	r3, #4
 800191e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001920:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001924:	4619      	mov	r1, r3
 8001926:	4848      	ldr	r0, [pc, #288]	; (8001a48 <MX_GPIO_Init+0x2ec>)
 8001928:	f005 ffe6 	bl	80078f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800192c:	2310      	movs	r3, #16
 800192e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001930:	2302      	movs	r3, #2
 8001932:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001938:	2300      	movs	r3, #0
 800193a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800193c:	2302      	movs	r3, #2
 800193e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8001940:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001944:	4619      	mov	r1, r3
 8001946:	4840      	ldr	r0, [pc, #256]	; (8001a48 <MX_GPIO_Init+0x2ec>)
 8001948:	f005 ffd6 	bl	80078f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800194c:	2380      	movs	r3, #128	; 0x80
 800194e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001950:	2302      	movs	r3, #2
 8001952:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001954:	2300      	movs	r3, #0
 8001956:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001958:	2300      	movs	r3, #0
 800195a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800195c:	2308      	movs	r3, #8
 800195e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8001960:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001964:	4619      	mov	r1, r3
 8001966:	4832      	ldr	r0, [pc, #200]	; (8001a30 <MX_GPIO_Init+0x2d4>)
 8001968:	f005 ffc6 	bl	80078f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 800196c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001970:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001972:	2302      	movs	r3, #2
 8001974:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001976:	2300      	movs	r3, #0
 8001978:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197a:	2300      	movs	r3, #0
 800197c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800197e:	2301      	movs	r3, #1
 8001980:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8001982:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001986:	4619      	mov	r1, r3
 8001988:	4830      	ldr	r0, [pc, #192]	; (8001a4c <MX_GPIO_Init+0x2f0>)
 800198a:	f005 ffb5 	bl	80078f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 800198e:	2360      	movs	r3, #96	; 0x60
 8001990:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001992:	2302      	movs	r3, #2
 8001994:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001996:	2300      	movs	r3, #0
 8001998:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199a:	2300      	movs	r3, #0
 800199c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800199e:	230d      	movs	r3, #13
 80019a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019a6:	4619      	mov	r1, r3
 80019a8:	4826      	ldr	r0, [pc, #152]	; (8001a44 <MX_GPIO_Init+0x2e8>)
 80019aa:	f005 ffa5 	bl	80078f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80019ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019b4:	2300      	movs	r3, #0
 80019b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80019bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019c0:	4619      	mov	r1, r3
 80019c2:	4823      	ldr	r0, [pc, #140]	; (8001a50 <MX_GPIO_Init+0x2f4>)
 80019c4:	f005 ff98 	bl	80078f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80019c8:	2340      	movs	r3, #64	; 0x40
 80019ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80019cc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80019d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d2:	2300      	movs	r3, #0
 80019d4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80019d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019da:	4619      	mov	r1, r3
 80019dc:	4814      	ldr	r0, [pc, #80]	; (8001a30 <MX_GPIO_Init+0x2d4>)
 80019de:	f005 ff8b 	bl	80078f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80019e2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80019e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e8:	2302      	movs	r3, #2
 80019ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ec:	2300      	movs	r3, #0
 80019ee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f0:	2303      	movs	r3, #3
 80019f2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80019f4:	230a      	movs	r3, #10
 80019f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019fc:	4619      	mov	r1, r3
 80019fe:	4813      	ldr	r0, [pc, #76]	; (8001a4c <MX_GPIO_Init+0x2f0>)
 8001a00:	f005 ff7a 	bl	80078f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001a04:	2320      	movs	r3, #32
 8001a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a10:	2300      	movs	r3, #0
 8001a12:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001a14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4805      	ldr	r0, [pc, #20]	; (8001a30 <MX_GPIO_Init+0x2d4>)
 8001a1c:	f005 ff6c 	bl	80078f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8001a20:	2308      	movs	r3, #8
 8001a22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a24:	2302      	movs	r3, #2
 8001a26:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	e013      	b.n	8001a54 <MX_GPIO_Init+0x2f8>
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	40020c00 	.word	0x40020c00
 8001a34:	40022000 	.word	0x40022000
 8001a38:	40022800 	.word	0x40022800
 8001a3c:	40021c00 	.word	0x40021c00
 8001a40:	40021800 	.word	0x40021800
 8001a44:	40021000 	.word	0x40021000
 8001a48:	40020400 	.word	0x40020400
 8001a4c:	40020000 	.word	0x40020000
 8001a50:	40022400 	.word	0x40022400
 8001a54:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a56:	2300      	movs	r3, #0
 8001a58:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001a5a:	230d      	movs	r3, #13
 8001a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001a5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a62:	4619      	mov	r1, r3
 8001a64:	48bc      	ldr	r0, [pc, #752]	; (8001d58 <MX_GPIO_Init+0x5fc>)
 8001a66:	f005 ff47 	bl	80078f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8001a6a:	f241 030c 	movw	r3, #4108	; 0x100c
 8001a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a70:	2301      	movs	r3, #1
 8001a72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001a7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a80:	4619      	mov	r1, r3
 8001a82:	48b6      	ldr	r0, [pc, #728]	; (8001d5c <MX_GPIO_Init+0x600>)
 8001a84:	f005 ff38 	bl	80078f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001a88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a92:	2300      	movs	r3, #0
 8001a94:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001a96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	48b0      	ldr	r0, [pc, #704]	; (8001d60 <MX_GPIO_Init+0x604>)
 8001a9e:	f005 ff2b 	bl	80078f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001aa2:	2308      	movs	r3, #8
 8001aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001ab2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	48aa      	ldr	r0, [pc, #680]	; (8001d64 <MX_GPIO_Init+0x608>)
 8001aba:	f005 ff1d 	bl	80078f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001abe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001acc:	2300      	movs	r3, #0
 8001ace:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001ad0:	230d      	movs	r3, #13
 8001ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001ad4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ad8:	4619      	mov	r1, r3
 8001ada:	48a3      	ldr	r0, [pc, #652]	; (8001d68 <MX_GPIO_Init+0x60c>)
 8001adc:	f005 ff0c 	bl	80078f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001ae0:	2310      	movs	r3, #16
 8001ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001aec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001af0:	4619      	mov	r1, r3
 8001af2:	4899      	ldr	r0, [pc, #612]	; (8001d58 <MX_GPIO_Init+0x5fc>)
 8001af4:	f005 ff00 	bl	80078f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001af8:	f248 0304 	movw	r3, #32772	; 0x8004
 8001afc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001afe:	2300      	movs	r3, #0
 8001b00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b02:	2300      	movs	r3, #0
 8001b04:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001b06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4897      	ldr	r0, [pc, #604]	; (8001d6c <MX_GPIO_Init+0x610>)
 8001b0e:	f005 fef3 	bl	80078f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8001b12:	2302      	movs	r3, #2
 8001b14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b16:	2302      	movs	r3, #2
 8001b18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b22:	2305      	movs	r3, #5
 8001b24:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8001b26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	488b      	ldr	r0, [pc, #556]	; (8001d5c <MX_GPIO_Init+0x600>)
 8001b2e:	f005 fee3 	bl	80078f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_PWR_EN_Pin LED2_Pin LED1_Pin LED3_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin|LED2_Pin|LED1_Pin|LED3_Pin;
 8001b32:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001b36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b40:	2300      	movs	r3, #0
 8001b42:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001b44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4888      	ldr	r0, [pc, #544]	; (8001d6c <MX_GPIO_Init+0x610>)
 8001b4c:	f005 fed4 	bl	80078f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D0_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D0_Pin;
 8001b50:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001b54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b56:	2302      	movs	r3, #2
 8001b58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001b62:	230d      	movs	r3, #13
 8001b64:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001b66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	487f      	ldr	r0, [pc, #508]	; (8001d6c <MX_GPIO_Init+0x610>)
 8001b6e:	f005 fec3 	bl	80078f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8001b72:	2301      	movs	r3, #1
 8001b74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b76:	2302      	movs	r3, #2
 8001b78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001b82:	2302      	movs	r3, #2
 8001b84:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8001b86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4873      	ldr	r0, [pc, #460]	; (8001d5c <MX_GPIO_Init+0x600>)
 8001b8e:	f005 feb3 	bl	80078f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8001b92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8001ba8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bac:	4619      	mov	r1, r3
 8001bae:	4870      	ldr	r0, [pc, #448]	; (8001d70 <MX_GPIO_Init+0x614>)
 8001bb0:	f005 fea2 	bl	80078f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001bb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001bba:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001bbe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001bc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4864      	ldr	r0, [pc, #400]	; (8001d5c <MX_GPIO_Init+0x600>)
 8001bcc:	f005 fe94 	bl	80078f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8001bd0:	23c0      	movs	r3, #192	; 0xc0
 8001bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001be0:	2308      	movs	r3, #8
 8001be2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001be4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001be8:	4619      	mov	r1, r3
 8001bea:	485d      	ldr	r0, [pc, #372]	; (8001d60 <MX_GPIO_Init+0x604>)
 8001bec:	f005 fe84 	bl	80078f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001bf0:	2310      	movs	r3, #16
 8001bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001c00:	230a      	movs	r3, #10
 8001c02:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001c04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4858      	ldr	r0, [pc, #352]	; (8001d6c <MX_GPIO_Init+0x610>)
 8001c0c:	f005 fe74 	bl	80078f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001c10:	23c8      	movs	r3, #200	; 0xc8
 8001c12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c14:	2301      	movs	r3, #1
 8001c16:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c24:	4619      	mov	r1, r3
 8001c26:	4850      	ldr	r0, [pc, #320]	; (8001d68 <MX_GPIO_Init+0x60c>)
 8001c28:	f005 fe66 	bl	80078f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8001c2c:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001c30:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c32:	2303      	movs	r3, #3
 8001c34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c36:	2300      	movs	r3, #0
 8001c38:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c3e:	4619      	mov	r1, r3
 8001c40:	484c      	ldr	r0, [pc, #304]	; (8001d74 <MX_GPIO_Init+0x618>)
 8001c42:	f005 fe59 	bl	80078f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin ULPI_D2_Pin
                           ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin|ULPI_D2_Pin
 8001c46:	f643 4303 	movw	r3, #15363	; 0x3c03
 8001c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c50:	2300      	movs	r3, #0
 8001c52:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c54:	2303      	movs	r3, #3
 8001c56:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001c58:	230a      	movs	r3, #10
 8001c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c60:	4619      	mov	r1, r3
 8001c62:	4845      	ldr	r0, [pc, #276]	; (8001d78 <MX_GPIO_Init+0x61c>)
 8001c64:	f005 fe48 	bl	80078f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001c68:	2305      	movs	r3, #5
 8001c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c70:	2300      	movs	r3, #0
 8001c72:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c74:	2303      	movs	r3, #3
 8001c76:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001c78:	230a      	movs	r3, #10
 8001c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c80:	4619      	mov	r1, r3
 8001c82:	4837      	ldr	r0, [pc, #220]	; (8001d60 <MX_GPIO_Init+0x604>)
 8001c84:	f005 fe38 	bl	80078f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001c88:	2332      	movs	r3, #50	; 0x32
 8001c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c90:	2300      	movs	r3, #0
 8001c92:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c94:	2303      	movs	r3, #3
 8001c96:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c98:	230b      	movs	r3, #11
 8001c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	482f      	ldr	r0, [pc, #188]	; (8001d60 <MX_GPIO_Init+0x604>)
 8001ca4:	f005 fe28 	bl	80078f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ca8:	2304      	movs	r3, #4
 8001caa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cac:	2302      	movs	r3, #2
 8001cae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001cb8:	2309      	movs	r3, #9
 8001cba:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	482d      	ldr	r0, [pc, #180]	; (8001d78 <MX_GPIO_Init+0x61c>)
 8001cc4:	f005 fe18 	bl	80078f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001cc8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cce:	2302      	movs	r3, #2
 8001cd0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001cda:	2309      	movs	r3, #9
 8001cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	481c      	ldr	r0, [pc, #112]	; (8001d58 <MX_GPIO_Init+0x5fc>)
 8001ce6:	f005 fe07 	bl	80078f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001cea:	2304      	movs	r3, #4
 8001cec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001cf6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	481a      	ldr	r0, [pc, #104]	; (8001d68 <MX_GPIO_Init+0x60c>)
 8001cfe:	f005 fdfb 	bl	80078f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001d02:	2386      	movs	r3, #134	; 0x86
 8001d04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d06:	2302      	movs	r3, #2
 8001d08:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d12:	230b      	movs	r3, #11
 8001d14:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	4814      	ldr	r0, [pc, #80]	; (8001d70 <MX_GPIO_Init+0x614>)
 8001d1e:	f005 fdeb 	bl	80078f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d22:	2301      	movs	r3, #1
 8001d24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d26:	2303      	movs	r3, #3
 8001d28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d32:	4619      	mov	r1, r3
 8001d34:	480e      	ldr	r0, [pc, #56]	; (8001d70 <MX_GPIO_Init+0x614>)
 8001d36:	f005 fddf 	bl	80078f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001d3a:	2350      	movs	r3, #80	; 0x50
 8001d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d42:	2300      	movs	r3, #0
 8001d44:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d46:	2300      	movs	r3, #0
 8001d48:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001d4a:	230d      	movs	r3, #13
 8001d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d52:	4619      	mov	r1, r3
 8001d54:	e012      	b.n	8001d7c <MX_GPIO_Init+0x620>
 8001d56:	bf00      	nop
 8001d58:	40020c00 	.word	0x40020c00
 8001d5c:	40022000 	.word	0x40022000
 8001d60:	40020800 	.word	0x40020800
 8001d64:	40022800 	.word	0x40022800
 8001d68:	40021800 	.word	0x40021800
 8001d6c:	40021c00 	.word	0x40021c00
 8001d70:	40020000 	.word	0x40020000
 8001d74:	40021400 	.word	0x40021400
 8001d78:	40020400 	.word	0x40020400
 8001d7c:	481c      	ldr	r0, [pc, #112]	; (8001df0 <MX_GPIO_Init+0x694>)
 8001d7e:	f005 fdbb 	bl	80078f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001d82:	2328      	movs	r3, #40	; 0x28
 8001d84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d86:	2302      	movs	r3, #2
 8001d88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001d92:	230a      	movs	r3, #10
 8001d94:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4814      	ldr	r0, [pc, #80]	; (8001df0 <MX_GPIO_Init+0x694>)
 8001d9e:	f005 fdab 	bl	80078f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SDA_Pin;
 8001da2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001da6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001da8:	2312      	movs	r3, #18
 8001daa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dac:	2300      	movs	r3, #0
 8001dae:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db0:	2303      	movs	r3, #3
 8001db2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001db4:	2304      	movs	r3, #4
 8001db6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_SDA_GPIO_Port, &GPIO_InitStruct);
 8001db8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	480d      	ldr	r0, [pc, #52]	; (8001df4 <MX_GPIO_Init+0x698>)
 8001dc0:	f005 fd9a 	bl	80078f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001dc4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dca:	2302      	movs	r3, #2
 8001dcc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001dd6:	2305      	movs	r3, #5
 8001dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dde:	4619      	mov	r1, r3
 8001de0:	4805      	ldr	r0, [pc, #20]	; (8001df8 <MX_GPIO_Init+0x69c>)
 8001de2:	f005 fd89 	bl	80078f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001de6:	bf00      	nop
 8001de8:	3740      	adds	r7, #64	; 0x40
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	40020000 	.word	0x40020000
 8001df4:	40021c00 	.word	0x40021c00
 8001df8:	40020400 	.word	0x40020400

08001dfc <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b088      	sub	sp, #32
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
	static TS_StateTypeDef TS_State;
	Point ON_BUTTON,OFF_BUTTON,PLAY_BUTTON,Touch;
	uint8_t record_OK;
//	REC_BUTTON.X = REC_BUTTON_X;
//	REC_BUTTON.Y = REC_BUTTON_Y;
	ON_BUTTON.X = ON_X;
 8001e04:	f001 f946 	bl	8003094 <BSP_LCD_GetXSize>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	085b      	lsrs	r3, r3, #1
 8001e0c:	b21b      	sxth	r3, r3
 8001e0e:	833b      	strh	r3, [r7, #24]
	ON_BUTTON.Y = ON_Y;
 8001e10:	f001 f954 	bl	80030bc <BSP_LCD_GetYSize>
 8001e14:	4603      	mov	r3, r0
 8001e16:	085b      	lsrs	r3, r3, #1
 8001e18:	b21b      	sxth	r3, r3
 8001e1a:	837b      	strh	r3, [r7, #26]
	OFF_BUTTON.X = OFF_X;
 8001e1c:	f001 f93a 	bl	8003094 <BSP_LCD_GetXSize>
 8001e20:	4603      	mov	r3, r0
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	3b1e      	subs	r3, #30
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	b21b      	sxth	r3, r3
 8001e2a:	82bb      	strh	r3, [r7, #20]
	OFF_BUTTON.Y = OFF_Y;
 8001e2c:	f001 f946 	bl	80030bc <BSP_LCD_GetYSize>
 8001e30:	4603      	mov	r3, r0
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	3b1e      	subs	r3, #30
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	b21b      	sxth	r3, r3
 8001e3a:	82fb      	strh	r3, [r7, #22]
	PLAY_BUTTON.X = PLAY_BUTTON_X;
 8001e3c:	f001 f92a 	bl	8003094 <BSP_LCD_GetXSize>
 8001e40:	4603      	mov	r3, r0
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	4ac7      	ldr	r2, [pc, #796]	; (8002164 <StartDefaultTask+0x368>)
 8001e46:	fba2 2303 	umull	r2, r3, r2, r3
 8001e4a:	085b      	lsrs	r3, r3, #1
 8001e4c:	b21b      	sxth	r3, r3
 8001e4e:	823b      	strh	r3, [r7, #16]
	PLAY_BUTTON.Y = PLAY_BUTTON_Y;
 8001e50:	f001 f934 	bl	80030bc <BSP_LCD_GetYSize>
 8001e54:	4603      	mov	r3, r0
 8001e56:	085b      	lsrs	r3, r3, #1
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	3b28      	subs	r3, #40	; 0x28
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	b21b      	sxth	r3, r3
 8001e60:	827b      	strh	r3, [r7, #18]
	while (enable==0);
 8001e62:	bf00      	nop
 8001e64:	4bc0      	ldr	r3, [pc, #768]	; (8002168 <StartDefaultTask+0x36c>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d0fb      	beq.n	8001e64 <StartDefaultTask+0x68>
	osDelay(500);
 8001e6c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e70:	f00e fefa 	bl	8010c68 <osDelay>
	DrawONButton();
 8001e74:	f7fe ff68 	bl	8000d48 <DrawONButton>
	for (;;) {
		BSP_TS_GetState(&TS_State);
 8001e78:	48bc      	ldr	r0, [pc, #752]	; (800216c <StartDefaultTask+0x370>)
 8001e7a:	f002 f961 	bl	8004140 <BSP_TS_GetState>
		if (TS_State.touchDetected) {
 8001e7e:	4bbb      	ldr	r3, [pc, #748]	; (800216c <StartDefaultTask+0x370>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d008      	beq.n	8001e98 <StartDefaultTask+0x9c>
			Touch.X = TS_State.touchX[0];
 8001e86:	4bb9      	ldr	r3, [pc, #740]	; (800216c <StartDefaultTask+0x370>)
 8001e88:	885b      	ldrh	r3, [r3, #2]
 8001e8a:	b21b      	sxth	r3, r3
 8001e8c:	81bb      	strh	r3, [r7, #12]
			Touch.Y = TS_State.touchY[0];
 8001e8e:	4bb7      	ldr	r3, [pc, #732]	; (800216c <StartDefaultTask+0x370>)
 8001e90:	899b      	ldrh	r3, [r3, #12]
 8001e92:	b21b      	sxth	r3, r3
 8001e94:	81fb      	strh	r3, [r7, #14]
 8001e96:	e003      	b.n	8001ea0 <StartDefaultTask+0xa4>
		}else{
			Touch.X = 0;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	81bb      	strh	r3, [r7, #12]
			Touch.Y = 0;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	81fb      	strh	r3, [r7, #14]
		}
		switch (etat) {
 8001ea0:	4bb3      	ldr	r3, [pc, #716]	; (8002170 <StartDefaultTask+0x374>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b65      	cmp	r3, #101	; 0x65
 8001ea6:	f200 81d3 	bhi.w	8002250 <StartDefaultTask+0x454>
 8001eaa:	a201      	add	r2, pc, #4	; (adr r2, 8001eb0 <StartDefaultTask+0xb4>)
 8001eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eb0:	08002049 	.word	0x08002049
 8001eb4:	0800208d 	.word	0x0800208d
 8001eb8:	0800212b 	.word	0x0800212b
 8001ebc:	080021a3 	.word	0x080021a3
 8001ec0:	08002251 	.word	0x08002251
 8001ec4:	08002251 	.word	0x08002251
 8001ec8:	08002251 	.word	0x08002251
 8001ecc:	08002251 	.word	0x08002251
 8001ed0:	08002251 	.word	0x08002251
 8001ed4:	08002251 	.word	0x08002251
 8001ed8:	080020d1 	.word	0x080020d1
 8001edc:	08002251 	.word	0x08002251
 8001ee0:	080020f1 	.word	0x080020f1
 8001ee4:	0800210b 	.word	0x0800210b
 8001ee8:	08002251 	.word	0x08002251
 8001eec:	08002251 	.word	0x08002251
 8001ef0:	08002251 	.word	0x08002251
 8001ef4:	08002251 	.word	0x08002251
 8001ef8:	08002251 	.word	0x08002251
 8001efc:	08002251 	.word	0x08002251
 8001f00:	08002147 	.word	0x08002147
 8001f04:	08002251 	.word	0x08002251
 8001f08:	08002251 	.word	0x08002251
 8001f0c:	08002185 	.word	0x08002185
 8001f10:	08002251 	.word	0x08002251
 8001f14:	08002251 	.word	0x08002251
 8001f18:	08002251 	.word	0x08002251
 8001f1c:	08002251 	.word	0x08002251
 8001f20:	08002251 	.word	0x08002251
 8001f24:	08002251 	.word	0x08002251
 8001f28:	080021db 	.word	0x080021db
 8001f2c:	080021f7 	.word	0x080021f7
 8001f30:	08002207 	.word	0x08002207
 8001f34:	08002251 	.word	0x08002251
 8001f38:	08002251 	.word	0x08002251
 8001f3c:	08002251 	.word	0x08002251
 8001f40:	08002251 	.word	0x08002251
 8001f44:	08002251 	.word	0x08002251
 8001f48:	08002251 	.word	0x08002251
 8001f4c:	08002251 	.word	0x08002251
 8001f50:	08002251 	.word	0x08002251
 8001f54:	08002251 	.word	0x08002251
 8001f58:	08002251 	.word	0x08002251
 8001f5c:	08002251 	.word	0x08002251
 8001f60:	08002251 	.word	0x08002251
 8001f64:	08002251 	.word	0x08002251
 8001f68:	08002251 	.word	0x08002251
 8001f6c:	08002251 	.word	0x08002251
 8001f70:	08002251 	.word	0x08002251
 8001f74:	08002251 	.word	0x08002251
 8001f78:	08002251 	.word	0x08002251
 8001f7c:	08002251 	.word	0x08002251
 8001f80:	08002251 	.word	0x08002251
 8001f84:	08002251 	.word	0x08002251
 8001f88:	08002251 	.word	0x08002251
 8001f8c:	08002251 	.word	0x08002251
 8001f90:	08002251 	.word	0x08002251
 8001f94:	08002251 	.word	0x08002251
 8001f98:	08002251 	.word	0x08002251
 8001f9c:	08002251 	.word	0x08002251
 8001fa0:	08002251 	.word	0x08002251
 8001fa4:	08002251 	.word	0x08002251
 8001fa8:	08002251 	.word	0x08002251
 8001fac:	08002251 	.word	0x08002251
 8001fb0:	08002251 	.word	0x08002251
 8001fb4:	08002251 	.word	0x08002251
 8001fb8:	08002251 	.word	0x08002251
 8001fbc:	08002251 	.word	0x08002251
 8001fc0:	08002251 	.word	0x08002251
 8001fc4:	08002251 	.word	0x08002251
 8001fc8:	08002251 	.word	0x08002251
 8001fcc:	08002251 	.word	0x08002251
 8001fd0:	08002251 	.word	0x08002251
 8001fd4:	08002251 	.word	0x08002251
 8001fd8:	08002251 	.word	0x08002251
 8001fdc:	08002251 	.word	0x08002251
 8001fe0:	08002251 	.word	0x08002251
 8001fe4:	08002251 	.word	0x08002251
 8001fe8:	08002251 	.word	0x08002251
 8001fec:	08002251 	.word	0x08002251
 8001ff0:	08002251 	.word	0x08002251
 8001ff4:	08002251 	.word	0x08002251
 8001ff8:	08002251 	.word	0x08002251
 8001ffc:	08002251 	.word	0x08002251
 8002000:	08002251 	.word	0x08002251
 8002004:	08002251 	.word	0x08002251
 8002008:	08002251 	.word	0x08002251
 800200c:	08002251 	.word	0x08002251
 8002010:	08002251 	.word	0x08002251
 8002014:	08002251 	.word	0x08002251
 8002018:	08002251 	.word	0x08002251
 800201c:	08002251 	.word	0x08002251
 8002020:	08002251 	.word	0x08002251
 8002024:	08002251 	.word	0x08002251
 8002028:	08002251 	.word	0x08002251
 800202c:	08002251 	.word	0x08002251
 8002030:	08002251 	.word	0x08002251
 8002034:	08002251 	.word	0x08002251
 8002038:	08002251 	.word	0x08002251
 800203c:	08002251 	.word	0x08002251
 8002040:	08002251 	.word	0x08002251
 8002044:	08002071 	.word	0x08002071
			case 0:
				record_OK=0;
 8002048:	2300      	movs	r3, #0
 800204a:	77fb      	strb	r3, [r7, #31]
				if (InCircle(Touch, ON_BUTTON, R)){
 800204c:	2228      	movs	r2, #40	; 0x28
 800204e:	69b9      	ldr	r1, [r7, #24]
 8002050:	68f8      	ldr	r0, [r7, #12]
 8002052:	f7fe fd9f 	bl	8000b94 <InCircle>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	f000 80e0 	beq.w	800221e <StartDefaultTask+0x422>
					etat = 101;
 800205e:	4b44      	ldr	r3, [pc, #272]	; (8002170 <StartDefaultTask+0x374>)
 8002060:	2265      	movs	r2, #101	; 0x65
 8002062:	701a      	strb	r2, [r3, #0]
					DrawOFFutton();
 8002064:	f7fe febe 	bl	8000de4 <DrawOFFutton>
//					DrawRecButton(LCD_COLOR_RED);
					DrawPlayButton(LCD_COLOR_BLUE);
 8002068:	4842      	ldr	r0, [pc, #264]	; (8002174 <StartDefaultTask+0x378>)
 800206a:	f7fe fe27 	bl	8000cbc <DrawPlayButton>
				}
				break;
 800206e:	e0d6      	b.n	800221e <StartDefaultTask+0x422>
			case 101:
				if (TS_State.touchDetected==0){
 8002070:	4b3e      	ldr	r3, [pc, #248]	; (800216c <StartDefaultTask+0x370>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	f040 80d4 	bne.w	8002222 <StartDefaultTask+0x426>
					f_open(&SDFile, "RECORD.WAV", FA_READ);
 800207a:	2201      	movs	r2, #1
 800207c:	493e      	ldr	r1, [pc, #248]	; (8002178 <StartDefaultTask+0x37c>)
 800207e:	483f      	ldr	r0, [pc, #252]	; (800217c <StartDefaultTask+0x380>)
 8002080:	f00d fe74 	bl	800fd6c <f_open>
					etat=1;
 8002084:	4b3a      	ldr	r3, [pc, #232]	; (8002170 <StartDefaultTask+0x374>)
 8002086:	2201      	movs	r2, #1
 8002088:	701a      	strb	r2, [r3, #0]
				}
				break;
 800208a:	e0ca      	b.n	8002222 <StartDefaultTask+0x426>
			case 1:
				if (InCircle(Touch, OFF_BUTTON, R/2)){
 800208c:	2214      	movs	r2, #20
 800208e:	6979      	ldr	r1, [r7, #20]
 8002090:	68f8      	ldr	r0, [r7, #12]
 8002092:	f7fe fd7f 	bl	8000b94 <InCircle>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d004      	beq.n	80020a6 <StartDefaultTask+0x2aa>
					etat=10;
 800209c:	4b34      	ldr	r3, [pc, #208]	; (8002170 <StartDefaultTask+0x374>)
 800209e:	220a      	movs	r2, #10
 80020a0:	701a      	strb	r2, [r3, #0]
					DrawONButton();
 80020a2:	f7fe fe51 	bl	8000d48 <DrawONButton>
				}
//				if (InCircle(Touch, REC_BUTTON, R)){
//					etat=12;
//					DrawRecButton(LCD_COLOR_GREEN);
//				}
				if (InCircle(Touch, PLAY_BUTTON, R)&&record_OK){
 80020a6:	2228      	movs	r2, #40	; 0x28
 80020a8:	6939      	ldr	r1, [r7, #16]
 80020aa:	68f8      	ldr	r0, [r7, #12]
 80020ac:	f7fe fd72 	bl	8000b94 <InCircle>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	f000 80b7 	beq.w	8002226 <StartDefaultTask+0x42a>
 80020b8:	7ffb      	ldrb	r3, [r7, #31]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f000 80b3 	beq.w	8002226 <StartDefaultTask+0x42a>
					etat=13;
 80020c0:	4b2b      	ldr	r3, [pc, #172]	; (8002170 <StartDefaultTask+0x374>)
 80020c2:	220d      	movs	r2, #13
 80020c4:	701a      	strb	r2, [r3, #0]
					DrawPlayButton(LCD_COLOR_GREEN);
 80020c6:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 80020ca:	f7fe fdf7 	bl	8000cbc <DrawPlayButton>
				}
				break;
 80020ce:	e0aa      	b.n	8002226 <StartDefaultTask+0x42a>
			case 10:
				if (TS_State.touchDetected==0){
 80020d0:	4b26      	ldr	r3, [pc, #152]	; (800216c <StartDefaultTask+0x370>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	f040 80a8 	bne.w	800222a <StartDefaultTask+0x42e>
					etat=0;
 80020da:	4b25      	ldr	r3, [pc, #148]	; (8002170 <StartDefaultTask+0x374>)
 80020dc:	2200      	movs	r2, #0
 80020de:	701a      	strb	r2, [r3, #0]
					if (record_OK){
 80020e0:	7ffb      	ldrb	r3, [r7, #31]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	f000 80a1 	beq.w	800222a <StartDefaultTask+0x42e>
//						write_header(NB_Bloc*AUDIO_BLOCK_SIZE);
					f_close(&SDFile);
 80020e8:	4824      	ldr	r0, [pc, #144]	; (800217c <StartDefaultTask+0x380>)
 80020ea:	f00e f9fb 	bl	80104e4 <f_close>
					}
				}
				break;
 80020ee:	e09c      	b.n	800222a <StartDefaultTask+0x42e>
			case 12:
				if (TS_State.touchDetected==0){
 80020f0:	4b1e      	ldr	r3, [pc, #120]	; (800216c <StartDefaultTask+0x370>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	f040 809a 	bne.w	800222e <StartDefaultTask+0x432>
					f_lseek(&SDFile, 44);
 80020fa:	212c      	movs	r1, #44	; 0x2c
 80020fc:	481f      	ldr	r0, [pc, #124]	; (800217c <StartDefaultTask+0x380>)
 80020fe:	f00e fa20 	bl	8010542 <f_lseek>
					//NB_Bloc=0;
					etat=2;
 8002102:	4b1b      	ldr	r3, [pc, #108]	; (8002170 <StartDefaultTask+0x374>)
 8002104:	2202      	movs	r2, #2
 8002106:	701a      	strb	r2, [r3, #0]
				}
				break;
 8002108:	e091      	b.n	800222e <StartDefaultTask+0x432>
			case 13:
				if (TS_State.touchDetected==0){
 800210a:	4b18      	ldr	r3, [pc, #96]	; (800216c <StartDefaultTask+0x370>)
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	2b00      	cmp	r3, #0
 8002110:	f040 808f 	bne.w	8002232 <StartDefaultTask+0x436>
					f_lseek(&SDFile, 44);
 8002114:	212c      	movs	r1, #44	; 0x2c
 8002116:	4819      	ldr	r0, [pc, #100]	; (800217c <StartDefaultTask+0x380>)
 8002118:	f00e fa13 	bl	8010542 <f_lseek>
					Bloc_Cursor=0;
 800211c:	4b18      	ldr	r3, [pc, #96]	; (8002180 <StartDefaultTask+0x384>)
 800211e:	2200      	movs	r2, #0
 8002120:	601a      	str	r2, [r3, #0]
					etat=3;
 8002122:	4b13      	ldr	r3, [pc, #76]	; (8002170 <StartDefaultTask+0x374>)
 8002124:	2203      	movs	r2, #3
 8002126:	701a      	strb	r2, [r3, #0]
				}
				break;
 8002128:	e083      	b.n	8002232 <StartDefaultTask+0x436>
			case 2:
				if (InCircle(Touch, OFF_BUTTON, R/2)){
 800212a:	2214      	movs	r2, #20
 800212c:	6979      	ldr	r1, [r7, #20]
 800212e:	68f8      	ldr	r0, [r7, #12]
 8002130:	f7fe fd30 	bl	8000b94 <InCircle>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d07d      	beq.n	8002236 <StartDefaultTask+0x43a>
					etat=20;
 800213a:	4b0d      	ldr	r3, [pc, #52]	; (8002170 <StartDefaultTask+0x374>)
 800213c:	2214      	movs	r2, #20
 800213e:	701a      	strb	r2, [r3, #0]
					DrawONButton();
 8002140:	f7fe fe02 	bl	8000d48 <DrawONButton>
//				if (InCircle(Touch, REC_BUTTON, R)){
//					etat=23;
//					DrawRecButton(LCD_COLOR_RED);
//					DrawPlayButton(LCD_COLOR_GREEN);
//				}
				break;
 8002144:	e077      	b.n	8002236 <StartDefaultTask+0x43a>
			case 20:
				if (TS_State.touchDetected==0){
 8002146:	4b09      	ldr	r3, [pc, #36]	; (800216c <StartDefaultTask+0x370>)
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d175      	bne.n	800223a <StartDefaultTask+0x43e>
					etat=0;
 800214e:	4b08      	ldr	r3, [pc, #32]	; (8002170 <StartDefaultTask+0x374>)
 8002150:	2200      	movs	r2, #0
 8002152:	701a      	strb	r2, [r3, #0]
					if (record_OK){
 8002154:	7ffb      	ldrb	r3, [r7, #31]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d06f      	beq.n	800223a <StartDefaultTask+0x43e>
//						write_header(NB_Bloc*AUDIO_BLOCK_SIZE);
					f_close(&SDFile);
 800215a:	4808      	ldr	r0, [pc, #32]	; (800217c <StartDefaultTask+0x380>)
 800215c:	f00e f9c2 	bl	80104e4 <f_close>
					}
				}
				break;
 8002160:	e06b      	b.n	800223a <StartDefaultTask+0x43e>
 8002162:	bf00      	nop
 8002164:	aaaaaaab 	.word	0xaaaaaaab
 8002168:	200007fc 	.word	0x200007fc
 800216c:	20000808 	.word	0x20000808
 8002170:	200007fd 	.word	0x200007fd
 8002174:	ff0000ff 	.word	0xff0000ff
 8002178:	08013c0c 	.word	0x08013c0c
 800217c:	20000f6c 	.word	0x20000f6c
 8002180:	20000804 	.word	0x20000804
			case 23:
				if (TS_State.touchDetected==0){
 8002184:	4b34      	ldr	r3, [pc, #208]	; (8002258 <StartDefaultTask+0x45c>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d158      	bne.n	800223e <StartDefaultTask+0x442>
					f_lseek(&SDFile, 44);
 800218c:	212c      	movs	r1, #44	; 0x2c
 800218e:	4833      	ldr	r0, [pc, #204]	; (800225c <StartDefaultTask+0x460>)
 8002190:	f00e f9d7 	bl	8010542 <f_lseek>
					Bloc_Cursor=0;
 8002194:	4b32      	ldr	r3, [pc, #200]	; (8002260 <StartDefaultTask+0x464>)
 8002196:	2200      	movs	r2, #0
 8002198:	601a      	str	r2, [r3, #0]
					etat=3;
 800219a:	4b32      	ldr	r3, [pc, #200]	; (8002264 <StartDefaultTask+0x468>)
 800219c:	2203      	movs	r2, #3
 800219e:	701a      	strb	r2, [r3, #0]
				}
				break;
 80021a0:	e04d      	b.n	800223e <StartDefaultTask+0x442>
			case 3:
//				record_OK=1;
				if (InCircle(Touch, OFF_BUTTON, R/2)){
 80021a2:	2214      	movs	r2, #20
 80021a4:	6979      	ldr	r1, [r7, #20]
 80021a6:	68f8      	ldr	r0, [r7, #12]
 80021a8:	f7fe fcf4 	bl	8000b94 <InCircle>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d004      	beq.n	80021bc <StartDefaultTask+0x3c0>
					etat=30;
 80021b2:	4b2c      	ldr	r3, [pc, #176]	; (8002264 <StartDefaultTask+0x468>)
 80021b4:	221e      	movs	r2, #30
 80021b6:	701a      	strb	r2, [r3, #0]
					DrawONButton();
 80021b8:	f7fe fdc6 	bl	8000d48 <DrawONButton>
				}
				if (InCircle(Touch, PLAY_BUTTON, R)){
 80021bc:	2228      	movs	r2, #40	; 0x28
 80021be:	6939      	ldr	r1, [r7, #16]
 80021c0:	68f8      	ldr	r0, [r7, #12]
 80021c2:	f7fe fce7 	bl	8000b94 <InCircle>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d03a      	beq.n	8002242 <StartDefaultTask+0x446>
					etat=31;
 80021cc:	4b25      	ldr	r3, [pc, #148]	; (8002264 <StartDefaultTask+0x468>)
 80021ce:	221f      	movs	r2, #31
 80021d0:	701a      	strb	r2, [r3, #0]
					DrawPlayButton(LCD_COLOR_BLUE);
 80021d2:	4825      	ldr	r0, [pc, #148]	; (8002268 <StartDefaultTask+0x46c>)
 80021d4:	f7fe fd72 	bl	8000cbc <DrawPlayButton>
//				if (InCircle(Touch, REC_BUTTON, R)){
//					etat=32;
//					DrawRecButton(LCD_COLOR_GREEN);
//					DrawPlayButton(LCD_COLOR_BLUE);
//				}
				break;
 80021d8:	e033      	b.n	8002242 <StartDefaultTask+0x446>
			case 30:
				if (TS_State.touchDetected==0){
 80021da:	4b1f      	ldr	r3, [pc, #124]	; (8002258 <StartDefaultTask+0x45c>)
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d131      	bne.n	8002246 <StartDefaultTask+0x44a>
					etat=0;
 80021e2:	4b20      	ldr	r3, [pc, #128]	; (8002264 <StartDefaultTask+0x468>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	701a      	strb	r2, [r3, #0]
					if (record_OK){
 80021e8:	7ffb      	ldrb	r3, [r7, #31]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d02b      	beq.n	8002246 <StartDefaultTask+0x44a>
//						write_header(NB_Bloc*AUDIO_BLOCK_SIZE);
					f_close(&SDFile);
 80021ee:	481b      	ldr	r0, [pc, #108]	; (800225c <StartDefaultTask+0x460>)
 80021f0:	f00e f978 	bl	80104e4 <f_close>
					}
				}
				break;
 80021f4:	e027      	b.n	8002246 <StartDefaultTask+0x44a>
			case 31:
				if (TS_State.touchDetected==0)etat=1;
 80021f6:	4b18      	ldr	r3, [pc, #96]	; (8002258 <StartDefaultTask+0x45c>)
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d125      	bne.n	800224a <StartDefaultTask+0x44e>
 80021fe:	4b19      	ldr	r3, [pc, #100]	; (8002264 <StartDefaultTask+0x468>)
 8002200:	2201      	movs	r2, #1
 8002202:	701a      	strb	r2, [r3, #0]
				break;
 8002204:	e021      	b.n	800224a <StartDefaultTask+0x44e>
			case 32:
				if (TS_State.touchDetected==0){
 8002206:	4b14      	ldr	r3, [pc, #80]	; (8002258 <StartDefaultTask+0x45c>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d11f      	bne.n	800224e <StartDefaultTask+0x452>
					//NB_Bloc=0;
					f_lseek(&SDFile, 44);
 800220e:	212c      	movs	r1, #44	; 0x2c
 8002210:	4812      	ldr	r0, [pc, #72]	; (800225c <StartDefaultTask+0x460>)
 8002212:	f00e f996 	bl	8010542 <f_lseek>
					etat=2;
 8002216:	4b13      	ldr	r3, [pc, #76]	; (8002264 <StartDefaultTask+0x468>)
 8002218:	2202      	movs	r2, #2
 800221a:	701a      	strb	r2, [r3, #0]
				}
				break;
 800221c:	e017      	b.n	800224e <StartDefaultTask+0x452>
				break;
 800221e:	bf00      	nop
 8002220:	e016      	b.n	8002250 <StartDefaultTask+0x454>
				break;
 8002222:	bf00      	nop
 8002224:	e014      	b.n	8002250 <StartDefaultTask+0x454>
				break;
 8002226:	bf00      	nop
 8002228:	e012      	b.n	8002250 <StartDefaultTask+0x454>
				break;
 800222a:	bf00      	nop
 800222c:	e010      	b.n	8002250 <StartDefaultTask+0x454>
				break;
 800222e:	bf00      	nop
 8002230:	e00e      	b.n	8002250 <StartDefaultTask+0x454>
				break;
 8002232:	bf00      	nop
 8002234:	e00c      	b.n	8002250 <StartDefaultTask+0x454>
				break;
 8002236:	bf00      	nop
 8002238:	e00a      	b.n	8002250 <StartDefaultTask+0x454>
				break;
 800223a:	bf00      	nop
 800223c:	e008      	b.n	8002250 <StartDefaultTask+0x454>
				break;
 800223e:	bf00      	nop
 8002240:	e006      	b.n	8002250 <StartDefaultTask+0x454>
				break;
 8002242:	bf00      	nop
 8002244:	e004      	b.n	8002250 <StartDefaultTask+0x454>
				break;
 8002246:	bf00      	nop
 8002248:	e002      	b.n	8002250 <StartDefaultTask+0x454>
				break;
 800224a:	bf00      	nop
 800224c:	e000      	b.n	8002250 <StartDefaultTask+0x454>
				break;
 800224e:	bf00      	nop
			}
		vTaskDelay(20);
 8002250:	2014      	movs	r0, #20
 8002252:	f010 f92f 	bl	80124b4 <vTaskDelay>
		BSP_TS_GetState(&TS_State);
 8002256:	e60f      	b.n	8001e78 <StartDefaultTask+0x7c>
 8002258:	20000808 	.word	0x20000808
 800225c:	20000f6c 	.word	0x20000f6c
 8002260:	20000804 	.word	0x20000804
 8002264:	200007fd 	.word	0x200007fd
 8002268:	ff0000ff 	.word	0xff0000ff

0800226c <StartSD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSD */
void StartSD(void const * argument)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSD */
	SD_Init();
 8002274:	f7fe fe14 	bl	8000ea0 <SD_Init>
	enable = 1;
 8002278:	4b06      	ldr	r3, [pc, #24]	; (8002294 <StartSD+0x28>)
 800227a:	2201      	movs	r2, #1
 800227c:	701a      	strb	r2, [r3, #0]
	vTaskDelete(SDHandle);
 800227e:	4b06      	ldr	r3, [pc, #24]	; (8002298 <StartSD+0x2c>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4618      	mov	r0, r3
 8002284:	f010 f884 	bl	8012390 <vTaskDelete>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 8002288:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800228c:	f00e fcec 	bl	8010c68 <osDelay>
 8002290:	e7fa      	b.n	8002288 <StartSD+0x1c>
 8002292:	bf00      	nop
 8002294:	200007fc 	.word	0x200007fc
 8002298:	200007f0 	.word	0x200007f0

0800229c <StartRecord>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRecord */
void StartRecord(void const * argument)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
	char i;
	uint32_t byteswritten,bytesread;
  /* Infinite loop */
  for(;;)
  {
	  xQueueReceive(WakeUpHandle, &i, portMAX_DELAY);
 80022a4:	4b30      	ldr	r3, [pc, #192]	; (8002368 <StartRecord+0xcc>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f107 010f 	add.w	r1, r7, #15
 80022ac:	f04f 32ff 	mov.w	r2, #4294967295
 80022b0:	4618      	mov	r0, r3
 80022b2:	f00f fad1 	bl	8011858 <xQueueReceive>
	  if (i==0){
 80022b6:	7bfb      	ldrb	r3, [r7, #15]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d103      	bne.n	80022c4 <StartRecord+0x28>
		  //f_write(&SDFile,(uint8_t*) (AUDIO_BUFFER_OUT) , AUDIO_BLOCK_SIZE,(void*) &byteswritten);
		  NB_Bloc=1554;
 80022bc:	4b2b      	ldr	r3, [pc, #172]	; (800236c <StartRecord+0xd0>)
 80022be:	f240 6212 	movw	r2, #1554	; 0x612
 80022c2:	601a      	str	r2, [r3, #0]
	  }
	  if (i==1){
 80022c4:	7bfb      	ldrb	r3, [r7, #15]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d103      	bne.n	80022d2 <StartRecord+0x36>
		  //f_write(&SDFile,(uint8_t*) (AUDIO_BUFFER_OUT + AUDIO_BLOCK_SIZE), AUDIO_BLOCK_SIZE,(void*) &byteswritten);
		  NB_Bloc=1554;
 80022ca:	4b28      	ldr	r3, [pc, #160]	; (800236c <StartRecord+0xd0>)
 80022cc:	f240 6212 	movw	r2, #1554	; 0x612
 80022d0:	601a      	str	r2, [r3, #0]
	  }
	  if (i==2){
 80022d2:	7bfb      	ldrb	r3, [r7, #15]
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d121      	bne.n	800231c <StartRecord+0x80>
		  if (Bloc_Cursor++==NB_Bloc-1){
 80022d8:	4b25      	ldr	r3, [pc, #148]	; (8002370 <StartRecord+0xd4>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	1c5a      	adds	r2, r3, #1
 80022de:	4924      	ldr	r1, [pc, #144]	; (8002370 <StartRecord+0xd4>)
 80022e0:	600a      	str	r2, [r1, #0]
 80022e2:	4a22      	ldr	r2, [pc, #136]	; (800236c <StartRecord+0xd0>)
 80022e4:	6812      	ldr	r2, [r2, #0]
 80022e6:	3a01      	subs	r2, #1
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d106      	bne.n	80022fa <StartRecord+0x5e>
			  f_lseek(&SDFile, 44);
 80022ec:	212c      	movs	r1, #44	; 0x2c
 80022ee:	4821      	ldr	r0, [pc, #132]	; (8002374 <StartRecord+0xd8>)
 80022f0:	f00e f927 	bl	8010542 <f_lseek>
			  Bloc_Cursor=0;
 80022f4:	4b1e      	ldr	r3, [pc, #120]	; (8002370 <StartRecord+0xd4>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	601a      	str	r2, [r3, #0]
		  }
		  f_read(&SDFile, ((uint8_t*)AUDIO_BUFFER_READ), AUDIO_BLOCK_SIZE,(void*) &bytesread);
 80022fa:	f107 0308 	add.w	r3, r7, #8
 80022fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002302:	491d      	ldr	r1, [pc, #116]	; (8002378 <StartRecord+0xdc>)
 8002304:	481b      	ldr	r0, [pc, #108]	; (8002374 <StartRecord+0xd8>)
 8002306:	f00d fef6 	bl	80100f6 <f_read>
		  memcpy((uint16_t*) (AUDIO_BUFFER_OUT),(uint16_t*) (AUDIO_BUFFER_READ),AUDIO_BLOCK_SIZE);
 800230a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800230e:	491a      	ldr	r1, [pc, #104]	; (8002378 <StartRecord+0xdc>)
 8002310:	481a      	ldr	r0, [pc, #104]	; (800237c <StartRecord+0xe0>)
 8002312:	f011 fbe5 	bl	8013ae0 <memcpy>
		  Addition(0);
 8002316:	2000      	movs	r0, #0
 8002318:	f7fe fc70 	bl	8000bfc <Addition>
	  }
	  if (i==3){
 800231c:	7bfb      	ldrb	r3, [r7, #15]
 800231e:	2b03      	cmp	r3, #3
 8002320:	d1c0      	bne.n	80022a4 <StartRecord+0x8>
		  if (Bloc_Cursor++==NB_Bloc-1){
 8002322:	4b13      	ldr	r3, [pc, #76]	; (8002370 <StartRecord+0xd4>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	1c5a      	adds	r2, r3, #1
 8002328:	4911      	ldr	r1, [pc, #68]	; (8002370 <StartRecord+0xd4>)
 800232a:	600a      	str	r2, [r1, #0]
 800232c:	4a0f      	ldr	r2, [pc, #60]	; (800236c <StartRecord+0xd0>)
 800232e:	6812      	ldr	r2, [r2, #0]
 8002330:	3a01      	subs	r2, #1
 8002332:	4293      	cmp	r3, r2
 8002334:	d106      	bne.n	8002344 <StartRecord+0xa8>
			  f_lseek(&SDFile, 44);
 8002336:	212c      	movs	r1, #44	; 0x2c
 8002338:	480e      	ldr	r0, [pc, #56]	; (8002374 <StartRecord+0xd8>)
 800233a:	f00e f902 	bl	8010542 <f_lseek>
			  Bloc_Cursor=0;
 800233e:	4b0c      	ldr	r3, [pc, #48]	; (8002370 <StartRecord+0xd4>)
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
		  }
		  f_read(&SDFile, ((uint8_t*)AUDIO_BUFFER_READ+AUDIO_BLOCK_SIZE), AUDIO_BLOCK_SIZE,(void*) &bytesread);
 8002344:	f107 0308 	add.w	r3, r7, #8
 8002348:	f44f 7200 	mov.w	r2, #512	; 0x200
 800234c:	490c      	ldr	r1, [pc, #48]	; (8002380 <StartRecord+0xe4>)
 800234e:	4809      	ldr	r0, [pc, #36]	; (8002374 <StartRecord+0xd8>)
 8002350:	f00d fed1 	bl	80100f6 <f_read>
		  memcpy((uint16_t*) (AUDIO_BUFFER_OUT+AUDIO_BLOCK_SIZE),(uint16_t*) (AUDIO_BUFFER_READ+AUDIO_BLOCK_SIZE),AUDIO_BLOCK_SIZE);
 8002354:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002358:	4909      	ldr	r1, [pc, #36]	; (8002380 <StartRecord+0xe4>)
 800235a:	480a      	ldr	r0, [pc, #40]	; (8002384 <StartRecord+0xe8>)
 800235c:	f011 fbc0 	bl	8013ae0 <memcpy>
		  Addition(1);
 8002360:	2001      	movs	r0, #1
 8002362:	f7fe fc4b 	bl	8000bfc <Addition>
	  xQueueReceive(WakeUpHandle, &i, portMAX_DELAY);
 8002366:	e79d      	b.n	80022a4 <StartRecord+0x8>
 8002368:	200007f8 	.word	0x200007f8
 800236c:	20000800 	.word	0x20000800
 8002370:	20000804 	.word	0x20000804
 8002374:	20000f6c 	.word	0x20000f6c
 8002378:	c0080000 	.word	0xc0080000
 800237c:	c007fc00 	.word	0xc007fc00
 8002380:	c0080200 	.word	0xc0080200
 8002384:	c007fe00 	.word	0xc007fe00

08002388 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a04      	ldr	r2, [pc, #16]	; (80023a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d101      	bne.n	800239e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800239a:	f004 faf7 	bl	800698c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800239e:	bf00      	nop
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	40001000 	.word	0x40001000

080023ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80023b0:	b672      	cpsid	i
}
 80023b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80023b4:	e7fe      	b.n	80023b4 <Error_Handler+0x8>
	...

080023b8 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b08c      	sub	sp, #48	; 0x30
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4a51      	ldr	r2, [pc, #324]	; (8002508 <I2Cx_MspInit+0x150>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d14d      	bne.n	8002464 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80023c8:	4b50      	ldr	r3, [pc, #320]	; (800250c <I2Cx_MspInit+0x154>)
 80023ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023cc:	4a4f      	ldr	r2, [pc, #316]	; (800250c <I2Cx_MspInit+0x154>)
 80023ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023d2:	6313      	str	r3, [r2, #48]	; 0x30
 80023d4:	4b4d      	ldr	r3, [pc, #308]	; (800250c <I2Cx_MspInit+0x154>)
 80023d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023dc:	61bb      	str	r3, [r7, #24]
 80023de:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 80023e0:	2380      	movs	r3, #128	; 0x80
 80023e2:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80023e4:	2312      	movs	r3, #18
 80023e6:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80023e8:	2300      	movs	r3, #0
 80023ea:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80023ec:	2302      	movs	r3, #2
 80023ee:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 80023f0:	2304      	movs	r3, #4
 80023f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80023f4:	f107 031c 	add.w	r3, r7, #28
 80023f8:	4619      	mov	r1, r3
 80023fa:	4845      	ldr	r0, [pc, #276]	; (8002510 <I2Cx_MspInit+0x158>)
 80023fc:	f005 fa7c 	bl	80078f8 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8002400:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002404:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002406:	f107 031c 	add.w	r3, r7, #28
 800240a:	4619      	mov	r1, r3
 800240c:	4840      	ldr	r0, [pc, #256]	; (8002510 <I2Cx_MspInit+0x158>)
 800240e:	f005 fa73 	bl	80078f8 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8002412:	4b3e      	ldr	r3, [pc, #248]	; (800250c <I2Cx_MspInit+0x154>)
 8002414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002416:	4a3d      	ldr	r2, [pc, #244]	; (800250c <I2Cx_MspInit+0x154>)
 8002418:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800241c:	6413      	str	r3, [r2, #64]	; 0x40
 800241e:	4b3b      	ldr	r3, [pc, #236]	; (800250c <I2Cx_MspInit+0x154>)
 8002420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002422:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002426:	617b      	str	r3, [r7, #20]
 8002428:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 800242a:	4b38      	ldr	r3, [pc, #224]	; (800250c <I2Cx_MspInit+0x154>)
 800242c:	6a1b      	ldr	r3, [r3, #32]
 800242e:	4a37      	ldr	r2, [pc, #220]	; (800250c <I2Cx_MspInit+0x154>)
 8002430:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002434:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8002436:	4b35      	ldr	r3, [pc, #212]	; (800250c <I2Cx_MspInit+0x154>)
 8002438:	6a1b      	ldr	r3, [r3, #32]
 800243a:	4a34      	ldr	r2, [pc, #208]	; (800250c <I2Cx_MspInit+0x154>)
 800243c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002440:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8002442:	2200      	movs	r2, #0
 8002444:	210f      	movs	r1, #15
 8002446:	2048      	movs	r0, #72	; 0x48
 8002448:	f004 fb9c 	bl	8006b84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 800244c:	2048      	movs	r0, #72	; 0x48
 800244e:	f004 fbb5 	bl	8006bbc <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8002452:	2200      	movs	r2, #0
 8002454:	210f      	movs	r1, #15
 8002456:	2049      	movs	r0, #73	; 0x49
 8002458:	f004 fb94 	bl	8006b84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 800245c:	2049      	movs	r0, #73	; 0x49
 800245e:	f004 fbad 	bl	8006bbc <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8002462:	e04d      	b.n	8002500 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002464:	4b29      	ldr	r3, [pc, #164]	; (800250c <I2Cx_MspInit+0x154>)
 8002466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002468:	4a28      	ldr	r2, [pc, #160]	; (800250c <I2Cx_MspInit+0x154>)
 800246a:	f043 0302 	orr.w	r3, r3, #2
 800246e:	6313      	str	r3, [r2, #48]	; 0x30
 8002470:	4b26      	ldr	r3, [pc, #152]	; (800250c <I2Cx_MspInit+0x154>)
 8002472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002474:	f003 0302 	and.w	r3, r3, #2
 8002478:	613b      	str	r3, [r7, #16]
 800247a:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 800247c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002480:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002482:	2312      	movs	r3, #18
 8002484:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002486:	2300      	movs	r3, #0
 8002488:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800248a:	2302      	movs	r3, #2
 800248c:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 800248e:	2304      	movs	r3, #4
 8002490:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002492:	f107 031c 	add.w	r3, r7, #28
 8002496:	4619      	mov	r1, r3
 8002498:	481e      	ldr	r0, [pc, #120]	; (8002514 <I2Cx_MspInit+0x15c>)
 800249a:	f005 fa2d 	bl	80078f8 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800249e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80024a4:	f107 031c 	add.w	r3, r7, #28
 80024a8:	4619      	mov	r1, r3
 80024aa:	481a      	ldr	r0, [pc, #104]	; (8002514 <I2Cx_MspInit+0x15c>)
 80024ac:	f005 fa24 	bl	80078f8 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 80024b0:	4b16      	ldr	r3, [pc, #88]	; (800250c <I2Cx_MspInit+0x154>)
 80024b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b4:	4a15      	ldr	r2, [pc, #84]	; (800250c <I2Cx_MspInit+0x154>)
 80024b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80024ba:	6413      	str	r3, [r2, #64]	; 0x40
 80024bc:	4b13      	ldr	r3, [pc, #76]	; (800250c <I2Cx_MspInit+0x154>)
 80024be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024c4:	60fb      	str	r3, [r7, #12]
 80024c6:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 80024c8:	4b10      	ldr	r3, [pc, #64]	; (800250c <I2Cx_MspInit+0x154>)
 80024ca:	6a1b      	ldr	r3, [r3, #32]
 80024cc:	4a0f      	ldr	r2, [pc, #60]	; (800250c <I2Cx_MspInit+0x154>)
 80024ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80024d2:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 80024d4:	4b0d      	ldr	r3, [pc, #52]	; (800250c <I2Cx_MspInit+0x154>)
 80024d6:	6a1b      	ldr	r3, [r3, #32]
 80024d8:	4a0c      	ldr	r2, [pc, #48]	; (800250c <I2Cx_MspInit+0x154>)
 80024da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80024de:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 80024e0:	2200      	movs	r2, #0
 80024e2:	210f      	movs	r1, #15
 80024e4:	201f      	movs	r0, #31
 80024e6:	f004 fb4d 	bl	8006b84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 80024ea:	201f      	movs	r0, #31
 80024ec:	f004 fb66 	bl	8006bbc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 80024f0:	2200      	movs	r2, #0
 80024f2:	210f      	movs	r1, #15
 80024f4:	2020      	movs	r0, #32
 80024f6:	f004 fb45 	bl	8006b84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 80024fa:	2020      	movs	r0, #32
 80024fc:	f004 fb5e 	bl	8006bbc <HAL_NVIC_EnableIRQ>
}
 8002500:	bf00      	nop
 8002502:	3730      	adds	r7, #48	; 0x30
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	20000834 	.word	0x20000834
 800250c:	40023800 	.word	0x40023800
 8002510:	40021c00 	.word	0x40021c00
 8002514:	40020400 	.word	0x40020400

08002518 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f005 ffd5 	bl	80084d0 <HAL_I2C_GetState>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d125      	bne.n	8002578 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4a14      	ldr	r2, [pc, #80]	; (8002580 <I2Cx_Init+0x68>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d103      	bne.n	800253c <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4a13      	ldr	r2, [pc, #76]	; (8002584 <I2Cx_Init+0x6c>)
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	e002      	b.n	8002542 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4a12      	ldr	r2, [pc, #72]	; (8002588 <I2Cx_Init+0x70>)
 8002540:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a11      	ldr	r2, [pc, #68]	; (800258c <I2Cx_Init+0x74>)
 8002546:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2201      	movs	r2, #1
 8002552:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f7ff ff23 	bl	80023b8 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f005 fcaa 	bl	8007ecc <HAL_I2C_Init>
  }
}
 8002578:	bf00      	nop
 800257a:	3708      	adds	r7, #8
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	20000834 	.word	0x20000834
 8002584:	40005c00 	.word	0x40005c00
 8002588:	40005400 	.word	0x40005400
 800258c:	40912732 	.word	0x40912732

08002590 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b08a      	sub	sp, #40	; 0x28
 8002594:	af04      	add	r7, sp, #16
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	4608      	mov	r0, r1
 800259a:	4611      	mov	r1, r2
 800259c:	461a      	mov	r2, r3
 800259e:	4603      	mov	r3, r0
 80025a0:	72fb      	strb	r3, [r7, #11]
 80025a2:	460b      	mov	r3, r1
 80025a4:	813b      	strh	r3, [r7, #8]
 80025a6:	4613      	mov	r3, r2
 80025a8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80025aa:	2300      	movs	r3, #0
 80025ac:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80025ae:	7afb      	ldrb	r3, [r7, #11]
 80025b0:	b299      	uxth	r1, r3
 80025b2:	88f8      	ldrh	r0, [r7, #6]
 80025b4:	893a      	ldrh	r2, [r7, #8]
 80025b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025ba:	9302      	str	r3, [sp, #8]
 80025bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80025be:	9301      	str	r3, [sp, #4]
 80025c0:	6a3b      	ldr	r3, [r7, #32]
 80025c2:	9300      	str	r3, [sp, #0]
 80025c4:	4603      	mov	r3, r0
 80025c6:	68f8      	ldr	r0, [r7, #12]
 80025c8:	f005 fe68 	bl	800829c <HAL_I2C_Mem_Read>
 80025cc:	4603      	mov	r3, r0
 80025ce:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80025d0:	7dfb      	ldrb	r3, [r7, #23]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d004      	beq.n	80025e0 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80025d6:	7afb      	ldrb	r3, [r7, #11]
 80025d8:	4619      	mov	r1, r3
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	f000 f832 	bl	8002644 <I2Cx_Error>
  }
  return status;    
 80025e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3718      	adds	r7, #24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b08a      	sub	sp, #40	; 0x28
 80025ee:	af04      	add	r7, sp, #16
 80025f0:	60f8      	str	r0, [r7, #12]
 80025f2:	4608      	mov	r0, r1
 80025f4:	4611      	mov	r1, r2
 80025f6:	461a      	mov	r2, r3
 80025f8:	4603      	mov	r3, r0
 80025fa:	72fb      	strb	r3, [r7, #11]
 80025fc:	460b      	mov	r3, r1
 80025fe:	813b      	strh	r3, [r7, #8]
 8002600:	4613      	mov	r3, r2
 8002602:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002604:	2300      	movs	r3, #0
 8002606:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002608:	7afb      	ldrb	r3, [r7, #11]
 800260a:	b299      	uxth	r1, r3
 800260c:	88f8      	ldrh	r0, [r7, #6]
 800260e:	893a      	ldrh	r2, [r7, #8]
 8002610:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002614:	9302      	str	r3, [sp, #8]
 8002616:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002618:	9301      	str	r3, [sp, #4]
 800261a:	6a3b      	ldr	r3, [r7, #32]
 800261c:	9300      	str	r3, [sp, #0]
 800261e:	4603      	mov	r3, r0
 8002620:	68f8      	ldr	r0, [r7, #12]
 8002622:	f005 fd27 	bl	8008074 <HAL_I2C_Mem_Write>
 8002626:	4603      	mov	r3, r0
 8002628:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800262a:	7dfb      	ldrb	r3, [r7, #23]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d004      	beq.n	800263a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002630:	7afb      	ldrb	r3, [r7, #11]
 8002632:	4619      	mov	r1, r3
 8002634:	68f8      	ldr	r0, [r7, #12]
 8002636:	f000 f805 	bl	8002644 <I2Cx_Error>
  }
  return status;
 800263a:	7dfb      	ldrb	r3, [r7, #23]
}
 800263c:	4618      	mov	r0, r3
 800263e:	3718      	adds	r7, #24
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	460b      	mov	r3, r1
 800264e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f005 fccb 	bl	8007fec <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f7ff ff5e 	bl	8002518 <I2Cx_Init>
}
 800265c:	bf00      	nop
 800265e:	3708      	adds	r7, #8
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8002668:	4802      	ldr	r0, [pc, #8]	; (8002674 <AUDIO_IO_Init+0x10>)
 800266a:	f7ff ff55 	bl	8002518 <I2Cx_Init>
}
 800266e:	bf00      	nop
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	20000834 	.word	0x20000834

08002678 <AUDIO_IO_DeInit>:
/**
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
}
 800267c:	bf00      	nop
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
	...

08002688 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af02      	add	r7, sp, #8
 800268e:	4603      	mov	r3, r0
 8002690:	71fb      	strb	r3, [r7, #7]
 8002692:	460b      	mov	r3, r1
 8002694:	80bb      	strh	r3, [r7, #4]
 8002696:	4613      	mov	r3, r2
 8002698:	807b      	strh	r3, [r7, #2]
  uint16_t tmp = Value;
 800269a:	887b      	ldrh	r3, [r7, #2]
 800269c:	81fb      	strh	r3, [r7, #14]
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 800269e:	89fb      	ldrh	r3, [r7, #14]
 80026a0:	0a1b      	lsrs	r3, r3, #8
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	807b      	strh	r3, [r7, #2]
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 80026a6:	89fb      	ldrh	r3, [r7, #14]
 80026a8:	021b      	lsls	r3, r3, #8
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	b21a      	sxth	r2, r3
 80026ae:	887b      	ldrh	r3, [r7, #2]
 80026b0:	b21b      	sxth	r3, r3
 80026b2:	4313      	orrs	r3, r2
 80026b4:	b21b      	sxth	r3, r3
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	807b      	strh	r3, [r7, #2]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 80026ba:	88ba      	ldrh	r2, [r7, #4]
 80026bc:	79f9      	ldrb	r1, [r7, #7]
 80026be:	2302      	movs	r3, #2
 80026c0:	9301      	str	r3, [sp, #4]
 80026c2:	1cbb      	adds	r3, r7, #2
 80026c4:	9300      	str	r3, [sp, #0]
 80026c6:	2302      	movs	r3, #2
 80026c8:	4803      	ldr	r0, [pc, #12]	; (80026d8 <AUDIO_IO_Write+0x50>)
 80026ca:	f7ff ff8e 	bl	80025ea <I2Cx_WriteMultiple>
}
 80026ce:	bf00      	nop
 80026d0:	3710      	adds	r7, #16
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	20000834 	.word	0x20000834

080026dc <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b086      	sub	sp, #24
 80026e0:	af02      	add	r7, sp, #8
 80026e2:	4603      	mov	r3, r0
 80026e4:	460a      	mov	r2, r1
 80026e6:	71fb      	strb	r3, [r7, #7]
 80026e8:	4613      	mov	r3, r2
 80026ea:	80bb      	strh	r3, [r7, #4]
  uint16_t read_value = 0, tmp = 0;
 80026ec:	2300      	movs	r3, #0
 80026ee:	81bb      	strh	r3, [r7, #12]
 80026f0:	2300      	movs	r3, #0
 80026f2:	81fb      	strh	r3, [r7, #14]
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 80026f4:	88ba      	ldrh	r2, [r7, #4]
 80026f6:	79f9      	ldrb	r1, [r7, #7]
 80026f8:	2302      	movs	r3, #2
 80026fa:	9301      	str	r3, [sp, #4]
 80026fc:	f107 030c 	add.w	r3, r7, #12
 8002700:	9300      	str	r3, [sp, #0]
 8002702:	2302      	movs	r3, #2
 8002704:	480a      	ldr	r0, [pc, #40]	; (8002730 <AUDIO_IO_Read+0x54>)
 8002706:	f7ff ff43 	bl	8002590 <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 800270a:	89bb      	ldrh	r3, [r7, #12]
 800270c:	0a1b      	lsrs	r3, r3, #8
 800270e:	81fb      	strh	r3, [r7, #14]
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 8002710:	89bb      	ldrh	r3, [r7, #12]
 8002712:	021b      	lsls	r3, r3, #8
 8002714:	b29b      	uxth	r3, r3
 8002716:	b21a      	sxth	r2, r3
 8002718:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800271c:	4313      	orrs	r3, r2
 800271e:	b21b      	sxth	r3, r3
 8002720:	81fb      	strh	r3, [r7, #14]
  
  read_value = tmp;
 8002722:	89fb      	ldrh	r3, [r7, #14]
 8002724:	81bb      	strh	r3, [r7, #12]
  
  return read_value;
 8002726:	89bb      	ldrh	r3, [r7, #12]
}
 8002728:	4618      	mov	r0, r3
 800272a:	3710      	adds	r7, #16
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	20000834 	.word	0x20000834

08002734 <AUDIO_IO_Delay>:
  * @brief  AUDIO Codec delay 
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f004 f945 	bl	80069cc <HAL_Delay>
}
 8002742:	bf00      	nop
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
	...

0800274c <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8002750:	4802      	ldr	r0, [pc, #8]	; (800275c <TS_IO_Init+0x10>)
 8002752:	f7ff fee1 	bl	8002518 <I2Cx_Init>
}
 8002756:	bf00      	nop
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	20000834 	.word	0x20000834

08002760 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af02      	add	r7, sp, #8
 8002766:	4603      	mov	r3, r0
 8002768:	71fb      	strb	r3, [r7, #7]
 800276a:	460b      	mov	r3, r1
 800276c:	71bb      	strb	r3, [r7, #6]
 800276e:	4613      	mov	r3, r2
 8002770:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8002772:	79bb      	ldrb	r3, [r7, #6]
 8002774:	b29a      	uxth	r2, r3
 8002776:	79f9      	ldrb	r1, [r7, #7]
 8002778:	2301      	movs	r3, #1
 800277a:	9301      	str	r3, [sp, #4]
 800277c:	1d7b      	adds	r3, r7, #5
 800277e:	9300      	str	r3, [sp, #0]
 8002780:	2301      	movs	r3, #1
 8002782:	4803      	ldr	r0, [pc, #12]	; (8002790 <TS_IO_Write+0x30>)
 8002784:	f7ff ff31 	bl	80025ea <I2Cx_WriteMultiple>
}
 8002788:	bf00      	nop
 800278a:	3708      	adds	r7, #8
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	20000834 	.word	0x20000834

08002794 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af02      	add	r7, sp, #8
 800279a:	4603      	mov	r3, r0
 800279c:	460a      	mov	r2, r1
 800279e:	71fb      	strb	r3, [r7, #7]
 80027a0:	4613      	mov	r3, r2
 80027a2:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80027a4:	2300      	movs	r3, #0
 80027a6:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80027a8:	79bb      	ldrb	r3, [r7, #6]
 80027aa:	b29a      	uxth	r2, r3
 80027ac:	79f9      	ldrb	r1, [r7, #7]
 80027ae:	2301      	movs	r3, #1
 80027b0:	9301      	str	r3, [sp, #4]
 80027b2:	f107 030f 	add.w	r3, r7, #15
 80027b6:	9300      	str	r3, [sp, #0]
 80027b8:	2301      	movs	r3, #1
 80027ba:	4804      	ldr	r0, [pc, #16]	; (80027cc <TS_IO_Read+0x38>)
 80027bc:	f7ff fee8 	bl	8002590 <I2Cx_ReadMultiple>

  return read_value;
 80027c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	20000834 	.word	0x20000834

080027d0 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f004 f8f7 	bl	80069cc <HAL_Delay>
}
 80027de:	bf00      	nop
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
	...

080027e8 <BSP_AUDIO_OUT_Play>:
 * @param  pBuffer: Pointer to the buffer
 * @param  Size: Number of audio data in BYTES unit.
 *         In memory, first element is for left channel, second element is for right channel
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
uint8_t BSP_AUDIO_OUT_Play(uint16_t *pBuffer, uint32_t Size) {
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
	/* Call the audio Codec Play function */
	if (audio_drv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0) {
 80027f2:	4b10      	ldr	r3, [pc, #64]	; (8002834 <BSP_AUDIO_OUT_Play+0x4c>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	683a      	ldr	r2, [r7, #0]
 80027fa:	b292      	uxth	r2, r2
 80027fc:	6879      	ldr	r1, [r7, #4]
 80027fe:	2034      	movs	r0, #52	; 0x34
 8002800:	4798      	blx	r3
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <BSP_AUDIO_OUT_Play+0x24>
		return AUDIO_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e00f      	b.n	800282c <BSP_AUDIO_OUT_Play+0x44>
	} else {
		/* Update the Media layer and enable it for play */
		HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pBuffer,
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002812:	d203      	bcs.n	800281c <BSP_AUDIO_OUT_Play+0x34>
				DMA_MAX(Size / AUDIODATA_SIZE));
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	085b      	lsrs	r3, r3, #1
		HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pBuffer,
 8002818:	b29b      	uxth	r3, r3
 800281a:	e001      	b.n	8002820 <BSP_AUDIO_OUT_Play+0x38>
 800281c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002820:	461a      	mov	r2, r3
 8002822:	6879      	ldr	r1, [r7, #4]
 8002824:	4804      	ldr	r0, [pc, #16]	; (8002838 <BSP_AUDIO_OUT_Play+0x50>)
 8002826:	f008 f983 	bl	800ab30 <HAL_SAI_Transmit_DMA>

		return AUDIO_OK;
 800282a:	2300      	movs	r3, #0
	}
}
 800282c:	4618      	mov	r0, r3
 800282e:	3708      	adds	r7, #8
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	20000888 	.word	0x20000888
 8002838:	2000088c 	.word	0x2000088c

0800283c <BSP_AUDIO_OUT_SetVolume>:
 * @brief  Controls the current audio volume level.
 * @param  Volume: Volume level to be set in percentage from 0% to 100% (0 for
 *         Mute and 100 for Max volume level).
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
uint8_t BSP_AUDIO_OUT_SetVolume(uint8_t Volume) {
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	4603      	mov	r3, r0
 8002844:	71fb      	strb	r3, [r7, #7]
	/* Call the codec volume control function with converted volume value */
	if (audio_drv->SetVolumeOut(AUDIO_I2C_ADDRESS, Volume) != 0) {
 8002846:	4b08      	ldr	r3, [pc, #32]	; (8002868 <BSP_AUDIO_OUT_SetVolume+0x2c>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800284c:	79fa      	ldrb	r2, [r7, #7]
 800284e:	4611      	mov	r1, r2
 8002850:	2034      	movs	r0, #52	; 0x34
 8002852:	4798      	blx	r3
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <BSP_AUDIO_OUT_SetVolume+0x22>
		return AUDIO_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e000      	b.n	8002860 <BSP_AUDIO_OUT_SetVolume+0x24>
	} else {
		/* Return AUDIO_OK when all operations are correctly done */
		return AUDIO_OK;
 800285e:	2300      	movs	r3, #0
	}
}
 8002860:	4618      	mov	r0, r3
 8002862:	3708      	adds	r7, #8
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	20000888 	.word	0x20000888

0800286c <BSP_AUDIO_OUT_SetAudioFrameSlot>:
 *            @arg CODEC_AUDIOFRAME_SLOT_13
 * @note   This API should be called after the BSP_AUDIO_OUT_Init() to adjust the
 *         audio frame slot.
 * @retval None
 */
void BSP_AUDIO_OUT_SetAudioFrameSlot(uint32_t AudioFrameSlot) {
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
	/* Disable SAI peripheral to allow access to SAI internal registers */
	__HAL_SAI_DISABLE(&haudio_out_sai);
 8002874:	4b0c      	ldr	r3, [pc, #48]	; (80028a8 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	4b0b      	ldr	r3, [pc, #44]	; (80028a8 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002882:	601a      	str	r2, [r3, #0]

	/* Update the SAI audio frame slot configuration */
	haudio_out_sai.SlotInit.SlotActive = AudioFrameSlot;
 8002884:	4a08      	ldr	r2, [pc, #32]	; (80028a8 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6613      	str	r3, [r2, #96]	; 0x60
	HAL_SAI_Init(&haudio_out_sai);
 800288a:	4807      	ldr	r0, [pc, #28]	; (80028a8 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 800288c:	f007 ff9c 	bl	800a7c8 <HAL_SAI_Init>

	/* Enable SAI peripheral to generate MCLK */
	__HAL_SAI_ENABLE(&haudio_out_sai);
 8002890:	4b05      	ldr	r3, [pc, #20]	; (80028a8 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	4b04      	ldr	r3, [pc, #16]	; (80028a8 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800289e:	601a      	str	r2, [r3, #0]
}
 80028a0:	bf00      	nop
 80028a2:	3708      	adds	r7, #8
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	2000088c 	.word	0x2000088c

080028ac <HAL_SAI_TxCpltCallback>:
/**
 * @brief  Tx Transfer completed callbacks.
 * @param  hsai: SAI handle
 * @retval None
 */
void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai) {
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
	/* Manage the remaining file size and new address offset: This function
	 should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
	BSP_AUDIO_OUT_TransferComplete_CallBack();
 80028b4:	f000 f834 	bl	8002920 <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 80028b8:	bf00      	nop
 80028ba:	3708      	adds	r7, #8
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <HAL_SAI_TxHalfCpltCallback>:
/**
 * @brief  Tx Half Transfer completed callbacks.
 * @param  hsai: SAI handle
 * @retval None
 */
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
	/* Manage the remaining file size and new address offset: This function
	 should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
	BSP_AUDIO_OUT_HalfTransfer_CallBack();
 80028c8:	f000 f831 	bl	800292e <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 80028cc:	bf00      	nop
 80028ce:	3708      	adds	r7, #8
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <HAL_SAI_ErrorCallback>:
/**
 * @brief  SAI error callbacks.
 * @param  hsai: SAI handle
 * @retval None
 */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai) {
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
	HAL_SAI_StateTypeDef audio_out_state;
	HAL_SAI_StateTypeDef audio_in_state;

	audio_out_state = HAL_SAI_GetState(&haudio_out_sai);
 80028dc:	480e      	ldr	r0, [pc, #56]	; (8002918 <HAL_SAI_ErrorCallback+0x44>)
 80028de:	f008 f9d7 	bl	800ac90 <HAL_SAI_GetState>
 80028e2:	4603      	mov	r3, r0
 80028e4:	73fb      	strb	r3, [r7, #15]
	audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 80028e6:	480d      	ldr	r0, [pc, #52]	; (800291c <HAL_SAI_ErrorCallback+0x48>)
 80028e8:	f008 f9d2 	bl	800ac90 <HAL_SAI_GetState>
 80028ec:	4603      	mov	r3, r0
 80028ee:	73bb      	strb	r3, [r7, #14]

	/* Determines if it is an audio out or audio in error */
	if ((audio_out_state == HAL_SAI_STATE_BUSY)
 80028f0:	7bfb      	ldrb	r3, [r7, #15]
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d002      	beq.n	80028fc <HAL_SAI_ErrorCallback+0x28>
			|| (audio_out_state == HAL_SAI_STATE_BUSY_TX)) {
 80028f6:	7bfb      	ldrb	r3, [r7, #15]
 80028f8:	2b12      	cmp	r3, #18
 80028fa:	d101      	bne.n	8002900 <HAL_SAI_ErrorCallback+0x2c>
		BSP_AUDIO_OUT_Error_CallBack();
 80028fc:	f000 f81e 	bl	800293c <BSP_AUDIO_OUT_Error_CallBack>
	}

	if ((audio_in_state == HAL_SAI_STATE_BUSY)
 8002900:	7bbb      	ldrb	r3, [r7, #14]
 8002902:	2b02      	cmp	r3, #2
 8002904:	d002      	beq.n	800290c <HAL_SAI_ErrorCallback+0x38>
			|| (audio_in_state == HAL_SAI_STATE_BUSY_RX)) {
 8002906:	7bbb      	ldrb	r3, [r7, #14]
 8002908:	2b22      	cmp	r3, #34	; 0x22
 800290a:	d101      	bne.n	8002910 <HAL_SAI_ErrorCallback+0x3c>
		BSP_AUDIO_IN_Error_CallBack();
 800290c:	f000 f9cc 	bl	8002ca8 <BSP_AUDIO_IN_Error_CallBack>
	}
}
 8002910:	bf00      	nop
 8002912:	3710      	adds	r7, #16
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	2000088c 	.word	0x2000088c
 800291c:	20000910 	.word	0x20000910

08002920 <BSP_AUDIO_OUT_TransferComplete_CallBack>:

/**
 * @brief  Manages the DMA full Transfer complete event.
 * @retval None
 */
__weak void BSP_AUDIO_OUT_TransferComplete_CallBack(void) {
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
}
 8002924:	bf00      	nop
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr

0800292e <BSP_AUDIO_OUT_HalfTransfer_CallBack>:

/**
 * @brief  Manages the DMA Half Transfer complete event.
 * @retval None
 */
__weak void BSP_AUDIO_OUT_HalfTransfer_CallBack(void) {
 800292e:	b480      	push	{r7}
 8002930:	af00      	add	r7, sp, #0
}
 8002932:	bf00      	nop
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <BSP_AUDIO_OUT_Error_CallBack>:

/**
 * @brief  Manages the DMA FIFO error event.
 * @retval None
 */
__weak void BSP_AUDIO_OUT_Error_CallBack(void) {
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
}
 8002940:	bf00      	nop
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
	...

0800294c <BSP_AUDIO_OUT_MspInit>:
 * @brief  Initializes BSP_AUDIO_OUT MSP.
 * @param  hsai: SAI handle
 * @param  Params
 * @retval None
 */
__weak void BSP_AUDIO_OUT_MspInit(SAI_HandleTypeDef *hsai, void *Params) {
 800294c:	b580      	push	{r7, lr}
 800294e:	b08c      	sub	sp, #48	; 0x30
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
	static DMA_HandleTypeDef hdma_sai_tx;
	GPIO_InitTypeDef gpio_init_structure;

	/* Enable SAI clock */
	AUDIO_OUT_SAIx_CLK_ENABLE();
 8002956:	4b63      	ldr	r3, [pc, #396]	; (8002ae4 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800295a:	4a62      	ldr	r2, [pc, #392]	; (8002ae4 <BSP_AUDIO_OUT_MspInit+0x198>)
 800295c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002960:	6453      	str	r3, [r2, #68]	; 0x44
 8002962:	4b60      	ldr	r3, [pc, #384]	; (8002ae4 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002966:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800296a:	61bb      	str	r3, [r7, #24]
 800296c:	69bb      	ldr	r3, [r7, #24]

	/* Enable GPIO clock */
	AUDIO_OUT_SAIx_MCLK_ENABLE();
 800296e:	4b5d      	ldr	r3, [pc, #372]	; (8002ae4 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002972:	4a5c      	ldr	r2, [pc, #368]	; (8002ae4 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002974:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002978:	6313      	str	r3, [r2, #48]	; 0x30
 800297a:	4b5a      	ldr	r3, [pc, #360]	; (8002ae4 <BSP_AUDIO_OUT_MspInit+0x198>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002982:	617b      	str	r3, [r7, #20]
 8002984:	697b      	ldr	r3, [r7, #20]
	AUDIO_OUT_SAIx_SCK_SD_ENABLE();
 8002986:	4b57      	ldr	r3, [pc, #348]	; (8002ae4 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298a:	4a56      	ldr	r2, [pc, #344]	; (8002ae4 <BSP_AUDIO_OUT_MspInit+0x198>)
 800298c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002990:	6313      	str	r3, [r2, #48]	; 0x30
 8002992:	4b54      	ldr	r3, [pc, #336]	; (8002ae4 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800299a:	613b      	str	r3, [r7, #16]
 800299c:	693b      	ldr	r3, [r7, #16]
	AUDIO_OUT_SAIx_FS_ENABLE();
 800299e:	4b51      	ldr	r3, [pc, #324]	; (8002ae4 <BSP_AUDIO_OUT_MspInit+0x198>)
 80029a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a2:	4a50      	ldr	r2, [pc, #320]	; (8002ae4 <BSP_AUDIO_OUT_MspInit+0x198>)
 80029a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029a8:	6313      	str	r3, [r2, #48]	; 0x30
 80029aa:	4b4e      	ldr	r3, [pc, #312]	; (8002ae4 <BSP_AUDIO_OUT_MspInit+0x198>)
 80029ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b2:	60fb      	str	r3, [r7, #12]
 80029b4:	68fb      	ldr	r3, [r7, #12]
	/* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
	gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 80029b6:	2380      	movs	r3, #128	; 0x80
 80029b8:	61fb      	str	r3, [r7, #28]
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80029ba:	2302      	movs	r3, #2
 80029bc:	623b      	str	r3, [r7, #32]
	gpio_init_structure.Pull = GPIO_NOPULL;
 80029be:	2300      	movs	r3, #0
 80029c0:	627b      	str	r3, [r7, #36]	; 0x24
	gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80029c2:	2303      	movs	r3, #3
 80029c4:	62bb      	str	r3, [r7, #40]	; 0x28
	gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 80029c6:	230a      	movs	r3, #10
 80029c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 80029ca:	f107 031c 	add.w	r3, r7, #28
 80029ce:	4619      	mov	r1, r3
 80029d0:	4845      	ldr	r0, [pc, #276]	; (8002ae8 <BSP_AUDIO_OUT_MspInit+0x19c>)
 80029d2:	f004 ff91 	bl	80078f8 <HAL_GPIO_Init>

	gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 80029d6:	2320      	movs	r3, #32
 80029d8:	61fb      	str	r3, [r7, #28]
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80029da:	2302      	movs	r3, #2
 80029dc:	623b      	str	r3, [r7, #32]
	gpio_init_structure.Pull = GPIO_NOPULL;
 80029de:	2300      	movs	r3, #0
 80029e0:	627b      	str	r3, [r7, #36]	; 0x24
	gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80029e2:	2303      	movs	r3, #3
 80029e4:	62bb      	str	r3, [r7, #40]	; 0x28
	gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 80029e6:	230a      	movs	r3, #10
 80029e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 80029ea:	f107 031c 	add.w	r3, r7, #28
 80029ee:	4619      	mov	r1, r3
 80029f0:	483d      	ldr	r0, [pc, #244]	; (8002ae8 <BSP_AUDIO_OUT_MspInit+0x19c>)
 80029f2:	f004 ff81 	bl	80078f8 <HAL_GPIO_Init>

	gpio_init_structure.Pin = AUDIO_OUT_SAIx_SD_PIN;
 80029f6:	2340      	movs	r3, #64	; 0x40
 80029f8:	61fb      	str	r3, [r7, #28]
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80029fa:	2302      	movs	r3, #2
 80029fc:	623b      	str	r3, [r7, #32]
	gpio_init_structure.Pull = GPIO_NOPULL;
 80029fe:	2300      	movs	r3, #0
 8002a00:	627b      	str	r3, [r7, #36]	; 0x24
	gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8002a02:	2303      	movs	r3, #3
 8002a04:	62bb      	str	r3, [r7, #40]	; 0x28
	gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8002a06:	230a      	movs	r3, #10
 8002a08:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8002a0a:	f107 031c 	add.w	r3, r7, #28
 8002a0e:	4619      	mov	r1, r3
 8002a10:	4835      	ldr	r0, [pc, #212]	; (8002ae8 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8002a12:	f004 ff71 	bl	80078f8 <HAL_GPIO_Init>

	gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 8002a16:	2310      	movs	r3, #16
 8002a18:	61fb      	str	r3, [r7, #28]
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	623b      	str	r3, [r7, #32]
	gpio_init_structure.Pull = GPIO_NOPULL;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	627b      	str	r3, [r7, #36]	; 0x24
	gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8002a22:	2303      	movs	r3, #3
 8002a24:	62bb      	str	r3, [r7, #40]	; 0x28
	gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8002a26:	230a      	movs	r3, #10
 8002a28:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 8002a2a:	f107 031c 	add.w	r3, r7, #28
 8002a2e:	4619      	mov	r1, r3
 8002a30:	482d      	ldr	r0, [pc, #180]	; (8002ae8 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8002a32:	f004 ff61 	bl	80078f8 <HAL_GPIO_Init>

	/* Enable the DMA clock */
	AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 8002a36:	4b2b      	ldr	r3, [pc, #172]	; (8002ae4 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3a:	4a2a      	ldr	r2, [pc, #168]	; (8002ae4 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002a3c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a40:	6313      	str	r3, [r2, #48]	; 0x30
 8002a42:	4b28      	ldr	r3, [pc, #160]	; (8002ae4 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a4a:	60bb      	str	r3, [r7, #8]
 8002a4c:	68bb      	ldr	r3, [r7, #8]

	if (hsai->Instance == AUDIO_OUT_SAIx) {
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a26      	ldr	r2, [pc, #152]	; (8002aec <BSP_AUDIO_OUT_MspInit+0x1a0>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d138      	bne.n	8002aca <BSP_AUDIO_OUT_MspInit+0x17e>
		/* Configure the hdma_saiTx handle parameters */
		hdma_sai_tx.Init.Channel = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 8002a58:	4b25      	ldr	r3, [pc, #148]	; (8002af0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8002a5a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002a5e:	605a      	str	r2, [r3, #4]
		hdma_sai_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a60:	4b23      	ldr	r3, [pc, #140]	; (8002af0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8002a62:	2240      	movs	r2, #64	; 0x40
 8002a64:	609a      	str	r2, [r3, #8]
		hdma_sai_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a66:	4b22      	ldr	r3, [pc, #136]	; (8002af0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	60da      	str	r2, [r3, #12]
		hdma_sai_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a6c:	4b20      	ldr	r3, [pc, #128]	; (8002af0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8002a6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a72:	611a      	str	r2, [r3, #16]
		hdma_sai_tx.Init.PeriphDataAlignment =
 8002a74:	4b1e      	ldr	r3, [pc, #120]	; (8002af0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8002a76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a7a:	615a      	str	r2, [r3, #20]
				AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
		hdma_sai_tx.Init.MemDataAlignment = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 8002a7c:	4b1c      	ldr	r3, [pc, #112]	; (8002af0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8002a7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a82:	619a      	str	r2, [r3, #24]
		hdma_sai_tx.Init.Mode = DMA_CIRCULAR;
 8002a84:	4b1a      	ldr	r3, [pc, #104]	; (8002af0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8002a86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a8a:	61da      	str	r2, [r3, #28]
		hdma_sai_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002a8c:	4b18      	ldr	r3, [pc, #96]	; (8002af0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8002a8e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a92:	621a      	str	r2, [r3, #32]
		hdma_sai_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002a94:	4b16      	ldr	r3, [pc, #88]	; (8002af0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8002a96:	2204      	movs	r2, #4
 8002a98:	625a      	str	r2, [r3, #36]	; 0x24
		hdma_sai_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002a9a:	4b15      	ldr	r3, [pc, #84]	; (8002af0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8002a9c:	2203      	movs	r2, #3
 8002a9e:	629a      	str	r2, [r3, #40]	; 0x28
		hdma_sai_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8002aa0:	4b13      	ldr	r3, [pc, #76]	; (8002af0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	62da      	str	r2, [r3, #44]	; 0x2c
		hdma_sai_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002aa6:	4b12      	ldr	r3, [pc, #72]	; (8002af0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	631a      	str	r2, [r3, #48]	; 0x30

		hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 8002aac:	4b10      	ldr	r3, [pc, #64]	; (8002af0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8002aae:	4a11      	ldr	r2, [pc, #68]	; (8002af4 <BSP_AUDIO_OUT_MspInit+0x1a8>)
 8002ab0:	601a      	str	r2, [r3, #0]

		/* Associate the DMA handle */
		__HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a0e      	ldr	r2, [pc, #56]	; (8002af0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8002ab6:	66da      	str	r2, [r3, #108]	; 0x6c
 8002ab8:	4a0d      	ldr	r2, [pc, #52]	; (8002af0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6393      	str	r3, [r2, #56]	; 0x38

		/* Deinitialize the Stream for new transfer */
		HAL_DMA_DeInit(&hdma_sai_tx);
 8002abe:	480c      	ldr	r0, [pc, #48]	; (8002af0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8002ac0:	f004 f938 	bl	8006d34 <HAL_DMA_DeInit>

		/* Configure the DMA Stream */
		HAL_DMA_Init(&hdma_sai_tx);
 8002ac4:	480a      	ldr	r0, [pc, #40]	; (8002af0 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8002ac6:	f004 f887 	bl	8006bd8 <HAL_DMA_Init>
	}

	/* SAI DMA IRQ Channel configuration */
	HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 8002aca:	2200      	movs	r2, #0
 8002acc:	210e      	movs	r1, #14
 8002ace:	203c      	movs	r0, #60	; 0x3c
 8002ad0:	f004 f858 	bl	8006b84 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ);
 8002ad4:	203c      	movs	r0, #60	; 0x3c
 8002ad6:	f004 f871 	bl	8006bbc <HAL_NVIC_EnableIRQ>
}
 8002ada:	bf00      	nop
 8002adc:	3730      	adds	r7, #48	; 0x30
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	40023800 	.word	0x40023800
 8002ae8:	40022000 	.word	0x40022000
 8002aec:	40015c04 	.word	0x40015c04
 8002af0:	20000994 	.word	0x20000994
 8002af4:	40026470 	.word	0x40026470

08002af8 <BSP_AUDIO_OUT_ClockConfig>:
 * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
 *         Being __weak it can be overwritten by the application
 * @retval None
 */
__weak void BSP_AUDIO_OUT_ClockConfig(SAI_HandleTypeDef *hsai,
		uint32_t AudioFreq, void *Params) {
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b0a6      	sub	sp, #152	; 0x98
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
	RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

	HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8002b04:	f107 0314 	add.w	r3, r7, #20
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f007 fc0d 	bl	800a328 <HAL_RCCEx_GetPeriphCLKConfig>

	/* Set the PLL configuration according to the audio frequency */
	if ((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K)
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	f642 3211 	movw	r2, #11025	; 0x2b11
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d009      	beq.n	8002b2c <BSP_AUDIO_OUT_ClockConfig+0x34>
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	f245 6222 	movw	r2, #22050	; 0x5622
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d004      	beq.n	8002b2c <BSP_AUDIO_OUT_ClockConfig+0x34>
			|| (AudioFreq == AUDIO_FREQUENCY_44K)) {
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	f64a 4244 	movw	r2, #44100	; 0xac44
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d112      	bne.n	8002b52 <BSP_AUDIO_OUT_ClockConfig+0x5a>
		/* Configure PLLI2S prescalers */
		/* PLLI2S_VCO: VCO_429M
		 I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 429/2 = 214.5 Mhz
		 I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 214.5/19 = 11.289 Mhz */
		rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8002b2c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002b30:	617b      	str	r3, [r7, #20]
		rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8002b32:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002b36:	657b      	str	r3, [r7, #84]	; 0x54
		rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 8002b38:	f240 13ad 	movw	r3, #429	; 0x1ad
 8002b3c:	61bb      	str	r3, [r7, #24]
		rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 8002b3e:	2302      	movs	r3, #2
 8002b40:	623b      	str	r3, [r7, #32]
		rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 8002b42:	2313      	movs	r3, #19
 8002b44:	63bb      	str	r3, [r7, #56]	; 0x38

		HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8002b46:	f107 0314 	add.w	r3, r7, #20
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f006 fffc 	bl	8009b48 <HAL_RCCEx_PeriphCLKConfig>
 8002b50:	e012      	b.n	8002b78 <BSP_AUDIO_OUT_ClockConfig+0x80>
	{
		/* I2S clock config
		 PLLI2S_VCO: VCO_344M
		 I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 344/7 = 49.142 Mhz
		 I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 49.142/1 = 49.142 Mhz */
		rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8002b52:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002b56:	617b      	str	r3, [r7, #20]
		rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8002b58:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002b5c:	657b      	str	r3, [r7, #84]	; 0x54
		rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344;
 8002b5e:	f44f 73ac 	mov.w	r3, #344	; 0x158
 8002b62:	61bb      	str	r3, [r7, #24]
		rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7;
 8002b64:	2307      	movs	r3, #7
 8002b66:	623b      	str	r3, [r7, #32]
		rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	63bb      	str	r3, [r7, #56]	; 0x38

		HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8002b6c:	f107 0314 	add.w	r3, r7, #20
 8002b70:	4618      	mov	r0, r3
 8002b72:	f006 ffe9 	bl	8009b48 <HAL_RCCEx_PeriphCLKConfig>
	}
}
 8002b76:	bf00      	nop
 8002b78:	bf00      	nop
 8002b7a:	3798      	adds	r7, #152	; 0x98
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <SAIx_Out_DeInit>:

/**
 * @brief  Deinitializes the output Audio Codec audio interface (SAI).
 * @retval None
 */
static void SAIx_Out_DeInit(void) {
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
	/* Initialize the haudio_out_sai Instance parameter */
	haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8002b84:	4b07      	ldr	r3, [pc, #28]	; (8002ba4 <SAIx_Out_DeInit+0x24>)
 8002b86:	4a08      	ldr	r2, [pc, #32]	; (8002ba8 <SAIx_Out_DeInit+0x28>)
 8002b88:	601a      	str	r2, [r3, #0]

	/* Disable SAI peripheral */
	__HAL_SAI_DISABLE(&haudio_out_sai);
 8002b8a:	4b06      	ldr	r3, [pc, #24]	; (8002ba4 <SAIx_Out_DeInit+0x24>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	4b04      	ldr	r3, [pc, #16]	; (8002ba4 <SAIx_Out_DeInit+0x24>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002b98:	601a      	str	r2, [r3, #0]

	HAL_SAI_DeInit(&haudio_out_sai);
 8002b9a:	4802      	ldr	r0, [pc, #8]	; (8002ba4 <SAIx_Out_DeInit+0x24>)
 8002b9c:	f007 ff92 	bl	800aac4 <HAL_SAI_DeInit>
}
 8002ba0:	bf00      	nop
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	2000088c 	.word	0x2000088c
 8002ba8:	40015c04 	.word	0x40015c04

08002bac <BSP_AUDIO_IN_OUT_Init>:
 * @param  BitRes: Audio frequency to be configured.
 * @param  ChnlNbr: Channel number.
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
uint8_t BSP_AUDIO_IN_OUT_Init(uint16_t InputDevice, uint16_t OutputDevice,
		uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr) {
 8002bac:	b590      	push	{r4, r7, lr}
 8002bae:	b089      	sub	sp, #36	; 0x24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60ba      	str	r2, [r7, #8]
 8002bb4:	607b      	str	r3, [r7, #4]
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	81fb      	strh	r3, [r7, #14]
 8002bba:	460b      	mov	r3, r1
 8002bbc:	81bb      	strh	r3, [r7, #12]
	uint8_t ret = AUDIO_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	77fb      	strb	r3, [r7, #31]
	uint32_t deviceid = 0x00;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	617b      	str	r3, [r7, #20]
	uint32_t slot_active;

	if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1)
 8002bc6:	89fb      	ldrh	r3, [r7, #14]
 8002bc8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002bcc:	d006      	beq.n	8002bdc <BSP_AUDIO_IN_OUT_Init+0x30>
			&& (InputDevice != INPUT_DEVICE_DIGITAL_MICROPHONE_2)) /* Only MICROPHONE_2 input supported */
 8002bce:	89fb      	ldrh	r3, [r7, #14]
 8002bd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bd4:	d002      	beq.n	8002bdc <BSP_AUDIO_IN_OUT_Init+0x30>
			{
		ret = AUDIO_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	77fb      	strb	r3, [r7, #31]
 8002bda:	e054      	b.n	8002c86 <BSP_AUDIO_IN_OUT_Init+0xda>
	} else {
		/* Disable SAI */
		SAIx_In_DeInit();
 8002bdc:	f000 f9d4 	bl	8002f88 <SAIx_In_DeInit>
		SAIx_Out_DeInit();
 8002be0:	f7ff ffce 	bl	8002b80 <SAIx_Out_DeInit>

		/* PLL clock is set depending on the AudioFreq (44.1khz vs 48khz groups) */
		BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 8002be4:	2200      	movs	r2, #0
 8002be6:	68b9      	ldr	r1, [r7, #8]
 8002be8:	4829      	ldr	r0, [pc, #164]	; (8002c90 <BSP_AUDIO_IN_OUT_Init+0xe4>)
 8002bea:	f7ff ff85 	bl	8002af8 <BSP_AUDIO_OUT_ClockConfig>

		/* SAI data transfer preparation:
		 Prepare the Media to be used for the audio transfer from SAI peripheral to memory */
		haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8002bee:	4b28      	ldr	r3, [pc, #160]	; (8002c90 <BSP_AUDIO_IN_OUT_Init+0xe4>)
 8002bf0:	4a28      	ldr	r2, [pc, #160]	; (8002c94 <BSP_AUDIO_IN_OUT_Init+0xe8>)
 8002bf2:	601a      	str	r2, [r3, #0]
		if (HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET) {
 8002bf4:	4826      	ldr	r0, [pc, #152]	; (8002c90 <BSP_AUDIO_IN_OUT_Init+0xe4>)
 8002bf6:	f008 f84b 	bl	800ac90 <HAL_SAI_GetState>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d103      	bne.n	8002c08 <BSP_AUDIO_IN_OUT_Init+0x5c>
			/* Init the SAI MSP: this __weak function can be redefined by the application*/
			BSP_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
 8002c00:	2100      	movs	r1, #0
 8002c02:	4823      	ldr	r0, [pc, #140]	; (8002c90 <BSP_AUDIO_IN_OUT_Init+0xe4>)
 8002c04:	f000 f858 	bl	8002cb8 <BSP_AUDIO_IN_MspInit>
		}

		/* SAI data transfer preparation:
		 Prepare the Media to be used for the audio transfer from memory to SAI peripheral */
		haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8002c08:	4b23      	ldr	r3, [pc, #140]	; (8002c98 <BSP_AUDIO_IN_OUT_Init+0xec>)
 8002c0a:	4a24      	ldr	r2, [pc, #144]	; (8002c9c <BSP_AUDIO_IN_OUT_Init+0xf0>)
 8002c0c:	601a      	str	r2, [r3, #0]
		if (HAL_SAI_GetState(&haudio_out_sai) == HAL_SAI_STATE_RESET) {
 8002c0e:	4822      	ldr	r0, [pc, #136]	; (8002c98 <BSP_AUDIO_IN_OUT_Init+0xec>)
 8002c10:	f008 f83e 	bl	800ac90 <HAL_SAI_GetState>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d103      	bne.n	8002c22 <BSP_AUDIO_IN_OUT_Init+0x76>
			/* Init the SAI MSP: this __weak function can be redefined by the application*/
			BSP_AUDIO_OUT_MspInit(&haudio_out_sai, NULL);
 8002c1a:	2100      	movs	r1, #0
 8002c1c:	481e      	ldr	r0, [pc, #120]	; (8002c98 <BSP_AUDIO_IN_OUT_Init+0xec>)
 8002c1e:	f7ff fe95 	bl	800294c <BSP_AUDIO_OUT_MspInit>

		/* Configure SAI in master mode :
		 *   - SAI2_block_A in master TX mode
		 *   - SAI2_block_B in slave RX mode synchronous from SAI2_block_A
		 */
		if (InputDevice == INPUT_DEVICE_DIGITAL_MICROPHONE_2) {
 8002c22:	89fb      	ldrh	r3, [r7, #14]
 8002c24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c28:	d102      	bne.n	8002c30 <BSP_AUDIO_IN_OUT_Init+0x84>
			slot_active = CODEC_AUDIOFRAME_SLOT_13;
 8002c2a:	230a      	movs	r3, #10
 8002c2c:	61bb      	str	r3, [r7, #24]
 8002c2e:	e001      	b.n	8002c34 <BSP_AUDIO_IN_OUT_Init+0x88>
		} else {
			slot_active = CODEC_AUDIOFRAME_SLOT_02;
 8002c30:	2305      	movs	r3, #5
 8002c32:	61bb      	str	r3, [r7, #24]
		}
		SAIx_In_Init(SAI_MODEMASTER_TX, slot_active, AudioFreq);
 8002c34:	68ba      	ldr	r2, [r7, #8]
 8002c36:	69b9      	ldr	r1, [r7, #24]
 8002c38:	2000      	movs	r0, #0
 8002c3a:	f000 f8ef 	bl	8002e1c <SAIx_In_Init>

		/* wm8994 codec initialization */
		deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 8002c3e:	4b18      	ldr	r3, [pc, #96]	; (8002ca0 <BSP_AUDIO_IN_OUT_Init+0xf4>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	2034      	movs	r0, #52	; 0x34
 8002c44:	4798      	blx	r3
 8002c46:	6178      	str	r0, [r7, #20]

		if ((deviceid) == WM8994_ID) {
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	f648 1294 	movw	r2, #35220	; 0x8994
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d109      	bne.n	8002c66 <BSP_AUDIO_IN_OUT_Init+0xba>
			/* Reset the Codec Registers */
			wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 8002c52:	4b13      	ldr	r3, [pc, #76]	; (8002ca0 <BSP_AUDIO_IN_OUT_Init+0xf4>)
 8002c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c56:	2034      	movs	r0, #52	; 0x34
 8002c58:	4798      	blx	r3
			/* Initialize the audio driver structure */
			audio_drv = &wm8994_drv;
 8002c5a:	4b12      	ldr	r3, [pc, #72]	; (8002ca4 <BSP_AUDIO_IN_OUT_Init+0xf8>)
 8002c5c:	4a10      	ldr	r2, [pc, #64]	; (8002ca0 <BSP_AUDIO_IN_OUT_Init+0xf4>)
 8002c5e:	601a      	str	r2, [r3, #0]
			ret = AUDIO_OK;
 8002c60:	2300      	movs	r3, #0
 8002c62:	77fb      	strb	r3, [r7, #31]
 8002c64:	e001      	b.n	8002c6a <BSP_AUDIO_IN_OUT_Init+0xbe>
		} else {
			ret = AUDIO_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	77fb      	strb	r3, [r7, #31]
		}

		if (ret == AUDIO_OK) {
 8002c6a:	7ffb      	ldrb	r3, [r7, #31]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d10a      	bne.n	8002c86 <BSP_AUDIO_IN_OUT_Init+0xda>
			/* Initialize the codec internal registers */
			audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice | OutputDevice, 100,
 8002c70:	4b0c      	ldr	r3, [pc, #48]	; (8002ca4 <BSP_AUDIO_IN_OUT_Init+0xf8>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681c      	ldr	r4, [r3, #0]
 8002c76:	89fa      	ldrh	r2, [r7, #14]
 8002c78:	89bb      	ldrh	r3, [r7, #12]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	b299      	uxth	r1, r3
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	2264      	movs	r2, #100	; 0x64
 8002c82:	2034      	movs	r0, #52	; 0x34
 8002c84:	47a0      	blx	r4
					AudioFreq);
		}
	}
	return ret;
 8002c86:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3724      	adds	r7, #36	; 0x24
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd90      	pop	{r4, r7, pc}
 8002c90:	20000910 	.word	0x20000910
 8002c94:	40015c24 	.word	0x40015c24
 8002c98:	2000088c 	.word	0x2000088c
 8002c9c:	40015c04 	.word	0x40015c04
 8002ca0:	20000048 	.word	0x20000048
 8002ca4:	20000888 	.word	0x20000888

08002ca8 <BSP_AUDIO_IN_Error_CallBack>:

/**
 * @brief  Audio IN Error callback function.
 * @retval None
 */
__weak void BSP_AUDIO_IN_Error_CallBack(void) {
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
	/* This function is called when an Interrupt due to transfer error on or peripheral
	 error occurs. */
}
 8002cac:	bf00      	nop
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
	...

08002cb8 <BSP_AUDIO_IN_MspInit>:
 * @brief  Initializes BSP_AUDIO_IN MSP.
 * @param  hsai: SAI handle
 * @param  Params
 * @retval None
 */
__weak void BSP_AUDIO_IN_MspInit(SAI_HandleTypeDef *hsai, void *Params) {
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b08c      	sub	sp, #48	; 0x30
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
	static DMA_HandleTypeDef hdma_sai_rx;
	GPIO_InitTypeDef gpio_init_structure;

	/* Enable SAI clock */
	AUDIO_IN_SAIx_CLK_ENABLE();
 8002cc2:	4b50      	ldr	r3, [pc, #320]	; (8002e04 <BSP_AUDIO_IN_MspInit+0x14c>)
 8002cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc6:	4a4f      	ldr	r2, [pc, #316]	; (8002e04 <BSP_AUDIO_IN_MspInit+0x14c>)
 8002cc8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ccc:	6453      	str	r3, [r2, #68]	; 0x44
 8002cce:	4b4d      	ldr	r3, [pc, #308]	; (8002e04 <BSP_AUDIO_IN_MspInit+0x14c>)
 8002cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cd6:	61bb      	str	r3, [r7, #24]
 8002cd8:	69bb      	ldr	r3, [r7, #24]

	/* Enable SD GPIO clock */
	AUDIO_IN_SAIx_SD_ENABLE();
 8002cda:	4b4a      	ldr	r3, [pc, #296]	; (8002e04 <BSP_AUDIO_IN_MspInit+0x14c>)
 8002cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cde:	4a49      	ldr	r2, [pc, #292]	; (8002e04 <BSP_AUDIO_IN_MspInit+0x14c>)
 8002ce0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ce6:	4b47      	ldr	r3, [pc, #284]	; (8002e04 <BSP_AUDIO_IN_MspInit+0x14c>)
 8002ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cee:	617b      	str	r3, [r7, #20]
 8002cf0:	697b      	ldr	r3, [r7, #20]
	/* CODEC_SAI pin configuration: SD pin */
	gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 8002cf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cf6:	61fb      	str	r3, [r7, #28]
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	623b      	str	r3, [r7, #32]
	gpio_init_structure.Pull = GPIO_NOPULL;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	627b      	str	r3, [r7, #36]	; 0x24
	gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002d00:	2302      	movs	r3, #2
 8002d02:	62bb      	str	r3, [r7, #40]	; 0x28
	gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
 8002d04:	230a      	movs	r3, #10
 8002d06:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8002d08:	f107 031c 	add.w	r3, r7, #28
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	483e      	ldr	r0, [pc, #248]	; (8002e08 <BSP_AUDIO_IN_MspInit+0x150>)
 8002d10:	f004 fdf2 	bl	80078f8 <HAL_GPIO_Init>

	/* Enable Audio INT GPIO clock */
	AUDIO_IN_INT_GPIO_ENABLE();
 8002d14:	4b3b      	ldr	r3, [pc, #236]	; (8002e04 <BSP_AUDIO_IN_MspInit+0x14c>)
 8002d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d18:	4a3a      	ldr	r2, [pc, #232]	; (8002e04 <BSP_AUDIO_IN_MspInit+0x14c>)
 8002d1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d1e:	6313      	str	r3, [r2, #48]	; 0x30
 8002d20:	4b38      	ldr	r3, [pc, #224]	; (8002e04 <BSP_AUDIO_IN_MspInit+0x14c>)
 8002d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d28:	613b      	str	r3, [r7, #16]
 8002d2a:	693b      	ldr	r3, [r7, #16]
	/* Audio INT pin configuration: input */
	gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 8002d2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d30:	61fb      	str	r3, [r7, #28]
	gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002d32:	2300      	movs	r3, #0
 8002d34:	623b      	str	r3, [r7, #32]
	gpio_init_structure.Pull = GPIO_NOPULL;
 8002d36:	2300      	movs	r3, #0
 8002d38:	627b      	str	r3, [r7, #36]	; 0x24
	gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 8002d3e:	f107 031c 	add.w	r3, r7, #28
 8002d42:	4619      	mov	r1, r3
 8002d44:	4831      	ldr	r0, [pc, #196]	; (8002e0c <BSP_AUDIO_IN_MspInit+0x154>)
 8002d46:	f004 fdd7 	bl	80078f8 <HAL_GPIO_Init>

	/* Enable the DMA clock */
	AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 8002d4a:	4b2e      	ldr	r3, [pc, #184]	; (8002e04 <BSP_AUDIO_IN_MspInit+0x14c>)
 8002d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4e:	4a2d      	ldr	r2, [pc, #180]	; (8002e04 <BSP_AUDIO_IN_MspInit+0x14c>)
 8002d50:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d54:	6313      	str	r3, [r2, #48]	; 0x30
 8002d56:	4b2b      	ldr	r3, [pc, #172]	; (8002e04 <BSP_AUDIO_IN_MspInit+0x14c>)
 8002d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d5e:	60fb      	str	r3, [r7, #12]
 8002d60:	68fb      	ldr	r3, [r7, #12]

	if (hsai->Instance == AUDIO_IN_SAIx) {
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a2a      	ldr	r2, [pc, #168]	; (8002e10 <BSP_AUDIO_IN_MspInit+0x158>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d137      	bne.n	8002ddc <BSP_AUDIO_IN_MspInit+0x124>
		/* Configure the hdma_sai_rx handle parameters */
		hdma_sai_rx.Init.Channel = AUDIO_IN_SAIx_DMAx_CHANNEL;
 8002d6c:	4b29      	ldr	r3, [pc, #164]	; (8002e14 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	605a      	str	r2, [r3, #4]
		hdma_sai_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d72:	4b28      	ldr	r3, [pc, #160]	; (8002e14 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	609a      	str	r2, [r3, #8]
		hdma_sai_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d78:	4b26      	ldr	r3, [pc, #152]	; (8002e14 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	60da      	str	r2, [r3, #12]
		hdma_sai_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d7e:	4b25      	ldr	r3, [pc, #148]	; (8002e14 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002d80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d84:	611a      	str	r2, [r3, #16]
		hdma_sai_rx.Init.PeriphDataAlignment =
 8002d86:	4b23      	ldr	r3, [pc, #140]	; (8002e14 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002d88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d8c:	615a      	str	r2, [r3, #20]
				AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
		hdma_sai_rx.Init.MemDataAlignment = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 8002d8e:	4b21      	ldr	r3, [pc, #132]	; (8002e14 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002d90:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d94:	619a      	str	r2, [r3, #24]
		hdma_sai_rx.Init.Mode = DMA_CIRCULAR;
 8002d96:	4b1f      	ldr	r3, [pc, #124]	; (8002e14 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002d98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d9c:	61da      	str	r2, [r3, #28]
		hdma_sai_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002d9e:	4b1d      	ldr	r3, [pc, #116]	; (8002e14 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002da0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002da4:	621a      	str	r2, [r3, #32]
		hdma_sai_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002da6:	4b1b      	ldr	r3, [pc, #108]	; (8002e14 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	625a      	str	r2, [r3, #36]	; 0x24
		hdma_sai_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002dac:	4b19      	ldr	r3, [pc, #100]	; (8002e14 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002dae:	2203      	movs	r2, #3
 8002db0:	629a      	str	r2, [r3, #40]	; 0x28
		hdma_sai_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8002db2:	4b18      	ldr	r3, [pc, #96]	; (8002e14 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	62da      	str	r2, [r3, #44]	; 0x2c
		hdma_sai_rx.Init.PeriphBurst = DMA_MBURST_SINGLE;
 8002db8:	4b16      	ldr	r3, [pc, #88]	; (8002e14 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	631a      	str	r2, [r3, #48]	; 0x30

		hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 8002dbe:	4b15      	ldr	r3, [pc, #84]	; (8002e14 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002dc0:	4a15      	ldr	r2, [pc, #84]	; (8002e18 <BSP_AUDIO_IN_MspInit+0x160>)
 8002dc2:	601a      	str	r2, [r3, #0]

		/* Associate the DMA handle */
		__HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4a13      	ldr	r2, [pc, #76]	; (8002e14 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002dc8:	671a      	str	r2, [r3, #112]	; 0x70
 8002dca:	4a12      	ldr	r2, [pc, #72]	; (8002e14 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6393      	str	r3, [r2, #56]	; 0x38

		/* Deinitialize the Stream for new transfer */
		HAL_DMA_DeInit(&hdma_sai_rx);
 8002dd0:	4810      	ldr	r0, [pc, #64]	; (8002e14 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002dd2:	f003 ffaf 	bl	8006d34 <HAL_DMA_DeInit>

		/* Configure the DMA Stream */
		HAL_DMA_Init(&hdma_sai_rx);
 8002dd6:	480f      	ldr	r0, [pc, #60]	; (8002e14 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002dd8:	f003 fefe 	bl	8006bd8 <HAL_DMA_Init>
	}

	/* SAI DMA IRQ Channel configuration */
	HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8002ddc:	2200      	movs	r2, #0
 8002dde:	210f      	movs	r1, #15
 8002de0:	2046      	movs	r0, #70	; 0x46
 8002de2:	f003 fecf 	bl	8006b84 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 8002de6:	2046      	movs	r0, #70	; 0x46
 8002de8:	f003 fee8 	bl	8006bbc <HAL_NVIC_EnableIRQ>

	/* Audio INT IRQ Channel configuration */
	HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8002dec:	2200      	movs	r2, #0
 8002dee:	210f      	movs	r1, #15
 8002df0:	2028      	movs	r0, #40	; 0x28
 8002df2:	f003 fec7 	bl	8006b84 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 8002df6:	2028      	movs	r0, #40	; 0x28
 8002df8:	f003 fee0 	bl	8006bbc <HAL_NVIC_EnableIRQ>
}
 8002dfc:	bf00      	nop
 8002dfe:	3730      	adds	r7, #48	; 0x30
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	40023800 	.word	0x40023800
 8002e08:	40021800 	.word	0x40021800
 8002e0c:	40021c00 	.word	0x40021c00
 8002e10:	40015c24 	.word	0x40015c24
 8002e14:	200009f4 	.word	0x200009f4
 8002e18:	400264b8 	.word	0x400264b8

08002e1c <SAIx_In_Init>:
 * @param  SlotActive: CODEC_AUDIOFRAME_SLOT_02 or CODEC_AUDIOFRAME_SLOT_13
 * @param  AudioFreq: Audio frequency to be configured for the SAI peripheral.
 * @retval None
 */
static void SAIx_In_Init(uint32_t SaiOutMode, uint32_t SlotActive,
		uint32_t AudioFreq) {
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]
	/* Initialize SAI2 block A in MASTER RX */
	/* Initialize the haudio_out_sai Instance parameter */
	haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8002e28:	4b53      	ldr	r3, [pc, #332]	; (8002f78 <SAIx_In_Init+0x15c>)
 8002e2a:	4a54      	ldr	r2, [pc, #336]	; (8002f7c <SAIx_In_Init+0x160>)
 8002e2c:	601a      	str	r2, [r3, #0]

	/* Disable SAI peripheral to allow access to SAI internal registers */
	__HAL_SAI_DISABLE(&haudio_out_sai);
 8002e2e:	4b52      	ldr	r3, [pc, #328]	; (8002f78 <SAIx_In_Init+0x15c>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	4b50      	ldr	r3, [pc, #320]	; (8002f78 <SAIx_In_Init+0x15c>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002e3c:	601a      	str	r2, [r3, #0]

	/* Configure SAI_Block_x
	 LSBFirst: Disabled
	 DataSize: 16 */
	haudio_out_sai.Init.AudioFrequency = AudioFreq;
 8002e3e:	4a4e      	ldr	r2, [pc, #312]	; (8002f78 <SAIx_In_Init+0x15c>)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	61d3      	str	r3, [r2, #28]
	haudio_out_sai.Init.AudioMode = SaiOutMode;
 8002e44:	4a4c      	ldr	r2, [pc, #304]	; (8002f78 <SAIx_In_Init+0x15c>)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6053      	str	r3, [r2, #4]
	haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8002e4a:	4b4b      	ldr	r3, [pc, #300]	; (8002f78 <SAIx_In_Init+0x15c>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	615a      	str	r2, [r3, #20]
	haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8002e50:	4b49      	ldr	r3, [pc, #292]	; (8002f78 <SAIx_In_Init+0x15c>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	631a      	str	r2, [r3, #48]	; 0x30
	haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 8002e56:	4b48      	ldr	r3, [pc, #288]	; (8002f78 <SAIx_In_Init+0x15c>)
 8002e58:	2280      	movs	r2, #128	; 0x80
 8002e5a:	635a      	str	r2, [r3, #52]	; 0x34
	haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002e5c:	4b46      	ldr	r3, [pc, #280]	; (8002f78 <SAIx_In_Init+0x15c>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	639a      	str	r2, [r3, #56]	; 0x38
	haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8002e62:	4b45      	ldr	r3, [pc, #276]	; (8002f78 <SAIx_In_Init+0x15c>)
 8002e64:	2201      	movs	r2, #1
 8002e66:	63da      	str	r2, [r3, #60]	; 0x3c
	haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 8002e68:	4b43      	ldr	r3, [pc, #268]	; (8002f78 <SAIx_In_Init+0x15c>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	609a      	str	r2, [r3, #8]
	haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 8002e6e:	4b42      	ldr	r3, [pc, #264]	; (8002f78 <SAIx_In_Init+0x15c>)
 8002e70:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e74:	611a      	str	r2, [r3, #16]
	haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8002e76:	4b40      	ldr	r3, [pc, #256]	; (8002f78 <SAIx_In_Init+0x15c>)
 8002e78:	2201      	movs	r2, #1
 8002e7a:	619a      	str	r2, [r3, #24]
	 Frame Length: 64
	 Frame active Length: 32
	 FS Definition: Start frame + Channel Side identification
	 FS Polarity: FS active Low
	 FS Offset: FS asserted one bit before the first bit of slot 0 */
	haudio_out_sai.FrameInit.FrameLength = 64;
 8002e7c:	4b3e      	ldr	r3, [pc, #248]	; (8002f78 <SAIx_In_Init+0x15c>)
 8002e7e:	2240      	movs	r2, #64	; 0x40
 8002e80:	641a      	str	r2, [r3, #64]	; 0x40
	haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 8002e82:	4b3d      	ldr	r3, [pc, #244]	; (8002f78 <SAIx_In_Init+0x15c>)
 8002e84:	2220      	movs	r2, #32
 8002e86:	645a      	str	r2, [r3, #68]	; 0x44
	haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8002e88:	4b3b      	ldr	r3, [pc, #236]	; (8002f78 <SAIx_In_Init+0x15c>)
 8002e8a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002e8e:	649a      	str	r2, [r3, #72]	; 0x48
	haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002e90:	4b39      	ldr	r3, [pc, #228]	; (8002f78 <SAIx_In_Init+0x15c>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	64da      	str	r2, [r3, #76]	; 0x4c
	haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8002e96:	4b38      	ldr	r3, [pc, #224]	; (8002f78 <SAIx_In_Init+0x15c>)
 8002e98:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002e9c:	651a      	str	r2, [r3, #80]	; 0x50
	/* Configure SAI Block_x Slot
	 Slot First Bit Offset: 0
	 Slot Size  : 16
	 Slot Number: 4
	 Slot Active: All slot actives */
	haudio_out_sai.SlotInit.FirstBitOffset = 0;
 8002e9e:	4b36      	ldr	r3, [pc, #216]	; (8002f78 <SAIx_In_Init+0x15c>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	655a      	str	r2, [r3, #84]	; 0x54
	haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8002ea4:	4b34      	ldr	r3, [pc, #208]	; (8002f78 <SAIx_In_Init+0x15c>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	659a      	str	r2, [r3, #88]	; 0x58
	haudio_out_sai.SlotInit.SlotNumber = 4;
 8002eaa:	4b33      	ldr	r3, [pc, #204]	; (8002f78 <SAIx_In_Init+0x15c>)
 8002eac:	2204      	movs	r2, #4
 8002eae:	65da      	str	r2, [r3, #92]	; 0x5c
	haudio_out_sai.SlotInit.SlotActive = SlotActive;
 8002eb0:	4a31      	ldr	r2, [pc, #196]	; (8002f78 <SAIx_In_Init+0x15c>)
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	6613      	str	r3, [r2, #96]	; 0x60

	HAL_SAI_Init(&haudio_out_sai);
 8002eb6:	4830      	ldr	r0, [pc, #192]	; (8002f78 <SAIx_In_Init+0x15c>)
 8002eb8:	f007 fc86 	bl	800a7c8 <HAL_SAI_Init>

	/* Initialize SAI2 block B in SLAVE RX synchronous from SAI2 block A */
	/* Initialize the haudio_in_sai Instance parameter */
	haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8002ebc:	4b30      	ldr	r3, [pc, #192]	; (8002f80 <SAIx_In_Init+0x164>)
 8002ebe:	4a31      	ldr	r2, [pc, #196]	; (8002f84 <SAIx_In_Init+0x168>)
 8002ec0:	601a      	str	r2, [r3, #0]

	/* Disable SAI peripheral to allow access to SAI internal registers */
	__HAL_SAI_DISABLE(&haudio_in_sai);
 8002ec2:	4b2f      	ldr	r3, [pc, #188]	; (8002f80 <SAIx_In_Init+0x164>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	4b2d      	ldr	r3, [pc, #180]	; (8002f80 <SAIx_In_Init+0x164>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002ed0:	601a      	str	r2, [r3, #0]

	/* Configure SAI_Block_x
	 LSBFirst: Disabled
	 DataSize: 16 */
	haudio_in_sai.Init.AudioFrequency = AudioFreq;
 8002ed2:	4a2b      	ldr	r2, [pc, #172]	; (8002f80 <SAIx_In_Init+0x164>)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	61d3      	str	r3, [r2, #28]
	haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
 8002ed8:	4b29      	ldr	r3, [pc, #164]	; (8002f80 <SAIx_In_Init+0x164>)
 8002eda:	2203      	movs	r2, #3
 8002edc:	605a      	str	r2, [r3, #4]
	haudio_in_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8002ede:	4b28      	ldr	r3, [pc, #160]	; (8002f80 <SAIx_In_Init+0x164>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	615a      	str	r2, [r3, #20]
	haudio_in_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8002ee4:	4b26      	ldr	r3, [pc, #152]	; (8002f80 <SAIx_In_Init+0x164>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	631a      	str	r2, [r3, #48]	; 0x30
	haudio_in_sai.Init.DataSize = SAI_DATASIZE_16;
 8002eea:	4b25      	ldr	r3, [pc, #148]	; (8002f80 <SAIx_In_Init+0x164>)
 8002eec:	2280      	movs	r2, #128	; 0x80
 8002eee:	635a      	str	r2, [r3, #52]	; 0x34
	haudio_in_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002ef0:	4b23      	ldr	r3, [pc, #140]	; (8002f80 <SAIx_In_Init+0x164>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	639a      	str	r2, [r3, #56]	; 0x38
	haudio_in_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8002ef6:	4b22      	ldr	r3, [pc, #136]	; (8002f80 <SAIx_In_Init+0x164>)
 8002ef8:	2201      	movs	r2, #1
 8002efa:	63da      	str	r2, [r3, #60]	; 0x3c
	haudio_in_sai.Init.Synchro = SAI_SYNCHRONOUS;
 8002efc:	4b20      	ldr	r3, [pc, #128]	; (8002f80 <SAIx_In_Init+0x164>)
 8002efe:	2201      	movs	r2, #1
 8002f00:	609a      	str	r2, [r3, #8]
	haudio_in_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLED;
 8002f02:	4b1f      	ldr	r3, [pc, #124]	; (8002f80 <SAIx_In_Init+0x164>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	611a      	str	r2, [r3, #16]
	haudio_in_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8002f08:	4b1d      	ldr	r3, [pc, #116]	; (8002f80 <SAIx_In_Init+0x164>)
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	619a      	str	r2, [r3, #24]
	 Frame Length: 64
	 Frame active Length: 32
	 FS Definition: Start frame + Channel Side identification
	 FS Polarity: FS active Low
	 FS Offset: FS asserted one bit before the first bit of slot 0 */
	haudio_in_sai.FrameInit.FrameLength = 64;
 8002f0e:	4b1c      	ldr	r3, [pc, #112]	; (8002f80 <SAIx_In_Init+0x164>)
 8002f10:	2240      	movs	r2, #64	; 0x40
 8002f12:	641a      	str	r2, [r3, #64]	; 0x40
	haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 8002f14:	4b1a      	ldr	r3, [pc, #104]	; (8002f80 <SAIx_In_Init+0x164>)
 8002f16:	2220      	movs	r2, #32
 8002f18:	645a      	str	r2, [r3, #68]	; 0x44
	haudio_in_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8002f1a:	4b19      	ldr	r3, [pc, #100]	; (8002f80 <SAIx_In_Init+0x164>)
 8002f1c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002f20:	649a      	str	r2, [r3, #72]	; 0x48
	haudio_in_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002f22:	4b17      	ldr	r3, [pc, #92]	; (8002f80 <SAIx_In_Init+0x164>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	64da      	str	r2, [r3, #76]	; 0x4c
	haudio_in_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8002f28:	4b15      	ldr	r3, [pc, #84]	; (8002f80 <SAIx_In_Init+0x164>)
 8002f2a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002f2e:	651a      	str	r2, [r3, #80]	; 0x50
	/* Configure SAI Block_x Slot
	 Slot First Bit Offset: 0
	 Slot Size  : 16
	 Slot Number: 4
	 Slot Active: All slot active */
	haudio_in_sai.SlotInit.FirstBitOffset = 0;
 8002f30:	4b13      	ldr	r3, [pc, #76]	; (8002f80 <SAIx_In_Init+0x164>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	655a      	str	r2, [r3, #84]	; 0x54
	haudio_in_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8002f36:	4b12      	ldr	r3, [pc, #72]	; (8002f80 <SAIx_In_Init+0x164>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	659a      	str	r2, [r3, #88]	; 0x58
	haudio_in_sai.SlotInit.SlotNumber = 4;
 8002f3c:	4b10      	ldr	r3, [pc, #64]	; (8002f80 <SAIx_In_Init+0x164>)
 8002f3e:	2204      	movs	r2, #4
 8002f40:	65da      	str	r2, [r3, #92]	; 0x5c
	haudio_in_sai.SlotInit.SlotActive = SlotActive;
 8002f42:	4a0f      	ldr	r2, [pc, #60]	; (8002f80 <SAIx_In_Init+0x164>)
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	6613      	str	r3, [r2, #96]	; 0x60

	HAL_SAI_Init(&haudio_in_sai);
 8002f48:	480d      	ldr	r0, [pc, #52]	; (8002f80 <SAIx_In_Init+0x164>)
 8002f4a:	f007 fc3d 	bl	800a7c8 <HAL_SAI_Init>

	/* Enable SAI peripheral to generate MCLK */
	__HAL_SAI_ENABLE(&haudio_out_sai);
 8002f4e:	4b0a      	ldr	r3, [pc, #40]	; (8002f78 <SAIx_In_Init+0x15c>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	4b08      	ldr	r3, [pc, #32]	; (8002f78 <SAIx_In_Init+0x15c>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002f5c:	601a      	str	r2, [r3, #0]

	/* Enable SAI peripheral */
	__HAL_SAI_ENABLE(&haudio_in_sai);
 8002f5e:	4b08      	ldr	r3, [pc, #32]	; (8002f80 <SAIx_In_Init+0x164>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	4b06      	ldr	r3, [pc, #24]	; (8002f80 <SAIx_In_Init+0x164>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002f6c:	601a      	str	r2, [r3, #0]
}
 8002f6e:	bf00      	nop
 8002f70:	3710      	adds	r7, #16
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	2000088c 	.word	0x2000088c
 8002f7c:	40015c04 	.word	0x40015c04
 8002f80:	20000910 	.word	0x20000910
 8002f84:	40015c24 	.word	0x40015c24

08002f88 <SAIx_In_DeInit>:

/**
 * @brief  Deinitializes the output Audio Codec audio interface (SAI).
 * @retval None
 */
static void SAIx_In_DeInit(void) {
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
	/* Initialize the haudio_in_sai Instance parameter */
	haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8002f8c:	4b07      	ldr	r3, [pc, #28]	; (8002fac <SAIx_In_DeInit+0x24>)
 8002f8e:	4a08      	ldr	r2, [pc, #32]	; (8002fb0 <SAIx_In_DeInit+0x28>)
 8002f90:	601a      	str	r2, [r3, #0]

	/* Disable SAI peripheral */
	__HAL_SAI_DISABLE(&haudio_in_sai);
 8002f92:	4b06      	ldr	r3, [pc, #24]	; (8002fac <SAIx_In_DeInit+0x24>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	4b04      	ldr	r3, [pc, #16]	; (8002fac <SAIx_In_DeInit+0x24>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002fa0:	601a      	str	r2, [r3, #0]

	HAL_SAI_DeInit(&haudio_in_sai);
 8002fa2:	4802      	ldr	r0, [pc, #8]	; (8002fac <SAIx_In_DeInit+0x24>)
 8002fa4:	f007 fd8e 	bl	800aac4 <HAL_SAI_DeInit>
}
 8002fa8:	bf00      	nop
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	20000910 	.word	0x20000910
 8002fb0:	40015c24 	.word	0x40015c24

08002fb4 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8002fb8:	4b31      	ldr	r3, [pc, #196]	; (8003080 <BSP_LCD_Init+0xcc>)
 8002fba:	2228      	movs	r2, #40	; 0x28
 8002fbc:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8002fbe:	4b30      	ldr	r3, [pc, #192]	; (8003080 <BSP_LCD_Init+0xcc>)
 8002fc0:	2209      	movs	r2, #9
 8002fc2:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002fc4:	4b2e      	ldr	r3, [pc, #184]	; (8003080 <BSP_LCD_Init+0xcc>)
 8002fc6:	2235      	movs	r2, #53	; 0x35
 8002fc8:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002fca:	4b2d      	ldr	r3, [pc, #180]	; (8003080 <BSP_LCD_Init+0xcc>)
 8002fcc:	220b      	movs	r2, #11
 8002fce:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002fd0:	4b2b      	ldr	r3, [pc, #172]	; (8003080 <BSP_LCD_Init+0xcc>)
 8002fd2:	f240 121b 	movw	r2, #283	; 0x11b
 8002fd6:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002fd8:	4b29      	ldr	r3, [pc, #164]	; (8003080 <BSP_LCD_Init+0xcc>)
 8002fda:	f240 2215 	movw	r2, #533	; 0x215
 8002fde:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8002fe0:	4b27      	ldr	r3, [pc, #156]	; (8003080 <BSP_LCD_Init+0xcc>)
 8002fe2:	f240 121d 	movw	r2, #285	; 0x11d
 8002fe6:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8002fe8:	4b25      	ldr	r3, [pc, #148]	; (8003080 <BSP_LCD_Init+0xcc>)
 8002fea:	f240 2235 	movw	r2, #565	; 0x235
 8002fee:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8002ff0:	2100      	movs	r1, #0
 8002ff2:	4823      	ldr	r0, [pc, #140]	; (8003080 <BSP_LCD_Init+0xcc>)
 8002ff4:	f000 fd8e 	bl	8003b14 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8002ff8:	4b21      	ldr	r3, [pc, #132]	; (8003080 <BSP_LCD_Init+0xcc>)
 8002ffa:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002ffe:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8003000:	4b1f      	ldr	r3, [pc, #124]	; (8003080 <BSP_LCD_Init+0xcc>)
 8003002:	f44f 7288 	mov.w	r2, #272	; 0x110
 8003006:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8003008:	4b1d      	ldr	r3, [pc, #116]	; (8003080 <BSP_LCD_Init+0xcc>)
 800300a:	2200      	movs	r2, #0
 800300c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8003010:	4b1b      	ldr	r3, [pc, #108]	; (8003080 <BSP_LCD_Init+0xcc>)
 8003012:	2200      	movs	r2, #0
 8003014:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8003018:	4b19      	ldr	r3, [pc, #100]	; (8003080 <BSP_LCD_Init+0xcc>)
 800301a:	2200      	movs	r2, #0
 800301c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003020:	4b17      	ldr	r3, [pc, #92]	; (8003080 <BSP_LCD_Init+0xcc>)
 8003022:	2200      	movs	r2, #0
 8003024:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8003026:	4b16      	ldr	r3, [pc, #88]	; (8003080 <BSP_LCD_Init+0xcc>)
 8003028:	2200      	movs	r2, #0
 800302a:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 800302c:	4b14      	ldr	r3, [pc, #80]	; (8003080 <BSP_LCD_Init+0xcc>)
 800302e:	2200      	movs	r2, #0
 8003030:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003032:	4b13      	ldr	r3, [pc, #76]	; (8003080 <BSP_LCD_Init+0xcc>)
 8003034:	2200      	movs	r2, #0
 8003036:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8003038:	4b11      	ldr	r3, [pc, #68]	; (8003080 <BSP_LCD_Init+0xcc>)
 800303a:	4a12      	ldr	r2, [pc, #72]	; (8003084 <BSP_LCD_Init+0xd0>)
 800303c:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 800303e:	4810      	ldr	r0, [pc, #64]	; (8003080 <BSP_LCD_Init+0xcc>)
 8003040:	f005 febe 	bl	8008dc0 <HAL_LTDC_GetState>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d103      	bne.n	8003052 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 800304a:	2100      	movs	r1, #0
 800304c:	480c      	ldr	r0, [pc, #48]	; (8003080 <BSP_LCD_Init+0xcc>)
 800304e:	f000 fc87 	bl	8003960 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8003052:	480b      	ldr	r0, [pc, #44]	; (8003080 <BSP_LCD_Init+0xcc>)
 8003054:	f005 fce4 	bl	8008a20 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8003058:	2201      	movs	r2, #1
 800305a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800305e:	480a      	ldr	r0, [pc, #40]	; (8003088 <BSP_LCD_Init+0xd4>)
 8003060:	f004 ff1a 	bl	8007e98 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8003064:	2201      	movs	r2, #1
 8003066:	2108      	movs	r1, #8
 8003068:	4808      	ldr	r0, [pc, #32]	; (800308c <BSP_LCD_Init+0xd8>)
 800306a:	f004 ff15 	bl	8007e98 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 800306e:	f000 fe71 	bl	8003d54 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8003072:	4807      	ldr	r0, [pc, #28]	; (8003090 <BSP_LCD_Init+0xdc>)
 8003074:	f000 f8d8 	bl	8003228 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	20000a54 	.word	0x20000a54
 8003084:	40016800 	.word	0x40016800
 8003088:	40022000 	.word	0x40022000
 800308c:	40022800 	.word	0x40022800
 8003090:	20000028 	.word	0x20000028

08003094 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8003098:	4b06      	ldr	r3, [pc, #24]	; (80030b4 <BSP_LCD_GetXSize+0x20>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a06      	ldr	r2, [pc, #24]	; (80030b8 <BSP_LCD_GetXSize+0x24>)
 800309e:	2134      	movs	r1, #52	; 0x34
 80030a0:	fb01 f303 	mul.w	r3, r1, r3
 80030a4:	4413      	add	r3, r2
 80030a6:	3360      	adds	r3, #96	; 0x60
 80030a8:	681b      	ldr	r3, [r3, #0]
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr
 80030b4:	20000b3c 	.word	0x20000b3c
 80030b8:	20000a54 	.word	0x20000a54

080030bc <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 80030c0:	4b06      	ldr	r3, [pc, #24]	; (80030dc <BSP_LCD_GetYSize+0x20>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a06      	ldr	r2, [pc, #24]	; (80030e0 <BSP_LCD_GetYSize+0x24>)
 80030c6:	2134      	movs	r1, #52	; 0x34
 80030c8:	fb01 f303 	mul.w	r3, r1, r3
 80030cc:	4413      	add	r3, r2
 80030ce:	3364      	adds	r3, #100	; 0x64
 80030d0:	681b      	ldr	r3, [r3, #0]
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	20000b3c 	.word	0x20000b3c
 80030e0:	20000a54 	.word	0x20000a54

080030e4 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b090      	sub	sp, #64	; 0x40
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	4603      	mov	r3, r0
 80030ec:	6039      	str	r1, [r7, #0]
 80030ee:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 80030f0:	2300      	movs	r3, #0
 80030f2:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 80030f4:	f7ff ffce 	bl	8003094 <BSP_LCD_GetXSize>
 80030f8:	4603      	mov	r3, r0
 80030fa:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 80030fc:	2300      	movs	r3, #0
 80030fe:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8003100:	f7ff ffdc 	bl	80030bc <BSP_LCD_GetYSize>
 8003104:	4603      	mov	r3, r0
 8003106:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003108:	2300      	movs	r3, #0
 800310a:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8003110:	23ff      	movs	r3, #255	; 0xff
 8003112:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8003114:	2300      	movs	r3, #0
 8003116:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8003118:	2300      	movs	r3, #0
 800311a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 800311e:	2300      	movs	r3, #0
 8003120:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8003124:	2300      	movs	r3, #0
 8003126:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800312a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800312e:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8003130:	2307      	movs	r3, #7
 8003132:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8003134:	f7ff ffae 	bl	8003094 <BSP_LCD_GetXSize>
 8003138:	4603      	mov	r3, r0
 800313a:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 800313c:	f7ff ffbe 	bl	80030bc <BSP_LCD_GetYSize>
 8003140:	4603      	mov	r3, r0
 8003142:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8003144:	88fa      	ldrh	r2, [r7, #6]
 8003146:	f107 030c 	add.w	r3, r7, #12
 800314a:	4619      	mov	r1, r3
 800314c:	4812      	ldr	r0, [pc, #72]	; (8003198 <BSP_LCD_LayerDefaultInit+0xb4>)
 800314e:	f005 fdf9 	bl	8008d44 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8003152:	88fa      	ldrh	r2, [r7, #6]
 8003154:	4911      	ldr	r1, [pc, #68]	; (800319c <BSP_LCD_LayerDefaultInit+0xb8>)
 8003156:	4613      	mov	r3, r2
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	4413      	add	r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	440b      	add	r3, r1
 8003160:	3304      	adds	r3, #4
 8003162:	f04f 32ff 	mov.w	r2, #4294967295
 8003166:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8003168:	88fa      	ldrh	r2, [r7, #6]
 800316a:	490c      	ldr	r1, [pc, #48]	; (800319c <BSP_LCD_LayerDefaultInit+0xb8>)
 800316c:	4613      	mov	r3, r2
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	4413      	add	r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	440b      	add	r3, r1
 8003176:	3308      	adds	r3, #8
 8003178:	4a09      	ldr	r2, [pc, #36]	; (80031a0 <BSP_LCD_LayerDefaultInit+0xbc>)
 800317a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 800317c:	88fa      	ldrh	r2, [r7, #6]
 800317e:	4907      	ldr	r1, [pc, #28]	; (800319c <BSP_LCD_LayerDefaultInit+0xb8>)
 8003180:	4613      	mov	r3, r2
 8003182:	005b      	lsls	r3, r3, #1
 8003184:	4413      	add	r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	440b      	add	r3, r1
 800318a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800318e:	601a      	str	r2, [r3, #0]
}
 8003190:	bf00      	nop
 8003192:	3740      	adds	r7, #64	; 0x40
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	20000a54 	.word	0x20000a54
 800319c:	20000b40 	.word	0x20000b40
 80031a0:	20000028 	.word	0x20000028

080031a4 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80031ac:	4a04      	ldr	r2, [pc, #16]	; (80031c0 <BSP_LCD_SelectLayer+0x1c>)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6013      	str	r3, [r2, #0]
} 
 80031b2:	bf00      	nop
 80031b4:	370c      	adds	r7, #12
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	20000b3c 	.word	0x20000b3c

080031c4 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80031cc:	4b07      	ldr	r3, [pc, #28]	; (80031ec <BSP_LCD_SetTextColor+0x28>)
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	4907      	ldr	r1, [pc, #28]	; (80031f0 <BSP_LCD_SetTextColor+0x2c>)
 80031d2:	4613      	mov	r3, r2
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	4413      	add	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	440b      	add	r3, r1
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	601a      	str	r2, [r3, #0]
}
 80031e0:	bf00      	nop
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr
 80031ec:	20000b3c 	.word	0x20000b3c
 80031f0:	20000b40 	.word	0x20000b40

080031f4 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80031fc:	4b08      	ldr	r3, [pc, #32]	; (8003220 <BSP_LCD_SetBackColor+0x2c>)
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	4908      	ldr	r1, [pc, #32]	; (8003224 <BSP_LCD_SetBackColor+0x30>)
 8003202:	4613      	mov	r3, r2
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	4413      	add	r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	440b      	add	r3, r1
 800320c:	3304      	adds	r3, #4
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	601a      	str	r2, [r3, #0]
}
 8003212:	bf00      	nop
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	20000b3c 	.word	0x20000b3c
 8003224:	20000b40 	.word	0x20000b40

08003228 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8003230:	4b08      	ldr	r3, [pc, #32]	; (8003254 <BSP_LCD_SetFont+0x2c>)
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	4908      	ldr	r1, [pc, #32]	; (8003258 <BSP_LCD_SetFont+0x30>)
 8003236:	4613      	mov	r3, r2
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	4413      	add	r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	440b      	add	r3, r1
 8003240:	3308      	adds	r3, #8
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	601a      	str	r2, [r3, #0]
}
 8003246:	bf00      	nop
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	20000b3c 	.word	0x20000b3c
 8003258:	20000b40 	.word	0x20000b40

0800325c <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 800325c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800325e:	b085      	sub	sp, #20
 8003260:	af02      	add	r7, sp, #8
 8003262:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8003264:	4b0f      	ldr	r3, [pc, #60]	; (80032a4 <BSP_LCD_Clear+0x48>)
 8003266:	681c      	ldr	r4, [r3, #0]
 8003268:	4b0e      	ldr	r3, [pc, #56]	; (80032a4 <BSP_LCD_Clear+0x48>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a0e      	ldr	r2, [pc, #56]	; (80032a8 <BSP_LCD_Clear+0x4c>)
 800326e:	2134      	movs	r1, #52	; 0x34
 8003270:	fb01 f303 	mul.w	r3, r1, r3
 8003274:	4413      	add	r3, r2
 8003276:	335c      	adds	r3, #92	; 0x5c
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	461e      	mov	r6, r3
 800327c:	f7ff ff0a 	bl	8003094 <BSP_LCD_GetXSize>
 8003280:	4605      	mov	r5, r0
 8003282:	f7ff ff1b 	bl	80030bc <BSP_LCD_GetYSize>
 8003286:	4602      	mov	r2, r0
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	9301      	str	r3, [sp, #4]
 800328c:	2300      	movs	r3, #0
 800328e:	9300      	str	r3, [sp, #0]
 8003290:	4613      	mov	r3, r2
 8003292:	462a      	mov	r2, r5
 8003294:	4631      	mov	r1, r6
 8003296:	4620      	mov	r0, r4
 8003298:	f000 fd10 	bl	8003cbc <LL_FillBuffer>
}
 800329c:	bf00      	nop
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032a4:	20000b3c 	.word	0x20000b3c
 80032a8:	20000a54 	.word	0x20000a54

080032ac <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80032ac:	b590      	push	{r4, r7, lr}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	4603      	mov	r3, r0
 80032b4:	80fb      	strh	r3, [r7, #6]
 80032b6:	460b      	mov	r3, r1
 80032b8:	80bb      	strh	r3, [r7, #4]
 80032ba:	4613      	mov	r3, r2
 80032bc:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80032be:	4b1b      	ldr	r3, [pc, #108]	; (800332c <BSP_LCD_DisplayChar+0x80>)
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	491b      	ldr	r1, [pc, #108]	; (8003330 <BSP_LCD_DisplayChar+0x84>)
 80032c4:	4613      	mov	r3, r2
 80032c6:	005b      	lsls	r3, r3, #1
 80032c8:	4413      	add	r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	440b      	add	r3, r1
 80032ce:	3308      	adds	r3, #8
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	6819      	ldr	r1, [r3, #0]
 80032d4:	78fb      	ldrb	r3, [r7, #3]
 80032d6:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80032da:	4b14      	ldr	r3, [pc, #80]	; (800332c <BSP_LCD_DisplayChar+0x80>)
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	4c14      	ldr	r4, [pc, #80]	; (8003330 <BSP_LCD_DisplayChar+0x84>)
 80032e0:	4613      	mov	r3, r2
 80032e2:	005b      	lsls	r3, r3, #1
 80032e4:	4413      	add	r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	4423      	add	r3, r4
 80032ea:	3308      	adds	r3, #8
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80032f0:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80032f4:	4b0d      	ldr	r3, [pc, #52]	; (800332c <BSP_LCD_DisplayChar+0x80>)
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	4c0d      	ldr	r4, [pc, #52]	; (8003330 <BSP_LCD_DisplayChar+0x84>)
 80032fa:	4613      	mov	r3, r2
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	4413      	add	r3, r2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	4423      	add	r3, r4
 8003304:	3308      	adds	r3, #8
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	889b      	ldrh	r3, [r3, #4]
 800330a:	3307      	adds	r3, #7
 800330c:	2b00      	cmp	r3, #0
 800330e:	da00      	bge.n	8003312 <BSP_LCD_DisplayChar+0x66>
 8003310:	3307      	adds	r3, #7
 8003312:	10db      	asrs	r3, r3, #3
 8003314:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003318:	18ca      	adds	r2, r1, r3
 800331a:	88b9      	ldrh	r1, [r7, #4]
 800331c:	88fb      	ldrh	r3, [r7, #6]
 800331e:	4618      	mov	r0, r3
 8003320:	f000 fc14 	bl	8003b4c <DrawChar>
}
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	bd90      	pop	{r4, r7, pc}
 800332c:	20000b3c 	.word	0x20000b3c
 8003330:	20000b40 	.word	0x20000b40

08003334 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8003334:	b5b0      	push	{r4, r5, r7, lr}
 8003336:	b088      	sub	sp, #32
 8003338:	af00      	add	r7, sp, #0
 800333a:	60ba      	str	r2, [r7, #8]
 800333c:	461a      	mov	r2, r3
 800333e:	4603      	mov	r3, r0
 8003340:	81fb      	strh	r3, [r7, #14]
 8003342:	460b      	mov	r3, r1
 8003344:	81bb      	strh	r3, [r7, #12]
 8003346:	4613      	mov	r3, r2
 8003348:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 800334a:	2301      	movs	r3, #1
 800334c:	83fb      	strh	r3, [r7, #30]
 800334e:	2300      	movs	r3, #0
 8003350:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8003352:	2300      	movs	r3, #0
 8003354:	61bb      	str	r3, [r7, #24]
 8003356:	2300      	movs	r3, #0
 8003358:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800335e:	e002      	b.n	8003366 <BSP_LCD_DisplayStringAt+0x32>
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	3301      	adds	r3, #1
 8003364:	61bb      	str	r3, [r7, #24]
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	1c5a      	adds	r2, r3, #1
 800336a:	617a      	str	r2, [r7, #20]
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d1f6      	bne.n	8003360 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8003372:	f7ff fe8f 	bl	8003094 <BSP_LCD_GetXSize>
 8003376:	4601      	mov	r1, r0
 8003378:	4b50      	ldr	r3, [pc, #320]	; (80034bc <BSP_LCD_DisplayStringAt+0x188>)
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	4850      	ldr	r0, [pc, #320]	; (80034c0 <BSP_LCD_DisplayStringAt+0x18c>)
 800337e:	4613      	mov	r3, r2
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	4413      	add	r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	4403      	add	r3, r0
 8003388:	3308      	adds	r3, #8
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	889b      	ldrh	r3, [r3, #4]
 800338e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003392:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8003394:	79fb      	ldrb	r3, [r7, #7]
 8003396:	2b03      	cmp	r3, #3
 8003398:	d01c      	beq.n	80033d4 <BSP_LCD_DisplayStringAt+0xa0>
 800339a:	2b03      	cmp	r3, #3
 800339c:	dc33      	bgt.n	8003406 <BSP_LCD_DisplayStringAt+0xd2>
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d002      	beq.n	80033a8 <BSP_LCD_DisplayStringAt+0x74>
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d019      	beq.n	80033da <BSP_LCD_DisplayStringAt+0xa6>
 80033a6:	e02e      	b.n	8003406 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	1ad1      	subs	r1, r2, r3
 80033ae:	4b43      	ldr	r3, [pc, #268]	; (80034bc <BSP_LCD_DisplayStringAt+0x188>)
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	4843      	ldr	r0, [pc, #268]	; (80034c0 <BSP_LCD_DisplayStringAt+0x18c>)
 80033b4:	4613      	mov	r3, r2
 80033b6:	005b      	lsls	r3, r3, #1
 80033b8:	4413      	add	r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	4403      	add	r3, r0
 80033be:	3308      	adds	r3, #8
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	889b      	ldrh	r3, [r3, #4]
 80033c4:	fb01 f303 	mul.w	r3, r1, r3
 80033c8:	085b      	lsrs	r3, r3, #1
 80033ca:	b29a      	uxth	r2, r3
 80033cc:	89fb      	ldrh	r3, [r7, #14]
 80033ce:	4413      	add	r3, r2
 80033d0:	83fb      	strh	r3, [r7, #30]
      break;
 80033d2:	e01b      	b.n	800340c <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 80033d4:	89fb      	ldrh	r3, [r7, #14]
 80033d6:	83fb      	strh	r3, [r7, #30]
      break;
 80033d8:	e018      	b.n	800340c <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80033da:	693a      	ldr	r2, [r7, #16]
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	b299      	uxth	r1, r3
 80033e2:	4b36      	ldr	r3, [pc, #216]	; (80034bc <BSP_LCD_DisplayStringAt+0x188>)
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	4836      	ldr	r0, [pc, #216]	; (80034c0 <BSP_LCD_DisplayStringAt+0x18c>)
 80033e8:	4613      	mov	r3, r2
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	4413      	add	r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	4403      	add	r3, r0
 80033f2:	3308      	adds	r3, #8
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	889b      	ldrh	r3, [r3, #4]
 80033f8:	fb11 f303 	smulbb	r3, r1, r3
 80033fc:	b29a      	uxth	r2, r3
 80033fe:	89fb      	ldrh	r3, [r7, #14]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	83fb      	strh	r3, [r7, #30]
      break;
 8003404:	e002      	b.n	800340c <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 8003406:	89fb      	ldrh	r3, [r7, #14]
 8003408:	83fb      	strh	r3, [r7, #30]
      break;
 800340a:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 800340c:	8bfb      	ldrh	r3, [r7, #30]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <BSP_LCD_DisplayStringAt+0xe6>
 8003412:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003416:	2b00      	cmp	r3, #0
 8003418:	da1d      	bge.n	8003456 <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 800341a:	2301      	movs	r3, #1
 800341c:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800341e:	e01a      	b.n	8003456 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	781a      	ldrb	r2, [r3, #0]
 8003424:	89b9      	ldrh	r1, [r7, #12]
 8003426:	8bfb      	ldrh	r3, [r7, #30]
 8003428:	4618      	mov	r0, r3
 800342a:	f7ff ff3f 	bl	80032ac <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 800342e:	4b23      	ldr	r3, [pc, #140]	; (80034bc <BSP_LCD_DisplayStringAt+0x188>)
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	4923      	ldr	r1, [pc, #140]	; (80034c0 <BSP_LCD_DisplayStringAt+0x18c>)
 8003434:	4613      	mov	r3, r2
 8003436:	005b      	lsls	r3, r3, #1
 8003438:	4413      	add	r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	440b      	add	r3, r1
 800343e:	3308      	adds	r3, #8
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	889a      	ldrh	r2, [r3, #4]
 8003444:	8bfb      	ldrh	r3, [r7, #30]
 8003446:	4413      	add	r3, r2
 8003448:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	3301      	adds	r3, #1
 800344e:	60bb      	str	r3, [r7, #8]
    i++;
 8003450:	8bbb      	ldrh	r3, [r7, #28]
 8003452:	3301      	adds	r3, #1
 8003454:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	2b00      	cmp	r3, #0
 800345c:	bf14      	ite	ne
 800345e:	2301      	movne	r3, #1
 8003460:	2300      	moveq	r3, #0
 8003462:	b2dc      	uxtb	r4, r3
 8003464:	f7ff fe16 	bl	8003094 <BSP_LCD_GetXSize>
 8003468:	8bb9      	ldrh	r1, [r7, #28]
 800346a:	4b14      	ldr	r3, [pc, #80]	; (80034bc <BSP_LCD_DisplayStringAt+0x188>)
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	4d14      	ldr	r5, [pc, #80]	; (80034c0 <BSP_LCD_DisplayStringAt+0x18c>)
 8003470:	4613      	mov	r3, r2
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	4413      	add	r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	442b      	add	r3, r5
 800347a:	3308      	adds	r3, #8
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	889b      	ldrh	r3, [r3, #4]
 8003480:	fb01 f303 	mul.w	r3, r1, r3
 8003484:	1ac3      	subs	r3, r0, r3
 8003486:	b299      	uxth	r1, r3
 8003488:	4b0c      	ldr	r3, [pc, #48]	; (80034bc <BSP_LCD_DisplayStringAt+0x188>)
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	480c      	ldr	r0, [pc, #48]	; (80034c0 <BSP_LCD_DisplayStringAt+0x18c>)
 800348e:	4613      	mov	r3, r2
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	4413      	add	r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	4403      	add	r3, r0
 8003498:	3308      	adds	r3, #8
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	889b      	ldrh	r3, [r3, #4]
 800349e:	4299      	cmp	r1, r3
 80034a0:	bf2c      	ite	cs
 80034a2:	2301      	movcs	r3, #1
 80034a4:	2300      	movcc	r3, #0
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	4023      	ands	r3, r4
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d1b7      	bne.n	8003420 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 80034b0:	bf00      	nop
 80034b2:	bf00      	nop
 80034b4:	3720      	adds	r7, #32
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bdb0      	pop	{r4, r5, r7, pc}
 80034ba:	bf00      	nop
 80034bc:	20000b3c 	.word	0x20000b3c
 80034c0:	20000b40 	.word	0x20000b40

080034c4 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80034c4:	b5b0      	push	{r4, r5, r7, lr}
 80034c6:	b086      	sub	sp, #24
 80034c8:	af02      	add	r7, sp, #8
 80034ca:	4603      	mov	r3, r0
 80034cc:	80fb      	strh	r3, [r7, #6]
 80034ce:	460b      	mov	r3, r1
 80034d0:	80bb      	strh	r3, [r7, #4]
 80034d2:	4613      	mov	r3, r2
 80034d4:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 80034d6:	2300      	movs	r3, #0
 80034d8:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80034da:	4b26      	ldr	r3, [pc, #152]	; (8003574 <BSP_LCD_DrawHLine+0xb0>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a26      	ldr	r2, [pc, #152]	; (8003578 <BSP_LCD_DrawHLine+0xb4>)
 80034e0:	2134      	movs	r1, #52	; 0x34
 80034e2:	fb01 f303 	mul.w	r3, r1, r3
 80034e6:	4413      	add	r3, r2
 80034e8:	3348      	adds	r3, #72	; 0x48
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d114      	bne.n	800351a <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80034f0:	4b20      	ldr	r3, [pc, #128]	; (8003574 <BSP_LCD_DrawHLine+0xb0>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a20      	ldr	r2, [pc, #128]	; (8003578 <BSP_LCD_DrawHLine+0xb4>)
 80034f6:	2134      	movs	r1, #52	; 0x34
 80034f8:	fb01 f303 	mul.w	r3, r1, r3
 80034fc:	4413      	add	r3, r2
 80034fe:	335c      	adds	r3, #92	; 0x5c
 8003500:	681c      	ldr	r4, [r3, #0]
 8003502:	f7ff fdc7 	bl	8003094 <BSP_LCD_GetXSize>
 8003506:	4602      	mov	r2, r0
 8003508:	88bb      	ldrh	r3, [r7, #4]
 800350a:	fb03 f202 	mul.w	r2, r3, r2
 800350e:	88fb      	ldrh	r3, [r7, #6]
 8003510:	4413      	add	r3, r2
 8003512:	005b      	lsls	r3, r3, #1
 8003514:	4423      	add	r3, r4
 8003516:	60fb      	str	r3, [r7, #12]
 8003518:	e013      	b.n	8003542 <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800351a:	4b16      	ldr	r3, [pc, #88]	; (8003574 <BSP_LCD_DrawHLine+0xb0>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a16      	ldr	r2, [pc, #88]	; (8003578 <BSP_LCD_DrawHLine+0xb4>)
 8003520:	2134      	movs	r1, #52	; 0x34
 8003522:	fb01 f303 	mul.w	r3, r1, r3
 8003526:	4413      	add	r3, r2
 8003528:	335c      	adds	r3, #92	; 0x5c
 800352a:	681c      	ldr	r4, [r3, #0]
 800352c:	f7ff fdb2 	bl	8003094 <BSP_LCD_GetXSize>
 8003530:	4602      	mov	r2, r0
 8003532:	88bb      	ldrh	r3, [r7, #4]
 8003534:	fb03 f202 	mul.w	r2, r3, r2
 8003538:	88fb      	ldrh	r3, [r7, #6]
 800353a:	4413      	add	r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	4423      	add	r3, r4
 8003540:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8003542:	4b0c      	ldr	r3, [pc, #48]	; (8003574 <BSP_LCD_DrawHLine+0xb0>)
 8003544:	6818      	ldr	r0, [r3, #0]
 8003546:	68f9      	ldr	r1, [r7, #12]
 8003548:	887c      	ldrh	r4, [r7, #2]
 800354a:	4b0a      	ldr	r3, [pc, #40]	; (8003574 <BSP_LCD_DrawHLine+0xb0>)
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	4d0b      	ldr	r5, [pc, #44]	; (800357c <BSP_LCD_DrawHLine+0xb8>)
 8003550:	4613      	mov	r3, r2
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	4413      	add	r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	442b      	add	r3, r5
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	9301      	str	r3, [sp, #4]
 800355e:	2300      	movs	r3, #0
 8003560:	9300      	str	r3, [sp, #0]
 8003562:	2301      	movs	r3, #1
 8003564:	4622      	mov	r2, r4
 8003566:	f000 fba9 	bl	8003cbc <LL_FillBuffer>
}
 800356a:	bf00      	nop
 800356c:	3710      	adds	r7, #16
 800356e:	46bd      	mov	sp, r7
 8003570:	bdb0      	pop	{r4, r5, r7, pc}
 8003572:	bf00      	nop
 8003574:	20000b3c 	.word	0x20000b3c
 8003578:	20000a54 	.word	0x20000a54
 800357c:	20000b40 	.word	0x20000b40

08003580 <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8003580:	b590      	push	{r4, r7, lr}
 8003582:	b087      	sub	sp, #28
 8003584:	af00      	add	r7, sp, #0
 8003586:	4603      	mov	r3, r0
 8003588:	80fb      	strh	r3, [r7, #6]
 800358a:	460b      	mov	r3, r1
 800358c:	80bb      	strh	r3, [r7, #4]
 800358e:	4613      	mov	r3, r2
 8003590:	807b      	strh	r3, [r7, #2]
  int32_t   decision;    /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 8003592:	887b      	ldrh	r3, [r7, #2]
 8003594:	005b      	lsls	r3, r3, #1
 8003596:	f1c3 0303 	rsb	r3, r3, #3
 800359a:	617b      	str	r3, [r7, #20]
  current_x = 0;
 800359c:	2300      	movs	r3, #0
 800359e:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 80035a0:	887b      	ldrh	r3, [r7, #2]
 80035a2:	60fb      	str	r3, [r7, #12]
  
  while (current_x <= current_y)
 80035a4:	e0c7      	b.n	8003736 <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	b29a      	uxth	r2, r3
 80035aa:	88fb      	ldrh	r3, [r7, #6]
 80035ac:	4413      	add	r3, r2
 80035ae:	b298      	uxth	r0, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	88ba      	ldrh	r2, [r7, #4]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	b299      	uxth	r1, r3
 80035ba:	4b64      	ldr	r3, [pc, #400]	; (800374c <BSP_LCD_DrawCircle+0x1cc>)
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	4c64      	ldr	r4, [pc, #400]	; (8003750 <BSP_LCD_DrawCircle+0x1d0>)
 80035c0:	4613      	mov	r3, r2
 80035c2:	005b      	lsls	r3, r3, #1
 80035c4:	4413      	add	r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	4423      	add	r3, r4
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	461a      	mov	r2, r3
 80035ce:	f000 f8c1 	bl	8003754 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	88fa      	ldrh	r2, [r7, #6]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	b298      	uxth	r0, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	b29b      	uxth	r3, r3
 80035e0:	88ba      	ldrh	r2, [r7, #4]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	b299      	uxth	r1, r3
 80035e6:	4b59      	ldr	r3, [pc, #356]	; (800374c <BSP_LCD_DrawCircle+0x1cc>)
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	4c59      	ldr	r4, [pc, #356]	; (8003750 <BSP_LCD_DrawCircle+0x1d0>)
 80035ec:	4613      	mov	r3, r2
 80035ee:	005b      	lsls	r3, r3, #1
 80035f0:	4413      	add	r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	4423      	add	r3, r4
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	461a      	mov	r2, r3
 80035fa:	f000 f8ab 	bl	8003754 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	b29a      	uxth	r2, r3
 8003602:	88fb      	ldrh	r3, [r7, #6]
 8003604:	4413      	add	r3, r2
 8003606:	b298      	uxth	r0, r3
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	b29b      	uxth	r3, r3
 800360c:	88ba      	ldrh	r2, [r7, #4]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	b299      	uxth	r1, r3
 8003612:	4b4e      	ldr	r3, [pc, #312]	; (800374c <BSP_LCD_DrawCircle+0x1cc>)
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	4c4e      	ldr	r4, [pc, #312]	; (8003750 <BSP_LCD_DrawCircle+0x1d0>)
 8003618:	4613      	mov	r3, r2
 800361a:	005b      	lsls	r3, r3, #1
 800361c:	4413      	add	r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	4423      	add	r3, r4
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	461a      	mov	r2, r3
 8003626:	f000 f895 	bl	8003754 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	b29b      	uxth	r3, r3
 800362e:	88fa      	ldrh	r2, [r7, #6]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	b298      	uxth	r0, r3
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	b29b      	uxth	r3, r3
 8003638:	88ba      	ldrh	r2, [r7, #4]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	b299      	uxth	r1, r3
 800363e:	4b43      	ldr	r3, [pc, #268]	; (800374c <BSP_LCD_DrawCircle+0x1cc>)
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	4c43      	ldr	r4, [pc, #268]	; (8003750 <BSP_LCD_DrawCircle+0x1d0>)
 8003644:	4613      	mov	r3, r2
 8003646:	005b      	lsls	r3, r3, #1
 8003648:	4413      	add	r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	4423      	add	r3, r4
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	461a      	mov	r2, r3
 8003652:	f000 f87f 	bl	8003754 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	b29a      	uxth	r2, r3
 800365a:	88fb      	ldrh	r3, [r7, #6]
 800365c:	4413      	add	r3, r2
 800365e:	b298      	uxth	r0, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	b29a      	uxth	r2, r3
 8003664:	88bb      	ldrh	r3, [r7, #4]
 8003666:	4413      	add	r3, r2
 8003668:	b299      	uxth	r1, r3
 800366a:	4b38      	ldr	r3, [pc, #224]	; (800374c <BSP_LCD_DrawCircle+0x1cc>)
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	4c38      	ldr	r4, [pc, #224]	; (8003750 <BSP_LCD_DrawCircle+0x1d0>)
 8003670:	4613      	mov	r3, r2
 8003672:	005b      	lsls	r3, r3, #1
 8003674:	4413      	add	r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	4423      	add	r3, r4
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	461a      	mov	r2, r3
 800367e:	f000 f869 	bl	8003754 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	b29b      	uxth	r3, r3
 8003686:	88fa      	ldrh	r2, [r7, #6]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	b298      	uxth	r0, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	b29a      	uxth	r2, r3
 8003690:	88bb      	ldrh	r3, [r7, #4]
 8003692:	4413      	add	r3, r2
 8003694:	b299      	uxth	r1, r3
 8003696:	4b2d      	ldr	r3, [pc, #180]	; (800374c <BSP_LCD_DrawCircle+0x1cc>)
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	4c2d      	ldr	r4, [pc, #180]	; (8003750 <BSP_LCD_DrawCircle+0x1d0>)
 800369c:	4613      	mov	r3, r2
 800369e:	005b      	lsls	r3, r3, #1
 80036a0:	4413      	add	r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	4423      	add	r3, r4
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	461a      	mov	r2, r3
 80036aa:	f000 f853 	bl	8003754 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	88fb      	ldrh	r3, [r7, #6]
 80036b4:	4413      	add	r3, r2
 80036b6:	b298      	uxth	r0, r3
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	b29a      	uxth	r2, r3
 80036bc:	88bb      	ldrh	r3, [r7, #4]
 80036be:	4413      	add	r3, r2
 80036c0:	b299      	uxth	r1, r3
 80036c2:	4b22      	ldr	r3, [pc, #136]	; (800374c <BSP_LCD_DrawCircle+0x1cc>)
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	4c22      	ldr	r4, [pc, #136]	; (8003750 <BSP_LCD_DrawCircle+0x1d0>)
 80036c8:	4613      	mov	r3, r2
 80036ca:	005b      	lsls	r3, r3, #1
 80036cc:	4413      	add	r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	4423      	add	r3, r4
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	461a      	mov	r2, r3
 80036d6:	f000 f83d 	bl	8003754 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	b29b      	uxth	r3, r3
 80036de:	88fa      	ldrh	r2, [r7, #6]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	b298      	uxth	r0, r3
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	b29a      	uxth	r2, r3
 80036e8:	88bb      	ldrh	r3, [r7, #4]
 80036ea:	4413      	add	r3, r2
 80036ec:	b299      	uxth	r1, r3
 80036ee:	4b17      	ldr	r3, [pc, #92]	; (800374c <BSP_LCD_DrawCircle+0x1cc>)
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	4c17      	ldr	r4, [pc, #92]	; (8003750 <BSP_LCD_DrawCircle+0x1d0>)
 80036f4:	4613      	mov	r3, r2
 80036f6:	005b      	lsls	r3, r3, #1
 80036f8:	4413      	add	r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	4423      	add	r3, r4
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	461a      	mov	r2, r3
 8003702:	f000 f827 	bl	8003754 <BSP_LCD_DrawPixel>
    
    if (decision < 0)
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	2b00      	cmp	r3, #0
 800370a:	da06      	bge.n	800371a <BSP_LCD_DrawCircle+0x19a>
    { 
      decision += (current_x << 2) + 6;
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	009a      	lsls	r2, r3, #2
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	4413      	add	r3, r2
 8003714:	3306      	adds	r3, #6
 8003716:	617b      	str	r3, [r7, #20]
 8003718:	e00a      	b.n	8003730 <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	009a      	lsls	r2, r3, #2
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	4413      	add	r3, r2
 8003726:	330a      	adds	r3, #10
 8003728:	617b      	str	r3, [r7, #20]
      current_y--;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	3b01      	subs	r3, #1
 800372e:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	3301      	adds	r3, #1
 8003734:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8003736:	693a      	ldr	r2, [r7, #16]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	429a      	cmp	r2, r3
 800373c:	f67f af33 	bls.w	80035a6 <BSP_LCD_DrawCircle+0x26>
  } 
}
 8003740:	bf00      	nop
 8003742:	bf00      	nop
 8003744:	371c      	adds	r7, #28
 8003746:	46bd      	mov	sp, r7
 8003748:	bd90      	pop	{r4, r7, pc}
 800374a:	bf00      	nop
 800374c:	20000b3c 	.word	0x20000b3c
 8003750:	20000b40 	.word	0x20000b40

08003754 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8003754:	b5b0      	push	{r4, r5, r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	4603      	mov	r3, r0
 800375c:	603a      	str	r2, [r7, #0]
 800375e:	80fb      	strh	r3, [r7, #6]
 8003760:	460b      	mov	r3, r1
 8003762:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003764:	4b1d      	ldr	r3, [pc, #116]	; (80037dc <BSP_LCD_DrawPixel+0x88>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a1d      	ldr	r2, [pc, #116]	; (80037e0 <BSP_LCD_DrawPixel+0x8c>)
 800376a:	2134      	movs	r1, #52	; 0x34
 800376c:	fb01 f303 	mul.w	r3, r1, r3
 8003770:	4413      	add	r3, r2
 8003772:	3348      	adds	r3, #72	; 0x48
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2b02      	cmp	r3, #2
 8003778:	d116      	bne.n	80037a8 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 800377a:	4b18      	ldr	r3, [pc, #96]	; (80037dc <BSP_LCD_DrawPixel+0x88>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a18      	ldr	r2, [pc, #96]	; (80037e0 <BSP_LCD_DrawPixel+0x8c>)
 8003780:	2134      	movs	r1, #52	; 0x34
 8003782:	fb01 f303 	mul.w	r3, r1, r3
 8003786:	4413      	add	r3, r2
 8003788:	335c      	adds	r3, #92	; 0x5c
 800378a:	681c      	ldr	r4, [r3, #0]
 800378c:	88bd      	ldrh	r5, [r7, #4]
 800378e:	f7ff fc81 	bl	8003094 <BSP_LCD_GetXSize>
 8003792:	4603      	mov	r3, r0
 8003794:	fb03 f205 	mul.w	r2, r3, r5
 8003798:	88fb      	ldrh	r3, [r7, #6]
 800379a:	4413      	add	r3, r2
 800379c:	005b      	lsls	r3, r3, #1
 800379e:	4423      	add	r3, r4
 80037a0:	683a      	ldr	r2, [r7, #0]
 80037a2:	b292      	uxth	r2, r2
 80037a4:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 80037a6:	e015      	b.n	80037d4 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80037a8:	4b0c      	ldr	r3, [pc, #48]	; (80037dc <BSP_LCD_DrawPixel+0x88>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a0c      	ldr	r2, [pc, #48]	; (80037e0 <BSP_LCD_DrawPixel+0x8c>)
 80037ae:	2134      	movs	r1, #52	; 0x34
 80037b0:	fb01 f303 	mul.w	r3, r1, r3
 80037b4:	4413      	add	r3, r2
 80037b6:	335c      	adds	r3, #92	; 0x5c
 80037b8:	681c      	ldr	r4, [r3, #0]
 80037ba:	88bd      	ldrh	r5, [r7, #4]
 80037bc:	f7ff fc6a 	bl	8003094 <BSP_LCD_GetXSize>
 80037c0:	4603      	mov	r3, r0
 80037c2:	fb03 f205 	mul.w	r2, r3, r5
 80037c6:	88fb      	ldrh	r3, [r7, #6]
 80037c8:	4413      	add	r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	4423      	add	r3, r4
 80037ce:	461a      	mov	r2, r3
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	6013      	str	r3, [r2, #0]
}
 80037d4:	bf00      	nop
 80037d6:	3708      	adds	r7, #8
 80037d8:	46bd      	mov	sp, r7
 80037da:	bdb0      	pop	{r4, r5, r7, pc}
 80037dc:	20000b3c 	.word	0x20000b3c
 80037e0:	20000a54 	.word	0x20000a54

080037e4 <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b086      	sub	sp, #24
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	4603      	mov	r3, r0
 80037ec:	80fb      	strh	r3, [r7, #6]
 80037ee:	460b      	mov	r3, r1
 80037f0:	80bb      	strh	r3, [r7, #4]
 80037f2:	4613      	mov	r3, r2
 80037f4:	807b      	strh	r3, [r7, #2]
  int32_t  decision;     /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 80037f6:	887b      	ldrh	r3, [r7, #2]
 80037f8:	005b      	lsls	r3, r3, #1
 80037fa:	f1c3 0303 	rsb	r3, r3, #3
 80037fe:	617b      	str	r3, [r7, #20]
  
  current_x = 0;
 8003800:	2300      	movs	r3, #0
 8003802:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8003804:	887b      	ldrh	r3, [r7, #2]
 8003806:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003808:	4b44      	ldr	r3, [pc, #272]	; (800391c <BSP_LCD_FillCircle+0x138>)
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	4944      	ldr	r1, [pc, #272]	; (8003920 <BSP_LCD_FillCircle+0x13c>)
 800380e:	4613      	mov	r3, r2
 8003810:	005b      	lsls	r3, r3, #1
 8003812:	4413      	add	r3, r2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	440b      	add	r3, r1
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4618      	mov	r0, r3
 800381c:	f7ff fcd2 	bl	80031c4 <BSP_LCD_SetTextColor>
  
  while (current_x <= current_y)
 8003820:	e061      	b.n	80038e6 <BSP_LCD_FillCircle+0x102>
  {
    if(current_y > 0) 
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d021      	beq.n	800386c <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	b29b      	uxth	r3, r3
 800382c:	88fa      	ldrh	r2, [r7, #6]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	b298      	uxth	r0, r3
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	b29a      	uxth	r2, r3
 8003836:	88bb      	ldrh	r3, [r7, #4]
 8003838:	4413      	add	r3, r2
 800383a:	b299      	uxth	r1, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	b29b      	uxth	r3, r3
 8003840:	005b      	lsls	r3, r3, #1
 8003842:	b29b      	uxth	r3, r3
 8003844:	461a      	mov	r2, r3
 8003846:	f7ff fe3d 	bl	80034c4 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	b29b      	uxth	r3, r3
 800384e:	88fa      	ldrh	r2, [r7, #6]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	b298      	uxth	r0, r3
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	b29b      	uxth	r3, r3
 8003858:	88ba      	ldrh	r2, [r7, #4]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	b299      	uxth	r1, r3
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	b29b      	uxth	r3, r3
 8003862:	005b      	lsls	r3, r3, #1
 8003864:	b29b      	uxth	r3, r3
 8003866:	461a      	mov	r2, r3
 8003868:	f7ff fe2c 	bl	80034c4 <BSP_LCD_DrawHLine>
    }
    
    if(current_x > 0) 
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d021      	beq.n	80038b6 <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	b29b      	uxth	r3, r3
 8003876:	88fa      	ldrh	r2, [r7, #6]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	b298      	uxth	r0, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	b29b      	uxth	r3, r3
 8003880:	88ba      	ldrh	r2, [r7, #4]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	b299      	uxth	r1, r3
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	b29b      	uxth	r3, r3
 800388a:	005b      	lsls	r3, r3, #1
 800388c:	b29b      	uxth	r3, r3
 800388e:	461a      	mov	r2, r3
 8003890:	f7ff fe18 	bl	80034c4 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	b29b      	uxth	r3, r3
 8003898:	88fa      	ldrh	r2, [r7, #6]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	b298      	uxth	r0, r3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	b29a      	uxth	r2, r3
 80038a2:	88bb      	ldrh	r3, [r7, #4]
 80038a4:	4413      	add	r3, r2
 80038a6:	b299      	uxth	r1, r3
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	005b      	lsls	r3, r3, #1
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	461a      	mov	r2, r3
 80038b2:	f7ff fe07 	bl	80034c4 <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	da06      	bge.n	80038ca <BSP_LCD_FillCircle+0xe6>
    { 
      decision += (current_x << 2) + 6;
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	009a      	lsls	r2, r3, #2
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	4413      	add	r3, r2
 80038c4:	3306      	adds	r3, #6
 80038c6:	617b      	str	r3, [r7, #20]
 80038c8:	e00a      	b.n	80038e0 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 80038ca:	693a      	ldr	r2, [r7, #16]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	009a      	lsls	r2, r3, #2
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	4413      	add	r3, r2
 80038d6:	330a      	adds	r3, #10
 80038d8:	617b      	str	r3, [r7, #20]
      current_y--;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	3b01      	subs	r3, #1
 80038de:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	3301      	adds	r3, #1
 80038e4:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d999      	bls.n	8003822 <BSP_LCD_FillCircle+0x3e>
  }
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80038ee:	4b0b      	ldr	r3, [pc, #44]	; (800391c <BSP_LCD_FillCircle+0x138>)
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	490b      	ldr	r1, [pc, #44]	; (8003920 <BSP_LCD_FillCircle+0x13c>)
 80038f4:	4613      	mov	r3, r2
 80038f6:	005b      	lsls	r3, r3, #1
 80038f8:	4413      	add	r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	440b      	add	r3, r1
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4618      	mov	r0, r3
 8003902:	f7ff fc5f 	bl	80031c4 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8003906:	887a      	ldrh	r2, [r7, #2]
 8003908:	88b9      	ldrh	r1, [r7, #4]
 800390a:	88fb      	ldrh	r3, [r7, #6]
 800390c:	4618      	mov	r0, r3
 800390e:	f7ff fe37 	bl	8003580 <BSP_LCD_DrawCircle>
}
 8003912:	bf00      	nop
 8003914:	3718      	adds	r7, #24
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	20000b3c 	.word	0x20000b3c
 8003920:	20000b40 	.word	0x20000b40

08003924 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8003928:	4b0a      	ldr	r3, [pc, #40]	; (8003954 <BSP_LCD_DisplayOn+0x30>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	699a      	ldr	r2, [r3, #24]
 800392e:	4b09      	ldr	r3, [pc, #36]	; (8003954 <BSP_LCD_DisplayOn+0x30>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f042 0201 	orr.w	r2, r2, #1
 8003936:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8003938:	2201      	movs	r2, #1
 800393a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800393e:	4806      	ldr	r0, [pc, #24]	; (8003958 <BSP_LCD_DisplayOn+0x34>)
 8003940:	f004 faaa 	bl	8007e98 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8003944:	2201      	movs	r2, #1
 8003946:	2108      	movs	r1, #8
 8003948:	4804      	ldr	r0, [pc, #16]	; (800395c <BSP_LCD_DisplayOn+0x38>)
 800394a:	f004 faa5 	bl	8007e98 <HAL_GPIO_WritePin>
}
 800394e:	bf00      	nop
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	20000a54 	.word	0x20000a54
 8003958:	40022000 	.word	0x40022000
 800395c:	40022800 	.word	0x40022800

08003960 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b090      	sub	sp, #64	; 0x40
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800396a:	4b64      	ldr	r3, [pc, #400]	; (8003afc <BSP_LCD_MspInit+0x19c>)
 800396c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800396e:	4a63      	ldr	r2, [pc, #396]	; (8003afc <BSP_LCD_MspInit+0x19c>)
 8003970:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003974:	6453      	str	r3, [r2, #68]	; 0x44
 8003976:	4b61      	ldr	r3, [pc, #388]	; (8003afc <BSP_LCD_MspInit+0x19c>)
 8003978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800397a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800397e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003980:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8003982:	4b5e      	ldr	r3, [pc, #376]	; (8003afc <BSP_LCD_MspInit+0x19c>)
 8003984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003986:	4a5d      	ldr	r2, [pc, #372]	; (8003afc <BSP_LCD_MspInit+0x19c>)
 8003988:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800398c:	6313      	str	r3, [r2, #48]	; 0x30
 800398e:	4b5b      	ldr	r3, [pc, #364]	; (8003afc <BSP_LCD_MspInit+0x19c>)
 8003990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003992:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003996:	627b      	str	r3, [r7, #36]	; 0x24
 8003998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800399a:	4b58      	ldr	r3, [pc, #352]	; (8003afc <BSP_LCD_MspInit+0x19c>)
 800399c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399e:	4a57      	ldr	r2, [pc, #348]	; (8003afc <BSP_LCD_MspInit+0x19c>)
 80039a0:	f043 0310 	orr.w	r3, r3, #16
 80039a4:	6313      	str	r3, [r2, #48]	; 0x30
 80039a6:	4b55      	ldr	r3, [pc, #340]	; (8003afc <BSP_LCD_MspInit+0x19c>)
 80039a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039aa:	f003 0310 	and.w	r3, r3, #16
 80039ae:	623b      	str	r3, [r7, #32]
 80039b0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80039b2:	4b52      	ldr	r3, [pc, #328]	; (8003afc <BSP_LCD_MspInit+0x19c>)
 80039b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b6:	4a51      	ldr	r2, [pc, #324]	; (8003afc <BSP_LCD_MspInit+0x19c>)
 80039b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039bc:	6313      	str	r3, [r2, #48]	; 0x30
 80039be:	4b4f      	ldr	r3, [pc, #316]	; (8003afc <BSP_LCD_MspInit+0x19c>)
 80039c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c6:	61fb      	str	r3, [r7, #28]
 80039c8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80039ca:	4b4c      	ldr	r3, [pc, #304]	; (8003afc <BSP_LCD_MspInit+0x19c>)
 80039cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ce:	4a4b      	ldr	r2, [pc, #300]	; (8003afc <BSP_LCD_MspInit+0x19c>)
 80039d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039d4:	6313      	str	r3, [r2, #48]	; 0x30
 80039d6:	4b49      	ldr	r3, [pc, #292]	; (8003afc <BSP_LCD_MspInit+0x19c>)
 80039d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039de:	61bb      	str	r3, [r7, #24]
 80039e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80039e2:	4b46      	ldr	r3, [pc, #280]	; (8003afc <BSP_LCD_MspInit+0x19c>)
 80039e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e6:	4a45      	ldr	r2, [pc, #276]	; (8003afc <BSP_LCD_MspInit+0x19c>)
 80039e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039ec:	6313      	str	r3, [r2, #48]	; 0x30
 80039ee:	4b43      	ldr	r3, [pc, #268]	; (8003afc <BSP_LCD_MspInit+0x19c>)
 80039f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039f6:	617b      	str	r3, [r7, #20]
 80039f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80039fa:	4b40      	ldr	r3, [pc, #256]	; (8003afc <BSP_LCD_MspInit+0x19c>)
 80039fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fe:	4a3f      	ldr	r2, [pc, #252]	; (8003afc <BSP_LCD_MspInit+0x19c>)
 8003a00:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a04:	6313      	str	r3, [r2, #48]	; 0x30
 8003a06:	4b3d      	ldr	r3, [pc, #244]	; (8003afc <BSP_LCD_MspInit+0x19c>)
 8003a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a0e:	613b      	str	r3, [r7, #16]
 8003a10:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8003a12:	4b3a      	ldr	r3, [pc, #232]	; (8003afc <BSP_LCD_MspInit+0x19c>)
 8003a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a16:	4a39      	ldr	r2, [pc, #228]	; (8003afc <BSP_LCD_MspInit+0x19c>)
 8003a18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a1e:	4b37      	ldr	r3, [pc, #220]	; (8003afc <BSP_LCD_MspInit+0x19c>)
 8003a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a26:	60fb      	str	r3, [r7, #12]
 8003a28:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8003a2a:	4b34      	ldr	r3, [pc, #208]	; (8003afc <BSP_LCD_MspInit+0x19c>)
 8003a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2e:	4a33      	ldr	r2, [pc, #204]	; (8003afc <BSP_LCD_MspInit+0x19c>)
 8003a30:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a34:	6313      	str	r3, [r2, #48]	; 0x30
 8003a36:	4b31      	ldr	r3, [pc, #196]	; (8003afc <BSP_LCD_MspInit+0x19c>)
 8003a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a3e:	60bb      	str	r3, [r7, #8]
 8003a40:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8003a42:	2310      	movs	r3, #16
 8003a44:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003a46:	2302      	movs	r3, #2
 8003a48:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003a4e:	2302      	movs	r3, #2
 8003a50:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8003a52:	230e      	movs	r3, #14
 8003a54:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003a56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	4828      	ldr	r0, [pc, #160]	; (8003b00 <BSP_LCD_MspInit+0x1a0>)
 8003a5e:	f003 ff4b 	bl	80078f8 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8003a62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a66:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003a68:	2302      	movs	r3, #2
 8003a6a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8003a6c:	2309      	movs	r3, #9
 8003a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003a70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a74:	4619      	mov	r1, r3
 8003a76:	4823      	ldr	r0, [pc, #140]	; (8003b04 <BSP_LCD_MspInit+0x1a4>)
 8003a78:	f003 ff3e 	bl	80078f8 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8003a7c:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8003a80:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003a82:	2302      	movs	r3, #2
 8003a84:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003a86:	230e      	movs	r3, #14
 8003a88:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8003a8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a8e:	4619      	mov	r1, r3
 8003a90:	481d      	ldr	r0, [pc, #116]	; (8003b08 <BSP_LCD_MspInit+0x1a8>)
 8003a92:	f003 ff31 	bl	80078f8 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8003a96:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8003a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003aa0:	230e      	movs	r3, #14
 8003aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8003aa4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	4818      	ldr	r0, [pc, #96]	; (8003b0c <BSP_LCD_MspInit+0x1ac>)
 8003aac:	f003 ff24 	bl	80078f8 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8003ab0:	23f7      	movs	r3, #247	; 0xf7
 8003ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003ab4:	2302      	movs	r3, #2
 8003ab6:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003ab8:	230e      	movs	r3, #14
 8003aba:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8003abc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	4813      	ldr	r0, [pc, #76]	; (8003b10 <BSP_LCD_MspInit+0x1b0>)
 8003ac4:	f003 ff18 	bl	80078f8 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8003ac8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003acc:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8003ad2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	480b      	ldr	r0, [pc, #44]	; (8003b08 <BSP_LCD_MspInit+0x1a8>)
 8003ada:	f003 ff0d 	bl	80078f8 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8003ade:	2308      	movs	r3, #8
 8003ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8003ae6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003aea:	4619      	mov	r1, r3
 8003aec:	4808      	ldr	r0, [pc, #32]	; (8003b10 <BSP_LCD_MspInit+0x1b0>)
 8003aee:	f003 ff03 	bl	80078f8 <HAL_GPIO_Init>
}
 8003af2:	bf00      	nop
 8003af4:	3740      	adds	r7, #64	; 0x40
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	40023800 	.word	0x40023800
 8003b00:	40021000 	.word	0x40021000
 8003b04:	40021800 	.word	0x40021800
 8003b08:	40022000 	.word	0x40022000
 8003b0c:	40022400 	.word	0x40022400
 8003b10:	40022800 	.word	0x40022800

08003b14 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003b1e:	4b0a      	ldr	r3, [pc, #40]	; (8003b48 <BSP_LCD_ClockConfig+0x34>)
 8003b20:	2208      	movs	r2, #8
 8003b22:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8003b24:	4b08      	ldr	r3, [pc, #32]	; (8003b48 <BSP_LCD_ClockConfig+0x34>)
 8003b26:	22c0      	movs	r2, #192	; 0xc0
 8003b28:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8003b2a:	4b07      	ldr	r3, [pc, #28]	; (8003b48 <BSP_LCD_ClockConfig+0x34>)
 8003b2c:	2205      	movs	r2, #5
 8003b2e:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8003b30:	4b05      	ldr	r3, [pc, #20]	; (8003b48 <BSP_LCD_ClockConfig+0x34>)
 8003b32:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003b36:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8003b38:	4803      	ldr	r0, [pc, #12]	; (8003b48 <BSP_LCD_ClockConfig+0x34>)
 8003b3a:	f006 f805 	bl	8009b48 <HAL_RCCEx_PeriphCLKConfig>
}
 8003b3e:	bf00      	nop
 8003b40:	3708      	adds	r7, #8
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	20000b58 	.word	0x20000b58

08003b4c <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b088      	sub	sp, #32
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	4603      	mov	r3, r0
 8003b54:	603a      	str	r2, [r7, #0]
 8003b56:	80fb      	strh	r3, [r7, #6]
 8003b58:	460b      	mov	r3, r1
 8003b5a:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	61fb      	str	r3, [r7, #28]
 8003b60:	2300      	movs	r3, #0
 8003b62:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8003b64:	4b53      	ldr	r3, [pc, #332]	; (8003cb4 <DrawChar+0x168>)
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	4953      	ldr	r1, [pc, #332]	; (8003cb8 <DrawChar+0x16c>)
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	005b      	lsls	r3, r3, #1
 8003b6e:	4413      	add	r3, r2
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	440b      	add	r3, r1
 8003b74:	3308      	adds	r3, #8
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	88db      	ldrh	r3, [r3, #6]
 8003b7a:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8003b7c:	4b4d      	ldr	r3, [pc, #308]	; (8003cb4 <DrawChar+0x168>)
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	494d      	ldr	r1, [pc, #308]	; (8003cb8 <DrawChar+0x16c>)
 8003b82:	4613      	mov	r3, r2
 8003b84:	005b      	lsls	r3, r3, #1
 8003b86:	4413      	add	r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	440b      	add	r3, r1
 8003b8c:	3308      	adds	r3, #8
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	889b      	ldrh	r3, [r3, #4]
 8003b92:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8003b94:	8a3b      	ldrh	r3, [r7, #16]
 8003b96:	3307      	adds	r3, #7
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	da00      	bge.n	8003b9e <DrawChar+0x52>
 8003b9c:	3307      	adds	r3, #7
 8003b9e:	10db      	asrs	r3, r3, #3
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	00db      	lsls	r3, r3, #3
 8003ba4:	b2da      	uxtb	r2, r3
 8003ba6:	8a3b      	ldrh	r3, [r7, #16]
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8003bae:	2300      	movs	r3, #0
 8003bb0:	61fb      	str	r3, [r7, #28]
 8003bb2:	e076      	b.n	8003ca2 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8003bb4:	8a3b      	ldrh	r3, [r7, #16]
 8003bb6:	3307      	adds	r3, #7
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	da00      	bge.n	8003bbe <DrawChar+0x72>
 8003bbc:	3307      	adds	r3, #7
 8003bbe:	10db      	asrs	r3, r3, #3
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	fb02 f303 	mul.w	r3, r2, r3
 8003bc8:	683a      	ldr	r2, [r7, #0]
 8003bca:	4413      	add	r3, r2
 8003bcc:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8003bce:	8a3b      	ldrh	r3, [r7, #16]
 8003bd0:	3307      	adds	r3, #7
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	da00      	bge.n	8003bd8 <DrawChar+0x8c>
 8003bd6:	3307      	adds	r3, #7
 8003bd8:	10db      	asrs	r3, r3, #3
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d002      	beq.n	8003be4 <DrawChar+0x98>
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d004      	beq.n	8003bec <DrawChar+0xa0>
 8003be2:	e00c      	b.n	8003bfe <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	617b      	str	r3, [r7, #20]
      break;
 8003bea:	e016      	b.n	8003c1a <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	021b      	lsls	r3, r3, #8
 8003bf2:	68ba      	ldr	r2, [r7, #8]
 8003bf4:	3201      	adds	r2, #1
 8003bf6:	7812      	ldrb	r2, [r2, #0]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	617b      	str	r3, [r7, #20]
      break;
 8003bfc:	e00d      	b.n	8003c1a <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	041a      	lsls	r2, r3, #16
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	3301      	adds	r3, #1
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	021b      	lsls	r3, r3, #8
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	68ba      	ldr	r2, [r7, #8]
 8003c10:	3202      	adds	r2, #2
 8003c12:	7812      	ldrb	r2, [r2, #0]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	617b      	str	r3, [r7, #20]
      break;
 8003c18:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	61bb      	str	r3, [r7, #24]
 8003c1e:	e036      	b.n	8003c8e <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003c20:	8a3a      	ldrh	r2, [r7, #16]
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	1ad2      	subs	r2, r2, r3
 8003c26:	7bfb      	ldrb	r3, [r7, #15]
 8003c28:	4413      	add	r3, r2
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c32:	461a      	mov	r2, r3
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	4013      	ands	r3, r2
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d012      	beq.n	8003c62 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	b29a      	uxth	r2, r3
 8003c40:	88fb      	ldrh	r3, [r7, #6]
 8003c42:	4413      	add	r3, r2
 8003c44:	b298      	uxth	r0, r3
 8003c46:	4b1b      	ldr	r3, [pc, #108]	; (8003cb4 <DrawChar+0x168>)
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	491b      	ldr	r1, [pc, #108]	; (8003cb8 <DrawChar+0x16c>)
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	005b      	lsls	r3, r3, #1
 8003c50:	4413      	add	r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	440b      	add	r3, r1
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	88bb      	ldrh	r3, [r7, #4]
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	f7ff fd7a 	bl	8003754 <BSP_LCD_DrawPixel>
 8003c60:	e012      	b.n	8003c88 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	b29a      	uxth	r2, r3
 8003c66:	88fb      	ldrh	r3, [r7, #6]
 8003c68:	4413      	add	r3, r2
 8003c6a:	b298      	uxth	r0, r3
 8003c6c:	4b11      	ldr	r3, [pc, #68]	; (8003cb4 <DrawChar+0x168>)
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	4911      	ldr	r1, [pc, #68]	; (8003cb8 <DrawChar+0x16c>)
 8003c72:	4613      	mov	r3, r2
 8003c74:	005b      	lsls	r3, r3, #1
 8003c76:	4413      	add	r3, r2
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	440b      	add	r3, r1
 8003c7c:	3304      	adds	r3, #4
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	88bb      	ldrh	r3, [r7, #4]
 8003c82:	4619      	mov	r1, r3
 8003c84:	f7ff fd66 	bl	8003754 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	3301      	adds	r3, #1
 8003c8c:	61bb      	str	r3, [r7, #24]
 8003c8e:	8a3b      	ldrh	r3, [r7, #16]
 8003c90:	69ba      	ldr	r2, [r7, #24]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d3c4      	bcc.n	8003c20 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8003c96:	88bb      	ldrh	r3, [r7, #4]
 8003c98:	3301      	adds	r3, #1
 8003c9a:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	61fb      	str	r3, [r7, #28]
 8003ca2:	8a7b      	ldrh	r3, [r7, #18]
 8003ca4:	69fa      	ldr	r2, [r7, #28]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d384      	bcc.n	8003bb4 <DrawChar+0x68>
  }
}
 8003caa:	bf00      	nop
 8003cac:	bf00      	nop
 8003cae:	3720      	adds	r7, #32
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	20000b3c 	.word	0x20000b3c
 8003cb8:	20000b40 	.word	0x20000b40

08003cbc <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b086      	sub	sp, #24
 8003cc0:	af02      	add	r7, sp, #8
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	607a      	str	r2, [r7, #4]
 8003cc8:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8003cca:	4b1e      	ldr	r3, [pc, #120]	; (8003d44 <LL_FillBuffer+0x88>)
 8003ccc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003cd0:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003cd2:	4b1d      	ldr	r3, [pc, #116]	; (8003d48 <LL_FillBuffer+0x8c>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a1d      	ldr	r2, [pc, #116]	; (8003d4c <LL_FillBuffer+0x90>)
 8003cd8:	2134      	movs	r1, #52	; 0x34
 8003cda:	fb01 f303 	mul.w	r3, r1, r3
 8003cde:	4413      	add	r3, r2
 8003ce0:	3348      	adds	r3, #72	; 0x48
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d103      	bne.n	8003cf0 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8003ce8:	4b16      	ldr	r3, [pc, #88]	; (8003d44 <LL_FillBuffer+0x88>)
 8003cea:	2202      	movs	r2, #2
 8003cec:	609a      	str	r2, [r3, #8]
 8003cee:	e002      	b.n	8003cf6 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003cf0:	4b14      	ldr	r3, [pc, #80]	; (8003d44 <LL_FillBuffer+0x88>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8003cf6:	4a13      	ldr	r2, [pc, #76]	; (8003d44 <LL_FillBuffer+0x88>)
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8003cfc:	4b11      	ldr	r3, [pc, #68]	; (8003d44 <LL_FillBuffer+0x88>)
 8003cfe:	4a14      	ldr	r2, [pc, #80]	; (8003d50 <LL_FillBuffer+0x94>)
 8003d00:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8003d02:	4810      	ldr	r0, [pc, #64]	; (8003d44 <LL_FillBuffer+0x88>)
 8003d04:	f003 fb6c 	bl	80073e0 <HAL_DMA2D_Init>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d115      	bne.n	8003d3a <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8003d0e:	68f9      	ldr	r1, [r7, #12]
 8003d10:	480c      	ldr	r0, [pc, #48]	; (8003d44 <LL_FillBuffer+0x88>)
 8003d12:	f003 fcc3 	bl	800769c <HAL_DMA2D_ConfigLayer>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d10e      	bne.n	8003d3a <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003d1c:	68ba      	ldr	r2, [r7, #8]
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	9300      	str	r3, [sp, #0]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	69f9      	ldr	r1, [r7, #28]
 8003d26:	4807      	ldr	r0, [pc, #28]	; (8003d44 <LL_FillBuffer+0x88>)
 8003d28:	f003 fba4 	bl	8007474 <HAL_DMA2D_Start>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d103      	bne.n	8003d3a <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8003d32:	210a      	movs	r1, #10
 8003d34:	4803      	ldr	r0, [pc, #12]	; (8003d44 <LL_FillBuffer+0x88>)
 8003d36:	f003 fbc8 	bl	80074ca <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003d3a:	bf00      	nop
 8003d3c:	3710      	adds	r7, #16
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	20000afc 	.word	0x20000afc
 8003d48:	20000b3c 	.word	0x20000b3c
 8003d4c:	20000a54 	.word	0x20000a54
 8003d50:	4002b000 	.word	0x4002b000

08003d54 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8003d54:	b580      	push	{r7, lr}
 8003d56:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003d58:	4b29      	ldr	r3, [pc, #164]	; (8003e00 <BSP_SDRAM_Init+0xac>)
 8003d5a:	4a2a      	ldr	r2, [pc, #168]	; (8003e04 <BSP_SDRAM_Init+0xb0>)
 8003d5c:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8003d5e:	4b2a      	ldr	r3, [pc, #168]	; (8003e08 <BSP_SDRAM_Init+0xb4>)
 8003d60:	2202      	movs	r2, #2
 8003d62:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8003d64:	4b28      	ldr	r3, [pc, #160]	; (8003e08 <BSP_SDRAM_Init+0xb4>)
 8003d66:	2207      	movs	r2, #7
 8003d68:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8003d6a:	4b27      	ldr	r3, [pc, #156]	; (8003e08 <BSP_SDRAM_Init+0xb4>)
 8003d6c:	2204      	movs	r2, #4
 8003d6e:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8003d70:	4b25      	ldr	r3, [pc, #148]	; (8003e08 <BSP_SDRAM_Init+0xb4>)
 8003d72:	2207      	movs	r2, #7
 8003d74:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8003d76:	4b24      	ldr	r3, [pc, #144]	; (8003e08 <BSP_SDRAM_Init+0xb4>)
 8003d78:	2202      	movs	r2, #2
 8003d7a:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8003d7c:	4b22      	ldr	r3, [pc, #136]	; (8003e08 <BSP_SDRAM_Init+0xb4>)
 8003d7e:	2202      	movs	r2, #2
 8003d80:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8003d82:	4b21      	ldr	r3, [pc, #132]	; (8003e08 <BSP_SDRAM_Init+0xb4>)
 8003d84:	2202      	movs	r2, #2
 8003d86:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8003d88:	4b1d      	ldr	r3, [pc, #116]	; (8003e00 <BSP_SDRAM_Init+0xac>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003d8e:	4b1c      	ldr	r3, [pc, #112]	; (8003e00 <BSP_SDRAM_Init+0xac>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003d94:	4b1a      	ldr	r3, [pc, #104]	; (8003e00 <BSP_SDRAM_Init+0xac>)
 8003d96:	2204      	movs	r2, #4
 8003d98:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003d9a:	4b19      	ldr	r3, [pc, #100]	; (8003e00 <BSP_SDRAM_Init+0xac>)
 8003d9c:	2210      	movs	r2, #16
 8003d9e:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003da0:	4b17      	ldr	r3, [pc, #92]	; (8003e00 <BSP_SDRAM_Init+0xac>)
 8003da2:	2240      	movs	r2, #64	; 0x40
 8003da4:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8003da6:	4b16      	ldr	r3, [pc, #88]	; (8003e00 <BSP_SDRAM_Init+0xac>)
 8003da8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003dac:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003dae:	4b14      	ldr	r3, [pc, #80]	; (8003e00 <BSP_SDRAM_Init+0xac>)
 8003db0:	2200      	movs	r2, #0
 8003db2:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003db4:	4b12      	ldr	r3, [pc, #72]	; (8003e00 <BSP_SDRAM_Init+0xac>)
 8003db6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003dba:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8003dbc:	4b10      	ldr	r3, [pc, #64]	; (8003e00 <BSP_SDRAM_Init+0xac>)
 8003dbe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003dc2:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8003dc4:	4b0e      	ldr	r3, [pc, #56]	; (8003e00 <BSP_SDRAM_Init+0xac>)
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8003dca:	2100      	movs	r1, #0
 8003dcc:	480c      	ldr	r0, [pc, #48]	; (8003e00 <BSP_SDRAM_Init+0xac>)
 8003dce:	f000 f87f 	bl	8003ed0 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8003dd2:	490d      	ldr	r1, [pc, #52]	; (8003e08 <BSP_SDRAM_Init+0xb4>)
 8003dd4:	480a      	ldr	r0, [pc, #40]	; (8003e00 <BSP_SDRAM_Init+0xac>)
 8003dd6:	f008 f971 	bl	800c0bc <HAL_SDRAM_Init>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d003      	beq.n	8003de8 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003de0:	4b0a      	ldr	r3, [pc, #40]	; (8003e0c <BSP_SDRAM_Init+0xb8>)
 8003de2:	2201      	movs	r2, #1
 8003de4:	701a      	strb	r2, [r3, #0]
 8003de6:	e002      	b.n	8003dee <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003de8:	4b08      	ldr	r3, [pc, #32]	; (8003e0c <BSP_SDRAM_Init+0xb8>)
 8003dea:	2200      	movs	r2, #0
 8003dec:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8003dee:	f240 6003 	movw	r0, #1539	; 0x603
 8003df2:	f000 f80d 	bl	8003e10 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8003df6:	4b05      	ldr	r3, [pc, #20]	; (8003e0c <BSP_SDRAM_Init+0xb8>)
 8003df8:	781b      	ldrb	r3, [r3, #0]
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	20000bdc 	.word	0x20000bdc
 8003e04:	a0000140 	.word	0xa0000140
 8003e08:	20000c10 	.word	0x20000c10
 8003e0c:	20000040 	.word	0x20000040

08003e10 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8003e1c:	4b2a      	ldr	r3, [pc, #168]	; (8003ec8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e1e:	2201      	movs	r2, #1
 8003e20:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003e22:	4b29      	ldr	r3, [pc, #164]	; (8003ec8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e24:	2210      	movs	r2, #16
 8003e26:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003e28:	4b27      	ldr	r3, [pc, #156]	; (8003ec8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003e2e:	4b26      	ldr	r3, [pc, #152]	; (8003ec8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003e34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e38:	4923      	ldr	r1, [pc, #140]	; (8003ec8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e3a:	4824      	ldr	r0, [pc, #144]	; (8003ecc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003e3c:	f008 f972 	bl	800c124 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003e40:	2001      	movs	r0, #1
 8003e42:	f002 fdc3 	bl	80069cc <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8003e46:	4b20      	ldr	r3, [pc, #128]	; (8003ec8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e48:	2202      	movs	r2, #2
 8003e4a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003e4c:	4b1e      	ldr	r3, [pc, #120]	; (8003ec8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e4e:	2210      	movs	r2, #16
 8003e50:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003e52:	4b1d      	ldr	r3, [pc, #116]	; (8003ec8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e54:	2201      	movs	r2, #1
 8003e56:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003e58:	4b1b      	ldr	r3, [pc, #108]	; (8003ec8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8003e5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e62:	4919      	ldr	r1, [pc, #100]	; (8003ec8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e64:	4819      	ldr	r0, [pc, #100]	; (8003ecc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003e66:	f008 f95d 	bl	800c124 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003e6a:	4b17      	ldr	r3, [pc, #92]	; (8003ec8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e6c:	2203      	movs	r2, #3
 8003e6e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003e70:	4b15      	ldr	r3, [pc, #84]	; (8003ec8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e72:	2210      	movs	r2, #16
 8003e74:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8003e76:	4b14      	ldr	r3, [pc, #80]	; (8003ec8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e78:	2208      	movs	r2, #8
 8003e7a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003e7c:	4b12      	ldr	r3, [pc, #72]	; (8003ec8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003e82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e86:	4910      	ldr	r1, [pc, #64]	; (8003ec8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e88:	4810      	ldr	r0, [pc, #64]	; (8003ecc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003e8a:	f008 f94b 	bl	800c124 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8003e8e:	f44f 7308 	mov.w	r3, #544	; 0x220
 8003e92:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8003e94:	4b0c      	ldr	r3, [pc, #48]	; (8003ec8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e96:	2204      	movs	r2, #4
 8003e98:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003e9a:	4b0b      	ldr	r3, [pc, #44]	; (8003ec8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e9c:	2210      	movs	r2, #16
 8003e9e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003ea0:	4b09      	ldr	r3, [pc, #36]	; (8003ec8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	4a07      	ldr	r2, [pc, #28]	; (8003ec8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003eaa:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003eac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003eb0:	4905      	ldr	r1, [pc, #20]	; (8003ec8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003eb2:	4806      	ldr	r0, [pc, #24]	; (8003ecc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003eb4:	f008 f936 	bl	800c124 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8003eb8:	6879      	ldr	r1, [r7, #4]
 8003eba:	4804      	ldr	r0, [pc, #16]	; (8003ecc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003ebc:	f008 f967 	bl	800c18e <HAL_SDRAM_ProgramRefreshRate>
}
 8003ec0:	bf00      	nop
 8003ec2:	3710      	adds	r7, #16
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	20000c2c 	.word	0x20000c2c
 8003ecc:	20000bdc 	.word	0x20000bdc

08003ed0 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b090      	sub	sp, #64	; 0x40
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003eda:	4b70      	ldr	r3, [pc, #448]	; (800409c <BSP_SDRAM_MspInit+0x1cc>)
 8003edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ede:	4a6f      	ldr	r2, [pc, #444]	; (800409c <BSP_SDRAM_MspInit+0x1cc>)
 8003ee0:	f043 0301 	orr.w	r3, r3, #1
 8003ee4:	6393      	str	r3, [r2, #56]	; 0x38
 8003ee6:	4b6d      	ldr	r3, [pc, #436]	; (800409c <BSP_SDRAM_MspInit+0x1cc>)
 8003ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eea:	f003 0301 	and.w	r3, r3, #1
 8003eee:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8003ef2:	4b6a      	ldr	r3, [pc, #424]	; (800409c <BSP_SDRAM_MspInit+0x1cc>)
 8003ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef6:	4a69      	ldr	r2, [pc, #420]	; (800409c <BSP_SDRAM_MspInit+0x1cc>)
 8003ef8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003efc:	6313      	str	r3, [r2, #48]	; 0x30
 8003efe:	4b67      	ldr	r3, [pc, #412]	; (800409c <BSP_SDRAM_MspInit+0x1cc>)
 8003f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f06:	627b      	str	r3, [r7, #36]	; 0x24
 8003f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f0a:	4b64      	ldr	r3, [pc, #400]	; (800409c <BSP_SDRAM_MspInit+0x1cc>)
 8003f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0e:	4a63      	ldr	r2, [pc, #396]	; (800409c <BSP_SDRAM_MspInit+0x1cc>)
 8003f10:	f043 0304 	orr.w	r3, r3, #4
 8003f14:	6313      	str	r3, [r2, #48]	; 0x30
 8003f16:	4b61      	ldr	r3, [pc, #388]	; (800409c <BSP_SDRAM_MspInit+0x1cc>)
 8003f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1a:	f003 0304 	and.w	r3, r3, #4
 8003f1e:	623b      	str	r3, [r7, #32]
 8003f20:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f22:	4b5e      	ldr	r3, [pc, #376]	; (800409c <BSP_SDRAM_MspInit+0x1cc>)
 8003f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f26:	4a5d      	ldr	r2, [pc, #372]	; (800409c <BSP_SDRAM_MspInit+0x1cc>)
 8003f28:	f043 0308 	orr.w	r3, r3, #8
 8003f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f2e:	4b5b      	ldr	r3, [pc, #364]	; (800409c <BSP_SDRAM_MspInit+0x1cc>)
 8003f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f32:	f003 0308 	and.w	r3, r3, #8
 8003f36:	61fb      	str	r3, [r7, #28]
 8003f38:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003f3a:	4b58      	ldr	r3, [pc, #352]	; (800409c <BSP_SDRAM_MspInit+0x1cc>)
 8003f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3e:	4a57      	ldr	r2, [pc, #348]	; (800409c <BSP_SDRAM_MspInit+0x1cc>)
 8003f40:	f043 0310 	orr.w	r3, r3, #16
 8003f44:	6313      	str	r3, [r2, #48]	; 0x30
 8003f46:	4b55      	ldr	r3, [pc, #340]	; (800409c <BSP_SDRAM_MspInit+0x1cc>)
 8003f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4a:	f003 0310 	and.w	r3, r3, #16
 8003f4e:	61bb      	str	r3, [r7, #24]
 8003f50:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003f52:	4b52      	ldr	r3, [pc, #328]	; (800409c <BSP_SDRAM_MspInit+0x1cc>)
 8003f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f56:	4a51      	ldr	r2, [pc, #324]	; (800409c <BSP_SDRAM_MspInit+0x1cc>)
 8003f58:	f043 0320 	orr.w	r3, r3, #32
 8003f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f5e:	4b4f      	ldr	r3, [pc, #316]	; (800409c <BSP_SDRAM_MspInit+0x1cc>)
 8003f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f62:	f003 0320 	and.w	r3, r3, #32
 8003f66:	617b      	str	r3, [r7, #20]
 8003f68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003f6a:	4b4c      	ldr	r3, [pc, #304]	; (800409c <BSP_SDRAM_MspInit+0x1cc>)
 8003f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6e:	4a4b      	ldr	r2, [pc, #300]	; (800409c <BSP_SDRAM_MspInit+0x1cc>)
 8003f70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f74:	6313      	str	r3, [r2, #48]	; 0x30
 8003f76:	4b49      	ldr	r3, [pc, #292]	; (800409c <BSP_SDRAM_MspInit+0x1cc>)
 8003f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f7e:	613b      	str	r3, [r7, #16]
 8003f80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003f82:	4b46      	ldr	r3, [pc, #280]	; (800409c <BSP_SDRAM_MspInit+0x1cc>)
 8003f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f86:	4a45      	ldr	r2, [pc, #276]	; (800409c <BSP_SDRAM_MspInit+0x1cc>)
 8003f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f8e:	4b43      	ldr	r3, [pc, #268]	; (800409c <BSP_SDRAM_MspInit+0x1cc>)
 8003f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f96:	60fb      	str	r3, [r7, #12]
 8003f98:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003f9a:	2302      	movs	r3, #2
 8003f9c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003fa2:	2302      	movs	r3, #2
 8003fa4:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8003fa6:	230c      	movs	r3, #12
 8003fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8003faa:	2308      	movs	r3, #8
 8003fac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8003fae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	483a      	ldr	r0, [pc, #232]	; (80040a0 <BSP_SDRAM_MspInit+0x1d0>)
 8003fb6:	f003 fc9f 	bl	80078f8 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8003fba:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003fc0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	4837      	ldr	r0, [pc, #220]	; (80040a4 <BSP_SDRAM_MspInit+0x1d4>)
 8003fc8:	f003 fc96 	bl	80078f8 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8003fcc:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003fd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	4833      	ldr	r0, [pc, #204]	; (80040a8 <BSP_SDRAM_MspInit+0x1d8>)
 8003fda:	f003 fc8d 	bl	80078f8 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8003fde:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8003fe4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003fe8:	4619      	mov	r1, r3
 8003fea:	4830      	ldr	r0, [pc, #192]	; (80040ac <BSP_SDRAM_MspInit+0x1dc>)
 8003fec:	f003 fc84 	bl	80078f8 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8003ff0:	f248 1333 	movw	r3, #33075	; 0x8133
 8003ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003ff6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	482c      	ldr	r0, [pc, #176]	; (80040b0 <BSP_SDRAM_MspInit+0x1e0>)
 8003ffe:	f003 fc7b 	bl	80078f8 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8004002:	2328      	movs	r3, #40	; 0x28
 8004004:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8004006:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800400a:	4619      	mov	r1, r3
 800400c:	4829      	ldr	r0, [pc, #164]	; (80040b4 <BSP_SDRAM_MspInit+0x1e4>)
 800400e:	f003 fc73 	bl	80078f8 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8004012:	4b29      	ldr	r3, [pc, #164]	; (80040b8 <BSP_SDRAM_MspInit+0x1e8>)
 8004014:	2200      	movs	r2, #0
 8004016:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8004018:	4b27      	ldr	r3, [pc, #156]	; (80040b8 <BSP_SDRAM_MspInit+0x1e8>)
 800401a:	2280      	movs	r2, #128	; 0x80
 800401c:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800401e:	4b26      	ldr	r3, [pc, #152]	; (80040b8 <BSP_SDRAM_MspInit+0x1e8>)
 8004020:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004024:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8004026:	4b24      	ldr	r3, [pc, #144]	; (80040b8 <BSP_SDRAM_MspInit+0x1e8>)
 8004028:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800402c:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800402e:	4b22      	ldr	r3, [pc, #136]	; (80040b8 <BSP_SDRAM_MspInit+0x1e8>)
 8004030:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004034:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8004036:	4b20      	ldr	r3, [pc, #128]	; (80040b8 <BSP_SDRAM_MspInit+0x1e8>)
 8004038:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800403c:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 800403e:	4b1e      	ldr	r3, [pc, #120]	; (80040b8 <BSP_SDRAM_MspInit+0x1e8>)
 8004040:	2200      	movs	r2, #0
 8004042:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8004044:	4b1c      	ldr	r3, [pc, #112]	; (80040b8 <BSP_SDRAM_MspInit+0x1e8>)
 8004046:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800404a:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 800404c:	4b1a      	ldr	r3, [pc, #104]	; (80040b8 <BSP_SDRAM_MspInit+0x1e8>)
 800404e:	2200      	movs	r2, #0
 8004050:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004052:	4b19      	ldr	r3, [pc, #100]	; (80040b8 <BSP_SDRAM_MspInit+0x1e8>)
 8004054:	2203      	movs	r2, #3
 8004056:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8004058:	4b17      	ldr	r3, [pc, #92]	; (80040b8 <BSP_SDRAM_MspInit+0x1e8>)
 800405a:	2200      	movs	r2, #0
 800405c:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800405e:	4b16      	ldr	r3, [pc, #88]	; (80040b8 <BSP_SDRAM_MspInit+0x1e8>)
 8004060:	2200      	movs	r2, #0
 8004062:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8004064:	4b14      	ldr	r3, [pc, #80]	; (80040b8 <BSP_SDRAM_MspInit+0x1e8>)
 8004066:	4a15      	ldr	r2, [pc, #84]	; (80040bc <BSP_SDRAM_MspInit+0x1ec>)
 8004068:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a12      	ldr	r2, [pc, #72]	; (80040b8 <BSP_SDRAM_MspInit+0x1e8>)
 800406e:	631a      	str	r2, [r3, #48]	; 0x30
 8004070:	4a11      	ldr	r2, [pc, #68]	; (80040b8 <BSP_SDRAM_MspInit+0x1e8>)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8004076:	4810      	ldr	r0, [pc, #64]	; (80040b8 <BSP_SDRAM_MspInit+0x1e8>)
 8004078:	f002 fe5c 	bl	8006d34 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 800407c:	480e      	ldr	r0, [pc, #56]	; (80040b8 <BSP_SDRAM_MspInit+0x1e8>)
 800407e:	f002 fdab 	bl	8006bd8 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8004082:	2200      	movs	r2, #0
 8004084:	210f      	movs	r1, #15
 8004086:	2038      	movs	r0, #56	; 0x38
 8004088:	f002 fd7c 	bl	8006b84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 800408c:	2038      	movs	r0, #56	; 0x38
 800408e:	f002 fd95 	bl	8006bbc <HAL_NVIC_EnableIRQ>
}
 8004092:	bf00      	nop
 8004094:	3740      	adds	r7, #64	; 0x40
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	40023800 	.word	0x40023800
 80040a0:	40020800 	.word	0x40020800
 80040a4:	40020c00 	.word	0x40020c00
 80040a8:	40021000 	.word	0x40021000
 80040ac:	40021400 	.word	0x40021400
 80040b0:	40021800 	.word	0x40021800
 80040b4:	40021c00 	.word	0x40021c00
 80040b8:	20000c3c 	.word	0x20000c3c
 80040bc:	40026410 	.word	0x40026410

080040c0 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	4603      	mov	r3, r0
 80040c8:	460a      	mov	r2, r1
 80040ca:	80fb      	strh	r3, [r7, #6]
 80040cc:	4613      	mov	r3, r2
 80040ce:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 80040d0:	2300      	movs	r3, #0
 80040d2:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 80040d4:	4a14      	ldr	r2, [pc, #80]	; (8004128 <BSP_TS_Init+0x68>)
 80040d6:	88fb      	ldrh	r3, [r7, #6]
 80040d8:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 80040da:	4a14      	ldr	r2, [pc, #80]	; (800412c <BSP_TS_Init+0x6c>)
 80040dc:	88bb      	ldrh	r3, [r7, #4]
 80040de:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 80040e0:	4b13      	ldr	r3, [pc, #76]	; (8004130 <BSP_TS_Init+0x70>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2070      	movs	r0, #112	; 0x70
 80040e6:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 80040e8:	4b11      	ldr	r3, [pc, #68]	; (8004130 <BSP_TS_Init+0x70>)
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	2070      	movs	r0, #112	; 0x70
 80040ee:	4798      	blx	r3
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b51      	cmp	r3, #81	; 0x51
 80040f4:	d111      	bne.n	800411a <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 80040f6:	4b0f      	ldr	r3, [pc, #60]	; (8004134 <BSP_TS_Init+0x74>)
 80040f8:	4a0d      	ldr	r2, [pc, #52]	; (8004130 <BSP_TS_Init+0x70>)
 80040fa:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 80040fc:	4b0e      	ldr	r3, [pc, #56]	; (8004138 <BSP_TS_Init+0x78>)
 80040fe:	2270      	movs	r2, #112	; 0x70
 8004100:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8004102:	4b0e      	ldr	r3, [pc, #56]	; (800413c <BSP_TS_Init+0x7c>)
 8004104:	2208      	movs	r2, #8
 8004106:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8004108:	4b0a      	ldr	r3, [pc, #40]	; (8004134 <BSP_TS_Init+0x74>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	4a0a      	ldr	r2, [pc, #40]	; (8004138 <BSP_TS_Init+0x78>)
 8004110:	7812      	ldrb	r2, [r2, #0]
 8004112:	b292      	uxth	r2, r2
 8004114:	4610      	mov	r0, r2
 8004116:	4798      	blx	r3
 8004118:	e001      	b.n	800411e <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 800411a:	2303      	movs	r3, #3
 800411c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800411e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004120:	4618      	mov	r0, r3
 8004122:	3710      	adds	r7, #16
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	20000ca0 	.word	0x20000ca0
 800412c:	20000ca2 	.word	0x20000ca2
 8004130:	20000000 	.word	0x20000000
 8004134:	20000c9c 	.word	0x20000c9c
 8004138:	20000ca5 	.word	0x20000ca5
 800413c:	20000ca4 	.word	0x20000ca4

08004140 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8004140:	b590      	push	{r4, r7, lr}
 8004142:	b097      	sub	sp, #92	; 0x5c
 8004144:	af02      	add	r7, sp, #8
 8004146:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8004148:	2300      	movs	r3, #0
 800414a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 800414e:	2300      	movs	r3, #0
 8004150:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 8004152:	2300      	movs	r3, #0
 8004154:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 8004156:	2300      	movs	r3, #0
 8004158:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 800415a:	4bb4      	ldr	r3, [pc, #720]	; (800442c <BSP_TS_GetState+0x2ec>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	4ab3      	ldr	r2, [pc, #716]	; (8004430 <BSP_TS_GetState+0x2f0>)
 8004162:	7812      	ldrb	r2, [r2, #0]
 8004164:	b292      	uxth	r2, r2
 8004166:	4610      	mov	r0, r2
 8004168:	4798      	blx	r3
 800416a:	4603      	mov	r3, r0
 800416c:	461a      	mov	r2, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	2b00      	cmp	r3, #0
 8004178:	f000 8196 	beq.w	80044a8 <BSP_TS_GetState+0x368>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 800417c:	2300      	movs	r3, #0
 800417e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004180:	e185      	b.n	800448e <BSP_TS_GetState+0x34e>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 8004182:	4baa      	ldr	r3, [pc, #680]	; (800442c <BSP_TS_GetState+0x2ec>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	695b      	ldr	r3, [r3, #20]
 8004188:	4aa9      	ldr	r2, [pc, #676]	; (8004430 <BSP_TS_GetState+0x2f0>)
 800418a:	7812      	ldrb	r2, [r2, #0]
 800418c:	b290      	uxth	r0, r2
 800418e:	f107 0120 	add.w	r1, r7, #32
 8004192:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004194:	0052      	lsls	r2, r2, #1
 8004196:	188c      	adds	r4, r1, r2
 8004198:	f107 0114 	add.w	r1, r7, #20
 800419c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800419e:	0052      	lsls	r2, r2, #1
 80041a0:	440a      	add	r2, r1
 80041a2:	4621      	mov	r1, r4
 80041a4:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 80041a6:	4ba3      	ldr	r3, [pc, #652]	; (8004434 <BSP_TS_GetState+0x2f4>)
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d117      	bne.n	80041de <BSP_TS_GetState+0x9e>
      {
        x[index] = brute_x[index];
 80041ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041b0:	005b      	lsls	r3, r3, #1
 80041b2:	3350      	adds	r3, #80	; 0x50
 80041b4:	443b      	add	r3, r7
 80041b6:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 80041ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041bc:	005b      	lsls	r3, r3, #1
 80041be:	3350      	adds	r3, #80	; 0x50
 80041c0:	443b      	add	r3, r7
 80041c2:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 80041c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041c8:	005b      	lsls	r3, r3, #1
 80041ca:	3350      	adds	r3, #80	; 0x50
 80041cc:	443b      	add	r3, r7
 80041ce:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 80041d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041d4:	005b      	lsls	r3, r3, #1
 80041d6:	3350      	adds	r3, #80	; 0x50
 80041d8:	443b      	add	r3, r7
 80041da:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 80041de:	4b95      	ldr	r3, [pc, #596]	; (8004434 <BSP_TS_GetState+0x2f4>)
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	f003 0302 	and.w	r3, r3, #2
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00e      	beq.n	8004208 <BSP_TS_GetState+0xc8>
      {
        x[index] = 4096 - brute_x[index];
 80041ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041ec:	005b      	lsls	r3, r3, #1
 80041ee:	3350      	adds	r3, #80	; 0x50
 80041f0:	443b      	add	r3, r7
 80041f2:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 80041f6:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80041fa:	b29a      	uxth	r2, r3
 80041fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041fe:	005b      	lsls	r3, r3, #1
 8004200:	3350      	adds	r3, #80	; 0x50
 8004202:	443b      	add	r3, r7
 8004204:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 8004208:	4b8a      	ldr	r3, [pc, #552]	; (8004434 <BSP_TS_GetState+0x2f4>)
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	f003 0304 	and.w	r3, r3, #4
 8004210:	2b00      	cmp	r3, #0
 8004212:	d00e      	beq.n	8004232 <BSP_TS_GetState+0xf2>
      {
        y[index] = 4096 - brute_y[index];
 8004214:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004216:	005b      	lsls	r3, r3, #1
 8004218:	3350      	adds	r3, #80	; 0x50
 800421a:	443b      	add	r3, r7
 800421c:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8004220:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8004224:	b29a      	uxth	r2, r3
 8004226:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004228:	005b      	lsls	r3, r3, #1
 800422a:	3350      	adds	r3, #80	; 0x50
 800422c:	443b      	add	r3, r7
 800422e:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 8004232:	4b80      	ldr	r3, [pc, #512]	; (8004434 <BSP_TS_GetState+0x2f4>)
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	f003 0308 	and.w	r3, r3, #8
 800423a:	2b00      	cmp	r3, #0
 800423c:	d017      	beq.n	800426e <BSP_TS_GetState+0x12e>
      {
        y[index] = brute_x[index];
 800423e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004240:	005b      	lsls	r3, r3, #1
 8004242:	3350      	adds	r3, #80	; 0x50
 8004244:	443b      	add	r3, r7
 8004246:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 800424a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800424c:	005b      	lsls	r3, r3, #1
 800424e:	3350      	adds	r3, #80	; 0x50
 8004250:	443b      	add	r3, r7
 8004252:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 8004256:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004258:	005b      	lsls	r3, r3, #1
 800425a:	3350      	adds	r3, #80	; 0x50
 800425c:	443b      	add	r3, r7
 800425e:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8004262:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004264:	005b      	lsls	r3, r3, #1
 8004266:	3350      	adds	r3, #80	; 0x50
 8004268:	443b      	add	r3, r7
 800426a:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 800426e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004270:	005b      	lsls	r3, r3, #1
 8004272:	3350      	adds	r3, #80	; 0x50
 8004274:	443b      	add	r3, r7
 8004276:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800427a:	4619      	mov	r1, r3
 800427c:	4a6e      	ldr	r2, [pc, #440]	; (8004438 <BSP_TS_GetState+0x2f8>)
 800427e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004284:	4299      	cmp	r1, r3
 8004286:	d90d      	bls.n	80042a4 <BSP_TS_GetState+0x164>
 8004288:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800428a:	005b      	lsls	r3, r3, #1
 800428c:	3350      	adds	r3, #80	; 0x50
 800428e:	443b      	add	r3, r7
 8004290:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8004294:	4968      	ldr	r1, [pc, #416]	; (8004438 <BSP_TS_GetState+0x2f8>)
 8004296:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004298:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800429c:	b29b      	uxth	r3, r3
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	e00c      	b.n	80042be <BSP_TS_GetState+0x17e>
 80042a4:	4a64      	ldr	r2, [pc, #400]	; (8004438 <BSP_TS_GetState+0x2f8>)
 80042a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042ac:	b29a      	uxth	r2, r3
 80042ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042b0:	005b      	lsls	r3, r3, #1
 80042b2:	3350      	adds	r3, #80	; 0x50
 80042b4:	443b      	add	r3, r7
 80042b6:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	b29b      	uxth	r3, r3
 80042be:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 80042c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	3350      	adds	r3, #80	; 0x50
 80042c8:	443b      	add	r3, r7
 80042ca:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80042ce:	4619      	mov	r1, r3
 80042d0:	4a5a      	ldr	r2, [pc, #360]	; (800443c <BSP_TS_GetState+0x2fc>)
 80042d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042d8:	4299      	cmp	r1, r3
 80042da:	d90d      	bls.n	80042f8 <BSP_TS_GetState+0x1b8>
 80042dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042de:	005b      	lsls	r3, r3, #1
 80042e0:	3350      	adds	r3, #80	; 0x50
 80042e2:	443b      	add	r3, r7
 80042e4:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 80042e8:	4954      	ldr	r1, [pc, #336]	; (800443c <BSP_TS_GetState+0x2fc>)
 80042ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	e00c      	b.n	8004312 <BSP_TS_GetState+0x1d2>
 80042f8:	4a50      	ldr	r2, [pc, #320]	; (800443c <BSP_TS_GetState+0x2fc>)
 80042fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004300:	b29a      	uxth	r2, r3
 8004302:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004304:	005b      	lsls	r3, r3, #1
 8004306:	3350      	adds	r3, #80	; 0x50
 8004308:	443b      	add	r3, r7
 800430a:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	b29b      	uxth	r3, r3
 8004312:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 8004316:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800431a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800431e:	4413      	add	r3, r2
 8004320:	2b05      	cmp	r3, #5
 8004322:	dd15      	ble.n	8004350 <BSP_TS_GetState+0x210>
      {
        _x[index] = x[index];
 8004324:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004326:	005b      	lsls	r3, r3, #1
 8004328:	3350      	adds	r3, #80	; 0x50
 800432a:	443b      	add	r3, r7
 800432c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004330:	4619      	mov	r1, r3
 8004332:	4a41      	ldr	r2, [pc, #260]	; (8004438 <BSP_TS_GetState+0x2f8>)
 8004334:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004336:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 800433a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800433c:	005b      	lsls	r3, r3, #1
 800433e:	3350      	adds	r3, #80	; 0x50
 8004340:	443b      	add	r3, r7
 8004342:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8004346:	4619      	mov	r1, r3
 8004348:	4a3c      	ldr	r2, [pc, #240]	; (800443c <BSP_TS_GetState+0x2fc>)
 800434a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800434c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8004350:	4b37      	ldr	r3, [pc, #220]	; (8004430 <BSP_TS_GetState+0x2f0>)
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	2b70      	cmp	r3, #112	; 0x70
 8004356:	d119      	bne.n	800438c <BSP_TS_GetState+0x24c>
      {
        TS_State->touchX[index] = x[index];
 8004358:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800435a:	005b      	lsls	r3, r3, #1
 800435c:	3350      	adds	r3, #80	; 0x50
 800435e:	443b      	add	r3, r7
 8004360:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004368:	005b      	lsls	r3, r3, #1
 800436a:	4413      	add	r3, r2
 800436c:	460a      	mov	r2, r1
 800436e:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 8004370:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004372:	005b      	lsls	r3, r3, #1
 8004374:	3350      	adds	r3, #80	; 0x50
 8004376:	443b      	add	r3, r7
 8004378:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004380:	3304      	adds	r3, #4
 8004382:	005b      	lsls	r3, r3, #1
 8004384:	4413      	add	r3, r2
 8004386:	460a      	mov	r2, r1
 8004388:	809a      	strh	r2, [r3, #4]
 800438a:	e022      	b.n	80043d2 <BSP_TS_GetState+0x292>
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 800438c:	4b2c      	ldr	r3, [pc, #176]	; (8004440 <BSP_TS_GetState+0x300>)
 800438e:	881b      	ldrh	r3, [r3, #0]
 8004390:	4619      	mov	r1, r3
 8004392:	4a29      	ldr	r2, [pc, #164]	; (8004438 <BSP_TS_GetState+0x2f8>)
 8004394:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800439a:	fb01 f303 	mul.w	r3, r1, r3
 800439e:	0b1b      	lsrs	r3, r3, #12
 80043a0:	b299      	uxth	r1, r3
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043a6:	005b      	lsls	r3, r3, #1
 80043a8:	4413      	add	r3, r2
 80043aa:	460a      	mov	r2, r1
 80043ac:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 80043ae:	4b25      	ldr	r3, [pc, #148]	; (8004444 <BSP_TS_GetState+0x304>)
 80043b0:	881b      	ldrh	r3, [r3, #0]
 80043b2:	4619      	mov	r1, r3
 80043b4:	4a21      	ldr	r2, [pc, #132]	; (800443c <BSP_TS_GetState+0x2fc>)
 80043b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043bc:	fb01 f303 	mul.w	r3, r1, r3
 80043c0:	0b1b      	lsrs	r3, r3, #12
 80043c2:	b299      	uxth	r1, r3
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043c8:	3304      	adds	r3, #4
 80043ca:	005b      	lsls	r3, r3, #1
 80043cc:	4413      	add	r3, r2
 80043ce:	460a      	mov	r2, r1
 80043d0:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 80043d2:	4b17      	ldr	r3, [pc, #92]	; (8004430 <BSP_TS_GetState+0x2f0>)
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	b298      	uxth	r0, r3
 80043d8:	f107 010c 	add.w	r1, r7, #12
 80043dc:	f107 0210 	add.w	r2, r7, #16
 80043e0:	f107 0308 	add.w	r3, r7, #8
 80043e4:	9300      	str	r3, [sp, #0]
 80043e6:	460b      	mov	r3, r1
 80043e8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80043ea:	f7fc fa91 	bl	8000910 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	b2d9      	uxtb	r1, r3
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043f6:	4413      	add	r3, r2
 80043f8:	3316      	adds	r3, #22
 80043fa:	460a      	mov	r2, r1
 80043fc:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	b2d9      	uxtb	r1, r3
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004406:	4413      	add	r3, r2
 8004408:	3320      	adds	r3, #32
 800440a:	460a      	mov	r2, r1
 800440c:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	2b03      	cmp	r3, #3
 8004412:	d835      	bhi.n	8004480 <BSP_TS_GetState+0x340>
 8004414:	a201      	add	r2, pc, #4	; (adr r2, 800441c <BSP_TS_GetState+0x2dc>)
 8004416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800441a:	bf00      	nop
 800441c:	08004449 	.word	0x08004449
 8004420:	08004457 	.word	0x08004457
 8004424:	08004465 	.word	0x08004465
 8004428:	08004473 	.word	0x08004473
 800442c:	20000c9c 	.word	0x20000c9c
 8004430:	20000ca5 	.word	0x20000ca5
 8004434:	20000ca4 	.word	0x20000ca4
 8004438:	20000ca8 	.word	0x20000ca8
 800443c:	20000cbc 	.word	0x20000cbc
 8004440:	20000ca0 	.word	0x20000ca0
 8004444:	20000ca2 	.word	0x20000ca2
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800444c:	4413      	add	r3, r2
 800444e:	331b      	adds	r3, #27
 8004450:	2201      	movs	r2, #1
 8004452:	701a      	strb	r2, [r3, #0]
          break;
 8004454:	e018      	b.n	8004488 <BSP_TS_GetState+0x348>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800445a:	4413      	add	r3, r2
 800445c:	331b      	adds	r3, #27
 800445e:	2202      	movs	r2, #2
 8004460:	701a      	strb	r2, [r3, #0]
          break;
 8004462:	e011      	b.n	8004488 <BSP_TS_GetState+0x348>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004468:	4413      	add	r3, r2
 800446a:	331b      	adds	r3, #27
 800446c:	2203      	movs	r2, #3
 800446e:	701a      	strb	r2, [r3, #0]
          break;
 8004470:	e00a      	b.n	8004488 <BSP_TS_GetState+0x348>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004476:	4413      	add	r3, r2
 8004478:	331b      	adds	r3, #27
 800447a:	2200      	movs	r2, #0
 800447c:	701a      	strb	r2, [r3, #0]
          break;
 800447e:	e003      	b.n	8004488 <BSP_TS_GetState+0x348>
        default :
          ts_status = TS_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 8004486:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 8004488:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800448a:	3301      	adds	r3, #1
 800448c:	64bb      	str	r3, [r7, #72]	; 0x48
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	461a      	mov	r2, r3
 8004494:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004496:	4293      	cmp	r3, r2
 8004498:	f4ff ae73 	bcc.w	8004182 <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f000 f809 	bl	80044b4 <BSP_TS_Get_GestureId>
 80044a2:	4603      	mov	r3, r0
 80044a4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 80044a8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3754      	adds	r7, #84	; 0x54
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd90      	pop	{r4, r7, pc}

080044b4 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 80044bc:	2300      	movs	r3, #0
 80044be:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 80044c0:	2300      	movs	r3, #0
 80044c2:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 80044c4:	4b3b      	ldr	r3, [pc, #236]	; (80045b4 <BSP_TS_Get_GestureId+0x100>)
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	f107 0208 	add.w	r2, r7, #8
 80044ce:	4611      	mov	r1, r2
 80044d0:	4618      	mov	r0, r3
 80044d2:	f7fc fa04 	bl	80008de <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	2b49      	cmp	r3, #73	; 0x49
 80044da:	d05e      	beq.n	800459a <BSP_TS_Get_GestureId+0xe6>
 80044dc:	2b49      	cmp	r3, #73	; 0x49
 80044de:	d860      	bhi.n	80045a2 <BSP_TS_Get_GestureId+0xee>
 80044e0:	2b1c      	cmp	r3, #28
 80044e2:	d83f      	bhi.n	8004564 <BSP_TS_Get_GestureId+0xb0>
 80044e4:	2b1c      	cmp	r3, #28
 80044e6:	d85c      	bhi.n	80045a2 <BSP_TS_Get_GestureId+0xee>
 80044e8:	a201      	add	r2, pc, #4	; (adr r2, 80044f0 <BSP_TS_Get_GestureId+0x3c>)
 80044ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ee:	bf00      	nop
 80044f0:	0800456b 	.word	0x0800456b
 80044f4:	080045a3 	.word	0x080045a3
 80044f8:	080045a3 	.word	0x080045a3
 80044fc:	080045a3 	.word	0x080045a3
 8004500:	080045a3 	.word	0x080045a3
 8004504:	080045a3 	.word	0x080045a3
 8004508:	080045a3 	.word	0x080045a3
 800450c:	080045a3 	.word	0x080045a3
 8004510:	080045a3 	.word	0x080045a3
 8004514:	080045a3 	.word	0x080045a3
 8004518:	080045a3 	.word	0x080045a3
 800451c:	080045a3 	.word	0x080045a3
 8004520:	080045a3 	.word	0x080045a3
 8004524:	080045a3 	.word	0x080045a3
 8004528:	080045a3 	.word	0x080045a3
 800452c:	080045a3 	.word	0x080045a3
 8004530:	08004573 	.word	0x08004573
 8004534:	080045a3 	.word	0x080045a3
 8004538:	080045a3 	.word	0x080045a3
 800453c:	080045a3 	.word	0x080045a3
 8004540:	0800457b 	.word	0x0800457b
 8004544:	080045a3 	.word	0x080045a3
 8004548:	080045a3 	.word	0x080045a3
 800454c:	080045a3 	.word	0x080045a3
 8004550:	08004583 	.word	0x08004583
 8004554:	080045a3 	.word	0x080045a3
 8004558:	080045a3 	.word	0x080045a3
 800455c:	080045a3 	.word	0x080045a3
 8004560:	0800458b 	.word	0x0800458b
 8004564:	2b40      	cmp	r3, #64	; 0x40
 8004566:	d014      	beq.n	8004592 <BSP_TS_Get_GestureId+0xde>
 8004568:	e01b      	b.n	80045a2 <BSP_TS_Get_GestureId+0xee>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004570:	e01a      	b.n	80045a8 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2201      	movs	r2, #1
 8004576:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004578:	e016      	b.n	80045a8 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2202      	movs	r2, #2
 800457e:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004580:	e012      	b.n	80045a8 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2203      	movs	r2, #3
 8004586:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004588:	e00e      	b.n	80045a8 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2204      	movs	r2, #4
 800458e:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004590:	e00a      	b.n	80045a8 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2205      	movs	r2, #5
 8004596:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004598:	e006      	b.n	80045a8 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2206      	movs	r2, #6
 800459e:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80045a0:	e002      	b.n	80045a8 <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	73fb      	strb	r3, [r7, #15]
      break;
 80045a6:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 80045a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3710      	adds	r7, #16
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	20000ca5 	.word	0x20000ca5

080045b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80045be:	4b11      	ldr	r3, [pc, #68]	; (8004604 <HAL_MspInit+0x4c>)
 80045c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c2:	4a10      	ldr	r2, [pc, #64]	; (8004604 <HAL_MspInit+0x4c>)
 80045c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045c8:	6413      	str	r3, [r2, #64]	; 0x40
 80045ca:	4b0e      	ldr	r3, [pc, #56]	; (8004604 <HAL_MspInit+0x4c>)
 80045cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045d2:	607b      	str	r3, [r7, #4]
 80045d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045d6:	4b0b      	ldr	r3, [pc, #44]	; (8004604 <HAL_MspInit+0x4c>)
 80045d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045da:	4a0a      	ldr	r2, [pc, #40]	; (8004604 <HAL_MspInit+0x4c>)
 80045dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045e0:	6453      	str	r3, [r2, #68]	; 0x44
 80045e2:	4b08      	ldr	r3, [pc, #32]	; (8004604 <HAL_MspInit+0x4c>)
 80045e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045ea:	603b      	str	r3, [r7, #0]
 80045ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80045ee:	2200      	movs	r2, #0
 80045f0:	210f      	movs	r1, #15
 80045f2:	f06f 0001 	mvn.w	r0, #1
 80045f6:	f002 fac5 	bl	8006b84 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80045fa:	bf00      	nop
 80045fc:	3708      	adds	r7, #8
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	40023800 	.word	0x40023800

08004608 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a0a      	ldr	r2, [pc, #40]	; (8004640 <HAL_DMA2D_MspInit+0x38>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d10b      	bne.n	8004632 <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800461a:	4b0a      	ldr	r3, [pc, #40]	; (8004644 <HAL_DMA2D_MspInit+0x3c>)
 800461c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461e:	4a09      	ldr	r2, [pc, #36]	; (8004644 <HAL_DMA2D_MspInit+0x3c>)
 8004620:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004624:	6313      	str	r3, [r2, #48]	; 0x30
 8004626:	4b07      	ldr	r3, [pc, #28]	; (8004644 <HAL_DMA2D_MspInit+0x3c>)
 8004628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800462e:	60fb      	str	r3, [r7, #12]
 8004630:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8004632:	bf00      	nop
 8004634:	3714      	adds	r7, #20
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr
 800463e:	bf00      	nop
 8004640:	4002b000 	.word	0x4002b000
 8004644:	40023800 	.word	0x40023800

08004648 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b08e      	sub	sp, #56	; 0x38
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004650:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004654:	2200      	movs	r2, #0
 8004656:	601a      	str	r2, [r3, #0]
 8004658:	605a      	str	r2, [r3, #4]
 800465a:	609a      	str	r2, [r3, #8]
 800465c:	60da      	str	r2, [r3, #12]
 800465e:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a55      	ldr	r2, [pc, #340]	; (80047bc <HAL_LTDC_MspInit+0x174>)
 8004666:	4293      	cmp	r3, r2
 8004668:	f040 80a3 	bne.w	80047b2 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800466c:	4b54      	ldr	r3, [pc, #336]	; (80047c0 <HAL_LTDC_MspInit+0x178>)
 800466e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004670:	4a53      	ldr	r2, [pc, #332]	; (80047c0 <HAL_LTDC_MspInit+0x178>)
 8004672:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004676:	6453      	str	r3, [r2, #68]	; 0x44
 8004678:	4b51      	ldr	r3, [pc, #324]	; (80047c0 <HAL_LTDC_MspInit+0x178>)
 800467a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800467c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004680:	623b      	str	r3, [r7, #32]
 8004682:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004684:	4b4e      	ldr	r3, [pc, #312]	; (80047c0 <HAL_LTDC_MspInit+0x178>)
 8004686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004688:	4a4d      	ldr	r2, [pc, #308]	; (80047c0 <HAL_LTDC_MspInit+0x178>)
 800468a:	f043 0310 	orr.w	r3, r3, #16
 800468e:	6313      	str	r3, [r2, #48]	; 0x30
 8004690:	4b4b      	ldr	r3, [pc, #300]	; (80047c0 <HAL_LTDC_MspInit+0x178>)
 8004692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004694:	f003 0310 	and.w	r3, r3, #16
 8004698:	61fb      	str	r3, [r7, #28]
 800469a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800469c:	4b48      	ldr	r3, [pc, #288]	; (80047c0 <HAL_LTDC_MspInit+0x178>)
 800469e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a0:	4a47      	ldr	r2, [pc, #284]	; (80047c0 <HAL_LTDC_MspInit+0x178>)
 80046a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046a6:	6313      	str	r3, [r2, #48]	; 0x30
 80046a8:	4b45      	ldr	r3, [pc, #276]	; (80047c0 <HAL_LTDC_MspInit+0x178>)
 80046aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046b0:	61bb      	str	r3, [r7, #24]
 80046b2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80046b4:	4b42      	ldr	r3, [pc, #264]	; (80047c0 <HAL_LTDC_MspInit+0x178>)
 80046b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b8:	4a41      	ldr	r2, [pc, #260]	; (80047c0 <HAL_LTDC_MspInit+0x178>)
 80046ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80046be:	6313      	str	r3, [r2, #48]	; 0x30
 80046c0:	4b3f      	ldr	r3, [pc, #252]	; (80047c0 <HAL_LTDC_MspInit+0x178>)
 80046c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046c8:	617b      	str	r3, [r7, #20]
 80046ca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80046cc:	4b3c      	ldr	r3, [pc, #240]	; (80047c0 <HAL_LTDC_MspInit+0x178>)
 80046ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d0:	4a3b      	ldr	r2, [pc, #236]	; (80047c0 <HAL_LTDC_MspInit+0x178>)
 80046d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046d6:	6313      	str	r3, [r2, #48]	; 0x30
 80046d8:	4b39      	ldr	r3, [pc, #228]	; (80047c0 <HAL_LTDC_MspInit+0x178>)
 80046da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e0:	613b      	str	r3, [r7, #16]
 80046e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80046e4:	4b36      	ldr	r3, [pc, #216]	; (80047c0 <HAL_LTDC_MspInit+0x178>)
 80046e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e8:	4a35      	ldr	r2, [pc, #212]	; (80047c0 <HAL_LTDC_MspInit+0x178>)
 80046ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046ee:	6313      	str	r3, [r2, #48]	; 0x30
 80046f0:	4b33      	ldr	r3, [pc, #204]	; (80047c0 <HAL_LTDC_MspInit+0x178>)
 80046f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f8:	60fb      	str	r3, [r7, #12]
 80046fa:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80046fc:	2310      	movs	r3, #16
 80046fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004700:	2302      	movs	r3, #2
 8004702:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004704:	2300      	movs	r3, #0
 8004706:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004708:	2300      	movs	r3, #0
 800470a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800470c:	230e      	movs	r3, #14
 800470e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8004710:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004714:	4619      	mov	r1, r3
 8004716:	482b      	ldr	r0, [pc, #172]	; (80047c4 <HAL_LTDC_MspInit+0x17c>)
 8004718:	f003 f8ee 	bl	80078f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 800471c:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8004720:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004722:	2302      	movs	r3, #2
 8004724:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004726:	2300      	movs	r3, #0
 8004728:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800472a:	2300      	movs	r3, #0
 800472c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800472e:	230e      	movs	r3, #14
 8004730:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8004732:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004736:	4619      	mov	r1, r3
 8004738:	4823      	ldr	r0, [pc, #140]	; (80047c8 <HAL_LTDC_MspInit+0x180>)
 800473a:	f003 f8dd 	bl	80078f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 800473e:	23f7      	movs	r3, #247	; 0xf7
 8004740:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004742:	2302      	movs	r3, #2
 8004744:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004746:	2300      	movs	r3, #0
 8004748:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800474a:	2300      	movs	r3, #0
 800474c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800474e:	230e      	movs	r3, #14
 8004750:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8004752:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004756:	4619      	mov	r1, r3
 8004758:	481c      	ldr	r0, [pc, #112]	; (80047cc <HAL_LTDC_MspInit+0x184>)
 800475a:	f003 f8cd 	bl	80078f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800475e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004762:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004764:	2302      	movs	r3, #2
 8004766:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004768:	2300      	movs	r3, #0
 800476a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800476c:	2300      	movs	r3, #0
 800476e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8004770:	2309      	movs	r3, #9
 8004772:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8004774:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004778:	4619      	mov	r1, r3
 800477a:	4815      	ldr	r0, [pc, #84]	; (80047d0 <HAL_LTDC_MspInit+0x188>)
 800477c:	f003 f8bc 	bl	80078f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8004780:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8004784:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004786:	2302      	movs	r3, #2
 8004788:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800478a:	2300      	movs	r3, #0
 800478c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800478e:	2300      	movs	r3, #0
 8004790:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004792:	230e      	movs	r3, #14
 8004794:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004796:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800479a:	4619      	mov	r1, r3
 800479c:	480d      	ldr	r0, [pc, #52]	; (80047d4 <HAL_LTDC_MspInit+0x18c>)
 800479e:	f003 f8ab 	bl	80078f8 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80047a2:	2200      	movs	r2, #0
 80047a4:	2105      	movs	r1, #5
 80047a6:	2058      	movs	r0, #88	; 0x58
 80047a8:	f002 f9ec 	bl	8006b84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80047ac:	2058      	movs	r0, #88	; 0x58
 80047ae:	f002 fa05 	bl	8006bbc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80047b2:	bf00      	nop
 80047b4:	3738      	adds	r7, #56	; 0x38
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	40016800 	.word	0x40016800
 80047c0:	40023800 	.word	0x40023800
 80047c4:	40021000 	.word	0x40021000
 80047c8:	40022400 	.word	0x40022400
 80047cc:	40022800 	.word	0x40022800
 80047d0:	40021800 	.word	0x40021800
 80047d4:	40022000 	.word	0x40022000

080047d8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b08a      	sub	sp, #40	; 0x28
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047e0:	f107 0314 	add.w	r3, r7, #20
 80047e4:	2200      	movs	r2, #0
 80047e6:	601a      	str	r2, [r3, #0]
 80047e8:	605a      	str	r2, [r3, #4]
 80047ea:	609a      	str	r2, [r3, #8]
 80047ec:	60da      	str	r2, [r3, #12]
 80047ee:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a65      	ldr	r2, [pc, #404]	; (800498c <HAL_SD_MspInit+0x1b4>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	f040 80c3 	bne.w	8004982 <HAL_SD_MspInit+0x1aa>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80047fc:	4b64      	ldr	r3, [pc, #400]	; (8004990 <HAL_SD_MspInit+0x1b8>)
 80047fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004800:	4a63      	ldr	r2, [pc, #396]	; (8004990 <HAL_SD_MspInit+0x1b8>)
 8004802:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004806:	6453      	str	r3, [r2, #68]	; 0x44
 8004808:	4b61      	ldr	r3, [pc, #388]	; (8004990 <HAL_SD_MspInit+0x1b8>)
 800480a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800480c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004810:	613b      	str	r3, [r7, #16]
 8004812:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004814:	4b5e      	ldr	r3, [pc, #376]	; (8004990 <HAL_SD_MspInit+0x1b8>)
 8004816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004818:	4a5d      	ldr	r2, [pc, #372]	; (8004990 <HAL_SD_MspInit+0x1b8>)
 800481a:	f043 0304 	orr.w	r3, r3, #4
 800481e:	6313      	str	r3, [r2, #48]	; 0x30
 8004820:	4b5b      	ldr	r3, [pc, #364]	; (8004990 <HAL_SD_MspInit+0x1b8>)
 8004822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004824:	f003 0304 	and.w	r3, r3, #4
 8004828:	60fb      	str	r3, [r7, #12]
 800482a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800482c:	4b58      	ldr	r3, [pc, #352]	; (8004990 <HAL_SD_MspInit+0x1b8>)
 800482e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004830:	4a57      	ldr	r2, [pc, #348]	; (8004990 <HAL_SD_MspInit+0x1b8>)
 8004832:	f043 0308 	orr.w	r3, r3, #8
 8004836:	6313      	str	r3, [r2, #48]	; 0x30
 8004838:	4b55      	ldr	r3, [pc, #340]	; (8004990 <HAL_SD_MspInit+0x1b8>)
 800483a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483c:	f003 0308 	and.w	r3, r3, #8
 8004840:	60bb      	str	r3, [r7, #8]
 8004842:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8004844:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8004848:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800484a:	2302      	movs	r3, #2
 800484c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800484e:	2300      	movs	r3, #0
 8004850:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004852:	2303      	movs	r3, #3
 8004854:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8004856:	230c      	movs	r3, #12
 8004858:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800485a:	f107 0314 	add.w	r3, r7, #20
 800485e:	4619      	mov	r1, r3
 8004860:	484c      	ldr	r0, [pc, #304]	; (8004994 <HAL_SD_MspInit+0x1bc>)
 8004862:	f003 f849 	bl	80078f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8004866:	2304      	movs	r3, #4
 8004868:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800486a:	2302      	movs	r3, #2
 800486c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800486e:	2300      	movs	r3, #0
 8004870:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004872:	2303      	movs	r3, #3
 8004874:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8004876:	230c      	movs	r3, #12
 8004878:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 800487a:	f107 0314 	add.w	r3, r7, #20
 800487e:	4619      	mov	r1, r3
 8004880:	4845      	ldr	r0, [pc, #276]	; (8004998 <HAL_SD_MspInit+0x1c0>)
 8004882:	f003 f839 	bl	80078f8 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8004886:	4b45      	ldr	r3, [pc, #276]	; (800499c <HAL_SD_MspInit+0x1c4>)
 8004888:	4a45      	ldr	r2, [pc, #276]	; (80049a0 <HAL_SD_MspInit+0x1c8>)
 800488a:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 800488c:	4b43      	ldr	r3, [pc, #268]	; (800499c <HAL_SD_MspInit+0x1c4>)
 800488e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004892:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004894:	4b41      	ldr	r3, [pc, #260]	; (800499c <HAL_SD_MspInit+0x1c4>)
 8004896:	2200      	movs	r2, #0
 8004898:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800489a:	4b40      	ldr	r3, [pc, #256]	; (800499c <HAL_SD_MspInit+0x1c4>)
 800489c:	2200      	movs	r2, #0
 800489e:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80048a0:	4b3e      	ldr	r3, [pc, #248]	; (800499c <HAL_SD_MspInit+0x1c4>)
 80048a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80048a6:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80048a8:	4b3c      	ldr	r3, [pc, #240]	; (800499c <HAL_SD_MspInit+0x1c4>)
 80048aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80048ae:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80048b0:	4b3a      	ldr	r3, [pc, #232]	; (800499c <HAL_SD_MspInit+0x1c4>)
 80048b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80048b6:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 80048b8:	4b38      	ldr	r3, [pc, #224]	; (800499c <HAL_SD_MspInit+0x1c4>)
 80048ba:	2220      	movs	r2, #32
 80048bc:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80048be:	4b37      	ldr	r3, [pc, #220]	; (800499c <HAL_SD_MspInit+0x1c4>)
 80048c0:	2200      	movs	r2, #0
 80048c2:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80048c4:	4b35      	ldr	r3, [pc, #212]	; (800499c <HAL_SD_MspInit+0x1c4>)
 80048c6:	2204      	movs	r2, #4
 80048c8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80048ca:	4b34      	ldr	r3, [pc, #208]	; (800499c <HAL_SD_MspInit+0x1c4>)
 80048cc:	2203      	movs	r2, #3
 80048ce:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 80048d0:	4b32      	ldr	r3, [pc, #200]	; (800499c <HAL_SD_MspInit+0x1c4>)
 80048d2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80048d6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80048d8:	4b30      	ldr	r3, [pc, #192]	; (800499c <HAL_SD_MspInit+0x1c4>)
 80048da:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80048de:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 80048e0:	482e      	ldr	r0, [pc, #184]	; (800499c <HAL_SD_MspInit+0x1c4>)
 80048e2:	f002 f979 	bl	8006bd8 <HAL_DMA_Init>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d001      	beq.n	80048f0 <HAL_SD_MspInit+0x118>
    {
      Error_Handler();
 80048ec:	f7fd fd5e 	bl	80023ac <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a2a      	ldr	r2, [pc, #168]	; (800499c <HAL_SD_MspInit+0x1c4>)
 80048f4:	641a      	str	r2, [r3, #64]	; 0x40
 80048f6:	4a29      	ldr	r2, [pc, #164]	; (800499c <HAL_SD_MspInit+0x1c4>)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 80048fc:	4b29      	ldr	r3, [pc, #164]	; (80049a4 <HAL_SD_MspInit+0x1cc>)
 80048fe:	4a2a      	ldr	r2, [pc, #168]	; (80049a8 <HAL_SD_MspInit+0x1d0>)
 8004900:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8004902:	4b28      	ldr	r3, [pc, #160]	; (80049a4 <HAL_SD_MspInit+0x1cc>)
 8004904:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004908:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800490a:	4b26      	ldr	r3, [pc, #152]	; (80049a4 <HAL_SD_MspInit+0x1cc>)
 800490c:	2240      	movs	r2, #64	; 0x40
 800490e:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004910:	4b24      	ldr	r3, [pc, #144]	; (80049a4 <HAL_SD_MspInit+0x1cc>)
 8004912:	2200      	movs	r2, #0
 8004914:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004916:	4b23      	ldr	r3, [pc, #140]	; (80049a4 <HAL_SD_MspInit+0x1cc>)
 8004918:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800491c:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800491e:	4b21      	ldr	r3, [pc, #132]	; (80049a4 <HAL_SD_MspInit+0x1cc>)
 8004920:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004924:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004926:	4b1f      	ldr	r3, [pc, #124]	; (80049a4 <HAL_SD_MspInit+0x1cc>)
 8004928:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800492c:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 800492e:	4b1d      	ldr	r3, [pc, #116]	; (80049a4 <HAL_SD_MspInit+0x1cc>)
 8004930:	2220      	movs	r2, #32
 8004932:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004934:	4b1b      	ldr	r3, [pc, #108]	; (80049a4 <HAL_SD_MspInit+0x1cc>)
 8004936:	2200      	movs	r2, #0
 8004938:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800493a:	4b1a      	ldr	r3, [pc, #104]	; (80049a4 <HAL_SD_MspInit+0x1cc>)
 800493c:	2204      	movs	r2, #4
 800493e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004940:	4b18      	ldr	r3, [pc, #96]	; (80049a4 <HAL_SD_MspInit+0x1cc>)
 8004942:	2203      	movs	r2, #3
 8004944:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8004946:	4b17      	ldr	r3, [pc, #92]	; (80049a4 <HAL_SD_MspInit+0x1cc>)
 8004948:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800494c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800494e:	4b15      	ldr	r3, [pc, #84]	; (80049a4 <HAL_SD_MspInit+0x1cc>)
 8004950:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004954:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8004956:	4813      	ldr	r0, [pc, #76]	; (80049a4 <HAL_SD_MspInit+0x1cc>)
 8004958:	f002 f93e 	bl	8006bd8 <HAL_DMA_Init>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d001      	beq.n	8004966 <HAL_SD_MspInit+0x18e>
    {
      Error_Handler();
 8004962:	f7fd fd23 	bl	80023ac <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a0e      	ldr	r2, [pc, #56]	; (80049a4 <HAL_SD_MspInit+0x1cc>)
 800496a:	63da      	str	r2, [r3, #60]	; 0x3c
 800496c:	4a0d      	ldr	r2, [pc, #52]	; (80049a4 <HAL_SD_MspInit+0x1cc>)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8004972:	2200      	movs	r2, #0
 8004974:	2105      	movs	r1, #5
 8004976:	2031      	movs	r0, #49	; 0x31
 8004978:	f002 f904 	bl	8006b84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800497c:	2031      	movs	r0, #49	; 0x31
 800497e:	f002 f91d 	bl	8006bbc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8004982:	bf00      	nop
 8004984:	3728      	adds	r7, #40	; 0x28
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	40012c00 	.word	0x40012c00
 8004990:	40023800 	.word	0x40023800
 8004994:	40020800 	.word	0x40020800
 8004998:	40020c00 	.word	0x40020c00
 800499c:	2000063c 	.word	0x2000063c
 80049a0:	40026458 	.word	0x40026458
 80049a4:	2000069c 	.word	0x2000069c
 80049a8:	400264a0 	.word	0x400264a0

080049ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b0ac      	sub	sp, #176	; 0xb0
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049b4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80049b8:	2200      	movs	r2, #0
 80049ba:	601a      	str	r2, [r3, #0]
 80049bc:	605a      	str	r2, [r3, #4]
 80049be:	609a      	str	r2, [r3, #8]
 80049c0:	60da      	str	r2, [r3, #12]
 80049c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80049c4:	f107 0318 	add.w	r3, r7, #24
 80049c8:	2284      	movs	r2, #132	; 0x84
 80049ca:	2100      	movs	r1, #0
 80049cc:	4618      	mov	r0, r3
 80049ce:	f00f f895 	bl	8013afc <memset>
  if(huart->Instance==USART1)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a32      	ldr	r2, [pc, #200]	; (8004aa0 <HAL_UART_MspInit+0xf4>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d15c      	bne.n	8004a96 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80049dc:	2340      	movs	r3, #64	; 0x40
 80049de:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80049e0:	2300      	movs	r3, #0
 80049e2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80049e4:	f107 0318 	add.w	r3, r7, #24
 80049e8:	4618      	mov	r0, r3
 80049ea:	f005 f8ad 	bl	8009b48 <HAL_RCCEx_PeriphCLKConfig>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d001      	beq.n	80049f8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80049f4:	f7fd fcda 	bl	80023ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80049f8:	4b2a      	ldr	r3, [pc, #168]	; (8004aa4 <HAL_UART_MspInit+0xf8>)
 80049fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049fc:	4a29      	ldr	r2, [pc, #164]	; (8004aa4 <HAL_UART_MspInit+0xf8>)
 80049fe:	f043 0310 	orr.w	r3, r3, #16
 8004a02:	6453      	str	r3, [r2, #68]	; 0x44
 8004a04:	4b27      	ldr	r3, [pc, #156]	; (8004aa4 <HAL_UART_MspInit+0xf8>)
 8004a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a08:	f003 0310 	and.w	r3, r3, #16
 8004a0c:	617b      	str	r3, [r7, #20]
 8004a0e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a10:	4b24      	ldr	r3, [pc, #144]	; (8004aa4 <HAL_UART_MspInit+0xf8>)
 8004a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a14:	4a23      	ldr	r2, [pc, #140]	; (8004aa4 <HAL_UART_MspInit+0xf8>)
 8004a16:	f043 0302 	orr.w	r3, r3, #2
 8004a1a:	6313      	str	r3, [r2, #48]	; 0x30
 8004a1c:	4b21      	ldr	r3, [pc, #132]	; (8004aa4 <HAL_UART_MspInit+0xf8>)
 8004a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a20:	f003 0302 	and.w	r3, r3, #2
 8004a24:	613b      	str	r3, [r7, #16]
 8004a26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a28:	4b1e      	ldr	r3, [pc, #120]	; (8004aa4 <HAL_UART_MspInit+0xf8>)
 8004a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2c:	4a1d      	ldr	r2, [pc, #116]	; (8004aa4 <HAL_UART_MspInit+0xf8>)
 8004a2e:	f043 0301 	orr.w	r3, r3, #1
 8004a32:	6313      	str	r3, [r2, #48]	; 0x30
 8004a34:	4b1b      	ldr	r3, [pc, #108]	; (8004aa4 <HAL_UART_MspInit+0xf8>)
 8004a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a38:	f003 0301 	and.w	r3, r3, #1
 8004a3c:	60fb      	str	r3, [r7, #12]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8004a40:	2380      	movs	r3, #128	; 0x80
 8004a42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a46:	2302      	movs	r3, #2
 8004a48:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a52:	2300      	movs	r3, #0
 8004a54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004a58:	2307      	movs	r3, #7
 8004a5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8004a5e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004a62:	4619      	mov	r1, r3
 8004a64:	4810      	ldr	r0, [pc, #64]	; (8004aa8 <HAL_UART_MspInit+0xfc>)
 8004a66:	f002 ff47 	bl	80078f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8004a6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a72:	2302      	movs	r3, #2
 8004a74:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004a84:	2307      	movs	r3, #7
 8004a86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8004a8a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004a8e:	4619      	mov	r1, r3
 8004a90:	4806      	ldr	r0, [pc, #24]	; (8004aac <HAL_UART_MspInit+0x100>)
 8004a92:	f002 ff31 	bl	80078f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004a96:	bf00      	nop
 8004a98:	37b0      	adds	r7, #176	; 0xb0
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	40011000 	.word	0x40011000
 8004aa4:	40023800 	.word	0x40023800
 8004aa8:	40020400 	.word	0x40020400
 8004aac:	40020000 	.word	0x40020000

08004ab0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b086      	sub	sp, #24
 8004ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8004ab6:	1d3b      	adds	r3, r7, #4
 8004ab8:	2200      	movs	r2, #0
 8004aba:	601a      	str	r2, [r3, #0]
 8004abc:	605a      	str	r2, [r3, #4]
 8004abe:	609a      	str	r2, [r3, #8]
 8004ac0:	60da      	str	r2, [r3, #12]
 8004ac2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8004ac4:	4b42      	ldr	r3, [pc, #264]	; (8004bd0 <HAL_FMC_MspInit+0x120>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d17c      	bne.n	8004bc6 <HAL_FMC_MspInit+0x116>
    return;
  }
  FMC_Initialized = 1;
 8004acc:	4b40      	ldr	r3, [pc, #256]	; (8004bd0 <HAL_FMC_MspInit+0x120>)
 8004ace:	2201      	movs	r2, #1
 8004ad0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8004ad2:	4b40      	ldr	r3, [pc, #256]	; (8004bd4 <HAL_FMC_MspInit+0x124>)
 8004ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad6:	4a3f      	ldr	r2, [pc, #252]	; (8004bd4 <HAL_FMC_MspInit+0x124>)
 8004ad8:	f043 0301 	orr.w	r3, r3, #1
 8004adc:	6393      	str	r3, [r2, #56]	; 0x38
 8004ade:	4b3d      	ldr	r3, [pc, #244]	; (8004bd4 <HAL_FMC_MspInit+0x124>)
 8004ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae2:	f003 0301 	and.w	r3, r3, #1
 8004ae6:	603b      	str	r3, [r7, #0]
 8004ae8:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8004aea:	f64f 7383 	movw	r3, #65411	; 0xff83
 8004aee:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004af0:	2302      	movs	r3, #2
 8004af2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004af4:	2300      	movs	r3, #0
 8004af6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004af8:	2303      	movs	r3, #3
 8004afa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004afc:	230c      	movs	r3, #12
 8004afe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004b00:	1d3b      	adds	r3, r7, #4
 8004b02:	4619      	mov	r1, r3
 8004b04:	4834      	ldr	r0, [pc, #208]	; (8004bd8 <HAL_FMC_MspInit+0x128>)
 8004b06:	f002 fef7 	bl	80078f8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8004b0a:	2360      	movs	r3, #96	; 0x60
 8004b0c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b0e:	2302      	movs	r3, #2
 8004b10:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b12:	2300      	movs	r3, #0
 8004b14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b16:	2303      	movs	r3, #3
 8004b18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004b1a:	230c      	movs	r3, #12
 8004b1c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b1e:	1d3b      	adds	r3, r7, #4
 8004b20:	4619      	mov	r1, r3
 8004b22:	482e      	ldr	r0, [pc, #184]	; (8004bdc <HAL_FMC_MspInit+0x12c>)
 8004b24:	f002 fee8 	bl	80078f8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8004b28:	f248 1333 	movw	r3, #33075	; 0x8133
 8004b2c:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b2e:	2302      	movs	r3, #2
 8004b30:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b32:	2300      	movs	r3, #0
 8004b34:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b36:	2303      	movs	r3, #3
 8004b38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004b3a:	230c      	movs	r3, #12
 8004b3c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004b3e:	1d3b      	adds	r3, r7, #4
 8004b40:	4619      	mov	r1, r3
 8004b42:	4827      	ldr	r0, [pc, #156]	; (8004be0 <HAL_FMC_MspInit+0x130>)
 8004b44:	f002 fed8 	bl	80078f8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8004b48:	f24c 7303 	movw	r3, #50947	; 0xc703
 8004b4c:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b4e:	2302      	movs	r3, #2
 8004b50:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b52:	2300      	movs	r3, #0
 8004b54:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b56:	2303      	movs	r3, #3
 8004b58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004b5a:	230c      	movs	r3, #12
 8004b5c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004b5e:	1d3b      	adds	r3, r7, #4
 8004b60:	4619      	mov	r1, r3
 8004b62:	4820      	ldr	r0, [pc, #128]	; (8004be4 <HAL_FMC_MspInit+0x134>)
 8004b64:	f002 fec8 	bl	80078f8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8004b68:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8004b6c:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b6e:	2302      	movs	r3, #2
 8004b70:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b72:	2300      	movs	r3, #0
 8004b74:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b76:	2303      	movs	r3, #3
 8004b78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004b7a:	230c      	movs	r3, #12
 8004b7c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004b7e:	1d3b      	adds	r3, r7, #4
 8004b80:	4619      	mov	r1, r3
 8004b82:	4819      	ldr	r0, [pc, #100]	; (8004be8 <HAL_FMC_MspInit+0x138>)
 8004b84:	f002 feb8 	bl	80078f8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8004b88:	2328      	movs	r3, #40	; 0x28
 8004b8a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b8c:	2302      	movs	r3, #2
 8004b8e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b90:	2300      	movs	r3, #0
 8004b92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b94:	2303      	movs	r3, #3
 8004b96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004b98:	230c      	movs	r3, #12
 8004b9a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004b9c:	1d3b      	adds	r3, r7, #4
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	4812      	ldr	r0, [pc, #72]	; (8004bec <HAL_FMC_MspInit+0x13c>)
 8004ba2:	f002 fea9 	bl	80078f8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8004ba6:	2308      	movs	r3, #8
 8004ba8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004baa:	2302      	movs	r3, #2
 8004bac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004bb6:	230c      	movs	r3, #12
 8004bb8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8004bba:	1d3b      	adds	r3, r7, #4
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	480c      	ldr	r0, [pc, #48]	; (8004bf0 <HAL_FMC_MspInit+0x140>)
 8004bc0:	f002 fe9a 	bl	80078f8 <HAL_GPIO_Init>
 8004bc4:	e000      	b.n	8004bc8 <HAL_FMC_MspInit+0x118>
    return;
 8004bc6:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8004bc8:	3718      	adds	r7, #24
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	20000cd0 	.word	0x20000cd0
 8004bd4:	40023800 	.word	0x40023800
 8004bd8:	40021000 	.word	0x40021000
 8004bdc:	40020400 	.word	0x40020400
 8004be0:	40021800 	.word	0x40021800
 8004be4:	40020c00 	.word	0x40020c00
 8004be8:	40021400 	.word	0x40021400
 8004bec:	40021c00 	.word	0x40021c00
 8004bf0:	40020800 	.word	0x40020800

08004bf4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8004bfc:	f7ff ff58 	bl	8004ab0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8004c00:	bf00      	nop
 8004c02:	3708      	adds	r7, #8
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai2_b;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b08a      	sub	sp, #40	; 0x28
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a61      	ldr	r2, [pc, #388]	; (8004d9c <HAL_SAI_MspInit+0x194>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d15b      	bne.n	8004cd2 <HAL_SAI_MspInit+0xca>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8004c1a:	4b61      	ldr	r3, [pc, #388]	; (8004da0 <HAL_SAI_MspInit+0x198>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d10b      	bne.n	8004c3a <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8004c22:	4b60      	ldr	r3, [pc, #384]	; (8004da4 <HAL_SAI_MspInit+0x19c>)
 8004c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c26:	4a5f      	ldr	r2, [pc, #380]	; (8004da4 <HAL_SAI_MspInit+0x19c>)
 8004c28:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8004c2e:	4b5d      	ldr	r3, [pc, #372]	; (8004da4 <HAL_SAI_MspInit+0x19c>)
 8004c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c36:	613b      	str	r3, [r7, #16]
 8004c38:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8004c3a:	4b59      	ldr	r3, [pc, #356]	; (8004da0 <HAL_SAI_MspInit+0x198>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	3301      	adds	r3, #1
 8004c40:	4a57      	ldr	r2, [pc, #348]	; (8004da0 <HAL_SAI_MspInit+0x198>)
 8004c42:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8004c44:	23f0      	movs	r3, #240	; 0xf0
 8004c46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c48:	2302      	movs	r3, #2
 8004c4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c50:	2300      	movs	r3, #0
 8004c52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8004c54:	230a      	movs	r3, #10
 8004c56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004c58:	f107 0314 	add.w	r3, r7, #20
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	4852      	ldr	r0, [pc, #328]	; (8004da8 <HAL_SAI_MspInit+0x1a0>)
 8004c60:	f002 fe4a 	bl	80078f8 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA2_Stream4;
 8004c64:	4b51      	ldr	r3, [pc, #324]	; (8004dac <HAL_SAI_MspInit+0x1a4>)
 8004c66:	4a52      	ldr	r2, [pc, #328]	; (8004db0 <HAL_SAI_MspInit+0x1a8>)
 8004c68:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Channel = DMA_CHANNEL_3;
 8004c6a:	4b50      	ldr	r3, [pc, #320]	; (8004dac <HAL_SAI_MspInit+0x1a4>)
 8004c6c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8004c70:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004c72:	4b4e      	ldr	r3, [pc, #312]	; (8004dac <HAL_SAI_MspInit+0x1a4>)
 8004c74:	2240      	movs	r2, #64	; 0x40
 8004c76:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c78:	4b4c      	ldr	r3, [pc, #304]	; (8004dac <HAL_SAI_MspInit+0x1a4>)
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8004c7e:	4b4b      	ldr	r3, [pc, #300]	; (8004dac <HAL_SAI_MspInit+0x1a4>)
 8004c80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c84:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004c86:	4b49      	ldr	r3, [pc, #292]	; (8004dac <HAL_SAI_MspInit+0x1a4>)
 8004c88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c8c:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004c8e:	4b47      	ldr	r3, [pc, #284]	; (8004dac <HAL_SAI_MspInit+0x1a4>)
 8004c90:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004c94:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 8004c96:	4b45      	ldr	r3, [pc, #276]	; (8004dac <HAL_SAI_MspInit+0x1a4>)
 8004c98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c9c:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_LOW;
 8004c9e:	4b43      	ldr	r3, [pc, #268]	; (8004dac <HAL_SAI_MspInit+0x1a4>)
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	621a      	str	r2, [r3, #32]
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004ca4:	4b41      	ldr	r3, [pc, #260]	; (8004dac <HAL_SAI_MspInit+0x1a4>)
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8004caa:	4840      	ldr	r0, [pc, #256]	; (8004dac <HAL_SAI_MspInit+0x1a4>)
 8004cac:	f001 ff94 	bl	8006bd8 <HAL_DMA_Init>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d001      	beq.n	8004cba <HAL_SAI_MspInit+0xb2>
    {
      Error_Handler();
 8004cb6:	f7fd fb79 	bl	80023ac <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a3b      	ldr	r2, [pc, #236]	; (8004dac <HAL_SAI_MspInit+0x1a4>)
 8004cbe:	671a      	str	r2, [r3, #112]	; 0x70
 8004cc0:	4a3a      	ldr	r2, [pc, #232]	; (8004dac <HAL_SAI_MspInit+0x1a4>)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a38      	ldr	r2, [pc, #224]	; (8004dac <HAL_SAI_MspInit+0x1a4>)
 8004cca:	66da      	str	r2, [r3, #108]	; 0x6c
 8004ccc:	4a37      	ldr	r2, [pc, #220]	; (8004dac <HAL_SAI_MspInit+0x1a4>)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6393      	str	r3, [r2, #56]	; 0x38

    }
    if(hsai->Instance==SAI2_Block_B)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a37      	ldr	r2, [pc, #220]	; (8004db4 <HAL_SAI_MspInit+0x1ac>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d15b      	bne.n	8004d94 <HAL_SAI_MspInit+0x18c>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8004cdc:	4b30      	ldr	r3, [pc, #192]	; (8004da0 <HAL_SAI_MspInit+0x198>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d10b      	bne.n	8004cfc <HAL_SAI_MspInit+0xf4>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8004ce4:	4b2f      	ldr	r3, [pc, #188]	; (8004da4 <HAL_SAI_MspInit+0x19c>)
 8004ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ce8:	4a2e      	ldr	r2, [pc, #184]	; (8004da4 <HAL_SAI_MspInit+0x19c>)
 8004cea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004cee:	6453      	str	r3, [r2, #68]	; 0x44
 8004cf0:	4b2c      	ldr	r3, [pc, #176]	; (8004da4 <HAL_SAI_MspInit+0x19c>)
 8004cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cf4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cf8:	60fb      	str	r3, [r7, #12]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8004cfc:	4b28      	ldr	r3, [pc, #160]	; (8004da0 <HAL_SAI_MspInit+0x198>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	3301      	adds	r3, #1
 8004d02:	4a27      	ldr	r2, [pc, #156]	; (8004da0 <HAL_SAI_MspInit+0x198>)
 8004d04:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8004d06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d0c:	2302      	movs	r3, #2
 8004d0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d10:	2300      	movs	r3, #0
 8004d12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d14:	2300      	movs	r3, #0
 8004d16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8004d18:	230a      	movs	r3, #10
 8004d1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8004d1c:	f107 0314 	add.w	r3, r7, #20
 8004d20:	4619      	mov	r1, r3
 8004d22:	4825      	ldr	r0, [pc, #148]	; (8004db8 <HAL_SAI_MspInit+0x1b0>)
 8004d24:	f002 fde8 	bl	80078f8 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA2_Stream7;
 8004d28:	4b24      	ldr	r3, [pc, #144]	; (8004dbc <HAL_SAI_MspInit+0x1b4>)
 8004d2a:	4a25      	ldr	r2, [pc, #148]	; (8004dc0 <HAL_SAI_MspInit+0x1b8>)
 8004d2c:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_0;
 8004d2e:	4b23      	ldr	r3, [pc, #140]	; (8004dbc <HAL_SAI_MspInit+0x1b4>)
 8004d30:	2200      	movs	r2, #0
 8004d32:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004d34:	4b21      	ldr	r3, [pc, #132]	; (8004dbc <HAL_SAI_MspInit+0x1b4>)
 8004d36:	2200      	movs	r2, #0
 8004d38:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d3a:	4b20      	ldr	r3, [pc, #128]	; (8004dbc <HAL_SAI_MspInit+0x1b4>)
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8004d40:	4b1e      	ldr	r3, [pc, #120]	; (8004dbc <HAL_SAI_MspInit+0x1b4>)
 8004d42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d46:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004d48:	4b1c      	ldr	r3, [pc, #112]	; (8004dbc <HAL_SAI_MspInit+0x1b4>)
 8004d4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d4e:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004d50:	4b1a      	ldr	r3, [pc, #104]	; (8004dbc <HAL_SAI_MspInit+0x1b4>)
 8004d52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004d56:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8004d58:	4b18      	ldr	r3, [pc, #96]	; (8004dbc <HAL_SAI_MspInit+0x1b4>)
 8004d5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d5e:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_LOW;
 8004d60:	4b16      	ldr	r3, [pc, #88]	; (8004dbc <HAL_SAI_MspInit+0x1b4>)
 8004d62:	2200      	movs	r2, #0
 8004d64:	621a      	str	r2, [r3, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004d66:	4b15      	ldr	r3, [pc, #84]	; (8004dbc <HAL_SAI_MspInit+0x1b4>)
 8004d68:	2200      	movs	r2, #0
 8004d6a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8004d6c:	4813      	ldr	r0, [pc, #76]	; (8004dbc <HAL_SAI_MspInit+0x1b4>)
 8004d6e:	f001 ff33 	bl	8006bd8 <HAL_DMA_Init>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d001      	beq.n	8004d7c <HAL_SAI_MspInit+0x174>
    {
      Error_Handler();
 8004d78:	f7fd fb18 	bl	80023ac <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_b);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a0f      	ldr	r2, [pc, #60]	; (8004dbc <HAL_SAI_MspInit+0x1b4>)
 8004d80:	671a      	str	r2, [r3, #112]	; 0x70
 8004d82:	4a0e      	ldr	r2, [pc, #56]	; (8004dbc <HAL_SAI_MspInit+0x1b4>)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_b);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a0c      	ldr	r2, [pc, #48]	; (8004dbc <HAL_SAI_MspInit+0x1b4>)
 8004d8c:	66da      	str	r2, [r3, #108]	; 0x6c
 8004d8e:	4a0b      	ldr	r2, [pc, #44]	; (8004dbc <HAL_SAI_MspInit+0x1b4>)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 8004d94:	bf00      	nop
 8004d96:	3728      	adds	r7, #40	; 0x28
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	40015c04 	.word	0x40015c04
 8004da0:	20000cd4 	.word	0x20000cd4
 8004da4:	40023800 	.word	0x40023800
 8004da8:	40022000 	.word	0x40022000
 8004dac:	200004f8 	.word	0x200004f8
 8004db0:	40026470 	.word	0x40026470
 8004db4:	40015c24 	.word	0x40015c24
 8004db8:	40021800 	.word	0x40021800
 8004dbc:	20000558 	.word	0x20000558
 8004dc0:	400264b8 	.word	0x400264b8

08004dc4 <HAL_SAI_MspDeInit>:

void HAL_SAI_MspDeInit(SAI_HandleTypeDef* hsai)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a23      	ldr	r2, [pc, #140]	; (8004e60 <HAL_SAI_MspDeInit+0x9c>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d11c      	bne.n	8004e10 <HAL_SAI_MspDeInit+0x4c>
    {
    SAI2_client --;
 8004dd6:	4b23      	ldr	r3, [pc, #140]	; (8004e64 <HAL_SAI_MspDeInit+0xa0>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	4a21      	ldr	r2, [pc, #132]	; (8004e64 <HAL_SAI_MspDeInit+0xa0>)
 8004dde:	6013      	str	r3, [r2, #0]
    if (SAI2_client == 0)
 8004de0:	4b20      	ldr	r3, [pc, #128]	; (8004e64 <HAL_SAI_MspDeInit+0xa0>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d105      	bne.n	8004df4 <HAL_SAI_MspDeInit+0x30>
      {
      /* Peripheral clock disable */
       __HAL_RCC_SAI2_CLK_DISABLE();
 8004de8:	4b1f      	ldr	r3, [pc, #124]	; (8004e68 <HAL_SAI_MspDeInit+0xa4>)
 8004dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dec:	4a1e      	ldr	r2, [pc, #120]	; (8004e68 <HAL_SAI_MspDeInit+0xa4>)
 8004dee:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004df2:	6453      	str	r3, [r2, #68]	; 0x44
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    HAL_GPIO_DeInit(GPIOI, SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin);
 8004df4:	21f0      	movs	r1, #240	; 0xf0
 8004df6:	481d      	ldr	r0, [pc, #116]	; (8004e6c <HAL_SAI_MspDeInit+0xa8>)
 8004df8:	f002 ff2a 	bl	8007c50 <HAL_GPIO_DeInit>

    /* SAI2 DMA Deinit */
    HAL_DMA_DeInit(hsai->hdmarx);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e00:	4618      	mov	r0, r3
 8004e02:	f001 ff97 	bl	8006d34 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hsai->hdmatx);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f001 ff92 	bl	8006d34 <HAL_DMA_DeInit>
    }
    if(hsai->Instance==SAI2_Block_B)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a16      	ldr	r2, [pc, #88]	; (8004e70 <HAL_SAI_MspDeInit+0xac>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d11d      	bne.n	8004e56 <HAL_SAI_MspDeInit+0x92>
    {
    SAI2_client --;
 8004e1a:	4b12      	ldr	r3, [pc, #72]	; (8004e64 <HAL_SAI_MspDeInit+0xa0>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	3b01      	subs	r3, #1
 8004e20:	4a10      	ldr	r2, [pc, #64]	; (8004e64 <HAL_SAI_MspDeInit+0xa0>)
 8004e22:	6013      	str	r3, [r2, #0]
      if (SAI2_client == 0)
 8004e24:	4b0f      	ldr	r3, [pc, #60]	; (8004e64 <HAL_SAI_MspDeInit+0xa0>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d105      	bne.n	8004e38 <HAL_SAI_MspDeInit+0x74>
      {
      /* Peripheral clock disable */
      __HAL_RCC_SAI2_CLK_DISABLE();
 8004e2c:	4b0e      	ldr	r3, [pc, #56]	; (8004e68 <HAL_SAI_MspDeInit+0xa4>)
 8004e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e30:	4a0d      	ldr	r2, [pc, #52]	; (8004e68 <HAL_SAI_MspDeInit+0xa4>)
 8004e32:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004e36:	6453      	str	r3, [r2, #68]	; 0x44
      }

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    HAL_GPIO_DeInit(SAI2_SDB_GPIO_Port, SAI2_SDB_Pin);
 8004e38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004e3c:	480d      	ldr	r0, [pc, #52]	; (8004e74 <HAL_SAI_MspDeInit+0xb0>)
 8004e3e:	f002 ff07 	bl	8007c50 <HAL_GPIO_DeInit>

    /* SAI2 DMA Deinit */
    HAL_DMA_DeInit(hsai->hdmarx);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e46:	4618      	mov	r0, r3
 8004e48:	f001 ff74 	bl	8006d34 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hsai->hdmatx);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e50:	4618      	mov	r0, r3
 8004e52:	f001 ff6f 	bl	8006d34 <HAL_DMA_DeInit>
    }
}
 8004e56:	bf00      	nop
 8004e58:	3708      	adds	r7, #8
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	40015c04 	.word	0x40015c04
 8004e64:	20000cd4 	.word	0x20000cd4
 8004e68:	40023800 	.word	0x40023800
 8004e6c:	40022000 	.word	0x40022000
 8004e70:	40015c24 	.word	0x40015c24
 8004e74:	40021800 	.word	0x40021800

08004e78 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b08e      	sub	sp, #56	; 0x38
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8004e80:	2300      	movs	r3, #0
 8004e82:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8004e84:	2300      	movs	r3, #0
 8004e86:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004e88:	4b33      	ldr	r3, [pc, #204]	; (8004f58 <HAL_InitTick+0xe0>)
 8004e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8c:	4a32      	ldr	r2, [pc, #200]	; (8004f58 <HAL_InitTick+0xe0>)
 8004e8e:	f043 0310 	orr.w	r3, r3, #16
 8004e92:	6413      	str	r3, [r2, #64]	; 0x40
 8004e94:	4b30      	ldr	r3, [pc, #192]	; (8004f58 <HAL_InitTick+0xe0>)
 8004e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e98:	f003 0310 	and.w	r3, r3, #16
 8004e9c:	60fb      	str	r3, [r7, #12]
 8004e9e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004ea0:	f107 0210 	add.w	r2, r7, #16
 8004ea4:	f107 0314 	add.w	r3, r7, #20
 8004ea8:	4611      	mov	r1, r2
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f004 fe1a 	bl	8009ae4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004eb0:	6a3b      	ldr	r3, [r7, #32]
 8004eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d103      	bne.n	8004ec2 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004eba:	f004 fdeb 	bl	8009a94 <HAL_RCC_GetPCLK1Freq>
 8004ebe:	6378      	str	r0, [r7, #52]	; 0x34
 8004ec0:	e004      	b.n	8004ecc <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004ec2:	f004 fde7 	bl	8009a94 <HAL_RCC_GetPCLK1Freq>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	005b      	lsls	r3, r3, #1
 8004eca:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ece:	4a23      	ldr	r2, [pc, #140]	; (8004f5c <HAL_InitTick+0xe4>)
 8004ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed4:	0c9b      	lsrs	r3, r3, #18
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004eda:	4b21      	ldr	r3, [pc, #132]	; (8004f60 <HAL_InitTick+0xe8>)
 8004edc:	4a21      	ldr	r2, [pc, #132]	; (8004f64 <HAL_InitTick+0xec>)
 8004ede:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004ee0:	4b1f      	ldr	r3, [pc, #124]	; (8004f60 <HAL_InitTick+0xe8>)
 8004ee2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004ee6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004ee8:	4a1d      	ldr	r2, [pc, #116]	; (8004f60 <HAL_InitTick+0xe8>)
 8004eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eec:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8004eee:	4b1c      	ldr	r3, [pc, #112]	; (8004f60 <HAL_InitTick+0xe8>)
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ef4:	4b1a      	ldr	r3, [pc, #104]	; (8004f60 <HAL_InitTick+0xe8>)
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004efa:	4b19      	ldr	r3, [pc, #100]	; (8004f60 <HAL_InitTick+0xe8>)
 8004efc:	2200      	movs	r2, #0
 8004efe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8004f00:	4817      	ldr	r0, [pc, #92]	; (8004f60 <HAL_InitTick+0xe8>)
 8004f02:	f007 f96c 	bl	800c1de <HAL_TIM_Base_Init>
 8004f06:	4603      	mov	r3, r0
 8004f08:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8004f0c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d11b      	bne.n	8004f4c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8004f14:	4812      	ldr	r0, [pc, #72]	; (8004f60 <HAL_InitTick+0xe8>)
 8004f16:	f007 f9c3 	bl	800c2a0 <HAL_TIM_Base_Start_IT>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8004f20:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d111      	bne.n	8004f4c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004f28:	2036      	movs	r0, #54	; 0x36
 8004f2a:	f001 fe47 	bl	8006bbc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2b0f      	cmp	r3, #15
 8004f32:	d808      	bhi.n	8004f46 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8004f34:	2200      	movs	r2, #0
 8004f36:	6879      	ldr	r1, [r7, #4]
 8004f38:	2036      	movs	r0, #54	; 0x36
 8004f3a:	f001 fe23 	bl	8006b84 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004f3e:	4a0a      	ldr	r2, [pc, #40]	; (8004f68 <HAL_InitTick+0xf0>)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6013      	str	r3, [r2, #0]
 8004f44:	e002      	b.n	8004f4c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8004f4c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3738      	adds	r7, #56	; 0x38
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	40023800 	.word	0x40023800
 8004f5c:	431bde83 	.word	0x431bde83
 8004f60:	20000cd8 	.word	0x20000cd8
 8004f64:	40001000 	.word	0x40001000
 8004f68:	20000084 	.word	0x20000084

08004f6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004f70:	e7fe      	b.n	8004f70 <NMI_Handler+0x4>

08004f72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004f72:	b480      	push	{r7}
 8004f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004f76:	e7fe      	b.n	8004f76 <HardFault_Handler+0x4>

08004f78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004f7c:	e7fe      	b.n	8004f7c <MemManage_Handler+0x4>

08004f7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004f7e:	b480      	push	{r7}
 8004f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004f82:	e7fe      	b.n	8004f82 <BusFault_Handler+0x4>

08004f84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004f84:	b480      	push	{r7}
 8004f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004f88:	e7fe      	b.n	8004f88 <UsageFault_Handler+0x4>

08004f8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004f8a:	b480      	push	{r7}
 8004f8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004f8e:	bf00      	nop
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8004f9c:	4802      	ldr	r0, [pc, #8]	; (8004fa8 <SDMMC1_IRQHandler+0x10>)
 8004f9e:	f006 f9e5 	bl	800b36c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8004fa2:	bf00      	nop
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	200005b8 	.word	0x200005b8

08004fac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004fb0:	4802      	ldr	r0, [pc, #8]	; (8004fbc <TIM6_DAC_IRQHandler+0x10>)
 8004fb2:	f007 f9ed 	bl	800c390 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004fb6:	bf00      	nop
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	20000cd8 	.word	0x20000cd8

08004fc0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8004fc4:	4802      	ldr	r0, [pc, #8]	; (8004fd0 <DMA2_Stream3_IRQHandler+0x10>)
 8004fc6:	f001 ff95 	bl	8006ef4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8004fca:	bf00      	nop
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	2000063c 	.word	0x2000063c

08004fd4 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 8004fd8:	4802      	ldr	r0, [pc, #8]	; (8004fe4 <DMA2_Stream4_IRQHandler+0x10>)
 8004fda:	f001 ff8b 	bl	8006ef4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8004fde:	bf00      	nop
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	200004f8 	.word	0x200004f8

08004fe8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8004fec:	4802      	ldr	r0, [pc, #8]	; (8004ff8 <DMA2_Stream6_IRQHandler+0x10>)
 8004fee:	f001 ff81 	bl	8006ef4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8004ff2:	bf00      	nop
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	2000069c 	.word	0x2000069c

08004ffc <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 8005000:	4802      	ldr	r0, [pc, #8]	; (800500c <DMA2_Stream7_IRQHandler+0x10>)
 8005002:	f001 ff77 	bl	8006ef4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8005006:	bf00      	nop
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	20000558 	.word	0x20000558

08005010 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8005014:	4802      	ldr	r0, [pc, #8]	; (8005020 <LTDC_IRQHandler+0x10>)
 8005016:	f003 fdd3 	bl	8008bc0 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800501a:	bf00      	nop
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	20000348 	.word	0x20000348

08005024 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005024:	b480      	push	{r7}
 8005026:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005028:	4b06      	ldr	r3, [pc, #24]	; (8005044 <SystemInit+0x20>)
 800502a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800502e:	4a05      	ldr	r2, [pc, #20]	; (8005044 <SystemInit+0x20>)
 8005030:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005034:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005038:	bf00      	nop
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	e000ed00 	.word	0xe000ed00

08005048 <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b088      	sub	sp, #32
 800504c:	af00      	add	r7, sp, #0
 800504e:	607b      	str	r3, [r7, #4]
 8005050:	4603      	mov	r3, r0
 8005052:	81fb      	strh	r3, [r7, #14]
 8005054:	460b      	mov	r3, r1
 8005056:	81bb      	strh	r3, [r7, #12]
 8005058:	4613      	mov	r3, r2
 800505a:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 800505c:	2300      	movs	r3, #0
 800505e:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 8005060:	89bb      	ldrh	r3, [r7, #12]
 8005062:	b2db      	uxtb	r3, r3
 8005064:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8005066:	89bb      	ldrh	r3, [r7, #12]
 8005068:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800506c:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 800506e:	2300      	movs	r3, #0
 8005070:	837b      	strh	r3, [r7, #26]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8005072:	f7fd faf7 	bl	8002664 <AUDIO_IO_Init>
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 8005076:	89fb      	ldrh	r3, [r7, #14]
 8005078:	b2db      	uxtb	r3, r3
 800507a:	2203      	movs	r2, #3
 800507c:	f44f 7181 	mov.w	r1, #258	; 0x102
 8005080:	4618      	mov	r0, r3
 8005082:	f001 fc35 	bl	80068f0 <CODEC_IO_Write>
 8005086:	4603      	mov	r3, r0
 8005088:	461a      	mov	r2, r3
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	4413      	add	r3, r2
 800508e:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 8005090:	89fb      	ldrh	r3, [r7, #14]
 8005092:	b2db      	uxtb	r3, r3
 8005094:	2200      	movs	r2, #0
 8005096:	f640 0117 	movw	r1, #2071	; 0x817
 800509a:	4618      	mov	r0, r3
 800509c:	f001 fc28 	bl	80068f0 <CODEC_IO_Write>
 80050a0:	4603      	mov	r3, r0
 80050a2:	461a      	mov	r2, r3
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	4413      	add	r3, r2
 80050a8:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 80050aa:	89fb      	ldrh	r3, [r7, #14]
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	2200      	movs	r2, #0
 80050b0:	f44f 7181 	mov.w	r1, #258	; 0x102
 80050b4:	4618      	mov	r0, r3
 80050b6:	f001 fc1b 	bl	80068f0 <CODEC_IO_Write>
 80050ba:	4603      	mov	r3, r0
 80050bc:	461a      	mov	r2, r3
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	4413      	add	r3, r2
 80050c2:	61fb      	str	r3, [r7, #28]

  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 80050c4:	89fb      	ldrh	r3, [r7, #14]
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	226c      	movs	r2, #108	; 0x6c
 80050ca:	2139      	movs	r1, #57	; 0x39
 80050cc:	4618      	mov	r0, r3
 80050ce:	f001 fc0f 	bl	80068f0 <CODEC_IO_Write>
 80050d2:	4603      	mov	r3, r0
 80050d4:	461a      	mov	r2, r3
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	4413      	add	r3, r2
 80050da:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 80050dc:	8afb      	ldrh	r3, [r7, #22]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00c      	beq.n	80050fc <wm8994_Init+0xb4>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 80050e2:	89fb      	ldrh	r3, [r7, #14]
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	2213      	movs	r2, #19
 80050e8:	2101      	movs	r1, #1
 80050ea:	4618      	mov	r0, r3
 80050ec:	f001 fc00 	bl	80068f0 <CODEC_IO_Write>
 80050f0:	4603      	mov	r3, r0
 80050f2:	461a      	mov	r2, r3
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	4413      	add	r3, r2
 80050f8:	61fb      	str	r3, [r7, #28]
 80050fa:	e00b      	b.n	8005114 <wm8994_Init+0xcc>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 80050fc:	89fb      	ldrh	r3, [r7, #14]
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	2203      	movs	r2, #3
 8005102:	2101      	movs	r1, #1
 8005104:	4618      	mov	r0, r3
 8005106:	f001 fbf3 	bl	80068f0 <CODEC_IO_Write>
 800510a:	4603      	mov	r3, r0
 800510c:	461a      	mov	r2, r3
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	4413      	add	r3, r2
 8005112:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 8005114:	2032      	movs	r0, #50	; 0x32
 8005116:	f7fd fb0d 	bl	8002734 <AUDIO_IO_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 800511a:	8b3b      	ldrh	r3, [r7, #24]
 800511c:	2b00      	cmp	r3, #0
 800511e:	f000 815f 	beq.w	80053e0 <wm8994_Init+0x398>
  {
    outputEnabled = 1;
 8005122:	4bae      	ldr	r3, [pc, #696]	; (80053dc <wm8994_Init+0x394>)
 8005124:	2201      	movs	r2, #1
 8005126:	601a      	str	r2, [r3, #0]

    switch (output_device)
 8005128:	8b3b      	ldrh	r3, [r7, #24]
 800512a:	2b03      	cmp	r3, #3
 800512c:	f000 808c 	beq.w	8005248 <wm8994_Init+0x200>
 8005130:	2b03      	cmp	r3, #3
 8005132:	f300 8111 	bgt.w	8005358 <wm8994_Init+0x310>
 8005136:	2b01      	cmp	r3, #1
 8005138:	d002      	beq.n	8005140 <wm8994_Init+0xf8>
 800513a:	2b02      	cmp	r3, #2
 800513c:	d042      	beq.n	80051c4 <wm8994_Init+0x17c>
 800513e:	e10b      	b.n	8005358 <wm8994_Init+0x310>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8005140:	89fb      	ldrh	r3, [r7, #14]
 8005142:	b2db      	uxtb	r3, r3
 8005144:	f640 420c 	movw	r2, #3084	; 0xc0c
 8005148:	2105      	movs	r1, #5
 800514a:	4618      	mov	r0, r3
 800514c:	f001 fbd0 	bl	80068f0 <CODEC_IO_Write>
 8005150:	4603      	mov	r3, r0
 8005152:	461a      	mov	r2, r3
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	4413      	add	r3, r2
 8005158:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 800515a:	89fb      	ldrh	r3, [r7, #14]
 800515c:	b2db      	uxtb	r3, r3
 800515e:	2200      	movs	r2, #0
 8005160:	f240 6101 	movw	r1, #1537	; 0x601
 8005164:	4618      	mov	r0, r3
 8005166:	f001 fbc3 	bl	80068f0 <CODEC_IO_Write>
 800516a:	4603      	mov	r3, r0
 800516c:	461a      	mov	r2, r3
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	4413      	add	r3, r2
 8005172:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8005174:	89fb      	ldrh	r3, [r7, #14]
 8005176:	b2db      	uxtb	r3, r3
 8005178:	2200      	movs	r2, #0
 800517a:	f240 6102 	movw	r1, #1538	; 0x602
 800517e:	4618      	mov	r0, r3
 8005180:	f001 fbb6 	bl	80068f0 <CODEC_IO_Write>
 8005184:	4603      	mov	r3, r0
 8005186:	461a      	mov	r2, r3
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	4413      	add	r3, r2
 800518c:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 800518e:	89fb      	ldrh	r3, [r7, #14]
 8005190:	b2db      	uxtb	r3, r3
 8005192:	2202      	movs	r2, #2
 8005194:	f240 6104 	movw	r1, #1540	; 0x604
 8005198:	4618      	mov	r0, r3
 800519a:	f001 fba9 	bl	80068f0 <CODEC_IO_Write>
 800519e:	4603      	mov	r3, r0
 80051a0:	461a      	mov	r2, r3
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	4413      	add	r3, r2
 80051a6:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 80051a8:	89fb      	ldrh	r3, [r7, #14]
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	2202      	movs	r2, #2
 80051ae:	f240 6105 	movw	r1, #1541	; 0x605
 80051b2:	4618      	mov	r0, r3
 80051b4:	f001 fb9c 	bl	80068f0 <CODEC_IO_Write>
 80051b8:	4603      	mov	r3, r0
 80051ba:	461a      	mov	r2, r3
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	4413      	add	r3, r2
 80051c0:	61fb      	str	r3, [r7, #28]
      break;
 80051c2:	e110      	b.n	80053e6 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80051c4:	89fb      	ldrh	r3, [r7, #14]
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	f240 3203 	movw	r2, #771	; 0x303
 80051cc:	2105      	movs	r1, #5
 80051ce:	4618      	mov	r0, r3
 80051d0:	f001 fb8e 	bl	80068f0 <CODEC_IO_Write>
 80051d4:	4603      	mov	r3, r0
 80051d6:	461a      	mov	r2, r3
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	4413      	add	r3, r2
 80051dc:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80051de:	89fb      	ldrh	r3, [r7, #14]
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	2201      	movs	r2, #1
 80051e4:	f240 6101 	movw	r1, #1537	; 0x601
 80051e8:	4618      	mov	r0, r3
 80051ea:	f001 fb81 	bl	80068f0 <CODEC_IO_Write>
 80051ee:	4603      	mov	r3, r0
 80051f0:	461a      	mov	r2, r3
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	4413      	add	r3, r2
 80051f6:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80051f8:	89fb      	ldrh	r3, [r7, #14]
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	2201      	movs	r2, #1
 80051fe:	f240 6102 	movw	r1, #1538	; 0x602
 8005202:	4618      	mov	r0, r3
 8005204:	f001 fb74 	bl	80068f0 <CODEC_IO_Write>
 8005208:	4603      	mov	r3, r0
 800520a:	461a      	mov	r2, r3
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	4413      	add	r3, r2
 8005210:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8005212:	89fb      	ldrh	r3, [r7, #14]
 8005214:	b2db      	uxtb	r3, r3
 8005216:	2200      	movs	r2, #0
 8005218:	f240 6104 	movw	r1, #1540	; 0x604
 800521c:	4618      	mov	r0, r3
 800521e:	f001 fb67 	bl	80068f0 <CODEC_IO_Write>
 8005222:	4603      	mov	r3, r0
 8005224:	461a      	mov	r2, r3
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	4413      	add	r3, r2
 800522a:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 800522c:	89fb      	ldrh	r3, [r7, #14]
 800522e:	b2db      	uxtb	r3, r3
 8005230:	2200      	movs	r2, #0
 8005232:	f240 6105 	movw	r1, #1541	; 0x605
 8005236:	4618      	mov	r0, r3
 8005238:	f001 fb5a 	bl	80068f0 <CODEC_IO_Write>
 800523c:	4603      	mov	r3, r0
 800523e:	461a      	mov	r2, r3
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	4413      	add	r3, r2
 8005244:	61fb      	str	r3, [r7, #28]
      break;
 8005246:	e0ce      	b.n	80053e6 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8005248:	8afb      	ldrh	r3, [r7, #22]
 800524a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800524e:	d141      	bne.n	80052d4 <wm8994_Init+0x28c>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8005250:	89fb      	ldrh	r3, [r7, #14]
 8005252:	b2db      	uxtb	r3, r3
 8005254:	f640 720f 	movw	r2, #3855	; 0xf0f
 8005258:	2105      	movs	r1, #5
 800525a:	4618      	mov	r0, r3
 800525c:	f001 fb48 	bl	80068f0 <CODEC_IO_Write>
 8005260:	4603      	mov	r3, r0
 8005262:	461a      	mov	r2, r3
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	4413      	add	r3, r2
 8005268:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 800526a:	89fb      	ldrh	r3, [r7, #14]
 800526c:	b2db      	uxtb	r3, r3
 800526e:	2203      	movs	r2, #3
 8005270:	f240 6101 	movw	r1, #1537	; 0x601
 8005274:	4618      	mov	r0, r3
 8005276:	f001 fb3b 	bl	80068f0 <CODEC_IO_Write>
 800527a:	4603      	mov	r3, r0
 800527c:	461a      	mov	r2, r3
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	4413      	add	r3, r2
 8005282:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 8005284:	89fb      	ldrh	r3, [r7, #14]
 8005286:	b2db      	uxtb	r3, r3
 8005288:	2203      	movs	r2, #3
 800528a:	f240 6102 	movw	r1, #1538	; 0x602
 800528e:	4618      	mov	r0, r3
 8005290:	f001 fb2e 	bl	80068f0 <CODEC_IO_Write>
 8005294:	4603      	mov	r3, r0
 8005296:	461a      	mov	r2, r3
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	4413      	add	r3, r2
 800529c:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 800529e:	89fb      	ldrh	r3, [r7, #14]
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	2203      	movs	r2, #3
 80052a4:	f240 6104 	movw	r1, #1540	; 0x604
 80052a8:	4618      	mov	r0, r3
 80052aa:	f001 fb21 	bl	80068f0 <CODEC_IO_Write>
 80052ae:	4603      	mov	r3, r0
 80052b0:	461a      	mov	r2, r3
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	4413      	add	r3, r2
 80052b6:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 80052b8:	89fb      	ldrh	r3, [r7, #14]
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	2203      	movs	r2, #3
 80052be:	f240 6105 	movw	r1, #1541	; 0x605
 80052c2:	4618      	mov	r0, r3
 80052c4:	f001 fb14 	bl	80068f0 <CODEC_IO_Write>
 80052c8:	4603      	mov	r3, r0
 80052ca:	461a      	mov	r2, r3
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	4413      	add	r3, r2
 80052d0:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
        
        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
      }
      break;
 80052d2:	e088      	b.n	80053e6 <wm8994_Init+0x39e>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 80052d4:	89fb      	ldrh	r3, [r7, #14]
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	f640 720f 	movw	r2, #3855	; 0xf0f
 80052dc:	2105      	movs	r1, #5
 80052de:	4618      	mov	r0, r3
 80052e0:	f001 fb06 	bl	80068f0 <CODEC_IO_Write>
 80052e4:	4603      	mov	r3, r0
 80052e6:	461a      	mov	r2, r3
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	4413      	add	r3, r2
 80052ec:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80052ee:	89fb      	ldrh	r3, [r7, #14]
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	2201      	movs	r2, #1
 80052f4:	f240 6101 	movw	r1, #1537	; 0x601
 80052f8:	4618      	mov	r0, r3
 80052fa:	f001 faf9 	bl	80068f0 <CODEC_IO_Write>
 80052fe:	4603      	mov	r3, r0
 8005300:	461a      	mov	r2, r3
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	4413      	add	r3, r2
 8005306:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8005308:	89fb      	ldrh	r3, [r7, #14]
 800530a:	b2db      	uxtb	r3, r3
 800530c:	2201      	movs	r2, #1
 800530e:	f240 6102 	movw	r1, #1538	; 0x602
 8005312:	4618      	mov	r0, r3
 8005314:	f001 faec 	bl	80068f0 <CODEC_IO_Write>
 8005318:	4603      	mov	r3, r0
 800531a:	461a      	mov	r2, r3
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	4413      	add	r3, r2
 8005320:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8005322:	89fb      	ldrh	r3, [r7, #14]
 8005324:	b2db      	uxtb	r3, r3
 8005326:	2202      	movs	r2, #2
 8005328:	f240 6104 	movw	r1, #1540	; 0x604
 800532c:	4618      	mov	r0, r3
 800532e:	f001 fadf 	bl	80068f0 <CODEC_IO_Write>
 8005332:	4603      	mov	r3, r0
 8005334:	461a      	mov	r2, r3
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	4413      	add	r3, r2
 800533a:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 800533c:	89fb      	ldrh	r3, [r7, #14]
 800533e:	b2db      	uxtb	r3, r3
 8005340:	2202      	movs	r2, #2
 8005342:	f240 6105 	movw	r1, #1541	; 0x605
 8005346:	4618      	mov	r0, r3
 8005348:	f001 fad2 	bl	80068f0 <CODEC_IO_Write>
 800534c:	4603      	mov	r3, r0
 800534e:	461a      	mov	r2, r3
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	4413      	add	r3, r2
 8005354:	61fb      	str	r3, [r7, #28]
      break;
 8005356:	e046      	b.n	80053e6 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8005358:	89fb      	ldrh	r3, [r7, #14]
 800535a:	b2db      	uxtb	r3, r3
 800535c:	f240 3203 	movw	r2, #771	; 0x303
 8005360:	2105      	movs	r1, #5
 8005362:	4618      	mov	r0, r3
 8005364:	f001 fac4 	bl	80068f0 <CODEC_IO_Write>
 8005368:	4603      	mov	r3, r0
 800536a:	461a      	mov	r2, r3
 800536c:	69fb      	ldr	r3, [r7, #28]
 800536e:	4413      	add	r3, r2
 8005370:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8005372:	89fb      	ldrh	r3, [r7, #14]
 8005374:	b2db      	uxtb	r3, r3
 8005376:	2201      	movs	r2, #1
 8005378:	f240 6101 	movw	r1, #1537	; 0x601
 800537c:	4618      	mov	r0, r3
 800537e:	f001 fab7 	bl	80068f0 <CODEC_IO_Write>
 8005382:	4603      	mov	r3, r0
 8005384:	461a      	mov	r2, r3
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	4413      	add	r3, r2
 800538a:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 800538c:	89fb      	ldrh	r3, [r7, #14]
 800538e:	b2db      	uxtb	r3, r3
 8005390:	2201      	movs	r2, #1
 8005392:	f240 6102 	movw	r1, #1538	; 0x602
 8005396:	4618      	mov	r0, r3
 8005398:	f001 faaa 	bl	80068f0 <CODEC_IO_Write>
 800539c:	4603      	mov	r3, r0
 800539e:	461a      	mov	r2, r3
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	4413      	add	r3, r2
 80053a4:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80053a6:	89fb      	ldrh	r3, [r7, #14]
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	2200      	movs	r2, #0
 80053ac:	f240 6104 	movw	r1, #1540	; 0x604
 80053b0:	4618      	mov	r0, r3
 80053b2:	f001 fa9d 	bl	80068f0 <CODEC_IO_Write>
 80053b6:	4603      	mov	r3, r0
 80053b8:	461a      	mov	r2, r3
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	4413      	add	r3, r2
 80053be:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80053c0:	89fb      	ldrh	r3, [r7, #14]
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	2200      	movs	r2, #0
 80053c6:	f240 6105 	movw	r1, #1541	; 0x605
 80053ca:	4618      	mov	r0, r3
 80053cc:	f001 fa90 	bl	80068f0 <CODEC_IO_Write>
 80053d0:	4603      	mov	r3, r0
 80053d2:	461a      	mov	r2, r3
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	4413      	add	r3, r2
 80053d8:	61fb      	str	r3, [r7, #28]
      break;
 80053da:	e004      	b.n	80053e6 <wm8994_Init+0x39e>
 80053dc:	20000d24 	.word	0x20000d24
    }
  }
  else
  {
    outputEnabled = 0;
 80053e0:	4ba5      	ldr	r3, [pc, #660]	; (8005678 <wm8994_Init+0x630>)
 80053e2:	2200      	movs	r2, #0
 80053e4:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 80053e6:	8afb      	ldrh	r3, [r7, #22]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	f000 81c3 	beq.w	8005774 <wm8994_Init+0x72c>
  {
    inputEnabled = 1;
 80053ee:	4ba3      	ldr	r3, [pc, #652]	; (800567c <wm8994_Init+0x634>)
 80053f0:	2201      	movs	r2, #1
 80053f2:	601a      	str	r2, [r3, #0]
    switch (input_device)
 80053f4:	8afb      	ldrh	r3, [r7, #22]
 80053f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053fa:	f000 8141 	beq.w	8005680 <wm8994_Init+0x638>
 80053fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005402:	f300 81b3 	bgt.w	800576c <wm8994_Init+0x724>
 8005406:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800540a:	d05a      	beq.n	80054c2 <wm8994_Init+0x47a>
 800540c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005410:	f300 81ac 	bgt.w	800576c <wm8994_Init+0x724>
 8005414:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005418:	f000 80de 	beq.w	80055d8 <wm8994_Init+0x590>
 800541c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005420:	f040 81a4 	bne.w	800576c <wm8994_Init+0x724>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 8005424:	89fb      	ldrh	r3, [r7, #14]
 8005426:	b2db      	uxtb	r3, r3
 8005428:	f44f 6243 	mov.w	r2, #3120	; 0xc30
 800542c:	2104      	movs	r1, #4
 800542e:	4618      	mov	r0, r3
 8005430:	f001 fa5e 	bl	80068f0 <CODEC_IO_Write>
 8005434:	4603      	mov	r3, r0
 8005436:	461a      	mov	r2, r3
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	4413      	add	r3, r2
 800543c:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 800543e:	89fb      	ldrh	r3, [r7, #14]
 8005440:	b2db      	uxtb	r3, r3
 8005442:	22db      	movs	r2, #219	; 0xdb
 8005444:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8005448:	4618      	mov	r0, r3
 800544a:	f001 fa51 	bl	80068f0 <CODEC_IO_Write>
 800544e:	4603      	mov	r3, r0
 8005450:	461a      	mov	r2, r3
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	4413      	add	r3, r2
 8005456:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 8005458:	89fb      	ldrh	r3, [r7, #14]
 800545a:	b2db      	uxtb	r3, r3
 800545c:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8005460:	2102      	movs	r1, #2
 8005462:	4618      	mov	r0, r3
 8005464:	f001 fa44 	bl	80068f0 <CODEC_IO_Write>
 8005468:	4603      	mov	r3, r0
 800546a:	461a      	mov	r2, r3
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	4413      	add	r3, r2
 8005470:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8005472:	89fb      	ldrh	r3, [r7, #14]
 8005474:	b2db      	uxtb	r3, r3
 8005476:	2202      	movs	r2, #2
 8005478:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 800547c:	4618      	mov	r0, r3
 800547e:	f001 fa37 	bl	80068f0 <CODEC_IO_Write>
 8005482:	4603      	mov	r3, r0
 8005484:	461a      	mov	r2, r3
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	4413      	add	r3, r2
 800548a:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 800548c:	89fb      	ldrh	r3, [r7, #14]
 800548e:	b2db      	uxtb	r3, r3
 8005490:	2202      	movs	r2, #2
 8005492:	f240 6109 	movw	r1, #1545	; 0x609
 8005496:	4618      	mov	r0, r3
 8005498:	f001 fa2a 	bl	80068f0 <CODEC_IO_Write>
 800549c:	4603      	mov	r3, r0
 800549e:	461a      	mov	r2, r3
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	4413      	add	r3, r2
 80054a4:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 80054a6:	89fb      	ldrh	r3, [r7, #14]
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	220e      	movs	r2, #14
 80054ac:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80054b0:	4618      	mov	r0, r3
 80054b2:	f001 fa1d 	bl	80068f0 <CODEC_IO_Write>
 80054b6:	4603      	mov	r3, r0
 80054b8:	461a      	mov	r2, r3
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	4413      	add	r3, r2
 80054be:	61fb      	str	r3, [r7, #28]
      break;
 80054c0:	e15b      	b.n	800577a <wm8994_Init+0x732>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 80054c2:	89fb      	ldrh	r3, [r7, #14]
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	2211      	movs	r2, #17
 80054c8:	2128      	movs	r1, #40	; 0x28
 80054ca:	4618      	mov	r0, r3
 80054cc:	f001 fa10 	bl	80068f0 <CODEC_IO_Write>
 80054d0:	4603      	mov	r3, r0
 80054d2:	461a      	mov	r2, r3
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	4413      	add	r3, r2
 80054d8:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1L_TO_MIXINL and +0dB on IN1L PGA output */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0020);
 80054da:	89fb      	ldrh	r3, [r7, #14]
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	2220      	movs	r2, #32
 80054e0:	2129      	movs	r1, #41	; 0x29
 80054e2:	4618      	mov	r0, r3
 80054e4:	f001 fa04 	bl	80068f0 <CODEC_IO_Write>
 80054e8:	4603      	mov	r3, r0
 80054ea:	461a      	mov	r2, r3
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	4413      	add	r3, r2
 80054f0:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0020);
 80054f2:	89fb      	ldrh	r3, [r7, #14]
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	2220      	movs	r2, #32
 80054f8:	212a      	movs	r1, #42	; 0x2a
 80054fa:	4618      	mov	r0, r3
 80054fc:	f001 f9f8 	bl	80068f0 <CODEC_IO_Write>
 8005500:	4603      	mov	r3, r0
 8005502:	461a      	mov	r2, r3
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	4413      	add	r3, r2
 8005508:	61fb      	str	r3, [r7, #28]
      counter += CODEC_IO_Write(DeviceAddr, 0x2B, 0x0000);
 800550a:	89fb      	ldrh	r3, [r7, #14]
 800550c:	b2db      	uxtb	r3, r3
 800550e:	2200      	movs	r2, #0
 8005510:	212b      	movs	r1, #43	; 0x2b
 8005512:	4618      	mov	r0, r3
 8005514:	f001 f9ec 	bl	80068f0 <CODEC_IO_Write>
 8005518:	4603      	mov	r3, r0
 800551a:	461a      	mov	r2, r3
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	4413      	add	r3, r2
 8005520:	61fb      	str	r3, [r7, #28]
      counter += CODEC_IO_Write(DeviceAddr, 0x2C, 0x0000);
 8005522:	89fb      	ldrh	r3, [r7, #14]
 8005524:	b2db      	uxtb	r3, r3
 8005526:	2200      	movs	r2, #0
 8005528:	212c      	movs	r1, #44	; 0x2c
 800552a:	4618      	mov	r0, r3
 800552c:	f001 f9e0 	bl	80068f0 <CODEC_IO_Write>
 8005530:	4603      	mov	r3, r0
 8005532:	461a      	mov	r2, r3
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	4413      	add	r3, r2
 8005538:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 800553a:	89fb      	ldrh	r3, [r7, #14]
 800553c:	b2db      	uxtb	r3, r3
 800553e:	f240 3203 	movw	r2, #771	; 0x303
 8005542:	2104      	movs	r1, #4
 8005544:	4618      	mov	r0, r3
 8005546:	f001 f9d3 	bl	80068f0 <CODEC_IO_Write>
 800554a:	4603      	mov	r3, r0
 800554c:	461a      	mov	r2, r3
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	4413      	add	r3, r2
 8005552:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8005554:	89fb      	ldrh	r3, [r7, #14]
 8005556:	b2db      	uxtb	r3, r3
 8005558:	22db      	movs	r2, #219	; 0xdb
 800555a:	f44f 6188 	mov.w	r1, #1088	; 0x440
 800555e:	4618      	mov	r0, r3
 8005560:	f001 f9c6 	bl	80068f0 <CODEC_IO_Write>
 8005564:	4603      	mov	r3, r0
 8005566:	461a      	mov	r2, r3
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	4413      	add	r3, r2
 800556c:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 800556e:	89fb      	ldrh	r3, [r7, #14]
 8005570:	b2db      	uxtb	r3, r3
 8005572:	f246 3250 	movw	r2, #25424	; 0x6350
 8005576:	2102      	movs	r1, #2
 8005578:	4618      	mov	r0, r3
 800557a:	f001 f9b9 	bl	80068f0 <CODEC_IO_Write>
 800557e:	4603      	mov	r3, r0
 8005580:	461a      	mov	r2, r3
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	4413      	add	r3, r2
 8005586:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8005588:	89fb      	ldrh	r3, [r7, #14]
 800558a:	b2db      	uxtb	r3, r3
 800558c:	2202      	movs	r2, #2
 800558e:	f240 6106 	movw	r1, #1542	; 0x606
 8005592:	4618      	mov	r0, r3
 8005594:	f001 f9ac 	bl	80068f0 <CODEC_IO_Write>
 8005598:	4603      	mov	r3, r0
 800559a:	461a      	mov	r2, r3
 800559c:	69fb      	ldr	r3, [r7, #28]
 800559e:	4413      	add	r3, r2
 80055a0:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80055a2:	89fb      	ldrh	r3, [r7, #14]
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	2202      	movs	r2, #2
 80055a8:	f240 6107 	movw	r1, #1543	; 0x607
 80055ac:	4618      	mov	r0, r3
 80055ae:	f001 f99f 	bl	80068f0 <CODEC_IO_Write>
 80055b2:	4603      	mov	r3, r0
 80055b4:	461a      	mov	r2, r3
 80055b6:	69fb      	ldr	r3, [r7, #28]
 80055b8:	4413      	add	r3, r2
 80055ba:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80055bc:	89fb      	ldrh	r3, [r7, #14]
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	220d      	movs	r2, #13
 80055c2:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80055c6:	4618      	mov	r0, r3
 80055c8:	f001 f992 	bl	80068f0 <CODEC_IO_Write>
 80055cc:	4603      	mov	r3, r0
 80055ce:	461a      	mov	r2, r3
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	4413      	add	r3, r2
 80055d4:	61fb      	str	r3, [r7, #28]
      break;
 80055d6:	e0d0      	b.n	800577a <wm8994_Init+0x732>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 80055d8:	89fb      	ldrh	r3, [r7, #14]
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	f44f 7243 	mov.w	r2, #780	; 0x30c
 80055e0:	2104      	movs	r1, #4
 80055e2:	4618      	mov	r0, r3
 80055e4:	f001 f984 	bl	80068f0 <CODEC_IO_Write>
 80055e8:	4603      	mov	r3, r0
 80055ea:	461a      	mov	r2, r3
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	4413      	add	r3, r2
 80055f0:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80055f2:	89fb      	ldrh	r3, [r7, #14]
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	22db      	movs	r2, #219	; 0xdb
 80055f8:	f44f 6188 	mov.w	r1, #1088	; 0x440
 80055fc:	4618      	mov	r0, r3
 80055fe:	f001 f977 	bl	80068f0 <CODEC_IO_Write>
 8005602:	4603      	mov	r3, r0
 8005604:	461a      	mov	r2, r3
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	4413      	add	r3, r2
 800560a:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 800560c:	89fb      	ldrh	r3, [r7, #14]
 800560e:	b2db      	uxtb	r3, r3
 8005610:	f246 3250 	movw	r2, #25424	; 0x6350
 8005614:	2102      	movs	r1, #2
 8005616:	4618      	mov	r0, r3
 8005618:	f001 f96a 	bl	80068f0 <CODEC_IO_Write>
 800561c:	4603      	mov	r3, r0
 800561e:	461a      	mov	r2, r3
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	4413      	add	r3, r2
 8005624:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8005626:	89fb      	ldrh	r3, [r7, #14]
 8005628:	b2db      	uxtb	r3, r3
 800562a:	2202      	movs	r2, #2
 800562c:	f240 6106 	movw	r1, #1542	; 0x606
 8005630:	4618      	mov	r0, r3
 8005632:	f001 f95d 	bl	80068f0 <CODEC_IO_Write>
 8005636:	4603      	mov	r3, r0
 8005638:	461a      	mov	r2, r3
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	4413      	add	r3, r2
 800563e:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8005640:	89fb      	ldrh	r3, [r7, #14]
 8005642:	b2db      	uxtb	r3, r3
 8005644:	2202      	movs	r2, #2
 8005646:	f240 6107 	movw	r1, #1543	; 0x607
 800564a:	4618      	mov	r0, r3
 800564c:	f001 f950 	bl	80068f0 <CODEC_IO_Write>
 8005650:	4603      	mov	r3, r0
 8005652:	461a      	mov	r2, r3
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	4413      	add	r3, r2
 8005658:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 800565a:	89fb      	ldrh	r3, [r7, #14]
 800565c:	b2db      	uxtb	r3, r3
 800565e:	220d      	movs	r2, #13
 8005660:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8005664:	4618      	mov	r0, r3
 8005666:	f001 f943 	bl	80068f0 <CODEC_IO_Write>
 800566a:	4603      	mov	r3, r0
 800566c:	461a      	mov	r2, r3
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	4413      	add	r3, r2
 8005672:	61fb      	str	r3, [r7, #28]
      break; 
 8005674:	e081      	b.n	800577a <wm8994_Init+0x732>
 8005676:	bf00      	nop
 8005678:	20000d24 	.word	0x20000d24
 800567c:	20000d28 	.word	0x20000d28
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 8005680:	89fb      	ldrh	r3, [r7, #14]
 8005682:	b2db      	uxtb	r3, r3
 8005684:	f640 723c 	movw	r2, #3900	; 0xf3c
 8005688:	2104      	movs	r1, #4
 800568a:	4618      	mov	r0, r3
 800568c:	f001 f930 	bl	80068f0 <CODEC_IO_Write>
 8005690:	4603      	mov	r3, r0
 8005692:	461a      	mov	r2, r3
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	4413      	add	r3, r2
 8005698:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 800569a:	89fb      	ldrh	r3, [r7, #14]
 800569c:	b2db      	uxtb	r3, r3
 800569e:	22db      	movs	r2, #219	; 0xdb
 80056a0:	f44f 618a 	mov.w	r1, #1104	; 0x450
 80056a4:	4618      	mov	r0, r3
 80056a6:	f001 f923 	bl	80068f0 <CODEC_IO_Write>
 80056aa:	4603      	mov	r3, r0
 80056ac:	461a      	mov	r2, r3
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	4413      	add	r3, r2
 80056b2:	61fb      	str	r3, [r7, #28]
      
      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80056b4:	89fb      	ldrh	r3, [r7, #14]
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	22db      	movs	r2, #219	; 0xdb
 80056ba:	f44f 6188 	mov.w	r1, #1088	; 0x440
 80056be:	4618      	mov	r0, r3
 80056c0:	f001 f916 	bl	80068f0 <CODEC_IO_Write>
 80056c4:	4603      	mov	r3, r0
 80056c6:	461a      	mov	r2, r3
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	4413      	add	r3, r2
 80056cc:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 80056ce:	89fb      	ldrh	r3, [r7, #14]
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	f246 32a0 	movw	r2, #25504	; 0x63a0
 80056d6:	2102      	movs	r1, #2
 80056d8:	4618      	mov	r0, r3
 80056da:	f001 f909 	bl	80068f0 <CODEC_IO_Write>
 80056de:	4603      	mov	r3, r0
 80056e0:	461a      	mov	r2, r3
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	4413      	add	r3, r2
 80056e6:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80056e8:	89fb      	ldrh	r3, [r7, #14]
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	2202      	movs	r2, #2
 80056ee:	f240 6106 	movw	r1, #1542	; 0x606
 80056f2:	4618      	mov	r0, r3
 80056f4:	f001 f8fc 	bl	80068f0 <CODEC_IO_Write>
 80056f8:	4603      	mov	r3, r0
 80056fa:	461a      	mov	r2, r3
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	4413      	add	r3, r2
 8005700:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8005702:	89fb      	ldrh	r3, [r7, #14]
 8005704:	b2db      	uxtb	r3, r3
 8005706:	2202      	movs	r2, #2
 8005708:	f240 6107 	movw	r1, #1543	; 0x607
 800570c:	4618      	mov	r0, r3
 800570e:	f001 f8ef 	bl	80068f0 <CODEC_IO_Write>
 8005712:	4603      	mov	r3, r0
 8005714:	461a      	mov	r2, r3
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	4413      	add	r3, r2
 800571a:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 800571c:	89fb      	ldrh	r3, [r7, #14]
 800571e:	b2db      	uxtb	r3, r3
 8005720:	2202      	movs	r2, #2
 8005722:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8005726:	4618      	mov	r0, r3
 8005728:	f001 f8e2 	bl	80068f0 <CODEC_IO_Write>
 800572c:	4603      	mov	r3, r0
 800572e:	461a      	mov	r2, r3
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	4413      	add	r3, r2
 8005734:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8005736:	89fb      	ldrh	r3, [r7, #14]
 8005738:	b2db      	uxtb	r3, r3
 800573a:	2202      	movs	r2, #2
 800573c:	f240 6109 	movw	r1, #1545	; 0x609
 8005740:	4618      	mov	r0, r3
 8005742:	f001 f8d5 	bl	80068f0 <CODEC_IO_Write>
 8005746:	4603      	mov	r3, r0
 8005748:	461a      	mov	r2, r3
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	4413      	add	r3, r2
 800574e:	61fb      	str	r3, [r7, #28]
      
      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8005750:	89fb      	ldrh	r3, [r7, #14]
 8005752:	b2db      	uxtb	r3, r3
 8005754:	220d      	movs	r2, #13
 8005756:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800575a:	4618      	mov	r0, r3
 800575c:	f001 f8c8 	bl	80068f0 <CODEC_IO_Write>
 8005760:	4603      	mov	r3, r0
 8005762:	461a      	mov	r2, r3
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	4413      	add	r3, r2
 8005768:	61fb      	str	r3, [r7, #28]
      break;    
 800576a:	e006      	b.n	800577a <wm8994_Init+0x732>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	3301      	adds	r3, #1
 8005770:	61fb      	str	r3, [r7, #28]
      break;
 8005772:	e002      	b.n	800577a <wm8994_Init+0x732>
    }
  }
  else
  {
    inputEnabled = 0;
 8005774:	4ba4      	ldr	r3, [pc, #656]	; (8005a08 <wm8994_Init+0x9c0>)
 8005776:	2200      	movs	r2, #0
 8005778:	601a      	str	r2, [r3, #0]
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4aa3      	ldr	r2, [pc, #652]	; (8005a0c <wm8994_Init+0x9c4>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d079      	beq.n	8005876 <wm8994_Init+0x82e>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4aa1      	ldr	r2, [pc, #644]	; (8005a0c <wm8994_Init+0x9c4>)
 8005786:	4293      	cmp	r3, r2
 8005788:	f200 80ad 	bhi.w	80058e6 <wm8994_Init+0x89e>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8005792:	4293      	cmp	r3, r2
 8005794:	d061      	beq.n	800585a <wm8994_Init+0x812>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800579c:	4293      	cmp	r3, r2
 800579e:	f200 80a2 	bhi.w	80058e6 <wm8994_Init+0x89e>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f64a 4244 	movw	r2, #44100	; 0xac44
 80057a8:	4293      	cmp	r3, r2
 80057aa:	f000 808e 	beq.w	80058ca <wm8994_Init+0x882>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f64a 4244 	movw	r2, #44100	; 0xac44
 80057b4:	4293      	cmp	r3, r2
 80057b6:	f200 8096 	bhi.w	80058e6 <wm8994_Init+0x89e>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80057c0:	d03d      	beq.n	800583e <wm8994_Init+0x7f6>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80057c8:	f200 808d 	bhi.w	80058e6 <wm8994_Init+0x89e>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f245 6222 	movw	r2, #22050	; 0x5622
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d06b      	beq.n	80058ae <wm8994_Init+0x866>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f245 6222 	movw	r2, #22050	; 0x5622
 80057dc:	4293      	cmp	r3, r2
 80057de:	f200 8082 	bhi.w	80058e6 <wm8994_Init+0x89e>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80057e8:	d01b      	beq.n	8005822 <wm8994_Init+0x7da>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80057f0:	d879      	bhi.n	80058e6 <wm8994_Init+0x89e>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80057f8:	d005      	beq.n	8005806 <wm8994_Init+0x7be>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f642 3211 	movw	r2, #11025	; 0x2b11
 8005800:	4293      	cmp	r3, r2
 8005802:	d046      	beq.n	8005892 <wm8994_Init+0x84a>
 8005804:	e06f      	b.n	80058e6 <wm8994_Init+0x89e>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8005806:	89fb      	ldrh	r3, [r7, #14]
 8005808:	b2db      	uxtb	r3, r3
 800580a:	2203      	movs	r2, #3
 800580c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8005810:	4618      	mov	r0, r3
 8005812:	f001 f86d 	bl	80068f0 <CODEC_IO_Write>
 8005816:	4603      	mov	r3, r0
 8005818:	461a      	mov	r2, r3
 800581a:	69fb      	ldr	r3, [r7, #28]
 800581c:	4413      	add	r3, r2
 800581e:	61fb      	str	r3, [r7, #28]
    break;
 8005820:	e06f      	b.n	8005902 <wm8994_Init+0x8ba>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8005822:	89fb      	ldrh	r3, [r7, #14]
 8005824:	b2db      	uxtb	r3, r3
 8005826:	2233      	movs	r2, #51	; 0x33
 8005828:	f44f 7104 	mov.w	r1, #528	; 0x210
 800582c:	4618      	mov	r0, r3
 800582e:	f001 f85f 	bl	80068f0 <CODEC_IO_Write>
 8005832:	4603      	mov	r3, r0
 8005834:	461a      	mov	r2, r3
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	4413      	add	r3, r2
 800583a:	61fb      	str	r3, [r7, #28]
    break;
 800583c:	e061      	b.n	8005902 <wm8994_Init+0x8ba>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 800583e:	89fb      	ldrh	r3, [r7, #14]
 8005840:	b2db      	uxtb	r3, r3
 8005842:	2263      	movs	r2, #99	; 0x63
 8005844:	f44f 7104 	mov.w	r1, #528	; 0x210
 8005848:	4618      	mov	r0, r3
 800584a:	f001 f851 	bl	80068f0 <CODEC_IO_Write>
 800584e:	4603      	mov	r3, r0
 8005850:	461a      	mov	r2, r3
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	4413      	add	r3, r2
 8005856:	61fb      	str	r3, [r7, #28]
    break;
 8005858:	e053      	b.n	8005902 <wm8994_Init+0x8ba>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 800585a:	89fb      	ldrh	r3, [r7, #14]
 800585c:	b2db      	uxtb	r3, r3
 800585e:	2283      	movs	r2, #131	; 0x83
 8005860:	f44f 7104 	mov.w	r1, #528	; 0x210
 8005864:	4618      	mov	r0, r3
 8005866:	f001 f843 	bl	80068f0 <CODEC_IO_Write>
 800586a:	4603      	mov	r3, r0
 800586c:	461a      	mov	r2, r3
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	4413      	add	r3, r2
 8005872:	61fb      	str	r3, [r7, #28]
    break;
 8005874:	e045      	b.n	8005902 <wm8994_Init+0x8ba>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8005876:	89fb      	ldrh	r3, [r7, #14]
 8005878:	b2db      	uxtb	r3, r3
 800587a:	22a3      	movs	r2, #163	; 0xa3
 800587c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8005880:	4618      	mov	r0, r3
 8005882:	f001 f835 	bl	80068f0 <CODEC_IO_Write>
 8005886:	4603      	mov	r3, r0
 8005888:	461a      	mov	r2, r3
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	4413      	add	r3, r2
 800588e:	61fb      	str	r3, [r7, #28]
    break;
 8005890:	e037      	b.n	8005902 <wm8994_Init+0x8ba>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8005892:	89fb      	ldrh	r3, [r7, #14]
 8005894:	b2db      	uxtb	r3, r3
 8005896:	2213      	movs	r2, #19
 8005898:	f44f 7104 	mov.w	r1, #528	; 0x210
 800589c:	4618      	mov	r0, r3
 800589e:	f001 f827 	bl	80068f0 <CODEC_IO_Write>
 80058a2:	4603      	mov	r3, r0
 80058a4:	461a      	mov	r2, r3
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	4413      	add	r3, r2
 80058aa:	61fb      	str	r3, [r7, #28]
    break;
 80058ac:	e029      	b.n	8005902 <wm8994_Init+0x8ba>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 80058ae:	89fb      	ldrh	r3, [r7, #14]
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	2243      	movs	r2, #67	; 0x43
 80058b4:	f44f 7104 	mov.w	r1, #528	; 0x210
 80058b8:	4618      	mov	r0, r3
 80058ba:	f001 f819 	bl	80068f0 <CODEC_IO_Write>
 80058be:	4603      	mov	r3, r0
 80058c0:	461a      	mov	r2, r3
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	4413      	add	r3, r2
 80058c6:	61fb      	str	r3, [r7, #28]
    break;
 80058c8:	e01b      	b.n	8005902 <wm8994_Init+0x8ba>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 80058ca:	89fb      	ldrh	r3, [r7, #14]
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	2273      	movs	r2, #115	; 0x73
 80058d0:	f44f 7104 	mov.w	r1, #528	; 0x210
 80058d4:	4618      	mov	r0, r3
 80058d6:	f001 f80b 	bl	80068f0 <CODEC_IO_Write>
 80058da:	4603      	mov	r3, r0
 80058dc:	461a      	mov	r2, r3
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	4413      	add	r3, r2
 80058e2:	61fb      	str	r3, [r7, #28]
    break; 
 80058e4:	e00d      	b.n	8005902 <wm8994_Init+0x8ba>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80058e6:	89fb      	ldrh	r3, [r7, #14]
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	2283      	movs	r2, #131	; 0x83
 80058ec:	f44f 7104 	mov.w	r1, #528	; 0x210
 80058f0:	4618      	mov	r0, r3
 80058f2:	f000 fffd 	bl	80068f0 <CODEC_IO_Write>
 80058f6:	4603      	mov	r3, r0
 80058f8:	461a      	mov	r2, r3
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	4413      	add	r3, r2
 80058fe:	61fb      	str	r3, [r7, #28]
    break; 
 8005900:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8005902:	8afb      	ldrh	r3, [r7, #22]
 8005904:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005908:	d10e      	bne.n	8005928 <wm8994_Init+0x8e0>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 800590a:	89fb      	ldrh	r3, [r7, #14]
 800590c:	b2db      	uxtb	r3, r3
 800590e:	f244 0218 	movw	r2, #16408	; 0x4018
 8005912:	f44f 7140 	mov.w	r1, #768	; 0x300
 8005916:	4618      	mov	r0, r3
 8005918:	f000 ffea 	bl	80068f0 <CODEC_IO_Write>
 800591c:	4603      	mov	r3, r0
 800591e:	461a      	mov	r2, r3
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	4413      	add	r3, r2
 8005924:	61fb      	str	r3, [r7, #28]
 8005926:	e00d      	b.n	8005944 <wm8994_Init+0x8fc>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 8005928:	89fb      	ldrh	r3, [r7, #14]
 800592a:	b2db      	uxtb	r3, r3
 800592c:	f244 0210 	movw	r2, #16400	; 0x4010
 8005930:	f44f 7140 	mov.w	r1, #768	; 0x300
 8005934:	4618      	mov	r0, r3
 8005936:	f000 ffdb 	bl	80068f0 <CODEC_IO_Write>
 800593a:	4603      	mov	r3, r0
 800593c:	461a      	mov	r2, r3
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	4413      	add	r3, r2
 8005942:	61fb      	str	r3, [r7, #28]
  }
  
  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 8005944:	89fb      	ldrh	r3, [r7, #14]
 8005946:	b2db      	uxtb	r3, r3
 8005948:	2200      	movs	r2, #0
 800594a:	f240 3102 	movw	r1, #770	; 0x302
 800594e:	4618      	mov	r0, r3
 8005950:	f000 ffce 	bl	80068f0 <CODEC_IO_Write>
 8005954:	4603      	mov	r3, r0
 8005956:	461a      	mov	r2, r3
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	4413      	add	r3, r2
 800595c:	61fb      	str	r3, [r7, #28]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 800595e:	89fb      	ldrh	r3, [r7, #14]
 8005960:	b2db      	uxtb	r3, r3
 8005962:	220a      	movs	r2, #10
 8005964:	f44f 7102 	mov.w	r1, #520	; 0x208
 8005968:	4618      	mov	r0, r3
 800596a:	f000 ffc1 	bl	80068f0 <CODEC_IO_Write>
 800596e:	4603      	mov	r3, r0
 8005970:	461a      	mov	r2, r3
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	4413      	add	r3, r2
 8005976:	61fb      	str	r3, [r7, #28]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 8005978:	89fb      	ldrh	r3, [r7, #14]
 800597a:	b2db      	uxtb	r3, r3
 800597c:	2201      	movs	r2, #1
 800597e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005982:	4618      	mov	r0, r3
 8005984:	f000 ffb4 	bl	80068f0 <CODEC_IO_Write>
 8005988:	4603      	mov	r3, r0
 800598a:	461a      	mov	r2, r3
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	4413      	add	r3, r2
 8005990:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 8005992:	8b3b      	ldrh	r3, [r7, #24]
 8005994:	2b00      	cmp	r3, #0
 8005996:	f000 817b 	beq.w	8005c90 <wm8994_Init+0xc48>
  {
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 800599a:	8b3b      	ldrh	r3, [r7, #24]
 800599c:	2b02      	cmp	r3, #2
 800599e:	d157      	bne.n	8005a50 <wm8994_Init+0xa08>
    {      
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0100);
 80059a0:	89fb      	ldrh	r3, [r7, #14]
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059a8:	212d      	movs	r1, #45	; 0x2d
 80059aa:	4618      	mov	r0, r3
 80059ac:	f000 ffa0 	bl	80068f0 <CODEC_IO_Write>
 80059b0:	4603      	mov	r3, r0
 80059b2:	461a      	mov	r2, r3
 80059b4:	69fb      	ldr	r3, [r7, #28]
 80059b6:	4413      	add	r3, r2
 80059b8:	61fb      	str	r3, [r7, #28]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0100);    
 80059ba:	89fb      	ldrh	r3, [r7, #14]
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059c2:	212e      	movs	r1, #46	; 0x2e
 80059c4:	4618      	mov	r0, r3
 80059c6:	f000 ff93 	bl	80068f0 <CODEC_IO_Write>
 80059ca:	4603      	mov	r3, r0
 80059cc:	461a      	mov	r2, r3
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	4413      	add	r3, r2
 80059d2:	61fb      	str	r3, [r7, #28]
            
      /* Startup sequence for Headphone */
      if(ColdStartup)
 80059d4:	4b0e      	ldr	r3, [pc, #56]	; (8005a10 <wm8994_Init+0x9c8>)
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d01b      	beq.n	8005a14 <wm8994_Init+0x9cc>
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8100);
 80059dc:	89fb      	ldrh	r3, [r7, #14]
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	f44f 4201 	mov.w	r2, #33024	; 0x8100
 80059e4:	f44f 7188 	mov.w	r1, #272	; 0x110
 80059e8:	4618      	mov	r0, r3
 80059ea:	f000 ff81 	bl	80068f0 <CODEC_IO_Write>
 80059ee:	4603      	mov	r3, r0
 80059f0:	461a      	mov	r2, r3
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	4413      	add	r3, r2
 80059f6:	61fb      	str	r3, [r7, #28]
        
        ColdStartup=0;
 80059f8:	4b05      	ldr	r3, [pc, #20]	; (8005a10 <wm8994_Init+0x9c8>)
 80059fa:	2200      	movs	r2, #0
 80059fc:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        AUDIO_IO_Delay(300);
 80059fe:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005a02:	f7fc fe97 	bl	8002734 <AUDIO_IO_Delay>
 8005a06:	e016      	b.n	8005a36 <wm8994_Init+0x9ee>
 8005a08:	20000d28 	.word	0x20000d28
 8005a0c:	00017700 	.word	0x00017700
 8005a10:	20000080 	.word	0x20000080
      }
      else /* Headphone Warm Start-Up */
      { 
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8108);
 8005a14:	89fb      	ldrh	r3, [r7, #14]
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	f248 1208 	movw	r2, #33032	; 0x8108
 8005a1c:	f44f 7188 	mov.w	r1, #272	; 0x110
 8005a20:	4618      	mov	r0, r3
 8005a22:	f000 ff65 	bl	80068f0 <CODEC_IO_Write>
 8005a26:	4603      	mov	r3, r0
 8005a28:	461a      	mov	r2, r3
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	61fb      	str	r3, [r7, #28]
        /* Add Delay */
        AUDIO_IO_Delay(50);
 8005a30:	2032      	movs	r0, #50	; 0x32
 8005a32:	f7fc fe7f 	bl	8002734 <AUDIO_IO_Delay>
      }

      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 8005a36:	89fb      	ldrh	r3, [r7, #14]
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8005a40:	4618      	mov	r0, r3
 8005a42:	f000 ff55 	bl	80068f0 <CODEC_IO_Write>
 8005a46:	4603      	mov	r3, r0
 8005a48:	461a      	mov	r2, r3
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	61fb      	str	r3, [r7, #28]
    }
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 8005a50:	89fb      	ldrh	r3, [r7, #14]
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	f44f 7240 	mov.w	r2, #768	; 0x300
 8005a58:	2103      	movs	r1, #3
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f000 ff48 	bl	80068f0 <CODEC_IO_Write>
 8005a60:	4603      	mov	r3, r0
 8005a62:	461a      	mov	r2, r3
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	4413      	add	r3, r2
 8005a68:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 8005a6a:	89fb      	ldrh	r3, [r7, #14]
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	2200      	movs	r2, #0
 8005a70:	2122      	movs	r1, #34	; 0x22
 8005a72:	4618      	mov	r0, r3
 8005a74:	f000 ff3c 	bl	80068f0 <CODEC_IO_Write>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	4413      	add	r3, r2
 8005a80:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 8005a82:	89fb      	ldrh	r3, [r7, #14]
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	2200      	movs	r2, #0
 8005a88:	2123      	movs	r1, #35	; 0x23
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f000 ff30 	bl	80068f0 <CODEC_IO_Write>
 8005a90:	4603      	mov	r3, r0
 8005a92:	461a      	mov	r2, r3
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	4413      	add	r3, r2
 8005a98:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 8005a9a:	89fb      	ldrh	r3, [r7, #14]
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8005aa2:	2136      	movs	r1, #54	; 0x36
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f000 ff23 	bl	80068f0 <CODEC_IO_Write>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	461a      	mov	r2, r3
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	4413      	add	r3, r2
 8005ab2:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 8005ab4:	89fb      	ldrh	r3, [r7, #14]
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	f243 0203 	movw	r2, #12291	; 0x3003
 8005abc:	2101      	movs	r1, #1
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f000 ff16 	bl	80068f0 <CODEC_IO_Write>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	4413      	add	r3, r2
 8005acc:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8005ace:	8afb      	ldrh	r3, [r7, #22]
 8005ad0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ad4:	d10d      	bne.n	8005af2 <wm8994_Init+0xaaa>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 8005ad6:	89fb      	ldrh	r3, [r7, #14]
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	f240 2205 	movw	r2, #517	; 0x205
 8005ade:	2151      	movs	r1, #81	; 0x51
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f000 ff05 	bl	80068f0 <CODEC_IO_Write>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	461a      	mov	r2, r3
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	4413      	add	r3, r2
 8005aee:	61fb      	str	r3, [r7, #28]
 8005af0:	e00b      	b.n	8005b0a <wm8994_Init+0xac2>
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 8005af2:	89fb      	ldrh	r3, [r7, #14]
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	2205      	movs	r2, #5
 8005af8:	2151      	movs	r1, #81	; 0x51
 8005afa:	4618      	mov	r0, r3
 8005afc:	f000 fef8 	bl	80068f0 <CODEC_IO_Write>
 8005b00:	4603      	mov	r3, r0
 8005b02:	461a      	mov	r2, r3
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	4413      	add	r3, r2
 8005b08:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 8005b0a:	8b7b      	ldrh	r3, [r7, #26]
 8005b0c:	f443 534c 	orr.w	r3, r3, #13056	; 0x3300
 8005b10:	f043 0303 	orr.w	r3, r3, #3
 8005b14:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8005b16:	89fb      	ldrh	r3, [r7, #14]
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	8b7a      	ldrh	r2, [r7, #26]
 8005b1c:	2101      	movs	r1, #1
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f000 fee6 	bl	80068f0 <CODEC_IO_Write>
 8005b24:	4603      	mov	r3, r0
 8005b26:	461a      	mov	r2, r3
 8005b28:	69fb      	ldr	r3, [r7, #28]
 8005b2a:	4413      	add	r3, r2
 8005b2c:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 8005b2e:	89fb      	ldrh	r3, [r7, #14]
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	2222      	movs	r2, #34	; 0x22
 8005b34:	2160      	movs	r1, #96	; 0x60
 8005b36:	4618      	mov	r0, r3
 8005b38:	f000 feda 	bl	80068f0 <CODEC_IO_Write>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	461a      	mov	r2, r3
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	4413      	add	r3, r2
 8005b44:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 8005b46:	89fb      	ldrh	r3, [r7, #14]
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	f649 7225 	movw	r2, #40741	; 0x9f25
 8005b4e:	214c      	movs	r1, #76	; 0x4c
 8005b50:	4618      	mov	r0, r3
 8005b52:	f000 fecd 	bl	80068f0 <CODEC_IO_Write>
 8005b56:	4603      	mov	r3, r0
 8005b58:	461a      	mov	r2, r3
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	4413      	add	r3, r2
 8005b5e:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(15);
 8005b60:	200f      	movs	r0, #15
 8005b62:	f7fc fde7 	bl	8002734 <AUDIO_IO_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 8005b66:	89fb      	ldrh	r3, [r7, #14]
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	212d      	movs	r1, #45	; 0x2d
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f000 febe 	bl	80068f0 <CODEC_IO_Write>
 8005b74:	4603      	mov	r3, r0
 8005b76:	461a      	mov	r2, r3
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	4413      	add	r3, r2
 8005b7c:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 8005b7e:	89fb      	ldrh	r3, [r7, #14]
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	2201      	movs	r2, #1
 8005b84:	212e      	movs	r1, #46	; 0x2e
 8005b86:	4618      	mov	r0, r3
 8005b88:	f000 feb2 	bl	80068f0 <CODEC_IO_Write>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	461a      	mov	r2, r3
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	4413      	add	r3, r2
 8005b94:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 8005b96:	89fb      	ldrh	r3, [r7, #14]
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	f44f 724c 	mov.w	r2, #816	; 0x330
 8005b9e:	2103      	movs	r1, #3
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f000 fea5 	bl	80068f0 <CODEC_IO_Write>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	461a      	mov	r2, r3
 8005baa:	69fb      	ldr	r3, [r7, #28]
 8005bac:	4413      	add	r3, r2
 8005bae:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 8005bb0:	89fb      	ldrh	r3, [r7, #14]
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	2233      	movs	r2, #51	; 0x33
 8005bb6:	2154      	movs	r1, #84	; 0x54
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f000 fe99 	bl	80068f0 <CODEC_IO_Write>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	4413      	add	r3, r2
 8005bc6:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(257);
 8005bc8:	f240 1001 	movw	r0, #257	; 0x101
 8005bcc:	f7fc fdb2 	bl	8002734 <AUDIO_IO_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 8005bd0:	89fb      	ldrh	r3, [r7, #14]
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	22ee      	movs	r2, #238	; 0xee
 8005bd6:	2160      	movs	r1, #96	; 0x60
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f000 fe89 	bl	80068f0 <CODEC_IO_Write>
 8005bde:	4603      	mov	r3, r0
 8005be0:	461a      	mov	r2, r3
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	4413      	add	r3, r2
 8005be6:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 8005be8:	89fb      	ldrh	r3, [r7, #14]
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	22c0      	movs	r2, #192	; 0xc0
 8005bee:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f000 fe7c 	bl	80068f0 <CODEC_IO_Write>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	4413      	add	r3, r2
 8005c00:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 8005c02:	89fb      	ldrh	r3, [r7, #14]
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	22c0      	movs	r2, #192	; 0xc0
 8005c08:	f240 6111 	movw	r1, #1553	; 0x611
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f000 fe6f 	bl	80068f0 <CODEC_IO_Write>
 8005c12:	4603      	mov	r3, r0
 8005c14:	461a      	mov	r2, r3
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	4413      	add	r3, r2
 8005c1a:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8005c1c:	89fb      	ldrh	r3, [r7, #14]
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	2210      	movs	r2, #16
 8005c22:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8005c26:	4618      	mov	r0, r3
 8005c28:	f000 fe62 	bl	80068f0 <CODEC_IO_Write>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	461a      	mov	r2, r3
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	4413      	add	r3, r2
 8005c34:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 8005c36:	89fb      	ldrh	r3, [r7, #14]
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	22c0      	movs	r2, #192	; 0xc0
 8005c3c:	f240 6112 	movw	r1, #1554	; 0x612
 8005c40:	4618      	mov	r0, r3
 8005c42:	f000 fe55 	bl	80068f0 <CODEC_IO_Write>
 8005c46:	4603      	mov	r3, r0
 8005c48:	461a      	mov	r2, r3
 8005c4a:	69fb      	ldr	r3, [r7, #28]
 8005c4c:	4413      	add	r3, r2
 8005c4e:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 8005c50:	89fb      	ldrh	r3, [r7, #14]
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	22c0      	movs	r2, #192	; 0xc0
 8005c56:	f240 6113 	movw	r1, #1555	; 0x613
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f000 fe48 	bl	80068f0 <CODEC_IO_Write>
 8005c60:	4603      	mov	r3, r0
 8005c62:	461a      	mov	r2, r3
 8005c64:	69fb      	ldr	r3, [r7, #28]
 8005c66:	4413      	add	r3, r2
 8005c68:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8005c6a:	89fb      	ldrh	r3, [r7, #14]
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	2210      	movs	r2, #16
 8005c70:	f240 4122 	movw	r1, #1058	; 0x422
 8005c74:	4618      	mov	r0, r3
 8005c76:	f000 fe3b 	bl	80068f0 <CODEC_IO_Write>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	4413      	add	r3, r2
 8005c82:	61fb      	str	r3, [r7, #28]
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8005c84:	7afa      	ldrb	r2, [r7, #11]
 8005c86:	89fb      	ldrh	r3, [r7, #14]
 8005c88:	4611      	mov	r1, r2
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f000 f984 	bl	8005f98 <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 8005c90:	8afb      	ldrh	r3, [r7, #22]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	f000 80a6 	beq.w	8005de4 <wm8994_Init+0xd9c>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8005c98:	8afb      	ldrh	r3, [r7, #22]
 8005c9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c9e:	d003      	beq.n	8005ca8 <wm8994_Init+0xc60>
 8005ca0:	8afb      	ldrh	r3, [r7, #22]
 8005ca2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ca6:	d12b      	bne.n	8005d00 <wm8994_Init+0xcb8>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8005ca8:	8b7b      	ldrh	r3, [r7, #26]
 8005caa:	f043 0313 	orr.w	r3, r3, #19
 8005cae:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8005cb0:	89fb      	ldrh	r3, [r7, #14]
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	8b7a      	ldrh	r2, [r7, #26]
 8005cb6:	2101      	movs	r1, #1
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f000 fe19 	bl	80068f0 <CODEC_IO_Write>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	4413      	add	r3, r2
 8005cc6:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8005cc8:	89fb      	ldrh	r3, [r7, #14]
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	2202      	movs	r2, #2
 8005cce:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f000 fe0c 	bl	80068f0 <CODEC_IO_Write>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	461a      	mov	r2, r3
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	4413      	add	r3, r2
 8005ce0:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 8005ce2:	89fb      	ldrh	r3, [r7, #14]
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005cea:	f240 4111 	movw	r1, #1041	; 0x411
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f000 fdfe 	bl	80068f0 <CODEC_IO_Write>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	4413      	add	r3, r2
 8005cfc:	61fb      	str	r3, [r7, #28]
 8005cfe:	e06b      	b.n	8005dd8 <wm8994_Init+0xd90>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8005d00:	8afb      	ldrh	r3, [r7, #22]
 8005d02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d06:	d139      	bne.n	8005d7c <wm8994_Init+0xd34>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8005d08:	8b7b      	ldrh	r3, [r7, #26]
 8005d0a:	f043 0313 	orr.w	r3, r3, #19
 8005d0e:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8005d10:	89fb      	ldrh	r3, [r7, #14]
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	8b7a      	ldrh	r2, [r7, #26]
 8005d16:	2101      	movs	r1, #1
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f000 fde9 	bl	80068f0 <CODEC_IO_Write>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	461a      	mov	r2, r3
 8005d22:	69fb      	ldr	r3, [r7, #28]
 8005d24:	4413      	add	r3, r2
 8005d26:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8005d28:	89fb      	ldrh	r3, [r7, #14]
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	2202      	movs	r2, #2
 8005d2e:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8005d32:	4618      	mov	r0, r3
 8005d34:	f000 fddc 	bl	80068f0 <CODEC_IO_Write>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	4413      	add	r3, r2
 8005d40:	61fb      	str	r3, [r7, #28]
    
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8005d42:	89fb      	ldrh	r3, [r7, #14]
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8005d4a:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f000 fdce 	bl	80068f0 <CODEC_IO_Write>
 8005d54:	4603      	mov	r3, r0
 8005d56:	461a      	mov	r2, r3
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	4413      	add	r3, r2
 8005d5c:	61fb      	str	r3, [r7, #28]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 8005d5e:	89fb      	ldrh	r3, [r7, #14]
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8005d66:	f240 4111 	movw	r1, #1041	; 0x411
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f000 fdc0 	bl	80068f0 <CODEC_IO_Write>
 8005d70:	4603      	mov	r3, r0
 8005d72:	461a      	mov	r2, r3
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	4413      	add	r3, r2
 8005d78:	61fb      	str	r3, [r7, #28]
 8005d7a:	e02d      	b.n	8005dd8 <wm8994_Init+0xd90>
    }    
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 8005d7c:	8afb      	ldrh	r3, [r7, #22]
 8005d7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d82:	d003      	beq.n	8005d8c <wm8994_Init+0xd44>
 8005d84:	8afb      	ldrh	r3, [r7, #22]
 8005d86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d8a:	d125      	bne.n	8005dd8 <wm8994_Init+0xd90>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x008B);
 8005d8c:	89fb      	ldrh	r3, [r7, #14]
 8005d8e:	b2db      	uxtb	r3, r3
 8005d90:	228b      	movs	r2, #139	; 0x8b
 8005d92:	2118      	movs	r1, #24
 8005d94:	4618      	mov	r0, r3
 8005d96:	f000 fdab 	bl	80068f0 <CODEC_IO_Write>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	69fb      	ldr	r3, [r7, #28]
 8005da0:	4413      	add	r3, r2
 8005da2:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x008B);
 8005da4:	89fb      	ldrh	r3, [r7, #14]
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	228b      	movs	r2, #139	; 0x8b
 8005daa:	211a      	movs	r1, #26
 8005dac:	4618      	mov	r0, r3
 8005dae:	f000 fd9f 	bl	80068f0 <CODEC_IO_Write>
 8005db2:	4603      	mov	r3, r0
 8005db4:	461a      	mov	r2, r3
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	4413      	add	r3, r2
 8005dba:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8005dbc:	89fb      	ldrh	r3, [r7, #14]
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8005dc4:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f000 fd91 	bl	80068f0 <CODEC_IO_Write>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	4413      	add	r3, r2
 8005dd6:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8005dd8:	7afa      	ldrb	r2, [r7, #11]
 8005dda:	89fb      	ldrh	r3, [r7, #14]
 8005ddc:	4611      	mov	r1, r2
 8005dde:	4618      	mov	r0, r3
 8005de0:	f000 f8da 	bl	8005f98 <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;  
 8005de4:	69fb      	ldr	r3, [r7, #28]
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3720      	adds	r7, #32
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	bf00      	nop

08005df0 <wm8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void wm8994_DeInit(void)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8005df4:	f7fc fc40 	bl	8002678 <AUDIO_IO_DeInit>
}
 8005df8:	bf00      	nop
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID 
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b082      	sub	sp, #8
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	4603      	mov	r3, r0
 8005e04:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8005e06:	f7fc fc2d 	bl	8002664 <AUDIO_IO_Init>

  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 8005e0a:	88fb      	ldrh	r3, [r7, #6]
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	2100      	movs	r1, #0
 8005e10:	4618      	mov	r0, r3
 8005e12:	f7fc fc63 	bl	80026dc <AUDIO_IO_Read>
 8005e16:	4603      	mov	r3, r0
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3708      	adds	r7, #8
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <wm8994_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b084      	sub	sp, #16
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	4603      	mov	r3, r0
 8005e28:	6039      	str	r1, [r7, #0]
 8005e2a:	80fb      	strh	r3, [r7, #6]
 8005e2c:	4613      	mov	r3, r2
 8005e2e:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8005e30:	2300      	movs	r3, #0
 8005e32:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8005e34:	88fb      	ldrh	r3, [r7, #6]
 8005e36:	2100      	movs	r1, #0
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f000 faf3 	bl	8006424 <wm8994_SetMute>
 8005e3e:	4602      	mov	r2, r0
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	4413      	add	r3, r2
 8005e44:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8005e46:	68fb      	ldr	r3, [r7, #12]
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3710      	adds	r7, #16
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <wm8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Pause(uint16_t DeviceAddr)
{  
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	4603      	mov	r3, r0
 8005e58:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8005e5e:	88fb      	ldrh	r3, [r7, #6]
 8005e60:	2101      	movs	r1, #1
 8005e62:	4618      	mov	r0, r3
 8005e64:	f000 fade 	bl	8006424 <wm8994_SetMute>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	4413      	add	r3, r2
 8005e6e:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 8005e70:	88fb      	ldrh	r3, [r7, #6]
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	2201      	movs	r2, #1
 8005e76:	2102      	movs	r1, #2
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f000 fd39 	bl	80068f0 <CODEC_IO_Write>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	461a      	mov	r2, r3
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	4413      	add	r3, r2
 8005e86:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8005e88:	68fb      	ldr	r3, [r7, #12]
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3710      	adds	r7, #16
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}

08005e92 <wm8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Resume(uint16_t DeviceAddr)
{
 8005e92:	b580      	push	{r7, lr}
 8005e94:	b084      	sub	sp, #16
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	4603      	mov	r3, r0
 8005e9a:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8005ea0:	88fb      	ldrh	r3, [r7, #6]
 8005ea2:	2100      	movs	r1, #0
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f000 fabd 	bl	8006424 <wm8994_SetMute>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	4413      	add	r3, r2
 8005eb0:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3710      	adds	r7, #16
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <wm8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b084      	sub	sp, #16
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	6039      	str	r1, [r7, #0]
 8005ec6:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 8005ecc:	4b31      	ldr	r3, [pc, #196]	; (8005f94 <wm8994_Stop+0xd8>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d05a      	beq.n	8005f8a <wm8994_Stop+0xce>
  {
    /* Mute the output first */
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8005ed4:	88fb      	ldrh	r3, [r7, #6]
 8005ed6:	2101      	movs	r1, #1
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f000 faa3 	bl	8006424 <wm8994_SetMute>
 8005ede:	4602      	mov	r2, r0
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	4413      	add	r3, r2
 8005ee4:	60fb      	str	r3, [r7, #12]

    if (CodecPdwnMode == CODEC_PDWN_SW)
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	2b02      	cmp	r3, #2
 8005eea:	d04e      	beq.n	8005f8a <wm8994_Stop+0xce>
      /* Only output mute required*/
    }
    else /* CODEC_PDWN_HW */
    {
      /* Mute the AIF1 Timeslot 0 DAC1 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8005eec:	88fb      	ldrh	r3, [r7, #6]
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ef4:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f000 fcf9 	bl	80068f0 <CODEC_IO_Write>
 8005efe:	4603      	mov	r3, r0
 8005f00:	461a      	mov	r2, r3
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	4413      	add	r3, r2
 8005f06:	60fb      	str	r3, [r7, #12]

      /* Mute the AIF1 Timeslot 1 DAC2 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8005f08:	88fb      	ldrh	r3, [r7, #6]
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f10:	f240 4122 	movw	r1, #1058	; 0x422
 8005f14:	4618      	mov	r0, r3
 8005f16:	f000 fceb 	bl	80068f0 <CODEC_IO_Write>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	4413      	add	r3, r2
 8005f22:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1L_TO_HPOUT1L */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 8005f24:	88fb      	ldrh	r3, [r7, #6]
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	2200      	movs	r2, #0
 8005f2a:	212d      	movs	r1, #45	; 0x2d
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f000 fcdf 	bl	80068f0 <CODEC_IO_Write>
 8005f32:	4603      	mov	r3, r0
 8005f34:	461a      	mov	r2, r3
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	4413      	add	r3, r2
 8005f3a:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1R_TO_HPOUT1R */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 8005f3c:	88fb      	ldrh	r3, [r7, #6]
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	2200      	movs	r2, #0
 8005f42:	212e      	movs	r1, #46	; 0x2e
 8005f44:	4618      	mov	r0, r3
 8005f46:	f000 fcd3 	bl	80068f0 <CODEC_IO_Write>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	4413      	add	r3, r2
 8005f52:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1 and DAC2 */
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 8005f54:	88fb      	ldrh	r3, [r7, #6]
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	2200      	movs	r2, #0
 8005f5a:	2105      	movs	r1, #5
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f000 fcc7 	bl	80068f0 <CODEC_IO_Write>
 8005f62:	4603      	mov	r3, r0
 8005f64:	461a      	mov	r2, r3
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	4413      	add	r3, r2
 8005f6a:	60fb      	str	r3, [r7, #12]

      /* Reset Codec by writing in 0x0000 address register */
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8005f6c:	88fb      	ldrh	r3, [r7, #6]
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	2200      	movs	r2, #0
 8005f72:	2100      	movs	r1, #0
 8005f74:	4618      	mov	r0, r3
 8005f76:	f000 fcbb 	bl	80068f0 <CODEC_IO_Write>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	4413      	add	r3, r2
 8005f82:	60fb      	str	r3, [r7, #12]

      outputEnabled = 0;
 8005f84:	4b03      	ldr	r3, [pc, #12]	; (8005f94 <wm8994_Stop+0xd8>)
 8005f86:	2200      	movs	r2, #0
 8005f88:	601a      	str	r2, [r3, #0]
    }
  }
  return counter;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3710      	adds	r7, #16
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	20000d24 	.word	0x20000d24

08005f98 <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	460a      	mov	r2, r1
 8005fa2:	80fb      	strh	r3, [r7, #6]
 8005fa4:	4613      	mov	r3, r2
 8005fa6:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8005fac:	797b      	ldrb	r3, [r7, #5]
 8005fae:	2b64      	cmp	r3, #100	; 0x64
 8005fb0:	d80b      	bhi.n	8005fca <wm8994_SetVolume+0x32>
 8005fb2:	797a      	ldrb	r2, [r7, #5]
 8005fb4:	4613      	mov	r3, r2
 8005fb6:	019b      	lsls	r3, r3, #6
 8005fb8:	1a9b      	subs	r3, r3, r2
 8005fba:	4a86      	ldr	r2, [pc, #536]	; (80061d4 <wm8994_SetVolume+0x23c>)
 8005fbc:	fb82 1203 	smull	r1, r2, r2, r3
 8005fc0:	1152      	asrs	r2, r2, #5
 8005fc2:	17db      	asrs	r3, r3, #31
 8005fc4:	1ad3      	subs	r3, r2, r3
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	e000      	b.n	8005fcc <wm8994_SetVolume+0x34>
 8005fca:	2364      	movs	r3, #100	; 0x64
 8005fcc:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 8005fce:	4b82      	ldr	r3, [pc, #520]	; (80061d8 <wm8994_SetVolume+0x240>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	f000 809b 	beq.w	800610e <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 8005fd8:	7afb      	ldrb	r3, [r7, #11]
 8005fda:	2b3e      	cmp	r3, #62	; 0x3e
 8005fdc:	d93d      	bls.n	800605a <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8005fde:	88fb      	ldrh	r3, [r7, #6]
 8005fe0:	2100      	movs	r1, #0
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f000 fa1e 	bl	8006424 <wm8994_SetMute>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	4413      	add	r3, r2
 8005fee:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8005ff0:	88fb      	ldrh	r3, [r7, #6]
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	f240 127f 	movw	r2, #383	; 0x17f
 8005ff8:	211c      	movs	r1, #28
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f000 fc78 	bl	80068f0 <CODEC_IO_Write>
 8006000:	4603      	mov	r3, r0
 8006002:	461a      	mov	r2, r3
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	4413      	add	r3, r2
 8006008:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 800600a:	88fb      	ldrh	r3, [r7, #6]
 800600c:	b2db      	uxtb	r3, r3
 800600e:	f240 127f 	movw	r2, #383	; 0x17f
 8006012:	211d      	movs	r1, #29
 8006014:	4618      	mov	r0, r3
 8006016:	f000 fc6b 	bl	80068f0 <CODEC_IO_Write>
 800601a:	4603      	mov	r3, r0
 800601c:	461a      	mov	r2, r3
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	4413      	add	r3, r2
 8006022:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 8006024:	88fb      	ldrh	r3, [r7, #6]
 8006026:	b2db      	uxtb	r3, r3
 8006028:	f240 127f 	movw	r2, #383	; 0x17f
 800602c:	2126      	movs	r1, #38	; 0x26
 800602e:	4618      	mov	r0, r3
 8006030:	f000 fc5e 	bl	80068f0 <CODEC_IO_Write>
 8006034:	4603      	mov	r3, r0
 8006036:	461a      	mov	r2, r3
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	4413      	add	r3, r2
 800603c:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 800603e:	88fb      	ldrh	r3, [r7, #6]
 8006040:	b2db      	uxtb	r3, r3
 8006042:	f240 127f 	movw	r2, #383	; 0x17f
 8006046:	2127      	movs	r1, #39	; 0x27
 8006048:	4618      	mov	r0, r3
 800604a:	f000 fc51 	bl	80068f0 <CODEC_IO_Write>
 800604e:	4603      	mov	r3, r0
 8006050:	461a      	mov	r2, r3
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	4413      	add	r3, r2
 8006056:	60fb      	str	r3, [r7, #12]
 8006058:	e059      	b.n	800610e <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 800605a:	797b      	ldrb	r3, [r7, #5]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d109      	bne.n	8006074 <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8006060:	88fb      	ldrh	r3, [r7, #6]
 8006062:	2101      	movs	r1, #1
 8006064:	4618      	mov	r0, r3
 8006066:	f000 f9dd 	bl	8006424 <wm8994_SetMute>
 800606a:	4602      	mov	r2, r0
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	4413      	add	r3, r2
 8006070:	60fb      	str	r3, [r7, #12]
 8006072:	e04c      	b.n	800610e <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8006074:	88fb      	ldrh	r3, [r7, #6]
 8006076:	2100      	movs	r1, #0
 8006078:	4618      	mov	r0, r3
 800607a:	f000 f9d3 	bl	8006424 <wm8994_SetMute>
 800607e:	4602      	mov	r2, r0
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	4413      	add	r3, r2
 8006084:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 8006086:	88fb      	ldrh	r3, [r7, #6]
 8006088:	b2d8      	uxtb	r0, r3
 800608a:	7afb      	ldrb	r3, [r7, #11]
 800608c:	b21b      	sxth	r3, r3
 800608e:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8006092:	b21b      	sxth	r3, r3
 8006094:	b29b      	uxth	r3, r3
 8006096:	461a      	mov	r2, r3
 8006098:	211c      	movs	r1, #28
 800609a:	f000 fc29 	bl	80068f0 <CODEC_IO_Write>
 800609e:	4603      	mov	r3, r0
 80060a0:	461a      	mov	r2, r3
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	4413      	add	r3, r2
 80060a6:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 80060a8:	88fb      	ldrh	r3, [r7, #6]
 80060aa:	b2d8      	uxtb	r0, r3
 80060ac:	7afb      	ldrb	r3, [r7, #11]
 80060ae:	b21b      	sxth	r3, r3
 80060b0:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 80060b4:	b21b      	sxth	r3, r3
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	461a      	mov	r2, r3
 80060ba:	211d      	movs	r1, #29
 80060bc:	f000 fc18 	bl	80068f0 <CODEC_IO_Write>
 80060c0:	4603      	mov	r3, r0
 80060c2:	461a      	mov	r2, r3
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	4413      	add	r3, r2
 80060c8:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 80060ca:	88fb      	ldrh	r3, [r7, #6]
 80060cc:	b2d8      	uxtb	r0, r3
 80060ce:	7afb      	ldrb	r3, [r7, #11]
 80060d0:	b21b      	sxth	r3, r3
 80060d2:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 80060d6:	b21b      	sxth	r3, r3
 80060d8:	b29b      	uxth	r3, r3
 80060da:	461a      	mov	r2, r3
 80060dc:	2126      	movs	r1, #38	; 0x26
 80060de:	f000 fc07 	bl	80068f0 <CODEC_IO_Write>
 80060e2:	4603      	mov	r3, r0
 80060e4:	461a      	mov	r2, r3
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	4413      	add	r3, r2
 80060ea:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 80060ec:	88fb      	ldrh	r3, [r7, #6]
 80060ee:	b2d8      	uxtb	r0, r3
 80060f0:	7afb      	ldrb	r3, [r7, #11]
 80060f2:	b21b      	sxth	r3, r3
 80060f4:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 80060f8:	b21b      	sxth	r3, r3
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	461a      	mov	r2, r3
 80060fe:	2127      	movs	r1, #39	; 0x27
 8006100:	f000 fbf6 	bl	80068f0 <CODEC_IO_Write>
 8006104:	4603      	mov	r3, r0
 8006106:	461a      	mov	r2, r3
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	4413      	add	r3, r2
 800610c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 800610e:	4b33      	ldr	r3, [pc, #204]	; (80061dc <wm8994_SetVolume+0x244>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d059      	beq.n	80061ca <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8006116:	797b      	ldrb	r3, [r7, #5]
 8006118:	2b63      	cmp	r3, #99	; 0x63
 800611a:	d80c      	bhi.n	8006136 <wm8994_SetVolume+0x19e>
 800611c:	797a      	ldrb	r2, [r7, #5]
 800611e:	4613      	mov	r3, r2
 8006120:	011b      	lsls	r3, r3, #4
 8006122:	1a9b      	subs	r3, r3, r2
 8006124:	011b      	lsls	r3, r3, #4
 8006126:	4a2b      	ldr	r2, [pc, #172]	; (80061d4 <wm8994_SetVolume+0x23c>)
 8006128:	fb82 1203 	smull	r1, r2, r2, r3
 800612c:	1152      	asrs	r2, r2, #5
 800612e:	17db      	asrs	r3, r3, #31
 8006130:	1ad3      	subs	r3, r2, r3
 8006132:	b2db      	uxtb	r3, r3
 8006134:	e000      	b.n	8006138 <wm8994_SetVolume+0x1a0>
 8006136:	23ef      	movs	r3, #239	; 0xef
 8006138:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 800613a:	88fb      	ldrh	r3, [r7, #6]
 800613c:	b2d8      	uxtb	r0, r3
 800613e:	7afb      	ldrb	r3, [r7, #11]
 8006140:	b21b      	sxth	r3, r3
 8006142:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006146:	b21b      	sxth	r3, r3
 8006148:	b29b      	uxth	r3, r3
 800614a:	461a      	mov	r2, r3
 800614c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006150:	f000 fbce 	bl	80068f0 <CODEC_IO_Write>
 8006154:	4603      	mov	r3, r0
 8006156:	461a      	mov	r2, r3
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	4413      	add	r3, r2
 800615c:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 800615e:	88fb      	ldrh	r3, [r7, #6]
 8006160:	b2d8      	uxtb	r0, r3
 8006162:	7afb      	ldrb	r3, [r7, #11]
 8006164:	b21b      	sxth	r3, r3
 8006166:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800616a:	b21b      	sxth	r3, r3
 800616c:	b29b      	uxth	r3, r3
 800616e:	461a      	mov	r2, r3
 8006170:	f240 4101 	movw	r1, #1025	; 0x401
 8006174:	f000 fbbc 	bl	80068f0 <CODEC_IO_Write>
 8006178:	4603      	mov	r3, r0
 800617a:	461a      	mov	r2, r3
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	4413      	add	r3, r2
 8006180:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 8006182:	88fb      	ldrh	r3, [r7, #6]
 8006184:	b2d8      	uxtb	r0, r3
 8006186:	7afb      	ldrb	r3, [r7, #11]
 8006188:	b21b      	sxth	r3, r3
 800618a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800618e:	b21b      	sxth	r3, r3
 8006190:	b29b      	uxth	r3, r3
 8006192:	461a      	mov	r2, r3
 8006194:	f240 4104 	movw	r1, #1028	; 0x404
 8006198:	f000 fbaa 	bl	80068f0 <CODEC_IO_Write>
 800619c:	4603      	mov	r3, r0
 800619e:	461a      	mov	r2, r3
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	4413      	add	r3, r2
 80061a4:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 80061a6:	88fb      	ldrh	r3, [r7, #6]
 80061a8:	b2d8      	uxtb	r0, r3
 80061aa:	7afb      	ldrb	r3, [r7, #11]
 80061ac:	b21b      	sxth	r3, r3
 80061ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061b2:	b21b      	sxth	r3, r3
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	461a      	mov	r2, r3
 80061b8:	f240 4105 	movw	r1, #1029	; 0x405
 80061bc:	f000 fb98 	bl	80068f0 <CODEC_IO_Write>
 80061c0:	4603      	mov	r3, r0
 80061c2:	461a      	mov	r2, r3
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	4413      	add	r3, r2
 80061c8:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 80061ca:	68fb      	ldr	r3, [r7, #12]
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3710      	adds	r7, #16
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}
 80061d4:	51eb851f 	.word	0x51eb851f
 80061d8:	20000d24 	.word	0x20000d24
 80061dc:	20000d28 	.word	0x20000d28

080061e0 <wm8994_SetVolumeOut>:
uint32_t wm8994_SetVolumeOut(uint16_t DeviceAddr, uint8_t Volume) {
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b084      	sub	sp, #16
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	4603      	mov	r3, r0
 80061e8:	460a      	mov	r2, r1
 80061ea:	80fb      	strh	r3, [r7, #6]
 80061ec:	4613      	mov	r3, r2
 80061ee:	717b      	strb	r3, [r7, #5]
	uint32_t counter = 0;
 80061f0:	2300      	movs	r3, #0
 80061f2:	60fb      	str	r3, [r7, #12]
	uint8_t convertedvol = VOLUME_CONVERT(Volume);
 80061f4:	797b      	ldrb	r3, [r7, #5]
 80061f6:	2b64      	cmp	r3, #100	; 0x64
 80061f8:	d80b      	bhi.n	8006212 <wm8994_SetVolumeOut+0x32>
 80061fa:	797a      	ldrb	r2, [r7, #5]
 80061fc:	4613      	mov	r3, r2
 80061fe:	019b      	lsls	r3, r3, #6
 8006200:	1a9b      	subs	r3, r3, r2
 8006202:	4a57      	ldr	r2, [pc, #348]	; (8006360 <wm8994_SetVolumeOut+0x180>)
 8006204:	fb82 1203 	smull	r1, r2, r2, r3
 8006208:	1152      	asrs	r2, r2, #5
 800620a:	17db      	asrs	r3, r3, #31
 800620c:	1ad3      	subs	r3, r2, r3
 800620e:	b2db      	uxtb	r3, r3
 8006210:	e000      	b.n	8006214 <wm8994_SetVolumeOut+0x34>
 8006212:	2364      	movs	r3, #100	; 0x64
 8006214:	72fb      	strb	r3, [r7, #11]

	/* Output volume */
	if (outputEnabled != 0) {
 8006216:	4b53      	ldr	r3, [pc, #332]	; (8006364 <wm8994_SetVolumeOut+0x184>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	2b00      	cmp	r3, #0
 800621c:	f000 809b 	beq.w	8006356 <wm8994_SetVolumeOut+0x176>
		if (convertedvol > 0x3E) {
 8006220:	7afb      	ldrb	r3, [r7, #11]
 8006222:	2b3e      	cmp	r3, #62	; 0x3e
 8006224:	d93d      	bls.n	80062a2 <wm8994_SetVolumeOut+0xc2>
			/* Unmute audio codec */
			counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8006226:	88fb      	ldrh	r3, [r7, #6]
 8006228:	2100      	movs	r1, #0
 800622a:	4618      	mov	r0, r3
 800622c:	f000 f8fa 	bl	8006424 <wm8994_SetMute>
 8006230:	4602      	mov	r2, r0
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	4413      	add	r3, r2
 8006236:	60fb      	str	r3, [r7, #12]

			/* Left Headphone Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8006238:	88fb      	ldrh	r3, [r7, #6]
 800623a:	b2db      	uxtb	r3, r3
 800623c:	f240 127f 	movw	r2, #383	; 0x17f
 8006240:	211c      	movs	r1, #28
 8006242:	4618      	mov	r0, r3
 8006244:	f000 fb54 	bl	80068f0 <CODEC_IO_Write>
 8006248:	4603      	mov	r3, r0
 800624a:	461a      	mov	r2, r3
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	4413      	add	r3, r2
 8006250:	60fb      	str	r3, [r7, #12]

			/* Right Headphone Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 8006252:	88fb      	ldrh	r3, [r7, #6]
 8006254:	b2db      	uxtb	r3, r3
 8006256:	f240 127f 	movw	r2, #383	; 0x17f
 800625a:	211d      	movs	r1, #29
 800625c:	4618      	mov	r0, r3
 800625e:	f000 fb47 	bl	80068f0 <CODEC_IO_Write>
 8006262:	4603      	mov	r3, r0
 8006264:	461a      	mov	r2, r3
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	4413      	add	r3, r2
 800626a:	60fb      	str	r3, [r7, #12]

			/* Left Speaker Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 800626c:	88fb      	ldrh	r3, [r7, #6]
 800626e:	b2db      	uxtb	r3, r3
 8006270:	f240 127f 	movw	r2, #383	; 0x17f
 8006274:	2126      	movs	r1, #38	; 0x26
 8006276:	4618      	mov	r0, r3
 8006278:	f000 fb3a 	bl	80068f0 <CODEC_IO_Write>
 800627c:	4603      	mov	r3, r0
 800627e:	461a      	mov	r2, r3
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	4413      	add	r3, r2
 8006284:	60fb      	str	r3, [r7, #12]

			/* Right Speaker Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 8006286:	88fb      	ldrh	r3, [r7, #6]
 8006288:	b2db      	uxtb	r3, r3
 800628a:	f240 127f 	movw	r2, #383	; 0x17f
 800628e:	2127      	movs	r1, #39	; 0x27
 8006290:	4618      	mov	r0, r3
 8006292:	f000 fb2d 	bl	80068f0 <CODEC_IO_Write>
 8006296:	4603      	mov	r3, r0
 8006298:	461a      	mov	r2, r3
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	4413      	add	r3, r2
 800629e:	60fb      	str	r3, [r7, #12]
 80062a0:	e059      	b.n	8006356 <wm8994_SetVolumeOut+0x176>
		} else if (Volume == 0) {
 80062a2:	797b      	ldrb	r3, [r7, #5]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d109      	bne.n	80062bc <wm8994_SetVolumeOut+0xdc>
			/* Mute audio codec */
			counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80062a8:	88fb      	ldrh	r3, [r7, #6]
 80062aa:	2101      	movs	r1, #1
 80062ac:	4618      	mov	r0, r3
 80062ae:	f000 f8b9 	bl	8006424 <wm8994_SetMute>
 80062b2:	4602      	mov	r2, r0
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	4413      	add	r3, r2
 80062b8:	60fb      	str	r3, [r7, #12]
 80062ba:	e04c      	b.n	8006356 <wm8994_SetVolumeOut+0x176>
		} else {
			/* Unmute audio codec */
			counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80062bc:	88fb      	ldrh	r3, [r7, #6]
 80062be:	2100      	movs	r1, #0
 80062c0:	4618      	mov	r0, r3
 80062c2:	f000 f8af 	bl	8006424 <wm8994_SetMute>
 80062c6:	4602      	mov	r2, r0
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	4413      	add	r3, r2
 80062cc:	60fb      	str	r3, [r7, #12]

			/* Left Headphone Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 80062ce:	88fb      	ldrh	r3, [r7, #6]
 80062d0:	b2d8      	uxtb	r0, r3
 80062d2:	7afb      	ldrb	r3, [r7, #11]
 80062d4:	b21b      	sxth	r3, r3
 80062d6:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 80062da:	b21b      	sxth	r3, r3
 80062dc:	b29b      	uxth	r3, r3
 80062de:	461a      	mov	r2, r3
 80062e0:	211c      	movs	r1, #28
 80062e2:	f000 fb05 	bl	80068f0 <CODEC_IO_Write>
 80062e6:	4603      	mov	r3, r0
 80062e8:	461a      	mov	r2, r3
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	4413      	add	r3, r2
 80062ee:	60fb      	str	r3, [r7, #12]

			/* Right Headphone Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 80062f0:	88fb      	ldrh	r3, [r7, #6]
 80062f2:	b2d8      	uxtb	r0, r3
 80062f4:	7afb      	ldrb	r3, [r7, #11]
 80062f6:	b21b      	sxth	r3, r3
 80062f8:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 80062fc:	b21b      	sxth	r3, r3
 80062fe:	b29b      	uxth	r3, r3
 8006300:	461a      	mov	r2, r3
 8006302:	211d      	movs	r1, #29
 8006304:	f000 faf4 	bl	80068f0 <CODEC_IO_Write>
 8006308:	4603      	mov	r3, r0
 800630a:	461a      	mov	r2, r3
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	4413      	add	r3, r2
 8006310:	60fb      	str	r3, [r7, #12]

			/* Left Speaker Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 8006312:	88fb      	ldrh	r3, [r7, #6]
 8006314:	b2d8      	uxtb	r0, r3
 8006316:	7afb      	ldrb	r3, [r7, #11]
 8006318:	b21b      	sxth	r3, r3
 800631a:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 800631e:	b21b      	sxth	r3, r3
 8006320:	b29b      	uxth	r3, r3
 8006322:	461a      	mov	r2, r3
 8006324:	2126      	movs	r1, #38	; 0x26
 8006326:	f000 fae3 	bl	80068f0 <CODEC_IO_Write>
 800632a:	4603      	mov	r3, r0
 800632c:	461a      	mov	r2, r3
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	4413      	add	r3, r2
 8006332:	60fb      	str	r3, [r7, #12]

			/* Right Speaker Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 8006334:	88fb      	ldrh	r3, [r7, #6]
 8006336:	b2d8      	uxtb	r0, r3
 8006338:	7afb      	ldrb	r3, [r7, #11]
 800633a:	b21b      	sxth	r3, r3
 800633c:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8006340:	b21b      	sxth	r3, r3
 8006342:	b29b      	uxth	r3, r3
 8006344:	461a      	mov	r2, r3
 8006346:	2127      	movs	r1, #39	; 0x27
 8006348:	f000 fad2 	bl	80068f0 <CODEC_IO_Write>
 800634c:	4603      	mov	r3, r0
 800634e:	461a      	mov	r2, r3
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	4413      	add	r3, r2
 8006354:	60fb      	str	r3, [r7, #12]
		}
	}
	return counter;
 8006356:	68fb      	ldr	r3, [r7, #12]
}
 8006358:	4618      	mov	r0, r3
 800635a:	3710      	adds	r7, #16
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}
 8006360:	51eb851f 	.word	0x51eb851f
 8006364:	20000d24 	.word	0x20000d24

08006368 <wm8994_SetVolumeIn>:
uint32_t wm8994_SetVolumeIn(uint16_t DeviceAddr, uint8_t Volume) {
 8006368:	b580      	push	{r7, lr}
 800636a:	b084      	sub	sp, #16
 800636c:	af00      	add	r7, sp, #0
 800636e:	4603      	mov	r3, r0
 8006370:	460a      	mov	r2, r1
 8006372:	80fb      	strh	r3, [r7, #6]
 8006374:	4613      	mov	r3, r2
 8006376:	717b      	strb	r3, [r7, #5]
	uint32_t counter = 0;
 8006378:	2300      	movs	r3, #0
 800637a:	60fb      	str	r3, [r7, #12]
	if (inputEnabled != 0) {
 800637c:	4b28      	ldr	r3, [pc, #160]	; (8006420 <wm8994_SetVolumeIn+0xb8>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d047      	beq.n	8006414 <wm8994_SetVolumeIn+0xac>
		// B1 = 0dB
		/* Left AIF1 ADC1 volume */
		counter += CODEC_IO_Write(DeviceAddr, 0x400, Volume | 0x100);
 8006384:	88fb      	ldrh	r3, [r7, #6]
 8006386:	b2d8      	uxtb	r0, r3
 8006388:	797b      	ldrb	r3, [r7, #5]
 800638a:	b21b      	sxth	r3, r3
 800638c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006390:	b21b      	sxth	r3, r3
 8006392:	b29b      	uxth	r3, r3
 8006394:	461a      	mov	r2, r3
 8006396:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800639a:	f000 faa9 	bl	80068f0 <CODEC_IO_Write>
 800639e:	4603      	mov	r3, r0
 80063a0:	461a      	mov	r2, r3
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	4413      	add	r3, r2
 80063a6:	60fb      	str	r3, [r7, #12]

		/* Right AIF1 ADC1 volume */
		counter += CODEC_IO_Write(DeviceAddr, 0x401, Volume | 0x100);
 80063a8:	88fb      	ldrh	r3, [r7, #6]
 80063aa:	b2d8      	uxtb	r0, r3
 80063ac:	797b      	ldrb	r3, [r7, #5]
 80063ae:	b21b      	sxth	r3, r3
 80063b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063b4:	b21b      	sxth	r3, r3
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	461a      	mov	r2, r3
 80063ba:	f240 4101 	movw	r1, #1025	; 0x401
 80063be:	f000 fa97 	bl	80068f0 <CODEC_IO_Write>
 80063c2:	4603      	mov	r3, r0
 80063c4:	461a      	mov	r2, r3
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	4413      	add	r3, r2
 80063ca:	60fb      	str	r3, [r7, #12]

		/* Left AIF1 ADC2 volume */
		counter += CODEC_IO_Write(DeviceAddr, 0x404, Volume | 0x100);
 80063cc:	88fb      	ldrh	r3, [r7, #6]
 80063ce:	b2d8      	uxtb	r0, r3
 80063d0:	797b      	ldrb	r3, [r7, #5]
 80063d2:	b21b      	sxth	r3, r3
 80063d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063d8:	b21b      	sxth	r3, r3
 80063da:	b29b      	uxth	r3, r3
 80063dc:	461a      	mov	r2, r3
 80063de:	f240 4104 	movw	r1, #1028	; 0x404
 80063e2:	f000 fa85 	bl	80068f0 <CODEC_IO_Write>
 80063e6:	4603      	mov	r3, r0
 80063e8:	461a      	mov	r2, r3
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	4413      	add	r3, r2
 80063ee:	60fb      	str	r3, [r7, #12]

		/* Right AIF1 ADC2 volume */
		counter += CODEC_IO_Write(DeviceAddr, 0x405, Volume | 0x100);
 80063f0:	88fb      	ldrh	r3, [r7, #6]
 80063f2:	b2d8      	uxtb	r0, r3
 80063f4:	797b      	ldrb	r3, [r7, #5]
 80063f6:	b21b      	sxth	r3, r3
 80063f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063fc:	b21b      	sxth	r3, r3
 80063fe:	b29b      	uxth	r3, r3
 8006400:	461a      	mov	r2, r3
 8006402:	f240 4105 	movw	r1, #1029	; 0x405
 8006406:	f000 fa73 	bl	80068f0 <CODEC_IO_Write>
 800640a:	4603      	mov	r3, r0
 800640c:	461a      	mov	r2, r3
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	4413      	add	r3, r2
 8006412:	60fb      	str	r3, [r7, #12]
	}
	return counter;
 8006414:	68fb      	ldr	r3, [r7, #12]
}
 8006416:	4618      	mov	r0, r3
 8006418:	3710      	adds	r7, #16
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
 800641e:	bf00      	nop
 8006420:	20000d28 	.word	0x20000d28

08006424 <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
 800642a:	4603      	mov	r3, r0
 800642c:	6039      	str	r1, [r7, #0]
 800642e:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8006430:	2300      	movs	r3, #0
 8006432:	60fb      	str	r3, [r7, #12]
  
  if (outputEnabled != 0)
 8006434:	4b21      	ldr	r3, [pc, #132]	; (80064bc <wm8994_SetMute+0x98>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d039      	beq.n	80064b0 <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	2b01      	cmp	r3, #1
 8006440:	d11c      	bne.n	800647c <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8006442:	88fb      	ldrh	r3, [r7, #6]
 8006444:	b2db      	uxtb	r3, r3
 8006446:	f44f 7200 	mov.w	r2, #512	; 0x200
 800644a:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800644e:	4618      	mov	r0, r3
 8006450:	f000 fa4e 	bl	80068f0 <CODEC_IO_Write>
 8006454:	4603      	mov	r3, r0
 8006456:	461a      	mov	r2, r3
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	4413      	add	r3, r2
 800645c:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 800645e:	88fb      	ldrh	r3, [r7, #6]
 8006460:	b2db      	uxtb	r3, r3
 8006462:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006466:	f240 4122 	movw	r1, #1058	; 0x422
 800646a:	4618      	mov	r0, r3
 800646c:	f000 fa40 	bl	80068f0 <CODEC_IO_Write>
 8006470:	4603      	mov	r3, r0
 8006472:	461a      	mov	r2, r3
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	4413      	add	r3, r2
 8006478:	60fb      	str	r3, [r7, #12]
 800647a:	e019      	b.n	80064b0 <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 800647c:	88fb      	ldrh	r3, [r7, #6]
 800647e:	b2db      	uxtb	r3, r3
 8006480:	2210      	movs	r2, #16
 8006482:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8006486:	4618      	mov	r0, r3
 8006488:	f000 fa32 	bl	80068f0 <CODEC_IO_Write>
 800648c:	4603      	mov	r3, r0
 800648e:	461a      	mov	r2, r3
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	4413      	add	r3, r2
 8006494:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8006496:	88fb      	ldrh	r3, [r7, #6]
 8006498:	b2db      	uxtb	r3, r3
 800649a:	2210      	movs	r2, #16
 800649c:	f240 4122 	movw	r1, #1058	; 0x422
 80064a0:	4618      	mov	r0, r3
 80064a2:	f000 fa25 	bl	80068f0 <CODEC_IO_Write>
 80064a6:	4603      	mov	r3, r0
 80064a8:	461a      	mov	r2, r3
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	4413      	add	r3, r2
 80064ae:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 80064b0:	68fb      	ldr	r3, [r7, #12]
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3710      	adds	r7, #16
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
 80064ba:	bf00      	nop
 80064bc:	20000d24 	.word	0x20000d24

080064c0 <wm8994_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b084      	sub	sp, #16
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	4603      	mov	r3, r0
 80064c8:	460a      	mov	r2, r1
 80064ca:	80fb      	strh	r3, [r7, #6]
 80064cc:	4613      	mov	r3, r2
 80064ce:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 80064d0:	2300      	movs	r3, #0
 80064d2:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 80064d4:	797b      	ldrb	r3, [r7, #5]
 80064d6:	2b03      	cmp	r3, #3
 80064d8:	f000 808c 	beq.w	80065f4 <wm8994_SetOutputMode+0x134>
 80064dc:	2b03      	cmp	r3, #3
 80064de:	f300 80cb 	bgt.w	8006678 <wm8994_SetOutputMode+0x1b8>
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d002      	beq.n	80064ec <wm8994_SetOutputMode+0x2c>
 80064e6:	2b02      	cmp	r3, #2
 80064e8:	d042      	beq.n	8006570 <wm8994_SetOutputMode+0xb0>
 80064ea:	e0c5      	b.n	8006678 <wm8994_SetOutputMode+0x1b8>
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 80064ec:	88fb      	ldrh	r3, [r7, #6]
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	f640 420c 	movw	r2, #3084	; 0xc0c
 80064f4:	2105      	movs	r1, #5
 80064f6:	4618      	mov	r0, r3
 80064f8:	f000 f9fa 	bl	80068f0 <CODEC_IO_Write>
 80064fc:	4603      	mov	r3, r0
 80064fe:	461a      	mov	r2, r3
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	4413      	add	r3, r2
 8006504:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8006506:	88fb      	ldrh	r3, [r7, #6]
 8006508:	b2db      	uxtb	r3, r3
 800650a:	2200      	movs	r2, #0
 800650c:	f240 6101 	movw	r1, #1537	; 0x601
 8006510:	4618      	mov	r0, r3
 8006512:	f000 f9ed 	bl	80068f0 <CODEC_IO_Write>
 8006516:	4603      	mov	r3, r0
 8006518:	461a      	mov	r2, r3
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	4413      	add	r3, r2
 800651e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8006520:	88fb      	ldrh	r3, [r7, #6]
 8006522:	b2db      	uxtb	r3, r3
 8006524:	2200      	movs	r2, #0
 8006526:	f240 6102 	movw	r1, #1538	; 0x602
 800652a:	4618      	mov	r0, r3
 800652c:	f000 f9e0 	bl	80068f0 <CODEC_IO_Write>
 8006530:	4603      	mov	r3, r0
 8006532:	461a      	mov	r2, r3
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	4413      	add	r3, r2
 8006538:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 800653a:	88fb      	ldrh	r3, [r7, #6]
 800653c:	b2db      	uxtb	r3, r3
 800653e:	2202      	movs	r2, #2
 8006540:	f240 6104 	movw	r1, #1540	; 0x604
 8006544:	4618      	mov	r0, r3
 8006546:	f000 f9d3 	bl	80068f0 <CODEC_IO_Write>
 800654a:	4603      	mov	r3, r0
 800654c:	461a      	mov	r2, r3
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	4413      	add	r3, r2
 8006552:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8006554:	88fb      	ldrh	r3, [r7, #6]
 8006556:	b2db      	uxtb	r3, r3
 8006558:	2202      	movs	r2, #2
 800655a:	f240 6105 	movw	r1, #1541	; 0x605
 800655e:	4618      	mov	r0, r3
 8006560:	f000 f9c6 	bl	80068f0 <CODEC_IO_Write>
 8006564:	4603      	mov	r3, r0
 8006566:	461a      	mov	r2, r3
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	4413      	add	r3, r2
 800656c:	60fb      	str	r3, [r7, #12]
    break;
 800656e:	e0c5      	b.n	80066fc <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8006570:	88fb      	ldrh	r3, [r7, #6]
 8006572:	b2db      	uxtb	r3, r3
 8006574:	f240 3203 	movw	r2, #771	; 0x303
 8006578:	2105      	movs	r1, #5
 800657a:	4618      	mov	r0, r3
 800657c:	f000 f9b8 	bl	80068f0 <CODEC_IO_Write>
 8006580:	4603      	mov	r3, r0
 8006582:	461a      	mov	r2, r3
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	4413      	add	r3, r2
 8006588:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800658a:	88fb      	ldrh	r3, [r7, #6]
 800658c:	b2db      	uxtb	r3, r3
 800658e:	2201      	movs	r2, #1
 8006590:	f240 6101 	movw	r1, #1537	; 0x601
 8006594:	4618      	mov	r0, r3
 8006596:	f000 f9ab 	bl	80068f0 <CODEC_IO_Write>
 800659a:	4603      	mov	r3, r0
 800659c:	461a      	mov	r2, r3
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	4413      	add	r3, r2
 80065a2:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80065a4:	88fb      	ldrh	r3, [r7, #6]
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	2201      	movs	r2, #1
 80065aa:	f240 6102 	movw	r1, #1538	; 0x602
 80065ae:	4618      	mov	r0, r3
 80065b0:	f000 f99e 	bl	80068f0 <CODEC_IO_Write>
 80065b4:	4603      	mov	r3, r0
 80065b6:	461a      	mov	r2, r3
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	4413      	add	r3, r2
 80065bc:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80065be:	88fb      	ldrh	r3, [r7, #6]
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	2200      	movs	r2, #0
 80065c4:	f240 6104 	movw	r1, #1540	; 0x604
 80065c8:	4618      	mov	r0, r3
 80065ca:	f000 f991 	bl	80068f0 <CODEC_IO_Write>
 80065ce:	4603      	mov	r3, r0
 80065d0:	461a      	mov	r2, r3
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	4413      	add	r3, r2
 80065d6:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80065d8:	88fb      	ldrh	r3, [r7, #6]
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	2200      	movs	r2, #0
 80065de:	f240 6105 	movw	r1, #1541	; 0x605
 80065e2:	4618      	mov	r0, r3
 80065e4:	f000 f984 	bl	80068f0 <CODEC_IO_Write>
 80065e8:	4603      	mov	r3, r0
 80065ea:	461a      	mov	r2, r3
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	4413      	add	r3, r2
 80065f0:	60fb      	str	r3, [r7, #12]
    break;
 80065f2:	e083      	b.n	80066fc <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_BOTH:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    also Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 80065f4:	88fb      	ldrh	r3, [r7, #6]
 80065f6:	b2db      	uxtb	r3, r3
 80065f8:	f640 720f 	movw	r2, #3855	; 0xf0f
 80065fc:	2105      	movs	r1, #5
 80065fe:	4618      	mov	r0, r3
 8006600:	f000 f976 	bl	80068f0 <CODEC_IO_Write>
 8006604:	4603      	mov	r3, r0
 8006606:	461a      	mov	r2, r3
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	4413      	add	r3, r2
 800660c:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800660e:	88fb      	ldrh	r3, [r7, #6]
 8006610:	b2db      	uxtb	r3, r3
 8006612:	2201      	movs	r2, #1
 8006614:	f240 6101 	movw	r1, #1537	; 0x601
 8006618:	4618      	mov	r0, r3
 800661a:	f000 f969 	bl	80068f0 <CODEC_IO_Write>
 800661e:	4603      	mov	r3, r0
 8006620:	461a      	mov	r2, r3
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	4413      	add	r3, r2
 8006626:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8006628:	88fb      	ldrh	r3, [r7, #6]
 800662a:	b2db      	uxtb	r3, r3
 800662c:	2201      	movs	r2, #1
 800662e:	f240 6102 	movw	r1, #1538	; 0x602
 8006632:	4618      	mov	r0, r3
 8006634:	f000 f95c 	bl	80068f0 <CODEC_IO_Write>
 8006638:	4603      	mov	r3, r0
 800663a:	461a      	mov	r2, r3
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	4413      	add	r3, r2
 8006640:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8006642:	88fb      	ldrh	r3, [r7, #6]
 8006644:	b2db      	uxtb	r3, r3
 8006646:	2202      	movs	r2, #2
 8006648:	f240 6104 	movw	r1, #1540	; 0x604
 800664c:	4618      	mov	r0, r3
 800664e:	f000 f94f 	bl	80068f0 <CODEC_IO_Write>
 8006652:	4603      	mov	r3, r0
 8006654:	461a      	mov	r2, r3
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	4413      	add	r3, r2
 800665a:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 800665c:	88fb      	ldrh	r3, [r7, #6]
 800665e:	b2db      	uxtb	r3, r3
 8006660:	2202      	movs	r2, #2
 8006662:	f240 6105 	movw	r1, #1541	; 0x605
 8006666:	4618      	mov	r0, r3
 8006668:	f000 f942 	bl	80068f0 <CODEC_IO_Write>
 800666c:	4603      	mov	r3, r0
 800666e:	461a      	mov	r2, r3
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	4413      	add	r3, r2
 8006674:	60fb      	str	r3, [r7, #12]
    break;
 8006676:	e041      	b.n	80066fc <wm8994_SetOutputMode+0x23c>
    
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8006678:	88fb      	ldrh	r3, [r7, #6]
 800667a:	b2db      	uxtb	r3, r3
 800667c:	f240 3203 	movw	r2, #771	; 0x303
 8006680:	2105      	movs	r1, #5
 8006682:	4618      	mov	r0, r3
 8006684:	f000 f934 	bl	80068f0 <CODEC_IO_Write>
 8006688:	4603      	mov	r3, r0
 800668a:	461a      	mov	r2, r3
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	4413      	add	r3, r2
 8006690:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8006692:	88fb      	ldrh	r3, [r7, #6]
 8006694:	b2db      	uxtb	r3, r3
 8006696:	2201      	movs	r2, #1
 8006698:	f240 6101 	movw	r1, #1537	; 0x601
 800669c:	4618      	mov	r0, r3
 800669e:	f000 f927 	bl	80068f0 <CODEC_IO_Write>
 80066a2:	4603      	mov	r3, r0
 80066a4:	461a      	mov	r2, r3
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	4413      	add	r3, r2
 80066aa:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80066ac:	88fb      	ldrh	r3, [r7, #6]
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	2201      	movs	r2, #1
 80066b2:	f240 6102 	movw	r1, #1538	; 0x602
 80066b6:	4618      	mov	r0, r3
 80066b8:	f000 f91a 	bl	80068f0 <CODEC_IO_Write>
 80066bc:	4603      	mov	r3, r0
 80066be:	461a      	mov	r2, r3
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	4413      	add	r3, r2
 80066c4:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80066c6:	88fb      	ldrh	r3, [r7, #6]
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	2200      	movs	r2, #0
 80066cc:	f240 6104 	movw	r1, #1540	; 0x604
 80066d0:	4618      	mov	r0, r3
 80066d2:	f000 f90d 	bl	80068f0 <CODEC_IO_Write>
 80066d6:	4603      	mov	r3, r0
 80066d8:	461a      	mov	r2, r3
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	4413      	add	r3, r2
 80066de:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80066e0:	88fb      	ldrh	r3, [r7, #6]
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	2200      	movs	r2, #0
 80066e6:	f240 6105 	movw	r1, #1541	; 0x605
 80066ea:	4618      	mov	r0, r3
 80066ec:	f000 f900 	bl	80068f0 <CODEC_IO_Write>
 80066f0:	4603      	mov	r3, r0
 80066f2:	461a      	mov	r2, r3
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	4413      	add	r3, r2
 80066f8:	60fb      	str	r3, [r7, #12]
    break;    
 80066fa:	bf00      	nop
  }  
  return counter;
 80066fc:	68fb      	ldr	r3, [r7, #12]
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3710      	adds	r7, #16
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}
	...

08006708 <wm8994_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b084      	sub	sp, #16
 800670c:	af00      	add	r7, sp, #0
 800670e:	4603      	mov	r3, r0
 8006710:	6039      	str	r1, [r7, #0]
 8006712:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8006714:	2300      	movs	r3, #0
 8006716:	60fb      	str	r3, [r7, #12]
 
  /*  Clock Configurations */
  switch (AudioFreq)
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	4a64      	ldr	r2, [pc, #400]	; (80068ac <wm8994_SetFrequency+0x1a4>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d079      	beq.n	8006814 <wm8994_SetFrequency+0x10c>
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	4a62      	ldr	r2, [pc, #392]	; (80068ac <wm8994_SetFrequency+0x1a4>)
 8006724:	4293      	cmp	r3, r2
 8006726:	f200 80ad 	bhi.w	8006884 <wm8994_SetFrequency+0x17c>
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8006730:	4293      	cmp	r3, r2
 8006732:	d061      	beq.n	80067f8 <wm8994_SetFrequency+0xf0>
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800673a:	4293      	cmp	r3, r2
 800673c:	f200 80a2 	bhi.w	8006884 <wm8994_SetFrequency+0x17c>
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	f64a 4244 	movw	r2, #44100	; 0xac44
 8006746:	4293      	cmp	r3, r2
 8006748:	f000 808e 	beq.w	8006868 <wm8994_SetFrequency+0x160>
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	f64a 4244 	movw	r2, #44100	; 0xac44
 8006752:	4293      	cmp	r3, r2
 8006754:	f200 8096 	bhi.w	8006884 <wm8994_SetFrequency+0x17c>
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 800675e:	d03d      	beq.n	80067dc <wm8994_SetFrequency+0xd4>
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8006766:	f200 808d 	bhi.w	8006884 <wm8994_SetFrequency+0x17c>
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	f245 6222 	movw	r2, #22050	; 0x5622
 8006770:	4293      	cmp	r3, r2
 8006772:	d06b      	beq.n	800684c <wm8994_SetFrequency+0x144>
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	f245 6222 	movw	r2, #22050	; 0x5622
 800677a:	4293      	cmp	r3, r2
 800677c:	f200 8082 	bhi.w	8006884 <wm8994_SetFrequency+0x17c>
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8006786:	d01b      	beq.n	80067c0 <wm8994_SetFrequency+0xb8>
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800678e:	d879      	bhi.n	8006884 <wm8994_SetFrequency+0x17c>
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8006796:	d005      	beq.n	80067a4 <wm8994_SetFrequency+0x9c>
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	f642 3211 	movw	r2, #11025	; 0x2b11
 800679e:	4293      	cmp	r3, r2
 80067a0:	d046      	beq.n	8006830 <wm8994_SetFrequency+0x128>
 80067a2:	e06f      	b.n	8006884 <wm8994_SetFrequency+0x17c>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 80067a4:	88fb      	ldrh	r3, [r7, #6]
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	2203      	movs	r2, #3
 80067aa:	f44f 7104 	mov.w	r1, #528	; 0x210
 80067ae:	4618      	mov	r0, r3
 80067b0:	f000 f89e 	bl	80068f0 <CODEC_IO_Write>
 80067b4:	4603      	mov	r3, r0
 80067b6:	461a      	mov	r2, r3
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	4413      	add	r3, r2
 80067bc:	60fb      	str	r3, [r7, #12]
    break;
 80067be:	e06f      	b.n	80068a0 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 80067c0:	88fb      	ldrh	r3, [r7, #6]
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	2233      	movs	r2, #51	; 0x33
 80067c6:	f44f 7104 	mov.w	r1, #528	; 0x210
 80067ca:	4618      	mov	r0, r3
 80067cc:	f000 f890 	bl	80068f0 <CODEC_IO_Write>
 80067d0:	4603      	mov	r3, r0
 80067d2:	461a      	mov	r2, r3
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	4413      	add	r3, r2
 80067d8:	60fb      	str	r3, [r7, #12]
    break;
 80067da:	e061      	b.n	80068a0 <wm8994_SetFrequency+0x198>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 80067dc:	88fb      	ldrh	r3, [r7, #6]
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	2263      	movs	r2, #99	; 0x63
 80067e2:	f44f 7104 	mov.w	r1, #528	; 0x210
 80067e6:	4618      	mov	r0, r3
 80067e8:	f000 f882 	bl	80068f0 <CODEC_IO_Write>
 80067ec:	4603      	mov	r3, r0
 80067ee:	461a      	mov	r2, r3
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	4413      	add	r3, r2
 80067f4:	60fb      	str	r3, [r7, #12]
    break;
 80067f6:	e053      	b.n	80068a0 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80067f8:	88fb      	ldrh	r3, [r7, #6]
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	2283      	movs	r2, #131	; 0x83
 80067fe:	f44f 7104 	mov.w	r1, #528	; 0x210
 8006802:	4618      	mov	r0, r3
 8006804:	f000 f874 	bl	80068f0 <CODEC_IO_Write>
 8006808:	4603      	mov	r3, r0
 800680a:	461a      	mov	r2, r3
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	4413      	add	r3, r2
 8006810:	60fb      	str	r3, [r7, #12]
    break;
 8006812:	e045      	b.n	80068a0 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8006814:	88fb      	ldrh	r3, [r7, #6]
 8006816:	b2db      	uxtb	r3, r3
 8006818:	22a3      	movs	r2, #163	; 0xa3
 800681a:	f44f 7104 	mov.w	r1, #528	; 0x210
 800681e:	4618      	mov	r0, r3
 8006820:	f000 f866 	bl	80068f0 <CODEC_IO_Write>
 8006824:	4603      	mov	r3, r0
 8006826:	461a      	mov	r2, r3
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	4413      	add	r3, r2
 800682c:	60fb      	str	r3, [r7, #12]
    break;
 800682e:	e037      	b.n	80068a0 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8006830:	88fb      	ldrh	r3, [r7, #6]
 8006832:	b2db      	uxtb	r3, r3
 8006834:	2213      	movs	r2, #19
 8006836:	f44f 7104 	mov.w	r1, #528	; 0x210
 800683a:	4618      	mov	r0, r3
 800683c:	f000 f858 	bl	80068f0 <CODEC_IO_Write>
 8006840:	4603      	mov	r3, r0
 8006842:	461a      	mov	r2, r3
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	4413      	add	r3, r2
 8006848:	60fb      	str	r3, [r7, #12]
    break;
 800684a:	e029      	b.n	80068a0 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 800684c:	88fb      	ldrh	r3, [r7, #6]
 800684e:	b2db      	uxtb	r3, r3
 8006850:	2243      	movs	r2, #67	; 0x43
 8006852:	f44f 7104 	mov.w	r1, #528	; 0x210
 8006856:	4618      	mov	r0, r3
 8006858:	f000 f84a 	bl	80068f0 <CODEC_IO_Write>
 800685c:	4603      	mov	r3, r0
 800685e:	461a      	mov	r2, r3
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	4413      	add	r3, r2
 8006864:	60fb      	str	r3, [r7, #12]
    break;
 8006866:	e01b      	b.n	80068a0 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8006868:	88fb      	ldrh	r3, [r7, #6]
 800686a:	b2db      	uxtb	r3, r3
 800686c:	2273      	movs	r2, #115	; 0x73
 800686e:	f44f 7104 	mov.w	r1, #528	; 0x210
 8006872:	4618      	mov	r0, r3
 8006874:	f000 f83c 	bl	80068f0 <CODEC_IO_Write>
 8006878:	4603      	mov	r3, r0
 800687a:	461a      	mov	r2, r3
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	4413      	add	r3, r2
 8006880:	60fb      	str	r3, [r7, #12]
    break; 
 8006882:	e00d      	b.n	80068a0 <wm8994_SetFrequency+0x198>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8006884:	88fb      	ldrh	r3, [r7, #6]
 8006886:	b2db      	uxtb	r3, r3
 8006888:	2283      	movs	r2, #131	; 0x83
 800688a:	f44f 7104 	mov.w	r1, #528	; 0x210
 800688e:	4618      	mov	r0, r3
 8006890:	f000 f82e 	bl	80068f0 <CODEC_IO_Write>
 8006894:	4603      	mov	r3, r0
 8006896:	461a      	mov	r2, r3
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	4413      	add	r3, r2
 800689c:	60fb      	str	r3, [r7, #12]
    break; 
 800689e:	bf00      	nop
  }
  return counter;
 80068a0:	68fb      	ldr	r3, [r7, #12]
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3710      	adds	r7, #16
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	bf00      	nop
 80068ac:	00017700 	.word	0x00017700

080068b0 <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b084      	sub	sp, #16
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	4603      	mov	r3, r0
 80068b8:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80068ba:	2300      	movs	r3, #0
 80068bc:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 80068be:	88fb      	ldrh	r3, [r7, #6]
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	2200      	movs	r2, #0
 80068c4:	2100      	movs	r1, #0
 80068c6:	4618      	mov	r0, r3
 80068c8:	f000 f812 	bl	80068f0 <CODEC_IO_Write>
 80068cc:	4603      	mov	r3, r0
 80068ce:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 80068d0:	4b05      	ldr	r3, [pc, #20]	; (80068e8 <wm8994_Reset+0x38>)
 80068d2:	2200      	movs	r2, #0
 80068d4:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 80068d6:	4b05      	ldr	r3, [pc, #20]	; (80068ec <wm8994_Reset+0x3c>)
 80068d8:	2200      	movs	r2, #0
 80068da:	601a      	str	r2, [r3, #0]

  return counter;
 80068dc:	68fb      	ldr	r3, [r7, #12]
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3710      	adds	r7, #16
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop
 80068e8:	20000d24 	.word	0x20000d24
 80068ec:	20000d28 	.word	0x20000d28

080068f0 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	4603      	mov	r3, r0
 80068f8:	71fb      	strb	r3, [r7, #7]
 80068fa:	460b      	mov	r3, r1
 80068fc:	80bb      	strh	r3, [r7, #4]
 80068fe:	4613      	mov	r3, r2
 8006900:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 8006902:	2300      	movs	r3, #0
 8006904:	60fb      	str	r3, [r7, #12]
  
 AUDIO_IO_Write(Addr, Reg, Value);
 8006906:	887a      	ldrh	r2, [r7, #2]
 8006908:	88b9      	ldrh	r1, [r7, #4]
 800690a:	79fb      	ldrb	r3, [r7, #7]
 800690c:	4618      	mov	r0, r3
 800690e:	f7fb febb 	bl	8002688 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	b2db      	uxtb	r3, r3
}
 8006916:	4618      	mov	r0, r3
 8006918:	3710      	adds	r7, #16
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}
	...

08006920 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006920:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006958 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006924:	480d      	ldr	r0, [pc, #52]	; (800695c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006926:	490e      	ldr	r1, [pc, #56]	; (8006960 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006928:	4a0e      	ldr	r2, [pc, #56]	; (8006964 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800692a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800692c:	e002      	b.n	8006934 <LoopCopyDataInit>

0800692e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800692e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006930:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006932:	3304      	adds	r3, #4

08006934 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006934:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006936:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006938:	d3f9      	bcc.n	800692e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800693a:	4a0b      	ldr	r2, [pc, #44]	; (8006968 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800693c:	4c0b      	ldr	r4, [pc, #44]	; (800696c <LoopFillZerobss+0x26>)
  movs r3, #0
 800693e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006940:	e001      	b.n	8006946 <LoopFillZerobss>

08006942 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006942:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006944:	3204      	adds	r2, #4

08006946 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006946:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006948:	d3fb      	bcc.n	8006942 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800694a:	f7fe fb6b 	bl	8005024 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800694e:	f00d f8a3 	bl	8013a98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006952:	f7fa fb7b 	bl	800104c <main>
  bx  lr    
 8006956:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006958:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800695c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006960:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8006964:	08016844 	.word	0x08016844
  ldr r2, =_sbss
 8006968:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 800696c:	20009360 	.word	0x20009360

08006970 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006970:	e7fe      	b.n	8006970 <ADC_IRQHandler>

08006972 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006972:	b580      	push	{r7, lr}
 8006974:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006976:	2003      	movs	r0, #3
 8006978:	f000 f8f9 	bl	8006b6e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800697c:	2000      	movs	r0, #0
 800697e:	f7fe fa7b 	bl	8004e78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006982:	f7fd fe19 	bl	80045b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006986:	2300      	movs	r3, #0
}
 8006988:	4618      	mov	r0, r3
 800698a:	bd80      	pop	{r7, pc}

0800698c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800698c:	b480      	push	{r7}
 800698e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006990:	4b06      	ldr	r3, [pc, #24]	; (80069ac <HAL_IncTick+0x20>)
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	461a      	mov	r2, r3
 8006996:	4b06      	ldr	r3, [pc, #24]	; (80069b0 <HAL_IncTick+0x24>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4413      	add	r3, r2
 800699c:	4a04      	ldr	r2, [pc, #16]	; (80069b0 <HAL_IncTick+0x24>)
 800699e:	6013      	str	r3, [r2, #0]
}
 80069a0:	bf00      	nop
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr
 80069aa:	bf00      	nop
 80069ac:	20000088 	.word	0x20000088
 80069b0:	20000d2c 	.word	0x20000d2c

080069b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80069b4:	b480      	push	{r7}
 80069b6:	af00      	add	r7, sp, #0
  return uwTick;
 80069b8:	4b03      	ldr	r3, [pc, #12]	; (80069c8 <HAL_GetTick+0x14>)
 80069ba:	681b      	ldr	r3, [r3, #0]
}
 80069bc:	4618      	mov	r0, r3
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr
 80069c6:	bf00      	nop
 80069c8:	20000d2c 	.word	0x20000d2c

080069cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b084      	sub	sp, #16
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80069d4:	f7ff ffee 	bl	80069b4 <HAL_GetTick>
 80069d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069e4:	d005      	beq.n	80069f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80069e6:	4b0a      	ldr	r3, [pc, #40]	; (8006a10 <HAL_Delay+0x44>)
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	461a      	mov	r2, r3
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	4413      	add	r3, r2
 80069f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80069f2:	bf00      	nop
 80069f4:	f7ff ffde 	bl	80069b4 <HAL_GetTick>
 80069f8:	4602      	mov	r2, r0
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	1ad3      	subs	r3, r2, r3
 80069fe:	68fa      	ldr	r2, [r7, #12]
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d8f7      	bhi.n	80069f4 <HAL_Delay+0x28>
  {
  }
}
 8006a04:	bf00      	nop
 8006a06:	bf00      	nop
 8006a08:	3710      	adds	r7, #16
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop
 8006a10:	20000088 	.word	0x20000088

08006a14 <__NVIC_SetPriorityGrouping>:
{
 8006a14:	b480      	push	{r7}
 8006a16:	b085      	sub	sp, #20
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f003 0307 	and.w	r3, r3, #7
 8006a22:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006a24:	4b0b      	ldr	r3, [pc, #44]	; (8006a54 <__NVIC_SetPriorityGrouping+0x40>)
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006a2a:	68ba      	ldr	r2, [r7, #8]
 8006a2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006a30:	4013      	ands	r3, r2
 8006a32:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006a3c:	4b06      	ldr	r3, [pc, #24]	; (8006a58 <__NVIC_SetPriorityGrouping+0x44>)
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006a42:	4a04      	ldr	r2, [pc, #16]	; (8006a54 <__NVIC_SetPriorityGrouping+0x40>)
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	60d3      	str	r3, [r2, #12]
}
 8006a48:	bf00      	nop
 8006a4a:	3714      	adds	r7, #20
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr
 8006a54:	e000ed00 	.word	0xe000ed00
 8006a58:	05fa0000 	.word	0x05fa0000

08006a5c <__NVIC_GetPriorityGrouping>:
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006a60:	4b04      	ldr	r3, [pc, #16]	; (8006a74 <__NVIC_GetPriorityGrouping+0x18>)
 8006a62:	68db      	ldr	r3, [r3, #12]
 8006a64:	0a1b      	lsrs	r3, r3, #8
 8006a66:	f003 0307 	and.w	r3, r3, #7
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr
 8006a74:	e000ed00 	.word	0xe000ed00

08006a78 <__NVIC_EnableIRQ>:
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b083      	sub	sp, #12
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	4603      	mov	r3, r0
 8006a80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	db0b      	blt.n	8006aa2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006a8a:	79fb      	ldrb	r3, [r7, #7]
 8006a8c:	f003 021f 	and.w	r2, r3, #31
 8006a90:	4907      	ldr	r1, [pc, #28]	; (8006ab0 <__NVIC_EnableIRQ+0x38>)
 8006a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a96:	095b      	lsrs	r3, r3, #5
 8006a98:	2001      	movs	r0, #1
 8006a9a:	fa00 f202 	lsl.w	r2, r0, r2
 8006a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006aa2:	bf00      	nop
 8006aa4:	370c      	adds	r7, #12
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr
 8006aae:	bf00      	nop
 8006ab0:	e000e100 	.word	0xe000e100

08006ab4 <__NVIC_SetPriority>:
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b083      	sub	sp, #12
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	4603      	mov	r3, r0
 8006abc:	6039      	str	r1, [r7, #0]
 8006abe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	db0a      	blt.n	8006ade <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	b2da      	uxtb	r2, r3
 8006acc:	490c      	ldr	r1, [pc, #48]	; (8006b00 <__NVIC_SetPriority+0x4c>)
 8006ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ad2:	0112      	lsls	r2, r2, #4
 8006ad4:	b2d2      	uxtb	r2, r2
 8006ad6:	440b      	add	r3, r1
 8006ad8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006adc:	e00a      	b.n	8006af4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	b2da      	uxtb	r2, r3
 8006ae2:	4908      	ldr	r1, [pc, #32]	; (8006b04 <__NVIC_SetPriority+0x50>)
 8006ae4:	79fb      	ldrb	r3, [r7, #7]
 8006ae6:	f003 030f 	and.w	r3, r3, #15
 8006aea:	3b04      	subs	r3, #4
 8006aec:	0112      	lsls	r2, r2, #4
 8006aee:	b2d2      	uxtb	r2, r2
 8006af0:	440b      	add	r3, r1
 8006af2:	761a      	strb	r2, [r3, #24]
}
 8006af4:	bf00      	nop
 8006af6:	370c      	adds	r7, #12
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr
 8006b00:	e000e100 	.word	0xe000e100
 8006b04:	e000ed00 	.word	0xe000ed00

08006b08 <NVIC_EncodePriority>:
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b089      	sub	sp, #36	; 0x24
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	60f8      	str	r0, [r7, #12]
 8006b10:	60b9      	str	r1, [r7, #8]
 8006b12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f003 0307 	and.w	r3, r3, #7
 8006b1a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006b1c:	69fb      	ldr	r3, [r7, #28]
 8006b1e:	f1c3 0307 	rsb	r3, r3, #7
 8006b22:	2b04      	cmp	r3, #4
 8006b24:	bf28      	it	cs
 8006b26:	2304      	movcs	r3, #4
 8006b28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006b2a:	69fb      	ldr	r3, [r7, #28]
 8006b2c:	3304      	adds	r3, #4
 8006b2e:	2b06      	cmp	r3, #6
 8006b30:	d902      	bls.n	8006b38 <NVIC_EncodePriority+0x30>
 8006b32:	69fb      	ldr	r3, [r7, #28]
 8006b34:	3b03      	subs	r3, #3
 8006b36:	e000      	b.n	8006b3a <NVIC_EncodePriority+0x32>
 8006b38:	2300      	movs	r3, #0
 8006b3a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8006b40:	69bb      	ldr	r3, [r7, #24]
 8006b42:	fa02 f303 	lsl.w	r3, r2, r3
 8006b46:	43da      	mvns	r2, r3
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	401a      	ands	r2, r3
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006b50:	f04f 31ff 	mov.w	r1, #4294967295
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	fa01 f303 	lsl.w	r3, r1, r3
 8006b5a:	43d9      	mvns	r1, r3
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b60:	4313      	orrs	r3, r2
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3724      	adds	r7, #36	; 0x24
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr

08006b6e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006b6e:	b580      	push	{r7, lr}
 8006b70:	b082      	sub	sp, #8
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f7ff ff4c 	bl	8006a14 <__NVIC_SetPriorityGrouping>
}
 8006b7c:	bf00      	nop
 8006b7e:	3708      	adds	r7, #8
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b086      	sub	sp, #24
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	60b9      	str	r1, [r7, #8]
 8006b8e:	607a      	str	r2, [r7, #4]
 8006b90:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006b92:	2300      	movs	r3, #0
 8006b94:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006b96:	f7ff ff61 	bl	8006a5c <__NVIC_GetPriorityGrouping>
 8006b9a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	68b9      	ldr	r1, [r7, #8]
 8006ba0:	6978      	ldr	r0, [r7, #20]
 8006ba2:	f7ff ffb1 	bl	8006b08 <NVIC_EncodePriority>
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006bac:	4611      	mov	r1, r2
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f7ff ff80 	bl	8006ab4 <__NVIC_SetPriority>
}
 8006bb4:	bf00      	nop
 8006bb6:	3718      	adds	r7, #24
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b082      	sub	sp, #8
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f7ff ff54 	bl	8006a78 <__NVIC_EnableIRQ>
}
 8006bd0:	bf00      	nop
 8006bd2:	3708      	adds	r7, #8
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b086      	sub	sp, #24
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006be0:	2300      	movs	r3, #0
 8006be2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006be4:	f7ff fee6 	bl	80069b4 <HAL_GetTick>
 8006be8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d101      	bne.n	8006bf4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	e099      	b.n	8006d28 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2202      	movs	r2, #2
 8006bf8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f022 0201 	bic.w	r2, r2, #1
 8006c12:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006c14:	e00f      	b.n	8006c36 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006c16:	f7ff fecd 	bl	80069b4 <HAL_GetTick>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	1ad3      	subs	r3, r2, r3
 8006c20:	2b05      	cmp	r3, #5
 8006c22:	d908      	bls.n	8006c36 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2220      	movs	r2, #32
 8006c28:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2203      	movs	r2, #3
 8006c2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006c32:	2303      	movs	r3, #3
 8006c34:	e078      	b.n	8006d28 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f003 0301 	and.w	r3, r3, #1
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d1e8      	bne.n	8006c16 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006c4c:	697a      	ldr	r2, [r7, #20]
 8006c4e:	4b38      	ldr	r3, [pc, #224]	; (8006d30 <HAL_DMA_Init+0x158>)
 8006c50:	4013      	ands	r3, r2
 8006c52:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	685a      	ldr	r2, [r3, #4]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006c62:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	691b      	ldr	r3, [r3, #16]
 8006c68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	699b      	ldr	r3, [r3, #24]
 8006c74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6a1b      	ldr	r3, [r3, #32]
 8006c80:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006c82:	697a      	ldr	r2, [r7, #20]
 8006c84:	4313      	orrs	r3, r2
 8006c86:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8c:	2b04      	cmp	r3, #4
 8006c8e:	d107      	bne.n	8006ca0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	697a      	ldr	r2, [r7, #20]
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	697a      	ldr	r2, [r7, #20]
 8006ca6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	695b      	ldr	r3, [r3, #20]
 8006cae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	f023 0307 	bic.w	r3, r3, #7
 8006cb6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cbc:	697a      	ldr	r2, [r7, #20]
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc6:	2b04      	cmp	r3, #4
 8006cc8:	d117      	bne.n	8006cfa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cce:	697a      	ldr	r2, [r7, #20]
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d00e      	beq.n	8006cfa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 fb03 	bl	80072e8 <DMA_CheckFifoParam>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d008      	beq.n	8006cfa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2240      	movs	r2, #64	; 0x40
 8006cec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e016      	b.n	8006d28 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	697a      	ldr	r2, [r7, #20]
 8006d00:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 faba 	bl	800727c <DMA_CalcBaseAndBitshift>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d10:	223f      	movs	r2, #63	; 0x3f
 8006d12:	409a      	lsls	r2, r3
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2201      	movs	r2, #1
 8006d22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006d26:	2300      	movs	r3, #0
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3718      	adds	r7, #24
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}
 8006d30:	f010803f 	.word	0xf010803f

08006d34 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b084      	sub	sp, #16
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d101      	bne.n	8006d46 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	e050      	b.n	8006de8 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	2b02      	cmp	r3, #2
 8006d50:	d101      	bne.n	8006d56 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8006d52:	2302      	movs	r3, #2
 8006d54:	e048      	b.n	8006de8 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f022 0201 	bic.w	r2, r2, #1
 8006d64:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	2200      	movs	r2, #0
 8006d74:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	2200      	movs	r2, #0
 8006d84:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	2221      	movs	r2, #33	; 0x21
 8006d94:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 fa70 	bl	800727c <DMA_CalcBaseAndBitshift>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006da4:	223f      	movs	r2, #63	; 0x3f
 8006da6:	409a      	lsls	r2, r3
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006de6:	2300      	movs	r3, #0
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3710      	adds	r7, #16
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}

08006df0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b086      	sub	sp, #24
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	60f8      	str	r0, [r7, #12]
 8006df8:	60b9      	str	r1, [r7, #8]
 8006dfa:	607a      	str	r2, [r7, #4]
 8006dfc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e06:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	d101      	bne.n	8006e16 <HAL_DMA_Start_IT+0x26>
 8006e12:	2302      	movs	r3, #2
 8006e14:	e048      	b.n	8006ea8 <HAL_DMA_Start_IT+0xb8>
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2201      	movs	r2, #1
 8006e1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d137      	bne.n	8006e9a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2202      	movs	r2, #2
 8006e2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2200      	movs	r2, #0
 8006e36:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	68b9      	ldr	r1, [r7, #8]
 8006e3e:	68f8      	ldr	r0, [r7, #12]
 8006e40:	f000 f9ee 	bl	8007220 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e48:	223f      	movs	r2, #63	; 0x3f
 8006e4a:	409a      	lsls	r2, r3
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f042 0216 	orr.w	r2, r2, #22
 8006e5e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	695a      	ldr	r2, [r3, #20]
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006e6e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d007      	beq.n	8006e88 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	681a      	ldr	r2, [r3, #0]
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f042 0208 	orr.w	r2, r2, #8
 8006e86:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f042 0201 	orr.w	r2, r2, #1
 8006e96:	601a      	str	r2, [r3, #0]
 8006e98:	e005      	b.n	8006ea6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006ea2:	2302      	movs	r3, #2
 8006ea4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006ea6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3718      	adds	r7, #24
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}

08006eb0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b083      	sub	sp, #12
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	2b02      	cmp	r3, #2
 8006ec2:	d004      	beq.n	8006ece <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2280      	movs	r2, #128	; 0x80
 8006ec8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e00c      	b.n	8006ee8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2205      	movs	r2, #5
 8006ed2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f022 0201 	bic.w	r2, r2, #1
 8006ee4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006ee6:	2300      	movs	r3, #0
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	370c      	adds	r7, #12
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr

08006ef4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b086      	sub	sp, #24
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8006efc:	2300      	movs	r3, #0
 8006efe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8006f00:	4b8e      	ldr	r3, [pc, #568]	; (800713c <HAL_DMA_IRQHandler+0x248>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a8e      	ldr	r2, [pc, #568]	; (8007140 <HAL_DMA_IRQHandler+0x24c>)
 8006f06:	fba2 2303 	umull	r2, r3, r2, r3
 8006f0a:	0a9b      	lsrs	r3, r3, #10
 8006f0c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f12:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f1e:	2208      	movs	r2, #8
 8006f20:	409a      	lsls	r2, r3
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	4013      	ands	r3, r2
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d01a      	beq.n	8006f60 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f003 0304 	and.w	r3, r3, #4
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d013      	beq.n	8006f60 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f022 0204 	bic.w	r2, r2, #4
 8006f46:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f4c:	2208      	movs	r2, #8
 8006f4e:	409a      	lsls	r2, r3
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f58:	f043 0201 	orr.w	r2, r3, #1
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f64:	2201      	movs	r2, #1
 8006f66:	409a      	lsls	r2, r3
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	4013      	ands	r3, r2
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d012      	beq.n	8006f96 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	695b      	ldr	r3, [r3, #20]
 8006f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d00b      	beq.n	8006f96 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f82:	2201      	movs	r2, #1
 8006f84:	409a      	lsls	r2, r3
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f8e:	f043 0202 	orr.w	r2, r3, #2
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f9a:	2204      	movs	r2, #4
 8006f9c:	409a      	lsls	r2, r3
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	4013      	ands	r3, r2
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d012      	beq.n	8006fcc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f003 0302 	and.w	r3, r3, #2
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d00b      	beq.n	8006fcc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fb8:	2204      	movs	r2, #4
 8006fba:	409a      	lsls	r2, r3
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fc4:	f043 0204 	orr.w	r2, r3, #4
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fd0:	2210      	movs	r2, #16
 8006fd2:	409a      	lsls	r2, r3
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	4013      	ands	r3, r2
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d043      	beq.n	8007064 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f003 0308 	and.w	r3, r3, #8
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d03c      	beq.n	8007064 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fee:	2210      	movs	r2, #16
 8006ff0:	409a      	lsls	r2, r3
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007000:	2b00      	cmp	r3, #0
 8007002:	d018      	beq.n	8007036 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800700e:	2b00      	cmp	r3, #0
 8007010:	d108      	bne.n	8007024 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007016:	2b00      	cmp	r3, #0
 8007018:	d024      	beq.n	8007064 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	4798      	blx	r3
 8007022:	e01f      	b.n	8007064 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007028:	2b00      	cmp	r3, #0
 800702a:	d01b      	beq.n	8007064 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	4798      	blx	r3
 8007034:	e016      	b.n	8007064 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007040:	2b00      	cmp	r3, #0
 8007042:	d107      	bne.n	8007054 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f022 0208 	bic.w	r2, r2, #8
 8007052:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007058:	2b00      	cmp	r3, #0
 800705a:	d003      	beq.n	8007064 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007068:	2220      	movs	r2, #32
 800706a:	409a      	lsls	r2, r3
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	4013      	ands	r3, r2
 8007070:	2b00      	cmp	r3, #0
 8007072:	f000 808f 	beq.w	8007194 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f003 0310 	and.w	r3, r3, #16
 8007080:	2b00      	cmp	r3, #0
 8007082:	f000 8087 	beq.w	8007194 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800708a:	2220      	movs	r2, #32
 800708c:	409a      	lsls	r2, r3
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007098:	b2db      	uxtb	r3, r3
 800709a:	2b05      	cmp	r3, #5
 800709c:	d136      	bne.n	800710c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f022 0216 	bic.w	r2, r2, #22
 80070ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	695a      	ldr	r2, [r3, #20]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80070bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d103      	bne.n	80070ce <HAL_DMA_IRQHandler+0x1da>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d007      	beq.n	80070de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f022 0208 	bic.w	r2, r2, #8
 80070dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070e2:	223f      	movs	r2, #63	; 0x3f
 80070e4:	409a      	lsls	r2, r3
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2201      	movs	r2, #1
 80070ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2200      	movs	r2, #0
 80070f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d07e      	beq.n	8007200 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	4798      	blx	r3
        }
        return;
 800710a:	e079      	b.n	8007200 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007116:	2b00      	cmp	r3, #0
 8007118:	d01d      	beq.n	8007156 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007124:	2b00      	cmp	r3, #0
 8007126:	d10d      	bne.n	8007144 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800712c:	2b00      	cmp	r3, #0
 800712e:	d031      	beq.n	8007194 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	4798      	blx	r3
 8007138:	e02c      	b.n	8007194 <HAL_DMA_IRQHandler+0x2a0>
 800713a:	bf00      	nop
 800713c:	20000044 	.word	0x20000044
 8007140:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007148:	2b00      	cmp	r3, #0
 800714a:	d023      	beq.n	8007194 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	4798      	blx	r3
 8007154:	e01e      	b.n	8007194 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007160:	2b00      	cmp	r3, #0
 8007162:	d10f      	bne.n	8007184 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	681a      	ldr	r2, [r3, #0]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f022 0210 	bic.w	r2, r2, #16
 8007172:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2201      	movs	r2, #1
 8007178:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2200      	movs	r2, #0
 8007180:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007188:	2b00      	cmp	r3, #0
 800718a:	d003      	beq.n	8007194 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007198:	2b00      	cmp	r3, #0
 800719a:	d032      	beq.n	8007202 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071a0:	f003 0301 	and.w	r3, r3, #1
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d022      	beq.n	80071ee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2205      	movs	r2, #5
 80071ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f022 0201 	bic.w	r2, r2, #1
 80071be:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	3301      	adds	r3, #1
 80071c4:	60bb      	str	r3, [r7, #8]
 80071c6:	697a      	ldr	r2, [r7, #20]
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d307      	bcc.n	80071dc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f003 0301 	and.w	r3, r3, #1
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d1f2      	bne.n	80071c0 <HAL_DMA_IRQHandler+0x2cc>
 80071da:	e000      	b.n	80071de <HAL_DMA_IRQHandler+0x2ea>
          break;
 80071dc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2201      	movs	r2, #1
 80071e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2200      	movs	r2, #0
 80071ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d005      	beq.n	8007202 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	4798      	blx	r3
 80071fe:	e000      	b.n	8007202 <HAL_DMA_IRQHandler+0x30e>
        return;
 8007200:	bf00      	nop
    }
  }
}
 8007202:	3718      	adds	r7, #24
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8007214:	4618      	mov	r0, r3
 8007216:	370c      	adds	r7, #12
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr

08007220 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007220:	b480      	push	{r7}
 8007222:	b085      	sub	sp, #20
 8007224:	af00      	add	r7, sp, #0
 8007226:	60f8      	str	r0, [r7, #12]
 8007228:	60b9      	str	r1, [r7, #8]
 800722a:	607a      	str	r2, [r7, #4]
 800722c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800723c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	683a      	ldr	r2, [r7, #0]
 8007244:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	689b      	ldr	r3, [r3, #8]
 800724a:	2b40      	cmp	r3, #64	; 0x40
 800724c:	d108      	bne.n	8007260 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	687a      	ldr	r2, [r7, #4]
 8007254:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	68ba      	ldr	r2, [r7, #8]
 800725c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800725e:	e007      	b.n	8007270 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	68ba      	ldr	r2, [r7, #8]
 8007266:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	60da      	str	r2, [r3, #12]
}
 8007270:	bf00      	nop
 8007272:	3714      	adds	r7, #20
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr

0800727c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800727c:	b480      	push	{r7}
 800727e:	b085      	sub	sp, #20
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	b2db      	uxtb	r3, r3
 800728a:	3b10      	subs	r3, #16
 800728c:	4a13      	ldr	r2, [pc, #76]	; (80072dc <DMA_CalcBaseAndBitshift+0x60>)
 800728e:	fba2 2303 	umull	r2, r3, r2, r3
 8007292:	091b      	lsrs	r3, r3, #4
 8007294:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007296:	4a12      	ldr	r2, [pc, #72]	; (80072e0 <DMA_CalcBaseAndBitshift+0x64>)
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	4413      	add	r3, r2
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	461a      	mov	r2, r3
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2b03      	cmp	r3, #3
 80072a8:	d908      	bls.n	80072bc <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	461a      	mov	r2, r3
 80072b0:	4b0c      	ldr	r3, [pc, #48]	; (80072e4 <DMA_CalcBaseAndBitshift+0x68>)
 80072b2:	4013      	ands	r3, r2
 80072b4:	1d1a      	adds	r2, r3, #4
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	659a      	str	r2, [r3, #88]	; 0x58
 80072ba:	e006      	b.n	80072ca <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	461a      	mov	r2, r3
 80072c2:	4b08      	ldr	r3, [pc, #32]	; (80072e4 <DMA_CalcBaseAndBitshift+0x68>)
 80072c4:	4013      	ands	r3, r2
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3714      	adds	r7, #20
 80072d2:	46bd      	mov	sp, r7
 80072d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d8:	4770      	bx	lr
 80072da:	bf00      	nop
 80072dc:	aaaaaaab 	.word	0xaaaaaaab
 80072e0:	08016798 	.word	0x08016798
 80072e4:	fffffc00 	.word	0xfffffc00

080072e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b085      	sub	sp, #20
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072f0:	2300      	movs	r3, #0
 80072f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	699b      	ldr	r3, [r3, #24]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d11f      	bne.n	8007342 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	2b03      	cmp	r3, #3
 8007306:	d856      	bhi.n	80073b6 <DMA_CheckFifoParam+0xce>
 8007308:	a201      	add	r2, pc, #4	; (adr r2, 8007310 <DMA_CheckFifoParam+0x28>)
 800730a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800730e:	bf00      	nop
 8007310:	08007321 	.word	0x08007321
 8007314:	08007333 	.word	0x08007333
 8007318:	08007321 	.word	0x08007321
 800731c:	080073b7 	.word	0x080073b7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007324:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007328:	2b00      	cmp	r3, #0
 800732a:	d046      	beq.n	80073ba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800732c:	2301      	movs	r3, #1
 800732e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007330:	e043      	b.n	80073ba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007336:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800733a:	d140      	bne.n	80073be <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800733c:	2301      	movs	r3, #1
 800733e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007340:	e03d      	b.n	80073be <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	699b      	ldr	r3, [r3, #24]
 8007346:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800734a:	d121      	bne.n	8007390 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	2b03      	cmp	r3, #3
 8007350:	d837      	bhi.n	80073c2 <DMA_CheckFifoParam+0xda>
 8007352:	a201      	add	r2, pc, #4	; (adr r2, 8007358 <DMA_CheckFifoParam+0x70>)
 8007354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007358:	08007369 	.word	0x08007369
 800735c:	0800736f 	.word	0x0800736f
 8007360:	08007369 	.word	0x08007369
 8007364:	08007381 	.word	0x08007381
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007368:	2301      	movs	r3, #1
 800736a:	73fb      	strb	r3, [r7, #15]
      break;
 800736c:	e030      	b.n	80073d0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007372:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007376:	2b00      	cmp	r3, #0
 8007378:	d025      	beq.n	80073c6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800737a:	2301      	movs	r3, #1
 800737c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800737e:	e022      	b.n	80073c6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007384:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007388:	d11f      	bne.n	80073ca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800738a:	2301      	movs	r3, #1
 800738c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800738e:	e01c      	b.n	80073ca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	2b02      	cmp	r3, #2
 8007394:	d903      	bls.n	800739e <DMA_CheckFifoParam+0xb6>
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	2b03      	cmp	r3, #3
 800739a:	d003      	beq.n	80073a4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800739c:	e018      	b.n	80073d0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	73fb      	strb	r3, [r7, #15]
      break;
 80073a2:	e015      	b.n	80073d0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d00e      	beq.n	80073ce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80073b0:	2301      	movs	r3, #1
 80073b2:	73fb      	strb	r3, [r7, #15]
      break;
 80073b4:	e00b      	b.n	80073ce <DMA_CheckFifoParam+0xe6>
      break;
 80073b6:	bf00      	nop
 80073b8:	e00a      	b.n	80073d0 <DMA_CheckFifoParam+0xe8>
      break;
 80073ba:	bf00      	nop
 80073bc:	e008      	b.n	80073d0 <DMA_CheckFifoParam+0xe8>
      break;
 80073be:	bf00      	nop
 80073c0:	e006      	b.n	80073d0 <DMA_CheckFifoParam+0xe8>
      break;
 80073c2:	bf00      	nop
 80073c4:	e004      	b.n	80073d0 <DMA_CheckFifoParam+0xe8>
      break;
 80073c6:	bf00      	nop
 80073c8:	e002      	b.n	80073d0 <DMA_CheckFifoParam+0xe8>
      break;   
 80073ca:	bf00      	nop
 80073cc:	e000      	b.n	80073d0 <DMA_CheckFifoParam+0xe8>
      break;
 80073ce:	bf00      	nop
    }
  } 
  
  return status; 
 80073d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3714      	adds	r7, #20
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr
 80073de:	bf00      	nop

080073e0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b082      	sub	sp, #8
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d101      	bne.n	80073f2 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	e039      	b.n	8007466 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d106      	bne.n	800740c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2200      	movs	r2, #0
 8007402:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f7fd f8fe 	bl	8004608 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2202      	movs	r2, #2
 8007410:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	685a      	ldr	r2, [r3, #4]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	430a      	orrs	r2, r1
 8007428:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007430:	f023 0107 	bic.w	r1, r3, #7
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	689a      	ldr	r2, [r3, #8]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	430a      	orrs	r2, r1
 800743e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007446:	4b0a      	ldr	r3, [pc, #40]	; (8007470 <HAL_DMA2D_Init+0x90>)
 8007448:	4013      	ands	r3, r2
 800744a:	687a      	ldr	r2, [r7, #4]
 800744c:	68d1      	ldr	r1, [r2, #12]
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	6812      	ldr	r2, [r2, #0]
 8007452:	430b      	orrs	r3, r1
 8007454:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2200      	movs	r2, #0
 800745a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2201      	movs	r2, #1
 8007460:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8007464:	2300      	movs	r3, #0
}
 8007466:	4618      	mov	r0, r3
 8007468:	3708      	adds	r7, #8
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}
 800746e:	bf00      	nop
 8007470:	ffffc000 	.word	0xffffc000

08007474 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b086      	sub	sp, #24
 8007478:	af02      	add	r7, sp, #8
 800747a:	60f8      	str	r0, [r7, #12]
 800747c:	60b9      	str	r1, [r7, #8]
 800747e:	607a      	str	r2, [r7, #4]
 8007480:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007488:	2b01      	cmp	r3, #1
 800748a:	d101      	bne.n	8007490 <HAL_DMA2D_Start+0x1c>
 800748c:	2302      	movs	r3, #2
 800748e:	e018      	b.n	80074c2 <HAL_DMA2D_Start+0x4e>
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2201      	movs	r2, #1
 8007494:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2202      	movs	r2, #2
 800749c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80074a0:	69bb      	ldr	r3, [r7, #24]
 80074a2:	9300      	str	r3, [sp, #0]
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	687a      	ldr	r2, [r7, #4]
 80074a8:	68b9      	ldr	r1, [r7, #8]
 80074aa:	68f8      	ldr	r0, [r7, #12]
 80074ac:	f000 f988 	bl	80077c0 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	681a      	ldr	r2, [r3, #0]
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f042 0201 	orr.w	r2, r2, #1
 80074be:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80074c0:	2300      	movs	r3, #0
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3710      	adds	r7, #16
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}

080074ca <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80074ca:	b580      	push	{r7, lr}
 80074cc:	b086      	sub	sp, #24
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
 80074d2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80074d4:	2300      	movs	r3, #0
 80074d6:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f003 0301 	and.w	r3, r3, #1
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d056      	beq.n	8007594 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80074e6:	f7ff fa65 	bl	80069b4 <HAL_GetTick>
 80074ea:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80074ec:	e04b      	b.n	8007586 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d023      	beq.n	8007548 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f003 0320 	and.w	r3, r3, #32
 8007506:	2b00      	cmp	r3, #0
 8007508:	d005      	beq.n	8007516 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800750e:	f043 0202 	orr.w	r2, r3, #2
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f003 0301 	and.w	r3, r3, #1
 800751c:	2b00      	cmp	r3, #0
 800751e:	d005      	beq.n	800752c <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007524:	f043 0201 	orr.w	r2, r3, #1
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2221      	movs	r2, #33	; 0x21
 8007532:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2204      	movs	r2, #4
 8007538:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8007544:	2301      	movs	r3, #1
 8007546:	e0a5      	b.n	8007694 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800754e:	d01a      	beq.n	8007586 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007550:	f7ff fa30 	bl	80069b4 <HAL_GetTick>
 8007554:	4602      	mov	r2, r0
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	1ad3      	subs	r3, r2, r3
 800755a:	683a      	ldr	r2, [r7, #0]
 800755c:	429a      	cmp	r2, r3
 800755e:	d302      	bcc.n	8007566 <HAL_DMA2D_PollForTransfer+0x9c>
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d10f      	bne.n	8007586 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800756a:	f043 0220 	orr.w	r2, r3, #32
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2203      	movs	r2, #3
 8007576:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2200      	movs	r2, #0
 800757e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8007582:	2303      	movs	r3, #3
 8007584:	e086      	b.n	8007694 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	f003 0302 	and.w	r3, r3, #2
 8007590:	2b00      	cmp	r3, #0
 8007592:	d0ac      	beq.n	80074ee <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	69db      	ldr	r3, [r3, #28]
 800759a:	f003 0320 	and.w	r3, r3, #32
 800759e:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a6:	f003 0320 	and.w	r3, r3, #32
 80075aa:	693a      	ldr	r2, [r7, #16]
 80075ac:	4313      	orrs	r3, r2
 80075ae:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d061      	beq.n	800767a <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80075b6:	f7ff f9fd 	bl	80069b4 <HAL_GetTick>
 80075ba:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80075bc:	e056      	b.n	800766c <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d02e      	beq.n	800762e <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f003 0308 	and.w	r3, r3, #8
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d005      	beq.n	80075e6 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075de:	f043 0204 	orr.w	r2, r3, #4
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f003 0320 	and.w	r3, r3, #32
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d005      	beq.n	80075fc <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075f4:	f043 0202 	orr.w	r2, r3, #2
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f003 0301 	and.w	r3, r3, #1
 8007602:	2b00      	cmp	r3, #0
 8007604:	d005      	beq.n	8007612 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800760a:	f043 0201 	orr.w	r2, r3, #1
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	2229      	movs	r2, #41	; 0x29
 8007618:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2204      	movs	r2, #4
 800761e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2200      	movs	r2, #0
 8007626:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800762a:	2301      	movs	r3, #1
 800762c:	e032      	b.n	8007694 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007634:	d01a      	beq.n	800766c <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007636:	f7ff f9bd 	bl	80069b4 <HAL_GetTick>
 800763a:	4602      	mov	r2, r0
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	1ad3      	subs	r3, r2, r3
 8007640:	683a      	ldr	r2, [r7, #0]
 8007642:	429a      	cmp	r2, r3
 8007644:	d302      	bcc.n	800764c <HAL_DMA2D_PollForTransfer+0x182>
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d10f      	bne.n	800766c <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007650:	f043 0220 	orr.w	r2, r3, #32
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2203      	movs	r2, #3
 800765c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2200      	movs	r2, #0
 8007664:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8007668:	2303      	movs	r3, #3
 800766a:	e013      	b.n	8007694 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	f003 0310 	and.w	r3, r3, #16
 8007676:	2b00      	cmp	r3, #0
 8007678:	d0a1      	beq.n	80075be <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	2212      	movs	r2, #18
 8007680:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2201      	movs	r2, #1
 8007686:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8007692:	2300      	movs	r3, #0
}
 8007694:	4618      	mov	r0, r3
 8007696:	3718      	adds	r7, #24
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800769c:	b480      	push	{r7}
 800769e:	b087      	sub	sp, #28
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d101      	bne.n	80076bc <HAL_DMA2D_ConfigLayer+0x20>
 80076b8:	2302      	movs	r3, #2
 80076ba:	e079      	b.n	80077b0 <HAL_DMA2D_ConfigLayer+0x114>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2201      	movs	r2, #1
 80076c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2202      	movs	r2, #2
 80076c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	011b      	lsls	r3, r3, #4
 80076d0:	3318      	adds	r3, #24
 80076d2:	687a      	ldr	r2, [r7, #4]
 80076d4:	4413      	add	r3, r2
 80076d6:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	685a      	ldr	r2, [r3, #4]
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	041b      	lsls	r3, r3, #16
 80076e2:	4313      	orrs	r3, r2
 80076e4:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80076e6:	4b35      	ldr	r3, [pc, #212]	; (80077bc <HAL_DMA2D_ConfigLayer+0x120>)
 80076e8:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	2b0a      	cmp	r3, #10
 80076f0:	d003      	beq.n	80076fa <HAL_DMA2D_ConfigLayer+0x5e>
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	2b09      	cmp	r3, #9
 80076f8:	d107      	bne.n	800770a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	68db      	ldr	r3, [r3, #12]
 80076fe:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007702:	697a      	ldr	r2, [r7, #20]
 8007704:	4313      	orrs	r3, r2
 8007706:	617b      	str	r3, [r7, #20]
 8007708:	e005      	b.n	8007716 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	68db      	ldr	r3, [r3, #12]
 800770e:	061b      	lsls	r3, r3, #24
 8007710:	697a      	ldr	r2, [r7, #20]
 8007712:	4313      	orrs	r3, r2
 8007714:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d120      	bne.n	800775e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	43db      	mvns	r3, r3
 8007726:	ea02 0103 	and.w	r1, r2, r3
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	697a      	ldr	r2, [r7, #20]
 8007730:	430a      	orrs	r2, r1
 8007732:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	693a      	ldr	r2, [r7, #16]
 800773a:	6812      	ldr	r2, [r2, #0]
 800773c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	2b0a      	cmp	r3, #10
 8007744:	d003      	beq.n	800774e <HAL_DMA2D_ConfigLayer+0xb2>
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	2b09      	cmp	r3, #9
 800774c:	d127      	bne.n	800779e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	68da      	ldr	r2, [r3, #12]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800775a:	629a      	str	r2, [r3, #40]	; 0x28
 800775c:	e01f      	b.n	800779e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	69da      	ldr	r2, [r3, #28]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	43db      	mvns	r3, r3
 8007768:	ea02 0103 	and.w	r1, r2, r3
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	697a      	ldr	r2, [r7, #20]
 8007772:	430a      	orrs	r2, r1
 8007774:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	693a      	ldr	r2, [r7, #16]
 800777c:	6812      	ldr	r2, [r2, #0]
 800777e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	2b0a      	cmp	r3, #10
 8007786:	d003      	beq.n	8007790 <HAL_DMA2D_ConfigLayer+0xf4>
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	2b09      	cmp	r3, #9
 800778e:	d106      	bne.n	800779e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	68da      	ldr	r2, [r3, #12]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800779c:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2201      	movs	r2, #1
 80077a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2200      	movs	r2, #0
 80077aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80077ae:	2300      	movs	r3, #0
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	371c      	adds	r7, #28
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr
 80077bc:	ff03000f 	.word	0xff03000f

080077c0 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b08b      	sub	sp, #44	; 0x2c
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	60f8      	str	r0, [r7, #12]
 80077c8:	60b9      	str	r1, [r7, #8]
 80077ca:	607a      	str	r2, [r7, #4]
 80077cc:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077d4:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	041a      	lsls	r2, r3, #16
 80077dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077de:	431a      	orrs	r2, r3
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	430a      	orrs	r2, r1
 80077e6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	687a      	ldr	r2, [r7, #4]
 80077ee:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	685b      	ldr	r3, [r3, #4]
 80077f4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80077f8:	d174      	bne.n	80078e4 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007800:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007808:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007810:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	b2db      	uxtb	r3, r3
 8007816:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	689b      	ldr	r3, [r3, #8]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d108      	bne.n	8007832 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8007820:	69ba      	ldr	r2, [r7, #24]
 8007822:	69fb      	ldr	r3, [r7, #28]
 8007824:	431a      	orrs	r2, r3
 8007826:	6a3b      	ldr	r3, [r7, #32]
 8007828:	4313      	orrs	r3, r2
 800782a:	697a      	ldr	r2, [r7, #20]
 800782c:	4313      	orrs	r3, r2
 800782e:	627b      	str	r3, [r7, #36]	; 0x24
 8007830:	e053      	b.n	80078da <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	2b01      	cmp	r3, #1
 8007838:	d106      	bne.n	8007848 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800783a:	69ba      	ldr	r2, [r7, #24]
 800783c:	69fb      	ldr	r3, [r7, #28]
 800783e:	4313      	orrs	r3, r2
 8007840:	697a      	ldr	r2, [r7, #20]
 8007842:	4313      	orrs	r3, r2
 8007844:	627b      	str	r3, [r7, #36]	; 0x24
 8007846:	e048      	b.n	80078da <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	2b02      	cmp	r3, #2
 800784e:	d111      	bne.n	8007874 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8007850:	69fb      	ldr	r3, [r7, #28]
 8007852:	0cdb      	lsrs	r3, r3, #19
 8007854:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8007856:	69bb      	ldr	r3, [r7, #24]
 8007858:	0a9b      	lsrs	r3, r3, #10
 800785a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	08db      	lsrs	r3, r3, #3
 8007860:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8007862:	69bb      	ldr	r3, [r7, #24]
 8007864:	015a      	lsls	r2, r3, #5
 8007866:	69fb      	ldr	r3, [r7, #28]
 8007868:	02db      	lsls	r3, r3, #11
 800786a:	4313      	orrs	r3, r2
 800786c:	697a      	ldr	r2, [r7, #20]
 800786e:	4313      	orrs	r3, r2
 8007870:	627b      	str	r3, [r7, #36]	; 0x24
 8007872:	e032      	b.n	80078da <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	689b      	ldr	r3, [r3, #8]
 8007878:	2b03      	cmp	r3, #3
 800787a:	d117      	bne.n	80078ac <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 800787c:	6a3b      	ldr	r3, [r7, #32]
 800787e:	0fdb      	lsrs	r3, r3, #31
 8007880:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8007882:	69fb      	ldr	r3, [r7, #28]
 8007884:	0cdb      	lsrs	r3, r3, #19
 8007886:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8007888:	69bb      	ldr	r3, [r7, #24]
 800788a:	0adb      	lsrs	r3, r3, #11
 800788c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	08db      	lsrs	r3, r3, #3
 8007892:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8007894:	69bb      	ldr	r3, [r7, #24]
 8007896:	015a      	lsls	r2, r3, #5
 8007898:	69fb      	ldr	r3, [r7, #28]
 800789a:	029b      	lsls	r3, r3, #10
 800789c:	431a      	orrs	r2, r3
 800789e:	6a3b      	ldr	r3, [r7, #32]
 80078a0:	03db      	lsls	r3, r3, #15
 80078a2:	4313      	orrs	r3, r2
 80078a4:	697a      	ldr	r2, [r7, #20]
 80078a6:	4313      	orrs	r3, r2
 80078a8:	627b      	str	r3, [r7, #36]	; 0x24
 80078aa:	e016      	b.n	80078da <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80078ac:	6a3b      	ldr	r3, [r7, #32]
 80078ae:	0f1b      	lsrs	r3, r3, #28
 80078b0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80078b2:	69fb      	ldr	r3, [r7, #28]
 80078b4:	0d1b      	lsrs	r3, r3, #20
 80078b6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80078b8:	69bb      	ldr	r3, [r7, #24]
 80078ba:	0b1b      	lsrs	r3, r3, #12
 80078bc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	091b      	lsrs	r3, r3, #4
 80078c2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80078c4:	69bb      	ldr	r3, [r7, #24]
 80078c6:	011a      	lsls	r2, r3, #4
 80078c8:	69fb      	ldr	r3, [r7, #28]
 80078ca:	021b      	lsls	r3, r3, #8
 80078cc:	431a      	orrs	r2, r3
 80078ce:	6a3b      	ldr	r3, [r7, #32]
 80078d0:	031b      	lsls	r3, r3, #12
 80078d2:	4313      	orrs	r3, r2
 80078d4:	697a      	ldr	r2, [r7, #20]
 80078d6:	4313      	orrs	r3, r2
 80078d8:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078e0:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80078e2:	e003      	b.n	80078ec <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	68ba      	ldr	r2, [r7, #8]
 80078ea:	60da      	str	r2, [r3, #12]
}
 80078ec:	bf00      	nop
 80078ee:	372c      	adds	r7, #44	; 0x2c
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr

080078f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b089      	sub	sp, #36	; 0x24
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8007902:	2300      	movs	r3, #0
 8007904:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8007906:	2300      	movs	r3, #0
 8007908:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800790a:	2300      	movs	r3, #0
 800790c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800790e:	2300      	movs	r3, #0
 8007910:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8007912:	2300      	movs	r3, #0
 8007914:	61fb      	str	r3, [r7, #28]
 8007916:	e175      	b.n	8007c04 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007918:	2201      	movs	r2, #1
 800791a:	69fb      	ldr	r3, [r7, #28]
 800791c:	fa02 f303 	lsl.w	r3, r2, r3
 8007920:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	697a      	ldr	r2, [r7, #20]
 8007928:	4013      	ands	r3, r2
 800792a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800792c:	693a      	ldr	r2, [r7, #16]
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	429a      	cmp	r2, r3
 8007932:	f040 8164 	bne.w	8007bfe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	f003 0303 	and.w	r3, r3, #3
 800793e:	2b01      	cmp	r3, #1
 8007940:	d005      	beq.n	800794e <HAL_GPIO_Init+0x56>
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	f003 0303 	and.w	r3, r3, #3
 800794a:	2b02      	cmp	r3, #2
 800794c:	d130      	bne.n	80079b0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007954:	69fb      	ldr	r3, [r7, #28]
 8007956:	005b      	lsls	r3, r3, #1
 8007958:	2203      	movs	r2, #3
 800795a:	fa02 f303 	lsl.w	r3, r2, r3
 800795e:	43db      	mvns	r3, r3
 8007960:	69ba      	ldr	r2, [r7, #24]
 8007962:	4013      	ands	r3, r2
 8007964:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	68da      	ldr	r2, [r3, #12]
 800796a:	69fb      	ldr	r3, [r7, #28]
 800796c:	005b      	lsls	r3, r3, #1
 800796e:	fa02 f303 	lsl.w	r3, r2, r3
 8007972:	69ba      	ldr	r2, [r7, #24]
 8007974:	4313      	orrs	r3, r2
 8007976:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	69ba      	ldr	r2, [r7, #24]
 800797c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007984:	2201      	movs	r2, #1
 8007986:	69fb      	ldr	r3, [r7, #28]
 8007988:	fa02 f303 	lsl.w	r3, r2, r3
 800798c:	43db      	mvns	r3, r3
 800798e:	69ba      	ldr	r2, [r7, #24]
 8007990:	4013      	ands	r3, r2
 8007992:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	091b      	lsrs	r3, r3, #4
 800799a:	f003 0201 	and.w	r2, r3, #1
 800799e:	69fb      	ldr	r3, [r7, #28]
 80079a0:	fa02 f303 	lsl.w	r3, r2, r3
 80079a4:	69ba      	ldr	r2, [r7, #24]
 80079a6:	4313      	orrs	r3, r2
 80079a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	69ba      	ldr	r2, [r7, #24]
 80079ae:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	f003 0303 	and.w	r3, r3, #3
 80079b8:	2b03      	cmp	r3, #3
 80079ba:	d017      	beq.n	80079ec <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	68db      	ldr	r3, [r3, #12]
 80079c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80079c2:	69fb      	ldr	r3, [r7, #28]
 80079c4:	005b      	lsls	r3, r3, #1
 80079c6:	2203      	movs	r2, #3
 80079c8:	fa02 f303 	lsl.w	r3, r2, r3
 80079cc:	43db      	mvns	r3, r3
 80079ce:	69ba      	ldr	r2, [r7, #24]
 80079d0:	4013      	ands	r3, r2
 80079d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	689a      	ldr	r2, [r3, #8]
 80079d8:	69fb      	ldr	r3, [r7, #28]
 80079da:	005b      	lsls	r3, r3, #1
 80079dc:	fa02 f303 	lsl.w	r3, r2, r3
 80079e0:	69ba      	ldr	r2, [r7, #24]
 80079e2:	4313      	orrs	r3, r2
 80079e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	69ba      	ldr	r2, [r7, #24]
 80079ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	f003 0303 	and.w	r3, r3, #3
 80079f4:	2b02      	cmp	r3, #2
 80079f6:	d123      	bne.n	8007a40 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80079f8:	69fb      	ldr	r3, [r7, #28]
 80079fa:	08da      	lsrs	r2, r3, #3
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	3208      	adds	r2, #8
 8007a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007a06:	69fb      	ldr	r3, [r7, #28]
 8007a08:	f003 0307 	and.w	r3, r3, #7
 8007a0c:	009b      	lsls	r3, r3, #2
 8007a0e:	220f      	movs	r2, #15
 8007a10:	fa02 f303 	lsl.w	r3, r2, r3
 8007a14:	43db      	mvns	r3, r3
 8007a16:	69ba      	ldr	r2, [r7, #24]
 8007a18:	4013      	ands	r3, r2
 8007a1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	691a      	ldr	r2, [r3, #16]
 8007a20:	69fb      	ldr	r3, [r7, #28]
 8007a22:	f003 0307 	and.w	r3, r3, #7
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	fa02 f303 	lsl.w	r3, r2, r3
 8007a2c:	69ba      	ldr	r2, [r7, #24]
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8007a32:	69fb      	ldr	r3, [r7, #28]
 8007a34:	08da      	lsrs	r2, r3, #3
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	3208      	adds	r2, #8
 8007a3a:	69b9      	ldr	r1, [r7, #24]
 8007a3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007a46:	69fb      	ldr	r3, [r7, #28]
 8007a48:	005b      	lsls	r3, r3, #1
 8007a4a:	2203      	movs	r2, #3
 8007a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a50:	43db      	mvns	r3, r3
 8007a52:	69ba      	ldr	r2, [r7, #24]
 8007a54:	4013      	ands	r3, r2
 8007a56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	f003 0203 	and.w	r2, r3, #3
 8007a60:	69fb      	ldr	r3, [r7, #28]
 8007a62:	005b      	lsls	r3, r3, #1
 8007a64:	fa02 f303 	lsl.w	r3, r2, r3
 8007a68:	69ba      	ldr	r2, [r7, #24]
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	69ba      	ldr	r2, [r7, #24]
 8007a72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	f000 80be 	beq.w	8007bfe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007a82:	4b66      	ldr	r3, [pc, #408]	; (8007c1c <HAL_GPIO_Init+0x324>)
 8007a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a86:	4a65      	ldr	r2, [pc, #404]	; (8007c1c <HAL_GPIO_Init+0x324>)
 8007a88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8007a8e:	4b63      	ldr	r3, [pc, #396]	; (8007c1c <HAL_GPIO_Init+0x324>)
 8007a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a96:	60fb      	str	r3, [r7, #12]
 8007a98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8007a9a:	4a61      	ldr	r2, [pc, #388]	; (8007c20 <HAL_GPIO_Init+0x328>)
 8007a9c:	69fb      	ldr	r3, [r7, #28]
 8007a9e:	089b      	lsrs	r3, r3, #2
 8007aa0:	3302      	adds	r3, #2
 8007aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007aa8:	69fb      	ldr	r3, [r7, #28]
 8007aaa:	f003 0303 	and.w	r3, r3, #3
 8007aae:	009b      	lsls	r3, r3, #2
 8007ab0:	220f      	movs	r2, #15
 8007ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ab6:	43db      	mvns	r3, r3
 8007ab8:	69ba      	ldr	r2, [r7, #24]
 8007aba:	4013      	ands	r3, r2
 8007abc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	4a58      	ldr	r2, [pc, #352]	; (8007c24 <HAL_GPIO_Init+0x32c>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d037      	beq.n	8007b36 <HAL_GPIO_Init+0x23e>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	4a57      	ldr	r2, [pc, #348]	; (8007c28 <HAL_GPIO_Init+0x330>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d031      	beq.n	8007b32 <HAL_GPIO_Init+0x23a>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	4a56      	ldr	r2, [pc, #344]	; (8007c2c <HAL_GPIO_Init+0x334>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d02b      	beq.n	8007b2e <HAL_GPIO_Init+0x236>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	4a55      	ldr	r2, [pc, #340]	; (8007c30 <HAL_GPIO_Init+0x338>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d025      	beq.n	8007b2a <HAL_GPIO_Init+0x232>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	4a54      	ldr	r2, [pc, #336]	; (8007c34 <HAL_GPIO_Init+0x33c>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d01f      	beq.n	8007b26 <HAL_GPIO_Init+0x22e>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	4a53      	ldr	r2, [pc, #332]	; (8007c38 <HAL_GPIO_Init+0x340>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d019      	beq.n	8007b22 <HAL_GPIO_Init+0x22a>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	4a52      	ldr	r2, [pc, #328]	; (8007c3c <HAL_GPIO_Init+0x344>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d013      	beq.n	8007b1e <HAL_GPIO_Init+0x226>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	4a51      	ldr	r2, [pc, #324]	; (8007c40 <HAL_GPIO_Init+0x348>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d00d      	beq.n	8007b1a <HAL_GPIO_Init+0x222>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	4a50      	ldr	r2, [pc, #320]	; (8007c44 <HAL_GPIO_Init+0x34c>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d007      	beq.n	8007b16 <HAL_GPIO_Init+0x21e>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	4a4f      	ldr	r2, [pc, #316]	; (8007c48 <HAL_GPIO_Init+0x350>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d101      	bne.n	8007b12 <HAL_GPIO_Init+0x21a>
 8007b0e:	2309      	movs	r3, #9
 8007b10:	e012      	b.n	8007b38 <HAL_GPIO_Init+0x240>
 8007b12:	230a      	movs	r3, #10
 8007b14:	e010      	b.n	8007b38 <HAL_GPIO_Init+0x240>
 8007b16:	2308      	movs	r3, #8
 8007b18:	e00e      	b.n	8007b38 <HAL_GPIO_Init+0x240>
 8007b1a:	2307      	movs	r3, #7
 8007b1c:	e00c      	b.n	8007b38 <HAL_GPIO_Init+0x240>
 8007b1e:	2306      	movs	r3, #6
 8007b20:	e00a      	b.n	8007b38 <HAL_GPIO_Init+0x240>
 8007b22:	2305      	movs	r3, #5
 8007b24:	e008      	b.n	8007b38 <HAL_GPIO_Init+0x240>
 8007b26:	2304      	movs	r3, #4
 8007b28:	e006      	b.n	8007b38 <HAL_GPIO_Init+0x240>
 8007b2a:	2303      	movs	r3, #3
 8007b2c:	e004      	b.n	8007b38 <HAL_GPIO_Init+0x240>
 8007b2e:	2302      	movs	r3, #2
 8007b30:	e002      	b.n	8007b38 <HAL_GPIO_Init+0x240>
 8007b32:	2301      	movs	r3, #1
 8007b34:	e000      	b.n	8007b38 <HAL_GPIO_Init+0x240>
 8007b36:	2300      	movs	r3, #0
 8007b38:	69fa      	ldr	r2, [r7, #28]
 8007b3a:	f002 0203 	and.w	r2, r2, #3
 8007b3e:	0092      	lsls	r2, r2, #2
 8007b40:	4093      	lsls	r3, r2
 8007b42:	69ba      	ldr	r2, [r7, #24]
 8007b44:	4313      	orrs	r3, r2
 8007b46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8007b48:	4935      	ldr	r1, [pc, #212]	; (8007c20 <HAL_GPIO_Init+0x328>)
 8007b4a:	69fb      	ldr	r3, [r7, #28]
 8007b4c:	089b      	lsrs	r3, r3, #2
 8007b4e:	3302      	adds	r3, #2
 8007b50:	69ba      	ldr	r2, [r7, #24]
 8007b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007b56:	4b3d      	ldr	r3, [pc, #244]	; (8007c4c <HAL_GPIO_Init+0x354>)
 8007b58:	689b      	ldr	r3, [r3, #8]
 8007b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	43db      	mvns	r3, r3
 8007b60:	69ba      	ldr	r2, [r7, #24]
 8007b62:	4013      	ands	r3, r2
 8007b64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d003      	beq.n	8007b7a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8007b72:	69ba      	ldr	r2, [r7, #24]
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	4313      	orrs	r3, r2
 8007b78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007b7a:	4a34      	ldr	r2, [pc, #208]	; (8007c4c <HAL_GPIO_Init+0x354>)
 8007b7c:	69bb      	ldr	r3, [r7, #24]
 8007b7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007b80:	4b32      	ldr	r3, [pc, #200]	; (8007c4c <HAL_GPIO_Init+0x354>)
 8007b82:	68db      	ldr	r3, [r3, #12]
 8007b84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	43db      	mvns	r3, r3
 8007b8a:	69ba      	ldr	r2, [r7, #24]
 8007b8c:	4013      	ands	r3, r2
 8007b8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d003      	beq.n	8007ba4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007b9c:	69ba      	ldr	r2, [r7, #24]
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007ba4:	4a29      	ldr	r2, [pc, #164]	; (8007c4c <HAL_GPIO_Init+0x354>)
 8007ba6:	69bb      	ldr	r3, [r7, #24]
 8007ba8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007baa:	4b28      	ldr	r3, [pc, #160]	; (8007c4c <HAL_GPIO_Init+0x354>)
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	43db      	mvns	r3, r3
 8007bb4:	69ba      	ldr	r2, [r7, #24]
 8007bb6:	4013      	ands	r3, r2
 8007bb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d003      	beq.n	8007bce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007bc6:	69ba      	ldr	r2, [r7, #24]
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007bce:	4a1f      	ldr	r2, [pc, #124]	; (8007c4c <HAL_GPIO_Init+0x354>)
 8007bd0:	69bb      	ldr	r3, [r7, #24]
 8007bd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007bd4:	4b1d      	ldr	r3, [pc, #116]	; (8007c4c <HAL_GPIO_Init+0x354>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	43db      	mvns	r3, r3
 8007bde:	69ba      	ldr	r2, [r7, #24]
 8007be0:	4013      	ands	r3, r2
 8007be2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d003      	beq.n	8007bf8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007bf0:	69ba      	ldr	r2, [r7, #24]
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007bf8:	4a14      	ldr	r2, [pc, #80]	; (8007c4c <HAL_GPIO_Init+0x354>)
 8007bfa:	69bb      	ldr	r3, [r7, #24]
 8007bfc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8007bfe:	69fb      	ldr	r3, [r7, #28]
 8007c00:	3301      	adds	r3, #1
 8007c02:	61fb      	str	r3, [r7, #28]
 8007c04:	69fb      	ldr	r3, [r7, #28]
 8007c06:	2b0f      	cmp	r3, #15
 8007c08:	f67f ae86 	bls.w	8007918 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8007c0c:	bf00      	nop
 8007c0e:	bf00      	nop
 8007c10:	3724      	adds	r7, #36	; 0x24
 8007c12:	46bd      	mov	sp, r7
 8007c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c18:	4770      	bx	lr
 8007c1a:	bf00      	nop
 8007c1c:	40023800 	.word	0x40023800
 8007c20:	40013800 	.word	0x40013800
 8007c24:	40020000 	.word	0x40020000
 8007c28:	40020400 	.word	0x40020400
 8007c2c:	40020800 	.word	0x40020800
 8007c30:	40020c00 	.word	0x40020c00
 8007c34:	40021000 	.word	0x40021000
 8007c38:	40021400 	.word	0x40021400
 8007c3c:	40021800 	.word	0x40021800
 8007c40:	40021c00 	.word	0x40021c00
 8007c44:	40022000 	.word	0x40022000
 8007c48:	40022400 	.word	0x40022400
 8007c4c:	40013c00 	.word	0x40013c00

08007c50 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b087      	sub	sp, #28
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8007c62:	2300      	movs	r3, #0
 8007c64:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8007c66:	2300      	movs	r3, #0
 8007c68:	617b      	str	r3, [r7, #20]
 8007c6a:	e0d9      	b.n	8007e20 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	fa02 f303 	lsl.w	r3, r2, r3
 8007c74:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8007c76:	683a      	ldr	r2, [r7, #0]
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	4013      	ands	r3, r2
 8007c7c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8007c7e:	68fa      	ldr	r2, [r7, #12]
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	429a      	cmp	r2, r3
 8007c84:	f040 80c9 	bne.w	8007e1a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8007c88:	4a6b      	ldr	r2, [pc, #428]	; (8007e38 <HAL_GPIO_DeInit+0x1e8>)
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	089b      	lsrs	r3, r3, #2
 8007c8e:	3302      	adds	r3, #2
 8007c90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c94:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	f003 0303 	and.w	r3, r3, #3
 8007c9c:	009b      	lsls	r3, r3, #2
 8007c9e:	220f      	movs	r2, #15
 8007ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ca4:	68ba      	ldr	r2, [r7, #8]
 8007ca6:	4013      	ands	r3, r2
 8007ca8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	4a63      	ldr	r2, [pc, #396]	; (8007e3c <HAL_GPIO_DeInit+0x1ec>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d037      	beq.n	8007d22 <HAL_GPIO_DeInit+0xd2>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	4a62      	ldr	r2, [pc, #392]	; (8007e40 <HAL_GPIO_DeInit+0x1f0>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d031      	beq.n	8007d1e <HAL_GPIO_DeInit+0xce>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	4a61      	ldr	r2, [pc, #388]	; (8007e44 <HAL_GPIO_DeInit+0x1f4>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d02b      	beq.n	8007d1a <HAL_GPIO_DeInit+0xca>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	4a60      	ldr	r2, [pc, #384]	; (8007e48 <HAL_GPIO_DeInit+0x1f8>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d025      	beq.n	8007d16 <HAL_GPIO_DeInit+0xc6>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	4a5f      	ldr	r2, [pc, #380]	; (8007e4c <HAL_GPIO_DeInit+0x1fc>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d01f      	beq.n	8007d12 <HAL_GPIO_DeInit+0xc2>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	4a5e      	ldr	r2, [pc, #376]	; (8007e50 <HAL_GPIO_DeInit+0x200>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d019      	beq.n	8007d0e <HAL_GPIO_DeInit+0xbe>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	4a5d      	ldr	r2, [pc, #372]	; (8007e54 <HAL_GPIO_DeInit+0x204>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d013      	beq.n	8007d0a <HAL_GPIO_DeInit+0xba>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	4a5c      	ldr	r2, [pc, #368]	; (8007e58 <HAL_GPIO_DeInit+0x208>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d00d      	beq.n	8007d06 <HAL_GPIO_DeInit+0xb6>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	4a5b      	ldr	r2, [pc, #364]	; (8007e5c <HAL_GPIO_DeInit+0x20c>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d007      	beq.n	8007d02 <HAL_GPIO_DeInit+0xb2>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	4a5a      	ldr	r2, [pc, #360]	; (8007e60 <HAL_GPIO_DeInit+0x210>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d101      	bne.n	8007cfe <HAL_GPIO_DeInit+0xae>
 8007cfa:	2309      	movs	r3, #9
 8007cfc:	e012      	b.n	8007d24 <HAL_GPIO_DeInit+0xd4>
 8007cfe:	230a      	movs	r3, #10
 8007d00:	e010      	b.n	8007d24 <HAL_GPIO_DeInit+0xd4>
 8007d02:	2308      	movs	r3, #8
 8007d04:	e00e      	b.n	8007d24 <HAL_GPIO_DeInit+0xd4>
 8007d06:	2307      	movs	r3, #7
 8007d08:	e00c      	b.n	8007d24 <HAL_GPIO_DeInit+0xd4>
 8007d0a:	2306      	movs	r3, #6
 8007d0c:	e00a      	b.n	8007d24 <HAL_GPIO_DeInit+0xd4>
 8007d0e:	2305      	movs	r3, #5
 8007d10:	e008      	b.n	8007d24 <HAL_GPIO_DeInit+0xd4>
 8007d12:	2304      	movs	r3, #4
 8007d14:	e006      	b.n	8007d24 <HAL_GPIO_DeInit+0xd4>
 8007d16:	2303      	movs	r3, #3
 8007d18:	e004      	b.n	8007d24 <HAL_GPIO_DeInit+0xd4>
 8007d1a:	2302      	movs	r3, #2
 8007d1c:	e002      	b.n	8007d24 <HAL_GPIO_DeInit+0xd4>
 8007d1e:	2301      	movs	r3, #1
 8007d20:	e000      	b.n	8007d24 <HAL_GPIO_DeInit+0xd4>
 8007d22:	2300      	movs	r3, #0
 8007d24:	697a      	ldr	r2, [r7, #20]
 8007d26:	f002 0203 	and.w	r2, r2, #3
 8007d2a:	0092      	lsls	r2, r2, #2
 8007d2c:	4093      	lsls	r3, r2
 8007d2e:	68ba      	ldr	r2, [r7, #8]
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d132      	bne.n	8007d9a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8007d34:	4b4b      	ldr	r3, [pc, #300]	; (8007e64 <HAL_GPIO_DeInit+0x214>)
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	43db      	mvns	r3, r3
 8007d3c:	4949      	ldr	r1, [pc, #292]	; (8007e64 <HAL_GPIO_DeInit+0x214>)
 8007d3e:	4013      	ands	r3, r2
 8007d40:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8007d42:	4b48      	ldr	r3, [pc, #288]	; (8007e64 <HAL_GPIO_DeInit+0x214>)
 8007d44:	685a      	ldr	r2, [r3, #4]
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	43db      	mvns	r3, r3
 8007d4a:	4946      	ldr	r1, [pc, #280]	; (8007e64 <HAL_GPIO_DeInit+0x214>)
 8007d4c:	4013      	ands	r3, r2
 8007d4e:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8007d50:	4b44      	ldr	r3, [pc, #272]	; (8007e64 <HAL_GPIO_DeInit+0x214>)
 8007d52:	68da      	ldr	r2, [r3, #12]
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	43db      	mvns	r3, r3
 8007d58:	4942      	ldr	r1, [pc, #264]	; (8007e64 <HAL_GPIO_DeInit+0x214>)
 8007d5a:	4013      	ands	r3, r2
 8007d5c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8007d5e:	4b41      	ldr	r3, [pc, #260]	; (8007e64 <HAL_GPIO_DeInit+0x214>)
 8007d60:	689a      	ldr	r2, [r3, #8]
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	43db      	mvns	r3, r3
 8007d66:	493f      	ldr	r1, [pc, #252]	; (8007e64 <HAL_GPIO_DeInit+0x214>)
 8007d68:	4013      	ands	r3, r2
 8007d6a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	f003 0303 	and.w	r3, r3, #3
 8007d72:	009b      	lsls	r3, r3, #2
 8007d74:	220f      	movs	r2, #15
 8007d76:	fa02 f303 	lsl.w	r3, r2, r3
 8007d7a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8007d7c:	4a2e      	ldr	r2, [pc, #184]	; (8007e38 <HAL_GPIO_DeInit+0x1e8>)
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	089b      	lsrs	r3, r3, #2
 8007d82:	3302      	adds	r3, #2
 8007d84:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	43da      	mvns	r2, r3
 8007d8c:	482a      	ldr	r0, [pc, #168]	; (8007e38 <HAL_GPIO_DeInit+0x1e8>)
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	089b      	lsrs	r3, r3, #2
 8007d92:	400a      	ands	r2, r1
 8007d94:	3302      	adds	r3, #2
 8007d96:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681a      	ldr	r2, [r3, #0]
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	005b      	lsls	r3, r3, #1
 8007da2:	2103      	movs	r1, #3
 8007da4:	fa01 f303 	lsl.w	r3, r1, r3
 8007da8:	43db      	mvns	r3, r3
 8007daa:	401a      	ands	r2, r3
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	08da      	lsrs	r2, r3, #3
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	3208      	adds	r2, #8
 8007db8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	f003 0307 	and.w	r3, r3, #7
 8007dc2:	009b      	lsls	r3, r3, #2
 8007dc4:	220f      	movs	r2, #15
 8007dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8007dca:	43db      	mvns	r3, r3
 8007dcc:	697a      	ldr	r2, [r7, #20]
 8007dce:	08d2      	lsrs	r2, r2, #3
 8007dd0:	4019      	ands	r1, r3
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	3208      	adds	r2, #8
 8007dd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	68da      	ldr	r2, [r3, #12]
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	005b      	lsls	r3, r3, #1
 8007de2:	2103      	movs	r1, #3
 8007de4:	fa01 f303 	lsl.w	r3, r1, r3
 8007de8:	43db      	mvns	r3, r3
 8007dea:	401a      	ands	r2, r3
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	685a      	ldr	r2, [r3, #4]
 8007df4:	2101      	movs	r1, #1
 8007df6:	697b      	ldr	r3, [r7, #20]
 8007df8:	fa01 f303 	lsl.w	r3, r1, r3
 8007dfc:	43db      	mvns	r3, r3
 8007dfe:	401a      	ands	r2, r3
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	689a      	ldr	r2, [r3, #8]
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	005b      	lsls	r3, r3, #1
 8007e0c:	2103      	movs	r1, #3
 8007e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8007e12:	43db      	mvns	r3, r3
 8007e14:	401a      	ands	r2, r3
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	3301      	adds	r3, #1
 8007e1e:	617b      	str	r3, [r7, #20]
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	2b0f      	cmp	r3, #15
 8007e24:	f67f af22 	bls.w	8007c6c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8007e28:	bf00      	nop
 8007e2a:	bf00      	nop
 8007e2c:	371c      	adds	r7, #28
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr
 8007e36:	bf00      	nop
 8007e38:	40013800 	.word	0x40013800
 8007e3c:	40020000 	.word	0x40020000
 8007e40:	40020400 	.word	0x40020400
 8007e44:	40020800 	.word	0x40020800
 8007e48:	40020c00 	.word	0x40020c00
 8007e4c:	40021000 	.word	0x40021000
 8007e50:	40021400 	.word	0x40021400
 8007e54:	40021800 	.word	0x40021800
 8007e58:	40021c00 	.word	0x40021c00
 8007e5c:	40022000 	.word	0x40022000
 8007e60:	40022400 	.word	0x40022400
 8007e64:	40013c00 	.word	0x40013c00

08007e68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b085      	sub	sp, #20
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	460b      	mov	r3, r1
 8007e72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	691a      	ldr	r2, [r3, #16]
 8007e78:	887b      	ldrh	r3, [r7, #2]
 8007e7a:	4013      	ands	r3, r2
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d002      	beq.n	8007e86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007e80:	2301      	movs	r3, #1
 8007e82:	73fb      	strb	r3, [r7, #15]
 8007e84:	e001      	b.n	8007e8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007e86:	2300      	movs	r3, #0
 8007e88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3714      	adds	r7, #20
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr

08007e98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b083      	sub	sp, #12
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	460b      	mov	r3, r1
 8007ea2:	807b      	strh	r3, [r7, #2]
 8007ea4:	4613      	mov	r3, r2
 8007ea6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007ea8:	787b      	ldrb	r3, [r7, #1]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d003      	beq.n	8007eb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007eae:	887a      	ldrh	r2, [r7, #2]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8007eb4:	e003      	b.n	8007ebe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8007eb6:	887b      	ldrh	r3, [r7, #2]
 8007eb8:	041a      	lsls	r2, r3, #16
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	619a      	str	r2, [r3, #24]
}
 8007ebe:	bf00      	nop
 8007ec0:	370c      	adds	r7, #12
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec8:	4770      	bx	lr
	...

08007ecc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b082      	sub	sp, #8
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d101      	bne.n	8007ede <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007eda:	2301      	movs	r3, #1
 8007edc:	e07f      	b.n	8007fde <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ee4:	b2db      	uxtb	r3, r3
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d106      	bne.n	8007ef8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2200      	movs	r2, #0
 8007eee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f000 f8a9 	bl	800804a <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2224      	movs	r2, #36	; 0x24
 8007efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	681a      	ldr	r2, [r3, #0]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f022 0201 	bic.w	r2, r2, #1
 8007f0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	685a      	ldr	r2, [r3, #4]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007f1c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	689a      	ldr	r2, [r3, #8]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007f2c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	68db      	ldr	r3, [r3, #12]
 8007f32:	2b01      	cmp	r3, #1
 8007f34:	d107      	bne.n	8007f46 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	689a      	ldr	r2, [r3, #8]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007f42:	609a      	str	r2, [r3, #8]
 8007f44:	e006      	b.n	8007f54 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	689a      	ldr	r2, [r3, #8]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007f52:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	68db      	ldr	r3, [r3, #12]
 8007f58:	2b02      	cmp	r3, #2
 8007f5a:	d104      	bne.n	8007f66 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f64:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	6859      	ldr	r1, [r3, #4]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681a      	ldr	r2, [r3, #0]
 8007f70:	4b1d      	ldr	r3, [pc, #116]	; (8007fe8 <HAL_I2C_Init+0x11c>)
 8007f72:	430b      	orrs	r3, r1
 8007f74:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	68da      	ldr	r2, [r3, #12]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007f84:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	691a      	ldr	r2, [r3, #16]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	695b      	ldr	r3, [r3, #20]
 8007f8e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	699b      	ldr	r3, [r3, #24]
 8007f96:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	430a      	orrs	r2, r1
 8007f9e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	69d9      	ldr	r1, [r3, #28]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6a1a      	ldr	r2, [r3, #32]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	430a      	orrs	r2, r1
 8007fae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	681a      	ldr	r2, [r3, #0]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f042 0201 	orr.w	r2, r2, #1
 8007fbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2220      	movs	r2, #32
 8007fca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007fdc:	2300      	movs	r3, #0
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3708      	adds	r7, #8
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}
 8007fe6:	bf00      	nop
 8007fe8:	02008000 	.word	0x02008000

08007fec <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b082      	sub	sp, #8
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d101      	bne.n	8007ffe <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	e021      	b.n	8008042 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2224      	movs	r2, #36	; 0x24
 8008002:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	681a      	ldr	r2, [r3, #0]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f022 0201 	bic.w	r2, r2, #1
 8008014:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f000 f821 	bl	800805e <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2200      	movs	r2, #0
 8008020:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2200      	movs	r2, #0
 8008026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2200      	movs	r2, #0
 800802e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2200      	movs	r2, #0
 8008034:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2200      	movs	r2, #0
 800803c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008040:	2300      	movs	r3, #0
}
 8008042:	4618      	mov	r0, r3
 8008044:	3708      	adds	r7, #8
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}

0800804a <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800804a:	b480      	push	{r7}
 800804c:	b083      	sub	sp, #12
 800804e:	af00      	add	r7, sp, #0
 8008050:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8008052:	bf00      	nop
 8008054:	370c      	adds	r7, #12
 8008056:	46bd      	mov	sp, r7
 8008058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805c:	4770      	bx	lr

0800805e <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800805e:	b480      	push	{r7}
 8008060:	b083      	sub	sp, #12
 8008062:	af00      	add	r7, sp, #0
 8008064:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8008066:	bf00      	nop
 8008068:	370c      	adds	r7, #12
 800806a:	46bd      	mov	sp, r7
 800806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008070:	4770      	bx	lr
	...

08008074 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b088      	sub	sp, #32
 8008078:	af02      	add	r7, sp, #8
 800807a:	60f8      	str	r0, [r7, #12]
 800807c:	4608      	mov	r0, r1
 800807e:	4611      	mov	r1, r2
 8008080:	461a      	mov	r2, r3
 8008082:	4603      	mov	r3, r0
 8008084:	817b      	strh	r3, [r7, #10]
 8008086:	460b      	mov	r3, r1
 8008088:	813b      	strh	r3, [r7, #8]
 800808a:	4613      	mov	r3, r2
 800808c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008094:	b2db      	uxtb	r3, r3
 8008096:	2b20      	cmp	r3, #32
 8008098:	f040 80f9 	bne.w	800828e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800809c:	6a3b      	ldr	r3, [r7, #32]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d002      	beq.n	80080a8 <HAL_I2C_Mem_Write+0x34>
 80080a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d105      	bne.n	80080b4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080ae:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80080b0:	2301      	movs	r3, #1
 80080b2:	e0ed      	b.n	8008290 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	d101      	bne.n	80080c2 <HAL_I2C_Mem_Write+0x4e>
 80080be:	2302      	movs	r3, #2
 80080c0:	e0e6      	b.n	8008290 <HAL_I2C_Mem_Write+0x21c>
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	2201      	movs	r2, #1
 80080c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80080ca:	f7fe fc73 	bl	80069b4 <HAL_GetTick>
 80080ce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	9300      	str	r3, [sp, #0]
 80080d4:	2319      	movs	r3, #25
 80080d6:	2201      	movs	r2, #1
 80080d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80080dc:	68f8      	ldr	r0, [r7, #12]
 80080de:	f000 fad1 	bl	8008684 <I2C_WaitOnFlagUntilTimeout>
 80080e2:	4603      	mov	r3, r0
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d001      	beq.n	80080ec <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80080e8:	2301      	movs	r3, #1
 80080ea:	e0d1      	b.n	8008290 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	2221      	movs	r2, #33	; 0x21
 80080f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2240      	movs	r2, #64	; 0x40
 80080f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2200      	movs	r2, #0
 8008100:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	6a3a      	ldr	r2, [r7, #32]
 8008106:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800810c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	2200      	movs	r2, #0
 8008112:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008114:	88f8      	ldrh	r0, [r7, #6]
 8008116:	893a      	ldrh	r2, [r7, #8]
 8008118:	8979      	ldrh	r1, [r7, #10]
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	9301      	str	r3, [sp, #4]
 800811e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008120:	9300      	str	r3, [sp, #0]
 8008122:	4603      	mov	r3, r0
 8008124:	68f8      	ldr	r0, [r7, #12]
 8008126:	f000 f9e1 	bl	80084ec <I2C_RequestMemoryWrite>
 800812a:	4603      	mov	r3, r0
 800812c:	2b00      	cmp	r3, #0
 800812e:	d005      	beq.n	800813c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	2200      	movs	r2, #0
 8008134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008138:	2301      	movs	r3, #1
 800813a:	e0a9      	b.n	8008290 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008140:	b29b      	uxth	r3, r3
 8008142:	2bff      	cmp	r3, #255	; 0xff
 8008144:	d90e      	bls.n	8008164 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	22ff      	movs	r2, #255	; 0xff
 800814a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008150:	b2da      	uxtb	r2, r3
 8008152:	8979      	ldrh	r1, [r7, #10]
 8008154:	2300      	movs	r3, #0
 8008156:	9300      	str	r3, [sp, #0]
 8008158:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800815c:	68f8      	ldr	r0, [r7, #12]
 800815e:	f000 fc2d 	bl	80089bc <I2C_TransferConfig>
 8008162:	e00f      	b.n	8008184 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008168:	b29a      	uxth	r2, r3
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008172:	b2da      	uxtb	r2, r3
 8008174:	8979      	ldrh	r1, [r7, #10]
 8008176:	2300      	movs	r3, #0
 8008178:	9300      	str	r3, [sp, #0]
 800817a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800817e:	68f8      	ldr	r0, [r7, #12]
 8008180:	f000 fc1c 	bl	80089bc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008184:	697a      	ldr	r2, [r7, #20]
 8008186:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008188:	68f8      	ldr	r0, [r7, #12]
 800818a:	f000 fabb 	bl	8008704 <I2C_WaitOnTXISFlagUntilTimeout>
 800818e:	4603      	mov	r3, r0
 8008190:	2b00      	cmp	r3, #0
 8008192:	d001      	beq.n	8008198 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008194:	2301      	movs	r3, #1
 8008196:	e07b      	b.n	8008290 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800819c:	781a      	ldrb	r2, [r3, #0]
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a8:	1c5a      	adds	r2, r3, #1
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	3b01      	subs	r3, #1
 80081b6:	b29a      	uxth	r2, r3
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081c0:	3b01      	subs	r3, #1
 80081c2:	b29a      	uxth	r2, r3
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081cc:	b29b      	uxth	r3, r3
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d034      	beq.n	800823c <HAL_I2C_Mem_Write+0x1c8>
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d130      	bne.n	800823c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	9300      	str	r3, [sp, #0]
 80081de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081e0:	2200      	movs	r2, #0
 80081e2:	2180      	movs	r1, #128	; 0x80
 80081e4:	68f8      	ldr	r0, [r7, #12]
 80081e6:	f000 fa4d 	bl	8008684 <I2C_WaitOnFlagUntilTimeout>
 80081ea:	4603      	mov	r3, r0
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d001      	beq.n	80081f4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80081f0:	2301      	movs	r3, #1
 80081f2:	e04d      	b.n	8008290 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081f8:	b29b      	uxth	r3, r3
 80081fa:	2bff      	cmp	r3, #255	; 0xff
 80081fc:	d90e      	bls.n	800821c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	22ff      	movs	r2, #255	; 0xff
 8008202:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008208:	b2da      	uxtb	r2, r3
 800820a:	8979      	ldrh	r1, [r7, #10]
 800820c:	2300      	movs	r3, #0
 800820e:	9300      	str	r3, [sp, #0]
 8008210:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008214:	68f8      	ldr	r0, [r7, #12]
 8008216:	f000 fbd1 	bl	80089bc <I2C_TransferConfig>
 800821a:	e00f      	b.n	800823c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008220:	b29a      	uxth	r2, r3
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800822a:	b2da      	uxtb	r2, r3
 800822c:	8979      	ldrh	r1, [r7, #10]
 800822e:	2300      	movs	r3, #0
 8008230:	9300      	str	r3, [sp, #0]
 8008232:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008236:	68f8      	ldr	r0, [r7, #12]
 8008238:	f000 fbc0 	bl	80089bc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008240:	b29b      	uxth	r3, r3
 8008242:	2b00      	cmp	r3, #0
 8008244:	d19e      	bne.n	8008184 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008246:	697a      	ldr	r2, [r7, #20]
 8008248:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800824a:	68f8      	ldr	r0, [r7, #12]
 800824c:	f000 fa9a 	bl	8008784 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008250:	4603      	mov	r3, r0
 8008252:	2b00      	cmp	r3, #0
 8008254:	d001      	beq.n	800825a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8008256:	2301      	movs	r3, #1
 8008258:	e01a      	b.n	8008290 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	2220      	movs	r2, #32
 8008260:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	6859      	ldr	r1, [r3, #4]
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681a      	ldr	r2, [r3, #0]
 800826c:	4b0a      	ldr	r3, [pc, #40]	; (8008298 <HAL_I2C_Mem_Write+0x224>)
 800826e:	400b      	ands	r3, r1
 8008270:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2220      	movs	r2, #32
 8008276:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2200      	movs	r2, #0
 800827e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2200      	movs	r2, #0
 8008286:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800828a:	2300      	movs	r3, #0
 800828c:	e000      	b.n	8008290 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800828e:	2302      	movs	r3, #2
  }
}
 8008290:	4618      	mov	r0, r3
 8008292:	3718      	adds	r7, #24
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}
 8008298:	fe00e800 	.word	0xfe00e800

0800829c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b088      	sub	sp, #32
 80082a0:	af02      	add	r7, sp, #8
 80082a2:	60f8      	str	r0, [r7, #12]
 80082a4:	4608      	mov	r0, r1
 80082a6:	4611      	mov	r1, r2
 80082a8:	461a      	mov	r2, r3
 80082aa:	4603      	mov	r3, r0
 80082ac:	817b      	strh	r3, [r7, #10]
 80082ae:	460b      	mov	r3, r1
 80082b0:	813b      	strh	r3, [r7, #8]
 80082b2:	4613      	mov	r3, r2
 80082b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80082bc:	b2db      	uxtb	r3, r3
 80082be:	2b20      	cmp	r3, #32
 80082c0:	f040 80fd 	bne.w	80084be <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80082c4:	6a3b      	ldr	r3, [r7, #32]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d002      	beq.n	80082d0 <HAL_I2C_Mem_Read+0x34>
 80082ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d105      	bne.n	80082dc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80082d6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80082d8:	2301      	movs	r3, #1
 80082da:	e0f1      	b.n	80084c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	d101      	bne.n	80082ea <HAL_I2C_Mem_Read+0x4e>
 80082e6:	2302      	movs	r3, #2
 80082e8:	e0ea      	b.n	80084c0 <HAL_I2C_Mem_Read+0x224>
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2201      	movs	r2, #1
 80082ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80082f2:	f7fe fb5f 	bl	80069b4 <HAL_GetTick>
 80082f6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	9300      	str	r3, [sp, #0]
 80082fc:	2319      	movs	r3, #25
 80082fe:	2201      	movs	r2, #1
 8008300:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008304:	68f8      	ldr	r0, [r7, #12]
 8008306:	f000 f9bd 	bl	8008684 <I2C_WaitOnFlagUntilTimeout>
 800830a:	4603      	mov	r3, r0
 800830c:	2b00      	cmp	r3, #0
 800830e:	d001      	beq.n	8008314 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8008310:	2301      	movs	r3, #1
 8008312:	e0d5      	b.n	80084c0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	2222      	movs	r2, #34	; 0x22
 8008318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2240      	movs	r2, #64	; 0x40
 8008320:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2200      	movs	r2, #0
 8008328:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	6a3a      	ldr	r2, [r7, #32]
 800832e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008334:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	2200      	movs	r2, #0
 800833a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800833c:	88f8      	ldrh	r0, [r7, #6]
 800833e:	893a      	ldrh	r2, [r7, #8]
 8008340:	8979      	ldrh	r1, [r7, #10]
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	9301      	str	r3, [sp, #4]
 8008346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008348:	9300      	str	r3, [sp, #0]
 800834a:	4603      	mov	r3, r0
 800834c:	68f8      	ldr	r0, [r7, #12]
 800834e:	f000 f921 	bl	8008594 <I2C_RequestMemoryRead>
 8008352:	4603      	mov	r3, r0
 8008354:	2b00      	cmp	r3, #0
 8008356:	d005      	beq.n	8008364 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2200      	movs	r2, #0
 800835c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008360:	2301      	movs	r3, #1
 8008362:	e0ad      	b.n	80084c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008368:	b29b      	uxth	r3, r3
 800836a:	2bff      	cmp	r3, #255	; 0xff
 800836c:	d90e      	bls.n	800838c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	22ff      	movs	r2, #255	; 0xff
 8008372:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008378:	b2da      	uxtb	r2, r3
 800837a:	8979      	ldrh	r1, [r7, #10]
 800837c:	4b52      	ldr	r3, [pc, #328]	; (80084c8 <HAL_I2C_Mem_Read+0x22c>)
 800837e:	9300      	str	r3, [sp, #0]
 8008380:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008384:	68f8      	ldr	r0, [r7, #12]
 8008386:	f000 fb19 	bl	80089bc <I2C_TransferConfig>
 800838a:	e00f      	b.n	80083ac <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008390:	b29a      	uxth	r2, r3
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800839a:	b2da      	uxtb	r2, r3
 800839c:	8979      	ldrh	r1, [r7, #10]
 800839e:	4b4a      	ldr	r3, [pc, #296]	; (80084c8 <HAL_I2C_Mem_Read+0x22c>)
 80083a0:	9300      	str	r3, [sp, #0]
 80083a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80083a6:	68f8      	ldr	r0, [r7, #12]
 80083a8:	f000 fb08 	bl	80089bc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	9300      	str	r3, [sp, #0]
 80083b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b2:	2200      	movs	r2, #0
 80083b4:	2104      	movs	r1, #4
 80083b6:	68f8      	ldr	r0, [r7, #12]
 80083b8:	f000 f964 	bl	8008684 <I2C_WaitOnFlagUntilTimeout>
 80083bc:	4603      	mov	r3, r0
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d001      	beq.n	80083c6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80083c2:	2301      	movs	r3, #1
 80083c4:	e07c      	b.n	80084c0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d0:	b2d2      	uxtb	r2, r2
 80083d2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d8:	1c5a      	adds	r2, r3, #1
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083e2:	3b01      	subs	r3, #1
 80083e4:	b29a      	uxth	r2, r3
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	3b01      	subs	r3, #1
 80083f2:	b29a      	uxth	r2, r3
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083fc:	b29b      	uxth	r3, r3
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d034      	beq.n	800846c <HAL_I2C_Mem_Read+0x1d0>
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008406:	2b00      	cmp	r3, #0
 8008408:	d130      	bne.n	800846c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	9300      	str	r3, [sp, #0]
 800840e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008410:	2200      	movs	r2, #0
 8008412:	2180      	movs	r1, #128	; 0x80
 8008414:	68f8      	ldr	r0, [r7, #12]
 8008416:	f000 f935 	bl	8008684 <I2C_WaitOnFlagUntilTimeout>
 800841a:	4603      	mov	r3, r0
 800841c:	2b00      	cmp	r3, #0
 800841e:	d001      	beq.n	8008424 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8008420:	2301      	movs	r3, #1
 8008422:	e04d      	b.n	80084c0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008428:	b29b      	uxth	r3, r3
 800842a:	2bff      	cmp	r3, #255	; 0xff
 800842c:	d90e      	bls.n	800844c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	22ff      	movs	r2, #255	; 0xff
 8008432:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008438:	b2da      	uxtb	r2, r3
 800843a:	8979      	ldrh	r1, [r7, #10]
 800843c:	2300      	movs	r3, #0
 800843e:	9300      	str	r3, [sp, #0]
 8008440:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008444:	68f8      	ldr	r0, [r7, #12]
 8008446:	f000 fab9 	bl	80089bc <I2C_TransferConfig>
 800844a:	e00f      	b.n	800846c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008450:	b29a      	uxth	r2, r3
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800845a:	b2da      	uxtb	r2, r3
 800845c:	8979      	ldrh	r1, [r7, #10]
 800845e:	2300      	movs	r3, #0
 8008460:	9300      	str	r3, [sp, #0]
 8008462:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008466:	68f8      	ldr	r0, [r7, #12]
 8008468:	f000 faa8 	bl	80089bc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008470:	b29b      	uxth	r3, r3
 8008472:	2b00      	cmp	r3, #0
 8008474:	d19a      	bne.n	80083ac <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008476:	697a      	ldr	r2, [r7, #20]
 8008478:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800847a:	68f8      	ldr	r0, [r7, #12]
 800847c:	f000 f982 	bl	8008784 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008480:	4603      	mov	r3, r0
 8008482:	2b00      	cmp	r3, #0
 8008484:	d001      	beq.n	800848a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8008486:	2301      	movs	r3, #1
 8008488:	e01a      	b.n	80084c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	2220      	movs	r2, #32
 8008490:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	6859      	ldr	r1, [r3, #4]
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681a      	ldr	r2, [r3, #0]
 800849c:	4b0b      	ldr	r3, [pc, #44]	; (80084cc <HAL_I2C_Mem_Read+0x230>)
 800849e:	400b      	ands	r3, r1
 80084a0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2220      	movs	r2, #32
 80084a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	2200      	movs	r2, #0
 80084ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2200      	movs	r2, #0
 80084b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80084ba:	2300      	movs	r3, #0
 80084bc:	e000      	b.n	80084c0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80084be:	2302      	movs	r3, #2
  }
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3718      	adds	r7, #24
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}
 80084c8:	80002400 	.word	0x80002400
 80084cc:	fe00e800 	.word	0xfe00e800

080084d0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b083      	sub	sp, #12
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80084de:	b2db      	uxtb	r3, r3
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	370c      	adds	r7, #12
 80084e4:	46bd      	mov	sp, r7
 80084e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ea:	4770      	bx	lr

080084ec <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b086      	sub	sp, #24
 80084f0:	af02      	add	r7, sp, #8
 80084f2:	60f8      	str	r0, [r7, #12]
 80084f4:	4608      	mov	r0, r1
 80084f6:	4611      	mov	r1, r2
 80084f8:	461a      	mov	r2, r3
 80084fa:	4603      	mov	r3, r0
 80084fc:	817b      	strh	r3, [r7, #10]
 80084fe:	460b      	mov	r3, r1
 8008500:	813b      	strh	r3, [r7, #8]
 8008502:	4613      	mov	r3, r2
 8008504:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008506:	88fb      	ldrh	r3, [r7, #6]
 8008508:	b2da      	uxtb	r2, r3
 800850a:	8979      	ldrh	r1, [r7, #10]
 800850c:	4b20      	ldr	r3, [pc, #128]	; (8008590 <I2C_RequestMemoryWrite+0xa4>)
 800850e:	9300      	str	r3, [sp, #0]
 8008510:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008514:	68f8      	ldr	r0, [r7, #12]
 8008516:	f000 fa51 	bl	80089bc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800851a:	69fa      	ldr	r2, [r7, #28]
 800851c:	69b9      	ldr	r1, [r7, #24]
 800851e:	68f8      	ldr	r0, [r7, #12]
 8008520:	f000 f8f0 	bl	8008704 <I2C_WaitOnTXISFlagUntilTimeout>
 8008524:	4603      	mov	r3, r0
 8008526:	2b00      	cmp	r3, #0
 8008528:	d001      	beq.n	800852e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800852a:	2301      	movs	r3, #1
 800852c:	e02c      	b.n	8008588 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800852e:	88fb      	ldrh	r3, [r7, #6]
 8008530:	2b01      	cmp	r3, #1
 8008532:	d105      	bne.n	8008540 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008534:	893b      	ldrh	r3, [r7, #8]
 8008536:	b2da      	uxtb	r2, r3
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	629a      	str	r2, [r3, #40]	; 0x28
 800853e:	e015      	b.n	800856c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008540:	893b      	ldrh	r3, [r7, #8]
 8008542:	0a1b      	lsrs	r3, r3, #8
 8008544:	b29b      	uxth	r3, r3
 8008546:	b2da      	uxtb	r2, r3
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800854e:	69fa      	ldr	r2, [r7, #28]
 8008550:	69b9      	ldr	r1, [r7, #24]
 8008552:	68f8      	ldr	r0, [r7, #12]
 8008554:	f000 f8d6 	bl	8008704 <I2C_WaitOnTXISFlagUntilTimeout>
 8008558:	4603      	mov	r3, r0
 800855a:	2b00      	cmp	r3, #0
 800855c:	d001      	beq.n	8008562 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800855e:	2301      	movs	r3, #1
 8008560:	e012      	b.n	8008588 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008562:	893b      	ldrh	r3, [r7, #8]
 8008564:	b2da      	uxtb	r2, r3
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800856c:	69fb      	ldr	r3, [r7, #28]
 800856e:	9300      	str	r3, [sp, #0]
 8008570:	69bb      	ldr	r3, [r7, #24]
 8008572:	2200      	movs	r2, #0
 8008574:	2180      	movs	r1, #128	; 0x80
 8008576:	68f8      	ldr	r0, [r7, #12]
 8008578:	f000 f884 	bl	8008684 <I2C_WaitOnFlagUntilTimeout>
 800857c:	4603      	mov	r3, r0
 800857e:	2b00      	cmp	r3, #0
 8008580:	d001      	beq.n	8008586 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8008582:	2301      	movs	r3, #1
 8008584:	e000      	b.n	8008588 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8008586:	2300      	movs	r3, #0
}
 8008588:	4618      	mov	r0, r3
 800858a:	3710      	adds	r7, #16
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}
 8008590:	80002000 	.word	0x80002000

08008594 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b086      	sub	sp, #24
 8008598:	af02      	add	r7, sp, #8
 800859a:	60f8      	str	r0, [r7, #12]
 800859c:	4608      	mov	r0, r1
 800859e:	4611      	mov	r1, r2
 80085a0:	461a      	mov	r2, r3
 80085a2:	4603      	mov	r3, r0
 80085a4:	817b      	strh	r3, [r7, #10]
 80085a6:	460b      	mov	r3, r1
 80085a8:	813b      	strh	r3, [r7, #8]
 80085aa:	4613      	mov	r3, r2
 80085ac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80085ae:	88fb      	ldrh	r3, [r7, #6]
 80085b0:	b2da      	uxtb	r2, r3
 80085b2:	8979      	ldrh	r1, [r7, #10]
 80085b4:	4b20      	ldr	r3, [pc, #128]	; (8008638 <I2C_RequestMemoryRead+0xa4>)
 80085b6:	9300      	str	r3, [sp, #0]
 80085b8:	2300      	movs	r3, #0
 80085ba:	68f8      	ldr	r0, [r7, #12]
 80085bc:	f000 f9fe 	bl	80089bc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80085c0:	69fa      	ldr	r2, [r7, #28]
 80085c2:	69b9      	ldr	r1, [r7, #24]
 80085c4:	68f8      	ldr	r0, [r7, #12]
 80085c6:	f000 f89d 	bl	8008704 <I2C_WaitOnTXISFlagUntilTimeout>
 80085ca:	4603      	mov	r3, r0
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d001      	beq.n	80085d4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80085d0:	2301      	movs	r3, #1
 80085d2:	e02c      	b.n	800862e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80085d4:	88fb      	ldrh	r3, [r7, #6]
 80085d6:	2b01      	cmp	r3, #1
 80085d8:	d105      	bne.n	80085e6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80085da:	893b      	ldrh	r3, [r7, #8]
 80085dc:	b2da      	uxtb	r2, r3
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	629a      	str	r2, [r3, #40]	; 0x28
 80085e4:	e015      	b.n	8008612 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80085e6:	893b      	ldrh	r3, [r7, #8]
 80085e8:	0a1b      	lsrs	r3, r3, #8
 80085ea:	b29b      	uxth	r3, r3
 80085ec:	b2da      	uxtb	r2, r3
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80085f4:	69fa      	ldr	r2, [r7, #28]
 80085f6:	69b9      	ldr	r1, [r7, #24]
 80085f8:	68f8      	ldr	r0, [r7, #12]
 80085fa:	f000 f883 	bl	8008704 <I2C_WaitOnTXISFlagUntilTimeout>
 80085fe:	4603      	mov	r3, r0
 8008600:	2b00      	cmp	r3, #0
 8008602:	d001      	beq.n	8008608 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8008604:	2301      	movs	r3, #1
 8008606:	e012      	b.n	800862e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008608:	893b      	ldrh	r3, [r7, #8]
 800860a:	b2da      	uxtb	r2, r3
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008612:	69fb      	ldr	r3, [r7, #28]
 8008614:	9300      	str	r3, [sp, #0]
 8008616:	69bb      	ldr	r3, [r7, #24]
 8008618:	2200      	movs	r2, #0
 800861a:	2140      	movs	r1, #64	; 0x40
 800861c:	68f8      	ldr	r0, [r7, #12]
 800861e:	f000 f831 	bl	8008684 <I2C_WaitOnFlagUntilTimeout>
 8008622:	4603      	mov	r3, r0
 8008624:	2b00      	cmp	r3, #0
 8008626:	d001      	beq.n	800862c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8008628:	2301      	movs	r3, #1
 800862a:	e000      	b.n	800862e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800862c:	2300      	movs	r3, #0
}
 800862e:	4618      	mov	r0, r3
 8008630:	3710      	adds	r7, #16
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}
 8008636:	bf00      	nop
 8008638:	80002000 	.word	0x80002000

0800863c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800863c:	b480      	push	{r7}
 800863e:	b083      	sub	sp, #12
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	699b      	ldr	r3, [r3, #24]
 800864a:	f003 0302 	and.w	r3, r3, #2
 800864e:	2b02      	cmp	r3, #2
 8008650:	d103      	bne.n	800865a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	2200      	movs	r2, #0
 8008658:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	699b      	ldr	r3, [r3, #24]
 8008660:	f003 0301 	and.w	r3, r3, #1
 8008664:	2b01      	cmp	r3, #1
 8008666:	d007      	beq.n	8008678 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	699a      	ldr	r2, [r3, #24]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f042 0201 	orr.w	r2, r2, #1
 8008676:	619a      	str	r2, [r3, #24]
  }
}
 8008678:	bf00      	nop
 800867a:	370c      	adds	r7, #12
 800867c:	46bd      	mov	sp, r7
 800867e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008682:	4770      	bx	lr

08008684 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b084      	sub	sp, #16
 8008688:	af00      	add	r7, sp, #0
 800868a:	60f8      	str	r0, [r7, #12]
 800868c:	60b9      	str	r1, [r7, #8]
 800868e:	603b      	str	r3, [r7, #0]
 8008690:	4613      	mov	r3, r2
 8008692:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008694:	e022      	b.n	80086dc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800869c:	d01e      	beq.n	80086dc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800869e:	f7fe f989 	bl	80069b4 <HAL_GetTick>
 80086a2:	4602      	mov	r2, r0
 80086a4:	69bb      	ldr	r3, [r7, #24]
 80086a6:	1ad3      	subs	r3, r2, r3
 80086a8:	683a      	ldr	r2, [r7, #0]
 80086aa:	429a      	cmp	r2, r3
 80086ac:	d302      	bcc.n	80086b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d113      	bne.n	80086dc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086b8:	f043 0220 	orr.w	r2, r3, #32
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2220      	movs	r2, #32
 80086c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2200      	movs	r2, #0
 80086cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	2200      	movs	r2, #0
 80086d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80086d8:	2301      	movs	r3, #1
 80086da:	e00f      	b.n	80086fc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	699a      	ldr	r2, [r3, #24]
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	4013      	ands	r3, r2
 80086e6:	68ba      	ldr	r2, [r7, #8]
 80086e8:	429a      	cmp	r2, r3
 80086ea:	bf0c      	ite	eq
 80086ec:	2301      	moveq	r3, #1
 80086ee:	2300      	movne	r3, #0
 80086f0:	b2db      	uxtb	r3, r3
 80086f2:	461a      	mov	r2, r3
 80086f4:	79fb      	ldrb	r3, [r7, #7]
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d0cd      	beq.n	8008696 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80086fa:	2300      	movs	r3, #0
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	3710      	adds	r7, #16
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}

08008704 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b084      	sub	sp, #16
 8008708:	af00      	add	r7, sp, #0
 800870a:	60f8      	str	r0, [r7, #12]
 800870c:	60b9      	str	r1, [r7, #8]
 800870e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008710:	e02c      	b.n	800876c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	68b9      	ldr	r1, [r7, #8]
 8008716:	68f8      	ldr	r0, [r7, #12]
 8008718:	f000 f870 	bl	80087fc <I2C_IsErrorOccurred>
 800871c:	4603      	mov	r3, r0
 800871e:	2b00      	cmp	r3, #0
 8008720:	d001      	beq.n	8008726 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008722:	2301      	movs	r3, #1
 8008724:	e02a      	b.n	800877c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800872c:	d01e      	beq.n	800876c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800872e:	f7fe f941 	bl	80069b4 <HAL_GetTick>
 8008732:	4602      	mov	r2, r0
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	1ad3      	subs	r3, r2, r3
 8008738:	68ba      	ldr	r2, [r7, #8]
 800873a:	429a      	cmp	r2, r3
 800873c:	d302      	bcc.n	8008744 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d113      	bne.n	800876c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008748:	f043 0220 	orr.w	r2, r3, #32
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2220      	movs	r2, #32
 8008754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2200      	movs	r2, #0
 800875c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2200      	movs	r2, #0
 8008764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008768:	2301      	movs	r3, #1
 800876a:	e007      	b.n	800877c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	699b      	ldr	r3, [r3, #24]
 8008772:	f003 0302 	and.w	r3, r3, #2
 8008776:	2b02      	cmp	r3, #2
 8008778:	d1cb      	bne.n	8008712 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800877a:	2300      	movs	r3, #0
}
 800877c:	4618      	mov	r0, r3
 800877e:	3710      	adds	r7, #16
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}

08008784 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b084      	sub	sp, #16
 8008788:	af00      	add	r7, sp, #0
 800878a:	60f8      	str	r0, [r7, #12]
 800878c:	60b9      	str	r1, [r7, #8]
 800878e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008790:	e028      	b.n	80087e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008792:	687a      	ldr	r2, [r7, #4]
 8008794:	68b9      	ldr	r1, [r7, #8]
 8008796:	68f8      	ldr	r0, [r7, #12]
 8008798:	f000 f830 	bl	80087fc <I2C_IsErrorOccurred>
 800879c:	4603      	mov	r3, r0
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d001      	beq.n	80087a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80087a2:	2301      	movs	r3, #1
 80087a4:	e026      	b.n	80087f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087a6:	f7fe f905 	bl	80069b4 <HAL_GetTick>
 80087aa:	4602      	mov	r2, r0
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	1ad3      	subs	r3, r2, r3
 80087b0:	68ba      	ldr	r2, [r7, #8]
 80087b2:	429a      	cmp	r2, r3
 80087b4:	d302      	bcc.n	80087bc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d113      	bne.n	80087e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087c0:	f043 0220 	orr.w	r2, r3, #32
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	2220      	movs	r2, #32
 80087cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	2200      	movs	r2, #0
 80087d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2200      	movs	r2, #0
 80087dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80087e0:	2301      	movs	r3, #1
 80087e2:	e007      	b.n	80087f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	699b      	ldr	r3, [r3, #24]
 80087ea:	f003 0320 	and.w	r3, r3, #32
 80087ee:	2b20      	cmp	r3, #32
 80087f0:	d1cf      	bne.n	8008792 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80087f2:	2300      	movs	r3, #0
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3710      	adds	r7, #16
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}

080087fc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b08a      	sub	sp, #40	; 0x28
 8008800:	af00      	add	r7, sp, #0
 8008802:	60f8      	str	r0, [r7, #12]
 8008804:	60b9      	str	r1, [r7, #8]
 8008806:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008808:	2300      	movs	r3, #0
 800880a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	699b      	ldr	r3, [r3, #24]
 8008814:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008816:	2300      	movs	r3, #0
 8008818:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800881e:	69bb      	ldr	r3, [r7, #24]
 8008820:	f003 0310 	and.w	r3, r3, #16
 8008824:	2b00      	cmp	r3, #0
 8008826:	d068      	beq.n	80088fa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	2210      	movs	r2, #16
 800882e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008830:	e049      	b.n	80088c6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008838:	d045      	beq.n	80088c6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800883a:	f7fe f8bb 	bl	80069b4 <HAL_GetTick>
 800883e:	4602      	mov	r2, r0
 8008840:	69fb      	ldr	r3, [r7, #28]
 8008842:	1ad3      	subs	r3, r2, r3
 8008844:	68ba      	ldr	r2, [r7, #8]
 8008846:	429a      	cmp	r2, r3
 8008848:	d302      	bcc.n	8008850 <I2C_IsErrorOccurred+0x54>
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d13a      	bne.n	80088c6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	685b      	ldr	r3, [r3, #4]
 8008856:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800885a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008862:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	699b      	ldr	r3, [r3, #24]
 800886a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800886e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008872:	d121      	bne.n	80088b8 <I2C_IsErrorOccurred+0xbc>
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800887a:	d01d      	beq.n	80088b8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800887c:	7cfb      	ldrb	r3, [r7, #19]
 800887e:	2b20      	cmp	r3, #32
 8008880:	d01a      	beq.n	80088b8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	685a      	ldr	r2, [r3, #4]
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008890:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008892:	f7fe f88f 	bl	80069b4 <HAL_GetTick>
 8008896:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008898:	e00e      	b.n	80088b8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800889a:	f7fe f88b 	bl	80069b4 <HAL_GetTick>
 800889e:	4602      	mov	r2, r0
 80088a0:	69fb      	ldr	r3, [r7, #28]
 80088a2:	1ad3      	subs	r3, r2, r3
 80088a4:	2b19      	cmp	r3, #25
 80088a6:	d907      	bls.n	80088b8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80088a8:	6a3b      	ldr	r3, [r7, #32]
 80088aa:	f043 0320 	orr.w	r3, r3, #32
 80088ae:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80088b0:	2301      	movs	r3, #1
 80088b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80088b6:	e006      	b.n	80088c6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	699b      	ldr	r3, [r3, #24]
 80088be:	f003 0320 	and.w	r3, r3, #32
 80088c2:	2b20      	cmp	r3, #32
 80088c4:	d1e9      	bne.n	800889a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	699b      	ldr	r3, [r3, #24]
 80088cc:	f003 0320 	and.w	r3, r3, #32
 80088d0:	2b20      	cmp	r3, #32
 80088d2:	d003      	beq.n	80088dc <I2C_IsErrorOccurred+0xe0>
 80088d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d0aa      	beq.n	8008832 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80088dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d103      	bne.n	80088ec <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	2220      	movs	r2, #32
 80088ea:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80088ec:	6a3b      	ldr	r3, [r7, #32]
 80088ee:	f043 0304 	orr.w	r3, r3, #4
 80088f2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80088f4:	2301      	movs	r3, #1
 80088f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	699b      	ldr	r3, [r3, #24]
 8008900:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008902:	69bb      	ldr	r3, [r7, #24]
 8008904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008908:	2b00      	cmp	r3, #0
 800890a:	d00b      	beq.n	8008924 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800890c:	6a3b      	ldr	r3, [r7, #32]
 800890e:	f043 0301 	orr.w	r3, r3, #1
 8008912:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f44f 7280 	mov.w	r2, #256	; 0x100
 800891c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800891e:	2301      	movs	r3, #1
 8008920:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008924:	69bb      	ldr	r3, [r7, #24]
 8008926:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800892a:	2b00      	cmp	r3, #0
 800892c:	d00b      	beq.n	8008946 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800892e:	6a3b      	ldr	r3, [r7, #32]
 8008930:	f043 0308 	orr.w	r3, r3, #8
 8008934:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800893e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008940:	2301      	movs	r3, #1
 8008942:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008946:	69bb      	ldr	r3, [r7, #24]
 8008948:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800894c:	2b00      	cmp	r3, #0
 800894e:	d00b      	beq.n	8008968 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008950:	6a3b      	ldr	r3, [r7, #32]
 8008952:	f043 0302 	orr.w	r3, r3, #2
 8008956:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008960:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008962:	2301      	movs	r3, #1
 8008964:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8008968:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800896c:	2b00      	cmp	r3, #0
 800896e:	d01c      	beq.n	80089aa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008970:	68f8      	ldr	r0, [r7, #12]
 8008972:	f7ff fe63 	bl	800863c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	6859      	ldr	r1, [r3, #4]
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681a      	ldr	r2, [r3, #0]
 8008980:	4b0d      	ldr	r3, [pc, #52]	; (80089b8 <I2C_IsErrorOccurred+0x1bc>)
 8008982:	400b      	ands	r3, r1
 8008984:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800898a:	6a3b      	ldr	r3, [r7, #32]
 800898c:	431a      	orrs	r2, r3
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	2220      	movs	r2, #32
 8008996:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	2200      	movs	r2, #0
 800899e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	2200      	movs	r2, #0
 80089a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80089aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3728      	adds	r7, #40	; 0x28
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}
 80089b6:	bf00      	nop
 80089b8:	fe00e800 	.word	0xfe00e800

080089bc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80089bc:	b480      	push	{r7}
 80089be:	b087      	sub	sp, #28
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	60f8      	str	r0, [r7, #12]
 80089c4:	607b      	str	r3, [r7, #4]
 80089c6:	460b      	mov	r3, r1
 80089c8:	817b      	strh	r3, [r7, #10]
 80089ca:	4613      	mov	r3, r2
 80089cc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80089ce:	897b      	ldrh	r3, [r7, #10]
 80089d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80089d4:	7a7b      	ldrb	r3, [r7, #9]
 80089d6:	041b      	lsls	r3, r3, #16
 80089d8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80089dc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80089e2:	6a3b      	ldr	r3, [r7, #32]
 80089e4:	4313      	orrs	r3, r2
 80089e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80089ea:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	685a      	ldr	r2, [r3, #4]
 80089f2:	6a3b      	ldr	r3, [r7, #32]
 80089f4:	0d5b      	lsrs	r3, r3, #21
 80089f6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80089fa:	4b08      	ldr	r3, [pc, #32]	; (8008a1c <I2C_TransferConfig+0x60>)
 80089fc:	430b      	orrs	r3, r1
 80089fe:	43db      	mvns	r3, r3
 8008a00:	ea02 0103 	and.w	r1, r2, r3
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	697a      	ldr	r2, [r7, #20]
 8008a0a:	430a      	orrs	r2, r1
 8008a0c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008a0e:	bf00      	nop
 8008a10:	371c      	adds	r7, #28
 8008a12:	46bd      	mov	sp, r7
 8008a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a18:	4770      	bx	lr
 8008a1a:	bf00      	nop
 8008a1c:	03ff63ff 	.word	0x03ff63ff

08008a20 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b084      	sub	sp, #16
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d101      	bne.n	8008a32 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8008a2e:	2301      	movs	r3, #1
 8008a30:	e0bf      	b.n	8008bb2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8008a38:	b2db      	uxtb	r3, r3
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d106      	bne.n	8008a4c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2200      	movs	r2, #0
 8008a42:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f7fb fdfe 	bl	8004648 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2202      	movs	r2, #2
 8008a50:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	699a      	ldr	r2, [r3, #24]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8008a62:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	6999      	ldr	r1, [r3, #24]
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	685a      	ldr	r2, [r3, #4]
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	689b      	ldr	r3, [r3, #8]
 8008a72:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008a78:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	691b      	ldr	r3, [r3, #16]
 8008a7e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	430a      	orrs	r2, r1
 8008a86:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	6899      	ldr	r1, [r3, #8]
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681a      	ldr	r2, [r3, #0]
 8008a92:	4b4a      	ldr	r3, [pc, #296]	; (8008bbc <HAL_LTDC_Init+0x19c>)
 8008a94:	400b      	ands	r3, r1
 8008a96:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	695b      	ldr	r3, [r3, #20]
 8008a9c:	041b      	lsls	r3, r3, #16
 8008a9e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	6899      	ldr	r1, [r3, #8]
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	699a      	ldr	r2, [r3, #24]
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	431a      	orrs	r2, r3
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	430a      	orrs	r2, r1
 8008ab4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	68d9      	ldr	r1, [r3, #12]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681a      	ldr	r2, [r3, #0]
 8008ac0:	4b3e      	ldr	r3, [pc, #248]	; (8008bbc <HAL_LTDC_Init+0x19c>)
 8008ac2:	400b      	ands	r3, r1
 8008ac4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	69db      	ldr	r3, [r3, #28]
 8008aca:	041b      	lsls	r3, r3, #16
 8008acc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	68d9      	ldr	r1, [r3, #12]
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6a1a      	ldr	r2, [r3, #32]
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	431a      	orrs	r2, r3
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	430a      	orrs	r2, r1
 8008ae2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	6919      	ldr	r1, [r3, #16]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681a      	ldr	r2, [r3, #0]
 8008aee:	4b33      	ldr	r3, [pc, #204]	; (8008bbc <HAL_LTDC_Init+0x19c>)
 8008af0:	400b      	ands	r3, r1
 8008af2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008af8:	041b      	lsls	r3, r3, #16
 8008afa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	6919      	ldr	r1, [r3, #16]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	431a      	orrs	r2, r3
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	430a      	orrs	r2, r1
 8008b10:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	6959      	ldr	r1, [r3, #20]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681a      	ldr	r2, [r3, #0]
 8008b1c:	4b27      	ldr	r3, [pc, #156]	; (8008bbc <HAL_LTDC_Init+0x19c>)
 8008b1e:	400b      	ands	r3, r1
 8008b20:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b26:	041b      	lsls	r3, r3, #16
 8008b28:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	6959      	ldr	r1, [r3, #20]
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	431a      	orrs	r2, r3
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	430a      	orrs	r2, r1
 8008b3e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008b46:	021b      	lsls	r3, r3, #8
 8008b48:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8008b50:	041b      	lsls	r3, r3, #16
 8008b52:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8008b62:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008b6a:	68ba      	ldr	r2, [r7, #8]
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	687a      	ldr	r2, [r7, #4]
 8008b72:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8008b76:	431a      	orrs	r2, r3
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	430a      	orrs	r2, r1
 8008b7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f042 0206 	orr.w	r2, r2, #6
 8008b8e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	699a      	ldr	r2, [r3, #24]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f042 0201 	orr.w	r2, r2, #1
 8008b9e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2201      	movs	r2, #1
 8008bac:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8008bb0:	2300      	movs	r3, #0
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3710      	adds	r7, #16
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}
 8008bba:	bf00      	nop
 8008bbc:	f000f800 	.word	0xf000f800

08008bc0 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b084      	sub	sp, #16
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bce:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bd6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	f003 0304 	and.w	r3, r3, #4
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d023      	beq.n	8008c2a <HAL_LTDC_IRQHandler+0x6a>
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	f003 0304 	and.w	r3, r3, #4
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d01e      	beq.n	8008c2a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f022 0204 	bic.w	r2, r2, #4
 8008bfa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	2204      	movs	r2, #4
 8008c02:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008c0a:	f043 0201 	orr.w	r2, r3, #1
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2204      	movs	r2, #4
 8008c18:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f000 f86f 	bl	8008d08 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	f003 0302 	and.w	r3, r3, #2
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d023      	beq.n	8008c7c <HAL_LTDC_IRQHandler+0xbc>
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	f003 0302 	and.w	r3, r3, #2
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d01e      	beq.n	8008c7c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f022 0202 	bic.w	r2, r2, #2
 8008c4c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	2202      	movs	r2, #2
 8008c54:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008c5c:	f043 0202 	orr.w	r2, r3, #2
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2204      	movs	r2, #4
 8008c6a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2200      	movs	r2, #0
 8008c72:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f000 f846 	bl	8008d08 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f003 0301 	and.w	r3, r3, #1
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d01b      	beq.n	8008cbe <HAL_LTDC_IRQHandler+0xfe>
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	f003 0301 	and.w	r3, r3, #1
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d016      	beq.n	8008cbe <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f022 0201 	bic.w	r2, r2, #1
 8008c9e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	2201      	movs	r2, #1
 8008ca6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2201      	movs	r2, #1
 8008cac:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f000 f82f 	bl	8008d1c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	f003 0308 	and.w	r3, r3, #8
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d01b      	beq.n	8008d00 <HAL_LTDC_IRQHandler+0x140>
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	f003 0308 	and.w	r3, r3, #8
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d016      	beq.n	8008d00 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f022 0208 	bic.w	r2, r2, #8
 8008ce0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	2208      	movs	r2, #8
 8008ce8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2201      	movs	r2, #1
 8008cee:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f000 f818 	bl	8008d30 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8008d00:	bf00      	nop
 8008d02:	3710      	adds	r7, #16
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}

08008d08 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b083      	sub	sp, #12
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8008d10:	bf00      	nop
 8008d12:	370c      	adds	r7, #12
 8008d14:	46bd      	mov	sp, r7
 8008d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1a:	4770      	bx	lr

08008d1c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b083      	sub	sp, #12
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8008d24:	bf00      	nop
 8008d26:	370c      	adds	r7, #12
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2e:	4770      	bx	lr

08008d30 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b083      	sub	sp, #12
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8008d38:	bf00      	nop
 8008d3a:	370c      	adds	r7, #12
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d42:	4770      	bx	lr

08008d44 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008d44:	b5b0      	push	{r4, r5, r7, lr}
 8008d46:	b084      	sub	sp, #16
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	60f8      	str	r0, [r7, #12]
 8008d4c:	60b9      	str	r1, [r7, #8]
 8008d4e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8008d56:	2b01      	cmp	r3, #1
 8008d58:	d101      	bne.n	8008d5e <HAL_LTDC_ConfigLayer+0x1a>
 8008d5a:	2302      	movs	r3, #2
 8008d5c:	e02c      	b.n	8008db8 <HAL_LTDC_ConfigLayer+0x74>
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2201      	movs	r2, #1
 8008d62:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	2202      	movs	r2, #2
 8008d6a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008d6e:	68fa      	ldr	r2, [r7, #12]
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2134      	movs	r1, #52	; 0x34
 8008d74:	fb01 f303 	mul.w	r3, r1, r3
 8008d78:	4413      	add	r3, r2
 8008d7a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	4614      	mov	r4, r2
 8008d82:	461d      	mov	r5, r3
 8008d84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008d86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008d88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008d8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008d8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008d8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008d90:	682b      	ldr	r3, [r5, #0]
 8008d92:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8008d94:	687a      	ldr	r2, [r7, #4]
 8008d96:	68b9      	ldr	r1, [r7, #8]
 8008d98:	68f8      	ldr	r0, [r7, #12]
 8008d9a:	f000 f81f 	bl	8008ddc <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	2201      	movs	r2, #1
 8008da4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	2201      	movs	r2, #1
 8008daa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	2200      	movs	r2, #0
 8008db2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8008db6:	2300      	movs	r3, #0
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3710      	adds	r7, #16
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bdb0      	pop	{r4, r5, r7, pc}

08008dc0 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b083      	sub	sp, #12
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8008dce:	b2db      	uxtb	r3, r3
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	370c      	adds	r7, #12
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dda:	4770      	bx	lr

08008ddc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b089      	sub	sp, #36	; 0x24
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	60f8      	str	r0, [r7, #12]
 8008de4:	60b9      	str	r1, [r7, #8]
 8008de6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	685a      	ldr	r2, [r3, #4]
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	68db      	ldr	r3, [r3, #12]
 8008df2:	0c1b      	lsrs	r3, r3, #16
 8008df4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008df8:	4413      	add	r3, r2
 8008dfa:	041b      	lsls	r3, r3, #16
 8008dfc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	461a      	mov	r2, r3
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	01db      	lsls	r3, r3, #7
 8008e08:	4413      	add	r3, r2
 8008e0a:	3384      	adds	r3, #132	; 0x84
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	68fa      	ldr	r2, [r7, #12]
 8008e10:	6812      	ldr	r2, [r2, #0]
 8008e12:	4611      	mov	r1, r2
 8008e14:	687a      	ldr	r2, [r7, #4]
 8008e16:	01d2      	lsls	r2, r2, #7
 8008e18:	440a      	add	r2, r1
 8008e1a:	3284      	adds	r2, #132	; 0x84
 8008e1c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8008e20:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	68db      	ldr	r3, [r3, #12]
 8008e2c:	0c1b      	lsrs	r3, r3, #16
 8008e2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008e32:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008e34:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4619      	mov	r1, r3
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	01db      	lsls	r3, r3, #7
 8008e40:	440b      	add	r3, r1
 8008e42:	3384      	adds	r3, #132	; 0x84
 8008e44:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008e46:	69fb      	ldr	r3, [r7, #28]
 8008e48:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008e4a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	68da      	ldr	r2, [r3, #12]
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	68db      	ldr	r3, [r3, #12]
 8008e56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008e5a:	4413      	add	r3, r2
 8008e5c:	041b      	lsls	r3, r3, #16
 8008e5e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	461a      	mov	r2, r3
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	01db      	lsls	r3, r3, #7
 8008e6a:	4413      	add	r3, r2
 8008e6c:	3384      	adds	r3, #132	; 0x84
 8008e6e:	689b      	ldr	r3, [r3, #8]
 8008e70:	68fa      	ldr	r2, [r7, #12]
 8008e72:	6812      	ldr	r2, [r2, #0]
 8008e74:	4611      	mov	r1, r2
 8008e76:	687a      	ldr	r2, [r7, #4]
 8008e78:	01d2      	lsls	r2, r2, #7
 8008e7a:	440a      	add	r2, r1
 8008e7c:	3284      	adds	r2, #132	; 0x84
 8008e7e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8008e82:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	689a      	ldr	r2, [r3, #8]
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	68db      	ldr	r3, [r3, #12]
 8008e8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008e92:	4413      	add	r3, r2
 8008e94:	1c5a      	adds	r2, r3, #1
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	4619      	mov	r1, r3
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	01db      	lsls	r3, r3, #7
 8008ea0:	440b      	add	r3, r1
 8008ea2:	3384      	adds	r3, #132	; 0x84
 8008ea4:	4619      	mov	r1, r3
 8008ea6:	69fb      	ldr	r3, [r7, #28]
 8008ea8:	4313      	orrs	r3, r2
 8008eaa:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	461a      	mov	r2, r3
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	01db      	lsls	r3, r3, #7
 8008eb6:	4413      	add	r3, r2
 8008eb8:	3384      	adds	r3, #132	; 0x84
 8008eba:	691b      	ldr	r3, [r3, #16]
 8008ebc:	68fa      	ldr	r2, [r7, #12]
 8008ebe:	6812      	ldr	r2, [r2, #0]
 8008ec0:	4611      	mov	r1, r2
 8008ec2:	687a      	ldr	r2, [r7, #4]
 8008ec4:	01d2      	lsls	r2, r2, #7
 8008ec6:	440a      	add	r2, r1
 8008ec8:	3284      	adds	r2, #132	; 0x84
 8008eca:	f023 0307 	bic.w	r3, r3, #7
 8008ece:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	461a      	mov	r2, r3
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	01db      	lsls	r3, r3, #7
 8008eda:	4413      	add	r3, r2
 8008edc:	3384      	adds	r3, #132	; 0x84
 8008ede:	461a      	mov	r2, r3
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	691b      	ldr	r3, [r3, #16]
 8008ee4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008eec:	021b      	lsls	r3, r3, #8
 8008eee:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008ef6:	041b      	lsls	r3, r3, #16
 8008ef8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	699b      	ldr	r3, [r3, #24]
 8008efe:	061b      	lsls	r3, r3, #24
 8008f00:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	461a      	mov	r2, r3
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	01db      	lsls	r3, r3, #7
 8008f0c:	4413      	add	r3, r2
 8008f0e:	3384      	adds	r3, #132	; 0x84
 8008f10:	699b      	ldr	r3, [r3, #24]
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	461a      	mov	r2, r3
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	01db      	lsls	r3, r3, #7
 8008f1c:	4413      	add	r3, r2
 8008f1e:	3384      	adds	r3, #132	; 0x84
 8008f20:	461a      	mov	r2, r3
 8008f22:	2300      	movs	r3, #0
 8008f24:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008f2c:	461a      	mov	r2, r3
 8008f2e:	69fb      	ldr	r3, [r7, #28]
 8008f30:	431a      	orrs	r2, r3
 8008f32:	69bb      	ldr	r3, [r7, #24]
 8008f34:	431a      	orrs	r2, r3
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	4619      	mov	r1, r3
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	01db      	lsls	r3, r3, #7
 8008f40:	440b      	add	r3, r1
 8008f42:	3384      	adds	r3, #132	; 0x84
 8008f44:	4619      	mov	r1, r3
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	4313      	orrs	r3, r2
 8008f4a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	461a      	mov	r2, r3
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	01db      	lsls	r3, r3, #7
 8008f56:	4413      	add	r3, r2
 8008f58:	3384      	adds	r3, #132	; 0x84
 8008f5a:	695b      	ldr	r3, [r3, #20]
 8008f5c:	68fa      	ldr	r2, [r7, #12]
 8008f5e:	6812      	ldr	r2, [r2, #0]
 8008f60:	4611      	mov	r1, r2
 8008f62:	687a      	ldr	r2, [r7, #4]
 8008f64:	01d2      	lsls	r2, r2, #7
 8008f66:	440a      	add	r2, r1
 8008f68:	3284      	adds	r2, #132	; 0x84
 8008f6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008f6e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	461a      	mov	r2, r3
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	01db      	lsls	r3, r3, #7
 8008f7a:	4413      	add	r3, r2
 8008f7c:	3384      	adds	r3, #132	; 0x84
 8008f7e:	461a      	mov	r2, r3
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	695b      	ldr	r3, [r3, #20]
 8008f84:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	461a      	mov	r2, r3
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	01db      	lsls	r3, r3, #7
 8008f90:	4413      	add	r3, r2
 8008f92:	3384      	adds	r3, #132	; 0x84
 8008f94:	69da      	ldr	r2, [r3, #28]
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	4619      	mov	r1, r3
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	01db      	lsls	r3, r3, #7
 8008fa0:	440b      	add	r3, r1
 8008fa2:	3384      	adds	r3, #132	; 0x84
 8008fa4:	4619      	mov	r1, r3
 8008fa6:	4b58      	ldr	r3, [pc, #352]	; (8009108 <LTDC_SetConfig+0x32c>)
 8008fa8:	4013      	ands	r3, r2
 8008faa:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	69da      	ldr	r2, [r3, #28]
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	6a1b      	ldr	r3, [r3, #32]
 8008fb4:	68f9      	ldr	r1, [r7, #12]
 8008fb6:	6809      	ldr	r1, [r1, #0]
 8008fb8:	4608      	mov	r0, r1
 8008fba:	6879      	ldr	r1, [r7, #4]
 8008fbc:	01c9      	lsls	r1, r1, #7
 8008fbe:	4401      	add	r1, r0
 8008fc0:	3184      	adds	r1, #132	; 0x84
 8008fc2:	4313      	orrs	r3, r2
 8008fc4:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	461a      	mov	r2, r3
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	01db      	lsls	r3, r3, #7
 8008fd0:	4413      	add	r3, r2
 8008fd2:	3384      	adds	r3, #132	; 0x84
 8008fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	461a      	mov	r2, r3
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	01db      	lsls	r3, r3, #7
 8008fe0:	4413      	add	r3, r2
 8008fe2:	3384      	adds	r3, #132	; 0x84
 8008fe4:	461a      	mov	r2, r3
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	461a      	mov	r2, r3
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	01db      	lsls	r3, r3, #7
 8008ff4:	4413      	add	r3, r2
 8008ff6:	3384      	adds	r3, #132	; 0x84
 8008ff8:	461a      	mov	r2, r3
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ffe:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	691b      	ldr	r3, [r3, #16]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d102      	bne.n	800900e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8009008:	2304      	movs	r3, #4
 800900a:	61fb      	str	r3, [r7, #28]
 800900c:	e01b      	b.n	8009046 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	691b      	ldr	r3, [r3, #16]
 8009012:	2b01      	cmp	r3, #1
 8009014:	d102      	bne.n	800901c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8009016:	2303      	movs	r3, #3
 8009018:	61fb      	str	r3, [r7, #28]
 800901a:	e014      	b.n	8009046 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	691b      	ldr	r3, [r3, #16]
 8009020:	2b04      	cmp	r3, #4
 8009022:	d00b      	beq.n	800903c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009028:	2b02      	cmp	r3, #2
 800902a:	d007      	beq.n	800903c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009030:	2b03      	cmp	r3, #3
 8009032:	d003      	beq.n	800903c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009038:	2b07      	cmp	r3, #7
 800903a:	d102      	bne.n	8009042 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800903c:	2302      	movs	r3, #2
 800903e:	61fb      	str	r3, [r7, #28]
 8009040:	e001      	b.n	8009046 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8009042:	2301      	movs	r3, #1
 8009044:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	461a      	mov	r2, r3
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	01db      	lsls	r3, r3, #7
 8009050:	4413      	add	r3, r2
 8009052:	3384      	adds	r3, #132	; 0x84
 8009054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009056:	68fa      	ldr	r2, [r7, #12]
 8009058:	6812      	ldr	r2, [r2, #0]
 800905a:	4611      	mov	r1, r2
 800905c:	687a      	ldr	r2, [r7, #4]
 800905e:	01d2      	lsls	r2, r2, #7
 8009060:	440a      	add	r2, r1
 8009062:	3284      	adds	r2, #132	; 0x84
 8009064:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8009068:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800906e:	69fa      	ldr	r2, [r7, #28]
 8009070:	fb02 f303 	mul.w	r3, r2, r3
 8009074:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	6859      	ldr	r1, [r3, #4]
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	1acb      	subs	r3, r1, r3
 8009080:	69f9      	ldr	r1, [r7, #28]
 8009082:	fb01 f303 	mul.w	r3, r1, r3
 8009086:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8009088:	68f9      	ldr	r1, [r7, #12]
 800908a:	6809      	ldr	r1, [r1, #0]
 800908c:	4608      	mov	r0, r1
 800908e:	6879      	ldr	r1, [r7, #4]
 8009090:	01c9      	lsls	r1, r1, #7
 8009092:	4401      	add	r1, r0
 8009094:	3184      	adds	r1, #132	; 0x84
 8009096:	4313      	orrs	r3, r2
 8009098:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	461a      	mov	r2, r3
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	01db      	lsls	r3, r3, #7
 80090a4:	4413      	add	r3, r2
 80090a6:	3384      	adds	r3, #132	; 0x84
 80090a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4619      	mov	r1, r3
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	01db      	lsls	r3, r3, #7
 80090b4:	440b      	add	r3, r1
 80090b6:	3384      	adds	r3, #132	; 0x84
 80090b8:	4619      	mov	r1, r3
 80090ba:	4b14      	ldr	r3, [pc, #80]	; (800910c <LTDC_SetConfig+0x330>)
 80090bc:	4013      	ands	r3, r2
 80090be:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	461a      	mov	r2, r3
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	01db      	lsls	r3, r3, #7
 80090ca:	4413      	add	r3, r2
 80090cc:	3384      	adds	r3, #132	; 0x84
 80090ce:	461a      	mov	r2, r3
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090d4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	461a      	mov	r2, r3
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	01db      	lsls	r3, r3, #7
 80090e0:	4413      	add	r3, r2
 80090e2:	3384      	adds	r3, #132	; 0x84
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	68fa      	ldr	r2, [r7, #12]
 80090e8:	6812      	ldr	r2, [r2, #0]
 80090ea:	4611      	mov	r1, r2
 80090ec:	687a      	ldr	r2, [r7, #4]
 80090ee:	01d2      	lsls	r2, r2, #7
 80090f0:	440a      	add	r2, r1
 80090f2:	3284      	adds	r2, #132	; 0x84
 80090f4:	f043 0301 	orr.w	r3, r3, #1
 80090f8:	6013      	str	r3, [r2, #0]
}
 80090fa:	bf00      	nop
 80090fc:	3724      	adds	r7, #36	; 0x24
 80090fe:	46bd      	mov	sp, r7
 8009100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009104:	4770      	bx	lr
 8009106:	bf00      	nop
 8009108:	fffff8f8 	.word	0xfffff8f8
 800910c:	fffff800 	.word	0xfffff800

08009110 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8009110:	b480      	push	{r7}
 8009112:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009114:	4b05      	ldr	r3, [pc, #20]	; (800912c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	4a04      	ldr	r2, [pc, #16]	; (800912c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800911a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800911e:	6013      	str	r3, [r2, #0]
}
 8009120:	bf00      	nop
 8009122:	46bd      	mov	sp, r7
 8009124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009128:	4770      	bx	lr
 800912a:	bf00      	nop
 800912c:	40007000 	.word	0x40007000

08009130 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b082      	sub	sp, #8
 8009134:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8009136:	2300      	movs	r3, #0
 8009138:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800913a:	4b23      	ldr	r3, [pc, #140]	; (80091c8 <HAL_PWREx_EnableOverDrive+0x98>)
 800913c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800913e:	4a22      	ldr	r2, [pc, #136]	; (80091c8 <HAL_PWREx_EnableOverDrive+0x98>)
 8009140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009144:	6413      	str	r3, [r2, #64]	; 0x40
 8009146:	4b20      	ldr	r3, [pc, #128]	; (80091c8 <HAL_PWREx_EnableOverDrive+0x98>)
 8009148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800914a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800914e:	603b      	str	r3, [r7, #0]
 8009150:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8009152:	4b1e      	ldr	r3, [pc, #120]	; (80091cc <HAL_PWREx_EnableOverDrive+0x9c>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	4a1d      	ldr	r2, [pc, #116]	; (80091cc <HAL_PWREx_EnableOverDrive+0x9c>)
 8009158:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800915c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800915e:	f7fd fc29 	bl	80069b4 <HAL_GetTick>
 8009162:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009164:	e009      	b.n	800917a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009166:	f7fd fc25 	bl	80069b4 <HAL_GetTick>
 800916a:	4602      	mov	r2, r0
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	1ad3      	subs	r3, r2, r3
 8009170:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009174:	d901      	bls.n	800917a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8009176:	2303      	movs	r3, #3
 8009178:	e022      	b.n	80091c0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800917a:	4b14      	ldr	r3, [pc, #80]	; (80091cc <HAL_PWREx_EnableOverDrive+0x9c>)
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009182:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009186:	d1ee      	bne.n	8009166 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8009188:	4b10      	ldr	r3, [pc, #64]	; (80091cc <HAL_PWREx_EnableOverDrive+0x9c>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	4a0f      	ldr	r2, [pc, #60]	; (80091cc <HAL_PWREx_EnableOverDrive+0x9c>)
 800918e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009192:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009194:	f7fd fc0e 	bl	80069b4 <HAL_GetTick>
 8009198:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800919a:	e009      	b.n	80091b0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800919c:	f7fd fc0a 	bl	80069b4 <HAL_GetTick>
 80091a0:	4602      	mov	r2, r0
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	1ad3      	subs	r3, r2, r3
 80091a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80091aa:	d901      	bls.n	80091b0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80091ac:	2303      	movs	r3, #3
 80091ae:	e007      	b.n	80091c0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80091b0:	4b06      	ldr	r3, [pc, #24]	; (80091cc <HAL_PWREx_EnableOverDrive+0x9c>)
 80091b2:	685b      	ldr	r3, [r3, #4]
 80091b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80091bc:	d1ee      	bne.n	800919c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80091be:	2300      	movs	r3, #0
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	3708      	adds	r7, #8
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}
 80091c8:	40023800 	.word	0x40023800
 80091cc:	40007000 	.word	0x40007000

080091d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b086      	sub	sp, #24
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80091d8:	2300      	movs	r3, #0
 80091da:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d101      	bne.n	80091e6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80091e2:	2301      	movs	r3, #1
 80091e4:	e291      	b.n	800970a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f003 0301 	and.w	r3, r3, #1
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	f000 8087 	beq.w	8009302 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80091f4:	4b96      	ldr	r3, [pc, #600]	; (8009450 <HAL_RCC_OscConfig+0x280>)
 80091f6:	689b      	ldr	r3, [r3, #8]
 80091f8:	f003 030c 	and.w	r3, r3, #12
 80091fc:	2b04      	cmp	r3, #4
 80091fe:	d00c      	beq.n	800921a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009200:	4b93      	ldr	r3, [pc, #588]	; (8009450 <HAL_RCC_OscConfig+0x280>)
 8009202:	689b      	ldr	r3, [r3, #8]
 8009204:	f003 030c 	and.w	r3, r3, #12
 8009208:	2b08      	cmp	r3, #8
 800920a:	d112      	bne.n	8009232 <HAL_RCC_OscConfig+0x62>
 800920c:	4b90      	ldr	r3, [pc, #576]	; (8009450 <HAL_RCC_OscConfig+0x280>)
 800920e:	685b      	ldr	r3, [r3, #4]
 8009210:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009214:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009218:	d10b      	bne.n	8009232 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800921a:	4b8d      	ldr	r3, [pc, #564]	; (8009450 <HAL_RCC_OscConfig+0x280>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009222:	2b00      	cmp	r3, #0
 8009224:	d06c      	beq.n	8009300 <HAL_RCC_OscConfig+0x130>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d168      	bne.n	8009300 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800922e:	2301      	movs	r3, #1
 8009230:	e26b      	b.n	800970a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	685b      	ldr	r3, [r3, #4]
 8009236:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800923a:	d106      	bne.n	800924a <HAL_RCC_OscConfig+0x7a>
 800923c:	4b84      	ldr	r3, [pc, #528]	; (8009450 <HAL_RCC_OscConfig+0x280>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	4a83      	ldr	r2, [pc, #524]	; (8009450 <HAL_RCC_OscConfig+0x280>)
 8009242:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009246:	6013      	str	r3, [r2, #0]
 8009248:	e02e      	b.n	80092a8 <HAL_RCC_OscConfig+0xd8>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	685b      	ldr	r3, [r3, #4]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d10c      	bne.n	800926c <HAL_RCC_OscConfig+0x9c>
 8009252:	4b7f      	ldr	r3, [pc, #508]	; (8009450 <HAL_RCC_OscConfig+0x280>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	4a7e      	ldr	r2, [pc, #504]	; (8009450 <HAL_RCC_OscConfig+0x280>)
 8009258:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800925c:	6013      	str	r3, [r2, #0]
 800925e:	4b7c      	ldr	r3, [pc, #496]	; (8009450 <HAL_RCC_OscConfig+0x280>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	4a7b      	ldr	r2, [pc, #492]	; (8009450 <HAL_RCC_OscConfig+0x280>)
 8009264:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009268:	6013      	str	r3, [r2, #0]
 800926a:	e01d      	b.n	80092a8 <HAL_RCC_OscConfig+0xd8>
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	685b      	ldr	r3, [r3, #4]
 8009270:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009274:	d10c      	bne.n	8009290 <HAL_RCC_OscConfig+0xc0>
 8009276:	4b76      	ldr	r3, [pc, #472]	; (8009450 <HAL_RCC_OscConfig+0x280>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	4a75      	ldr	r2, [pc, #468]	; (8009450 <HAL_RCC_OscConfig+0x280>)
 800927c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009280:	6013      	str	r3, [r2, #0]
 8009282:	4b73      	ldr	r3, [pc, #460]	; (8009450 <HAL_RCC_OscConfig+0x280>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	4a72      	ldr	r2, [pc, #456]	; (8009450 <HAL_RCC_OscConfig+0x280>)
 8009288:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800928c:	6013      	str	r3, [r2, #0]
 800928e:	e00b      	b.n	80092a8 <HAL_RCC_OscConfig+0xd8>
 8009290:	4b6f      	ldr	r3, [pc, #444]	; (8009450 <HAL_RCC_OscConfig+0x280>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	4a6e      	ldr	r2, [pc, #440]	; (8009450 <HAL_RCC_OscConfig+0x280>)
 8009296:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800929a:	6013      	str	r3, [r2, #0]
 800929c:	4b6c      	ldr	r3, [pc, #432]	; (8009450 <HAL_RCC_OscConfig+0x280>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	4a6b      	ldr	r2, [pc, #428]	; (8009450 <HAL_RCC_OscConfig+0x280>)
 80092a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80092a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	685b      	ldr	r3, [r3, #4]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d013      	beq.n	80092d8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092b0:	f7fd fb80 	bl	80069b4 <HAL_GetTick>
 80092b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80092b6:	e008      	b.n	80092ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80092b8:	f7fd fb7c 	bl	80069b4 <HAL_GetTick>
 80092bc:	4602      	mov	r2, r0
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	1ad3      	subs	r3, r2, r3
 80092c2:	2b64      	cmp	r3, #100	; 0x64
 80092c4:	d901      	bls.n	80092ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80092c6:	2303      	movs	r3, #3
 80092c8:	e21f      	b.n	800970a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80092ca:	4b61      	ldr	r3, [pc, #388]	; (8009450 <HAL_RCC_OscConfig+0x280>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d0f0      	beq.n	80092b8 <HAL_RCC_OscConfig+0xe8>
 80092d6:	e014      	b.n	8009302 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092d8:	f7fd fb6c 	bl	80069b4 <HAL_GetTick>
 80092dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80092de:	e008      	b.n	80092f2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80092e0:	f7fd fb68 	bl	80069b4 <HAL_GetTick>
 80092e4:	4602      	mov	r2, r0
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	1ad3      	subs	r3, r2, r3
 80092ea:	2b64      	cmp	r3, #100	; 0x64
 80092ec:	d901      	bls.n	80092f2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80092ee:	2303      	movs	r3, #3
 80092f0:	e20b      	b.n	800970a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80092f2:	4b57      	ldr	r3, [pc, #348]	; (8009450 <HAL_RCC_OscConfig+0x280>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d1f0      	bne.n	80092e0 <HAL_RCC_OscConfig+0x110>
 80092fe:	e000      	b.n	8009302 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009300:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f003 0302 	and.w	r3, r3, #2
 800930a:	2b00      	cmp	r3, #0
 800930c:	d069      	beq.n	80093e2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800930e:	4b50      	ldr	r3, [pc, #320]	; (8009450 <HAL_RCC_OscConfig+0x280>)
 8009310:	689b      	ldr	r3, [r3, #8]
 8009312:	f003 030c 	and.w	r3, r3, #12
 8009316:	2b00      	cmp	r3, #0
 8009318:	d00b      	beq.n	8009332 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800931a:	4b4d      	ldr	r3, [pc, #308]	; (8009450 <HAL_RCC_OscConfig+0x280>)
 800931c:	689b      	ldr	r3, [r3, #8]
 800931e:	f003 030c 	and.w	r3, r3, #12
 8009322:	2b08      	cmp	r3, #8
 8009324:	d11c      	bne.n	8009360 <HAL_RCC_OscConfig+0x190>
 8009326:	4b4a      	ldr	r3, [pc, #296]	; (8009450 <HAL_RCC_OscConfig+0x280>)
 8009328:	685b      	ldr	r3, [r3, #4]
 800932a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800932e:	2b00      	cmp	r3, #0
 8009330:	d116      	bne.n	8009360 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009332:	4b47      	ldr	r3, [pc, #284]	; (8009450 <HAL_RCC_OscConfig+0x280>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f003 0302 	and.w	r3, r3, #2
 800933a:	2b00      	cmp	r3, #0
 800933c:	d005      	beq.n	800934a <HAL_RCC_OscConfig+0x17a>
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	68db      	ldr	r3, [r3, #12]
 8009342:	2b01      	cmp	r3, #1
 8009344:	d001      	beq.n	800934a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8009346:	2301      	movs	r3, #1
 8009348:	e1df      	b.n	800970a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800934a:	4b41      	ldr	r3, [pc, #260]	; (8009450 <HAL_RCC_OscConfig+0x280>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	691b      	ldr	r3, [r3, #16]
 8009356:	00db      	lsls	r3, r3, #3
 8009358:	493d      	ldr	r1, [pc, #244]	; (8009450 <HAL_RCC_OscConfig+0x280>)
 800935a:	4313      	orrs	r3, r2
 800935c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800935e:	e040      	b.n	80093e2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	68db      	ldr	r3, [r3, #12]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d023      	beq.n	80093b0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009368:	4b39      	ldr	r3, [pc, #228]	; (8009450 <HAL_RCC_OscConfig+0x280>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4a38      	ldr	r2, [pc, #224]	; (8009450 <HAL_RCC_OscConfig+0x280>)
 800936e:	f043 0301 	orr.w	r3, r3, #1
 8009372:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009374:	f7fd fb1e 	bl	80069b4 <HAL_GetTick>
 8009378:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800937a:	e008      	b.n	800938e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800937c:	f7fd fb1a 	bl	80069b4 <HAL_GetTick>
 8009380:	4602      	mov	r2, r0
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	1ad3      	subs	r3, r2, r3
 8009386:	2b02      	cmp	r3, #2
 8009388:	d901      	bls.n	800938e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800938a:	2303      	movs	r3, #3
 800938c:	e1bd      	b.n	800970a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800938e:	4b30      	ldr	r3, [pc, #192]	; (8009450 <HAL_RCC_OscConfig+0x280>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f003 0302 	and.w	r3, r3, #2
 8009396:	2b00      	cmp	r3, #0
 8009398:	d0f0      	beq.n	800937c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800939a:	4b2d      	ldr	r3, [pc, #180]	; (8009450 <HAL_RCC_OscConfig+0x280>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	691b      	ldr	r3, [r3, #16]
 80093a6:	00db      	lsls	r3, r3, #3
 80093a8:	4929      	ldr	r1, [pc, #164]	; (8009450 <HAL_RCC_OscConfig+0x280>)
 80093aa:	4313      	orrs	r3, r2
 80093ac:	600b      	str	r3, [r1, #0]
 80093ae:	e018      	b.n	80093e2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80093b0:	4b27      	ldr	r3, [pc, #156]	; (8009450 <HAL_RCC_OscConfig+0x280>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	4a26      	ldr	r2, [pc, #152]	; (8009450 <HAL_RCC_OscConfig+0x280>)
 80093b6:	f023 0301 	bic.w	r3, r3, #1
 80093ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093bc:	f7fd fafa 	bl	80069b4 <HAL_GetTick>
 80093c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80093c2:	e008      	b.n	80093d6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80093c4:	f7fd faf6 	bl	80069b4 <HAL_GetTick>
 80093c8:	4602      	mov	r2, r0
 80093ca:	693b      	ldr	r3, [r7, #16]
 80093cc:	1ad3      	subs	r3, r2, r3
 80093ce:	2b02      	cmp	r3, #2
 80093d0:	d901      	bls.n	80093d6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80093d2:	2303      	movs	r3, #3
 80093d4:	e199      	b.n	800970a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80093d6:	4b1e      	ldr	r3, [pc, #120]	; (8009450 <HAL_RCC_OscConfig+0x280>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f003 0302 	and.w	r3, r3, #2
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d1f0      	bne.n	80093c4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f003 0308 	and.w	r3, r3, #8
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d038      	beq.n	8009460 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	695b      	ldr	r3, [r3, #20]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d019      	beq.n	800942a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80093f6:	4b16      	ldr	r3, [pc, #88]	; (8009450 <HAL_RCC_OscConfig+0x280>)
 80093f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093fa:	4a15      	ldr	r2, [pc, #84]	; (8009450 <HAL_RCC_OscConfig+0x280>)
 80093fc:	f043 0301 	orr.w	r3, r3, #1
 8009400:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009402:	f7fd fad7 	bl	80069b4 <HAL_GetTick>
 8009406:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009408:	e008      	b.n	800941c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800940a:	f7fd fad3 	bl	80069b4 <HAL_GetTick>
 800940e:	4602      	mov	r2, r0
 8009410:	693b      	ldr	r3, [r7, #16]
 8009412:	1ad3      	subs	r3, r2, r3
 8009414:	2b02      	cmp	r3, #2
 8009416:	d901      	bls.n	800941c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009418:	2303      	movs	r3, #3
 800941a:	e176      	b.n	800970a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800941c:	4b0c      	ldr	r3, [pc, #48]	; (8009450 <HAL_RCC_OscConfig+0x280>)
 800941e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009420:	f003 0302 	and.w	r3, r3, #2
 8009424:	2b00      	cmp	r3, #0
 8009426:	d0f0      	beq.n	800940a <HAL_RCC_OscConfig+0x23a>
 8009428:	e01a      	b.n	8009460 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800942a:	4b09      	ldr	r3, [pc, #36]	; (8009450 <HAL_RCC_OscConfig+0x280>)
 800942c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800942e:	4a08      	ldr	r2, [pc, #32]	; (8009450 <HAL_RCC_OscConfig+0x280>)
 8009430:	f023 0301 	bic.w	r3, r3, #1
 8009434:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009436:	f7fd fabd 	bl	80069b4 <HAL_GetTick>
 800943a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800943c:	e00a      	b.n	8009454 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800943e:	f7fd fab9 	bl	80069b4 <HAL_GetTick>
 8009442:	4602      	mov	r2, r0
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	1ad3      	subs	r3, r2, r3
 8009448:	2b02      	cmp	r3, #2
 800944a:	d903      	bls.n	8009454 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800944c:	2303      	movs	r3, #3
 800944e:	e15c      	b.n	800970a <HAL_RCC_OscConfig+0x53a>
 8009450:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009454:	4b91      	ldr	r3, [pc, #580]	; (800969c <HAL_RCC_OscConfig+0x4cc>)
 8009456:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009458:	f003 0302 	and.w	r3, r3, #2
 800945c:	2b00      	cmp	r3, #0
 800945e:	d1ee      	bne.n	800943e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f003 0304 	and.w	r3, r3, #4
 8009468:	2b00      	cmp	r3, #0
 800946a:	f000 80a4 	beq.w	80095b6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800946e:	4b8b      	ldr	r3, [pc, #556]	; (800969c <HAL_RCC_OscConfig+0x4cc>)
 8009470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009476:	2b00      	cmp	r3, #0
 8009478:	d10d      	bne.n	8009496 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800947a:	4b88      	ldr	r3, [pc, #544]	; (800969c <HAL_RCC_OscConfig+0x4cc>)
 800947c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800947e:	4a87      	ldr	r2, [pc, #540]	; (800969c <HAL_RCC_OscConfig+0x4cc>)
 8009480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009484:	6413      	str	r3, [r2, #64]	; 0x40
 8009486:	4b85      	ldr	r3, [pc, #532]	; (800969c <HAL_RCC_OscConfig+0x4cc>)
 8009488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800948a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800948e:	60bb      	str	r3, [r7, #8]
 8009490:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009492:	2301      	movs	r3, #1
 8009494:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009496:	4b82      	ldr	r3, [pc, #520]	; (80096a0 <HAL_RCC_OscConfig+0x4d0>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d118      	bne.n	80094d4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80094a2:	4b7f      	ldr	r3, [pc, #508]	; (80096a0 <HAL_RCC_OscConfig+0x4d0>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	4a7e      	ldr	r2, [pc, #504]	; (80096a0 <HAL_RCC_OscConfig+0x4d0>)
 80094a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80094ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80094ae:	f7fd fa81 	bl	80069b4 <HAL_GetTick>
 80094b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80094b4:	e008      	b.n	80094c8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80094b6:	f7fd fa7d 	bl	80069b4 <HAL_GetTick>
 80094ba:	4602      	mov	r2, r0
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	1ad3      	subs	r3, r2, r3
 80094c0:	2b64      	cmp	r3, #100	; 0x64
 80094c2:	d901      	bls.n	80094c8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80094c4:	2303      	movs	r3, #3
 80094c6:	e120      	b.n	800970a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80094c8:	4b75      	ldr	r3, [pc, #468]	; (80096a0 <HAL_RCC_OscConfig+0x4d0>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d0f0      	beq.n	80094b6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	689b      	ldr	r3, [r3, #8]
 80094d8:	2b01      	cmp	r3, #1
 80094da:	d106      	bne.n	80094ea <HAL_RCC_OscConfig+0x31a>
 80094dc:	4b6f      	ldr	r3, [pc, #444]	; (800969c <HAL_RCC_OscConfig+0x4cc>)
 80094de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094e0:	4a6e      	ldr	r2, [pc, #440]	; (800969c <HAL_RCC_OscConfig+0x4cc>)
 80094e2:	f043 0301 	orr.w	r3, r3, #1
 80094e6:	6713      	str	r3, [r2, #112]	; 0x70
 80094e8:	e02d      	b.n	8009546 <HAL_RCC_OscConfig+0x376>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	689b      	ldr	r3, [r3, #8]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d10c      	bne.n	800950c <HAL_RCC_OscConfig+0x33c>
 80094f2:	4b6a      	ldr	r3, [pc, #424]	; (800969c <HAL_RCC_OscConfig+0x4cc>)
 80094f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094f6:	4a69      	ldr	r2, [pc, #420]	; (800969c <HAL_RCC_OscConfig+0x4cc>)
 80094f8:	f023 0301 	bic.w	r3, r3, #1
 80094fc:	6713      	str	r3, [r2, #112]	; 0x70
 80094fe:	4b67      	ldr	r3, [pc, #412]	; (800969c <HAL_RCC_OscConfig+0x4cc>)
 8009500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009502:	4a66      	ldr	r2, [pc, #408]	; (800969c <HAL_RCC_OscConfig+0x4cc>)
 8009504:	f023 0304 	bic.w	r3, r3, #4
 8009508:	6713      	str	r3, [r2, #112]	; 0x70
 800950a:	e01c      	b.n	8009546 <HAL_RCC_OscConfig+0x376>
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	689b      	ldr	r3, [r3, #8]
 8009510:	2b05      	cmp	r3, #5
 8009512:	d10c      	bne.n	800952e <HAL_RCC_OscConfig+0x35e>
 8009514:	4b61      	ldr	r3, [pc, #388]	; (800969c <HAL_RCC_OscConfig+0x4cc>)
 8009516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009518:	4a60      	ldr	r2, [pc, #384]	; (800969c <HAL_RCC_OscConfig+0x4cc>)
 800951a:	f043 0304 	orr.w	r3, r3, #4
 800951e:	6713      	str	r3, [r2, #112]	; 0x70
 8009520:	4b5e      	ldr	r3, [pc, #376]	; (800969c <HAL_RCC_OscConfig+0x4cc>)
 8009522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009524:	4a5d      	ldr	r2, [pc, #372]	; (800969c <HAL_RCC_OscConfig+0x4cc>)
 8009526:	f043 0301 	orr.w	r3, r3, #1
 800952a:	6713      	str	r3, [r2, #112]	; 0x70
 800952c:	e00b      	b.n	8009546 <HAL_RCC_OscConfig+0x376>
 800952e:	4b5b      	ldr	r3, [pc, #364]	; (800969c <HAL_RCC_OscConfig+0x4cc>)
 8009530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009532:	4a5a      	ldr	r2, [pc, #360]	; (800969c <HAL_RCC_OscConfig+0x4cc>)
 8009534:	f023 0301 	bic.w	r3, r3, #1
 8009538:	6713      	str	r3, [r2, #112]	; 0x70
 800953a:	4b58      	ldr	r3, [pc, #352]	; (800969c <HAL_RCC_OscConfig+0x4cc>)
 800953c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800953e:	4a57      	ldr	r2, [pc, #348]	; (800969c <HAL_RCC_OscConfig+0x4cc>)
 8009540:	f023 0304 	bic.w	r3, r3, #4
 8009544:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	689b      	ldr	r3, [r3, #8]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d015      	beq.n	800957a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800954e:	f7fd fa31 	bl	80069b4 <HAL_GetTick>
 8009552:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009554:	e00a      	b.n	800956c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009556:	f7fd fa2d 	bl	80069b4 <HAL_GetTick>
 800955a:	4602      	mov	r2, r0
 800955c:	693b      	ldr	r3, [r7, #16]
 800955e:	1ad3      	subs	r3, r2, r3
 8009560:	f241 3288 	movw	r2, #5000	; 0x1388
 8009564:	4293      	cmp	r3, r2
 8009566:	d901      	bls.n	800956c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8009568:	2303      	movs	r3, #3
 800956a:	e0ce      	b.n	800970a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800956c:	4b4b      	ldr	r3, [pc, #300]	; (800969c <HAL_RCC_OscConfig+0x4cc>)
 800956e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009570:	f003 0302 	and.w	r3, r3, #2
 8009574:	2b00      	cmp	r3, #0
 8009576:	d0ee      	beq.n	8009556 <HAL_RCC_OscConfig+0x386>
 8009578:	e014      	b.n	80095a4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800957a:	f7fd fa1b 	bl	80069b4 <HAL_GetTick>
 800957e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009580:	e00a      	b.n	8009598 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009582:	f7fd fa17 	bl	80069b4 <HAL_GetTick>
 8009586:	4602      	mov	r2, r0
 8009588:	693b      	ldr	r3, [r7, #16]
 800958a:	1ad3      	subs	r3, r2, r3
 800958c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009590:	4293      	cmp	r3, r2
 8009592:	d901      	bls.n	8009598 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8009594:	2303      	movs	r3, #3
 8009596:	e0b8      	b.n	800970a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009598:	4b40      	ldr	r3, [pc, #256]	; (800969c <HAL_RCC_OscConfig+0x4cc>)
 800959a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800959c:	f003 0302 	and.w	r3, r3, #2
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d1ee      	bne.n	8009582 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80095a4:	7dfb      	ldrb	r3, [r7, #23]
 80095a6:	2b01      	cmp	r3, #1
 80095a8:	d105      	bne.n	80095b6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80095aa:	4b3c      	ldr	r3, [pc, #240]	; (800969c <HAL_RCC_OscConfig+0x4cc>)
 80095ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ae:	4a3b      	ldr	r2, [pc, #236]	; (800969c <HAL_RCC_OscConfig+0x4cc>)
 80095b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80095b4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	699b      	ldr	r3, [r3, #24]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	f000 80a4 	beq.w	8009708 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80095c0:	4b36      	ldr	r3, [pc, #216]	; (800969c <HAL_RCC_OscConfig+0x4cc>)
 80095c2:	689b      	ldr	r3, [r3, #8]
 80095c4:	f003 030c 	and.w	r3, r3, #12
 80095c8:	2b08      	cmp	r3, #8
 80095ca:	d06b      	beq.n	80096a4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	699b      	ldr	r3, [r3, #24]
 80095d0:	2b02      	cmp	r3, #2
 80095d2:	d149      	bne.n	8009668 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80095d4:	4b31      	ldr	r3, [pc, #196]	; (800969c <HAL_RCC_OscConfig+0x4cc>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	4a30      	ldr	r2, [pc, #192]	; (800969c <HAL_RCC_OscConfig+0x4cc>)
 80095da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80095de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095e0:	f7fd f9e8 	bl	80069b4 <HAL_GetTick>
 80095e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80095e6:	e008      	b.n	80095fa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80095e8:	f7fd f9e4 	bl	80069b4 <HAL_GetTick>
 80095ec:	4602      	mov	r2, r0
 80095ee:	693b      	ldr	r3, [r7, #16]
 80095f0:	1ad3      	subs	r3, r2, r3
 80095f2:	2b02      	cmp	r3, #2
 80095f4:	d901      	bls.n	80095fa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80095f6:	2303      	movs	r3, #3
 80095f8:	e087      	b.n	800970a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80095fa:	4b28      	ldr	r3, [pc, #160]	; (800969c <HAL_RCC_OscConfig+0x4cc>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009602:	2b00      	cmp	r3, #0
 8009604:	d1f0      	bne.n	80095e8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	69da      	ldr	r2, [r3, #28]
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6a1b      	ldr	r3, [r3, #32]
 800960e:	431a      	orrs	r2, r3
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009614:	019b      	lsls	r3, r3, #6
 8009616:	431a      	orrs	r2, r3
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800961c:	085b      	lsrs	r3, r3, #1
 800961e:	3b01      	subs	r3, #1
 8009620:	041b      	lsls	r3, r3, #16
 8009622:	431a      	orrs	r2, r3
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009628:	061b      	lsls	r3, r3, #24
 800962a:	4313      	orrs	r3, r2
 800962c:	4a1b      	ldr	r2, [pc, #108]	; (800969c <HAL_RCC_OscConfig+0x4cc>)
 800962e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009632:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009634:	4b19      	ldr	r3, [pc, #100]	; (800969c <HAL_RCC_OscConfig+0x4cc>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	4a18      	ldr	r2, [pc, #96]	; (800969c <HAL_RCC_OscConfig+0x4cc>)
 800963a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800963e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009640:	f7fd f9b8 	bl	80069b4 <HAL_GetTick>
 8009644:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009646:	e008      	b.n	800965a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009648:	f7fd f9b4 	bl	80069b4 <HAL_GetTick>
 800964c:	4602      	mov	r2, r0
 800964e:	693b      	ldr	r3, [r7, #16]
 8009650:	1ad3      	subs	r3, r2, r3
 8009652:	2b02      	cmp	r3, #2
 8009654:	d901      	bls.n	800965a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8009656:	2303      	movs	r3, #3
 8009658:	e057      	b.n	800970a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800965a:	4b10      	ldr	r3, [pc, #64]	; (800969c <HAL_RCC_OscConfig+0x4cc>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009662:	2b00      	cmp	r3, #0
 8009664:	d0f0      	beq.n	8009648 <HAL_RCC_OscConfig+0x478>
 8009666:	e04f      	b.n	8009708 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009668:	4b0c      	ldr	r3, [pc, #48]	; (800969c <HAL_RCC_OscConfig+0x4cc>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	4a0b      	ldr	r2, [pc, #44]	; (800969c <HAL_RCC_OscConfig+0x4cc>)
 800966e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009672:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009674:	f7fd f99e 	bl	80069b4 <HAL_GetTick>
 8009678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800967a:	e008      	b.n	800968e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800967c:	f7fd f99a 	bl	80069b4 <HAL_GetTick>
 8009680:	4602      	mov	r2, r0
 8009682:	693b      	ldr	r3, [r7, #16]
 8009684:	1ad3      	subs	r3, r2, r3
 8009686:	2b02      	cmp	r3, #2
 8009688:	d901      	bls.n	800968e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800968a:	2303      	movs	r3, #3
 800968c:	e03d      	b.n	800970a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800968e:	4b03      	ldr	r3, [pc, #12]	; (800969c <HAL_RCC_OscConfig+0x4cc>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009696:	2b00      	cmp	r3, #0
 8009698:	d1f0      	bne.n	800967c <HAL_RCC_OscConfig+0x4ac>
 800969a:	e035      	b.n	8009708 <HAL_RCC_OscConfig+0x538>
 800969c:	40023800 	.word	0x40023800
 80096a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80096a4:	4b1b      	ldr	r3, [pc, #108]	; (8009714 <HAL_RCC_OscConfig+0x544>)
 80096a6:	685b      	ldr	r3, [r3, #4]
 80096a8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	699b      	ldr	r3, [r3, #24]
 80096ae:	2b01      	cmp	r3, #1
 80096b0:	d028      	beq.n	8009704 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80096bc:	429a      	cmp	r2, r3
 80096be:	d121      	bne.n	8009704 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80096ca:	429a      	cmp	r2, r3
 80096cc:	d11a      	bne.n	8009704 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80096ce:	68fa      	ldr	r2, [r7, #12]
 80096d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80096d4:	4013      	ands	r3, r2
 80096d6:	687a      	ldr	r2, [r7, #4]
 80096d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80096da:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80096dc:	4293      	cmp	r3, r2
 80096de:	d111      	bne.n	8009704 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096ea:	085b      	lsrs	r3, r3, #1
 80096ec:	3b01      	subs	r3, #1
 80096ee:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80096f0:	429a      	cmp	r2, r3
 80096f2:	d107      	bne.n	8009704 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096fe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8009700:	429a      	cmp	r2, r3
 8009702:	d001      	beq.n	8009708 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8009704:	2301      	movs	r3, #1
 8009706:	e000      	b.n	800970a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8009708:	2300      	movs	r3, #0
}
 800970a:	4618      	mov	r0, r3
 800970c:	3718      	adds	r7, #24
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}
 8009712:	bf00      	nop
 8009714:	40023800 	.word	0x40023800

08009718 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b084      	sub	sp, #16
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
 8009720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8009722:	2300      	movs	r3, #0
 8009724:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d101      	bne.n	8009730 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800972c:	2301      	movs	r3, #1
 800972e:	e0d0      	b.n	80098d2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009730:	4b6a      	ldr	r3, [pc, #424]	; (80098dc <HAL_RCC_ClockConfig+0x1c4>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f003 030f 	and.w	r3, r3, #15
 8009738:	683a      	ldr	r2, [r7, #0]
 800973a:	429a      	cmp	r2, r3
 800973c:	d910      	bls.n	8009760 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800973e:	4b67      	ldr	r3, [pc, #412]	; (80098dc <HAL_RCC_ClockConfig+0x1c4>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f023 020f 	bic.w	r2, r3, #15
 8009746:	4965      	ldr	r1, [pc, #404]	; (80098dc <HAL_RCC_ClockConfig+0x1c4>)
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	4313      	orrs	r3, r2
 800974c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800974e:	4b63      	ldr	r3, [pc, #396]	; (80098dc <HAL_RCC_ClockConfig+0x1c4>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f003 030f 	and.w	r3, r3, #15
 8009756:	683a      	ldr	r2, [r7, #0]
 8009758:	429a      	cmp	r2, r3
 800975a:	d001      	beq.n	8009760 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800975c:	2301      	movs	r3, #1
 800975e:	e0b8      	b.n	80098d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f003 0302 	and.w	r3, r3, #2
 8009768:	2b00      	cmp	r3, #0
 800976a:	d020      	beq.n	80097ae <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f003 0304 	and.w	r3, r3, #4
 8009774:	2b00      	cmp	r3, #0
 8009776:	d005      	beq.n	8009784 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009778:	4b59      	ldr	r3, [pc, #356]	; (80098e0 <HAL_RCC_ClockConfig+0x1c8>)
 800977a:	689b      	ldr	r3, [r3, #8]
 800977c:	4a58      	ldr	r2, [pc, #352]	; (80098e0 <HAL_RCC_ClockConfig+0x1c8>)
 800977e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009782:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f003 0308 	and.w	r3, r3, #8
 800978c:	2b00      	cmp	r3, #0
 800978e:	d005      	beq.n	800979c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009790:	4b53      	ldr	r3, [pc, #332]	; (80098e0 <HAL_RCC_ClockConfig+0x1c8>)
 8009792:	689b      	ldr	r3, [r3, #8]
 8009794:	4a52      	ldr	r2, [pc, #328]	; (80098e0 <HAL_RCC_ClockConfig+0x1c8>)
 8009796:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800979a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800979c:	4b50      	ldr	r3, [pc, #320]	; (80098e0 <HAL_RCC_ClockConfig+0x1c8>)
 800979e:	689b      	ldr	r3, [r3, #8]
 80097a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	689b      	ldr	r3, [r3, #8]
 80097a8:	494d      	ldr	r1, [pc, #308]	; (80098e0 <HAL_RCC_ClockConfig+0x1c8>)
 80097aa:	4313      	orrs	r3, r2
 80097ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f003 0301 	and.w	r3, r3, #1
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d040      	beq.n	800983c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	685b      	ldr	r3, [r3, #4]
 80097be:	2b01      	cmp	r3, #1
 80097c0:	d107      	bne.n	80097d2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80097c2:	4b47      	ldr	r3, [pc, #284]	; (80098e0 <HAL_RCC_ClockConfig+0x1c8>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d115      	bne.n	80097fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80097ce:	2301      	movs	r3, #1
 80097d0:	e07f      	b.n	80098d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	685b      	ldr	r3, [r3, #4]
 80097d6:	2b02      	cmp	r3, #2
 80097d8:	d107      	bne.n	80097ea <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80097da:	4b41      	ldr	r3, [pc, #260]	; (80098e0 <HAL_RCC_ClockConfig+0x1c8>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d109      	bne.n	80097fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80097e6:	2301      	movs	r3, #1
 80097e8:	e073      	b.n	80098d2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80097ea:	4b3d      	ldr	r3, [pc, #244]	; (80098e0 <HAL_RCC_ClockConfig+0x1c8>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f003 0302 	and.w	r3, r3, #2
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d101      	bne.n	80097fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80097f6:	2301      	movs	r3, #1
 80097f8:	e06b      	b.n	80098d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80097fa:	4b39      	ldr	r3, [pc, #228]	; (80098e0 <HAL_RCC_ClockConfig+0x1c8>)
 80097fc:	689b      	ldr	r3, [r3, #8]
 80097fe:	f023 0203 	bic.w	r2, r3, #3
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	685b      	ldr	r3, [r3, #4]
 8009806:	4936      	ldr	r1, [pc, #216]	; (80098e0 <HAL_RCC_ClockConfig+0x1c8>)
 8009808:	4313      	orrs	r3, r2
 800980a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800980c:	f7fd f8d2 	bl	80069b4 <HAL_GetTick>
 8009810:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009812:	e00a      	b.n	800982a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009814:	f7fd f8ce 	bl	80069b4 <HAL_GetTick>
 8009818:	4602      	mov	r2, r0
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	1ad3      	subs	r3, r2, r3
 800981e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009822:	4293      	cmp	r3, r2
 8009824:	d901      	bls.n	800982a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8009826:	2303      	movs	r3, #3
 8009828:	e053      	b.n	80098d2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800982a:	4b2d      	ldr	r3, [pc, #180]	; (80098e0 <HAL_RCC_ClockConfig+0x1c8>)
 800982c:	689b      	ldr	r3, [r3, #8]
 800982e:	f003 020c 	and.w	r2, r3, #12
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	685b      	ldr	r3, [r3, #4]
 8009836:	009b      	lsls	r3, r3, #2
 8009838:	429a      	cmp	r2, r3
 800983a:	d1eb      	bne.n	8009814 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800983c:	4b27      	ldr	r3, [pc, #156]	; (80098dc <HAL_RCC_ClockConfig+0x1c4>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f003 030f 	and.w	r3, r3, #15
 8009844:	683a      	ldr	r2, [r7, #0]
 8009846:	429a      	cmp	r2, r3
 8009848:	d210      	bcs.n	800986c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800984a:	4b24      	ldr	r3, [pc, #144]	; (80098dc <HAL_RCC_ClockConfig+0x1c4>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f023 020f 	bic.w	r2, r3, #15
 8009852:	4922      	ldr	r1, [pc, #136]	; (80098dc <HAL_RCC_ClockConfig+0x1c4>)
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	4313      	orrs	r3, r2
 8009858:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800985a:	4b20      	ldr	r3, [pc, #128]	; (80098dc <HAL_RCC_ClockConfig+0x1c4>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f003 030f 	and.w	r3, r3, #15
 8009862:	683a      	ldr	r2, [r7, #0]
 8009864:	429a      	cmp	r2, r3
 8009866:	d001      	beq.n	800986c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8009868:	2301      	movs	r3, #1
 800986a:	e032      	b.n	80098d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f003 0304 	and.w	r3, r3, #4
 8009874:	2b00      	cmp	r3, #0
 8009876:	d008      	beq.n	800988a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009878:	4b19      	ldr	r3, [pc, #100]	; (80098e0 <HAL_RCC_ClockConfig+0x1c8>)
 800987a:	689b      	ldr	r3, [r3, #8]
 800987c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	68db      	ldr	r3, [r3, #12]
 8009884:	4916      	ldr	r1, [pc, #88]	; (80098e0 <HAL_RCC_ClockConfig+0x1c8>)
 8009886:	4313      	orrs	r3, r2
 8009888:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f003 0308 	and.w	r3, r3, #8
 8009892:	2b00      	cmp	r3, #0
 8009894:	d009      	beq.n	80098aa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009896:	4b12      	ldr	r3, [pc, #72]	; (80098e0 <HAL_RCC_ClockConfig+0x1c8>)
 8009898:	689b      	ldr	r3, [r3, #8]
 800989a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	691b      	ldr	r3, [r3, #16]
 80098a2:	00db      	lsls	r3, r3, #3
 80098a4:	490e      	ldr	r1, [pc, #56]	; (80098e0 <HAL_RCC_ClockConfig+0x1c8>)
 80098a6:	4313      	orrs	r3, r2
 80098a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80098aa:	f000 f821 	bl	80098f0 <HAL_RCC_GetSysClockFreq>
 80098ae:	4602      	mov	r2, r0
 80098b0:	4b0b      	ldr	r3, [pc, #44]	; (80098e0 <HAL_RCC_ClockConfig+0x1c8>)
 80098b2:	689b      	ldr	r3, [r3, #8]
 80098b4:	091b      	lsrs	r3, r3, #4
 80098b6:	f003 030f 	and.w	r3, r3, #15
 80098ba:	490a      	ldr	r1, [pc, #40]	; (80098e4 <HAL_RCC_ClockConfig+0x1cc>)
 80098bc:	5ccb      	ldrb	r3, [r1, r3]
 80098be:	fa22 f303 	lsr.w	r3, r2, r3
 80098c2:	4a09      	ldr	r2, [pc, #36]	; (80098e8 <HAL_RCC_ClockConfig+0x1d0>)
 80098c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80098c6:	4b09      	ldr	r3, [pc, #36]	; (80098ec <HAL_RCC_ClockConfig+0x1d4>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	4618      	mov	r0, r3
 80098cc:	f7fb fad4 	bl	8004e78 <HAL_InitTick>

  return HAL_OK;
 80098d0:	2300      	movs	r3, #0
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3710      	adds	r7, #16
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}
 80098da:	bf00      	nop
 80098dc:	40023c00 	.word	0x40023c00
 80098e0:	40023800 	.word	0x40023800
 80098e4:	08016780 	.word	0x08016780
 80098e8:	20000044 	.word	0x20000044
 80098ec:	20000084 	.word	0x20000084

080098f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80098f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80098f4:	b090      	sub	sp, #64	; 0x40
 80098f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80098f8:	2300      	movs	r3, #0
 80098fa:	637b      	str	r3, [r7, #52]	; 0x34
 80098fc:	2300      	movs	r3, #0
 80098fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009900:	2300      	movs	r3, #0
 8009902:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8009904:	2300      	movs	r3, #0
 8009906:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009908:	4b59      	ldr	r3, [pc, #356]	; (8009a70 <HAL_RCC_GetSysClockFreq+0x180>)
 800990a:	689b      	ldr	r3, [r3, #8]
 800990c:	f003 030c 	and.w	r3, r3, #12
 8009910:	2b08      	cmp	r3, #8
 8009912:	d00d      	beq.n	8009930 <HAL_RCC_GetSysClockFreq+0x40>
 8009914:	2b08      	cmp	r3, #8
 8009916:	f200 80a1 	bhi.w	8009a5c <HAL_RCC_GetSysClockFreq+0x16c>
 800991a:	2b00      	cmp	r3, #0
 800991c:	d002      	beq.n	8009924 <HAL_RCC_GetSysClockFreq+0x34>
 800991e:	2b04      	cmp	r3, #4
 8009920:	d003      	beq.n	800992a <HAL_RCC_GetSysClockFreq+0x3a>
 8009922:	e09b      	b.n	8009a5c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009924:	4b53      	ldr	r3, [pc, #332]	; (8009a74 <HAL_RCC_GetSysClockFreq+0x184>)
 8009926:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8009928:	e09b      	b.n	8009a62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800992a:	4b53      	ldr	r3, [pc, #332]	; (8009a78 <HAL_RCC_GetSysClockFreq+0x188>)
 800992c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800992e:	e098      	b.n	8009a62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009930:	4b4f      	ldr	r3, [pc, #316]	; (8009a70 <HAL_RCC_GetSysClockFreq+0x180>)
 8009932:	685b      	ldr	r3, [r3, #4]
 8009934:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009938:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800993a:	4b4d      	ldr	r3, [pc, #308]	; (8009a70 <HAL_RCC_GetSysClockFreq+0x180>)
 800993c:	685b      	ldr	r3, [r3, #4]
 800993e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009942:	2b00      	cmp	r3, #0
 8009944:	d028      	beq.n	8009998 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009946:	4b4a      	ldr	r3, [pc, #296]	; (8009a70 <HAL_RCC_GetSysClockFreq+0x180>)
 8009948:	685b      	ldr	r3, [r3, #4]
 800994a:	099b      	lsrs	r3, r3, #6
 800994c:	2200      	movs	r2, #0
 800994e:	623b      	str	r3, [r7, #32]
 8009950:	627a      	str	r2, [r7, #36]	; 0x24
 8009952:	6a3b      	ldr	r3, [r7, #32]
 8009954:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8009958:	2100      	movs	r1, #0
 800995a:	4b47      	ldr	r3, [pc, #284]	; (8009a78 <HAL_RCC_GetSysClockFreq+0x188>)
 800995c:	fb03 f201 	mul.w	r2, r3, r1
 8009960:	2300      	movs	r3, #0
 8009962:	fb00 f303 	mul.w	r3, r0, r3
 8009966:	4413      	add	r3, r2
 8009968:	4a43      	ldr	r2, [pc, #268]	; (8009a78 <HAL_RCC_GetSysClockFreq+0x188>)
 800996a:	fba0 1202 	umull	r1, r2, r0, r2
 800996e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009970:	460a      	mov	r2, r1
 8009972:	62ba      	str	r2, [r7, #40]	; 0x28
 8009974:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009976:	4413      	add	r3, r2
 8009978:	62fb      	str	r3, [r7, #44]	; 0x2c
 800997a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800997c:	2200      	movs	r2, #0
 800997e:	61bb      	str	r3, [r7, #24]
 8009980:	61fa      	str	r2, [r7, #28]
 8009982:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009986:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800998a:	f7f6 fc41 	bl	8000210 <__aeabi_uldivmod>
 800998e:	4602      	mov	r2, r0
 8009990:	460b      	mov	r3, r1
 8009992:	4613      	mov	r3, r2
 8009994:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009996:	e053      	b.n	8009a40 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009998:	4b35      	ldr	r3, [pc, #212]	; (8009a70 <HAL_RCC_GetSysClockFreq+0x180>)
 800999a:	685b      	ldr	r3, [r3, #4]
 800999c:	099b      	lsrs	r3, r3, #6
 800999e:	2200      	movs	r2, #0
 80099a0:	613b      	str	r3, [r7, #16]
 80099a2:	617a      	str	r2, [r7, #20]
 80099a4:	693b      	ldr	r3, [r7, #16]
 80099a6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80099aa:	f04f 0b00 	mov.w	fp, #0
 80099ae:	4652      	mov	r2, sl
 80099b0:	465b      	mov	r3, fp
 80099b2:	f04f 0000 	mov.w	r0, #0
 80099b6:	f04f 0100 	mov.w	r1, #0
 80099ba:	0159      	lsls	r1, r3, #5
 80099bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80099c0:	0150      	lsls	r0, r2, #5
 80099c2:	4602      	mov	r2, r0
 80099c4:	460b      	mov	r3, r1
 80099c6:	ebb2 080a 	subs.w	r8, r2, sl
 80099ca:	eb63 090b 	sbc.w	r9, r3, fp
 80099ce:	f04f 0200 	mov.w	r2, #0
 80099d2:	f04f 0300 	mov.w	r3, #0
 80099d6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80099da:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80099de:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80099e2:	ebb2 0408 	subs.w	r4, r2, r8
 80099e6:	eb63 0509 	sbc.w	r5, r3, r9
 80099ea:	f04f 0200 	mov.w	r2, #0
 80099ee:	f04f 0300 	mov.w	r3, #0
 80099f2:	00eb      	lsls	r3, r5, #3
 80099f4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80099f8:	00e2      	lsls	r2, r4, #3
 80099fa:	4614      	mov	r4, r2
 80099fc:	461d      	mov	r5, r3
 80099fe:	eb14 030a 	adds.w	r3, r4, sl
 8009a02:	603b      	str	r3, [r7, #0]
 8009a04:	eb45 030b 	adc.w	r3, r5, fp
 8009a08:	607b      	str	r3, [r7, #4]
 8009a0a:	f04f 0200 	mov.w	r2, #0
 8009a0e:	f04f 0300 	mov.w	r3, #0
 8009a12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009a16:	4629      	mov	r1, r5
 8009a18:	028b      	lsls	r3, r1, #10
 8009a1a:	4621      	mov	r1, r4
 8009a1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009a20:	4621      	mov	r1, r4
 8009a22:	028a      	lsls	r2, r1, #10
 8009a24:	4610      	mov	r0, r2
 8009a26:	4619      	mov	r1, r3
 8009a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	60bb      	str	r3, [r7, #8]
 8009a2e:	60fa      	str	r2, [r7, #12]
 8009a30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009a34:	f7f6 fbec 	bl	8000210 <__aeabi_uldivmod>
 8009a38:	4602      	mov	r2, r0
 8009a3a:	460b      	mov	r3, r1
 8009a3c:	4613      	mov	r3, r2
 8009a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8009a40:	4b0b      	ldr	r3, [pc, #44]	; (8009a70 <HAL_RCC_GetSysClockFreq+0x180>)
 8009a42:	685b      	ldr	r3, [r3, #4]
 8009a44:	0c1b      	lsrs	r3, r3, #16
 8009a46:	f003 0303 	and.w	r3, r3, #3
 8009a4a:	3301      	adds	r3, #1
 8009a4c:	005b      	lsls	r3, r3, #1
 8009a4e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8009a50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a58:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8009a5a:	e002      	b.n	8009a62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009a5c:	4b05      	ldr	r3, [pc, #20]	; (8009a74 <HAL_RCC_GetSysClockFreq+0x184>)
 8009a5e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8009a60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	3740      	adds	r7, #64	; 0x40
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009a6e:	bf00      	nop
 8009a70:	40023800 	.word	0x40023800
 8009a74:	00f42400 	.word	0x00f42400
 8009a78:	017d7840 	.word	0x017d7840

08009a7c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009a80:	4b03      	ldr	r3, [pc, #12]	; (8009a90 <HAL_RCC_GetHCLKFreq+0x14>)
 8009a82:	681b      	ldr	r3, [r3, #0]
}
 8009a84:	4618      	mov	r0, r3
 8009a86:	46bd      	mov	sp, r7
 8009a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8c:	4770      	bx	lr
 8009a8e:	bf00      	nop
 8009a90:	20000044 	.word	0x20000044

08009a94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009a98:	f7ff fff0 	bl	8009a7c <HAL_RCC_GetHCLKFreq>
 8009a9c:	4602      	mov	r2, r0
 8009a9e:	4b05      	ldr	r3, [pc, #20]	; (8009ab4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009aa0:	689b      	ldr	r3, [r3, #8]
 8009aa2:	0a9b      	lsrs	r3, r3, #10
 8009aa4:	f003 0307 	and.w	r3, r3, #7
 8009aa8:	4903      	ldr	r1, [pc, #12]	; (8009ab8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009aaa:	5ccb      	ldrb	r3, [r1, r3]
 8009aac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	bd80      	pop	{r7, pc}
 8009ab4:	40023800 	.word	0x40023800
 8009ab8:	08016790 	.word	0x08016790

08009abc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009ac0:	f7ff ffdc 	bl	8009a7c <HAL_RCC_GetHCLKFreq>
 8009ac4:	4602      	mov	r2, r0
 8009ac6:	4b05      	ldr	r3, [pc, #20]	; (8009adc <HAL_RCC_GetPCLK2Freq+0x20>)
 8009ac8:	689b      	ldr	r3, [r3, #8]
 8009aca:	0b5b      	lsrs	r3, r3, #13
 8009acc:	f003 0307 	and.w	r3, r3, #7
 8009ad0:	4903      	ldr	r1, [pc, #12]	; (8009ae0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009ad2:	5ccb      	ldrb	r3, [r1, r3]
 8009ad4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009ad8:	4618      	mov	r0, r3
 8009ada:	bd80      	pop	{r7, pc}
 8009adc:	40023800 	.word	0x40023800
 8009ae0:	08016790 	.word	0x08016790

08009ae4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	b083      	sub	sp, #12
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
 8009aec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	220f      	movs	r2, #15
 8009af2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009af4:	4b12      	ldr	r3, [pc, #72]	; (8009b40 <HAL_RCC_GetClockConfig+0x5c>)
 8009af6:	689b      	ldr	r3, [r3, #8]
 8009af8:	f003 0203 	and.w	r2, r3, #3
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009b00:	4b0f      	ldr	r3, [pc, #60]	; (8009b40 <HAL_RCC_GetClockConfig+0x5c>)
 8009b02:	689b      	ldr	r3, [r3, #8]
 8009b04:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8009b0c:	4b0c      	ldr	r3, [pc, #48]	; (8009b40 <HAL_RCC_GetClockConfig+0x5c>)
 8009b0e:	689b      	ldr	r3, [r3, #8]
 8009b10:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8009b18:	4b09      	ldr	r3, [pc, #36]	; (8009b40 <HAL_RCC_GetClockConfig+0x5c>)
 8009b1a:	689b      	ldr	r3, [r3, #8]
 8009b1c:	08db      	lsrs	r3, r3, #3
 8009b1e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009b26:	4b07      	ldr	r3, [pc, #28]	; (8009b44 <HAL_RCC_GetClockConfig+0x60>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	f003 020f 	and.w	r2, r3, #15
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	601a      	str	r2, [r3, #0]
}
 8009b32:	bf00      	nop
 8009b34:	370c      	adds	r7, #12
 8009b36:	46bd      	mov	sp, r7
 8009b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3c:	4770      	bx	lr
 8009b3e:	bf00      	nop
 8009b40:	40023800 	.word	0x40023800
 8009b44:	40023c00 	.word	0x40023c00

08009b48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b088      	sub	sp, #32
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8009b50:	2300      	movs	r3, #0
 8009b52:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8009b54:	2300      	movs	r3, #0
 8009b56:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8009b58:	2300      	movs	r3, #0
 8009b5a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8009b60:	2300      	movs	r3, #0
 8009b62:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f003 0301 	and.w	r3, r3, #1
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d012      	beq.n	8009b96 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009b70:	4b69      	ldr	r3, [pc, #420]	; (8009d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009b72:	689b      	ldr	r3, [r3, #8]
 8009b74:	4a68      	ldr	r2, [pc, #416]	; (8009d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009b76:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009b7a:	6093      	str	r3, [r2, #8]
 8009b7c:	4b66      	ldr	r3, [pc, #408]	; (8009d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009b7e:	689a      	ldr	r2, [r3, #8]
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b84:	4964      	ldr	r1, [pc, #400]	; (8009d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009b86:	4313      	orrs	r3, r2
 8009b88:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d101      	bne.n	8009b96 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8009b92:	2301      	movs	r3, #1
 8009b94:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d017      	beq.n	8009bd2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009ba2:	4b5d      	ldr	r3, [pc, #372]	; (8009d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009ba4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ba8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bb0:	4959      	ldr	r1, [pc, #356]	; (8009d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009bb2:	4313      	orrs	r3, r2
 8009bb4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009bc0:	d101      	bne.n	8009bc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d101      	bne.n	8009bd2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8009bce:	2301      	movs	r3, #1
 8009bd0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d017      	beq.n	8009c0e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009bde:	4b4e      	ldr	r3, [pc, #312]	; (8009d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009be0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009be4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bec:	494a      	ldr	r1, [pc, #296]	; (8009d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009bee:	4313      	orrs	r3, r2
 8009bf0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bf8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009bfc:	d101      	bne.n	8009c02 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8009bfe:	2301      	movs	r3, #1
 8009c00:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d101      	bne.n	8009c0e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d001      	beq.n	8009c1e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f003 0320 	and.w	r3, r3, #32
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	f000 808b 	beq.w	8009d42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009c2c:	4b3a      	ldr	r3, [pc, #232]	; (8009d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c30:	4a39      	ldr	r2, [pc, #228]	; (8009d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009c32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c36:	6413      	str	r3, [r2, #64]	; 0x40
 8009c38:	4b37      	ldr	r3, [pc, #220]	; (8009d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c40:	60bb      	str	r3, [r7, #8]
 8009c42:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009c44:	4b35      	ldr	r3, [pc, #212]	; (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	4a34      	ldr	r2, [pc, #208]	; (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009c4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009c50:	f7fc feb0 	bl	80069b4 <HAL_GetTick>
 8009c54:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8009c56:	e008      	b.n	8009c6a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009c58:	f7fc feac 	bl	80069b4 <HAL_GetTick>
 8009c5c:	4602      	mov	r2, r0
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	1ad3      	subs	r3, r2, r3
 8009c62:	2b64      	cmp	r3, #100	; 0x64
 8009c64:	d901      	bls.n	8009c6a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8009c66:	2303      	movs	r3, #3
 8009c68:	e357      	b.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8009c6a:	4b2c      	ldr	r3, [pc, #176]	; (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d0f0      	beq.n	8009c58 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009c76:	4b28      	ldr	r3, [pc, #160]	; (8009d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c7e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009c80:	693b      	ldr	r3, [r7, #16]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d035      	beq.n	8009cf2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c8e:	693a      	ldr	r2, [r7, #16]
 8009c90:	429a      	cmp	r2, r3
 8009c92:	d02e      	beq.n	8009cf2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009c94:	4b20      	ldr	r3, [pc, #128]	; (8009d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c9c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009c9e:	4b1e      	ldr	r3, [pc, #120]	; (8009d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ca2:	4a1d      	ldr	r2, [pc, #116]	; (8009d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009ca4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ca8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009caa:	4b1b      	ldr	r3, [pc, #108]	; (8009d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cae:	4a1a      	ldr	r2, [pc, #104]	; (8009d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009cb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009cb4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8009cb6:	4a18      	ldr	r2, [pc, #96]	; (8009d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009cb8:	693b      	ldr	r3, [r7, #16]
 8009cba:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009cbc:	4b16      	ldr	r3, [pc, #88]	; (8009d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cc0:	f003 0301 	and.w	r3, r3, #1
 8009cc4:	2b01      	cmp	r3, #1
 8009cc6:	d114      	bne.n	8009cf2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cc8:	f7fc fe74 	bl	80069b4 <HAL_GetTick>
 8009ccc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009cce:	e00a      	b.n	8009ce6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009cd0:	f7fc fe70 	bl	80069b4 <HAL_GetTick>
 8009cd4:	4602      	mov	r2, r0
 8009cd6:	697b      	ldr	r3, [r7, #20]
 8009cd8:	1ad3      	subs	r3, r2, r3
 8009cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d901      	bls.n	8009ce6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8009ce2:	2303      	movs	r3, #3
 8009ce4:	e319      	b.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009ce6:	4b0c      	ldr	r3, [pc, #48]	; (8009d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cea:	f003 0302 	and.w	r3, r3, #2
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d0ee      	beq.n	8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009cfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009cfe:	d111      	bne.n	8009d24 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8009d00:	4b05      	ldr	r3, [pc, #20]	; (8009d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009d02:	689b      	ldr	r3, [r3, #8]
 8009d04:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009d0c:	4b04      	ldr	r3, [pc, #16]	; (8009d20 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009d0e:	400b      	ands	r3, r1
 8009d10:	4901      	ldr	r1, [pc, #4]	; (8009d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009d12:	4313      	orrs	r3, r2
 8009d14:	608b      	str	r3, [r1, #8]
 8009d16:	e00b      	b.n	8009d30 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8009d18:	40023800 	.word	0x40023800
 8009d1c:	40007000 	.word	0x40007000
 8009d20:	0ffffcff 	.word	0x0ffffcff
 8009d24:	4baa      	ldr	r3, [pc, #680]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009d26:	689b      	ldr	r3, [r3, #8]
 8009d28:	4aa9      	ldr	r2, [pc, #676]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009d2a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009d2e:	6093      	str	r3, [r2, #8]
 8009d30:	4ba7      	ldr	r3, [pc, #668]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009d32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009d3c:	49a4      	ldr	r1, [pc, #656]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009d3e:	4313      	orrs	r3, r2
 8009d40:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	f003 0310 	and.w	r3, r3, #16
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d010      	beq.n	8009d70 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009d4e:	4ba0      	ldr	r3, [pc, #640]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009d50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d54:	4a9e      	ldr	r2, [pc, #632]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009d56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009d5a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8009d5e:	4b9c      	ldr	r3, [pc, #624]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009d60:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d68:	4999      	ldr	r1, [pc, #612]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009d6a:	4313      	orrs	r3, r2
 8009d6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d00a      	beq.n	8009d92 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009d7c:	4b94      	ldr	r3, [pc, #592]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d82:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d8a:	4991      	ldr	r1, [pc, #580]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009d8c:	4313      	orrs	r3, r2
 8009d8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d00a      	beq.n	8009db4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009d9e:	4b8c      	ldr	r3, [pc, #560]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009da4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009dac:	4988      	ldr	r1, [pc, #544]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009dae:	4313      	orrs	r3, r2
 8009db0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d00a      	beq.n	8009dd6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009dc0:	4b83      	ldr	r3, [pc, #524]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009dc6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009dce:	4980      	ldr	r1, [pc, #512]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009dd0:	4313      	orrs	r3, r2
 8009dd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d00a      	beq.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009de2:	4b7b      	ldr	r3, [pc, #492]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009de8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009df0:	4977      	ldr	r1, [pc, #476]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009df2:	4313      	orrs	r3, r2
 8009df4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d00a      	beq.n	8009e1a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009e04:	4b72      	ldr	r3, [pc, #456]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e0a:	f023 0203 	bic.w	r2, r3, #3
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e12:	496f      	ldr	r1, [pc, #444]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009e14:	4313      	orrs	r3, r2
 8009e16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d00a      	beq.n	8009e3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009e26:	4b6a      	ldr	r3, [pc, #424]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e2c:	f023 020c 	bic.w	r2, r3, #12
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e34:	4966      	ldr	r1, [pc, #408]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009e36:	4313      	orrs	r3, r2
 8009e38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d00a      	beq.n	8009e5e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009e48:	4b61      	ldr	r3, [pc, #388]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e4e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e56:	495e      	ldr	r1, [pc, #376]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009e58:	4313      	orrs	r3, r2
 8009e5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d00a      	beq.n	8009e80 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009e6a:	4b59      	ldr	r3, [pc, #356]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e70:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e78:	4955      	ldr	r1, [pc, #340]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009e7a:	4313      	orrs	r3, r2
 8009e7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d00a      	beq.n	8009ea2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009e8c:	4b50      	ldr	r3, [pc, #320]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e92:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e9a:	494d      	ldr	r1, [pc, #308]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009e9c:	4313      	orrs	r3, r2
 8009e9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d00a      	beq.n	8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8009eae:	4b48      	ldr	r3, [pc, #288]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009eb4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ebc:	4944      	ldr	r1, [pc, #272]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009ebe:	4313      	orrs	r3, r2
 8009ec0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d00a      	beq.n	8009ee6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8009ed0:	4b3f      	ldr	r3, [pc, #252]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ed6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ede:	493c      	ldr	r1, [pc, #240]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009ee0:	4313      	orrs	r3, r2
 8009ee2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d00a      	beq.n	8009f08 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8009ef2:	4b37      	ldr	r3, [pc, #220]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ef8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f00:	4933      	ldr	r1, [pc, #204]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009f02:	4313      	orrs	r3, r2
 8009f04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d00a      	beq.n	8009f2a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009f14:	4b2e      	ldr	r3, [pc, #184]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f1a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009f22:	492b      	ldr	r1, [pc, #172]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009f24:	4313      	orrs	r3, r2
 8009f26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d011      	beq.n	8009f5a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8009f36:	4b26      	ldr	r3, [pc, #152]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f3c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f44:	4922      	ldr	r1, [pc, #136]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009f46:	4313      	orrs	r3, r2
 8009f48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009f54:	d101      	bne.n	8009f5a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8009f56:	2301      	movs	r3, #1
 8009f58:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f003 0308 	and.w	r3, r3, #8
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d001      	beq.n	8009f6a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8009f66:	2301      	movs	r3, #1
 8009f68:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d00a      	beq.n	8009f8c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009f76:	4b16      	ldr	r3, [pc, #88]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f7c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f84:	4912      	ldr	r1, [pc, #72]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009f86:	4313      	orrs	r3, r2
 8009f88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d00b      	beq.n	8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009f98:	4b0d      	ldr	r3, [pc, #52]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f9e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009fa8:	4909      	ldr	r1, [pc, #36]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009faa:	4313      	orrs	r3, r2
 8009fac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009fb0:	69fb      	ldr	r3, [r7, #28]
 8009fb2:	2b01      	cmp	r3, #1
 8009fb4:	d006      	beq.n	8009fc4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	f000 80d9 	beq.w	800a176 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009fc4:	4b02      	ldr	r3, [pc, #8]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	4a01      	ldr	r2, [pc, #4]	; (8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009fca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009fce:	e001      	b.n	8009fd4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8009fd0:	40023800 	.word	0x40023800
 8009fd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009fd6:	f7fc fced 	bl	80069b4 <HAL_GetTick>
 8009fda:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009fdc:	e008      	b.n	8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009fde:	f7fc fce9 	bl	80069b4 <HAL_GetTick>
 8009fe2:	4602      	mov	r2, r0
 8009fe4:	697b      	ldr	r3, [r7, #20]
 8009fe6:	1ad3      	subs	r3, r2, r3
 8009fe8:	2b64      	cmp	r3, #100	; 0x64
 8009fea:	d901      	bls.n	8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009fec:	2303      	movs	r3, #3
 8009fee:	e194      	b.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009ff0:	4b6c      	ldr	r3, [pc, #432]	; (800a1a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d1f0      	bne.n	8009fde <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f003 0301 	and.w	r3, r3, #1
 800a004:	2b00      	cmp	r3, #0
 800a006:	d021      	beq.n	800a04c <HAL_RCCEx_PeriphCLKConfig+0x504>
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d11d      	bne.n	800a04c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800a010:	4b64      	ldr	r3, [pc, #400]	; (800a1a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a012:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a016:	0c1b      	lsrs	r3, r3, #16
 800a018:	f003 0303 	and.w	r3, r3, #3
 800a01c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800a01e:	4b61      	ldr	r3, [pc, #388]	; (800a1a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a020:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a024:	0e1b      	lsrs	r3, r3, #24
 800a026:	f003 030f 	and.w	r3, r3, #15
 800a02a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	685b      	ldr	r3, [r3, #4]
 800a030:	019a      	lsls	r2, r3, #6
 800a032:	693b      	ldr	r3, [r7, #16]
 800a034:	041b      	lsls	r3, r3, #16
 800a036:	431a      	orrs	r2, r3
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	061b      	lsls	r3, r3, #24
 800a03c:	431a      	orrs	r2, r3
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	689b      	ldr	r3, [r3, #8]
 800a042:	071b      	lsls	r3, r3, #28
 800a044:	4957      	ldr	r1, [pc, #348]	; (800a1a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a046:	4313      	orrs	r3, r2
 800a048:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a054:	2b00      	cmp	r3, #0
 800a056:	d004      	beq.n	800a062 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a05c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a060:	d00a      	beq.n	800a078 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d02e      	beq.n	800a0cc <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a072:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a076:	d129      	bne.n	800a0cc <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800a078:	4b4a      	ldr	r3, [pc, #296]	; (800a1a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a07a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a07e:	0c1b      	lsrs	r3, r3, #16
 800a080:	f003 0303 	and.w	r3, r3, #3
 800a084:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a086:	4b47      	ldr	r3, [pc, #284]	; (800a1a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a088:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a08c:	0f1b      	lsrs	r3, r3, #28
 800a08e:	f003 0307 	and.w	r3, r3, #7
 800a092:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	685b      	ldr	r3, [r3, #4]
 800a098:	019a      	lsls	r2, r3, #6
 800a09a:	693b      	ldr	r3, [r7, #16]
 800a09c:	041b      	lsls	r3, r3, #16
 800a09e:	431a      	orrs	r2, r3
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	68db      	ldr	r3, [r3, #12]
 800a0a4:	061b      	lsls	r3, r3, #24
 800a0a6:	431a      	orrs	r2, r3
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	071b      	lsls	r3, r3, #28
 800a0ac:	493d      	ldr	r1, [pc, #244]	; (800a1a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a0ae:	4313      	orrs	r3, r2
 800a0b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800a0b4:	4b3b      	ldr	r3, [pc, #236]	; (800a1a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a0b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a0ba:	f023 021f 	bic.w	r2, r3, #31
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0c2:	3b01      	subs	r3, #1
 800a0c4:	4937      	ldr	r1, [pc, #220]	; (800a1a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a0c6:	4313      	orrs	r3, r2
 800a0c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d01d      	beq.n	800a114 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800a0d8:	4b32      	ldr	r3, [pc, #200]	; (800a1a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a0da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a0de:	0e1b      	lsrs	r3, r3, #24
 800a0e0:	f003 030f 	and.w	r3, r3, #15
 800a0e4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a0e6:	4b2f      	ldr	r3, [pc, #188]	; (800a1a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a0e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a0ec:	0f1b      	lsrs	r3, r3, #28
 800a0ee:	f003 0307 	and.w	r3, r3, #7
 800a0f2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	685b      	ldr	r3, [r3, #4]
 800a0f8:	019a      	lsls	r2, r3, #6
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	691b      	ldr	r3, [r3, #16]
 800a0fe:	041b      	lsls	r3, r3, #16
 800a100:	431a      	orrs	r2, r3
 800a102:	693b      	ldr	r3, [r7, #16]
 800a104:	061b      	lsls	r3, r3, #24
 800a106:	431a      	orrs	r2, r3
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	071b      	lsls	r3, r3, #28
 800a10c:	4925      	ldr	r1, [pc, #148]	; (800a1a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a10e:	4313      	orrs	r3, r2
 800a110:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d011      	beq.n	800a144 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	685b      	ldr	r3, [r3, #4]
 800a124:	019a      	lsls	r2, r3, #6
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	691b      	ldr	r3, [r3, #16]
 800a12a:	041b      	lsls	r3, r3, #16
 800a12c:	431a      	orrs	r2, r3
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	68db      	ldr	r3, [r3, #12]
 800a132:	061b      	lsls	r3, r3, #24
 800a134:	431a      	orrs	r2, r3
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	689b      	ldr	r3, [r3, #8]
 800a13a:	071b      	lsls	r3, r3, #28
 800a13c:	4919      	ldr	r1, [pc, #100]	; (800a1a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a13e:	4313      	orrs	r3, r2
 800a140:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a144:	4b17      	ldr	r3, [pc, #92]	; (800a1a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	4a16      	ldr	r2, [pc, #88]	; (800a1a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a14a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a14e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a150:	f7fc fc30 	bl	80069b4 <HAL_GetTick>
 800a154:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a156:	e008      	b.n	800a16a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800a158:	f7fc fc2c 	bl	80069b4 <HAL_GetTick>
 800a15c:	4602      	mov	r2, r0
 800a15e:	697b      	ldr	r3, [r7, #20]
 800a160:	1ad3      	subs	r3, r2, r3
 800a162:	2b64      	cmp	r3, #100	; 0x64
 800a164:	d901      	bls.n	800a16a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a166:	2303      	movs	r3, #3
 800a168:	e0d7      	b.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a16a:	4b0e      	ldr	r3, [pc, #56]	; (800a1a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a172:	2b00      	cmp	r3, #0
 800a174:	d0f0      	beq.n	800a158 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800a176:	69bb      	ldr	r3, [r7, #24]
 800a178:	2b01      	cmp	r3, #1
 800a17a:	f040 80cd 	bne.w	800a318 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800a17e:	4b09      	ldr	r3, [pc, #36]	; (800a1a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	4a08      	ldr	r2, [pc, #32]	; (800a1a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a184:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a188:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a18a:	f7fc fc13 	bl	80069b4 <HAL_GetTick>
 800a18e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a190:	e00a      	b.n	800a1a8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800a192:	f7fc fc0f 	bl	80069b4 <HAL_GetTick>
 800a196:	4602      	mov	r2, r0
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	1ad3      	subs	r3, r2, r3
 800a19c:	2b64      	cmp	r3, #100	; 0x64
 800a19e:	d903      	bls.n	800a1a8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a1a0:	2303      	movs	r3, #3
 800a1a2:	e0ba      	b.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800a1a4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a1a8:	4b5e      	ldr	r3, [pc, #376]	; (800a324 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a1b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a1b4:	d0ed      	beq.n	800a192 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d003      	beq.n	800a1ca <HAL_RCCEx_PeriphCLKConfig+0x682>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d009      	beq.n	800a1de <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d02e      	beq.n	800a234 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d12a      	bne.n	800a234 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800a1de:	4b51      	ldr	r3, [pc, #324]	; (800a324 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a1e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1e4:	0c1b      	lsrs	r3, r3, #16
 800a1e6:	f003 0303 	and.w	r3, r3, #3
 800a1ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a1ec:	4b4d      	ldr	r3, [pc, #308]	; (800a324 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a1ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1f2:	0f1b      	lsrs	r3, r3, #28
 800a1f4:	f003 0307 	and.w	r3, r3, #7
 800a1f8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	695b      	ldr	r3, [r3, #20]
 800a1fe:	019a      	lsls	r2, r3, #6
 800a200:	693b      	ldr	r3, [r7, #16]
 800a202:	041b      	lsls	r3, r3, #16
 800a204:	431a      	orrs	r2, r3
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	699b      	ldr	r3, [r3, #24]
 800a20a:	061b      	lsls	r3, r3, #24
 800a20c:	431a      	orrs	r2, r3
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	071b      	lsls	r3, r3, #28
 800a212:	4944      	ldr	r1, [pc, #272]	; (800a324 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a214:	4313      	orrs	r3, r2
 800a216:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800a21a:	4b42      	ldr	r3, [pc, #264]	; (800a324 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a21c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a220:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a228:	3b01      	subs	r3, #1
 800a22a:	021b      	lsls	r3, r3, #8
 800a22c:	493d      	ldr	r1, [pc, #244]	; (800a324 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a22e:	4313      	orrs	r3, r2
 800a230:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d022      	beq.n	800a286 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a244:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a248:	d11d      	bne.n	800a286 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a24a:	4b36      	ldr	r3, [pc, #216]	; (800a324 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a24c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a250:	0e1b      	lsrs	r3, r3, #24
 800a252:	f003 030f 	and.w	r3, r3, #15
 800a256:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a258:	4b32      	ldr	r3, [pc, #200]	; (800a324 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a25a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a25e:	0f1b      	lsrs	r3, r3, #28
 800a260:	f003 0307 	and.w	r3, r3, #7
 800a264:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	695b      	ldr	r3, [r3, #20]
 800a26a:	019a      	lsls	r2, r3, #6
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	6a1b      	ldr	r3, [r3, #32]
 800a270:	041b      	lsls	r3, r3, #16
 800a272:	431a      	orrs	r2, r3
 800a274:	693b      	ldr	r3, [r7, #16]
 800a276:	061b      	lsls	r3, r3, #24
 800a278:	431a      	orrs	r2, r3
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	071b      	lsls	r3, r3, #28
 800a27e:	4929      	ldr	r1, [pc, #164]	; (800a324 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a280:	4313      	orrs	r3, r2
 800a282:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	f003 0308 	and.w	r3, r3, #8
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d028      	beq.n	800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a292:	4b24      	ldr	r3, [pc, #144]	; (800a324 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a298:	0e1b      	lsrs	r3, r3, #24
 800a29a:	f003 030f 	and.w	r3, r3, #15
 800a29e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800a2a0:	4b20      	ldr	r3, [pc, #128]	; (800a324 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a2a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2a6:	0c1b      	lsrs	r3, r3, #16
 800a2a8:	f003 0303 	and.w	r3, r3, #3
 800a2ac:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	695b      	ldr	r3, [r3, #20]
 800a2b2:	019a      	lsls	r2, r3, #6
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	041b      	lsls	r3, r3, #16
 800a2b8:	431a      	orrs	r2, r3
 800a2ba:	693b      	ldr	r3, [r7, #16]
 800a2bc:	061b      	lsls	r3, r3, #24
 800a2be:	431a      	orrs	r2, r3
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	69db      	ldr	r3, [r3, #28]
 800a2c4:	071b      	lsls	r3, r3, #28
 800a2c6:	4917      	ldr	r1, [pc, #92]	; (800a324 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a2c8:	4313      	orrs	r3, r2
 800a2ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800a2ce:	4b15      	ldr	r3, [pc, #84]	; (800a324 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a2d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a2d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2dc:	4911      	ldr	r1, [pc, #68]	; (800a324 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a2de:	4313      	orrs	r3, r2
 800a2e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800a2e4:	4b0f      	ldr	r3, [pc, #60]	; (800a324 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	4a0e      	ldr	r2, [pc, #56]	; (800a324 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a2ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a2ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a2f0:	f7fc fb60 	bl	80069b4 <HAL_GetTick>
 800a2f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a2f6:	e008      	b.n	800a30a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800a2f8:	f7fc fb5c 	bl	80069b4 <HAL_GetTick>
 800a2fc:	4602      	mov	r2, r0
 800a2fe:	697b      	ldr	r3, [r7, #20]
 800a300:	1ad3      	subs	r3, r2, r3
 800a302:	2b64      	cmp	r3, #100	; 0x64
 800a304:	d901      	bls.n	800a30a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a306:	2303      	movs	r3, #3
 800a308:	e007      	b.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a30a:	4b06      	ldr	r3, [pc, #24]	; (800a324 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a312:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a316:	d1ef      	bne.n	800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800a318:	2300      	movs	r3, #0
}
 800a31a:	4618      	mov	r0, r3
 800a31c:	3720      	adds	r7, #32
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}
 800a322:	bf00      	nop
 800a324:	40023800 	.word	0x40023800

0800a328 <HAL_RCCEx_GetPeriphCLKConfig>:
  *         RCC configuration registers.
  * @param  PeriphClkInit pointer to the configured RCC_PeriphCLKInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a328:	b480      	push	{r7}
 800a32a:	b085      	sub	sp, #20
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0;
 800a330:	2300      	movs	r3, #0
 800a332:	60fb      	str	r3, [r7, #12]
                                        RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48    | RCC_PERIPHCLK_SDMMC2   |\
                                        RCC_PERIPHCLK_DFSDM1   | RCC_PERIPHCLK_DFSDM1_AUDIO;
#else
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	4a80      	ldr	r2, [pc, #512]	; (800a538 <HAL_RCCEx_GetPeriphCLKConfig+0x210>)
 800a338:	601a      	str	r2, [r3, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 800a33a:	4b80      	ldr	r3, [pc, #512]	; (800a53c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800a33c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a340:	099b      	lsrs	r3, r3, #6
 800a342:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800a34a:	4b7c      	ldr	r3, [pc, #496]	; (800a53c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800a34c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a350:	0c1b      	lsrs	r3, r3, #16
 800a352:	f003 0203 	and.w	r2, r3, #3
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800a35a:	4b78      	ldr	r3, [pc, #480]	; (800a53c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800a35c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a360:	0e1b      	lsrs	r3, r3, #24
 800a362:	f003 020f 	and.w	r2, r3, #15
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a36a:	4b74      	ldr	r3, [pc, #464]	; (800a53c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800a36c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a370:	0f1b      	lsrs	r3, r3, #28
 800a372:	f003 0207 	and.w	r2, r3, #7
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	609a      	str	r2, [r3, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 800a37a:	4b70      	ldr	r3, [pc, #448]	; (800a53c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800a37c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a380:	099b      	lsrs	r3, r3, #6
 800a382:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800a38a:	4b6c      	ldr	r3, [pc, #432]	; (800a53c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800a38c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a390:	0c1b      	lsrs	r3, r3, #16
 800a392:	f003 0203 	and.w	r2, r3, #3
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	621a      	str	r2, [r3, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a39a:	4b68      	ldr	r3, [pc, #416]	; (800a53c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800a39c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3a0:	0e1b      	lsrs	r3, r3, #24
 800a3a2:	f003 020f 	and.w	r2, r3, #15
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a3aa:	4b64      	ldr	r3, [pc, #400]	; (800a53c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800a3ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3b0:	0f1b      	lsrs	r3, r3, #28
 800a3b2:	f003 0207 	and.w	r2, r3, #7
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	61da      	str	r2, [r3, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
 800a3ba:	4b60      	ldr	r3, [pc, #384]	; (800a53c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800a3bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a3c0:	f003 021f 	and.w	r2, r3, #31
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	625a      	str	r2, [r3, #36]	; 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
 800a3c8:	4b5c      	ldr	r3, [pc, #368]	; (800a53c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800a3ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a3ce:	0a1b      	lsrs	r3, r3, #8
 800a3d0:	f003 021f 	and.w	r2, r3, #31
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 800a3d8:	4b58      	ldr	r3, [pc, #352]	; (800a53c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800a3da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a3de:	0c1b      	lsrs	r3, r3, #16
 800a3e0:	f003 0203 	and.w	r2, r3, #3
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 800a3e8:	4b54      	ldr	r3, [pc, #336]	; (800a53c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800a3ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a3ee:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 800a3f6:	4b51      	ldr	r3, [pc, #324]	; (800a53c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800a3f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a3fc:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 800a404:	4b4d      	ldr	r3, [pc, #308]	; (800a53c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800a406:	689b      	ldr	r3, [r3, #8]
 800a408:	f403 0200 	and.w	r2, r3, #8388608	; 0x800000
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 800a410:	4b4a      	ldr	r3, [pc, #296]	; (800a53c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800a412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a416:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 800a41e:	4b47      	ldr	r3, [pc, #284]	; (800a53c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800a420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a424:	f403 2240 	and.w	r2, r3, #786432	; 0xc0000
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	669a      	str	r2, [r3, #104]	; 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 800a42c:	4b43      	ldr	r3, [pc, #268]	; (800a53c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800a42e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a432:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 800a43a:	4b40      	ldr	r3, [pc, #256]	; (800a53c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800a43c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a440:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	671a      	str	r2, [r3, #112]	; 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 800a448:	4b3c      	ldr	r3, [pc, #240]	; (800a53c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800a44a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a44e:	f003 0203 	and.w	r2, r3, #3
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 800a456:	4b39      	ldr	r3, [pc, #228]	; (800a53c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800a458:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a45c:	f003 020c 	and.w	r2, r3, #12
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	649a      	str	r2, [r3, #72]	; 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 800a464:	4b35      	ldr	r3, [pc, #212]	; (800a53c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800a466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a46a:	f003 0230 	and.w	r2, r3, #48	; 0x30
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 800a472:	4b32      	ldr	r3, [pc, #200]	; (800a53c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800a474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a478:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 800a480:	4b2e      	ldr	r3, [pc, #184]	; (800a53c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800a482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a486:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 800a48e:	4b2b      	ldr	r3, [pc, #172]	; (800a53c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800a490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a494:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 800a49c:	4b27      	ldr	r3, [pc, #156]	; (800a53c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800a49e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4a2:	f403 5240 	and.w	r2, r3, #12288	; 0x3000
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 800a4aa:	4b24      	ldr	r3, [pc, #144]	; (800a53c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800a4ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4b0:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 800a4b8:	4b20      	ldr	r3, [pc, #128]	; (800a53c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800a4ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4be:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 800a4c6:	4b1d      	ldr	r3, [pc, #116]	; (800a53c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800a4c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4cc:	f003 6280 	and.w	r2, r3, #67108864	; 0x4000000
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 800a4d4:	4b19      	ldr	r3, [pc, #100]	; (800a53c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800a4d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4da:	f003 6200 	and.w	r2, r3, #134217728	; 0x8000000
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 800a4e2:	4b16      	ldr	r3, [pc, #88]	; (800a53c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800a4e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4e8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 800a4f2:	4b12      	ldr	r3, [pc, #72]	; (800a53c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800a4f4:	689b      	ldr	r3, [r3, #8]
 800a4f6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800a4fa:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 800a4fc:	4b0f      	ldr	r3, [pc, #60]	; (800a53c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800a4fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a500:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	431a      	orrs	r2, r3
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 800a50c:	4b0b      	ldr	r3, [pc, #44]	; (800a53c <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800a50e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a512:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a516:	2b00      	cmp	r3, #0
 800a518:	d103      	bne.n	800a522 <HAL_RCCEx_GetPeriphCLKConfig+0x1fa>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2200      	movs	r2, #0
 800a51e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 800a520:	e003      	b.n	800a52a <HAL_RCCEx_GetPeriphCLKConfig+0x202>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a528:	639a      	str	r2, [r3, #56]	; 0x38
}
 800a52a:	bf00      	nop
 800a52c:	3714      	adds	r7, #20
 800a52e:	46bd      	mov	sp, r7
 800a530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a534:	4770      	bx	lr
 800a536:	bf00      	nop
 800a538:	00fffff1 	.word	0x00fffff1
 800a53c:	40023800 	.word	0x40023800

0800a540 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a540:	b480      	push	{r7}
 800a542:	b087      	sub	sp, #28
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800a548:	2300      	movs	r3, #0
 800a54a:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800a54c:	2300      	movs	r3, #0
 800a54e:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800a550:	2300      	movs	r3, #0
 800a552:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800a554:	2300      	movs	r3, #0
 800a556:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a55e:	f040 808c 	bne.w	800a67a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  {
    saiclocksource = RCC->DCKCFGR1;
 800a562:	4b95      	ldr	r3, [pc, #596]	; (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a564:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a568:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800a56a:	68bb      	ldr	r3, [r7, #8]
 800a56c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800a570:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a578:	d07c      	beq.n	800a674 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a580:	d87d      	bhi.n	800a67e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800a582:	68bb      	ldr	r3, [r7, #8]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d004      	beq.n	800a592 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a58e:	d039      	beq.n	800a604 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800a590:	e075      	b.n	800a67e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800a592:	4b89      	ldr	r3, [pc, #548]	; (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a594:	685b      	ldr	r3, [r3, #4]
 800a596:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d108      	bne.n	800a5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800a59e:	4b86      	ldr	r3, [pc, #536]	; (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a5a0:	685b      	ldr	r3, [r3, #4]
 800a5a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a5a6:	4a85      	ldr	r2, [pc, #532]	; (800a7bc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a5a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5ac:	613b      	str	r3, [r7, #16]
 800a5ae:	e007      	b.n	800a5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800a5b0:	4b81      	ldr	r3, [pc, #516]	; (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a5b2:	685b      	ldr	r3, [r3, #4]
 800a5b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a5b8:	4a81      	ldr	r2, [pc, #516]	; (800a7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800a5ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5be:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800a5c0:	4b7d      	ldr	r3, [pc, #500]	; (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a5c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5c6:	0e1b      	lsrs	r3, r3, #24
 800a5c8:	f003 030f 	and.w	r3, r3, #15
 800a5cc:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800a5ce:	4b7a      	ldr	r3, [pc, #488]	; (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a5d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5d4:	099b      	lsrs	r3, r3, #6
 800a5d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5da:	693a      	ldr	r2, [r7, #16]
 800a5dc:	fb03 f202 	mul.w	r2, r3, r2
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5e6:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800a5e8:	4b73      	ldr	r3, [pc, #460]	; (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a5ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a5ee:	0a1b      	lsrs	r3, r3, #8
 800a5f0:	f003 031f 	and.w	r3, r3, #31
 800a5f4:	3301      	adds	r3, #1
 800a5f6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800a5f8:	697a      	ldr	r2, [r7, #20]
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a600:	617b      	str	r3, [r7, #20]
        break;
 800a602:	e03d      	b.n	800a680 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800a604:	4b6c      	ldr	r3, [pc, #432]	; (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a606:	685b      	ldr	r3, [r3, #4]
 800a608:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d108      	bne.n	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800a610:	4b69      	ldr	r3, [pc, #420]	; (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a612:	685b      	ldr	r3, [r3, #4]
 800a614:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a618:	4a68      	ldr	r2, [pc, #416]	; (800a7bc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a61a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a61e:	613b      	str	r3, [r7, #16]
 800a620:	e007      	b.n	800a632 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800a622:	4b65      	ldr	r3, [pc, #404]	; (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a624:	685b      	ldr	r3, [r3, #4]
 800a626:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a62a:	4a65      	ldr	r2, [pc, #404]	; (800a7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800a62c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a630:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800a632:	4b61      	ldr	r3, [pc, #388]	; (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a634:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a638:	0e1b      	lsrs	r3, r3, #24
 800a63a:	f003 030f 	and.w	r3, r3, #15
 800a63e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800a640:	4b5d      	ldr	r3, [pc, #372]	; (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a642:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a646:	099b      	lsrs	r3, r3, #6
 800a648:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a64c:	693a      	ldr	r2, [r7, #16]
 800a64e:	fb03 f202 	mul.w	r2, r3, r2
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	fbb2 f3f3 	udiv	r3, r2, r3
 800a658:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800a65a:	4b57      	ldr	r3, [pc, #348]	; (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a65c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a660:	f003 031f 	and.w	r3, r3, #31
 800a664:	3301      	adds	r3, #1
 800a666:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800a668:	697a      	ldr	r2, [r7, #20]
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a670:	617b      	str	r3, [r7, #20]
        break;
 800a672:	e005      	b.n	800a680 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        frequency = EXTERNAL_CLOCK_VALUE;
 800a674:	4b53      	ldr	r3, [pc, #332]	; (800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800a676:	617b      	str	r3, [r7, #20]
        break;
 800a678:	e002      	b.n	800a680 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      }
    }
  }
 800a67a:	bf00      	nop
 800a67c:	e000      	b.n	800a680 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        break;
 800a67e:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a686:	f040 808c 	bne.w	800a7a2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  {
    saiclocksource = RCC->DCKCFGR1;
 800a68a:	4b4b      	ldr	r3, [pc, #300]	; (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a68c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a690:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800a692:	68bb      	ldr	r3, [r7, #8]
 800a694:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800a698:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a6a0:	d07c      	beq.n	800a79c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a6a8:	d87d      	bhi.n	800a7a6 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 800a6aa:	68bb      	ldr	r3, [r7, #8]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d004      	beq.n	800a6ba <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800a6b0:	68bb      	ldr	r3, [r7, #8]
 800a6b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a6b6:	d039      	beq.n	800a72c <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800a6b8:	e075      	b.n	800a7a6 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800a6ba:	4b3f      	ldr	r3, [pc, #252]	; (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a6bc:	685b      	ldr	r3, [r3, #4]
 800a6be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d108      	bne.n	800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800a6c6:	4b3c      	ldr	r3, [pc, #240]	; (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a6c8:	685b      	ldr	r3, [r3, #4]
 800a6ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a6ce:	4a3b      	ldr	r2, [pc, #236]	; (800a7bc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a6d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6d4:	613b      	str	r3, [r7, #16]
 800a6d6:	e007      	b.n	800a6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800a6d8:	4b37      	ldr	r3, [pc, #220]	; (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a6da:	685b      	ldr	r3, [r3, #4]
 800a6dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a6e0:	4a37      	ldr	r2, [pc, #220]	; (800a7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800a6e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6e6:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800a6e8:	4b33      	ldr	r3, [pc, #204]	; (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a6ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6ee:	0e1b      	lsrs	r3, r3, #24
 800a6f0:	f003 030f 	and.w	r3, r3, #15
 800a6f4:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800a6f6:	4b30      	ldr	r3, [pc, #192]	; (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a6f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6fc:	099b      	lsrs	r3, r3, #6
 800a6fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a702:	693a      	ldr	r2, [r7, #16]
 800a704:	fb03 f202 	mul.w	r2, r3, r2
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a70e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800a710:	4b29      	ldr	r3, [pc, #164]	; (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a712:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a716:	0a1b      	lsrs	r3, r3, #8
 800a718:	f003 031f 	and.w	r3, r3, #31
 800a71c:	3301      	adds	r3, #1
 800a71e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800a720:	697a      	ldr	r2, [r7, #20]
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	fbb2 f3f3 	udiv	r3, r2, r3
 800a728:	617b      	str	r3, [r7, #20]
        break;
 800a72a:	e03d      	b.n	800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800a72c:	4b22      	ldr	r3, [pc, #136]	; (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a72e:	685b      	ldr	r3, [r3, #4]
 800a730:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a734:	2b00      	cmp	r3, #0
 800a736:	d108      	bne.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800a738:	4b1f      	ldr	r3, [pc, #124]	; (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a73a:	685b      	ldr	r3, [r3, #4]
 800a73c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a740:	4a1e      	ldr	r2, [pc, #120]	; (800a7bc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a742:	fbb2 f3f3 	udiv	r3, r2, r3
 800a746:	613b      	str	r3, [r7, #16]
 800a748:	e007      	b.n	800a75a <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800a74a:	4b1b      	ldr	r3, [pc, #108]	; (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a74c:	685b      	ldr	r3, [r3, #4]
 800a74e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a752:	4a1b      	ldr	r2, [pc, #108]	; (800a7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800a754:	fbb2 f3f3 	udiv	r3, r2, r3
 800a758:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800a75a:	4b17      	ldr	r3, [pc, #92]	; (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a75c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a760:	0e1b      	lsrs	r3, r3, #24
 800a762:	f003 030f 	and.w	r3, r3, #15
 800a766:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800a768:	4b13      	ldr	r3, [pc, #76]	; (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a76a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a76e:	099b      	lsrs	r3, r3, #6
 800a770:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a774:	693a      	ldr	r2, [r7, #16]
 800a776:	fb03 f202 	mul.w	r2, r3, r2
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a780:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800a782:	4b0d      	ldr	r3, [pc, #52]	; (800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a784:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a788:	f003 031f 	and.w	r3, r3, #31
 800a78c:	3301      	adds	r3, #1
 800a78e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800a790:	697a      	ldr	r2, [r7, #20]
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	fbb2 f3f3 	udiv	r3, r2, r3
 800a798:	617b      	str	r3, [r7, #20]
        break;
 800a79a:	e005      	b.n	800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        frequency = EXTERNAL_CLOCK_VALUE;
 800a79c:	4b09      	ldr	r3, [pc, #36]	; (800a7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800a79e:	617b      	str	r3, [r7, #20]
        break;
 800a7a0:	e002      	b.n	800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
      }
    }
  }
 800a7a2:	bf00      	nop
 800a7a4:	e000      	b.n	800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        break;
 800a7a6:	bf00      	nop

  return frequency;
 800a7a8:	697b      	ldr	r3, [r7, #20]
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	371c      	adds	r7, #28
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b4:	4770      	bx	lr
 800a7b6:	bf00      	nop
 800a7b8:	40023800 	.word	0x40023800
 800a7bc:	00f42400 	.word	0x00f42400
 800a7c0:	017d7840 	.word	0x017d7840
 800a7c4:	00bb8000 	.word	0x00bb8000

0800a7c8 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b088      	sub	sp, #32
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800a7d8:	2300      	movs	r3, #0
 800a7da:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d101      	bne.n	800a7e6 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	e156      	b.n	800aa94 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800a7ec:	b2db      	uxtb	r3, r3
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d106      	bne.n	800a800 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	f7fa fa04 	bl	8004c08 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2202      	movs	r2, #2
 800a804:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f000 fa85 	bl	800ad18 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	68db      	ldr	r3, [r3, #12]
 800a812:	2b02      	cmp	r3, #2
 800a814:	d00c      	beq.n	800a830 <HAL_SAI_Init+0x68>
 800a816:	2b02      	cmp	r3, #2
 800a818:	d80d      	bhi.n	800a836 <HAL_SAI_Init+0x6e>
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d002      	beq.n	800a824 <HAL_SAI_Init+0x5c>
 800a81e:	2b01      	cmp	r3, #1
 800a820:	d003      	beq.n	800a82a <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800a822:	e008      	b.n	800a836 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800a824:	2300      	movs	r3, #0
 800a826:	61fb      	str	r3, [r7, #28]
      break;
 800a828:	e006      	b.n	800a838 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800a82a:	2310      	movs	r3, #16
 800a82c:	61fb      	str	r3, [r7, #28]
      break;
 800a82e:	e003      	b.n	800a838 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800a830:	2320      	movs	r3, #32
 800a832:	61fb      	str	r3, [r7, #28]
      break;
 800a834:	e000      	b.n	800a838 <HAL_SAI_Init+0x70>
      break;
 800a836:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	689b      	ldr	r3, [r3, #8]
 800a83c:	2b03      	cmp	r3, #3
 800a83e:	d81e      	bhi.n	800a87e <HAL_SAI_Init+0xb6>
 800a840:	a201      	add	r2, pc, #4	; (adr r2, 800a848 <HAL_SAI_Init+0x80>)
 800a842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a846:	bf00      	nop
 800a848:	0800a859 	.word	0x0800a859
 800a84c:	0800a85f 	.word	0x0800a85f
 800a850:	0800a867 	.word	0x0800a867
 800a854:	0800a86f 	.word	0x0800a86f
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800a858:	2300      	movs	r3, #0
 800a85a:	617b      	str	r3, [r7, #20]
    }
    break;
 800a85c:	e010      	b.n	800a880 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800a85e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a862:	617b      	str	r3, [r7, #20]
    }
    break;
 800a864:	e00c      	b.n	800a880 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a866:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a86a:	617b      	str	r3, [r7, #20]
    }
    break;
 800a86c:	e008      	b.n	800a880 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a86e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a872:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800a874:	69fb      	ldr	r3, [r7, #28]
 800a876:	f043 0301 	orr.w	r3, r3, #1
 800a87a:	61fb      	str	r3, [r7, #28]
    }
    break;
 800a87c:	e000      	b.n	800a880 <HAL_SAI_Init+0xb8>
    default:
      break;
 800a87e:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	4a85      	ldr	r2, [pc, #532]	; (800aa9c <HAL_SAI_Init+0x2d4>)
 800a886:	4293      	cmp	r3, r2
 800a888:	d004      	beq.n	800a894 <HAL_SAI_Init+0xcc>
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	4a84      	ldr	r2, [pc, #528]	; (800aaa0 <HAL_SAI_Init+0x2d8>)
 800a890:	4293      	cmp	r3, r2
 800a892:	d103      	bne.n	800a89c <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800a894:	4a83      	ldr	r2, [pc, #524]	; (800aaa4 <HAL_SAI_Init+0x2dc>)
 800a896:	69fb      	ldr	r3, [r7, #28]
 800a898:	6013      	str	r3, [r2, #0]
 800a89a:	e002      	b.n	800a8a2 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800a89c:	4a82      	ldr	r2, [pc, #520]	; (800aaa8 <HAL_SAI_Init+0x2e0>)
 800a89e:	69fb      	ldr	r3, [r7, #28]
 800a8a0:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	69db      	ldr	r3, [r3, #28]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d04c      	beq.n	800a944 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	4a7a      	ldr	r2, [pc, #488]	; (800aa9c <HAL_SAI_Init+0x2d4>)
 800a8b4:	4293      	cmp	r3, r2
 800a8b6:	d004      	beq.n	800a8c2 <HAL_SAI_Init+0xfa>
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	4a78      	ldr	r2, [pc, #480]	; (800aaa0 <HAL_SAI_Init+0x2d8>)
 800a8be:	4293      	cmp	r3, r2
 800a8c0:	d104      	bne.n	800a8cc <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800a8c2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800a8c6:	f7ff fe3b 	bl	800a540 <HAL_RCCEx_GetPeriphCLKFreq>
 800a8ca:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	4a76      	ldr	r2, [pc, #472]	; (800aaac <HAL_SAI_Init+0x2e4>)
 800a8d2:	4293      	cmp	r3, r2
 800a8d4:	d004      	beq.n	800a8e0 <HAL_SAI_Init+0x118>
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	4a75      	ldr	r2, [pc, #468]	; (800aab0 <HAL_SAI_Init+0x2e8>)
 800a8dc:	4293      	cmp	r3, r2
 800a8de:	d104      	bne.n	800a8ea <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800a8e0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800a8e4:	f7ff fe2c 	bl	800a540 <HAL_RCCEx_GetPeriphCLKFreq>
 800a8e8:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800a8ea:	693a      	ldr	r2, [r7, #16]
 800a8ec:	4613      	mov	r3, r2
 800a8ee:	009b      	lsls	r3, r3, #2
 800a8f0:	4413      	add	r3, r2
 800a8f2:	005b      	lsls	r3, r3, #1
 800a8f4:	461a      	mov	r2, r3
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	69db      	ldr	r3, [r3, #28]
 800a8fa:	025b      	lsls	r3, r3, #9
 800a8fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a900:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	4a6b      	ldr	r2, [pc, #428]	; (800aab4 <HAL_SAI_Init+0x2ec>)
 800a906:	fba2 2303 	umull	r2, r3, r2, r3
 800a90a:	08da      	lsrs	r2, r3, #3
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800a910:	68f9      	ldr	r1, [r7, #12]
 800a912:	4b68      	ldr	r3, [pc, #416]	; (800aab4 <HAL_SAI_Init+0x2ec>)
 800a914:	fba3 2301 	umull	r2, r3, r3, r1
 800a918:	08da      	lsrs	r2, r3, #3
 800a91a:	4613      	mov	r3, r2
 800a91c:	009b      	lsls	r3, r3, #2
 800a91e:	4413      	add	r3, r2
 800a920:	005b      	lsls	r3, r3, #1
 800a922:	1aca      	subs	r2, r1, r3
 800a924:	2a08      	cmp	r2, #8
 800a926:	d904      	bls.n	800a932 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	6a1b      	ldr	r3, [r3, #32]
 800a92c:	1c5a      	adds	r2, r3, #1
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a936:	2b04      	cmp	r3, #4
 800a938:	d104      	bne.n	800a944 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6a1b      	ldr	r3, [r3, #32]
 800a93e:	085a      	lsrs	r2, r3, #1
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	685b      	ldr	r3, [r3, #4]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d003      	beq.n	800a954 <HAL_SAI_Init+0x18c>
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	685b      	ldr	r3, [r3, #4]
 800a950:	2b02      	cmp	r3, #2
 800a952:	d109      	bne.n	800a968 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a958:	2b01      	cmp	r3, #1
 800a95a:	d101      	bne.n	800a960 <HAL_SAI_Init+0x198>
 800a95c:	2300      	movs	r3, #0
 800a95e:	e001      	b.n	800a964 <HAL_SAI_Init+0x19c>
 800a960:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a964:	61bb      	str	r3, [r7, #24]
 800a966:	e008      	b.n	800a97a <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a96c:	2b01      	cmp	r3, #1
 800a96e:	d102      	bne.n	800a976 <HAL_SAI_Init+0x1ae>
 800a970:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a974:	e000      	b.n	800a978 <HAL_SAI_Init+0x1b0>
 800a976:	2300      	movs	r3, #0
 800a978:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	6819      	ldr	r1, [r3, #0]
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681a      	ldr	r2, [r3, #0]
 800a984:	4b4c      	ldr	r3, [pc, #304]	; (800aab8 <HAL_SAI_Init+0x2f0>)
 800a986:	400b      	ands	r3, r1
 800a988:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	6819      	ldr	r1, [r3, #0]
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	685a      	ldr	r2, [r3, #4]
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a998:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a99e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9a4:	431a      	orrs	r2, r3
 800a9a6:	69bb      	ldr	r3, [r7, #24]
 800a9a8:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800a9aa:	697b      	ldr	r3, [r7, #20]
 800a9ac:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 800a9b2:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	691b      	ldr	r3, [r3, #16]
 800a9b8:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a9be:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	6a1b      	ldr	r3, [r3, #32]
 800a9c4:	051b      	lsls	r3, r3, #20
 800a9c6:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	430a      	orrs	r2, r1
 800a9ce:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	6859      	ldr	r1, [r3, #4]
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681a      	ldr	r2, [r3, #0]
 800a9da:	4b38      	ldr	r3, [pc, #224]	; (800aabc <HAL_SAI_Init+0x2f4>)
 800a9dc:	400b      	ands	r3, r1
 800a9de:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	6859      	ldr	r1, [r3, #4]
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	699a      	ldr	r2, [r3, #24]
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9ee:	431a      	orrs	r2, r3
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9f4:	431a      	orrs	r2, r3
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	430a      	orrs	r2, r1
 800a9fc:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	6899      	ldr	r1, [r3, #8]
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681a      	ldr	r2, [r3, #0]
 800aa08:	4b2d      	ldr	r3, [pc, #180]	; (800aac0 <HAL_SAI_Init+0x2f8>)
 800aa0a:	400b      	ands	r3, r1
 800aa0c:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	6899      	ldr	r1, [r3, #8]
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa18:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800aa1e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 800aa24:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 800aa2a:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa30:	3b01      	subs	r3, #1
 800aa32:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800aa34:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	430a      	orrs	r2, r1
 800aa3c:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	68d9      	ldr	r1, [r3, #12]
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681a      	ldr	r2, [r3, #0]
 800aa48:	f24f 0320 	movw	r3, #61472	; 0xf020
 800aa4c:	400b      	ands	r3, r1
 800aa4e:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	68d9      	ldr	r1, [r3, #12]
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa5e:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aa64:	041b      	lsls	r3, r3, #16
 800aa66:	431a      	orrs	r2, r3
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa6c:	3b01      	subs	r3, #1
 800aa6e:	021b      	lsls	r3, r3, #8
 800aa70:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	430a      	orrs	r2, r1
 800aa78:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	2201      	movs	r2, #1
 800aa86:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800aa92:	2300      	movs	r3, #0
}
 800aa94:	4618      	mov	r0, r3
 800aa96:	3720      	adds	r7, #32
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	bd80      	pop	{r7, pc}
 800aa9c:	40015804 	.word	0x40015804
 800aaa0:	40015824 	.word	0x40015824
 800aaa4:	40015800 	.word	0x40015800
 800aaa8:	40015c00 	.word	0x40015c00
 800aaac:	40015c04 	.word	0x40015c04
 800aab0:	40015c24 	.word	0x40015c24
 800aab4:	cccccccd 	.word	0xcccccccd
 800aab8:	ff05c010 	.word	0xff05c010
 800aabc:	ffff1ff0 	.word	0xffff1ff0
 800aac0:	fff88000 	.word	0xfff88000

0800aac4 <HAL_SAI_DeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DeInit(SAI_HandleTypeDef *hsai)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b082      	sub	sp, #8
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d101      	bne.n	800aad6 <HAL_SAI_DeInit+0x12>
  {
    return HAL_ERROR;
 800aad2:	2301      	movs	r3, #1
 800aad4:	e027      	b.n	800ab26 <HAL_SAI_DeInit+0x62>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	2202      	movs	r2, #2
 800aada:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	2200      	movs	r2, #0
 800aae4:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	f04f 32ff 	mov.w	r2, #4294967295
 800aaee:	619a      	str	r2, [r3, #24]

  /* Disable the SAI */
  SAI_Disable(hsai);
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	f000 f911 	bl	800ad18 <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	685a      	ldr	r2, [r3, #4]
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	f042 0208 	orr.w	r2, r2, #8
 800ab04:	605a      	str	r2, [r3, #4]
  {
    hsai->MspDeInitCallback = HAL_SAI_MspDeInit;
  }
  hsai->MspDeInitCallback(hsai);
#else
  HAL_SAI_MspDeInit(hsai);
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	f7fa f95c 	bl	8004dc4 <HAL_SAI_MspDeInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2200      	movs	r2, #0
 800ab10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_RESET;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2200      	movs	r2, #0
 800ab18:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2200      	movs	r2, #0
 800ab20:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800ab24:	2300      	movs	r3, #0
}
 800ab26:	4618      	mov	r0, r3
 800ab28:	3708      	adds	r7, #8
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	bd80      	pop	{r7, pc}
	...

0800ab30 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b086      	sub	sp, #24
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	60f8      	str	r0, [r7, #12]
 800ab38:	60b9      	str	r1, [r7, #8]
 800ab3a:	4613      	mov	r3, r2
 800ab3c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800ab3e:	f7fb ff39 	bl	80069b4 <HAL_GetTick>
 800ab42:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d002      	beq.n	800ab50 <HAL_SAI_Transmit_DMA+0x20>
 800ab4a:	88fb      	ldrh	r3, [r7, #6]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d101      	bne.n	800ab54 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800ab50:	2301      	movs	r3, #1
 800ab52:	e093      	b.n	800ac7c <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800ab5a:	b2db      	uxtb	r3, r3
 800ab5c:	2b01      	cmp	r3, #1
 800ab5e:	f040 808c 	bne.w	800ac7a <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ab68:	2b01      	cmp	r3, #1
 800ab6a:	d101      	bne.n	800ab70 <HAL_SAI_Transmit_DMA+0x40>
 800ab6c:	2302      	movs	r3, #2
 800ab6e:	e085      	b.n	800ac7c <HAL_SAI_Transmit_DMA+0x14c>
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	2201      	movs	r2, #1
 800ab74:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	68ba      	ldr	r2, [r7, #8]
 800ab7c:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	88fa      	ldrh	r2, [r7, #6]
 800ab82:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	88fa      	ldrh	r2, [r7, #6]
 800ab8a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	2200      	movs	r2, #0
 800ab92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	2212      	movs	r2, #18
 800ab9a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aba2:	4a38      	ldr	r2, [pc, #224]	; (800ac84 <HAL_SAI_Transmit_DMA+0x154>)
 800aba4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abaa:	4a37      	ldr	r2, [pc, #220]	; (800ac88 <HAL_SAI_Transmit_DMA+0x158>)
 800abac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abb2:	4a36      	ldr	r2, [pc, #216]	; (800ac8c <HAL_SAI_Transmit_DMA+0x15c>)
 800abb4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abba:	2200      	movs	r2, #0
 800abbc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800abc6:	4619      	mov	r1, r3
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	331c      	adds	r3, #28
 800abce:	461a      	mov	r2, r3
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800abd6:	f7fc f90b 	bl	8006df0 <HAL_DMA_Start_IT>
 800abda:	4603      	mov	r3, r0
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d005      	beq.n	800abec <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	2200      	movs	r2, #0
 800abe4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 800abe8:	2301      	movs	r3, #1
 800abea:	e047      	b.n	800ac7c <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800abec:	2100      	movs	r1, #0
 800abee:	68f8      	ldr	r0, [r7, #12]
 800abf0:	f000 f85c 	bl	800acac <SAI_InterruptFlag>
 800abf4:	4601      	mov	r1, r0
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	691a      	ldr	r2, [r3, #16]
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	430a      	orrs	r2, r1
 800ac02:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	681a      	ldr	r2, [r3, #0]
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800ac12:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800ac14:	e015      	b.n	800ac42 <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800ac16:	f7fb fecd 	bl	80069b4 <HAL_GetTick>
 800ac1a:	4602      	mov	r2, r0
 800ac1c:	697b      	ldr	r3, [r7, #20]
 800ac1e:	1ad3      	subs	r3, r2, r3
 800ac20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ac24:	d90d      	bls.n	800ac42 <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ac2c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	2200      	movs	r2, #0
 800ac3a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800ac3e:	2303      	movs	r3, #3
 800ac40:	e01c      	b.n	800ac7c <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	695b      	ldr	r3, [r3, #20]
 800ac48:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d0e2      	beq.n	800ac16 <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d107      	bne.n	800ac6e <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	681a      	ldr	r2, [r3, #0]
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800ac6c:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	2200      	movs	r2, #0
 800ac72:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800ac76:	2300      	movs	r3, #0
 800ac78:	e000      	b.n	800ac7c <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 800ac7a:	2302      	movs	r3, #2
  }
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	3718      	adds	r7, #24
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd80      	pop	{r7, pc}
 800ac84:	0800ade9 	.word	0x0800ade9
 800ac88:	0800ad89 	.word	0x0800ad89
 800ac8c:	0800ae05 	.word	0x0800ae05

0800ac90 <HAL_SAI_GetState>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL state
  */
HAL_SAI_StateTypeDef HAL_SAI_GetState(const SAI_HandleTypeDef *hsai)
{
 800ac90:	b480      	push	{r7}
 800ac92:	b083      	sub	sp, #12
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
  return hsai->State;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800ac9e:	b2db      	uxtb	r3, r3
}
 800aca0:	4618      	mov	r0, r3
 800aca2:	370c      	adds	r7, #12
 800aca4:	46bd      	mov	sp, r7
 800aca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acaa:	4770      	bx	lr

0800acac <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, uint32_t mode)
{
 800acac:	b480      	push	{r7}
 800acae:	b085      	sub	sp, #20
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
 800acb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800acb6:	2301      	movs	r3, #1
 800acb8:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	2b01      	cmp	r3, #1
 800acbe:	d103      	bne.n	800acc8 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	f043 0308 	orr.w	r3, r3, #8
 800acc6:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800accc:	2b08      	cmp	r3, #8
 800acce:	d10b      	bne.n	800ace8 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800acd4:	2b03      	cmp	r3, #3
 800acd6:	d003      	beq.n	800ace0 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	685b      	ldr	r3, [r3, #4]
 800acdc:	2b01      	cmp	r3, #1
 800acde:	d103      	bne.n	800ace8 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	f043 0310 	orr.w	r3, r3, #16
 800ace6:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	685b      	ldr	r3, [r3, #4]
 800acec:	2b03      	cmp	r3, #3
 800acee:	d003      	beq.n	800acf8 <SAI_InterruptFlag+0x4c>
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	685b      	ldr	r3, [r3, #4]
 800acf4:	2b02      	cmp	r3, #2
 800acf6:	d104      	bne.n	800ad02 <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800acfe:	60fb      	str	r3, [r7, #12]
 800ad00:	e003      	b.n	800ad0a <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	f043 0304 	orr.w	r3, r3, #4
 800ad08:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
}
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	3714      	adds	r7, #20
 800ad10:	46bd      	mov	sp, r7
 800ad12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad16:	4770      	bx	lr

0800ad18 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800ad18:	b480      	push	{r7}
 800ad1a:	b085      	sub	sp, #20
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800ad20:	4b17      	ldr	r3, [pc, #92]	; (800ad80 <SAI_Disable+0x68>)
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	4a17      	ldr	r2, [pc, #92]	; (800ad84 <SAI_Disable+0x6c>)
 800ad26:	fba2 2303 	umull	r2, r3, r2, r3
 800ad2a:	0b1b      	lsrs	r3, r3, #12
 800ad2c:	009b      	lsls	r3, r3, #2
 800ad2e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800ad30:	2300      	movs	r3, #0
 800ad32:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	681a      	ldr	r2, [r3, #0]
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800ad42:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	1e5a      	subs	r2, r3, #1
 800ad48:	60fa      	str	r2, [r7, #12]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d10a      	bne.n	800ad64 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ad54:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800ad5e:	2303      	movs	r3, #3
 800ad60:	72fb      	strb	r3, [r7, #11]
      break;
 800ad62:	e006      	b.n	800ad72 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d1e8      	bne.n	800ad44 <SAI_Disable+0x2c>

  return status;
 800ad72:	7afb      	ldrb	r3, [r7, #11]
}
 800ad74:	4618      	mov	r0, r3
 800ad76:	3714      	adds	r7, #20
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7e:	4770      	bx	lr
 800ad80:	20000044 	.word	0x20000044
 800ad84:	95cbec1b 	.word	0x95cbec1b

0800ad88 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b084      	sub	sp, #16
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad94:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	69db      	ldr	r3, [r3, #28]
 800ad9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad9e:	d01c      	beq.n	800adda <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	2200      	movs	r2, #0
 800ada4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	681a      	ldr	r2, [r3, #0]
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800adb6:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800adb8:	2100      	movs	r1, #0
 800adba:	68f8      	ldr	r0, [r7, #12]
 800adbc:	f7ff ff76 	bl	800acac <SAI_InterruptFlag>
 800adc0:	4603      	mov	r3, r0
 800adc2:	43d9      	mvns	r1, r3
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	691a      	ldr	r2, [r3, #16]
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	400a      	ands	r2, r1
 800add0:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	2201      	movs	r2, #1
 800add6:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800adda:	68f8      	ldr	r0, [r7, #12]
 800addc:	f7f7 fd66 	bl	80028ac <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800ade0:	bf00      	nop
 800ade2:	3710      	adds	r7, #16
 800ade4:	46bd      	mov	sp, r7
 800ade6:	bd80      	pop	{r7, pc}

0800ade8 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b084      	sub	sp, #16
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adf4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800adf6:	68f8      	ldr	r0, [r7, #12]
 800adf8:	f7f7 fd62 	bl	80028c0 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800adfc:	bf00      	nop
 800adfe:	3710      	adds	r7, #16
 800ae00:	46bd      	mov	sp, r7
 800ae02:	bd80      	pop	{r7, pc}

0800ae04 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b084      	sub	sp, #16
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae10:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ae18:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae28:	2b01      	cmp	r3, #1
 800ae2a:	d004      	beq.n	800ae36 <SAI_DMAError+0x32>
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae32:	2b01      	cmp	r3, #1
 800ae34:	d112      	bne.n	800ae5c <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	681a      	ldr	r2, [r3, #0]
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800ae44:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800ae46:	68f8      	ldr	r0, [r7, #12]
 800ae48:	f7ff ff66 	bl	800ad18 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	2201      	movs	r2, #1
 800ae50:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	2200      	movs	r2, #0
 800ae58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800ae5c:	68f8      	ldr	r0, [r7, #12]
 800ae5e:	f7f7 fd39 	bl	80028d4 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800ae62:	bf00      	nop
 800ae64:	3710      	adds	r7, #16
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}

0800ae6a <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800ae6a:	b580      	push	{r7, lr}
 800ae6c:	b082      	sub	sp, #8
 800ae6e:	af00      	add	r7, sp, #0
 800ae70:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d101      	bne.n	800ae7c <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800ae78:	2301      	movs	r3, #1
 800ae7a:	e022      	b.n	800aec2 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ae82:	b2db      	uxtb	r3, r3
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d105      	bne.n	800ae94 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800ae8e:	6878      	ldr	r0, [r7, #4]
 800ae90:	f7f9 fca2 	bl	80047d8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2203      	movs	r2, #3
 800ae98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800ae9c:	6878      	ldr	r0, [r7, #4]
 800ae9e:	f000 f815 	bl	800aecc <HAL_SD_InitCard>
 800aea2:	4603      	mov	r3, r0
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d001      	beq.n	800aeac <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800aea8:	2301      	movs	r3, #1
 800aeaa:	e00a      	b.n	800aec2 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2200      	movs	r2, #0
 800aeb0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2201      	movs	r2, #1
 800aebc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800aec0:	2300      	movs	r3, #0
}
 800aec2:	4618      	mov	r0, r3
 800aec4:	3708      	adds	r7, #8
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bd80      	pop	{r7, pc}
	...

0800aecc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800aecc:	b5b0      	push	{r4, r5, r7, lr}
 800aece:	b08e      	sub	sp, #56	; 0x38
 800aed0:	af04      	add	r7, sp, #16
 800aed2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800aed4:	2300      	movs	r3, #0
 800aed6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800aed8:	2300      	movs	r3, #0
 800aeda:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800aedc:	2300      	movs	r3, #0
 800aede:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800aee0:	2300      	movs	r3, #0
 800aee2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800aee4:	2300      	movs	r3, #0
 800aee6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800aee8:	2376      	movs	r3, #118	; 0x76
 800aeea:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681d      	ldr	r5, [r3, #0]
 800aef0:	466c      	mov	r4, sp
 800aef2:	f107 0314 	add.w	r3, r7, #20
 800aef6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800aefa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800aefe:	f107 0308 	add.w	r3, r7, #8
 800af02:	cb0e      	ldmia	r3, {r1, r2, r3}
 800af04:	4628      	mov	r0, r5
 800af06:	f002 f99d 	bl	800d244 <SDMMC_Init>
 800af0a:	4603      	mov	r3, r0
 800af0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800af10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af14:	2b00      	cmp	r3, #0
 800af16:	d001      	beq.n	800af1c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800af18:	2301      	movs	r3, #1
 800af1a:	e059      	b.n	800afd0 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	685a      	ldr	r2, [r3, #4]
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800af2a:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	4618      	mov	r0, r3
 800af32:	f002 f9d1 	bl	800d2d8 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	685a      	ldr	r2, [r3, #4]
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800af44:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800af46:	2002      	movs	r0, #2
 800af48:	f7fb fd40 	bl	80069cc <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800af4c:	6878      	ldr	r0, [r7, #4]
 800af4e:	f000 ff59 	bl	800be04 <SD_PowerON>
 800af52:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800af54:	6a3b      	ldr	r3, [r7, #32]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d00b      	beq.n	800af72 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2201      	movs	r2, #1
 800af5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af66:	6a3b      	ldr	r3, [r7, #32]
 800af68:	431a      	orrs	r2, r3
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800af6e:	2301      	movs	r3, #1
 800af70:	e02e      	b.n	800afd0 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f000 fe78 	bl	800bc68 <SD_InitCard>
 800af78:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800af7a:	6a3b      	ldr	r3, [r7, #32]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d00b      	beq.n	800af98 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2201      	movs	r2, #1
 800af84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af8c:	6a3b      	ldr	r3, [r7, #32]
 800af8e:	431a      	orrs	r2, r3
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800af94:	2301      	movs	r3, #1
 800af96:	e01b      	b.n	800afd0 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800afa0:	4618      	mov	r0, r3
 800afa2:	f002 fa2b 	bl	800d3fc <SDMMC_CmdBlockLength>
 800afa6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800afa8:	6a3b      	ldr	r3, [r7, #32]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d00f      	beq.n	800afce <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	4a09      	ldr	r2, [pc, #36]	; (800afd8 <HAL_SD_InitCard+0x10c>)
 800afb4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800afba:	6a3b      	ldr	r3, [r7, #32]
 800afbc:	431a      	orrs	r2, r3
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	2201      	movs	r2, #1
 800afc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800afca:	2301      	movs	r3, #1
 800afcc:	e000      	b.n	800afd0 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 800afce:	2300      	movs	r3, #0
}
 800afd0:	4618      	mov	r0, r3
 800afd2:	3728      	adds	r7, #40	; 0x28
 800afd4:	46bd      	mov	sp, r7
 800afd6:	bdb0      	pop	{r4, r5, r7, pc}
 800afd8:	004005ff 	.word	0x004005ff

0800afdc <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b08c      	sub	sp, #48	; 0x30
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	60f8      	str	r0, [r7, #12]
 800afe4:	60b9      	str	r1, [r7, #8]
 800afe6:	607a      	str	r2, [r7, #4]
 800afe8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800afee:	68bb      	ldr	r3, [r7, #8]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d107      	bne.n	800b004 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aff8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b000:	2301      	movs	r3, #1
 800b002:	e0c3      	b.n	800b18c <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b00a:	b2db      	uxtb	r3, r3
 800b00c:	2b01      	cmp	r3, #1
 800b00e:	f040 80bc 	bne.w	800b18a <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	2200      	movs	r2, #0
 800b016:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b018:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	441a      	add	r2, r3
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b022:	429a      	cmp	r2, r3
 800b024:	d907      	bls.n	800b036 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b02a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800b032:	2301      	movs	r3, #1
 800b034:	e0aa      	b.n	800b18c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	2203      	movs	r2, #3
 800b03a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	2200      	movs	r2, #0
 800b044:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800b054:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b05a:	4a4e      	ldr	r2, [pc, #312]	; (800b194 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800b05c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b062:	4a4d      	ldr	r2, [pc, #308]	; (800b198 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800b064:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b06a:	2200      	movs	r2, #0
 800b06c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b072:	2200      	movs	r2, #0
 800b074:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b086:	689a      	ldr	r2, [r3, #8]
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	430a      	orrs	r2, r1
 800b090:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	3380      	adds	r3, #128	; 0x80
 800b09c:	4619      	mov	r1, r3
 800b09e:	68ba      	ldr	r2, [r7, #8]
 800b0a0:	683b      	ldr	r3, [r7, #0]
 800b0a2:	025b      	lsls	r3, r3, #9
 800b0a4:	089b      	lsrs	r3, r3, #2
 800b0a6:	f7fb fea3 	bl	8006df0 <HAL_DMA_Start_IT>
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d017      	beq.n	800b0e0 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800b0be:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	4a35      	ldr	r2, [pc, #212]	; (800b19c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800b0c6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0cc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	2201      	movs	r2, #1
 800b0d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800b0dc:	2301      	movs	r3, #1
 800b0de:	e055      	b.n	800b18c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	f042 0208 	orr.w	r2, r2, #8
 800b0ee:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0f4:	2b01      	cmp	r3, #1
 800b0f6:	d002      	beq.n	800b0fe <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800b0f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0fa:	025b      	lsls	r3, r3, #9
 800b0fc:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b0fe:	f04f 33ff 	mov.w	r3, #4294967295
 800b102:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	025b      	lsls	r3, r3, #9
 800b108:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800b10a:	2390      	movs	r3, #144	; 0x90
 800b10c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b10e:	2302      	movs	r3, #2
 800b110:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b112:	2300      	movs	r3, #0
 800b114:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800b116:	2301      	movs	r3, #1
 800b118:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	f107 0210 	add.w	r2, r7, #16
 800b122:	4611      	mov	r1, r2
 800b124:	4618      	mov	r0, r3
 800b126:	f002 f93d 	bl	800d3a4 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	2b01      	cmp	r3, #1
 800b12e:	d90a      	bls.n	800b146 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	2282      	movs	r2, #130	; 0x82
 800b134:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b13c:	4618      	mov	r0, r3
 800b13e:	f002 f9a1 	bl	800d484 <SDMMC_CmdReadMultiBlock>
 800b142:	62f8      	str	r0, [r7, #44]	; 0x2c
 800b144:	e009      	b.n	800b15a <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	2281      	movs	r2, #129	; 0x81
 800b14a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b152:	4618      	mov	r0, r3
 800b154:	f002 f974 	bl	800d440 <SDMMC_CmdReadSingleBlock>
 800b158:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800b15a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d012      	beq.n	800b186 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	4a0d      	ldr	r2, [pc, #52]	; (800b19c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800b166:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b16c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b16e:	431a      	orrs	r2, r3
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	2201      	movs	r2, #1
 800b178:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	2200      	movs	r2, #0
 800b180:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800b182:	2301      	movs	r3, #1
 800b184:	e002      	b.n	800b18c <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800b186:	2300      	movs	r3, #0
 800b188:	e000      	b.n	800b18c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800b18a:	2302      	movs	r3, #2
  }
}
 800b18c:	4618      	mov	r0, r3
 800b18e:	3730      	adds	r7, #48	; 0x30
 800b190:	46bd      	mov	sp, r7
 800b192:	bd80      	pop	{r7, pc}
 800b194:	0800ba77 	.word	0x0800ba77
 800b198:	0800bae9 	.word	0x0800bae9
 800b19c:	004005ff 	.word	0x004005ff

0800b1a0 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b08c      	sub	sp, #48	; 0x30
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	60f8      	str	r0, [r7, #12]
 800b1a8:	60b9      	str	r1, [r7, #8]
 800b1aa:	607a      	str	r2, [r7, #4]
 800b1ac:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d107      	bne.n	800b1c8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1bc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b1c4:	2301      	movs	r3, #1
 800b1c6:	e0c6      	b.n	800b356 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b1ce:	b2db      	uxtb	r3, r3
 800b1d0:	2b01      	cmp	r3, #1
 800b1d2:	f040 80bf 	bne.w	800b354 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	2200      	movs	r2, #0
 800b1da:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b1dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	441a      	add	r2, r3
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b1e6:	429a      	cmp	r2, r3
 800b1e8:	d907      	bls.n	800b1fa <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1ee:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	e0ad      	b.n	800b356 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	2203      	movs	r2, #3
 800b1fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	2200      	movs	r2, #0
 800b208:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	f042 021a 	orr.w	r2, r2, #26
 800b218:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b21e:	4a50      	ldr	r2, [pc, #320]	; (800b360 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800b220:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b226:	4a4f      	ldr	r2, [pc, #316]	; (800b364 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800b228:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b22e:	2200      	movs	r2, #0
 800b230:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b236:	2b01      	cmp	r3, #1
 800b238:	d002      	beq.n	800b240 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800b23a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b23c:	025b      	lsls	r3, r3, #9
 800b23e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	2b01      	cmp	r3, #1
 800b244:	d90a      	bls.n	800b25c <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	22a0      	movs	r2, #160	; 0xa0
 800b24a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b252:	4618      	mov	r0, r3
 800b254:	f002 f95a 	bl	800d50c <SDMMC_CmdWriteMultiBlock>
 800b258:	62f8      	str	r0, [r7, #44]	; 0x2c
 800b25a:	e009      	b.n	800b270 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	2290      	movs	r2, #144	; 0x90
 800b260:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b268:	4618      	mov	r0, r3
 800b26a:	f002 f92d 	bl	800d4c8 <SDMMC_CmdWriteSingleBlock>
 800b26e:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800b270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b272:	2b00      	cmp	r3, #0
 800b274:	d012      	beq.n	800b29c <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	4a3b      	ldr	r2, [pc, #236]	; (800b368 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800b27c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b284:	431a      	orrs	r2, r3
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	2201      	movs	r2, #1
 800b28e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	2200      	movs	r2, #0
 800b296:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b298:	2301      	movs	r3, #1
 800b29a:	e05c      	b.n	800b356 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	f042 0208 	orr.w	r2, r2, #8
 800b2aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2b0:	2240      	movs	r2, #64	; 0x40
 800b2b2:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2c4:	689a      	ldr	r2, [r3, #8]
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	430a      	orrs	r2, r1
 800b2ce:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b2d4:	68b9      	ldr	r1, [r7, #8]
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	3380      	adds	r3, #128	; 0x80
 800b2dc:	461a      	mov	r2, r3
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	025b      	lsls	r3, r3, #9
 800b2e2:	089b      	lsrs	r3, r3, #2
 800b2e4:	f7fb fd84 	bl	8006df0 <HAL_DMA_Start_IT>
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d01a      	beq.n	800b324 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	f022 021a 	bic.w	r2, r2, #26
 800b2fc:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	4a19      	ldr	r2, [pc, #100]	; (800b368 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800b304:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b30a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	2201      	movs	r2, #1
 800b316:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	2200      	movs	r2, #0
 800b31e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b320:	2301      	movs	r3, #1
 800b322:	e018      	b.n	800b356 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b324:	f04f 33ff 	mov.w	r3, #4294967295
 800b328:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	025b      	lsls	r3, r3, #9
 800b32e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800b330:	2390      	movs	r3, #144	; 0x90
 800b332:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800b334:	2300      	movs	r3, #0
 800b336:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b338:	2300      	movs	r3, #0
 800b33a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800b33c:	2301      	movs	r3, #1
 800b33e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	f107 0210 	add.w	r2, r7, #16
 800b348:	4611      	mov	r1, r2
 800b34a:	4618      	mov	r0, r3
 800b34c:	f002 f82a 	bl	800d3a4 <SDMMC_ConfigData>

      return HAL_OK;
 800b350:	2300      	movs	r3, #0
 800b352:	e000      	b.n	800b356 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800b354:	2302      	movs	r3, #2
  }
}
 800b356:	4618      	mov	r0, r3
 800b358:	3730      	adds	r7, #48	; 0x30
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bd80      	pop	{r7, pc}
 800b35e:	bf00      	nop
 800b360:	0800ba4d 	.word	0x0800ba4d
 800b364:	0800bae9 	.word	0x0800bae9
 800b368:	004005ff 	.word	0x004005ff

0800b36c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b084      	sub	sp, #16
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b378:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b380:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b384:	2b00      	cmp	r3, #0
 800b386:	d008      	beq.n	800b39a <HAL_SD_IRQHandler+0x2e>
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	f003 0308 	and.w	r3, r3, #8
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d003      	beq.n	800b39a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800b392:	6878      	ldr	r0, [r7, #4]
 800b394:	f000 fdec 	bl	800bf70 <SD_Read_IT>
 800b398:	e15a      	b.n	800b650 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	f000 808d 	beq.w	800b4c4 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b3b2:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681a      	ldr	r2, [r3, #0]
 800b3be:	4b9a      	ldr	r3, [pc, #616]	; (800b628 <HAL_SD_IRQHandler+0x2bc>)
 800b3c0:	400b      	ands	r3, r1
 800b3c2:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	f022 0201 	bic.w	r2, r2, #1
 800b3d2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	f003 0308 	and.w	r3, r3, #8
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d039      	beq.n	800b452 <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	f003 0302 	and.w	r3, r3, #2
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d104      	bne.n	800b3f2 <HAL_SD_IRQHandler+0x86>
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	f003 0320 	and.w	r3, r3, #32
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d011      	beq.n	800b416 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f002 f8aa 	bl	800d550 <SDMMC_CmdStopTransfer>
 800b3fc:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800b3fe:	68bb      	ldr	r3, [r7, #8]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d008      	beq.n	800b416 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b408:	68bb      	ldr	r3, [r7, #8]
 800b40a:	431a      	orrs	r2, r3
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800b410:	6878      	ldr	r0, [r7, #4]
 800b412:	f000 f921 	bl	800b658 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	f240 523a 	movw	r2, #1338	; 0x53a
 800b41e:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2201      	movs	r2, #1
 800b424:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2200      	movs	r2, #0
 800b42c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	f003 0301 	and.w	r3, r3, #1
 800b434:	2b00      	cmp	r3, #0
 800b436:	d104      	bne.n	800b442 <HAL_SD_IRQHandler+0xd6>
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	f003 0302 	and.w	r3, r3, #2
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d003      	beq.n	800b44a <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800b442:	6878      	ldr	r0, [r7, #4]
 800b444:	f002 fcc8 	bl	800ddd8 <HAL_SD_RxCpltCallback>
 800b448:	e102      	b.n	800b650 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f002 fcba 	bl	800ddc4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800b450:	e0fe      	b.n	800b650 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b458:	2b00      	cmp	r3, #0
 800b45a:	f000 80f9 	beq.w	800b650 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	f003 0320 	and.w	r3, r3, #32
 800b464:	2b00      	cmp	r3, #0
 800b466:	d011      	beq.n	800b48c <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	4618      	mov	r0, r3
 800b46e:	f002 f86f 	bl	800d550 <SDMMC_CmdStopTransfer>
 800b472:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800b474:	68bb      	ldr	r3, [r7, #8]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d008      	beq.n	800b48c <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b47e:	68bb      	ldr	r3, [r7, #8]
 800b480:	431a      	orrs	r2, r3
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800b486:	6878      	ldr	r0, [r7, #4]
 800b488:	f000 f8e6 	bl	800b658 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	f003 0301 	and.w	r3, r3, #1
 800b492:	2b00      	cmp	r3, #0
 800b494:	f040 80dc 	bne.w	800b650 <HAL_SD_IRQHandler+0x2e4>
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	f003 0302 	and.w	r3, r3, #2
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	f040 80d6 	bne.w	800b650 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	f022 0208 	bic.w	r2, r2, #8
 800b4b2:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2201      	movs	r2, #1
 800b4b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800b4bc:	6878      	ldr	r0, [r7, #4]
 800b4be:	f002 fc81 	bl	800ddc4 <HAL_SD_TxCpltCallback>
}
 800b4c2:	e0c5      	b.n	800b650 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d008      	beq.n	800b4e4 <HAL_SD_IRQHandler+0x178>
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	f003 0308 	and.w	r3, r3, #8
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d003      	beq.n	800b4e4 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 800b4dc:	6878      	ldr	r0, [r7, #4]
 800b4de:	f000 fd98 	bl	800c012 <SD_Write_IT>
 800b4e2:	e0b5      	b.n	800b650 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4ea:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	f000 80ae 	beq.w	800b650 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4fa:	f003 0302 	and.w	r3, r3, #2
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d005      	beq.n	800b50e <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b506:	f043 0202 	orr.w	r2, r3, #2
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b514:	f003 0308 	and.w	r3, r3, #8
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d005      	beq.n	800b528 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b520:	f043 0208 	orr.w	r2, r3, #8
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b52e:	f003 0320 	and.w	r3, r3, #32
 800b532:	2b00      	cmp	r3, #0
 800b534:	d005      	beq.n	800b542 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b53a:	f043 0220 	orr.w	r2, r3, #32
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b548:	f003 0310 	and.w	r3, r3, #16
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d005      	beq.n	800b55c <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b554:	f043 0210 	orr.w	r2, r3, #16
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	f240 523a 	movw	r2, #1338	; 0x53a
 800b564:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800b574:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	4618      	mov	r0, r3
 800b57c:	f001 ffe8 	bl	800d550 <SDMMC_CmdStopTransfer>
 800b580:	4602      	mov	r2, r0
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b586:	431a      	orrs	r2, r3
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	f003 0308 	and.w	r3, r3, #8
 800b592:	2b00      	cmp	r3, #0
 800b594:	d00a      	beq.n	800b5ac <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	2201      	movs	r2, #1
 800b59a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800b5a4:	6878      	ldr	r0, [r7, #4]
 800b5a6:	f000 f857 	bl	800b658 <HAL_SD_ErrorCallback>
}
 800b5aa:	e051      	b.n	800b650 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d04c      	beq.n	800b650 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	f003 0310 	and.w	r3, r3, #16
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d104      	bne.n	800b5ca <HAL_SD_IRQHandler+0x25e>
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	f003 0320 	and.w	r3, r3, #32
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d011      	beq.n	800b5ee <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5ce:	4a17      	ldr	r2, [pc, #92]	; (800b62c <HAL_SD_IRQHandler+0x2c0>)
 800b5d0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	f7fb fc6a 	bl	8006eb0 <HAL_DMA_Abort_IT>
 800b5dc:	4603      	mov	r3, r0
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d036      	beq.n	800b650 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	f000 fad0 	bl	800bb8c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800b5ec:	e030      	b.n	800b650 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	f003 0301 	and.w	r3, r3, #1
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d104      	bne.n	800b602 <HAL_SD_IRQHandler+0x296>
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	f003 0302 	and.w	r3, r3, #2
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d018      	beq.n	800b634 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b606:	4a0a      	ldr	r2, [pc, #40]	; (800b630 <HAL_SD_IRQHandler+0x2c4>)
 800b608:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b60e:	4618      	mov	r0, r3
 800b610:	f7fb fc4e 	bl	8006eb0 <HAL_DMA_Abort_IT>
 800b614:	4603      	mov	r3, r0
 800b616:	2b00      	cmp	r3, #0
 800b618:	d01a      	beq.n	800b650 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b61e:	4618      	mov	r0, r3
 800b620:	f000 faeb 	bl	800bbfa <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800b624:	e014      	b.n	800b650 <HAL_SD_IRQHandler+0x2e4>
 800b626:	bf00      	nop
 800b628:	ffff3ec5 	.word	0xffff3ec5
 800b62c:	0800bb8d 	.word	0x0800bb8d
 800b630:	0800bbfb 	.word	0x0800bbfb
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2200      	movs	r2, #0
 800b638:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	2201      	movs	r2, #1
 800b63e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2200      	movs	r2, #0
 800b646:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800b648:	6878      	ldr	r0, [r7, #4]
 800b64a:	f002 fbb1 	bl	800ddb0 <HAL_SD_AbortCallback>
}
 800b64e:	e7ff      	b.n	800b650 <HAL_SD_IRQHandler+0x2e4>
 800b650:	bf00      	nop
 800b652:	3710      	adds	r7, #16
 800b654:	46bd      	mov	sp, r7
 800b656:	bd80      	pop	{r7, pc}

0800b658 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800b658:	b480      	push	{r7}
 800b65a:	b083      	sub	sp, #12
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800b660:	bf00      	nop
 800b662:	370c      	adds	r7, #12
 800b664:	46bd      	mov	sp, r7
 800b666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66a:	4770      	bx	lr

0800b66c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800b66c:	b480      	push	{r7}
 800b66e:	b083      	sub	sp, #12
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
 800b674:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b67a:	0f9b      	lsrs	r3, r3, #30
 800b67c:	b2da      	uxtb	r2, r3
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b686:	0e9b      	lsrs	r3, r3, #26
 800b688:	b2db      	uxtb	r3, r3
 800b68a:	f003 030f 	and.w	r3, r3, #15
 800b68e:	b2da      	uxtb	r2, r3
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b698:	0e1b      	lsrs	r3, r3, #24
 800b69a:	b2db      	uxtb	r3, r3
 800b69c:	f003 0303 	and.w	r3, r3, #3
 800b6a0:	b2da      	uxtb	r2, r3
 800b6a2:	683b      	ldr	r3, [r7, #0]
 800b6a4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b6aa:	0c1b      	lsrs	r3, r3, #16
 800b6ac:	b2da      	uxtb	r2, r3
 800b6ae:	683b      	ldr	r3, [r7, #0]
 800b6b0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b6b6:	0a1b      	lsrs	r3, r3, #8
 800b6b8:	b2da      	uxtb	r2, r3
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b6c2:	b2da      	uxtb	r2, r3
 800b6c4:	683b      	ldr	r3, [r7, #0]
 800b6c6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b6cc:	0d1b      	lsrs	r3, r3, #20
 800b6ce:	b29a      	uxth	r2, r3
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b6d8:	0c1b      	lsrs	r3, r3, #16
 800b6da:	b2db      	uxtb	r3, r3
 800b6dc:	f003 030f 	and.w	r3, r3, #15
 800b6e0:	b2da      	uxtb	r2, r3
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b6ea:	0bdb      	lsrs	r3, r3, #15
 800b6ec:	b2db      	uxtb	r3, r3
 800b6ee:	f003 0301 	and.w	r3, r3, #1
 800b6f2:	b2da      	uxtb	r2, r3
 800b6f4:	683b      	ldr	r3, [r7, #0]
 800b6f6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b6fc:	0b9b      	lsrs	r3, r3, #14
 800b6fe:	b2db      	uxtb	r3, r3
 800b700:	f003 0301 	and.w	r3, r3, #1
 800b704:	b2da      	uxtb	r2, r3
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b70e:	0b5b      	lsrs	r3, r3, #13
 800b710:	b2db      	uxtb	r3, r3
 800b712:	f003 0301 	and.w	r3, r3, #1
 800b716:	b2da      	uxtb	r2, r3
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b720:	0b1b      	lsrs	r3, r3, #12
 800b722:	b2db      	uxtb	r3, r3
 800b724:	f003 0301 	and.w	r3, r3, #1
 800b728:	b2da      	uxtb	r2, r3
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	2200      	movs	r2, #0
 800b732:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d163      	bne.n	800b804 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b740:	009a      	lsls	r2, r3, #2
 800b742:	f640 73fc 	movw	r3, #4092	; 0xffc
 800b746:	4013      	ands	r3, r2
 800b748:	687a      	ldr	r2, [r7, #4]
 800b74a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800b74c:	0f92      	lsrs	r2, r2, #30
 800b74e:	431a      	orrs	r2, r3
 800b750:	683b      	ldr	r3, [r7, #0]
 800b752:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b758:	0edb      	lsrs	r3, r3, #27
 800b75a:	b2db      	uxtb	r3, r3
 800b75c:	f003 0307 	and.w	r3, r3, #7
 800b760:	b2da      	uxtb	r2, r3
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b76a:	0e1b      	lsrs	r3, r3, #24
 800b76c:	b2db      	uxtb	r3, r3
 800b76e:	f003 0307 	and.w	r3, r3, #7
 800b772:	b2da      	uxtb	r2, r3
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b77c:	0d5b      	lsrs	r3, r3, #21
 800b77e:	b2db      	uxtb	r3, r3
 800b780:	f003 0307 	and.w	r3, r3, #7
 800b784:	b2da      	uxtb	r2, r3
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b78e:	0c9b      	lsrs	r3, r3, #18
 800b790:	b2db      	uxtb	r3, r3
 800b792:	f003 0307 	and.w	r3, r3, #7
 800b796:	b2da      	uxtb	r2, r3
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b7a0:	0bdb      	lsrs	r3, r3, #15
 800b7a2:	b2db      	uxtb	r3, r3
 800b7a4:	f003 0307 	and.w	r3, r3, #7
 800b7a8:	b2da      	uxtb	r2, r3
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800b7ae:	683b      	ldr	r3, [r7, #0]
 800b7b0:	691b      	ldr	r3, [r3, #16]
 800b7b2:	1c5a      	adds	r2, r3, #1
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	7e1b      	ldrb	r3, [r3, #24]
 800b7bc:	b2db      	uxtb	r3, r3
 800b7be:	f003 0307 	and.w	r3, r3, #7
 800b7c2:	3302      	adds	r3, #2
 800b7c4:	2201      	movs	r2, #1
 800b7c6:	fa02 f303 	lsl.w	r3, r2, r3
 800b7ca:	687a      	ldr	r2, [r7, #4]
 800b7cc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800b7ce:	fb03 f202 	mul.w	r2, r3, r2
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	7a1b      	ldrb	r3, [r3, #8]
 800b7da:	b2db      	uxtb	r3, r3
 800b7dc:	f003 030f 	and.w	r3, r3, #15
 800b7e0:	2201      	movs	r2, #1
 800b7e2:	409a      	lsls	r2, r3
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7ec:	687a      	ldr	r2, [r7, #4]
 800b7ee:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800b7f0:	0a52      	lsrs	r2, r2, #9
 800b7f2:	fb03 f202 	mul.w	r2, r3, r2
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b800:	661a      	str	r2, [r3, #96]	; 0x60
 800b802:	e031      	b.n	800b868 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b808:	2b01      	cmp	r3, #1
 800b80a:	d11d      	bne.n	800b848 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b810:	041b      	lsls	r3, r3, #16
 800b812:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b81a:	0c1b      	lsrs	r3, r3, #16
 800b81c:	431a      	orrs	r2, r3
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	691b      	ldr	r3, [r3, #16]
 800b826:	3301      	adds	r3, #1
 800b828:	029a      	lsls	r2, r3, #10
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b83c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	661a      	str	r2, [r3, #96]	; 0x60
 800b846:	e00f      	b.n	800b868 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	4a58      	ldr	r2, [pc, #352]	; (800b9b0 <HAL_SD_GetCardCSD+0x344>)
 800b84e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b854:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	2201      	movs	r2, #1
 800b860:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b864:	2301      	movs	r3, #1
 800b866:	e09d      	b.n	800b9a4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b86c:	0b9b      	lsrs	r3, r3, #14
 800b86e:	b2db      	uxtb	r3, r3
 800b870:	f003 0301 	and.w	r3, r3, #1
 800b874:	b2da      	uxtb	r2, r3
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b87e:	09db      	lsrs	r3, r3, #7
 800b880:	b2db      	uxtb	r3, r3
 800b882:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b886:	b2da      	uxtb	r2, r3
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b890:	b2db      	uxtb	r3, r3
 800b892:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b896:	b2da      	uxtb	r2, r3
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8a0:	0fdb      	lsrs	r3, r3, #31
 800b8a2:	b2da      	uxtb	r2, r3
 800b8a4:	683b      	ldr	r3, [r7, #0]
 800b8a6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8ac:	0f5b      	lsrs	r3, r3, #29
 800b8ae:	b2db      	uxtb	r3, r3
 800b8b0:	f003 0303 	and.w	r3, r3, #3
 800b8b4:	b2da      	uxtb	r2, r3
 800b8b6:	683b      	ldr	r3, [r7, #0]
 800b8b8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8be:	0e9b      	lsrs	r3, r3, #26
 800b8c0:	b2db      	uxtb	r3, r3
 800b8c2:	f003 0307 	and.w	r3, r3, #7
 800b8c6:	b2da      	uxtb	r2, r3
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8d0:	0d9b      	lsrs	r3, r3, #22
 800b8d2:	b2db      	uxtb	r3, r3
 800b8d4:	f003 030f 	and.w	r3, r3, #15
 800b8d8:	b2da      	uxtb	r2, r3
 800b8da:	683b      	ldr	r3, [r7, #0]
 800b8dc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8e2:	0d5b      	lsrs	r3, r3, #21
 800b8e4:	b2db      	uxtb	r3, r3
 800b8e6:	f003 0301 	and.w	r3, r3, #1
 800b8ea:	b2da      	uxtb	r2, r3
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8fe:	0c1b      	lsrs	r3, r3, #16
 800b900:	b2db      	uxtb	r3, r3
 800b902:	f003 0301 	and.w	r3, r3, #1
 800b906:	b2da      	uxtb	r2, r3
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b912:	0bdb      	lsrs	r3, r3, #15
 800b914:	b2db      	uxtb	r3, r3
 800b916:	f003 0301 	and.w	r3, r3, #1
 800b91a:	b2da      	uxtb	r2, r3
 800b91c:	683b      	ldr	r3, [r7, #0]
 800b91e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b926:	0b9b      	lsrs	r3, r3, #14
 800b928:	b2db      	uxtb	r3, r3
 800b92a:	f003 0301 	and.w	r3, r3, #1
 800b92e:	b2da      	uxtb	r2, r3
 800b930:	683b      	ldr	r3, [r7, #0]
 800b932:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b93a:	0b5b      	lsrs	r3, r3, #13
 800b93c:	b2db      	uxtb	r3, r3
 800b93e:	f003 0301 	and.w	r3, r3, #1
 800b942:	b2da      	uxtb	r2, r3
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b94e:	0b1b      	lsrs	r3, r3, #12
 800b950:	b2db      	uxtb	r3, r3
 800b952:	f003 0301 	and.w	r3, r3, #1
 800b956:	b2da      	uxtb	r2, r3
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b962:	0a9b      	lsrs	r3, r3, #10
 800b964:	b2db      	uxtb	r3, r3
 800b966:	f003 0303 	and.w	r3, r3, #3
 800b96a:	b2da      	uxtb	r2, r3
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b976:	0a1b      	lsrs	r3, r3, #8
 800b978:	b2db      	uxtb	r3, r3
 800b97a:	f003 0303 	and.w	r3, r3, #3
 800b97e:	b2da      	uxtb	r2, r3
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b98a:	085b      	lsrs	r3, r3, #1
 800b98c:	b2db      	uxtb	r3, r3
 800b98e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b992:	b2da      	uxtb	r2, r3
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800b99a:	683b      	ldr	r3, [r7, #0]
 800b99c:	2201      	movs	r2, #1
 800b99e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800b9a2:	2300      	movs	r3, #0
}
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	370c      	adds	r7, #12
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ae:	4770      	bx	lr
 800b9b0:	004005ff 	.word	0x004005ff

0800b9b4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800b9b4:	b480      	push	{r7}
 800b9b6:	b083      	sub	sp, #12
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
 800b9bc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b9c2:	683b      	ldr	r3, [r7, #0]
 800b9c4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b9d2:	683b      	ldr	r3, [r7, #0]
 800b9d4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b9da:	683b      	ldr	r3, [r7, #0]
 800b9dc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b9f2:	683b      	ldr	r3, [r7, #0]
 800b9f4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800b9fe:	2300      	movs	r3, #0
}
 800ba00:	4618      	mov	r0, r3
 800ba02:	370c      	adds	r7, #12
 800ba04:	46bd      	mov	sp, r7
 800ba06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0a:	4770      	bx	lr

0800ba0c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b086      	sub	sp, #24
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800ba14:	2300      	movs	r3, #0
 800ba16:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800ba18:	f107 030c 	add.w	r3, r7, #12
 800ba1c:	4619      	mov	r1, r3
 800ba1e:	6878      	ldr	r0, [r7, #4]
 800ba20:	f000 fa7e 	bl	800bf20 <SD_SendStatus>
 800ba24:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ba26:	697b      	ldr	r3, [r7, #20]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d005      	beq.n	800ba38 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba30:	697b      	ldr	r3, [r7, #20]
 800ba32:	431a      	orrs	r2, r3
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	0a5b      	lsrs	r3, r3, #9
 800ba3c:	f003 030f 	and.w	r3, r3, #15
 800ba40:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800ba42:	693b      	ldr	r3, [r7, #16]
}
 800ba44:	4618      	mov	r0, r3
 800ba46:	3718      	adds	r7, #24
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	bd80      	pop	{r7, pc}

0800ba4c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ba4c:	b480      	push	{r7}
 800ba4e:	b085      	sub	sp, #20
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba58:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ba68:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800ba6a:	bf00      	nop
 800ba6c:	3714      	adds	r7, #20
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba74:	4770      	bx	lr

0800ba76 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ba76:	b580      	push	{r7, lr}
 800ba78:	b084      	sub	sp, #16
 800ba7a:	af00      	add	r7, sp, #0
 800ba7c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba82:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba88:	2b82      	cmp	r3, #130	; 0x82
 800ba8a:	d111      	bne.n	800bab0 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	4618      	mov	r0, r3
 800ba92:	f001 fd5d 	bl	800d550 <SDMMC_CmdStopTransfer>
 800ba96:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ba98:	68bb      	ldr	r3, [r7, #8]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d008      	beq.n	800bab0 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800baa2:	68bb      	ldr	r3, [r7, #8]
 800baa4:	431a      	orrs	r2, r3
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800baaa:	68f8      	ldr	r0, [r7, #12]
 800baac:	f7ff fdd4 	bl	800b658 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	f022 0208 	bic.w	r2, r2, #8
 800babe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	f240 523a 	movw	r2, #1338	; 0x53a
 800bac8:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	2201      	movs	r2, #1
 800bace:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	2200      	movs	r2, #0
 800bad6:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800bad8:	68f8      	ldr	r0, [r7, #12]
 800bada:	f002 f97d 	bl	800ddd8 <HAL_SD_RxCpltCallback>
#endif
}
 800bade:	bf00      	nop
 800bae0:	3710      	adds	r7, #16
 800bae2:	46bd      	mov	sp, r7
 800bae4:	bd80      	pop	{r7, pc}
	...

0800bae8 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b086      	sub	sp, #24
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baf4:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800baf6:	6878      	ldr	r0, [r7, #4]
 800baf8:	f7fb fb86 	bl	8007208 <HAL_DMA_GetError>
 800bafc:	4603      	mov	r3, r0
 800bafe:	2b02      	cmp	r3, #2
 800bb00:	d03e      	beq.n	800bb80 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800bb02:	697b      	ldr	r3, [r7, #20]
 800bb04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb08:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800bb0a:	697b      	ldr	r3, [r7, #20]
 800bb0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb10:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800bb12:	693b      	ldr	r3, [r7, #16]
 800bb14:	2b01      	cmp	r3, #1
 800bb16:	d002      	beq.n	800bb1e <SD_DMAError+0x36>
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	2b01      	cmp	r3, #1
 800bb1c:	d12d      	bne.n	800bb7a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bb1e:	697b      	ldr	r3, [r7, #20]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	4a19      	ldr	r2, [pc, #100]	; (800bb88 <SD_DMAError+0xa0>)
 800bb24:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800bb26:	697b      	ldr	r3, [r7, #20]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bb2c:	697b      	ldr	r3, [r7, #20]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800bb34:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800bb36:	697b      	ldr	r3, [r7, #20]
 800bb38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb3a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800bb3e:	697b      	ldr	r3, [r7, #20]
 800bb40:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800bb42:	6978      	ldr	r0, [r7, #20]
 800bb44:	f7ff ff62 	bl	800ba0c <HAL_SD_GetCardState>
 800bb48:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800bb4a:	68bb      	ldr	r3, [r7, #8]
 800bb4c:	2b06      	cmp	r3, #6
 800bb4e:	d002      	beq.n	800bb56 <SD_DMAError+0x6e>
 800bb50:	68bb      	ldr	r3, [r7, #8]
 800bb52:	2b05      	cmp	r3, #5
 800bb54:	d10a      	bne.n	800bb6c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800bb56:	697b      	ldr	r3, [r7, #20]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	f001 fcf8 	bl	800d550 <SDMMC_CmdStopTransfer>
 800bb60:	4602      	mov	r2, r0
 800bb62:	697b      	ldr	r3, [r7, #20]
 800bb64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb66:	431a      	orrs	r2, r3
 800bb68:	697b      	ldr	r3, [r7, #20]
 800bb6a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800bb6c:	697b      	ldr	r3, [r7, #20]
 800bb6e:	2201      	movs	r2, #1
 800bb70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bb74:	697b      	ldr	r3, [r7, #20]
 800bb76:	2200      	movs	r2, #0
 800bb78:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800bb7a:	6978      	ldr	r0, [r7, #20]
 800bb7c:	f7ff fd6c 	bl	800b658 <HAL_SD_ErrorCallback>
#endif
  }
}
 800bb80:	bf00      	nop
 800bb82:	3718      	adds	r7, #24
 800bb84:	46bd      	mov	sp, r7
 800bb86:	bd80      	pop	{r7, pc}
 800bb88:	004005ff 	.word	0x004005ff

0800bb8c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b084      	sub	sp, #16
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb98:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	f240 523a 	movw	r2, #1338	; 0x53a
 800bba2:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800bba4:	68f8      	ldr	r0, [r7, #12]
 800bba6:	f7ff ff31 	bl	800ba0c <HAL_SD_GetCardState>
 800bbaa:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	2201      	movs	r2, #1
 800bbb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800bbba:	68bb      	ldr	r3, [r7, #8]
 800bbbc:	2b06      	cmp	r3, #6
 800bbbe:	d002      	beq.n	800bbc6 <SD_DMATxAbort+0x3a>
 800bbc0:	68bb      	ldr	r3, [r7, #8]
 800bbc2:	2b05      	cmp	r3, #5
 800bbc4:	d10a      	bne.n	800bbdc <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	4618      	mov	r0, r3
 800bbcc:	f001 fcc0 	bl	800d550 <SDMMC_CmdStopTransfer>
 800bbd0:	4602      	mov	r2, r0
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbd6:	431a      	orrs	r2, r3
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d103      	bne.n	800bbec <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800bbe4:	68f8      	ldr	r0, [r7, #12]
 800bbe6:	f002 f8e3 	bl	800ddb0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800bbea:	e002      	b.n	800bbf2 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800bbec:	68f8      	ldr	r0, [r7, #12]
 800bbee:	f7ff fd33 	bl	800b658 <HAL_SD_ErrorCallback>
}
 800bbf2:	bf00      	nop
 800bbf4:	3710      	adds	r7, #16
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	bd80      	pop	{r7, pc}

0800bbfa <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800bbfa:	b580      	push	{r7, lr}
 800bbfc:	b084      	sub	sp, #16
 800bbfe:	af00      	add	r7, sp, #0
 800bc00:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc06:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	f240 523a 	movw	r2, #1338	; 0x53a
 800bc10:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800bc12:	68f8      	ldr	r0, [r7, #12]
 800bc14:	f7ff fefa 	bl	800ba0c <HAL_SD_GetCardState>
 800bc18:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	2201      	movs	r2, #1
 800bc1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	2200      	movs	r2, #0
 800bc26:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800bc28:	68bb      	ldr	r3, [r7, #8]
 800bc2a:	2b06      	cmp	r3, #6
 800bc2c:	d002      	beq.n	800bc34 <SD_DMARxAbort+0x3a>
 800bc2e:	68bb      	ldr	r3, [r7, #8]
 800bc30:	2b05      	cmp	r3, #5
 800bc32:	d10a      	bne.n	800bc4a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	4618      	mov	r0, r3
 800bc3a:	f001 fc89 	bl	800d550 <SDMMC_CmdStopTransfer>
 800bc3e:	4602      	mov	r2, r0
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc44:	431a      	orrs	r2, r3
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d103      	bne.n	800bc5a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800bc52:	68f8      	ldr	r0, [r7, #12]
 800bc54:	f002 f8ac 	bl	800ddb0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800bc58:	e002      	b.n	800bc60 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800bc5a:	68f8      	ldr	r0, [r7, #12]
 800bc5c:	f7ff fcfc 	bl	800b658 <HAL_SD_ErrorCallback>
}
 800bc60:	bf00      	nop
 800bc62:	3710      	adds	r7, #16
 800bc64:	46bd      	mov	sp, r7
 800bc66:	bd80      	pop	{r7, pc}

0800bc68 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800bc68:	b5b0      	push	{r4, r5, r7, lr}
 800bc6a:	b094      	sub	sp, #80	; 0x50
 800bc6c:	af04      	add	r7, sp, #16
 800bc6e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800bc70:	2301      	movs	r3, #1
 800bc72:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	4618      	mov	r0, r3
 800bc7a:	f001 fb3b 	bl	800d2f4 <SDMMC_GetPowerState>
 800bc7e:	4603      	mov	r3, r0
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d102      	bne.n	800bc8a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800bc84:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800bc88:	e0b8      	b.n	800bdfc <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc8e:	2b03      	cmp	r3, #3
 800bc90:	d02f      	beq.n	800bcf2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	4618      	mov	r0, r3
 800bc98:	f001 fd22 	bl	800d6e0 <SDMMC_CmdSendCID>
 800bc9c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800bc9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d001      	beq.n	800bca8 <SD_InitCard+0x40>
    {
      return errorstate;
 800bca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bca6:	e0a9      	b.n	800bdfc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	2100      	movs	r1, #0
 800bcae:	4618      	mov	r0, r3
 800bcb0:	f001 fb65 	bl	800d37e <SDMMC_GetResponse>
 800bcb4:	4602      	mov	r2, r0
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	2104      	movs	r1, #4
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	f001 fb5c 	bl	800d37e <SDMMC_GetResponse>
 800bcc6:	4602      	mov	r2, r0
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	2108      	movs	r1, #8
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	f001 fb53 	bl	800d37e <SDMMC_GetResponse>
 800bcd8:	4602      	mov	r2, r0
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	210c      	movs	r1, #12
 800bce4:	4618      	mov	r0, r3
 800bce6:	f001 fb4a 	bl	800d37e <SDMMC_GetResponse>
 800bcea:	4602      	mov	r2, r0
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcf6:	2b03      	cmp	r3, #3
 800bcf8:	d00d      	beq.n	800bd16 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	f107 020e 	add.w	r2, r7, #14
 800bd02:	4611      	mov	r1, r2
 800bd04:	4618      	mov	r0, r3
 800bd06:	f001 fd28 	bl	800d75a <SDMMC_CmdSetRelAdd>
 800bd0a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800bd0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d001      	beq.n	800bd16 <SD_InitCard+0xae>
    {
      return errorstate;
 800bd12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd14:	e072      	b.n	800bdfc <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd1a:	2b03      	cmp	r3, #3
 800bd1c:	d036      	beq.n	800bd8c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800bd1e:	89fb      	ldrh	r3, [r7, #14]
 800bd20:	461a      	mov	r2, r3
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681a      	ldr	r2, [r3, #0]
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd2e:	041b      	lsls	r3, r3, #16
 800bd30:	4619      	mov	r1, r3
 800bd32:	4610      	mov	r0, r2
 800bd34:	f001 fcf2 	bl	800d71c <SDMMC_CmdSendCSD>
 800bd38:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800bd3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d001      	beq.n	800bd44 <SD_InitCard+0xdc>
    {
      return errorstate;
 800bd40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd42:	e05b      	b.n	800bdfc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	2100      	movs	r1, #0
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	f001 fb17 	bl	800d37e <SDMMC_GetResponse>
 800bd50:	4602      	mov	r2, r0
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	2104      	movs	r1, #4
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	f001 fb0e 	bl	800d37e <SDMMC_GetResponse>
 800bd62:	4602      	mov	r2, r0
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	2108      	movs	r1, #8
 800bd6e:	4618      	mov	r0, r3
 800bd70:	f001 fb05 	bl	800d37e <SDMMC_GetResponse>
 800bd74:	4602      	mov	r2, r0
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	210c      	movs	r1, #12
 800bd80:	4618      	mov	r0, r3
 800bd82:	f001 fafc 	bl	800d37e <SDMMC_GetResponse>
 800bd86:	4602      	mov	r2, r0
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	2104      	movs	r1, #4
 800bd92:	4618      	mov	r0, r3
 800bd94:	f001 faf3 	bl	800d37e <SDMMC_GetResponse>
 800bd98:	4603      	mov	r3, r0
 800bd9a:	0d1a      	lsrs	r2, r3, #20
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800bda0:	f107 0310 	add.w	r3, r7, #16
 800bda4:	4619      	mov	r1, r3
 800bda6:	6878      	ldr	r0, [r7, #4]
 800bda8:	f7ff fc60 	bl	800b66c <HAL_SD_GetCardCSD>
 800bdac:	4603      	mov	r3, r0
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d002      	beq.n	800bdb8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bdb2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800bdb6:	e021      	b.n	800bdfc <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	6819      	ldr	r1, [r3, #0]
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdc0:	041b      	lsls	r3, r3, #16
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	461c      	mov	r4, r3
 800bdc6:	4615      	mov	r5, r2
 800bdc8:	4622      	mov	r2, r4
 800bdca:	462b      	mov	r3, r5
 800bdcc:	4608      	mov	r0, r1
 800bdce:	f001 fbe1 	bl	800d594 <SDMMC_CmdSelDesel>
 800bdd2:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800bdd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d001      	beq.n	800bdde <SD_InitCard+0x176>
  {
    return errorstate;
 800bdda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bddc:	e00e      	b.n	800bdfc <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681d      	ldr	r5, [r3, #0]
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	466c      	mov	r4, sp
 800bde6:	f103 0210 	add.w	r2, r3, #16
 800bdea:	ca07      	ldmia	r2, {r0, r1, r2}
 800bdec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800bdf0:	3304      	adds	r3, #4
 800bdf2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bdf4:	4628      	mov	r0, r5
 800bdf6:	f001 fa25 	bl	800d244 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800bdfa:	2300      	movs	r3, #0
}
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	3740      	adds	r7, #64	; 0x40
 800be00:	46bd      	mov	sp, r7
 800be02:	bdb0      	pop	{r4, r5, r7, pc}

0800be04 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b086      	sub	sp, #24
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800be0c:	2300      	movs	r3, #0
 800be0e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800be10:	2300      	movs	r3, #0
 800be12:	617b      	str	r3, [r7, #20]
 800be14:	2300      	movs	r3, #0
 800be16:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	4618      	mov	r0, r3
 800be1e:	f001 fbdc 	bl	800d5da <SDMMC_CmdGoIdleState>
 800be22:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d001      	beq.n	800be2e <SD_PowerON+0x2a>
  {
    return errorstate;
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	e072      	b.n	800bf14 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	4618      	mov	r0, r3
 800be34:	f001 fbef 	bl	800d616 <SDMMC_CmdOperCond>
 800be38:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d00d      	beq.n	800be5c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	2200      	movs	r2, #0
 800be44:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	4618      	mov	r0, r3
 800be4c:	f001 fbc5 	bl	800d5da <SDMMC_CmdGoIdleState>
 800be50:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d004      	beq.n	800be62 <SD_PowerON+0x5e>
    {
      return errorstate;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	e05b      	b.n	800bf14 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	2201      	movs	r2, #1
 800be60:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be66:	2b01      	cmp	r3, #1
 800be68:	d137      	bne.n	800beda <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	2100      	movs	r1, #0
 800be70:	4618      	mov	r0, r3
 800be72:	f001 fbef 	bl	800d654 <SDMMC_CmdAppCommand>
 800be76:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d02d      	beq.n	800beda <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800be7e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800be82:	e047      	b.n	800bf14 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	2100      	movs	r1, #0
 800be8a:	4618      	mov	r0, r3
 800be8c:	f001 fbe2 	bl	800d654 <SDMMC_CmdAppCommand>
 800be90:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d001      	beq.n	800be9c <SD_PowerON+0x98>
    {
      return errorstate;
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	e03b      	b.n	800bf14 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	491e      	ldr	r1, [pc, #120]	; (800bf1c <SD_PowerON+0x118>)
 800bea2:	4618      	mov	r0, r3
 800bea4:	f001 fbf8 	bl	800d698 <SDMMC_CmdAppOperCommand>
 800bea8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d002      	beq.n	800beb6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800beb0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800beb4:	e02e      	b.n	800bf14 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	2100      	movs	r1, #0
 800bebc:	4618      	mov	r0, r3
 800bebe:	f001 fa5e 	bl	800d37e <SDMMC_GetResponse>
 800bec2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800bec4:	697b      	ldr	r3, [r7, #20]
 800bec6:	0fdb      	lsrs	r3, r3, #31
 800bec8:	2b01      	cmp	r3, #1
 800beca:	d101      	bne.n	800bed0 <SD_PowerON+0xcc>
 800becc:	2301      	movs	r3, #1
 800bece:	e000      	b.n	800bed2 <SD_PowerON+0xce>
 800bed0:	2300      	movs	r3, #0
 800bed2:	613b      	str	r3, [r7, #16]

    count++;
 800bed4:	68bb      	ldr	r3, [r7, #8]
 800bed6:	3301      	adds	r3, #1
 800bed8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800beda:	68bb      	ldr	r3, [r7, #8]
 800bedc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800bee0:	4293      	cmp	r3, r2
 800bee2:	d802      	bhi.n	800beea <SD_PowerON+0xe6>
 800bee4:	693b      	ldr	r3, [r7, #16]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d0cc      	beq.n	800be84 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800beea:	68bb      	ldr	r3, [r7, #8]
 800beec:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800bef0:	4293      	cmp	r3, r2
 800bef2:	d902      	bls.n	800befa <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800bef4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bef8:	e00c      	b.n	800bf14 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800befa:	697b      	ldr	r3, [r7, #20]
 800befc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d003      	beq.n	800bf0c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	2201      	movs	r2, #1
 800bf08:	645a      	str	r2, [r3, #68]	; 0x44
 800bf0a:	e002      	b.n	800bf12 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	2200      	movs	r2, #0
 800bf10:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800bf12:	2300      	movs	r3, #0
}
 800bf14:	4618      	mov	r0, r3
 800bf16:	3718      	adds	r7, #24
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	bd80      	pop	{r7, pc}
 800bf1c:	c1100000 	.word	0xc1100000

0800bf20 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b084      	sub	sp, #16
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
 800bf28:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d102      	bne.n	800bf36 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800bf30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bf34:	e018      	b.n	800bf68 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681a      	ldr	r2, [r3, #0]
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf3e:	041b      	lsls	r3, r3, #16
 800bf40:	4619      	mov	r1, r3
 800bf42:	4610      	mov	r0, r2
 800bf44:	f001 fc2a 	bl	800d79c <SDMMC_CmdSendStatus>
 800bf48:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d001      	beq.n	800bf54 <SD_SendStatus+0x34>
  {
    return errorstate;
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	e009      	b.n	800bf68 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	2100      	movs	r1, #0
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	f001 fa0f 	bl	800d37e <SDMMC_GetResponse>
 800bf60:	4602      	mov	r2, r0
 800bf62:	683b      	ldr	r3, [r7, #0]
 800bf64:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800bf66:	2300      	movs	r3, #0
}
 800bf68:	4618      	mov	r0, r3
 800bf6a:	3710      	adds	r7, #16
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	bd80      	pop	{r7, pc}

0800bf70 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b086      	sub	sp, #24
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf7c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf82:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800bf84:	693b      	ldr	r3, [r7, #16]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d03f      	beq.n	800c00a <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	617b      	str	r3, [r7, #20]
 800bf8e:	e033      	b.n	800bff8 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	4618      	mov	r0, r3
 800bf96:	f001 f981 	bl	800d29c <SDMMC_ReadFIFO>
 800bf9a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800bf9c:	68bb      	ldr	r3, [r7, #8]
 800bf9e:	b2da      	uxtb	r2, r3
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	3301      	adds	r3, #1
 800bfa8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800bfaa:	693b      	ldr	r3, [r7, #16]
 800bfac:	3b01      	subs	r3, #1
 800bfae:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800bfb0:	68bb      	ldr	r3, [r7, #8]
 800bfb2:	0a1b      	lsrs	r3, r3, #8
 800bfb4:	b2da      	uxtb	r2, r3
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	701a      	strb	r2, [r3, #0]
      tmp++;
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	3301      	adds	r3, #1
 800bfbe:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800bfc0:	693b      	ldr	r3, [r7, #16]
 800bfc2:	3b01      	subs	r3, #1
 800bfc4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800bfc6:	68bb      	ldr	r3, [r7, #8]
 800bfc8:	0c1b      	lsrs	r3, r3, #16
 800bfca:	b2da      	uxtb	r2, r3
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	701a      	strb	r2, [r3, #0]
      tmp++;
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	3301      	adds	r3, #1
 800bfd4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800bfd6:	693b      	ldr	r3, [r7, #16]
 800bfd8:	3b01      	subs	r3, #1
 800bfda:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800bfdc:	68bb      	ldr	r3, [r7, #8]
 800bfde:	0e1b      	lsrs	r3, r3, #24
 800bfe0:	b2da      	uxtb	r2, r3
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	701a      	strb	r2, [r3, #0]
      tmp++;
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	3301      	adds	r3, #1
 800bfea:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800bfec:	693b      	ldr	r3, [r7, #16]
 800bfee:	3b01      	subs	r3, #1
 800bff0:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800bff2:	697b      	ldr	r3, [r7, #20]
 800bff4:	3301      	adds	r3, #1
 800bff6:	617b      	str	r3, [r7, #20]
 800bff8:	697b      	ldr	r3, [r7, #20]
 800bffa:	2b07      	cmp	r3, #7
 800bffc:	d9c8      	bls.n	800bf90 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	68fa      	ldr	r2, [r7, #12]
 800c002:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	693a      	ldr	r2, [r7, #16]
 800c008:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800c00a:	bf00      	nop
 800c00c:	3718      	adds	r7, #24
 800c00e:	46bd      	mov	sp, r7
 800c010:	bd80      	pop	{r7, pc}

0800c012 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800c012:	b580      	push	{r7, lr}
 800c014:	b086      	sub	sp, #24
 800c016:	af00      	add	r7, sp, #0
 800c018:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	6a1b      	ldr	r3, [r3, #32]
 800c01e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c024:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800c026:	693b      	ldr	r3, [r7, #16]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d043      	beq.n	800c0b4 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800c02c:	2300      	movs	r3, #0
 800c02e:	617b      	str	r3, [r7, #20]
 800c030:	e037      	b.n	800c0a2 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	781b      	ldrb	r3, [r3, #0]
 800c036:	60bb      	str	r3, [r7, #8]
      tmp++;
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	3301      	adds	r3, #1
 800c03c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c03e:	693b      	ldr	r3, [r7, #16]
 800c040:	3b01      	subs	r3, #1
 800c042:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	781b      	ldrb	r3, [r3, #0]
 800c048:	021a      	lsls	r2, r3, #8
 800c04a:	68bb      	ldr	r3, [r7, #8]
 800c04c:	4313      	orrs	r3, r2
 800c04e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	3301      	adds	r3, #1
 800c054:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c056:	693b      	ldr	r3, [r7, #16]
 800c058:	3b01      	subs	r3, #1
 800c05a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	781b      	ldrb	r3, [r3, #0]
 800c060:	041a      	lsls	r2, r3, #16
 800c062:	68bb      	ldr	r3, [r7, #8]
 800c064:	4313      	orrs	r3, r2
 800c066:	60bb      	str	r3, [r7, #8]
      tmp++;
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	3301      	adds	r3, #1
 800c06c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c06e:	693b      	ldr	r3, [r7, #16]
 800c070:	3b01      	subs	r3, #1
 800c072:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	781b      	ldrb	r3, [r3, #0]
 800c078:	061a      	lsls	r2, r3, #24
 800c07a:	68bb      	ldr	r3, [r7, #8]
 800c07c:	4313      	orrs	r3, r2
 800c07e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	3301      	adds	r3, #1
 800c084:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c086:	693b      	ldr	r3, [r7, #16]
 800c088:	3b01      	subs	r3, #1
 800c08a:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	f107 0208 	add.w	r2, r7, #8
 800c094:	4611      	mov	r1, r2
 800c096:	4618      	mov	r0, r3
 800c098:	f001 f90d 	bl	800d2b6 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800c09c:	697b      	ldr	r3, [r7, #20]
 800c09e:	3301      	adds	r3, #1
 800c0a0:	617b      	str	r3, [r7, #20]
 800c0a2:	697b      	ldr	r3, [r7, #20]
 800c0a4:	2b07      	cmp	r3, #7
 800c0a6:	d9c4      	bls.n	800c032 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	68fa      	ldr	r2, [r7, #12]
 800c0ac:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	693a      	ldr	r2, [r7, #16]
 800c0b2:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800c0b4:	bf00      	nop
 800c0b6:	3718      	adds	r7, #24
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	bd80      	pop	{r7, pc}

0800c0bc <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b082      	sub	sp, #8
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	6078      	str	r0, [r7, #4]
 800c0c4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d101      	bne.n	800c0d0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800c0cc:	2301      	movs	r3, #1
 800c0ce:	e025      	b.n	800c11c <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c0d6:	b2db      	uxtb	r3, r3
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d106      	bne.n	800c0ea <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	2200      	movs	r2, #0
 800c0e0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800c0e4:	6878      	ldr	r0, [r7, #4]
 800c0e6:	f7f8 fd85 	bl	8004bf4 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	2202      	movs	r2, #2
 800c0ee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681a      	ldr	r2, [r3, #0]
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	3304      	adds	r3, #4
 800c0fa:	4619      	mov	r1, r3
 800c0fc:	4610      	mov	r0, r2
 800c0fe:	f000 ff9f 	bl	800d040 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	6818      	ldr	r0, [r3, #0]
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	685b      	ldr	r3, [r3, #4]
 800c10a:	461a      	mov	r2, r3
 800c10c:	6839      	ldr	r1, [r7, #0]
 800c10e:	f000 fff3 	bl	800d0f8 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	2201      	movs	r2, #1
 800c116:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800c11a:	2300      	movs	r3, #0
}
 800c11c:	4618      	mov	r0, r3
 800c11e:	3708      	adds	r7, #8
 800c120:	46bd      	mov	sp, r7
 800c122:	bd80      	pop	{r7, pc}

0800c124 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b086      	sub	sp, #24
 800c128:	af00      	add	r7, sp, #0
 800c12a:	60f8      	str	r0, [r7, #12]
 800c12c:	60b9      	str	r1, [r7, #8]
 800c12e:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c136:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800c138:	7dfb      	ldrb	r3, [r7, #23]
 800c13a:	2b02      	cmp	r3, #2
 800c13c:	d101      	bne.n	800c142 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800c13e:	2302      	movs	r3, #2
 800c140:	e021      	b.n	800c186 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800c142:	7dfb      	ldrb	r3, [r7, #23]
 800c144:	2b01      	cmp	r3, #1
 800c146:	d002      	beq.n	800c14e <HAL_SDRAM_SendCommand+0x2a>
 800c148:	7dfb      	ldrb	r3, [r7, #23]
 800c14a:	2b05      	cmp	r3, #5
 800c14c:	d118      	bne.n	800c180 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	2202      	movs	r2, #2
 800c152:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	687a      	ldr	r2, [r7, #4]
 800c15c:	68b9      	ldr	r1, [r7, #8]
 800c15e:	4618      	mov	r0, r3
 800c160:	f001 f834 	bl	800d1cc <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800c164:	68bb      	ldr	r3, [r7, #8]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	2b02      	cmp	r3, #2
 800c16a:	d104      	bne.n	800c176 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	2205      	movs	r2, #5
 800c170:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800c174:	e006      	b.n	800c184 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	2201      	movs	r2, #1
 800c17a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800c17e:	e001      	b.n	800c184 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800c180:	2301      	movs	r3, #1
 800c182:	e000      	b.n	800c186 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800c184:	2300      	movs	r3, #0
}
 800c186:	4618      	mov	r0, r3
 800c188:	3718      	adds	r7, #24
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bd80      	pop	{r7, pc}

0800c18e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800c18e:	b580      	push	{r7, lr}
 800c190:	b082      	sub	sp, #8
 800c192:	af00      	add	r7, sp, #0
 800c194:	6078      	str	r0, [r7, #4]
 800c196:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c19e:	b2db      	uxtb	r3, r3
 800c1a0:	2b02      	cmp	r3, #2
 800c1a2:	d101      	bne.n	800c1a8 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800c1a4:	2302      	movs	r3, #2
 800c1a6:	e016      	b.n	800c1d6 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c1ae:	b2db      	uxtb	r3, r3
 800c1b0:	2b01      	cmp	r3, #1
 800c1b2:	d10f      	bne.n	800c1d4 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	2202      	movs	r2, #2
 800c1b8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	6839      	ldr	r1, [r7, #0]
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	f001 f826 	bl	800d214 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2201      	movs	r2, #1
 800c1cc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	e000      	b.n	800c1d6 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800c1d4:	2301      	movs	r3, #1
}
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	3708      	adds	r7, #8
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	bd80      	pop	{r7, pc}

0800c1de <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c1de:	b580      	push	{r7, lr}
 800c1e0:	b082      	sub	sp, #8
 800c1e2:	af00      	add	r7, sp, #0
 800c1e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d101      	bne.n	800c1f0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c1ec:	2301      	movs	r3, #1
 800c1ee:	e049      	b.n	800c284 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c1f6:	b2db      	uxtb	r3, r3
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d106      	bne.n	800c20a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	2200      	movs	r2, #0
 800c200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c204:	6878      	ldr	r0, [r7, #4]
 800c206:	f000 f841 	bl	800c28c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	2202      	movs	r2, #2
 800c20e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681a      	ldr	r2, [r3, #0]
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	3304      	adds	r3, #4
 800c21a:	4619      	mov	r1, r3
 800c21c:	4610      	mov	r0, r2
 800c21e:	f000 f9ff 	bl	800c620 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	2201      	movs	r2, #1
 800c226:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	2201      	movs	r2, #1
 800c22e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	2201      	movs	r2, #1
 800c236:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	2201      	movs	r2, #1
 800c23e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	2201      	movs	r2, #1
 800c246:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	2201      	movs	r2, #1
 800c24e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	2201      	movs	r2, #1
 800c256:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	2201      	movs	r2, #1
 800c25e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2201      	movs	r2, #1
 800c266:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	2201      	movs	r2, #1
 800c26e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	2201      	movs	r2, #1
 800c276:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	2201      	movs	r2, #1
 800c27e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c282:	2300      	movs	r3, #0
}
 800c284:	4618      	mov	r0, r3
 800c286:	3708      	adds	r7, #8
 800c288:	46bd      	mov	sp, r7
 800c28a:	bd80      	pop	{r7, pc}

0800c28c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800c28c:	b480      	push	{r7}
 800c28e:	b083      	sub	sp, #12
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800c294:	bf00      	nop
 800c296:	370c      	adds	r7, #12
 800c298:	46bd      	mov	sp, r7
 800c29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29e:	4770      	bx	lr

0800c2a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c2a0:	b480      	push	{r7}
 800c2a2:	b085      	sub	sp, #20
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c2ae:	b2db      	uxtb	r3, r3
 800c2b0:	2b01      	cmp	r3, #1
 800c2b2:	d001      	beq.n	800c2b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c2b4:	2301      	movs	r3, #1
 800c2b6:	e054      	b.n	800c362 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2202      	movs	r2, #2
 800c2bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	68da      	ldr	r2, [r3, #12]
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	f042 0201 	orr.w	r2, r2, #1
 800c2ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	4a26      	ldr	r2, [pc, #152]	; (800c370 <HAL_TIM_Base_Start_IT+0xd0>)
 800c2d6:	4293      	cmp	r3, r2
 800c2d8:	d022      	beq.n	800c320 <HAL_TIM_Base_Start_IT+0x80>
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c2e2:	d01d      	beq.n	800c320 <HAL_TIM_Base_Start_IT+0x80>
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	4a22      	ldr	r2, [pc, #136]	; (800c374 <HAL_TIM_Base_Start_IT+0xd4>)
 800c2ea:	4293      	cmp	r3, r2
 800c2ec:	d018      	beq.n	800c320 <HAL_TIM_Base_Start_IT+0x80>
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	4a21      	ldr	r2, [pc, #132]	; (800c378 <HAL_TIM_Base_Start_IT+0xd8>)
 800c2f4:	4293      	cmp	r3, r2
 800c2f6:	d013      	beq.n	800c320 <HAL_TIM_Base_Start_IT+0x80>
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	4a1f      	ldr	r2, [pc, #124]	; (800c37c <HAL_TIM_Base_Start_IT+0xdc>)
 800c2fe:	4293      	cmp	r3, r2
 800c300:	d00e      	beq.n	800c320 <HAL_TIM_Base_Start_IT+0x80>
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	4a1e      	ldr	r2, [pc, #120]	; (800c380 <HAL_TIM_Base_Start_IT+0xe0>)
 800c308:	4293      	cmp	r3, r2
 800c30a:	d009      	beq.n	800c320 <HAL_TIM_Base_Start_IT+0x80>
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	4a1c      	ldr	r2, [pc, #112]	; (800c384 <HAL_TIM_Base_Start_IT+0xe4>)
 800c312:	4293      	cmp	r3, r2
 800c314:	d004      	beq.n	800c320 <HAL_TIM_Base_Start_IT+0x80>
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	4a1b      	ldr	r2, [pc, #108]	; (800c388 <HAL_TIM_Base_Start_IT+0xe8>)
 800c31c:	4293      	cmp	r3, r2
 800c31e:	d115      	bne.n	800c34c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	689a      	ldr	r2, [r3, #8]
 800c326:	4b19      	ldr	r3, [pc, #100]	; (800c38c <HAL_TIM_Base_Start_IT+0xec>)
 800c328:	4013      	ands	r3, r2
 800c32a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	2b06      	cmp	r3, #6
 800c330:	d015      	beq.n	800c35e <HAL_TIM_Base_Start_IT+0xbe>
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c338:	d011      	beq.n	800c35e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	681a      	ldr	r2, [r3, #0]
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	f042 0201 	orr.w	r2, r2, #1
 800c348:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c34a:	e008      	b.n	800c35e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	681a      	ldr	r2, [r3, #0]
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	f042 0201 	orr.w	r2, r2, #1
 800c35a:	601a      	str	r2, [r3, #0]
 800c35c:	e000      	b.n	800c360 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c35e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c360:	2300      	movs	r3, #0
}
 800c362:	4618      	mov	r0, r3
 800c364:	3714      	adds	r7, #20
 800c366:	46bd      	mov	sp, r7
 800c368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36c:	4770      	bx	lr
 800c36e:	bf00      	nop
 800c370:	40010000 	.word	0x40010000
 800c374:	40000400 	.word	0x40000400
 800c378:	40000800 	.word	0x40000800
 800c37c:	40000c00 	.word	0x40000c00
 800c380:	40010400 	.word	0x40010400
 800c384:	40014000 	.word	0x40014000
 800c388:	40001800 	.word	0x40001800
 800c38c:	00010007 	.word	0x00010007

0800c390 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b082      	sub	sp, #8
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	691b      	ldr	r3, [r3, #16]
 800c39e:	f003 0302 	and.w	r3, r3, #2
 800c3a2:	2b02      	cmp	r3, #2
 800c3a4:	d122      	bne.n	800c3ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	68db      	ldr	r3, [r3, #12]
 800c3ac:	f003 0302 	and.w	r3, r3, #2
 800c3b0:	2b02      	cmp	r3, #2
 800c3b2:	d11b      	bne.n	800c3ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	f06f 0202 	mvn.w	r2, #2
 800c3bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	2201      	movs	r2, #1
 800c3c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	699b      	ldr	r3, [r3, #24]
 800c3ca:	f003 0303 	and.w	r3, r3, #3
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d003      	beq.n	800c3da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c3d2:	6878      	ldr	r0, [r7, #4]
 800c3d4:	f000 f905 	bl	800c5e2 <HAL_TIM_IC_CaptureCallback>
 800c3d8:	e005      	b.n	800c3e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c3da:	6878      	ldr	r0, [r7, #4]
 800c3dc:	f000 f8f7 	bl	800c5ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c3e0:	6878      	ldr	r0, [r7, #4]
 800c3e2:	f000 f908 	bl	800c5f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	691b      	ldr	r3, [r3, #16]
 800c3f2:	f003 0304 	and.w	r3, r3, #4
 800c3f6:	2b04      	cmp	r3, #4
 800c3f8:	d122      	bne.n	800c440 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	68db      	ldr	r3, [r3, #12]
 800c400:	f003 0304 	and.w	r3, r3, #4
 800c404:	2b04      	cmp	r3, #4
 800c406:	d11b      	bne.n	800c440 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	f06f 0204 	mvn.w	r2, #4
 800c410:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	2202      	movs	r2, #2
 800c416:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	699b      	ldr	r3, [r3, #24]
 800c41e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c422:	2b00      	cmp	r3, #0
 800c424:	d003      	beq.n	800c42e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c426:	6878      	ldr	r0, [r7, #4]
 800c428:	f000 f8db 	bl	800c5e2 <HAL_TIM_IC_CaptureCallback>
 800c42c:	e005      	b.n	800c43a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c42e:	6878      	ldr	r0, [r7, #4]
 800c430:	f000 f8cd 	bl	800c5ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c434:	6878      	ldr	r0, [r7, #4]
 800c436:	f000 f8de 	bl	800c5f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	2200      	movs	r2, #0
 800c43e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	691b      	ldr	r3, [r3, #16]
 800c446:	f003 0308 	and.w	r3, r3, #8
 800c44a:	2b08      	cmp	r3, #8
 800c44c:	d122      	bne.n	800c494 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	68db      	ldr	r3, [r3, #12]
 800c454:	f003 0308 	and.w	r3, r3, #8
 800c458:	2b08      	cmp	r3, #8
 800c45a:	d11b      	bne.n	800c494 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	f06f 0208 	mvn.w	r2, #8
 800c464:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	2204      	movs	r2, #4
 800c46a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	69db      	ldr	r3, [r3, #28]
 800c472:	f003 0303 	and.w	r3, r3, #3
 800c476:	2b00      	cmp	r3, #0
 800c478:	d003      	beq.n	800c482 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c47a:	6878      	ldr	r0, [r7, #4]
 800c47c:	f000 f8b1 	bl	800c5e2 <HAL_TIM_IC_CaptureCallback>
 800c480:	e005      	b.n	800c48e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c482:	6878      	ldr	r0, [r7, #4]
 800c484:	f000 f8a3 	bl	800c5ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c488:	6878      	ldr	r0, [r7, #4]
 800c48a:	f000 f8b4 	bl	800c5f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	2200      	movs	r2, #0
 800c492:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	691b      	ldr	r3, [r3, #16]
 800c49a:	f003 0310 	and.w	r3, r3, #16
 800c49e:	2b10      	cmp	r3, #16
 800c4a0:	d122      	bne.n	800c4e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	68db      	ldr	r3, [r3, #12]
 800c4a8:	f003 0310 	and.w	r3, r3, #16
 800c4ac:	2b10      	cmp	r3, #16
 800c4ae:	d11b      	bne.n	800c4e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	f06f 0210 	mvn.w	r2, #16
 800c4b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	2208      	movs	r2, #8
 800c4be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	69db      	ldr	r3, [r3, #28]
 800c4c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d003      	beq.n	800c4d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c4ce:	6878      	ldr	r0, [r7, #4]
 800c4d0:	f000 f887 	bl	800c5e2 <HAL_TIM_IC_CaptureCallback>
 800c4d4:	e005      	b.n	800c4e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c4d6:	6878      	ldr	r0, [r7, #4]
 800c4d8:	f000 f879 	bl	800c5ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c4dc:	6878      	ldr	r0, [r7, #4]
 800c4de:	f000 f88a 	bl	800c5f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	691b      	ldr	r3, [r3, #16]
 800c4ee:	f003 0301 	and.w	r3, r3, #1
 800c4f2:	2b01      	cmp	r3, #1
 800c4f4:	d10e      	bne.n	800c514 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	68db      	ldr	r3, [r3, #12]
 800c4fc:	f003 0301 	and.w	r3, r3, #1
 800c500:	2b01      	cmp	r3, #1
 800c502:	d107      	bne.n	800c514 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	f06f 0201 	mvn.w	r2, #1
 800c50c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c50e:	6878      	ldr	r0, [r7, #4]
 800c510:	f7f5 ff3a 	bl	8002388 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	691b      	ldr	r3, [r3, #16]
 800c51a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c51e:	2b80      	cmp	r3, #128	; 0x80
 800c520:	d10e      	bne.n	800c540 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	68db      	ldr	r3, [r3, #12]
 800c528:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c52c:	2b80      	cmp	r3, #128	; 0x80
 800c52e:	d107      	bne.n	800c540 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c538:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c53a:	6878      	ldr	r0, [r7, #4]
 800c53c:	f000 f91a 	bl	800c774 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	691b      	ldr	r3, [r3, #16]
 800c546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c54a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c54e:	d10e      	bne.n	800c56e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	68db      	ldr	r3, [r3, #12]
 800c556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c55a:	2b80      	cmp	r3, #128	; 0x80
 800c55c:	d107      	bne.n	800c56e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c566:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c568:	6878      	ldr	r0, [r7, #4]
 800c56a:	f000 f90d 	bl	800c788 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	691b      	ldr	r3, [r3, #16]
 800c574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c578:	2b40      	cmp	r3, #64	; 0x40
 800c57a:	d10e      	bne.n	800c59a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	68db      	ldr	r3, [r3, #12]
 800c582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c586:	2b40      	cmp	r3, #64	; 0x40
 800c588:	d107      	bne.n	800c59a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c592:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c594:	6878      	ldr	r0, [r7, #4]
 800c596:	f000 f838 	bl	800c60a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	691b      	ldr	r3, [r3, #16]
 800c5a0:	f003 0320 	and.w	r3, r3, #32
 800c5a4:	2b20      	cmp	r3, #32
 800c5a6:	d10e      	bne.n	800c5c6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	68db      	ldr	r3, [r3, #12]
 800c5ae:	f003 0320 	and.w	r3, r3, #32
 800c5b2:	2b20      	cmp	r3, #32
 800c5b4:	d107      	bne.n	800c5c6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	f06f 0220 	mvn.w	r2, #32
 800c5be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c5c0:	6878      	ldr	r0, [r7, #4]
 800c5c2:	f000 f8cd 	bl	800c760 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c5c6:	bf00      	nop
 800c5c8:	3708      	adds	r7, #8
 800c5ca:	46bd      	mov	sp, r7
 800c5cc:	bd80      	pop	{r7, pc}

0800c5ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c5ce:	b480      	push	{r7}
 800c5d0:	b083      	sub	sp, #12
 800c5d2:	af00      	add	r7, sp, #0
 800c5d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c5d6:	bf00      	nop
 800c5d8:	370c      	adds	r7, #12
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e0:	4770      	bx	lr

0800c5e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c5e2:	b480      	push	{r7}
 800c5e4:	b083      	sub	sp, #12
 800c5e6:	af00      	add	r7, sp, #0
 800c5e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c5ea:	bf00      	nop
 800c5ec:	370c      	adds	r7, #12
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f4:	4770      	bx	lr

0800c5f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c5f6:	b480      	push	{r7}
 800c5f8:	b083      	sub	sp, #12
 800c5fa:	af00      	add	r7, sp, #0
 800c5fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c5fe:	bf00      	nop
 800c600:	370c      	adds	r7, #12
 800c602:	46bd      	mov	sp, r7
 800c604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c608:	4770      	bx	lr

0800c60a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c60a:	b480      	push	{r7}
 800c60c:	b083      	sub	sp, #12
 800c60e:	af00      	add	r7, sp, #0
 800c610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c612:	bf00      	nop
 800c614:	370c      	adds	r7, #12
 800c616:	46bd      	mov	sp, r7
 800c618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61c:	4770      	bx	lr
	...

0800c620 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c620:	b480      	push	{r7}
 800c622:	b085      	sub	sp, #20
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
 800c628:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	4a40      	ldr	r2, [pc, #256]	; (800c734 <TIM_Base_SetConfig+0x114>)
 800c634:	4293      	cmp	r3, r2
 800c636:	d013      	beq.n	800c660 <TIM_Base_SetConfig+0x40>
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c63e:	d00f      	beq.n	800c660 <TIM_Base_SetConfig+0x40>
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	4a3d      	ldr	r2, [pc, #244]	; (800c738 <TIM_Base_SetConfig+0x118>)
 800c644:	4293      	cmp	r3, r2
 800c646:	d00b      	beq.n	800c660 <TIM_Base_SetConfig+0x40>
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	4a3c      	ldr	r2, [pc, #240]	; (800c73c <TIM_Base_SetConfig+0x11c>)
 800c64c:	4293      	cmp	r3, r2
 800c64e:	d007      	beq.n	800c660 <TIM_Base_SetConfig+0x40>
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	4a3b      	ldr	r2, [pc, #236]	; (800c740 <TIM_Base_SetConfig+0x120>)
 800c654:	4293      	cmp	r3, r2
 800c656:	d003      	beq.n	800c660 <TIM_Base_SetConfig+0x40>
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	4a3a      	ldr	r2, [pc, #232]	; (800c744 <TIM_Base_SetConfig+0x124>)
 800c65c:	4293      	cmp	r3, r2
 800c65e:	d108      	bne.n	800c672 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c666:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c668:	683b      	ldr	r3, [r7, #0]
 800c66a:	685b      	ldr	r3, [r3, #4]
 800c66c:	68fa      	ldr	r2, [r7, #12]
 800c66e:	4313      	orrs	r3, r2
 800c670:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	4a2f      	ldr	r2, [pc, #188]	; (800c734 <TIM_Base_SetConfig+0x114>)
 800c676:	4293      	cmp	r3, r2
 800c678:	d02b      	beq.n	800c6d2 <TIM_Base_SetConfig+0xb2>
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c680:	d027      	beq.n	800c6d2 <TIM_Base_SetConfig+0xb2>
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	4a2c      	ldr	r2, [pc, #176]	; (800c738 <TIM_Base_SetConfig+0x118>)
 800c686:	4293      	cmp	r3, r2
 800c688:	d023      	beq.n	800c6d2 <TIM_Base_SetConfig+0xb2>
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	4a2b      	ldr	r2, [pc, #172]	; (800c73c <TIM_Base_SetConfig+0x11c>)
 800c68e:	4293      	cmp	r3, r2
 800c690:	d01f      	beq.n	800c6d2 <TIM_Base_SetConfig+0xb2>
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	4a2a      	ldr	r2, [pc, #168]	; (800c740 <TIM_Base_SetConfig+0x120>)
 800c696:	4293      	cmp	r3, r2
 800c698:	d01b      	beq.n	800c6d2 <TIM_Base_SetConfig+0xb2>
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	4a29      	ldr	r2, [pc, #164]	; (800c744 <TIM_Base_SetConfig+0x124>)
 800c69e:	4293      	cmp	r3, r2
 800c6a0:	d017      	beq.n	800c6d2 <TIM_Base_SetConfig+0xb2>
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	4a28      	ldr	r2, [pc, #160]	; (800c748 <TIM_Base_SetConfig+0x128>)
 800c6a6:	4293      	cmp	r3, r2
 800c6a8:	d013      	beq.n	800c6d2 <TIM_Base_SetConfig+0xb2>
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	4a27      	ldr	r2, [pc, #156]	; (800c74c <TIM_Base_SetConfig+0x12c>)
 800c6ae:	4293      	cmp	r3, r2
 800c6b0:	d00f      	beq.n	800c6d2 <TIM_Base_SetConfig+0xb2>
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	4a26      	ldr	r2, [pc, #152]	; (800c750 <TIM_Base_SetConfig+0x130>)
 800c6b6:	4293      	cmp	r3, r2
 800c6b8:	d00b      	beq.n	800c6d2 <TIM_Base_SetConfig+0xb2>
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	4a25      	ldr	r2, [pc, #148]	; (800c754 <TIM_Base_SetConfig+0x134>)
 800c6be:	4293      	cmp	r3, r2
 800c6c0:	d007      	beq.n	800c6d2 <TIM_Base_SetConfig+0xb2>
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	4a24      	ldr	r2, [pc, #144]	; (800c758 <TIM_Base_SetConfig+0x138>)
 800c6c6:	4293      	cmp	r3, r2
 800c6c8:	d003      	beq.n	800c6d2 <TIM_Base_SetConfig+0xb2>
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	4a23      	ldr	r2, [pc, #140]	; (800c75c <TIM_Base_SetConfig+0x13c>)
 800c6ce:	4293      	cmp	r3, r2
 800c6d0:	d108      	bne.n	800c6e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c6d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	68db      	ldr	r3, [r3, #12]
 800c6de:	68fa      	ldr	r2, [r7, #12]
 800c6e0:	4313      	orrs	r3, r2
 800c6e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	695b      	ldr	r3, [r3, #20]
 800c6ee:	4313      	orrs	r3, r2
 800c6f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	68fa      	ldr	r2, [r7, #12]
 800c6f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c6f8:	683b      	ldr	r3, [r7, #0]
 800c6fa:	689a      	ldr	r2, [r3, #8]
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c700:	683b      	ldr	r3, [r7, #0]
 800c702:	681a      	ldr	r2, [r3, #0]
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	4a0a      	ldr	r2, [pc, #40]	; (800c734 <TIM_Base_SetConfig+0x114>)
 800c70c:	4293      	cmp	r3, r2
 800c70e:	d003      	beq.n	800c718 <TIM_Base_SetConfig+0xf8>
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	4a0c      	ldr	r2, [pc, #48]	; (800c744 <TIM_Base_SetConfig+0x124>)
 800c714:	4293      	cmp	r3, r2
 800c716:	d103      	bne.n	800c720 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	691a      	ldr	r2, [r3, #16]
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2201      	movs	r2, #1
 800c724:	615a      	str	r2, [r3, #20]
}
 800c726:	bf00      	nop
 800c728:	3714      	adds	r7, #20
 800c72a:	46bd      	mov	sp, r7
 800c72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c730:	4770      	bx	lr
 800c732:	bf00      	nop
 800c734:	40010000 	.word	0x40010000
 800c738:	40000400 	.word	0x40000400
 800c73c:	40000800 	.word	0x40000800
 800c740:	40000c00 	.word	0x40000c00
 800c744:	40010400 	.word	0x40010400
 800c748:	40014000 	.word	0x40014000
 800c74c:	40014400 	.word	0x40014400
 800c750:	40014800 	.word	0x40014800
 800c754:	40001800 	.word	0x40001800
 800c758:	40001c00 	.word	0x40001c00
 800c75c:	40002000 	.word	0x40002000

0800c760 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c760:	b480      	push	{r7}
 800c762:	b083      	sub	sp, #12
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c768:	bf00      	nop
 800c76a:	370c      	adds	r7, #12
 800c76c:	46bd      	mov	sp, r7
 800c76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c772:	4770      	bx	lr

0800c774 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c774:	b480      	push	{r7}
 800c776:	b083      	sub	sp, #12
 800c778:	af00      	add	r7, sp, #0
 800c77a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c77c:	bf00      	nop
 800c77e:	370c      	adds	r7, #12
 800c780:	46bd      	mov	sp, r7
 800c782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c786:	4770      	bx	lr

0800c788 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c788:	b480      	push	{r7}
 800c78a:	b083      	sub	sp, #12
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c790:	bf00      	nop
 800c792:	370c      	adds	r7, #12
 800c794:	46bd      	mov	sp, r7
 800c796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79a:	4770      	bx	lr

0800c79c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b082      	sub	sp, #8
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d101      	bne.n	800c7ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c7aa:	2301      	movs	r3, #1
 800c7ac:	e040      	b.n	800c830 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d106      	bne.n	800c7c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c7be:	6878      	ldr	r0, [r7, #4]
 800c7c0:	f7f8 f8f4 	bl	80049ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	2224      	movs	r2, #36	; 0x24
 800c7c8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	681a      	ldr	r2, [r3, #0]
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	f022 0201 	bic.w	r2, r2, #1
 800c7d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c7da:	6878      	ldr	r0, [r7, #4]
 800c7dc:	f000 f82c 	bl	800c838 <UART_SetConfig>
 800c7e0:	4603      	mov	r3, r0
 800c7e2:	2b01      	cmp	r3, #1
 800c7e4:	d101      	bne.n	800c7ea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800c7e6:	2301      	movs	r3, #1
 800c7e8:	e022      	b.n	800c830 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d002      	beq.n	800c7f8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800c7f2:	6878      	ldr	r0, [r7, #4]
 800c7f4:	f000 fa84 	bl	800cd00 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	685a      	ldr	r2, [r3, #4]
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c806:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	689a      	ldr	r2, [r3, #8]
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c816:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	681a      	ldr	r2, [r3, #0]
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	f042 0201 	orr.w	r2, r2, #1
 800c826:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c828:	6878      	ldr	r0, [r7, #4]
 800c82a:	f000 fb0b 	bl	800ce44 <UART_CheckIdleState>
 800c82e:	4603      	mov	r3, r0
}
 800c830:	4618      	mov	r0, r3
 800c832:	3708      	adds	r7, #8
 800c834:	46bd      	mov	sp, r7
 800c836:	bd80      	pop	{r7, pc}

0800c838 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c838:	b580      	push	{r7, lr}
 800c83a:	b088      	sub	sp, #32
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c840:	2300      	movs	r3, #0
 800c842:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	689a      	ldr	r2, [r3, #8]
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	691b      	ldr	r3, [r3, #16]
 800c84c:	431a      	orrs	r2, r3
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	695b      	ldr	r3, [r3, #20]
 800c852:	431a      	orrs	r2, r3
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	69db      	ldr	r3, [r3, #28]
 800c858:	4313      	orrs	r3, r2
 800c85a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	681a      	ldr	r2, [r3, #0]
 800c862:	4ba6      	ldr	r3, [pc, #664]	; (800cafc <UART_SetConfig+0x2c4>)
 800c864:	4013      	ands	r3, r2
 800c866:	687a      	ldr	r2, [r7, #4]
 800c868:	6812      	ldr	r2, [r2, #0]
 800c86a:	6979      	ldr	r1, [r7, #20]
 800c86c:	430b      	orrs	r3, r1
 800c86e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	685b      	ldr	r3, [r3, #4]
 800c876:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	68da      	ldr	r2, [r3, #12]
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	430a      	orrs	r2, r1
 800c884:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	699b      	ldr	r3, [r3, #24]
 800c88a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	6a1b      	ldr	r3, [r3, #32]
 800c890:	697a      	ldr	r2, [r7, #20]
 800c892:	4313      	orrs	r3, r2
 800c894:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	689b      	ldr	r3, [r3, #8]
 800c89c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	697a      	ldr	r2, [r7, #20]
 800c8a6:	430a      	orrs	r2, r1
 800c8a8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	4a94      	ldr	r2, [pc, #592]	; (800cb00 <UART_SetConfig+0x2c8>)
 800c8b0:	4293      	cmp	r3, r2
 800c8b2:	d120      	bne.n	800c8f6 <UART_SetConfig+0xbe>
 800c8b4:	4b93      	ldr	r3, [pc, #588]	; (800cb04 <UART_SetConfig+0x2cc>)
 800c8b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c8ba:	f003 0303 	and.w	r3, r3, #3
 800c8be:	2b03      	cmp	r3, #3
 800c8c0:	d816      	bhi.n	800c8f0 <UART_SetConfig+0xb8>
 800c8c2:	a201      	add	r2, pc, #4	; (adr r2, 800c8c8 <UART_SetConfig+0x90>)
 800c8c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8c8:	0800c8d9 	.word	0x0800c8d9
 800c8cc:	0800c8e5 	.word	0x0800c8e5
 800c8d0:	0800c8df 	.word	0x0800c8df
 800c8d4:	0800c8eb 	.word	0x0800c8eb
 800c8d8:	2301      	movs	r3, #1
 800c8da:	77fb      	strb	r3, [r7, #31]
 800c8dc:	e150      	b.n	800cb80 <UART_SetConfig+0x348>
 800c8de:	2302      	movs	r3, #2
 800c8e0:	77fb      	strb	r3, [r7, #31]
 800c8e2:	e14d      	b.n	800cb80 <UART_SetConfig+0x348>
 800c8e4:	2304      	movs	r3, #4
 800c8e6:	77fb      	strb	r3, [r7, #31]
 800c8e8:	e14a      	b.n	800cb80 <UART_SetConfig+0x348>
 800c8ea:	2308      	movs	r3, #8
 800c8ec:	77fb      	strb	r3, [r7, #31]
 800c8ee:	e147      	b.n	800cb80 <UART_SetConfig+0x348>
 800c8f0:	2310      	movs	r3, #16
 800c8f2:	77fb      	strb	r3, [r7, #31]
 800c8f4:	e144      	b.n	800cb80 <UART_SetConfig+0x348>
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	4a83      	ldr	r2, [pc, #524]	; (800cb08 <UART_SetConfig+0x2d0>)
 800c8fc:	4293      	cmp	r3, r2
 800c8fe:	d132      	bne.n	800c966 <UART_SetConfig+0x12e>
 800c900:	4b80      	ldr	r3, [pc, #512]	; (800cb04 <UART_SetConfig+0x2cc>)
 800c902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c906:	f003 030c 	and.w	r3, r3, #12
 800c90a:	2b0c      	cmp	r3, #12
 800c90c:	d828      	bhi.n	800c960 <UART_SetConfig+0x128>
 800c90e:	a201      	add	r2, pc, #4	; (adr r2, 800c914 <UART_SetConfig+0xdc>)
 800c910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c914:	0800c949 	.word	0x0800c949
 800c918:	0800c961 	.word	0x0800c961
 800c91c:	0800c961 	.word	0x0800c961
 800c920:	0800c961 	.word	0x0800c961
 800c924:	0800c955 	.word	0x0800c955
 800c928:	0800c961 	.word	0x0800c961
 800c92c:	0800c961 	.word	0x0800c961
 800c930:	0800c961 	.word	0x0800c961
 800c934:	0800c94f 	.word	0x0800c94f
 800c938:	0800c961 	.word	0x0800c961
 800c93c:	0800c961 	.word	0x0800c961
 800c940:	0800c961 	.word	0x0800c961
 800c944:	0800c95b 	.word	0x0800c95b
 800c948:	2300      	movs	r3, #0
 800c94a:	77fb      	strb	r3, [r7, #31]
 800c94c:	e118      	b.n	800cb80 <UART_SetConfig+0x348>
 800c94e:	2302      	movs	r3, #2
 800c950:	77fb      	strb	r3, [r7, #31]
 800c952:	e115      	b.n	800cb80 <UART_SetConfig+0x348>
 800c954:	2304      	movs	r3, #4
 800c956:	77fb      	strb	r3, [r7, #31]
 800c958:	e112      	b.n	800cb80 <UART_SetConfig+0x348>
 800c95a:	2308      	movs	r3, #8
 800c95c:	77fb      	strb	r3, [r7, #31]
 800c95e:	e10f      	b.n	800cb80 <UART_SetConfig+0x348>
 800c960:	2310      	movs	r3, #16
 800c962:	77fb      	strb	r3, [r7, #31]
 800c964:	e10c      	b.n	800cb80 <UART_SetConfig+0x348>
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	4a68      	ldr	r2, [pc, #416]	; (800cb0c <UART_SetConfig+0x2d4>)
 800c96c:	4293      	cmp	r3, r2
 800c96e:	d120      	bne.n	800c9b2 <UART_SetConfig+0x17a>
 800c970:	4b64      	ldr	r3, [pc, #400]	; (800cb04 <UART_SetConfig+0x2cc>)
 800c972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c976:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c97a:	2b30      	cmp	r3, #48	; 0x30
 800c97c:	d013      	beq.n	800c9a6 <UART_SetConfig+0x16e>
 800c97e:	2b30      	cmp	r3, #48	; 0x30
 800c980:	d814      	bhi.n	800c9ac <UART_SetConfig+0x174>
 800c982:	2b20      	cmp	r3, #32
 800c984:	d009      	beq.n	800c99a <UART_SetConfig+0x162>
 800c986:	2b20      	cmp	r3, #32
 800c988:	d810      	bhi.n	800c9ac <UART_SetConfig+0x174>
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d002      	beq.n	800c994 <UART_SetConfig+0x15c>
 800c98e:	2b10      	cmp	r3, #16
 800c990:	d006      	beq.n	800c9a0 <UART_SetConfig+0x168>
 800c992:	e00b      	b.n	800c9ac <UART_SetConfig+0x174>
 800c994:	2300      	movs	r3, #0
 800c996:	77fb      	strb	r3, [r7, #31]
 800c998:	e0f2      	b.n	800cb80 <UART_SetConfig+0x348>
 800c99a:	2302      	movs	r3, #2
 800c99c:	77fb      	strb	r3, [r7, #31]
 800c99e:	e0ef      	b.n	800cb80 <UART_SetConfig+0x348>
 800c9a0:	2304      	movs	r3, #4
 800c9a2:	77fb      	strb	r3, [r7, #31]
 800c9a4:	e0ec      	b.n	800cb80 <UART_SetConfig+0x348>
 800c9a6:	2308      	movs	r3, #8
 800c9a8:	77fb      	strb	r3, [r7, #31]
 800c9aa:	e0e9      	b.n	800cb80 <UART_SetConfig+0x348>
 800c9ac:	2310      	movs	r3, #16
 800c9ae:	77fb      	strb	r3, [r7, #31]
 800c9b0:	e0e6      	b.n	800cb80 <UART_SetConfig+0x348>
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	4a56      	ldr	r2, [pc, #344]	; (800cb10 <UART_SetConfig+0x2d8>)
 800c9b8:	4293      	cmp	r3, r2
 800c9ba:	d120      	bne.n	800c9fe <UART_SetConfig+0x1c6>
 800c9bc:	4b51      	ldr	r3, [pc, #324]	; (800cb04 <UART_SetConfig+0x2cc>)
 800c9be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c9c2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c9c6:	2bc0      	cmp	r3, #192	; 0xc0
 800c9c8:	d013      	beq.n	800c9f2 <UART_SetConfig+0x1ba>
 800c9ca:	2bc0      	cmp	r3, #192	; 0xc0
 800c9cc:	d814      	bhi.n	800c9f8 <UART_SetConfig+0x1c0>
 800c9ce:	2b80      	cmp	r3, #128	; 0x80
 800c9d0:	d009      	beq.n	800c9e6 <UART_SetConfig+0x1ae>
 800c9d2:	2b80      	cmp	r3, #128	; 0x80
 800c9d4:	d810      	bhi.n	800c9f8 <UART_SetConfig+0x1c0>
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d002      	beq.n	800c9e0 <UART_SetConfig+0x1a8>
 800c9da:	2b40      	cmp	r3, #64	; 0x40
 800c9dc:	d006      	beq.n	800c9ec <UART_SetConfig+0x1b4>
 800c9de:	e00b      	b.n	800c9f8 <UART_SetConfig+0x1c0>
 800c9e0:	2300      	movs	r3, #0
 800c9e2:	77fb      	strb	r3, [r7, #31]
 800c9e4:	e0cc      	b.n	800cb80 <UART_SetConfig+0x348>
 800c9e6:	2302      	movs	r3, #2
 800c9e8:	77fb      	strb	r3, [r7, #31]
 800c9ea:	e0c9      	b.n	800cb80 <UART_SetConfig+0x348>
 800c9ec:	2304      	movs	r3, #4
 800c9ee:	77fb      	strb	r3, [r7, #31]
 800c9f0:	e0c6      	b.n	800cb80 <UART_SetConfig+0x348>
 800c9f2:	2308      	movs	r3, #8
 800c9f4:	77fb      	strb	r3, [r7, #31]
 800c9f6:	e0c3      	b.n	800cb80 <UART_SetConfig+0x348>
 800c9f8:	2310      	movs	r3, #16
 800c9fa:	77fb      	strb	r3, [r7, #31]
 800c9fc:	e0c0      	b.n	800cb80 <UART_SetConfig+0x348>
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	4a44      	ldr	r2, [pc, #272]	; (800cb14 <UART_SetConfig+0x2dc>)
 800ca04:	4293      	cmp	r3, r2
 800ca06:	d125      	bne.n	800ca54 <UART_SetConfig+0x21c>
 800ca08:	4b3e      	ldr	r3, [pc, #248]	; (800cb04 <UART_SetConfig+0x2cc>)
 800ca0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ca0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ca12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ca16:	d017      	beq.n	800ca48 <UART_SetConfig+0x210>
 800ca18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ca1c:	d817      	bhi.n	800ca4e <UART_SetConfig+0x216>
 800ca1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca22:	d00b      	beq.n	800ca3c <UART_SetConfig+0x204>
 800ca24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca28:	d811      	bhi.n	800ca4e <UART_SetConfig+0x216>
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d003      	beq.n	800ca36 <UART_SetConfig+0x1fe>
 800ca2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca32:	d006      	beq.n	800ca42 <UART_SetConfig+0x20a>
 800ca34:	e00b      	b.n	800ca4e <UART_SetConfig+0x216>
 800ca36:	2300      	movs	r3, #0
 800ca38:	77fb      	strb	r3, [r7, #31]
 800ca3a:	e0a1      	b.n	800cb80 <UART_SetConfig+0x348>
 800ca3c:	2302      	movs	r3, #2
 800ca3e:	77fb      	strb	r3, [r7, #31]
 800ca40:	e09e      	b.n	800cb80 <UART_SetConfig+0x348>
 800ca42:	2304      	movs	r3, #4
 800ca44:	77fb      	strb	r3, [r7, #31]
 800ca46:	e09b      	b.n	800cb80 <UART_SetConfig+0x348>
 800ca48:	2308      	movs	r3, #8
 800ca4a:	77fb      	strb	r3, [r7, #31]
 800ca4c:	e098      	b.n	800cb80 <UART_SetConfig+0x348>
 800ca4e:	2310      	movs	r3, #16
 800ca50:	77fb      	strb	r3, [r7, #31]
 800ca52:	e095      	b.n	800cb80 <UART_SetConfig+0x348>
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	4a2f      	ldr	r2, [pc, #188]	; (800cb18 <UART_SetConfig+0x2e0>)
 800ca5a:	4293      	cmp	r3, r2
 800ca5c:	d125      	bne.n	800caaa <UART_SetConfig+0x272>
 800ca5e:	4b29      	ldr	r3, [pc, #164]	; (800cb04 <UART_SetConfig+0x2cc>)
 800ca60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ca64:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ca68:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ca6c:	d017      	beq.n	800ca9e <UART_SetConfig+0x266>
 800ca6e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ca72:	d817      	bhi.n	800caa4 <UART_SetConfig+0x26c>
 800ca74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ca78:	d00b      	beq.n	800ca92 <UART_SetConfig+0x25a>
 800ca7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ca7e:	d811      	bhi.n	800caa4 <UART_SetConfig+0x26c>
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d003      	beq.n	800ca8c <UART_SetConfig+0x254>
 800ca84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ca88:	d006      	beq.n	800ca98 <UART_SetConfig+0x260>
 800ca8a:	e00b      	b.n	800caa4 <UART_SetConfig+0x26c>
 800ca8c:	2301      	movs	r3, #1
 800ca8e:	77fb      	strb	r3, [r7, #31]
 800ca90:	e076      	b.n	800cb80 <UART_SetConfig+0x348>
 800ca92:	2302      	movs	r3, #2
 800ca94:	77fb      	strb	r3, [r7, #31]
 800ca96:	e073      	b.n	800cb80 <UART_SetConfig+0x348>
 800ca98:	2304      	movs	r3, #4
 800ca9a:	77fb      	strb	r3, [r7, #31]
 800ca9c:	e070      	b.n	800cb80 <UART_SetConfig+0x348>
 800ca9e:	2308      	movs	r3, #8
 800caa0:	77fb      	strb	r3, [r7, #31]
 800caa2:	e06d      	b.n	800cb80 <UART_SetConfig+0x348>
 800caa4:	2310      	movs	r3, #16
 800caa6:	77fb      	strb	r3, [r7, #31]
 800caa8:	e06a      	b.n	800cb80 <UART_SetConfig+0x348>
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	4a1b      	ldr	r2, [pc, #108]	; (800cb1c <UART_SetConfig+0x2e4>)
 800cab0:	4293      	cmp	r3, r2
 800cab2:	d138      	bne.n	800cb26 <UART_SetConfig+0x2ee>
 800cab4:	4b13      	ldr	r3, [pc, #76]	; (800cb04 <UART_SetConfig+0x2cc>)
 800cab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800caba:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800cabe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cac2:	d017      	beq.n	800caf4 <UART_SetConfig+0x2bc>
 800cac4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cac8:	d82a      	bhi.n	800cb20 <UART_SetConfig+0x2e8>
 800caca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cace:	d00b      	beq.n	800cae8 <UART_SetConfig+0x2b0>
 800cad0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cad4:	d824      	bhi.n	800cb20 <UART_SetConfig+0x2e8>
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d003      	beq.n	800cae2 <UART_SetConfig+0x2aa>
 800cada:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cade:	d006      	beq.n	800caee <UART_SetConfig+0x2b6>
 800cae0:	e01e      	b.n	800cb20 <UART_SetConfig+0x2e8>
 800cae2:	2300      	movs	r3, #0
 800cae4:	77fb      	strb	r3, [r7, #31]
 800cae6:	e04b      	b.n	800cb80 <UART_SetConfig+0x348>
 800cae8:	2302      	movs	r3, #2
 800caea:	77fb      	strb	r3, [r7, #31]
 800caec:	e048      	b.n	800cb80 <UART_SetConfig+0x348>
 800caee:	2304      	movs	r3, #4
 800caf0:	77fb      	strb	r3, [r7, #31]
 800caf2:	e045      	b.n	800cb80 <UART_SetConfig+0x348>
 800caf4:	2308      	movs	r3, #8
 800caf6:	77fb      	strb	r3, [r7, #31]
 800caf8:	e042      	b.n	800cb80 <UART_SetConfig+0x348>
 800cafa:	bf00      	nop
 800cafc:	efff69f3 	.word	0xefff69f3
 800cb00:	40011000 	.word	0x40011000
 800cb04:	40023800 	.word	0x40023800
 800cb08:	40004400 	.word	0x40004400
 800cb0c:	40004800 	.word	0x40004800
 800cb10:	40004c00 	.word	0x40004c00
 800cb14:	40005000 	.word	0x40005000
 800cb18:	40011400 	.word	0x40011400
 800cb1c:	40007800 	.word	0x40007800
 800cb20:	2310      	movs	r3, #16
 800cb22:	77fb      	strb	r3, [r7, #31]
 800cb24:	e02c      	b.n	800cb80 <UART_SetConfig+0x348>
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	4a72      	ldr	r2, [pc, #456]	; (800ccf4 <UART_SetConfig+0x4bc>)
 800cb2c:	4293      	cmp	r3, r2
 800cb2e:	d125      	bne.n	800cb7c <UART_SetConfig+0x344>
 800cb30:	4b71      	ldr	r3, [pc, #452]	; (800ccf8 <UART_SetConfig+0x4c0>)
 800cb32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cb36:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800cb3a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800cb3e:	d017      	beq.n	800cb70 <UART_SetConfig+0x338>
 800cb40:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800cb44:	d817      	bhi.n	800cb76 <UART_SetConfig+0x33e>
 800cb46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cb4a:	d00b      	beq.n	800cb64 <UART_SetConfig+0x32c>
 800cb4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cb50:	d811      	bhi.n	800cb76 <UART_SetConfig+0x33e>
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d003      	beq.n	800cb5e <UART_SetConfig+0x326>
 800cb56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cb5a:	d006      	beq.n	800cb6a <UART_SetConfig+0x332>
 800cb5c:	e00b      	b.n	800cb76 <UART_SetConfig+0x33e>
 800cb5e:	2300      	movs	r3, #0
 800cb60:	77fb      	strb	r3, [r7, #31]
 800cb62:	e00d      	b.n	800cb80 <UART_SetConfig+0x348>
 800cb64:	2302      	movs	r3, #2
 800cb66:	77fb      	strb	r3, [r7, #31]
 800cb68:	e00a      	b.n	800cb80 <UART_SetConfig+0x348>
 800cb6a:	2304      	movs	r3, #4
 800cb6c:	77fb      	strb	r3, [r7, #31]
 800cb6e:	e007      	b.n	800cb80 <UART_SetConfig+0x348>
 800cb70:	2308      	movs	r3, #8
 800cb72:	77fb      	strb	r3, [r7, #31]
 800cb74:	e004      	b.n	800cb80 <UART_SetConfig+0x348>
 800cb76:	2310      	movs	r3, #16
 800cb78:	77fb      	strb	r3, [r7, #31]
 800cb7a:	e001      	b.n	800cb80 <UART_SetConfig+0x348>
 800cb7c:	2310      	movs	r3, #16
 800cb7e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	69db      	ldr	r3, [r3, #28]
 800cb84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cb88:	d15b      	bne.n	800cc42 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800cb8a:	7ffb      	ldrb	r3, [r7, #31]
 800cb8c:	2b08      	cmp	r3, #8
 800cb8e:	d828      	bhi.n	800cbe2 <UART_SetConfig+0x3aa>
 800cb90:	a201      	add	r2, pc, #4	; (adr r2, 800cb98 <UART_SetConfig+0x360>)
 800cb92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb96:	bf00      	nop
 800cb98:	0800cbbd 	.word	0x0800cbbd
 800cb9c:	0800cbc5 	.word	0x0800cbc5
 800cba0:	0800cbcd 	.word	0x0800cbcd
 800cba4:	0800cbe3 	.word	0x0800cbe3
 800cba8:	0800cbd3 	.word	0x0800cbd3
 800cbac:	0800cbe3 	.word	0x0800cbe3
 800cbb0:	0800cbe3 	.word	0x0800cbe3
 800cbb4:	0800cbe3 	.word	0x0800cbe3
 800cbb8:	0800cbdb 	.word	0x0800cbdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cbbc:	f7fc ff6a 	bl	8009a94 <HAL_RCC_GetPCLK1Freq>
 800cbc0:	61b8      	str	r0, [r7, #24]
        break;
 800cbc2:	e013      	b.n	800cbec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cbc4:	f7fc ff7a 	bl	8009abc <HAL_RCC_GetPCLK2Freq>
 800cbc8:	61b8      	str	r0, [r7, #24]
        break;
 800cbca:	e00f      	b.n	800cbec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cbcc:	4b4b      	ldr	r3, [pc, #300]	; (800ccfc <UART_SetConfig+0x4c4>)
 800cbce:	61bb      	str	r3, [r7, #24]
        break;
 800cbd0:	e00c      	b.n	800cbec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cbd2:	f7fc fe8d 	bl	80098f0 <HAL_RCC_GetSysClockFreq>
 800cbd6:	61b8      	str	r0, [r7, #24]
        break;
 800cbd8:	e008      	b.n	800cbec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cbda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cbde:	61bb      	str	r3, [r7, #24]
        break;
 800cbe0:	e004      	b.n	800cbec <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800cbe6:	2301      	movs	r3, #1
 800cbe8:	77bb      	strb	r3, [r7, #30]
        break;
 800cbea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cbec:	69bb      	ldr	r3, [r7, #24]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d074      	beq.n	800ccdc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800cbf2:	69bb      	ldr	r3, [r7, #24]
 800cbf4:	005a      	lsls	r2, r3, #1
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	685b      	ldr	r3, [r3, #4]
 800cbfa:	085b      	lsrs	r3, r3, #1
 800cbfc:	441a      	add	r2, r3
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	685b      	ldr	r3, [r3, #4]
 800cc02:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc06:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cc08:	693b      	ldr	r3, [r7, #16]
 800cc0a:	2b0f      	cmp	r3, #15
 800cc0c:	d916      	bls.n	800cc3c <UART_SetConfig+0x404>
 800cc0e:	693b      	ldr	r3, [r7, #16]
 800cc10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc14:	d212      	bcs.n	800cc3c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cc16:	693b      	ldr	r3, [r7, #16]
 800cc18:	b29b      	uxth	r3, r3
 800cc1a:	f023 030f 	bic.w	r3, r3, #15
 800cc1e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cc20:	693b      	ldr	r3, [r7, #16]
 800cc22:	085b      	lsrs	r3, r3, #1
 800cc24:	b29b      	uxth	r3, r3
 800cc26:	f003 0307 	and.w	r3, r3, #7
 800cc2a:	b29a      	uxth	r2, r3
 800cc2c:	89fb      	ldrh	r3, [r7, #14]
 800cc2e:	4313      	orrs	r3, r2
 800cc30:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	89fa      	ldrh	r2, [r7, #14]
 800cc38:	60da      	str	r2, [r3, #12]
 800cc3a:	e04f      	b.n	800ccdc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800cc3c:	2301      	movs	r3, #1
 800cc3e:	77bb      	strb	r3, [r7, #30]
 800cc40:	e04c      	b.n	800ccdc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cc42:	7ffb      	ldrb	r3, [r7, #31]
 800cc44:	2b08      	cmp	r3, #8
 800cc46:	d828      	bhi.n	800cc9a <UART_SetConfig+0x462>
 800cc48:	a201      	add	r2, pc, #4	; (adr r2, 800cc50 <UART_SetConfig+0x418>)
 800cc4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc4e:	bf00      	nop
 800cc50:	0800cc75 	.word	0x0800cc75
 800cc54:	0800cc7d 	.word	0x0800cc7d
 800cc58:	0800cc85 	.word	0x0800cc85
 800cc5c:	0800cc9b 	.word	0x0800cc9b
 800cc60:	0800cc8b 	.word	0x0800cc8b
 800cc64:	0800cc9b 	.word	0x0800cc9b
 800cc68:	0800cc9b 	.word	0x0800cc9b
 800cc6c:	0800cc9b 	.word	0x0800cc9b
 800cc70:	0800cc93 	.word	0x0800cc93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cc74:	f7fc ff0e 	bl	8009a94 <HAL_RCC_GetPCLK1Freq>
 800cc78:	61b8      	str	r0, [r7, #24]
        break;
 800cc7a:	e013      	b.n	800cca4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cc7c:	f7fc ff1e 	bl	8009abc <HAL_RCC_GetPCLK2Freq>
 800cc80:	61b8      	str	r0, [r7, #24]
        break;
 800cc82:	e00f      	b.n	800cca4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cc84:	4b1d      	ldr	r3, [pc, #116]	; (800ccfc <UART_SetConfig+0x4c4>)
 800cc86:	61bb      	str	r3, [r7, #24]
        break;
 800cc88:	e00c      	b.n	800cca4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cc8a:	f7fc fe31 	bl	80098f0 <HAL_RCC_GetSysClockFreq>
 800cc8e:	61b8      	str	r0, [r7, #24]
        break;
 800cc90:	e008      	b.n	800cca4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cc92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cc96:	61bb      	str	r3, [r7, #24]
        break;
 800cc98:	e004      	b.n	800cca4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800cc9e:	2301      	movs	r3, #1
 800cca0:	77bb      	strb	r3, [r7, #30]
        break;
 800cca2:	bf00      	nop
    }

    if (pclk != 0U)
 800cca4:	69bb      	ldr	r3, [r7, #24]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d018      	beq.n	800ccdc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	685b      	ldr	r3, [r3, #4]
 800ccae:	085a      	lsrs	r2, r3, #1
 800ccb0:	69bb      	ldr	r3, [r7, #24]
 800ccb2:	441a      	add	r2, r3
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	685b      	ldr	r3, [r3, #4]
 800ccb8:	fbb2 f3f3 	udiv	r3, r2, r3
 800ccbc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ccbe:	693b      	ldr	r3, [r7, #16]
 800ccc0:	2b0f      	cmp	r3, #15
 800ccc2:	d909      	bls.n	800ccd8 <UART_SetConfig+0x4a0>
 800ccc4:	693b      	ldr	r3, [r7, #16]
 800ccc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ccca:	d205      	bcs.n	800ccd8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cccc:	693b      	ldr	r3, [r7, #16]
 800ccce:	b29a      	uxth	r2, r3
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	60da      	str	r2, [r3, #12]
 800ccd6:	e001      	b.n	800ccdc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800ccd8:	2301      	movs	r3, #1
 800ccda:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	2200      	movs	r2, #0
 800cce0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	2200      	movs	r2, #0
 800cce6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800cce8:	7fbb      	ldrb	r3, [r7, #30]
}
 800ccea:	4618      	mov	r0, r3
 800ccec:	3720      	adds	r7, #32
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	bd80      	pop	{r7, pc}
 800ccf2:	bf00      	nop
 800ccf4:	40007c00 	.word	0x40007c00
 800ccf8:	40023800 	.word	0x40023800
 800ccfc:	00f42400 	.word	0x00f42400

0800cd00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cd00:	b480      	push	{r7}
 800cd02:	b083      	sub	sp, #12
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd0c:	f003 0301 	and.w	r3, r3, #1
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d00a      	beq.n	800cd2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	685b      	ldr	r3, [r3, #4]
 800cd1a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	430a      	orrs	r2, r1
 800cd28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd2e:	f003 0302 	and.w	r3, r3, #2
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d00a      	beq.n	800cd4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	685b      	ldr	r3, [r3, #4]
 800cd3c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	430a      	orrs	r2, r1
 800cd4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd50:	f003 0304 	and.w	r3, r3, #4
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d00a      	beq.n	800cd6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	685b      	ldr	r3, [r3, #4]
 800cd5e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	430a      	orrs	r2, r1
 800cd6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd72:	f003 0308 	and.w	r3, r3, #8
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d00a      	beq.n	800cd90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	685b      	ldr	r3, [r3, #4]
 800cd80:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	430a      	orrs	r2, r1
 800cd8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd94:	f003 0310 	and.w	r3, r3, #16
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d00a      	beq.n	800cdb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	689b      	ldr	r3, [r3, #8]
 800cda2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	430a      	orrs	r2, r1
 800cdb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdb6:	f003 0320 	and.w	r3, r3, #32
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d00a      	beq.n	800cdd4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	689b      	ldr	r3, [r3, #8]
 800cdc4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	430a      	orrs	r2, r1
 800cdd2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d01a      	beq.n	800ce16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	685b      	ldr	r3, [r3, #4]
 800cde6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	430a      	orrs	r2, r1
 800cdf4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cdfe:	d10a      	bne.n	800ce16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	685b      	ldr	r3, [r3, #4]
 800ce06:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	430a      	orrs	r2, r1
 800ce14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d00a      	beq.n	800ce38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	685b      	ldr	r3, [r3, #4]
 800ce28:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	430a      	orrs	r2, r1
 800ce36:	605a      	str	r2, [r3, #4]
  }
}
 800ce38:	bf00      	nop
 800ce3a:	370c      	adds	r7, #12
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce42:	4770      	bx	lr

0800ce44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b086      	sub	sp, #24
 800ce48:	af02      	add	r7, sp, #8
 800ce4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	2200      	movs	r2, #0
 800ce50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ce54:	f7f9 fdae 	bl	80069b4 <HAL_GetTick>
 800ce58:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	f003 0308 	and.w	r3, r3, #8
 800ce64:	2b08      	cmp	r3, #8
 800ce66:	d10e      	bne.n	800ce86 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ce68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ce6c:	9300      	str	r3, [sp, #0]
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	2200      	movs	r2, #0
 800ce72:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ce76:	6878      	ldr	r0, [r7, #4]
 800ce78:	f000 f81b 	bl	800ceb2 <UART_WaitOnFlagUntilTimeout>
 800ce7c:	4603      	mov	r3, r0
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d001      	beq.n	800ce86 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ce82:	2303      	movs	r3, #3
 800ce84:	e011      	b.n	800ceaa <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	2220      	movs	r2, #32
 800ce8a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	2220      	movs	r2, #32
 800ce90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	2200      	movs	r2, #0
 800ce98:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	2200      	movs	r2, #0
 800ce9e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	2200      	movs	r2, #0
 800cea4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800cea8:	2300      	movs	r3, #0
}
 800ceaa:	4618      	mov	r0, r3
 800ceac:	3710      	adds	r7, #16
 800ceae:	46bd      	mov	sp, r7
 800ceb0:	bd80      	pop	{r7, pc}

0800ceb2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ceb2:	b580      	push	{r7, lr}
 800ceb4:	b09c      	sub	sp, #112	; 0x70
 800ceb6:	af00      	add	r7, sp, #0
 800ceb8:	60f8      	str	r0, [r7, #12]
 800ceba:	60b9      	str	r1, [r7, #8]
 800cebc:	603b      	str	r3, [r7, #0]
 800cebe:	4613      	mov	r3, r2
 800cec0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cec2:	e0a7      	b.n	800d014 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cec4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ceca:	f000 80a3 	beq.w	800d014 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cece:	f7f9 fd71 	bl	80069b4 <HAL_GetTick>
 800ced2:	4602      	mov	r2, r0
 800ced4:	683b      	ldr	r3, [r7, #0]
 800ced6:	1ad3      	subs	r3, r2, r3
 800ced8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ceda:	429a      	cmp	r2, r3
 800cedc:	d302      	bcc.n	800cee4 <UART_WaitOnFlagUntilTimeout+0x32>
 800cede:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d13f      	bne.n	800cf64 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ceea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ceec:	e853 3f00 	ldrex	r3, [r3]
 800cef0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800cef2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cef4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cef8:	667b      	str	r3, [r7, #100]	; 0x64
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	461a      	mov	r2, r3
 800cf00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cf02:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cf04:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf06:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cf08:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cf0a:	e841 2300 	strex	r3, r2, [r1]
 800cf0e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800cf10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d1e6      	bne.n	800cee4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	3308      	adds	r3, #8
 800cf1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf20:	e853 3f00 	ldrex	r3, [r3]
 800cf24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cf26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf28:	f023 0301 	bic.w	r3, r3, #1
 800cf2c:	663b      	str	r3, [r7, #96]	; 0x60
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	3308      	adds	r3, #8
 800cf34:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cf36:	64ba      	str	r2, [r7, #72]	; 0x48
 800cf38:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf3a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cf3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cf3e:	e841 2300 	strex	r3, r2, [r1]
 800cf42:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800cf44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d1e5      	bne.n	800cf16 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	2220      	movs	r2, #32
 800cf4e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	2220      	movs	r2, #32
 800cf54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800cf60:	2303      	movs	r3, #3
 800cf62:	e068      	b.n	800d036 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	f003 0304 	and.w	r3, r3, #4
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d050      	beq.n	800d014 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	69db      	ldr	r3, [r3, #28]
 800cf78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cf7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cf80:	d148      	bne.n	800d014 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cf8a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf94:	e853 3f00 	ldrex	r3, [r3]
 800cf98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cf9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf9c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cfa0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	461a      	mov	r2, r3
 800cfa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cfaa:	637b      	str	r3, [r7, #52]	; 0x34
 800cfac:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cfb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cfb2:	e841 2300 	strex	r3, r2, [r1]
 800cfb6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800cfb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d1e6      	bne.n	800cf8c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	3308      	adds	r3, #8
 800cfc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfc6:	697b      	ldr	r3, [r7, #20]
 800cfc8:	e853 3f00 	ldrex	r3, [r3]
 800cfcc:	613b      	str	r3, [r7, #16]
   return(result);
 800cfce:	693b      	ldr	r3, [r7, #16]
 800cfd0:	f023 0301 	bic.w	r3, r3, #1
 800cfd4:	66bb      	str	r3, [r7, #104]	; 0x68
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	3308      	adds	r3, #8
 800cfdc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cfde:	623a      	str	r2, [r7, #32]
 800cfe0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfe2:	69f9      	ldr	r1, [r7, #28]
 800cfe4:	6a3a      	ldr	r2, [r7, #32]
 800cfe6:	e841 2300 	strex	r3, r2, [r1]
 800cfea:	61bb      	str	r3, [r7, #24]
   return(result);
 800cfec:	69bb      	ldr	r3, [r7, #24]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d1e5      	bne.n	800cfbe <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	2220      	movs	r2, #32
 800cff6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	2220      	movs	r2, #32
 800cffc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	2220      	movs	r2, #32
 800d004:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	2200      	movs	r2, #0
 800d00c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800d010:	2303      	movs	r3, #3
 800d012:	e010      	b.n	800d036 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	69da      	ldr	r2, [r3, #28]
 800d01a:	68bb      	ldr	r3, [r7, #8]
 800d01c:	4013      	ands	r3, r2
 800d01e:	68ba      	ldr	r2, [r7, #8]
 800d020:	429a      	cmp	r2, r3
 800d022:	bf0c      	ite	eq
 800d024:	2301      	moveq	r3, #1
 800d026:	2300      	movne	r3, #0
 800d028:	b2db      	uxtb	r3, r3
 800d02a:	461a      	mov	r2, r3
 800d02c:	79fb      	ldrb	r3, [r7, #7]
 800d02e:	429a      	cmp	r2, r3
 800d030:	f43f af48 	beq.w	800cec4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d034:	2300      	movs	r3, #0
}
 800d036:	4618      	mov	r0, r3
 800d038:	3770      	adds	r7, #112	; 0x70
 800d03a:	46bd      	mov	sp, r7
 800d03c:	bd80      	pop	{r7, pc}
	...

0800d040 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800d040:	b480      	push	{r7}
 800d042:	b083      	sub	sp, #12
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
 800d048:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800d04a:	683b      	ldr	r3, [r7, #0]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d121      	bne.n	800d096 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	681a      	ldr	r2, [r3, #0]
 800d056:	4b27      	ldr	r3, [pc, #156]	; (800d0f4 <FMC_SDRAM_Init+0xb4>)
 800d058:	4013      	ands	r3, r2
 800d05a:	683a      	ldr	r2, [r7, #0]
 800d05c:	6851      	ldr	r1, [r2, #4]
 800d05e:	683a      	ldr	r2, [r7, #0]
 800d060:	6892      	ldr	r2, [r2, #8]
 800d062:	4311      	orrs	r1, r2
 800d064:	683a      	ldr	r2, [r7, #0]
 800d066:	68d2      	ldr	r2, [r2, #12]
 800d068:	4311      	orrs	r1, r2
 800d06a:	683a      	ldr	r2, [r7, #0]
 800d06c:	6912      	ldr	r2, [r2, #16]
 800d06e:	4311      	orrs	r1, r2
 800d070:	683a      	ldr	r2, [r7, #0]
 800d072:	6952      	ldr	r2, [r2, #20]
 800d074:	4311      	orrs	r1, r2
 800d076:	683a      	ldr	r2, [r7, #0]
 800d078:	6992      	ldr	r2, [r2, #24]
 800d07a:	4311      	orrs	r1, r2
 800d07c:	683a      	ldr	r2, [r7, #0]
 800d07e:	69d2      	ldr	r2, [r2, #28]
 800d080:	4311      	orrs	r1, r2
 800d082:	683a      	ldr	r2, [r7, #0]
 800d084:	6a12      	ldr	r2, [r2, #32]
 800d086:	4311      	orrs	r1, r2
 800d088:	683a      	ldr	r2, [r7, #0]
 800d08a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800d08c:	430a      	orrs	r2, r1
 800d08e:	431a      	orrs	r2, r3
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	601a      	str	r2, [r3, #0]
 800d094:	e026      	b.n	800d0e4 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800d09e:	683b      	ldr	r3, [r7, #0]
 800d0a0:	69d9      	ldr	r1, [r3, #28]
 800d0a2:	683b      	ldr	r3, [r7, #0]
 800d0a4:	6a1b      	ldr	r3, [r3, #32]
 800d0a6:	4319      	orrs	r1, r3
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0ac:	430b      	orrs	r3, r1
 800d0ae:	431a      	orrs	r2, r3
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	685a      	ldr	r2, [r3, #4]
 800d0b8:	4b0e      	ldr	r3, [pc, #56]	; (800d0f4 <FMC_SDRAM_Init+0xb4>)
 800d0ba:	4013      	ands	r3, r2
 800d0bc:	683a      	ldr	r2, [r7, #0]
 800d0be:	6851      	ldr	r1, [r2, #4]
 800d0c0:	683a      	ldr	r2, [r7, #0]
 800d0c2:	6892      	ldr	r2, [r2, #8]
 800d0c4:	4311      	orrs	r1, r2
 800d0c6:	683a      	ldr	r2, [r7, #0]
 800d0c8:	68d2      	ldr	r2, [r2, #12]
 800d0ca:	4311      	orrs	r1, r2
 800d0cc:	683a      	ldr	r2, [r7, #0]
 800d0ce:	6912      	ldr	r2, [r2, #16]
 800d0d0:	4311      	orrs	r1, r2
 800d0d2:	683a      	ldr	r2, [r7, #0]
 800d0d4:	6952      	ldr	r2, [r2, #20]
 800d0d6:	4311      	orrs	r1, r2
 800d0d8:	683a      	ldr	r2, [r7, #0]
 800d0da:	6992      	ldr	r2, [r2, #24]
 800d0dc:	430a      	orrs	r2, r1
 800d0de:	431a      	orrs	r2, r3
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800d0e4:	2300      	movs	r3, #0
}
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	370c      	adds	r7, #12
 800d0ea:	46bd      	mov	sp, r7
 800d0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f0:	4770      	bx	lr
 800d0f2:	bf00      	nop
 800d0f4:	ffff8000 	.word	0xffff8000

0800d0f8 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800d0f8:	b480      	push	{r7}
 800d0fa:	b085      	sub	sp, #20
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	60f8      	str	r0, [r7, #12]
 800d100:	60b9      	str	r1, [r7, #8]
 800d102:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d128      	bne.n	800d15c <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	689b      	ldr	r3, [r3, #8]
 800d10e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800d112:	68bb      	ldr	r3, [r7, #8]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	1e59      	subs	r1, r3, #1
 800d118:	68bb      	ldr	r3, [r7, #8]
 800d11a:	685b      	ldr	r3, [r3, #4]
 800d11c:	3b01      	subs	r3, #1
 800d11e:	011b      	lsls	r3, r3, #4
 800d120:	4319      	orrs	r1, r3
 800d122:	68bb      	ldr	r3, [r7, #8]
 800d124:	689b      	ldr	r3, [r3, #8]
 800d126:	3b01      	subs	r3, #1
 800d128:	021b      	lsls	r3, r3, #8
 800d12a:	4319      	orrs	r1, r3
 800d12c:	68bb      	ldr	r3, [r7, #8]
 800d12e:	68db      	ldr	r3, [r3, #12]
 800d130:	3b01      	subs	r3, #1
 800d132:	031b      	lsls	r3, r3, #12
 800d134:	4319      	orrs	r1, r3
 800d136:	68bb      	ldr	r3, [r7, #8]
 800d138:	691b      	ldr	r3, [r3, #16]
 800d13a:	3b01      	subs	r3, #1
 800d13c:	041b      	lsls	r3, r3, #16
 800d13e:	4319      	orrs	r1, r3
 800d140:	68bb      	ldr	r3, [r7, #8]
 800d142:	695b      	ldr	r3, [r3, #20]
 800d144:	3b01      	subs	r3, #1
 800d146:	051b      	lsls	r3, r3, #20
 800d148:	4319      	orrs	r1, r3
 800d14a:	68bb      	ldr	r3, [r7, #8]
 800d14c:	699b      	ldr	r3, [r3, #24]
 800d14e:	3b01      	subs	r3, #1
 800d150:	061b      	lsls	r3, r3, #24
 800d152:	430b      	orrs	r3, r1
 800d154:	431a      	orrs	r2, r3
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	609a      	str	r2, [r3, #8]
 800d15a:	e02d      	b.n	800d1b8 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	689a      	ldr	r2, [r3, #8]
 800d160:	4b19      	ldr	r3, [pc, #100]	; (800d1c8 <FMC_SDRAM_Timing_Init+0xd0>)
 800d162:	4013      	ands	r3, r2
 800d164:	68ba      	ldr	r2, [r7, #8]
 800d166:	68d2      	ldr	r2, [r2, #12]
 800d168:	3a01      	subs	r2, #1
 800d16a:	0311      	lsls	r1, r2, #12
 800d16c:	68ba      	ldr	r2, [r7, #8]
 800d16e:	6952      	ldr	r2, [r2, #20]
 800d170:	3a01      	subs	r2, #1
 800d172:	0512      	lsls	r2, r2, #20
 800d174:	430a      	orrs	r2, r1
 800d176:	431a      	orrs	r2, r3
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	68db      	ldr	r3, [r3, #12]
 800d180:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800d184:	68bb      	ldr	r3, [r7, #8]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	1e59      	subs	r1, r3, #1
 800d18a:	68bb      	ldr	r3, [r7, #8]
 800d18c:	685b      	ldr	r3, [r3, #4]
 800d18e:	3b01      	subs	r3, #1
 800d190:	011b      	lsls	r3, r3, #4
 800d192:	4319      	orrs	r1, r3
 800d194:	68bb      	ldr	r3, [r7, #8]
 800d196:	689b      	ldr	r3, [r3, #8]
 800d198:	3b01      	subs	r3, #1
 800d19a:	021b      	lsls	r3, r3, #8
 800d19c:	4319      	orrs	r1, r3
 800d19e:	68bb      	ldr	r3, [r7, #8]
 800d1a0:	691b      	ldr	r3, [r3, #16]
 800d1a2:	3b01      	subs	r3, #1
 800d1a4:	041b      	lsls	r3, r3, #16
 800d1a6:	4319      	orrs	r1, r3
 800d1a8:	68bb      	ldr	r3, [r7, #8]
 800d1aa:	699b      	ldr	r3, [r3, #24]
 800d1ac:	3b01      	subs	r3, #1
 800d1ae:	061b      	lsls	r3, r3, #24
 800d1b0:	430b      	orrs	r3, r1
 800d1b2:	431a      	orrs	r2, r3
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800d1b8:	2300      	movs	r3, #0
}
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	3714      	adds	r7, #20
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c4:	4770      	bx	lr
 800d1c6:	bf00      	nop
 800d1c8:	ff0f0fff 	.word	0xff0f0fff

0800d1cc <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800d1cc:	b480      	push	{r7}
 800d1ce:	b085      	sub	sp, #20
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	60f8      	str	r0, [r7, #12]
 800d1d4:	60b9      	str	r1, [r7, #8]
 800d1d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	691a      	ldr	r2, [r3, #16]
 800d1dc:	4b0c      	ldr	r3, [pc, #48]	; (800d210 <FMC_SDRAM_SendCommand+0x44>)
 800d1de:	4013      	ands	r3, r2
 800d1e0:	68ba      	ldr	r2, [r7, #8]
 800d1e2:	6811      	ldr	r1, [r2, #0]
 800d1e4:	68ba      	ldr	r2, [r7, #8]
 800d1e6:	6852      	ldr	r2, [r2, #4]
 800d1e8:	4311      	orrs	r1, r2
 800d1ea:	68ba      	ldr	r2, [r7, #8]
 800d1ec:	6892      	ldr	r2, [r2, #8]
 800d1ee:	3a01      	subs	r2, #1
 800d1f0:	0152      	lsls	r2, r2, #5
 800d1f2:	4311      	orrs	r1, r2
 800d1f4:	68ba      	ldr	r2, [r7, #8]
 800d1f6:	68d2      	ldr	r2, [r2, #12]
 800d1f8:	0252      	lsls	r2, r2, #9
 800d1fa:	430a      	orrs	r2, r1
 800d1fc:	431a      	orrs	r2, r3
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800d202:	2300      	movs	r3, #0
}
 800d204:	4618      	mov	r0, r3
 800d206:	3714      	adds	r7, #20
 800d208:	46bd      	mov	sp, r7
 800d20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d20e:	4770      	bx	lr
 800d210:	ffc00000 	.word	0xffc00000

0800d214 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800d214:	b480      	push	{r7}
 800d216:	b083      	sub	sp, #12
 800d218:	af00      	add	r7, sp, #0
 800d21a:	6078      	str	r0, [r7, #4]
 800d21c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	695a      	ldr	r2, [r3, #20]
 800d222:	4b07      	ldr	r3, [pc, #28]	; (800d240 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800d224:	4013      	ands	r3, r2
 800d226:	683a      	ldr	r2, [r7, #0]
 800d228:	0052      	lsls	r2, r2, #1
 800d22a:	431a      	orrs	r2, r3
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800d230:	2300      	movs	r3, #0
}
 800d232:	4618      	mov	r0, r3
 800d234:	370c      	adds	r7, #12
 800d236:	46bd      	mov	sp, r7
 800d238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23c:	4770      	bx	lr
 800d23e:	bf00      	nop
 800d240:	ffffc001 	.word	0xffffc001

0800d244 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800d244:	b084      	sub	sp, #16
 800d246:	b480      	push	{r7}
 800d248:	b085      	sub	sp, #20
 800d24a:	af00      	add	r7, sp, #0
 800d24c:	6078      	str	r0, [r7, #4]
 800d24e:	f107 001c 	add.w	r0, r7, #28
 800d252:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d256:	2300      	movs	r3, #0
 800d258:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800d25a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800d25c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800d25e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800d260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800d262:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800d264:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800d266:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800d268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800d26a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d26c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800d26e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800d270:	68fa      	ldr	r2, [r7, #12]
 800d272:	4313      	orrs	r3, r2
 800d274:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	685a      	ldr	r2, [r3, #4]
 800d27a:	4b07      	ldr	r3, [pc, #28]	; (800d298 <SDMMC_Init+0x54>)
 800d27c:	4013      	ands	r3, r2
 800d27e:	68fa      	ldr	r2, [r7, #12]
 800d280:	431a      	orrs	r2, r3
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d286:	2300      	movs	r3, #0
}
 800d288:	4618      	mov	r0, r3
 800d28a:	3714      	adds	r7, #20
 800d28c:	46bd      	mov	sp, r7
 800d28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d292:	b004      	add	sp, #16
 800d294:	4770      	bx	lr
 800d296:	bf00      	nop
 800d298:	ffff8100 	.word	0xffff8100

0800d29c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800d29c:	b480      	push	{r7}
 800d29e:	b083      	sub	sp, #12
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	370c      	adds	r7, #12
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b4:	4770      	bx	lr

0800d2b6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800d2b6:	b480      	push	{r7}
 800d2b8:	b083      	sub	sp, #12
 800d2ba:	af00      	add	r7, sp, #0
 800d2bc:	6078      	str	r0, [r7, #4]
 800d2be:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800d2c0:	683b      	ldr	r3, [r7, #0]
 800d2c2:	681a      	ldr	r2, [r3, #0]
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d2ca:	2300      	movs	r3, #0
}
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	370c      	adds	r7, #12
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d6:	4770      	bx	lr

0800d2d8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800d2d8:	b480      	push	{r7}
 800d2da:	b083      	sub	sp, #12
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	2203      	movs	r2, #3
 800d2e4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800d2e6:	2300      	movs	r3, #0
}
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	370c      	adds	r7, #12
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f2:	4770      	bx	lr

0800d2f4 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800d2f4:	b480      	push	{r7}
 800d2f6:	b083      	sub	sp, #12
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	f003 0303 	and.w	r3, r3, #3
}
 800d304:	4618      	mov	r0, r3
 800d306:	370c      	adds	r7, #12
 800d308:	46bd      	mov	sp, r7
 800d30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d30e:	4770      	bx	lr

0800d310 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800d310:	b480      	push	{r7}
 800d312:	b085      	sub	sp, #20
 800d314:	af00      	add	r7, sp, #0
 800d316:	6078      	str	r0, [r7, #4]
 800d318:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d31a:	2300      	movs	r3, #0
 800d31c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800d31e:	683b      	ldr	r3, [r7, #0]
 800d320:	681a      	ldr	r2, [r3, #0]
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d326:	683b      	ldr	r3, [r7, #0]
 800d328:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800d32a:	683b      	ldr	r3, [r7, #0]
 800d32c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d32e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800d330:	683b      	ldr	r3, [r7, #0]
 800d332:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800d334:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d336:	683b      	ldr	r3, [r7, #0]
 800d338:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800d33a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d33c:	68fa      	ldr	r2, [r7, #12]
 800d33e:	4313      	orrs	r3, r2
 800d340:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	68da      	ldr	r2, [r3, #12]
 800d346:	4b06      	ldr	r3, [pc, #24]	; (800d360 <SDMMC_SendCommand+0x50>)
 800d348:	4013      	ands	r3, r2
 800d34a:	68fa      	ldr	r2, [r7, #12]
 800d34c:	431a      	orrs	r2, r3
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800d352:	2300      	movs	r3, #0
}
 800d354:	4618      	mov	r0, r3
 800d356:	3714      	adds	r7, #20
 800d358:	46bd      	mov	sp, r7
 800d35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35e:	4770      	bx	lr
 800d360:	fffff000 	.word	0xfffff000

0800d364 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800d364:	b480      	push	{r7}
 800d366:	b083      	sub	sp, #12
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	691b      	ldr	r3, [r3, #16]
 800d370:	b2db      	uxtb	r3, r3
}
 800d372:	4618      	mov	r0, r3
 800d374:	370c      	adds	r7, #12
 800d376:	46bd      	mov	sp, r7
 800d378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d37c:	4770      	bx	lr

0800d37e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800d37e:	b480      	push	{r7}
 800d380:	b085      	sub	sp, #20
 800d382:	af00      	add	r7, sp, #0
 800d384:	6078      	str	r0, [r7, #4]
 800d386:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	3314      	adds	r3, #20
 800d38c:	461a      	mov	r2, r3
 800d38e:	683b      	ldr	r3, [r7, #0]
 800d390:	4413      	add	r3, r2
 800d392:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	681b      	ldr	r3, [r3, #0]
}  
 800d398:	4618      	mov	r0, r3
 800d39a:	3714      	adds	r7, #20
 800d39c:	46bd      	mov	sp, r7
 800d39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a2:	4770      	bx	lr

0800d3a4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800d3a4:	b480      	push	{r7}
 800d3a6:	b085      	sub	sp, #20
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	6078      	str	r0, [r7, #4]
 800d3ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800d3b2:	683b      	ldr	r3, [r7, #0]
 800d3b4:	681a      	ldr	r2, [r3, #0]
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800d3ba:	683b      	ldr	r3, [r7, #0]
 800d3bc:	685a      	ldr	r2, [r3, #4]
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d3c2:	683b      	ldr	r3, [r7, #0]
 800d3c4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800d3c6:	683b      	ldr	r3, [r7, #0]
 800d3c8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d3ca:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800d3cc:	683b      	ldr	r3, [r7, #0]
 800d3ce:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800d3d0:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d3d2:	683b      	ldr	r3, [r7, #0]
 800d3d4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800d3d6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d3d8:	68fa      	ldr	r2, [r7, #12]
 800d3da:	4313      	orrs	r3, r2
 800d3dc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3e2:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	431a      	orrs	r2, r3
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800d3ee:	2300      	movs	r3, #0

}
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	3714      	adds	r7, #20
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fa:	4770      	bx	lr

0800d3fc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b088      	sub	sp, #32
 800d400:	af00      	add	r7, sp, #0
 800d402:	6078      	str	r0, [r7, #4]
 800d404:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800d406:	683b      	ldr	r3, [r7, #0]
 800d408:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800d40a:	2310      	movs	r3, #16
 800d40c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d40e:	2340      	movs	r3, #64	; 0x40
 800d410:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d412:	2300      	movs	r3, #0
 800d414:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d416:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d41a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d41c:	f107 0308 	add.w	r3, r7, #8
 800d420:	4619      	mov	r1, r3
 800d422:	6878      	ldr	r0, [r7, #4]
 800d424:	f7ff ff74 	bl	800d310 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800d428:	f241 3288 	movw	r2, #5000	; 0x1388
 800d42c:	2110      	movs	r1, #16
 800d42e:	6878      	ldr	r0, [r7, #4]
 800d430:	f000 f9d6 	bl	800d7e0 <SDMMC_GetCmdResp1>
 800d434:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d436:	69fb      	ldr	r3, [r7, #28]
}
 800d438:	4618      	mov	r0, r3
 800d43a:	3720      	adds	r7, #32
 800d43c:	46bd      	mov	sp, r7
 800d43e:	bd80      	pop	{r7, pc}

0800d440 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800d440:	b580      	push	{r7, lr}
 800d442:	b088      	sub	sp, #32
 800d444:	af00      	add	r7, sp, #0
 800d446:	6078      	str	r0, [r7, #4]
 800d448:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d44a:	683b      	ldr	r3, [r7, #0]
 800d44c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800d44e:	2311      	movs	r3, #17
 800d450:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d452:	2340      	movs	r3, #64	; 0x40
 800d454:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d456:	2300      	movs	r3, #0
 800d458:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d45a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d45e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d460:	f107 0308 	add.w	r3, r7, #8
 800d464:	4619      	mov	r1, r3
 800d466:	6878      	ldr	r0, [r7, #4]
 800d468:	f7ff ff52 	bl	800d310 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d46c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d470:	2111      	movs	r1, #17
 800d472:	6878      	ldr	r0, [r7, #4]
 800d474:	f000 f9b4 	bl	800d7e0 <SDMMC_GetCmdResp1>
 800d478:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d47a:	69fb      	ldr	r3, [r7, #28]
}
 800d47c:	4618      	mov	r0, r3
 800d47e:	3720      	adds	r7, #32
 800d480:	46bd      	mov	sp, r7
 800d482:	bd80      	pop	{r7, pc}

0800d484 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800d484:	b580      	push	{r7, lr}
 800d486:	b088      	sub	sp, #32
 800d488:	af00      	add	r7, sp, #0
 800d48a:	6078      	str	r0, [r7, #4]
 800d48c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d48e:	683b      	ldr	r3, [r7, #0]
 800d490:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800d492:	2312      	movs	r3, #18
 800d494:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d496:	2340      	movs	r3, #64	; 0x40
 800d498:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d49a:	2300      	movs	r3, #0
 800d49c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d49e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d4a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d4a4:	f107 0308 	add.w	r3, r7, #8
 800d4a8:	4619      	mov	r1, r3
 800d4aa:	6878      	ldr	r0, [r7, #4]
 800d4ac:	f7ff ff30 	bl	800d310 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d4b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800d4b4:	2112      	movs	r1, #18
 800d4b6:	6878      	ldr	r0, [r7, #4]
 800d4b8:	f000 f992 	bl	800d7e0 <SDMMC_GetCmdResp1>
 800d4bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d4be:	69fb      	ldr	r3, [r7, #28]
}
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	3720      	adds	r7, #32
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	bd80      	pop	{r7, pc}

0800d4c8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800d4c8:	b580      	push	{r7, lr}
 800d4ca:	b088      	sub	sp, #32
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	6078      	str	r0, [r7, #4]
 800d4d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d4d2:	683b      	ldr	r3, [r7, #0]
 800d4d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800d4d6:	2318      	movs	r3, #24
 800d4d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d4da:	2340      	movs	r3, #64	; 0x40
 800d4dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d4de:	2300      	movs	r3, #0
 800d4e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d4e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d4e6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d4e8:	f107 0308 	add.w	r3, r7, #8
 800d4ec:	4619      	mov	r1, r3
 800d4ee:	6878      	ldr	r0, [r7, #4]
 800d4f0:	f7ff ff0e 	bl	800d310 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d4f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800d4f8:	2118      	movs	r1, #24
 800d4fa:	6878      	ldr	r0, [r7, #4]
 800d4fc:	f000 f970 	bl	800d7e0 <SDMMC_GetCmdResp1>
 800d500:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d502:	69fb      	ldr	r3, [r7, #28]
}
 800d504:	4618      	mov	r0, r3
 800d506:	3720      	adds	r7, #32
 800d508:	46bd      	mov	sp, r7
 800d50a:	bd80      	pop	{r7, pc}

0800d50c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b088      	sub	sp, #32
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
 800d514:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d516:	683b      	ldr	r3, [r7, #0]
 800d518:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800d51a:	2319      	movs	r3, #25
 800d51c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d51e:	2340      	movs	r3, #64	; 0x40
 800d520:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d522:	2300      	movs	r3, #0
 800d524:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d526:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d52a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d52c:	f107 0308 	add.w	r3, r7, #8
 800d530:	4619      	mov	r1, r3
 800d532:	6878      	ldr	r0, [r7, #4]
 800d534:	f7ff feec 	bl	800d310 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d538:	f241 3288 	movw	r2, #5000	; 0x1388
 800d53c:	2119      	movs	r1, #25
 800d53e:	6878      	ldr	r0, [r7, #4]
 800d540:	f000 f94e 	bl	800d7e0 <SDMMC_GetCmdResp1>
 800d544:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d546:	69fb      	ldr	r3, [r7, #28]
}
 800d548:	4618      	mov	r0, r3
 800d54a:	3720      	adds	r7, #32
 800d54c:	46bd      	mov	sp, r7
 800d54e:	bd80      	pop	{r7, pc}

0800d550 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800d550:	b580      	push	{r7, lr}
 800d552:	b088      	sub	sp, #32
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800d558:	2300      	movs	r3, #0
 800d55a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d55c:	230c      	movs	r3, #12
 800d55e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d560:	2340      	movs	r3, #64	; 0x40
 800d562:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d564:	2300      	movs	r3, #0
 800d566:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d568:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d56c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d56e:	f107 0308 	add.w	r3, r7, #8
 800d572:	4619      	mov	r1, r3
 800d574:	6878      	ldr	r0, [r7, #4]
 800d576:	f7ff fecb 	bl	800d310 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800d57a:	4a05      	ldr	r2, [pc, #20]	; (800d590 <SDMMC_CmdStopTransfer+0x40>)
 800d57c:	210c      	movs	r1, #12
 800d57e:	6878      	ldr	r0, [r7, #4]
 800d580:	f000 f92e 	bl	800d7e0 <SDMMC_GetCmdResp1>
 800d584:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d586:	69fb      	ldr	r3, [r7, #28]
}
 800d588:	4618      	mov	r0, r3
 800d58a:	3720      	adds	r7, #32
 800d58c:	46bd      	mov	sp, r7
 800d58e:	bd80      	pop	{r7, pc}
 800d590:	05f5e100 	.word	0x05f5e100

0800d594 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b08a      	sub	sp, #40	; 0x28
 800d598:	af00      	add	r7, sp, #0
 800d59a:	60f8      	str	r0, [r7, #12]
 800d59c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d5a0:	683b      	ldr	r3, [r7, #0]
 800d5a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d5a4:	2307      	movs	r3, #7
 800d5a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d5a8:	2340      	movs	r3, #64	; 0x40
 800d5aa:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d5b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d5b4:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d5b6:	f107 0310 	add.w	r3, r7, #16
 800d5ba:	4619      	mov	r1, r3
 800d5bc:	68f8      	ldr	r0, [r7, #12]
 800d5be:	f7ff fea7 	bl	800d310 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800d5c2:	f241 3288 	movw	r2, #5000	; 0x1388
 800d5c6:	2107      	movs	r1, #7
 800d5c8:	68f8      	ldr	r0, [r7, #12]
 800d5ca:	f000 f909 	bl	800d7e0 <SDMMC_GetCmdResp1>
 800d5ce:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800d5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	3728      	adds	r7, #40	; 0x28
 800d5d6:	46bd      	mov	sp, r7
 800d5d8:	bd80      	pop	{r7, pc}

0800d5da <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800d5da:	b580      	push	{r7, lr}
 800d5dc:	b088      	sub	sp, #32
 800d5de:	af00      	add	r7, sp, #0
 800d5e0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d5f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d5f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d5f8:	f107 0308 	add.w	r3, r7, #8
 800d5fc:	4619      	mov	r1, r3
 800d5fe:	6878      	ldr	r0, [r7, #4]
 800d600:	f7ff fe86 	bl	800d310 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800d604:	6878      	ldr	r0, [r7, #4]
 800d606:	f000 fb23 	bl	800dc50 <SDMMC_GetCmdError>
 800d60a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d60c:	69fb      	ldr	r3, [r7, #28]
}
 800d60e:	4618      	mov	r0, r3
 800d610:	3720      	adds	r7, #32
 800d612:	46bd      	mov	sp, r7
 800d614:	bd80      	pop	{r7, pc}

0800d616 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800d616:	b580      	push	{r7, lr}
 800d618:	b088      	sub	sp, #32
 800d61a:	af00      	add	r7, sp, #0
 800d61c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800d61e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800d622:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d624:	2308      	movs	r3, #8
 800d626:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d628:	2340      	movs	r3, #64	; 0x40
 800d62a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d62c:	2300      	movs	r3, #0
 800d62e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d630:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d634:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d636:	f107 0308 	add.w	r3, r7, #8
 800d63a:	4619      	mov	r1, r3
 800d63c:	6878      	ldr	r0, [r7, #4]
 800d63e:	f7ff fe67 	bl	800d310 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800d642:	6878      	ldr	r0, [r7, #4]
 800d644:	f000 fab6 	bl	800dbb4 <SDMMC_GetCmdResp7>
 800d648:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d64a:	69fb      	ldr	r3, [r7, #28]
}
 800d64c:	4618      	mov	r0, r3
 800d64e:	3720      	adds	r7, #32
 800d650:	46bd      	mov	sp, r7
 800d652:	bd80      	pop	{r7, pc}

0800d654 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d654:	b580      	push	{r7, lr}
 800d656:	b088      	sub	sp, #32
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
 800d65c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d65e:	683b      	ldr	r3, [r7, #0]
 800d660:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d662:	2337      	movs	r3, #55	; 0x37
 800d664:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d666:	2340      	movs	r3, #64	; 0x40
 800d668:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d66a:	2300      	movs	r3, #0
 800d66c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d66e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d672:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d674:	f107 0308 	add.w	r3, r7, #8
 800d678:	4619      	mov	r1, r3
 800d67a:	6878      	ldr	r0, [r7, #4]
 800d67c:	f7ff fe48 	bl	800d310 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800d680:	f241 3288 	movw	r2, #5000	; 0x1388
 800d684:	2137      	movs	r1, #55	; 0x37
 800d686:	6878      	ldr	r0, [r7, #4]
 800d688:	f000 f8aa 	bl	800d7e0 <SDMMC_GetCmdResp1>
 800d68c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d68e:	69fb      	ldr	r3, [r7, #28]
}
 800d690:	4618      	mov	r0, r3
 800d692:	3720      	adds	r7, #32
 800d694:	46bd      	mov	sp, r7
 800d696:	bd80      	pop	{r7, pc}

0800d698 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d698:	b580      	push	{r7, lr}
 800d69a:	b088      	sub	sp, #32
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	6078      	str	r0, [r7, #4]
 800d6a0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800d6a2:	683a      	ldr	r2, [r7, #0]
 800d6a4:	4b0d      	ldr	r3, [pc, #52]	; (800d6dc <SDMMC_CmdAppOperCommand+0x44>)
 800d6a6:	4313      	orrs	r3, r2
 800d6a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800d6aa:	2329      	movs	r3, #41	; 0x29
 800d6ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d6ae:	2340      	movs	r3, #64	; 0x40
 800d6b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d6b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d6ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d6bc:	f107 0308 	add.w	r3, r7, #8
 800d6c0:	4619      	mov	r1, r3
 800d6c2:	6878      	ldr	r0, [r7, #4]
 800d6c4:	f7ff fe24 	bl	800d310 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800d6c8:	6878      	ldr	r0, [r7, #4]
 800d6ca:	f000 f9bf 	bl	800da4c <SDMMC_GetCmdResp3>
 800d6ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d6d0:	69fb      	ldr	r3, [r7, #28]
}
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	3720      	adds	r7, #32
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	bd80      	pop	{r7, pc}
 800d6da:	bf00      	nop
 800d6dc:	80100000 	.word	0x80100000

0800d6e0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b088      	sub	sp, #32
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800d6e8:	2300      	movs	r3, #0
 800d6ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d6ec:	2302      	movs	r3, #2
 800d6ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d6f0:	23c0      	movs	r3, #192	; 0xc0
 800d6f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d6f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d6fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d6fe:	f107 0308 	add.w	r3, r7, #8
 800d702:	4619      	mov	r1, r3
 800d704:	6878      	ldr	r0, [r7, #4]
 800d706:	f7ff fe03 	bl	800d310 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d70a:	6878      	ldr	r0, [r7, #4]
 800d70c:	f000 f956 	bl	800d9bc <SDMMC_GetCmdResp2>
 800d710:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d712:	69fb      	ldr	r3, [r7, #28]
}
 800d714:	4618      	mov	r0, r3
 800d716:	3720      	adds	r7, #32
 800d718:	46bd      	mov	sp, r7
 800d71a:	bd80      	pop	{r7, pc}

0800d71c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b088      	sub	sp, #32
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
 800d724:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800d726:	683b      	ldr	r3, [r7, #0]
 800d728:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d72a:	2309      	movs	r3, #9
 800d72c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d72e:	23c0      	movs	r3, #192	; 0xc0
 800d730:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d732:	2300      	movs	r3, #0
 800d734:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d736:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d73a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d73c:	f107 0308 	add.w	r3, r7, #8
 800d740:	4619      	mov	r1, r3
 800d742:	6878      	ldr	r0, [r7, #4]
 800d744:	f7ff fde4 	bl	800d310 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d748:	6878      	ldr	r0, [r7, #4]
 800d74a:	f000 f937 	bl	800d9bc <SDMMC_GetCmdResp2>
 800d74e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d750:	69fb      	ldr	r3, [r7, #28]
}
 800d752:	4618      	mov	r0, r3
 800d754:	3720      	adds	r7, #32
 800d756:	46bd      	mov	sp, r7
 800d758:	bd80      	pop	{r7, pc}

0800d75a <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800d75a:	b580      	push	{r7, lr}
 800d75c:	b088      	sub	sp, #32
 800d75e:	af00      	add	r7, sp, #0
 800d760:	6078      	str	r0, [r7, #4]
 800d762:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d764:	2300      	movs	r3, #0
 800d766:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d768:	2303      	movs	r3, #3
 800d76a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d76c:	2340      	movs	r3, #64	; 0x40
 800d76e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d770:	2300      	movs	r3, #0
 800d772:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d774:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d778:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d77a:	f107 0308 	add.w	r3, r7, #8
 800d77e:	4619      	mov	r1, r3
 800d780:	6878      	ldr	r0, [r7, #4]
 800d782:	f7ff fdc5 	bl	800d310 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d786:	683a      	ldr	r2, [r7, #0]
 800d788:	2103      	movs	r1, #3
 800d78a:	6878      	ldr	r0, [r7, #4]
 800d78c:	f000 f99c 	bl	800dac8 <SDMMC_GetCmdResp6>
 800d790:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d792:	69fb      	ldr	r3, [r7, #28]
}
 800d794:	4618      	mov	r0, r3
 800d796:	3720      	adds	r7, #32
 800d798:	46bd      	mov	sp, r7
 800d79a:	bd80      	pop	{r7, pc}

0800d79c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b088      	sub	sp, #32
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
 800d7a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800d7a6:	683b      	ldr	r3, [r7, #0]
 800d7a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d7aa:	230d      	movs	r3, #13
 800d7ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d7ae:	2340      	movs	r3, #64	; 0x40
 800d7b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d7b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d7ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d7bc:	f107 0308 	add.w	r3, r7, #8
 800d7c0:	4619      	mov	r1, r3
 800d7c2:	6878      	ldr	r0, [r7, #4]
 800d7c4:	f7ff fda4 	bl	800d310 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800d7c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800d7cc:	210d      	movs	r1, #13
 800d7ce:	6878      	ldr	r0, [r7, #4]
 800d7d0:	f000 f806 	bl	800d7e0 <SDMMC_GetCmdResp1>
 800d7d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d7d6:	69fb      	ldr	r3, [r7, #28]
}
 800d7d8:	4618      	mov	r0, r3
 800d7da:	3720      	adds	r7, #32
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	bd80      	pop	{r7, pc}

0800d7e0 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b088      	sub	sp, #32
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	60f8      	str	r0, [r7, #12]
 800d7e8:	460b      	mov	r3, r1
 800d7ea:	607a      	str	r2, [r7, #4]
 800d7ec:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d7ee:	4b70      	ldr	r3, [pc, #448]	; (800d9b0 <SDMMC_GetCmdResp1+0x1d0>)
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	4a70      	ldr	r2, [pc, #448]	; (800d9b4 <SDMMC_GetCmdResp1+0x1d4>)
 800d7f4:	fba2 2303 	umull	r2, r3, r2, r3
 800d7f8:	0a5a      	lsrs	r2, r3, #9
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	fb02 f303 	mul.w	r3, r2, r3
 800d800:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800d802:	69fb      	ldr	r3, [r7, #28]
 800d804:	1e5a      	subs	r2, r3, #1
 800d806:	61fa      	str	r2, [r7, #28]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d102      	bne.n	800d812 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d80c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d810:	e0c9      	b.n	800d9a6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d816:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d818:	69bb      	ldr	r3, [r7, #24]
 800d81a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d0ef      	beq.n	800d802 <SDMMC_GetCmdResp1+0x22>
 800d822:	69bb      	ldr	r3, [r7, #24]
 800d824:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d1ea      	bne.n	800d802 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d830:	f003 0304 	and.w	r3, r3, #4
 800d834:	2b00      	cmp	r3, #0
 800d836:	d004      	beq.n	800d842 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	2204      	movs	r2, #4
 800d83c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d83e:	2304      	movs	r3, #4
 800d840:	e0b1      	b.n	800d9a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d846:	f003 0301 	and.w	r3, r3, #1
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d004      	beq.n	800d858 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	2201      	movs	r2, #1
 800d852:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d854:	2301      	movs	r3, #1
 800d856:	e0a6      	b.n	800d9a6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	22c5      	movs	r2, #197	; 0xc5
 800d85c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d85e:	68f8      	ldr	r0, [r7, #12]
 800d860:	f7ff fd80 	bl	800d364 <SDMMC_GetCommandResponse>
 800d864:	4603      	mov	r3, r0
 800d866:	461a      	mov	r2, r3
 800d868:	7afb      	ldrb	r3, [r7, #11]
 800d86a:	4293      	cmp	r3, r2
 800d86c:	d001      	beq.n	800d872 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d86e:	2301      	movs	r3, #1
 800d870:	e099      	b.n	800d9a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d872:	2100      	movs	r1, #0
 800d874:	68f8      	ldr	r0, [r7, #12]
 800d876:	f7ff fd82 	bl	800d37e <SDMMC_GetResponse>
 800d87a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d87c:	697a      	ldr	r2, [r7, #20]
 800d87e:	4b4e      	ldr	r3, [pc, #312]	; (800d9b8 <SDMMC_GetCmdResp1+0x1d8>)
 800d880:	4013      	ands	r3, r2
 800d882:	2b00      	cmp	r3, #0
 800d884:	d101      	bne.n	800d88a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800d886:	2300      	movs	r3, #0
 800d888:	e08d      	b.n	800d9a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d88a:	697b      	ldr	r3, [r7, #20]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	da02      	bge.n	800d896 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d890:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d894:	e087      	b.n	800d9a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d896:	697b      	ldr	r3, [r7, #20]
 800d898:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d001      	beq.n	800d8a4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d8a0:	2340      	movs	r3, #64	; 0x40
 800d8a2:	e080      	b.n	800d9a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d8a4:	697b      	ldr	r3, [r7, #20]
 800d8a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d001      	beq.n	800d8b2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d8ae:	2380      	movs	r3, #128	; 0x80
 800d8b0:	e079      	b.n	800d9a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d8b2:	697b      	ldr	r3, [r7, #20]
 800d8b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d002      	beq.n	800d8c2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d8bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d8c0:	e071      	b.n	800d9a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d8c2:	697b      	ldr	r3, [r7, #20]
 800d8c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d002      	beq.n	800d8d2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d8cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d8d0:	e069      	b.n	800d9a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d8d2:	697b      	ldr	r3, [r7, #20]
 800d8d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d002      	beq.n	800d8e2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d8dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d8e0:	e061      	b.n	800d9a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d8e2:	697b      	ldr	r3, [r7, #20]
 800d8e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d002      	beq.n	800d8f2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d8ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d8f0:	e059      	b.n	800d9a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d8f2:	697b      	ldr	r3, [r7, #20]
 800d8f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d002      	beq.n	800d902 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d8fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d900:	e051      	b.n	800d9a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d902:	697b      	ldr	r3, [r7, #20]
 800d904:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d002      	beq.n	800d912 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d90c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d910:	e049      	b.n	800d9a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d912:	697b      	ldr	r3, [r7, #20]
 800d914:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d002      	beq.n	800d922 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d91c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d920:	e041      	b.n	800d9a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d922:	697b      	ldr	r3, [r7, #20]
 800d924:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d002      	beq.n	800d932 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800d92c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d930:	e039      	b.n	800d9a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d932:	697b      	ldr	r3, [r7, #20]
 800d934:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d002      	beq.n	800d942 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d93c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d940:	e031      	b.n	800d9a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d942:	697b      	ldr	r3, [r7, #20]
 800d944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d002      	beq.n	800d952 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d94c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d950:	e029      	b.n	800d9a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d952:	697b      	ldr	r3, [r7, #20]
 800d954:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d002      	beq.n	800d962 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d95c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d960:	e021      	b.n	800d9a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d962:	697b      	ldr	r3, [r7, #20]
 800d964:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d002      	beq.n	800d972 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d96c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d970:	e019      	b.n	800d9a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d972:	697b      	ldr	r3, [r7, #20]
 800d974:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d002      	beq.n	800d982 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d97c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d980:	e011      	b.n	800d9a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d982:	697b      	ldr	r3, [r7, #20]
 800d984:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d002      	beq.n	800d992 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d98c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d990:	e009      	b.n	800d9a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d992:	697b      	ldr	r3, [r7, #20]
 800d994:	f003 0308 	and.w	r3, r3, #8
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d002      	beq.n	800d9a2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d99c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d9a0:	e001      	b.n	800d9a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d9a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	3720      	adds	r7, #32
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	bd80      	pop	{r7, pc}
 800d9ae:	bf00      	nop
 800d9b0:	20000044 	.word	0x20000044
 800d9b4:	10624dd3 	.word	0x10624dd3
 800d9b8:	fdffe008 	.word	0xfdffe008

0800d9bc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800d9bc:	b480      	push	{r7}
 800d9be:	b085      	sub	sp, #20
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d9c4:	4b1f      	ldr	r3, [pc, #124]	; (800da44 <SDMMC_GetCmdResp2+0x88>)
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	4a1f      	ldr	r2, [pc, #124]	; (800da48 <SDMMC_GetCmdResp2+0x8c>)
 800d9ca:	fba2 2303 	umull	r2, r3, r2, r3
 800d9ce:	0a5b      	lsrs	r3, r3, #9
 800d9d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800d9d4:	fb02 f303 	mul.w	r3, r2, r3
 800d9d8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	1e5a      	subs	r2, r3, #1
 800d9de:	60fa      	str	r2, [r7, #12]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d102      	bne.n	800d9ea <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d9e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d9e8:	e026      	b.n	800da38 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9ee:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d9f0:	68bb      	ldr	r3, [r7, #8]
 800d9f2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d0ef      	beq.n	800d9da <SDMMC_GetCmdResp2+0x1e>
 800d9fa:	68bb      	ldr	r3, [r7, #8]
 800d9fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800da00:	2b00      	cmp	r3, #0
 800da02:	d1ea      	bne.n	800d9da <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da08:	f003 0304 	and.w	r3, r3, #4
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d004      	beq.n	800da1a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	2204      	movs	r2, #4
 800da14:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800da16:	2304      	movs	r3, #4
 800da18:	e00e      	b.n	800da38 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da1e:	f003 0301 	and.w	r3, r3, #1
 800da22:	2b00      	cmp	r3, #0
 800da24:	d004      	beq.n	800da30 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	2201      	movs	r2, #1
 800da2a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800da2c:	2301      	movs	r3, #1
 800da2e:	e003      	b.n	800da38 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	22c5      	movs	r2, #197	; 0xc5
 800da34:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800da36:	2300      	movs	r3, #0
}
 800da38:	4618      	mov	r0, r3
 800da3a:	3714      	adds	r7, #20
 800da3c:	46bd      	mov	sp, r7
 800da3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da42:	4770      	bx	lr
 800da44:	20000044 	.word	0x20000044
 800da48:	10624dd3 	.word	0x10624dd3

0800da4c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800da4c:	b480      	push	{r7}
 800da4e:	b085      	sub	sp, #20
 800da50:	af00      	add	r7, sp, #0
 800da52:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800da54:	4b1a      	ldr	r3, [pc, #104]	; (800dac0 <SDMMC_GetCmdResp3+0x74>)
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	4a1a      	ldr	r2, [pc, #104]	; (800dac4 <SDMMC_GetCmdResp3+0x78>)
 800da5a:	fba2 2303 	umull	r2, r3, r2, r3
 800da5e:	0a5b      	lsrs	r3, r3, #9
 800da60:	f241 3288 	movw	r2, #5000	; 0x1388
 800da64:	fb02 f303 	mul.w	r3, r2, r3
 800da68:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	1e5a      	subs	r2, r3, #1
 800da6e:	60fa      	str	r2, [r7, #12]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d102      	bne.n	800da7a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800da74:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800da78:	e01b      	b.n	800dab2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da7e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800da80:	68bb      	ldr	r3, [r7, #8]
 800da82:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800da86:	2b00      	cmp	r3, #0
 800da88:	d0ef      	beq.n	800da6a <SDMMC_GetCmdResp3+0x1e>
 800da8a:	68bb      	ldr	r3, [r7, #8]
 800da8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800da90:	2b00      	cmp	r3, #0
 800da92:	d1ea      	bne.n	800da6a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da98:	f003 0304 	and.w	r3, r3, #4
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d004      	beq.n	800daaa <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	2204      	movs	r2, #4
 800daa4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800daa6:	2304      	movs	r3, #4
 800daa8:	e003      	b.n	800dab2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	22c5      	movs	r2, #197	; 0xc5
 800daae:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800dab0:	2300      	movs	r3, #0
}
 800dab2:	4618      	mov	r0, r3
 800dab4:	3714      	adds	r7, #20
 800dab6:	46bd      	mov	sp, r7
 800dab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dabc:	4770      	bx	lr
 800dabe:	bf00      	nop
 800dac0:	20000044 	.word	0x20000044
 800dac4:	10624dd3 	.word	0x10624dd3

0800dac8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800dac8:	b580      	push	{r7, lr}
 800daca:	b088      	sub	sp, #32
 800dacc:	af00      	add	r7, sp, #0
 800dace:	60f8      	str	r0, [r7, #12]
 800dad0:	460b      	mov	r3, r1
 800dad2:	607a      	str	r2, [r7, #4]
 800dad4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dad6:	4b35      	ldr	r3, [pc, #212]	; (800dbac <SDMMC_GetCmdResp6+0xe4>)
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	4a35      	ldr	r2, [pc, #212]	; (800dbb0 <SDMMC_GetCmdResp6+0xe8>)
 800dadc:	fba2 2303 	umull	r2, r3, r2, r3
 800dae0:	0a5b      	lsrs	r3, r3, #9
 800dae2:	f241 3288 	movw	r2, #5000	; 0x1388
 800dae6:	fb02 f303 	mul.w	r3, r2, r3
 800daea:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800daec:	69fb      	ldr	r3, [r7, #28]
 800daee:	1e5a      	subs	r2, r3, #1
 800daf0:	61fa      	str	r2, [r7, #28]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d102      	bne.n	800dafc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800daf6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dafa:	e052      	b.n	800dba2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db00:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800db02:	69bb      	ldr	r3, [r7, #24]
 800db04:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d0ef      	beq.n	800daec <SDMMC_GetCmdResp6+0x24>
 800db0c:	69bb      	ldr	r3, [r7, #24]
 800db0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800db12:	2b00      	cmp	r3, #0
 800db14:	d1ea      	bne.n	800daec <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db1a:	f003 0304 	and.w	r3, r3, #4
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d004      	beq.n	800db2c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	2204      	movs	r2, #4
 800db26:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800db28:	2304      	movs	r3, #4
 800db2a:	e03a      	b.n	800dba2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db30:	f003 0301 	and.w	r3, r3, #1
 800db34:	2b00      	cmp	r3, #0
 800db36:	d004      	beq.n	800db42 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	2201      	movs	r2, #1
 800db3c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800db3e:	2301      	movs	r3, #1
 800db40:	e02f      	b.n	800dba2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800db42:	68f8      	ldr	r0, [r7, #12]
 800db44:	f7ff fc0e 	bl	800d364 <SDMMC_GetCommandResponse>
 800db48:	4603      	mov	r3, r0
 800db4a:	461a      	mov	r2, r3
 800db4c:	7afb      	ldrb	r3, [r7, #11]
 800db4e:	4293      	cmp	r3, r2
 800db50:	d001      	beq.n	800db56 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800db52:	2301      	movs	r3, #1
 800db54:	e025      	b.n	800dba2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	22c5      	movs	r2, #197	; 0xc5
 800db5a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800db5c:	2100      	movs	r1, #0
 800db5e:	68f8      	ldr	r0, [r7, #12]
 800db60:	f7ff fc0d 	bl	800d37e <SDMMC_GetResponse>
 800db64:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800db66:	697b      	ldr	r3, [r7, #20]
 800db68:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d106      	bne.n	800db7e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800db70:	697b      	ldr	r3, [r7, #20]
 800db72:	0c1b      	lsrs	r3, r3, #16
 800db74:	b29a      	uxth	r2, r3
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800db7a:	2300      	movs	r3, #0
 800db7c:	e011      	b.n	800dba2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800db7e:	697b      	ldr	r3, [r7, #20]
 800db80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800db84:	2b00      	cmp	r3, #0
 800db86:	d002      	beq.n	800db8e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800db88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800db8c:	e009      	b.n	800dba2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800db8e:	697b      	ldr	r3, [r7, #20]
 800db90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800db94:	2b00      	cmp	r3, #0
 800db96:	d002      	beq.n	800db9e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800db98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800db9c:	e001      	b.n	800dba2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800db9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800dba2:	4618      	mov	r0, r3
 800dba4:	3720      	adds	r7, #32
 800dba6:	46bd      	mov	sp, r7
 800dba8:	bd80      	pop	{r7, pc}
 800dbaa:	bf00      	nop
 800dbac:	20000044 	.word	0x20000044
 800dbb0:	10624dd3 	.word	0x10624dd3

0800dbb4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800dbb4:	b480      	push	{r7}
 800dbb6:	b085      	sub	sp, #20
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dbbc:	4b22      	ldr	r3, [pc, #136]	; (800dc48 <SDMMC_GetCmdResp7+0x94>)
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	4a22      	ldr	r2, [pc, #136]	; (800dc4c <SDMMC_GetCmdResp7+0x98>)
 800dbc2:	fba2 2303 	umull	r2, r3, r2, r3
 800dbc6:	0a5b      	lsrs	r3, r3, #9
 800dbc8:	f241 3288 	movw	r2, #5000	; 0x1388
 800dbcc:	fb02 f303 	mul.w	r3, r2, r3
 800dbd0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	1e5a      	subs	r2, r3, #1
 800dbd6:	60fa      	str	r2, [r7, #12]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d102      	bne.n	800dbe2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dbdc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dbe0:	e02c      	b.n	800dc3c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbe6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dbe8:	68bb      	ldr	r3, [r7, #8]
 800dbea:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d0ef      	beq.n	800dbd2 <SDMMC_GetCmdResp7+0x1e>
 800dbf2:	68bb      	ldr	r3, [r7, #8]
 800dbf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d1ea      	bne.n	800dbd2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc00:	f003 0304 	and.w	r3, r3, #4
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d004      	beq.n	800dc12 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	2204      	movs	r2, #4
 800dc0c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dc0e:	2304      	movs	r3, #4
 800dc10:	e014      	b.n	800dc3c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc16:	f003 0301 	and.w	r3, r3, #1
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d004      	beq.n	800dc28 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	2201      	movs	r2, #1
 800dc22:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dc24:	2301      	movs	r3, #1
 800dc26:	e009      	b.n	800dc3c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d002      	beq.n	800dc3a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	2240      	movs	r2, #64	; 0x40
 800dc38:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800dc3a:	2300      	movs	r3, #0
  
}
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	3714      	adds	r7, #20
 800dc40:	46bd      	mov	sp, r7
 800dc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc46:	4770      	bx	lr
 800dc48:	20000044 	.word	0x20000044
 800dc4c:	10624dd3 	.word	0x10624dd3

0800dc50 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800dc50:	b480      	push	{r7}
 800dc52:	b085      	sub	sp, #20
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dc58:	4b11      	ldr	r3, [pc, #68]	; (800dca0 <SDMMC_GetCmdError+0x50>)
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	4a11      	ldr	r2, [pc, #68]	; (800dca4 <SDMMC_GetCmdError+0x54>)
 800dc5e:	fba2 2303 	umull	r2, r3, r2, r3
 800dc62:	0a5b      	lsrs	r3, r3, #9
 800dc64:	f241 3288 	movw	r2, #5000	; 0x1388
 800dc68:	fb02 f303 	mul.w	r3, r2, r3
 800dc6c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	1e5a      	subs	r2, r3, #1
 800dc72:	60fa      	str	r2, [r7, #12]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d102      	bne.n	800dc7e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dc78:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dc7c:	e009      	b.n	800dc92 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d0f1      	beq.n	800dc6e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	22c5      	movs	r2, #197	; 0xc5
 800dc8e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800dc90:	2300      	movs	r3, #0
}
 800dc92:	4618      	mov	r0, r3
 800dc94:	3714      	adds	r7, #20
 800dc96:	46bd      	mov	sp, r7
 800dc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc9c:	4770      	bx	lr
 800dc9e:	bf00      	nop
 800dca0:	20000044 	.word	0x20000044
 800dca4:	10624dd3 	.word	0x10624dd3

0800dca8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800dcac:	4904      	ldr	r1, [pc, #16]	; (800dcc0 <MX_FATFS_Init+0x18>)
 800dcae:	4805      	ldr	r0, [pc, #20]	; (800dcc4 <MX_FATFS_Init+0x1c>)
 800dcb0:	f002 fee6 	bl	8010a80 <FATFS_LinkDriver>
 800dcb4:	4603      	mov	r3, r0
 800dcb6:	461a      	mov	r2, r3
 800dcb8:	4b03      	ldr	r3, [pc, #12]	; (800dcc8 <MX_FATFS_Init+0x20>)
 800dcba:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800dcbc:	bf00      	nop
 800dcbe:	bd80      	pop	{r7, pc}
 800dcc0:	20000d34 	.word	0x20000d34
 800dcc4:	080167a0 	.word	0x080167a0
 800dcc8:	20000d30 	.word	0x20000d30

0800dccc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800dccc:	b480      	push	{r7}
 800dcce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800dcd0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	46bd      	mov	sp, r7
 800dcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcda:	4770      	bx	lr

0800dcdc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b082      	sub	sp, #8
 800dce0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800dce2:	2300      	movs	r3, #0
 800dce4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800dce6:	f000 f888 	bl	800ddfa <BSP_SD_IsDetected>
 800dcea:	4603      	mov	r3, r0
 800dcec:	2b01      	cmp	r3, #1
 800dcee:	d001      	beq.n	800dcf4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800dcf0:	2302      	movs	r3, #2
 800dcf2:	e005      	b.n	800dd00 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800dcf4:	4804      	ldr	r0, [pc, #16]	; (800dd08 <BSP_SD_Init+0x2c>)
 800dcf6:	f7fd f8b8 	bl	800ae6a <HAL_SD_Init>
 800dcfa:	4603      	mov	r3, r0
 800dcfc:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800dcfe:	79fb      	ldrb	r3, [r7, #7]
}
 800dd00:	4618      	mov	r0, r3
 800dd02:	3708      	adds	r7, #8
 800dd04:	46bd      	mov	sp, r7
 800dd06:	bd80      	pop	{r7, pc}
 800dd08:	200005b8 	.word	0x200005b8

0800dd0c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	b086      	sub	sp, #24
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	60f8      	str	r0, [r7, #12]
 800dd14:	60b9      	str	r1, [r7, #8]
 800dd16:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800dd18:	2300      	movs	r3, #0
 800dd1a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	68ba      	ldr	r2, [r7, #8]
 800dd20:	68f9      	ldr	r1, [r7, #12]
 800dd22:	4806      	ldr	r0, [pc, #24]	; (800dd3c <BSP_SD_ReadBlocks_DMA+0x30>)
 800dd24:	f7fd f95a 	bl	800afdc <HAL_SD_ReadBlocks_DMA>
 800dd28:	4603      	mov	r3, r0
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d001      	beq.n	800dd32 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800dd2e:	2301      	movs	r3, #1
 800dd30:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800dd32:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd34:	4618      	mov	r0, r3
 800dd36:	3718      	adds	r7, #24
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	bd80      	pop	{r7, pc}
 800dd3c:	200005b8 	.word	0x200005b8

0800dd40 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800dd40:	b580      	push	{r7, lr}
 800dd42:	b086      	sub	sp, #24
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	60f8      	str	r0, [r7, #12]
 800dd48:	60b9      	str	r1, [r7, #8]
 800dd4a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	68ba      	ldr	r2, [r7, #8]
 800dd54:	68f9      	ldr	r1, [r7, #12]
 800dd56:	4806      	ldr	r0, [pc, #24]	; (800dd70 <BSP_SD_WriteBlocks_DMA+0x30>)
 800dd58:	f7fd fa22 	bl	800b1a0 <HAL_SD_WriteBlocks_DMA>
 800dd5c:	4603      	mov	r3, r0
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d001      	beq.n	800dd66 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800dd62:	2301      	movs	r3, #1
 800dd64:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800dd66:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd68:	4618      	mov	r0, r3
 800dd6a:	3718      	adds	r7, #24
 800dd6c:	46bd      	mov	sp, r7
 800dd6e:	bd80      	pop	{r7, pc}
 800dd70:	200005b8 	.word	0x200005b8

0800dd74 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800dd74:	b580      	push	{r7, lr}
 800dd76:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800dd78:	4805      	ldr	r0, [pc, #20]	; (800dd90 <BSP_SD_GetCardState+0x1c>)
 800dd7a:	f7fd fe47 	bl	800ba0c <HAL_SD_GetCardState>
 800dd7e:	4603      	mov	r3, r0
 800dd80:	2b04      	cmp	r3, #4
 800dd82:	bf14      	ite	ne
 800dd84:	2301      	movne	r3, #1
 800dd86:	2300      	moveq	r3, #0
 800dd88:	b2db      	uxtb	r3, r3
}
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	bd80      	pop	{r7, pc}
 800dd8e:	bf00      	nop
 800dd90:	200005b8 	.word	0x200005b8

0800dd94 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800dd94:	b580      	push	{r7, lr}
 800dd96:	b082      	sub	sp, #8
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800dd9c:	6879      	ldr	r1, [r7, #4]
 800dd9e:	4803      	ldr	r0, [pc, #12]	; (800ddac <BSP_SD_GetCardInfo+0x18>)
 800dda0:	f7fd fe08 	bl	800b9b4 <HAL_SD_GetCardInfo>
}
 800dda4:	bf00      	nop
 800dda6:	3708      	adds	r7, #8
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	bd80      	pop	{r7, pc}
 800ddac:	200005b8 	.word	0x200005b8

0800ddb0 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b082      	sub	sp, #8
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800ddb8:	f000 f818 	bl	800ddec <BSP_SD_AbortCallback>
}
 800ddbc:	bf00      	nop
 800ddbe:	3708      	adds	r7, #8
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	bd80      	pop	{r7, pc}

0800ddc4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b082      	sub	sp, #8
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800ddcc:	f000 f9c4 	bl	800e158 <BSP_SD_WriteCpltCallback>
}
 800ddd0:	bf00      	nop
 800ddd2:	3708      	adds	r7, #8
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	bd80      	pop	{r7, pc}

0800ddd8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b082      	sub	sp, #8
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800dde0:	f000 f9c8 	bl	800e174 <BSP_SD_ReadCpltCallback>
}
 800dde4:	bf00      	nop
 800dde6:	3708      	adds	r7, #8
 800dde8:	46bd      	mov	sp, r7
 800ddea:	bd80      	pop	{r7, pc}

0800ddec <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800ddec:	b480      	push	{r7}
 800ddee:	af00      	add	r7, sp, #0

}
 800ddf0:	bf00      	nop
 800ddf2:	46bd      	mov	sp, r7
 800ddf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf8:	4770      	bx	lr

0800ddfa <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800ddfa:	b580      	push	{r7, lr}
 800ddfc:	b082      	sub	sp, #8
 800ddfe:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800de00:	2301      	movs	r3, #1
 800de02:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800de04:	f000 f80c 	bl	800de20 <BSP_PlatformIsDetected>
 800de08:	4603      	mov	r3, r0
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d101      	bne.n	800de12 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800de0e:	2300      	movs	r3, #0
 800de10:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800de12:	79fb      	ldrb	r3, [r7, #7]
 800de14:	b2db      	uxtb	r3, r3
}
 800de16:	4618      	mov	r0, r3
 800de18:	3708      	adds	r7, #8
 800de1a:	46bd      	mov	sp, r7
 800de1c:	bd80      	pop	{r7, pc}
	...

0800de20 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800de20:	b580      	push	{r7, lr}
 800de22:	b082      	sub	sp, #8
 800de24:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800de26:	2301      	movs	r3, #1
 800de28:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800de2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800de2e:	4806      	ldr	r0, [pc, #24]	; (800de48 <BSP_PlatformIsDetected+0x28>)
 800de30:	f7fa f81a 	bl	8007e68 <HAL_GPIO_ReadPin>
 800de34:	4603      	mov	r3, r0
 800de36:	2b00      	cmp	r3, #0
 800de38:	d001      	beq.n	800de3e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800de3a:	2300      	movs	r3, #0
 800de3c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800de3e:	79fb      	ldrb	r3, [r7, #7]
}
 800de40:	4618      	mov	r0, r3
 800de42:	3708      	adds	r7, #8
 800de44:	46bd      	mov	sp, r7
 800de46:	bd80      	pop	{r7, pc}
 800de48:	40020800 	.word	0x40020800

0800de4c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800de4c:	b580      	push	{r7, lr}
 800de4e:	b084      	sub	sp, #16
 800de50:	af00      	add	r7, sp, #0
 800de52:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800de54:	f002 feac 	bl	8010bb0 <osKernelSysTick>
 800de58:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800de5a:	e006      	b.n	800de6a <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800de5c:	f7ff ff8a 	bl	800dd74 <BSP_SD_GetCardState>
 800de60:	4603      	mov	r3, r0
 800de62:	2b00      	cmp	r3, #0
 800de64:	d101      	bne.n	800de6a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800de66:	2300      	movs	r3, #0
 800de68:	e009      	b.n	800de7e <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800de6a:	f002 fea1 	bl	8010bb0 <osKernelSysTick>
 800de6e:	4602      	mov	r2, r0
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	1ad3      	subs	r3, r2, r3
 800de74:	687a      	ldr	r2, [r7, #4]
 800de76:	429a      	cmp	r2, r3
 800de78:	d8f0      	bhi.n	800de5c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800de7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800de7e:	4618      	mov	r0, r3
 800de80:	3710      	adds	r7, #16
 800de82:	46bd      	mov	sp, r7
 800de84:	bd80      	pop	{r7, pc}
	...

0800de88 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b082      	sub	sp, #8
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	4603      	mov	r3, r0
 800de90:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800de92:	4b0b      	ldr	r3, [pc, #44]	; (800dec0 <SD_CheckStatus+0x38>)
 800de94:	2201      	movs	r2, #1
 800de96:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800de98:	f7ff ff6c 	bl	800dd74 <BSP_SD_GetCardState>
 800de9c:	4603      	mov	r3, r0
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d107      	bne.n	800deb2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800dea2:	4b07      	ldr	r3, [pc, #28]	; (800dec0 <SD_CheckStatus+0x38>)
 800dea4:	781b      	ldrb	r3, [r3, #0]
 800dea6:	b2db      	uxtb	r3, r3
 800dea8:	f023 0301 	bic.w	r3, r3, #1
 800deac:	b2da      	uxtb	r2, r3
 800deae:	4b04      	ldr	r3, [pc, #16]	; (800dec0 <SD_CheckStatus+0x38>)
 800deb0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800deb2:	4b03      	ldr	r3, [pc, #12]	; (800dec0 <SD_CheckStatus+0x38>)
 800deb4:	781b      	ldrb	r3, [r3, #0]
 800deb6:	b2db      	uxtb	r3, r3
}
 800deb8:	4618      	mov	r0, r3
 800deba:	3708      	adds	r7, #8
 800debc:	46bd      	mov	sp, r7
 800debe:	bd80      	pop	{r7, pc}
 800dec0:	20000089 	.word	0x20000089

0800dec4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800dec4:	b590      	push	{r4, r7, lr}
 800dec6:	b087      	sub	sp, #28
 800dec8:	af00      	add	r7, sp, #0
 800deca:	4603      	mov	r3, r0
 800decc:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800dece:	4b20      	ldr	r3, [pc, #128]	; (800df50 <SD_initialize+0x8c>)
 800ded0:	2201      	movs	r2, #1
 800ded2:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800ded4:	f002 fe60 	bl	8010b98 <osKernelRunning>
 800ded8:	4603      	mov	r3, r0
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d030      	beq.n	800df40 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800dede:	f7ff fefd 	bl	800dcdc <BSP_SD_Init>
 800dee2:	4603      	mov	r3, r0
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d107      	bne.n	800def8 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800dee8:	79fb      	ldrb	r3, [r7, #7]
 800deea:	4618      	mov	r0, r3
 800deec:	f7ff ffcc 	bl	800de88 <SD_CheckStatus>
 800def0:	4603      	mov	r3, r0
 800def2:	461a      	mov	r2, r3
 800def4:	4b16      	ldr	r3, [pc, #88]	; (800df50 <SD_initialize+0x8c>)
 800def6:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800def8:	4b15      	ldr	r3, [pc, #84]	; (800df50 <SD_initialize+0x8c>)
 800defa:	781b      	ldrb	r3, [r3, #0]
 800defc:	b2db      	uxtb	r3, r3
 800defe:	2b01      	cmp	r3, #1
 800df00:	d01e      	beq.n	800df40 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800df02:	4b14      	ldr	r3, [pc, #80]	; (800df54 <SD_initialize+0x90>)
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	2b00      	cmp	r3, #0
 800df08:	d10e      	bne.n	800df28 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800df0a:	4b13      	ldr	r3, [pc, #76]	; (800df58 <SD_initialize+0x94>)
 800df0c:	f107 0408 	add.w	r4, r7, #8
 800df10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800df12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800df16:	f107 0308 	add.w	r3, r7, #8
 800df1a:	2100      	movs	r1, #0
 800df1c:	4618      	mov	r0, r3
 800df1e:	f002 ff80 	bl	8010e22 <osMessageCreate>
 800df22:	4603      	mov	r3, r0
 800df24:	4a0b      	ldr	r2, [pc, #44]	; (800df54 <SD_initialize+0x90>)
 800df26:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800df28:	4b0a      	ldr	r3, [pc, #40]	; (800df54 <SD_initialize+0x90>)
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d107      	bne.n	800df40 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800df30:	4b07      	ldr	r3, [pc, #28]	; (800df50 <SD_initialize+0x8c>)
 800df32:	781b      	ldrb	r3, [r3, #0]
 800df34:	b2db      	uxtb	r3, r3
 800df36:	f043 0301 	orr.w	r3, r3, #1
 800df3a:	b2da      	uxtb	r2, r3
 800df3c:	4b04      	ldr	r3, [pc, #16]	; (800df50 <SD_initialize+0x8c>)
 800df3e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800df40:	4b03      	ldr	r3, [pc, #12]	; (800df50 <SD_initialize+0x8c>)
 800df42:	781b      	ldrb	r3, [r3, #0]
 800df44:	b2db      	uxtb	r3, r3
}
 800df46:	4618      	mov	r0, r3
 800df48:	371c      	adds	r7, #28
 800df4a:	46bd      	mov	sp, r7
 800df4c:	bd90      	pop	{r4, r7, pc}
 800df4e:	bf00      	nop
 800df50:	20000089 	.word	0x20000089
 800df54:	2000119c 	.word	0x2000119c
 800df58:	08013c18 	.word	0x08013c18

0800df5c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800df5c:	b580      	push	{r7, lr}
 800df5e:	b082      	sub	sp, #8
 800df60:	af00      	add	r7, sp, #0
 800df62:	4603      	mov	r3, r0
 800df64:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800df66:	79fb      	ldrb	r3, [r7, #7]
 800df68:	4618      	mov	r0, r3
 800df6a:	f7ff ff8d 	bl	800de88 <SD_CheckStatus>
 800df6e:	4603      	mov	r3, r0
}
 800df70:	4618      	mov	r0, r3
 800df72:	3708      	adds	r7, #8
 800df74:	46bd      	mov	sp, r7
 800df76:	bd80      	pop	{r7, pc}

0800df78 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800df78:	b580      	push	{r7, lr}
 800df7a:	b08a      	sub	sp, #40	; 0x28
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	60b9      	str	r1, [r7, #8]
 800df80:	607a      	str	r2, [r7, #4]
 800df82:	603b      	str	r3, [r7, #0]
 800df84:	4603      	mov	r3, r0
 800df86:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800df88:	2301      	movs	r3, #1
 800df8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800df8e:	f247 5030 	movw	r0, #30000	; 0x7530
 800df92:	f7ff ff5b 	bl	800de4c <SD_CheckStatusWithTimeout>
 800df96:	4603      	mov	r3, r0
 800df98:	2b00      	cmp	r3, #0
 800df9a:	da02      	bge.n	800dfa2 <SD_read+0x2a>
  {
    return res;
 800df9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dfa0:	e032      	b.n	800e008 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800dfa2:	683a      	ldr	r2, [r7, #0]
 800dfa4:	6879      	ldr	r1, [r7, #4]
 800dfa6:	68b8      	ldr	r0, [r7, #8]
 800dfa8:	f7ff feb0 	bl	800dd0c <BSP_SD_ReadBlocks_DMA>
 800dfac:	4603      	mov	r3, r0
 800dfae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800dfb2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d124      	bne.n	800e004 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800dfba:	4b15      	ldr	r3, [pc, #84]	; (800e010 <SD_read+0x98>)
 800dfbc:	6819      	ldr	r1, [r3, #0]
 800dfbe:	f107 0314 	add.w	r3, r7, #20
 800dfc2:	f247 5230 	movw	r2, #30000	; 0x7530
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	f002 ff94 	bl	8010ef4 <osMessageGet>

    if (event.status == osEventMessage)
 800dfcc:	697b      	ldr	r3, [r7, #20]
 800dfce:	2b10      	cmp	r3, #16
 800dfd0:	d118      	bne.n	800e004 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800dfd2:	69bb      	ldr	r3, [r7, #24]
 800dfd4:	2b01      	cmp	r3, #1
 800dfd6:	d115      	bne.n	800e004 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800dfd8:	f002 fdea 	bl	8010bb0 <osKernelSysTick>
 800dfdc:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800dfde:	e008      	b.n	800dff2 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800dfe0:	f7ff fec8 	bl	800dd74 <BSP_SD_GetCardState>
 800dfe4:	4603      	mov	r3, r0
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d103      	bne.n	800dff2 <SD_read+0x7a>
              {
                res = RES_OK;
 800dfea:	2300      	movs	r3, #0
 800dfec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800dff0:	e008      	b.n	800e004 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800dff2:	f002 fddd 	bl	8010bb0 <osKernelSysTick>
 800dff6:	4602      	mov	r2, r0
 800dff8:	6a3b      	ldr	r3, [r7, #32]
 800dffa:	1ad3      	subs	r3, r2, r3
 800dffc:	f247 522f 	movw	r2, #29999	; 0x752f
 800e000:	4293      	cmp	r3, r2
 800e002:	d9ed      	bls.n	800dfe0 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800e004:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e008:	4618      	mov	r0, r3
 800e00a:	3728      	adds	r7, #40	; 0x28
 800e00c:	46bd      	mov	sp, r7
 800e00e:	bd80      	pop	{r7, pc}
 800e010:	2000119c 	.word	0x2000119c

0800e014 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800e014:	b580      	push	{r7, lr}
 800e016:	b08a      	sub	sp, #40	; 0x28
 800e018:	af00      	add	r7, sp, #0
 800e01a:	60b9      	str	r1, [r7, #8]
 800e01c:	607a      	str	r2, [r7, #4]
 800e01e:	603b      	str	r3, [r7, #0]
 800e020:	4603      	mov	r3, r0
 800e022:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e024:	2301      	movs	r3, #1
 800e026:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e02a:	f247 5030 	movw	r0, #30000	; 0x7530
 800e02e:	f7ff ff0d 	bl	800de4c <SD_CheckStatusWithTimeout>
 800e032:	4603      	mov	r3, r0
 800e034:	2b00      	cmp	r3, #0
 800e036:	da02      	bge.n	800e03e <SD_write+0x2a>
  {
    return res;
 800e038:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e03c:	e02e      	b.n	800e09c <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800e03e:	683a      	ldr	r2, [r7, #0]
 800e040:	6879      	ldr	r1, [r7, #4]
 800e042:	68b8      	ldr	r0, [r7, #8]
 800e044:	f7ff fe7c 	bl	800dd40 <BSP_SD_WriteBlocks_DMA>
 800e048:	4603      	mov	r3, r0
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d124      	bne.n	800e098 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800e04e:	4b15      	ldr	r3, [pc, #84]	; (800e0a4 <SD_write+0x90>)
 800e050:	6819      	ldr	r1, [r3, #0]
 800e052:	f107 0314 	add.w	r3, r7, #20
 800e056:	f247 5230 	movw	r2, #30000	; 0x7530
 800e05a:	4618      	mov	r0, r3
 800e05c:	f002 ff4a 	bl	8010ef4 <osMessageGet>

    if (event.status == osEventMessage)
 800e060:	697b      	ldr	r3, [r7, #20]
 800e062:	2b10      	cmp	r3, #16
 800e064:	d118      	bne.n	800e098 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800e066:	69bb      	ldr	r3, [r7, #24]
 800e068:	2b02      	cmp	r3, #2
 800e06a:	d115      	bne.n	800e098 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800e06c:	f002 fda0 	bl	8010bb0 <osKernelSysTick>
 800e070:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800e072:	e008      	b.n	800e086 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e074:	f7ff fe7e 	bl	800dd74 <BSP_SD_GetCardState>
 800e078:	4603      	mov	r3, r0
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d103      	bne.n	800e086 <SD_write+0x72>
          {
            res = RES_OK;
 800e07e:	2300      	movs	r3, #0
 800e080:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800e084:	e008      	b.n	800e098 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800e086:	f002 fd93 	bl	8010bb0 <osKernelSysTick>
 800e08a:	4602      	mov	r2, r0
 800e08c:	6a3b      	ldr	r3, [r7, #32]
 800e08e:	1ad3      	subs	r3, r2, r3
 800e090:	f247 522f 	movw	r2, #29999	; 0x752f
 800e094:	4293      	cmp	r3, r2
 800e096:	d9ed      	bls.n	800e074 <SD_write+0x60>
    }

  }
#endif

  return res;
 800e098:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e09c:	4618      	mov	r0, r3
 800e09e:	3728      	adds	r7, #40	; 0x28
 800e0a0:	46bd      	mov	sp, r7
 800e0a2:	bd80      	pop	{r7, pc}
 800e0a4:	2000119c 	.word	0x2000119c

0800e0a8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800e0a8:	b580      	push	{r7, lr}
 800e0aa:	b08c      	sub	sp, #48	; 0x30
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	4603      	mov	r3, r0
 800e0b0:	603a      	str	r2, [r7, #0]
 800e0b2:	71fb      	strb	r3, [r7, #7]
 800e0b4:	460b      	mov	r3, r1
 800e0b6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800e0b8:	2301      	movs	r3, #1
 800e0ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e0be:	4b25      	ldr	r3, [pc, #148]	; (800e154 <SD_ioctl+0xac>)
 800e0c0:	781b      	ldrb	r3, [r3, #0]
 800e0c2:	b2db      	uxtb	r3, r3
 800e0c4:	f003 0301 	and.w	r3, r3, #1
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d001      	beq.n	800e0d0 <SD_ioctl+0x28>
 800e0cc:	2303      	movs	r3, #3
 800e0ce:	e03c      	b.n	800e14a <SD_ioctl+0xa2>

  switch (cmd)
 800e0d0:	79bb      	ldrb	r3, [r7, #6]
 800e0d2:	2b03      	cmp	r3, #3
 800e0d4:	d834      	bhi.n	800e140 <SD_ioctl+0x98>
 800e0d6:	a201      	add	r2, pc, #4	; (adr r2, 800e0dc <SD_ioctl+0x34>)
 800e0d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0dc:	0800e0ed 	.word	0x0800e0ed
 800e0e0:	0800e0f5 	.word	0x0800e0f5
 800e0e4:	0800e10d 	.word	0x0800e10d
 800e0e8:	0800e127 	.word	0x0800e127
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e0f2:	e028      	b.n	800e146 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800e0f4:	f107 030c 	add.w	r3, r7, #12
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	f7ff fe4b 	bl	800dd94 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800e0fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e100:	683b      	ldr	r3, [r7, #0]
 800e102:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e104:	2300      	movs	r3, #0
 800e106:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e10a:	e01c      	b.n	800e146 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e10c:	f107 030c 	add.w	r3, r7, #12
 800e110:	4618      	mov	r0, r3
 800e112:	f7ff fe3f 	bl	800dd94 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800e116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e118:	b29a      	uxth	r2, r3
 800e11a:	683b      	ldr	r3, [r7, #0]
 800e11c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800e11e:	2300      	movs	r3, #0
 800e120:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e124:	e00f      	b.n	800e146 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e126:	f107 030c 	add.w	r3, r7, #12
 800e12a:	4618      	mov	r0, r3
 800e12c:	f7ff fe32 	bl	800dd94 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800e130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e132:	0a5a      	lsrs	r2, r3, #9
 800e134:	683b      	ldr	r3, [r7, #0]
 800e136:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e138:	2300      	movs	r3, #0
 800e13a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e13e:	e002      	b.n	800e146 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800e140:	2304      	movs	r3, #4
 800e142:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800e146:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e14a:	4618      	mov	r0, r3
 800e14c:	3730      	adds	r7, #48	; 0x30
 800e14e:	46bd      	mov	sp, r7
 800e150:	bd80      	pop	{r7, pc}
 800e152:	bf00      	nop
 800e154:	20000089 	.word	0x20000089

0800e158 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800e158:	b580      	push	{r7, lr}
 800e15a:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 800e15c:	4b04      	ldr	r3, [pc, #16]	; (800e170 <BSP_SD_WriteCpltCallback+0x18>)
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	2200      	movs	r2, #0
 800e162:	2102      	movs	r1, #2
 800e164:	4618      	mov	r0, r3
 800e166:	f002 fe85 	bl	8010e74 <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800e16a:	bf00      	nop
 800e16c:	bd80      	pop	{r7, pc}
 800e16e:	bf00      	nop
 800e170:	2000119c 	.word	0x2000119c

0800e174 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800e174:	b580      	push	{r7, lr}
 800e176:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800e178:	4b04      	ldr	r3, [pc, #16]	; (800e18c <BSP_SD_ReadCpltCallback+0x18>)
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	2200      	movs	r2, #0
 800e17e:	2101      	movs	r1, #1
 800e180:	4618      	mov	r0, r3
 800e182:	f002 fe77 	bl	8010e74 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800e186:	bf00      	nop
 800e188:	bd80      	pop	{r7, pc}
 800e18a:	bf00      	nop
 800e18c:	2000119c 	.word	0x2000119c

0800e190 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800e190:	b580      	push	{r7, lr}
 800e192:	b084      	sub	sp, #16
 800e194:	af00      	add	r7, sp, #0
 800e196:	4603      	mov	r3, r0
 800e198:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e19a:	79fb      	ldrb	r3, [r7, #7]
 800e19c:	4a08      	ldr	r2, [pc, #32]	; (800e1c0 <disk_status+0x30>)
 800e19e:	009b      	lsls	r3, r3, #2
 800e1a0:	4413      	add	r3, r2
 800e1a2:	685b      	ldr	r3, [r3, #4]
 800e1a4:	685b      	ldr	r3, [r3, #4]
 800e1a6:	79fa      	ldrb	r2, [r7, #7]
 800e1a8:	4905      	ldr	r1, [pc, #20]	; (800e1c0 <disk_status+0x30>)
 800e1aa:	440a      	add	r2, r1
 800e1ac:	7a12      	ldrb	r2, [r2, #8]
 800e1ae:	4610      	mov	r0, r2
 800e1b0:	4798      	blx	r3
 800e1b2:	4603      	mov	r3, r0
 800e1b4:	73fb      	strb	r3, [r7, #15]
  return stat;
 800e1b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	3710      	adds	r7, #16
 800e1bc:	46bd      	mov	sp, r7
 800e1be:	bd80      	pop	{r7, pc}
 800e1c0:	200011c8 	.word	0x200011c8

0800e1c4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800e1c4:	b580      	push	{r7, lr}
 800e1c6:	b084      	sub	sp, #16
 800e1c8:	af00      	add	r7, sp, #0
 800e1ca:	4603      	mov	r3, r0
 800e1cc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800e1d2:	79fb      	ldrb	r3, [r7, #7]
 800e1d4:	4a0d      	ldr	r2, [pc, #52]	; (800e20c <disk_initialize+0x48>)
 800e1d6:	5cd3      	ldrb	r3, [r2, r3]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d111      	bne.n	800e200 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800e1dc:	79fb      	ldrb	r3, [r7, #7]
 800e1de:	4a0b      	ldr	r2, [pc, #44]	; (800e20c <disk_initialize+0x48>)
 800e1e0:	2101      	movs	r1, #1
 800e1e2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e1e4:	79fb      	ldrb	r3, [r7, #7]
 800e1e6:	4a09      	ldr	r2, [pc, #36]	; (800e20c <disk_initialize+0x48>)
 800e1e8:	009b      	lsls	r3, r3, #2
 800e1ea:	4413      	add	r3, r2
 800e1ec:	685b      	ldr	r3, [r3, #4]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	79fa      	ldrb	r2, [r7, #7]
 800e1f2:	4906      	ldr	r1, [pc, #24]	; (800e20c <disk_initialize+0x48>)
 800e1f4:	440a      	add	r2, r1
 800e1f6:	7a12      	ldrb	r2, [r2, #8]
 800e1f8:	4610      	mov	r0, r2
 800e1fa:	4798      	blx	r3
 800e1fc:	4603      	mov	r3, r0
 800e1fe:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800e200:	7bfb      	ldrb	r3, [r7, #15]
}
 800e202:	4618      	mov	r0, r3
 800e204:	3710      	adds	r7, #16
 800e206:	46bd      	mov	sp, r7
 800e208:	bd80      	pop	{r7, pc}
 800e20a:	bf00      	nop
 800e20c:	200011c8 	.word	0x200011c8

0800e210 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e210:	b590      	push	{r4, r7, lr}
 800e212:	b087      	sub	sp, #28
 800e214:	af00      	add	r7, sp, #0
 800e216:	60b9      	str	r1, [r7, #8]
 800e218:	607a      	str	r2, [r7, #4]
 800e21a:	603b      	str	r3, [r7, #0]
 800e21c:	4603      	mov	r3, r0
 800e21e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e220:	7bfb      	ldrb	r3, [r7, #15]
 800e222:	4a0a      	ldr	r2, [pc, #40]	; (800e24c <disk_read+0x3c>)
 800e224:	009b      	lsls	r3, r3, #2
 800e226:	4413      	add	r3, r2
 800e228:	685b      	ldr	r3, [r3, #4]
 800e22a:	689c      	ldr	r4, [r3, #8]
 800e22c:	7bfb      	ldrb	r3, [r7, #15]
 800e22e:	4a07      	ldr	r2, [pc, #28]	; (800e24c <disk_read+0x3c>)
 800e230:	4413      	add	r3, r2
 800e232:	7a18      	ldrb	r0, [r3, #8]
 800e234:	683b      	ldr	r3, [r7, #0]
 800e236:	687a      	ldr	r2, [r7, #4]
 800e238:	68b9      	ldr	r1, [r7, #8]
 800e23a:	47a0      	blx	r4
 800e23c:	4603      	mov	r3, r0
 800e23e:	75fb      	strb	r3, [r7, #23]
  return res;
 800e240:	7dfb      	ldrb	r3, [r7, #23]
}
 800e242:	4618      	mov	r0, r3
 800e244:	371c      	adds	r7, #28
 800e246:	46bd      	mov	sp, r7
 800e248:	bd90      	pop	{r4, r7, pc}
 800e24a:	bf00      	nop
 800e24c:	200011c8 	.word	0x200011c8

0800e250 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e250:	b590      	push	{r4, r7, lr}
 800e252:	b087      	sub	sp, #28
 800e254:	af00      	add	r7, sp, #0
 800e256:	60b9      	str	r1, [r7, #8]
 800e258:	607a      	str	r2, [r7, #4]
 800e25a:	603b      	str	r3, [r7, #0]
 800e25c:	4603      	mov	r3, r0
 800e25e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e260:	7bfb      	ldrb	r3, [r7, #15]
 800e262:	4a0a      	ldr	r2, [pc, #40]	; (800e28c <disk_write+0x3c>)
 800e264:	009b      	lsls	r3, r3, #2
 800e266:	4413      	add	r3, r2
 800e268:	685b      	ldr	r3, [r3, #4]
 800e26a:	68dc      	ldr	r4, [r3, #12]
 800e26c:	7bfb      	ldrb	r3, [r7, #15]
 800e26e:	4a07      	ldr	r2, [pc, #28]	; (800e28c <disk_write+0x3c>)
 800e270:	4413      	add	r3, r2
 800e272:	7a18      	ldrb	r0, [r3, #8]
 800e274:	683b      	ldr	r3, [r7, #0]
 800e276:	687a      	ldr	r2, [r7, #4]
 800e278:	68b9      	ldr	r1, [r7, #8]
 800e27a:	47a0      	blx	r4
 800e27c:	4603      	mov	r3, r0
 800e27e:	75fb      	strb	r3, [r7, #23]
  return res;
 800e280:	7dfb      	ldrb	r3, [r7, #23]
}
 800e282:	4618      	mov	r0, r3
 800e284:	371c      	adds	r7, #28
 800e286:	46bd      	mov	sp, r7
 800e288:	bd90      	pop	{r4, r7, pc}
 800e28a:	bf00      	nop
 800e28c:	200011c8 	.word	0x200011c8

0800e290 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800e290:	b580      	push	{r7, lr}
 800e292:	b084      	sub	sp, #16
 800e294:	af00      	add	r7, sp, #0
 800e296:	4603      	mov	r3, r0
 800e298:	603a      	str	r2, [r7, #0]
 800e29a:	71fb      	strb	r3, [r7, #7]
 800e29c:	460b      	mov	r3, r1
 800e29e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e2a0:	79fb      	ldrb	r3, [r7, #7]
 800e2a2:	4a09      	ldr	r2, [pc, #36]	; (800e2c8 <disk_ioctl+0x38>)
 800e2a4:	009b      	lsls	r3, r3, #2
 800e2a6:	4413      	add	r3, r2
 800e2a8:	685b      	ldr	r3, [r3, #4]
 800e2aa:	691b      	ldr	r3, [r3, #16]
 800e2ac:	79fa      	ldrb	r2, [r7, #7]
 800e2ae:	4906      	ldr	r1, [pc, #24]	; (800e2c8 <disk_ioctl+0x38>)
 800e2b0:	440a      	add	r2, r1
 800e2b2:	7a10      	ldrb	r0, [r2, #8]
 800e2b4:	79b9      	ldrb	r1, [r7, #6]
 800e2b6:	683a      	ldr	r2, [r7, #0]
 800e2b8:	4798      	blx	r3
 800e2ba:	4603      	mov	r3, r0
 800e2bc:	73fb      	strb	r3, [r7, #15]
  return res;
 800e2be:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	3710      	adds	r7, #16
 800e2c4:	46bd      	mov	sp, r7
 800e2c6:	bd80      	pop	{r7, pc}
 800e2c8:	200011c8 	.word	0x200011c8

0800e2cc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800e2cc:	b480      	push	{r7}
 800e2ce:	b085      	sub	sp, #20
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	3301      	adds	r3, #1
 800e2d8:	781b      	ldrb	r3, [r3, #0]
 800e2da:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800e2dc:	89fb      	ldrh	r3, [r7, #14]
 800e2de:	021b      	lsls	r3, r3, #8
 800e2e0:	b21a      	sxth	r2, r3
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	781b      	ldrb	r3, [r3, #0]
 800e2e6:	b21b      	sxth	r3, r3
 800e2e8:	4313      	orrs	r3, r2
 800e2ea:	b21b      	sxth	r3, r3
 800e2ec:	81fb      	strh	r3, [r7, #14]
	return rv;
 800e2ee:	89fb      	ldrh	r3, [r7, #14]
}
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	3714      	adds	r7, #20
 800e2f4:	46bd      	mov	sp, r7
 800e2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fa:	4770      	bx	lr

0800e2fc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800e2fc:	b480      	push	{r7}
 800e2fe:	b085      	sub	sp, #20
 800e300:	af00      	add	r7, sp, #0
 800e302:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	3303      	adds	r3, #3
 800e308:	781b      	ldrb	r3, [r3, #0]
 800e30a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	021b      	lsls	r3, r3, #8
 800e310:	687a      	ldr	r2, [r7, #4]
 800e312:	3202      	adds	r2, #2
 800e314:	7812      	ldrb	r2, [r2, #0]
 800e316:	4313      	orrs	r3, r2
 800e318:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	021b      	lsls	r3, r3, #8
 800e31e:	687a      	ldr	r2, [r7, #4]
 800e320:	3201      	adds	r2, #1
 800e322:	7812      	ldrb	r2, [r2, #0]
 800e324:	4313      	orrs	r3, r2
 800e326:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	021b      	lsls	r3, r3, #8
 800e32c:	687a      	ldr	r2, [r7, #4]
 800e32e:	7812      	ldrb	r2, [r2, #0]
 800e330:	4313      	orrs	r3, r2
 800e332:	60fb      	str	r3, [r7, #12]
	return rv;
 800e334:	68fb      	ldr	r3, [r7, #12]
}
 800e336:	4618      	mov	r0, r3
 800e338:	3714      	adds	r7, #20
 800e33a:	46bd      	mov	sp, r7
 800e33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e340:	4770      	bx	lr

0800e342 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800e342:	b480      	push	{r7}
 800e344:	b083      	sub	sp, #12
 800e346:	af00      	add	r7, sp, #0
 800e348:	6078      	str	r0, [r7, #4]
 800e34a:	460b      	mov	r3, r1
 800e34c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	1c5a      	adds	r2, r3, #1
 800e352:	607a      	str	r2, [r7, #4]
 800e354:	887a      	ldrh	r2, [r7, #2]
 800e356:	b2d2      	uxtb	r2, r2
 800e358:	701a      	strb	r2, [r3, #0]
 800e35a:	887b      	ldrh	r3, [r7, #2]
 800e35c:	0a1b      	lsrs	r3, r3, #8
 800e35e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	1c5a      	adds	r2, r3, #1
 800e364:	607a      	str	r2, [r7, #4]
 800e366:	887a      	ldrh	r2, [r7, #2]
 800e368:	b2d2      	uxtb	r2, r2
 800e36a:	701a      	strb	r2, [r3, #0]
}
 800e36c:	bf00      	nop
 800e36e:	370c      	adds	r7, #12
 800e370:	46bd      	mov	sp, r7
 800e372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e376:	4770      	bx	lr

0800e378 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800e378:	b480      	push	{r7}
 800e37a:	b083      	sub	sp, #12
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	6078      	str	r0, [r7, #4]
 800e380:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	1c5a      	adds	r2, r3, #1
 800e386:	607a      	str	r2, [r7, #4]
 800e388:	683a      	ldr	r2, [r7, #0]
 800e38a:	b2d2      	uxtb	r2, r2
 800e38c:	701a      	strb	r2, [r3, #0]
 800e38e:	683b      	ldr	r3, [r7, #0]
 800e390:	0a1b      	lsrs	r3, r3, #8
 800e392:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	1c5a      	adds	r2, r3, #1
 800e398:	607a      	str	r2, [r7, #4]
 800e39a:	683a      	ldr	r2, [r7, #0]
 800e39c:	b2d2      	uxtb	r2, r2
 800e39e:	701a      	strb	r2, [r3, #0]
 800e3a0:	683b      	ldr	r3, [r7, #0]
 800e3a2:	0a1b      	lsrs	r3, r3, #8
 800e3a4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	1c5a      	adds	r2, r3, #1
 800e3aa:	607a      	str	r2, [r7, #4]
 800e3ac:	683a      	ldr	r2, [r7, #0]
 800e3ae:	b2d2      	uxtb	r2, r2
 800e3b0:	701a      	strb	r2, [r3, #0]
 800e3b2:	683b      	ldr	r3, [r7, #0]
 800e3b4:	0a1b      	lsrs	r3, r3, #8
 800e3b6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	1c5a      	adds	r2, r3, #1
 800e3bc:	607a      	str	r2, [r7, #4]
 800e3be:	683a      	ldr	r2, [r7, #0]
 800e3c0:	b2d2      	uxtb	r2, r2
 800e3c2:	701a      	strb	r2, [r3, #0]
}
 800e3c4:	bf00      	nop
 800e3c6:	370c      	adds	r7, #12
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ce:	4770      	bx	lr

0800e3d0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e3d0:	b480      	push	{r7}
 800e3d2:	b087      	sub	sp, #28
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	60f8      	str	r0, [r7, #12]
 800e3d8:	60b9      	str	r1, [r7, #8]
 800e3da:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800e3e0:	68bb      	ldr	r3, [r7, #8]
 800e3e2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d00d      	beq.n	800e406 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800e3ea:	693a      	ldr	r2, [r7, #16]
 800e3ec:	1c53      	adds	r3, r2, #1
 800e3ee:	613b      	str	r3, [r7, #16]
 800e3f0:	697b      	ldr	r3, [r7, #20]
 800e3f2:	1c59      	adds	r1, r3, #1
 800e3f4:	6179      	str	r1, [r7, #20]
 800e3f6:	7812      	ldrb	r2, [r2, #0]
 800e3f8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	3b01      	subs	r3, #1
 800e3fe:	607b      	str	r3, [r7, #4]
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	2b00      	cmp	r3, #0
 800e404:	d1f1      	bne.n	800e3ea <mem_cpy+0x1a>
	}
}
 800e406:	bf00      	nop
 800e408:	371c      	adds	r7, #28
 800e40a:	46bd      	mov	sp, r7
 800e40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e410:	4770      	bx	lr

0800e412 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800e412:	b480      	push	{r7}
 800e414:	b087      	sub	sp, #28
 800e416:	af00      	add	r7, sp, #0
 800e418:	60f8      	str	r0, [r7, #12]
 800e41a:	60b9      	str	r1, [r7, #8]
 800e41c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800e422:	697b      	ldr	r3, [r7, #20]
 800e424:	1c5a      	adds	r2, r3, #1
 800e426:	617a      	str	r2, [r7, #20]
 800e428:	68ba      	ldr	r2, [r7, #8]
 800e42a:	b2d2      	uxtb	r2, r2
 800e42c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	3b01      	subs	r3, #1
 800e432:	607b      	str	r3, [r7, #4]
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	2b00      	cmp	r3, #0
 800e438:	d1f3      	bne.n	800e422 <mem_set+0x10>
}
 800e43a:	bf00      	nop
 800e43c:	bf00      	nop
 800e43e:	371c      	adds	r7, #28
 800e440:	46bd      	mov	sp, r7
 800e442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e446:	4770      	bx	lr

0800e448 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800e448:	b480      	push	{r7}
 800e44a:	b089      	sub	sp, #36	; 0x24
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	60f8      	str	r0, [r7, #12]
 800e450:	60b9      	str	r1, [r7, #8]
 800e452:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	61fb      	str	r3, [r7, #28]
 800e458:	68bb      	ldr	r3, [r7, #8]
 800e45a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800e45c:	2300      	movs	r3, #0
 800e45e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800e460:	69fb      	ldr	r3, [r7, #28]
 800e462:	1c5a      	adds	r2, r3, #1
 800e464:	61fa      	str	r2, [r7, #28]
 800e466:	781b      	ldrb	r3, [r3, #0]
 800e468:	4619      	mov	r1, r3
 800e46a:	69bb      	ldr	r3, [r7, #24]
 800e46c:	1c5a      	adds	r2, r3, #1
 800e46e:	61ba      	str	r2, [r7, #24]
 800e470:	781b      	ldrb	r3, [r3, #0]
 800e472:	1acb      	subs	r3, r1, r3
 800e474:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	3b01      	subs	r3, #1
 800e47a:	607b      	str	r3, [r7, #4]
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d002      	beq.n	800e488 <mem_cmp+0x40>
 800e482:	697b      	ldr	r3, [r7, #20]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d0eb      	beq.n	800e460 <mem_cmp+0x18>

	return r;
 800e488:	697b      	ldr	r3, [r7, #20]
}
 800e48a:	4618      	mov	r0, r3
 800e48c:	3724      	adds	r7, #36	; 0x24
 800e48e:	46bd      	mov	sp, r7
 800e490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e494:	4770      	bx	lr

0800e496 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800e496:	b480      	push	{r7}
 800e498:	b083      	sub	sp, #12
 800e49a:	af00      	add	r7, sp, #0
 800e49c:	6078      	str	r0, [r7, #4]
 800e49e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800e4a0:	e002      	b.n	800e4a8 <chk_chr+0x12>
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	3301      	adds	r3, #1
 800e4a6:	607b      	str	r3, [r7, #4]
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	781b      	ldrb	r3, [r3, #0]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d005      	beq.n	800e4bc <chk_chr+0x26>
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	781b      	ldrb	r3, [r3, #0]
 800e4b4:	461a      	mov	r2, r3
 800e4b6:	683b      	ldr	r3, [r7, #0]
 800e4b8:	4293      	cmp	r3, r2
 800e4ba:	d1f2      	bne.n	800e4a2 <chk_chr+0xc>
	return *str;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	781b      	ldrb	r3, [r3, #0]
}
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	370c      	adds	r7, #12
 800e4c4:	46bd      	mov	sp, r7
 800e4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ca:	4770      	bx	lr

0800e4cc <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800e4cc:	b580      	push	{r7, lr}
 800e4ce:	b082      	sub	sp, #8
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d009      	beq.n	800e4ee <lock_fs+0x22>
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	68db      	ldr	r3, [r3, #12]
 800e4de:	4618      	mov	r0, r3
 800e4e0:	f002 fb09 	bl	8010af6 <ff_req_grant>
 800e4e4:	4603      	mov	r3, r0
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d001      	beq.n	800e4ee <lock_fs+0x22>
 800e4ea:	2301      	movs	r3, #1
 800e4ec:	e000      	b.n	800e4f0 <lock_fs+0x24>
 800e4ee:	2300      	movs	r3, #0
}
 800e4f0:	4618      	mov	r0, r3
 800e4f2:	3708      	adds	r7, #8
 800e4f4:	46bd      	mov	sp, r7
 800e4f6:	bd80      	pop	{r7, pc}

0800e4f8 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	b082      	sub	sp, #8
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	6078      	str	r0, [r7, #4]
 800e500:	460b      	mov	r3, r1
 800e502:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	2b00      	cmp	r3, #0
 800e508:	d00d      	beq.n	800e526 <unlock_fs+0x2e>
 800e50a:	78fb      	ldrb	r3, [r7, #3]
 800e50c:	2b0c      	cmp	r3, #12
 800e50e:	d00a      	beq.n	800e526 <unlock_fs+0x2e>
 800e510:	78fb      	ldrb	r3, [r7, #3]
 800e512:	2b0b      	cmp	r3, #11
 800e514:	d007      	beq.n	800e526 <unlock_fs+0x2e>
 800e516:	78fb      	ldrb	r3, [r7, #3]
 800e518:	2b0f      	cmp	r3, #15
 800e51a:	d004      	beq.n	800e526 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	68db      	ldr	r3, [r3, #12]
 800e520:	4618      	mov	r0, r3
 800e522:	f002 fafd 	bl	8010b20 <ff_rel_grant>
	}
}
 800e526:	bf00      	nop
 800e528:	3708      	adds	r7, #8
 800e52a:	46bd      	mov	sp, r7
 800e52c:	bd80      	pop	{r7, pc}
	...

0800e530 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e530:	b480      	push	{r7}
 800e532:	b085      	sub	sp, #20
 800e534:	af00      	add	r7, sp, #0
 800e536:	6078      	str	r0, [r7, #4]
 800e538:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e53a:	2300      	movs	r3, #0
 800e53c:	60bb      	str	r3, [r7, #8]
 800e53e:	68bb      	ldr	r3, [r7, #8]
 800e540:	60fb      	str	r3, [r7, #12]
 800e542:	e029      	b.n	800e598 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800e544:	4a27      	ldr	r2, [pc, #156]	; (800e5e4 <chk_lock+0xb4>)
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	011b      	lsls	r3, r3, #4
 800e54a:	4413      	add	r3, r2
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d01d      	beq.n	800e58e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e552:	4a24      	ldr	r2, [pc, #144]	; (800e5e4 <chk_lock+0xb4>)
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	011b      	lsls	r3, r3, #4
 800e558:	4413      	add	r3, r2
 800e55a:	681a      	ldr	r2, [r3, #0]
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	429a      	cmp	r2, r3
 800e562:	d116      	bne.n	800e592 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800e564:	4a1f      	ldr	r2, [pc, #124]	; (800e5e4 <chk_lock+0xb4>)
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	011b      	lsls	r3, r3, #4
 800e56a:	4413      	add	r3, r2
 800e56c:	3304      	adds	r3, #4
 800e56e:	681a      	ldr	r2, [r3, #0]
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e574:	429a      	cmp	r2, r3
 800e576:	d10c      	bne.n	800e592 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e578:	4a1a      	ldr	r2, [pc, #104]	; (800e5e4 <chk_lock+0xb4>)
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	011b      	lsls	r3, r3, #4
 800e57e:	4413      	add	r3, r2
 800e580:	3308      	adds	r3, #8
 800e582:	681a      	ldr	r2, [r3, #0]
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800e588:	429a      	cmp	r2, r3
 800e58a:	d102      	bne.n	800e592 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e58c:	e007      	b.n	800e59e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800e58e:	2301      	movs	r3, #1
 800e590:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	3301      	adds	r3, #1
 800e596:	60fb      	str	r3, [r7, #12]
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	2b01      	cmp	r3, #1
 800e59c:	d9d2      	bls.n	800e544 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	2b02      	cmp	r3, #2
 800e5a2:	d109      	bne.n	800e5b8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800e5a4:	68bb      	ldr	r3, [r7, #8]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d102      	bne.n	800e5b0 <chk_lock+0x80>
 800e5aa:	683b      	ldr	r3, [r7, #0]
 800e5ac:	2b02      	cmp	r3, #2
 800e5ae:	d101      	bne.n	800e5b4 <chk_lock+0x84>
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	e010      	b.n	800e5d6 <chk_lock+0xa6>
 800e5b4:	2312      	movs	r3, #18
 800e5b6:	e00e      	b.n	800e5d6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e5b8:	683b      	ldr	r3, [r7, #0]
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d108      	bne.n	800e5d0 <chk_lock+0xa0>
 800e5be:	4a09      	ldr	r2, [pc, #36]	; (800e5e4 <chk_lock+0xb4>)
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	011b      	lsls	r3, r3, #4
 800e5c4:	4413      	add	r3, r2
 800e5c6:	330c      	adds	r3, #12
 800e5c8:	881b      	ldrh	r3, [r3, #0]
 800e5ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e5ce:	d101      	bne.n	800e5d4 <chk_lock+0xa4>
 800e5d0:	2310      	movs	r3, #16
 800e5d2:	e000      	b.n	800e5d6 <chk_lock+0xa6>
 800e5d4:	2300      	movs	r3, #0
}
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	3714      	adds	r7, #20
 800e5da:	46bd      	mov	sp, r7
 800e5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e0:	4770      	bx	lr
 800e5e2:	bf00      	nop
 800e5e4:	200011a8 	.word	0x200011a8

0800e5e8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800e5e8:	b480      	push	{r7}
 800e5ea:	b083      	sub	sp, #12
 800e5ec:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e5ee:	2300      	movs	r3, #0
 800e5f0:	607b      	str	r3, [r7, #4]
 800e5f2:	e002      	b.n	800e5fa <enq_lock+0x12>
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	3301      	adds	r3, #1
 800e5f8:	607b      	str	r3, [r7, #4]
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	2b01      	cmp	r3, #1
 800e5fe:	d806      	bhi.n	800e60e <enq_lock+0x26>
 800e600:	4a09      	ldr	r2, [pc, #36]	; (800e628 <enq_lock+0x40>)
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	011b      	lsls	r3, r3, #4
 800e606:	4413      	add	r3, r2
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d1f2      	bne.n	800e5f4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	2b02      	cmp	r3, #2
 800e612:	bf14      	ite	ne
 800e614:	2301      	movne	r3, #1
 800e616:	2300      	moveq	r3, #0
 800e618:	b2db      	uxtb	r3, r3
}
 800e61a:	4618      	mov	r0, r3
 800e61c:	370c      	adds	r7, #12
 800e61e:	46bd      	mov	sp, r7
 800e620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e624:	4770      	bx	lr
 800e626:	bf00      	nop
 800e628:	200011a8 	.word	0x200011a8

0800e62c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e62c:	b480      	push	{r7}
 800e62e:	b085      	sub	sp, #20
 800e630:	af00      	add	r7, sp, #0
 800e632:	6078      	str	r0, [r7, #4]
 800e634:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e636:	2300      	movs	r3, #0
 800e638:	60fb      	str	r3, [r7, #12]
 800e63a:	e01f      	b.n	800e67c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800e63c:	4a41      	ldr	r2, [pc, #260]	; (800e744 <inc_lock+0x118>)
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	011b      	lsls	r3, r3, #4
 800e642:	4413      	add	r3, r2
 800e644:	681a      	ldr	r2, [r3, #0]
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	429a      	cmp	r2, r3
 800e64c:	d113      	bne.n	800e676 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800e64e:	4a3d      	ldr	r2, [pc, #244]	; (800e744 <inc_lock+0x118>)
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	011b      	lsls	r3, r3, #4
 800e654:	4413      	add	r3, r2
 800e656:	3304      	adds	r3, #4
 800e658:	681a      	ldr	r2, [r3, #0]
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800e65e:	429a      	cmp	r2, r3
 800e660:	d109      	bne.n	800e676 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800e662:	4a38      	ldr	r2, [pc, #224]	; (800e744 <inc_lock+0x118>)
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	011b      	lsls	r3, r3, #4
 800e668:	4413      	add	r3, r2
 800e66a:	3308      	adds	r3, #8
 800e66c:	681a      	ldr	r2, [r3, #0]
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800e672:	429a      	cmp	r2, r3
 800e674:	d006      	beq.n	800e684 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	3301      	adds	r3, #1
 800e67a:	60fb      	str	r3, [r7, #12]
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	2b01      	cmp	r3, #1
 800e680:	d9dc      	bls.n	800e63c <inc_lock+0x10>
 800e682:	e000      	b.n	800e686 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800e684:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	2b02      	cmp	r3, #2
 800e68a:	d132      	bne.n	800e6f2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e68c:	2300      	movs	r3, #0
 800e68e:	60fb      	str	r3, [r7, #12]
 800e690:	e002      	b.n	800e698 <inc_lock+0x6c>
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	3301      	adds	r3, #1
 800e696:	60fb      	str	r3, [r7, #12]
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	2b01      	cmp	r3, #1
 800e69c:	d806      	bhi.n	800e6ac <inc_lock+0x80>
 800e69e:	4a29      	ldr	r2, [pc, #164]	; (800e744 <inc_lock+0x118>)
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	011b      	lsls	r3, r3, #4
 800e6a4:	4413      	add	r3, r2
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d1f2      	bne.n	800e692 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	2b02      	cmp	r3, #2
 800e6b0:	d101      	bne.n	800e6b6 <inc_lock+0x8a>
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	e040      	b.n	800e738 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	681a      	ldr	r2, [r3, #0]
 800e6ba:	4922      	ldr	r1, [pc, #136]	; (800e744 <inc_lock+0x118>)
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	011b      	lsls	r3, r3, #4
 800e6c0:	440b      	add	r3, r1
 800e6c2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	689a      	ldr	r2, [r3, #8]
 800e6c8:	491e      	ldr	r1, [pc, #120]	; (800e744 <inc_lock+0x118>)
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	011b      	lsls	r3, r3, #4
 800e6ce:	440b      	add	r3, r1
 800e6d0:	3304      	adds	r3, #4
 800e6d2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	695a      	ldr	r2, [r3, #20]
 800e6d8:	491a      	ldr	r1, [pc, #104]	; (800e744 <inc_lock+0x118>)
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	011b      	lsls	r3, r3, #4
 800e6de:	440b      	add	r3, r1
 800e6e0:	3308      	adds	r3, #8
 800e6e2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800e6e4:	4a17      	ldr	r2, [pc, #92]	; (800e744 <inc_lock+0x118>)
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	011b      	lsls	r3, r3, #4
 800e6ea:	4413      	add	r3, r2
 800e6ec:	330c      	adds	r3, #12
 800e6ee:	2200      	movs	r2, #0
 800e6f0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800e6f2:	683b      	ldr	r3, [r7, #0]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d009      	beq.n	800e70c <inc_lock+0xe0>
 800e6f8:	4a12      	ldr	r2, [pc, #72]	; (800e744 <inc_lock+0x118>)
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	011b      	lsls	r3, r3, #4
 800e6fe:	4413      	add	r3, r2
 800e700:	330c      	adds	r3, #12
 800e702:	881b      	ldrh	r3, [r3, #0]
 800e704:	2b00      	cmp	r3, #0
 800e706:	d001      	beq.n	800e70c <inc_lock+0xe0>
 800e708:	2300      	movs	r3, #0
 800e70a:	e015      	b.n	800e738 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e70c:	683b      	ldr	r3, [r7, #0]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d108      	bne.n	800e724 <inc_lock+0xf8>
 800e712:	4a0c      	ldr	r2, [pc, #48]	; (800e744 <inc_lock+0x118>)
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	011b      	lsls	r3, r3, #4
 800e718:	4413      	add	r3, r2
 800e71a:	330c      	adds	r3, #12
 800e71c:	881b      	ldrh	r3, [r3, #0]
 800e71e:	3301      	adds	r3, #1
 800e720:	b29a      	uxth	r2, r3
 800e722:	e001      	b.n	800e728 <inc_lock+0xfc>
 800e724:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e728:	4906      	ldr	r1, [pc, #24]	; (800e744 <inc_lock+0x118>)
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	011b      	lsls	r3, r3, #4
 800e72e:	440b      	add	r3, r1
 800e730:	330c      	adds	r3, #12
 800e732:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	3301      	adds	r3, #1
}
 800e738:	4618      	mov	r0, r3
 800e73a:	3714      	adds	r7, #20
 800e73c:	46bd      	mov	sp, r7
 800e73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e742:	4770      	bx	lr
 800e744:	200011a8 	.word	0x200011a8

0800e748 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800e748:	b480      	push	{r7}
 800e74a:	b085      	sub	sp, #20
 800e74c:	af00      	add	r7, sp, #0
 800e74e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	3b01      	subs	r3, #1
 800e754:	607b      	str	r3, [r7, #4]
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	2b01      	cmp	r3, #1
 800e75a:	d825      	bhi.n	800e7a8 <dec_lock+0x60>
		n = Files[i].ctr;
 800e75c:	4a17      	ldr	r2, [pc, #92]	; (800e7bc <dec_lock+0x74>)
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	011b      	lsls	r3, r3, #4
 800e762:	4413      	add	r3, r2
 800e764:	330c      	adds	r3, #12
 800e766:	881b      	ldrh	r3, [r3, #0]
 800e768:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800e76a:	89fb      	ldrh	r3, [r7, #14]
 800e76c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e770:	d101      	bne.n	800e776 <dec_lock+0x2e>
 800e772:	2300      	movs	r3, #0
 800e774:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800e776:	89fb      	ldrh	r3, [r7, #14]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d002      	beq.n	800e782 <dec_lock+0x3a>
 800e77c:	89fb      	ldrh	r3, [r7, #14]
 800e77e:	3b01      	subs	r3, #1
 800e780:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800e782:	4a0e      	ldr	r2, [pc, #56]	; (800e7bc <dec_lock+0x74>)
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	011b      	lsls	r3, r3, #4
 800e788:	4413      	add	r3, r2
 800e78a:	330c      	adds	r3, #12
 800e78c:	89fa      	ldrh	r2, [r7, #14]
 800e78e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800e790:	89fb      	ldrh	r3, [r7, #14]
 800e792:	2b00      	cmp	r3, #0
 800e794:	d105      	bne.n	800e7a2 <dec_lock+0x5a>
 800e796:	4a09      	ldr	r2, [pc, #36]	; (800e7bc <dec_lock+0x74>)
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	011b      	lsls	r3, r3, #4
 800e79c:	4413      	add	r3, r2
 800e79e:	2200      	movs	r2, #0
 800e7a0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	737b      	strb	r3, [r7, #13]
 800e7a6:	e001      	b.n	800e7ac <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800e7a8:	2302      	movs	r3, #2
 800e7aa:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800e7ac:	7b7b      	ldrb	r3, [r7, #13]
}
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	3714      	adds	r7, #20
 800e7b2:	46bd      	mov	sp, r7
 800e7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b8:	4770      	bx	lr
 800e7ba:	bf00      	nop
 800e7bc:	200011a8 	.word	0x200011a8

0800e7c0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800e7c0:	b480      	push	{r7}
 800e7c2:	b085      	sub	sp, #20
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800e7c8:	2300      	movs	r3, #0
 800e7ca:	60fb      	str	r3, [r7, #12]
 800e7cc:	e010      	b.n	800e7f0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e7ce:	4a0d      	ldr	r2, [pc, #52]	; (800e804 <clear_lock+0x44>)
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	011b      	lsls	r3, r3, #4
 800e7d4:	4413      	add	r3, r2
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	687a      	ldr	r2, [r7, #4]
 800e7da:	429a      	cmp	r2, r3
 800e7dc:	d105      	bne.n	800e7ea <clear_lock+0x2a>
 800e7de:	4a09      	ldr	r2, [pc, #36]	; (800e804 <clear_lock+0x44>)
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	011b      	lsls	r3, r3, #4
 800e7e4:	4413      	add	r3, r2
 800e7e6:	2200      	movs	r2, #0
 800e7e8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	3301      	adds	r3, #1
 800e7ee:	60fb      	str	r3, [r7, #12]
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	2b01      	cmp	r3, #1
 800e7f4:	d9eb      	bls.n	800e7ce <clear_lock+0xe>
	}
}
 800e7f6:	bf00      	nop
 800e7f8:	bf00      	nop
 800e7fa:	3714      	adds	r7, #20
 800e7fc:	46bd      	mov	sp, r7
 800e7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e802:	4770      	bx	lr
 800e804:	200011a8 	.word	0x200011a8

0800e808 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800e808:	b580      	push	{r7, lr}
 800e80a:	b086      	sub	sp, #24
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800e810:	2300      	movs	r3, #0
 800e812:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	78db      	ldrb	r3, [r3, #3]
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d034      	beq.n	800e886 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e820:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	7858      	ldrb	r0, [r3, #1]
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e82c:	2301      	movs	r3, #1
 800e82e:	697a      	ldr	r2, [r7, #20]
 800e830:	f7ff fd0e 	bl	800e250 <disk_write>
 800e834:	4603      	mov	r3, r0
 800e836:	2b00      	cmp	r3, #0
 800e838:	d002      	beq.n	800e840 <sync_window+0x38>
			res = FR_DISK_ERR;
 800e83a:	2301      	movs	r3, #1
 800e83c:	73fb      	strb	r3, [r7, #15]
 800e83e:	e022      	b.n	800e886 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	2200      	movs	r2, #0
 800e844:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e84a:	697a      	ldr	r2, [r7, #20]
 800e84c:	1ad2      	subs	r2, r2, r3
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	69db      	ldr	r3, [r3, #28]
 800e852:	429a      	cmp	r2, r3
 800e854:	d217      	bcs.n	800e886 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	789b      	ldrb	r3, [r3, #2]
 800e85a:	613b      	str	r3, [r7, #16]
 800e85c:	e010      	b.n	800e880 <sync_window+0x78>
					wsect += fs->fsize;
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	69db      	ldr	r3, [r3, #28]
 800e862:	697a      	ldr	r2, [r7, #20]
 800e864:	4413      	add	r3, r2
 800e866:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	7858      	ldrb	r0, [r3, #1]
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e872:	2301      	movs	r3, #1
 800e874:	697a      	ldr	r2, [r7, #20]
 800e876:	f7ff fceb 	bl	800e250 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e87a:	693b      	ldr	r3, [r7, #16]
 800e87c:	3b01      	subs	r3, #1
 800e87e:	613b      	str	r3, [r7, #16]
 800e880:	693b      	ldr	r3, [r7, #16]
 800e882:	2b01      	cmp	r3, #1
 800e884:	d8eb      	bhi.n	800e85e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800e886:	7bfb      	ldrb	r3, [r7, #15]
}
 800e888:	4618      	mov	r0, r3
 800e88a:	3718      	adds	r7, #24
 800e88c:	46bd      	mov	sp, r7
 800e88e:	bd80      	pop	{r7, pc}

0800e890 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800e890:	b580      	push	{r7, lr}
 800e892:	b084      	sub	sp, #16
 800e894:	af00      	add	r7, sp, #0
 800e896:	6078      	str	r0, [r7, #4]
 800e898:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800e89a:	2300      	movs	r3, #0
 800e89c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8a2:	683a      	ldr	r2, [r7, #0]
 800e8a4:	429a      	cmp	r2, r3
 800e8a6:	d01b      	beq.n	800e8e0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800e8a8:	6878      	ldr	r0, [r7, #4]
 800e8aa:	f7ff ffad 	bl	800e808 <sync_window>
 800e8ae:	4603      	mov	r3, r0
 800e8b0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800e8b2:	7bfb      	ldrb	r3, [r7, #15]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d113      	bne.n	800e8e0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	7858      	ldrb	r0, [r3, #1]
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e8c2:	2301      	movs	r3, #1
 800e8c4:	683a      	ldr	r2, [r7, #0]
 800e8c6:	f7ff fca3 	bl	800e210 <disk_read>
 800e8ca:	4603      	mov	r3, r0
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d004      	beq.n	800e8da <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800e8d0:	f04f 33ff 	mov.w	r3, #4294967295
 800e8d4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800e8d6:	2301      	movs	r3, #1
 800e8d8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	683a      	ldr	r2, [r7, #0]
 800e8de:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800e8e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	3710      	adds	r7, #16
 800e8e6:	46bd      	mov	sp, r7
 800e8e8:	bd80      	pop	{r7, pc}
	...

0800e8ec <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	b084      	sub	sp, #16
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800e8f4:	6878      	ldr	r0, [r7, #4]
 800e8f6:	f7ff ff87 	bl	800e808 <sync_window>
 800e8fa:	4603      	mov	r3, r0
 800e8fc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e8fe:	7bfb      	ldrb	r3, [r7, #15]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d158      	bne.n	800e9b6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	781b      	ldrb	r3, [r3, #0]
 800e908:	2b03      	cmp	r3, #3
 800e90a:	d148      	bne.n	800e99e <sync_fs+0xb2>
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	791b      	ldrb	r3, [r3, #4]
 800e910:	2b01      	cmp	r3, #1
 800e912:	d144      	bne.n	800e99e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	3334      	adds	r3, #52	; 0x34
 800e918:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e91c:	2100      	movs	r1, #0
 800e91e:	4618      	mov	r0, r3
 800e920:	f7ff fd77 	bl	800e412 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	3334      	adds	r3, #52	; 0x34
 800e928:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e92c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800e930:	4618      	mov	r0, r3
 800e932:	f7ff fd06 	bl	800e342 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	3334      	adds	r3, #52	; 0x34
 800e93a:	4921      	ldr	r1, [pc, #132]	; (800e9c0 <sync_fs+0xd4>)
 800e93c:	4618      	mov	r0, r3
 800e93e:	f7ff fd1b 	bl	800e378 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	3334      	adds	r3, #52	; 0x34
 800e946:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e94a:	491e      	ldr	r1, [pc, #120]	; (800e9c4 <sync_fs+0xd8>)
 800e94c:	4618      	mov	r0, r3
 800e94e:	f7ff fd13 	bl	800e378 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	3334      	adds	r3, #52	; 0x34
 800e956:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	695b      	ldr	r3, [r3, #20]
 800e95e:	4619      	mov	r1, r3
 800e960:	4610      	mov	r0, r2
 800e962:	f7ff fd09 	bl	800e378 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	3334      	adds	r3, #52	; 0x34
 800e96a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	691b      	ldr	r3, [r3, #16]
 800e972:	4619      	mov	r1, r3
 800e974:	4610      	mov	r0, r2
 800e976:	f7ff fcff 	bl	800e378 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	6a1b      	ldr	r3, [r3, #32]
 800e97e:	1c5a      	adds	r2, r3, #1
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	7858      	ldrb	r0, [r3, #1]
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e992:	2301      	movs	r3, #1
 800e994:	f7ff fc5c 	bl	800e250 <disk_write>
			fs->fsi_flag = 0;
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	2200      	movs	r2, #0
 800e99c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	785b      	ldrb	r3, [r3, #1]
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	2100      	movs	r1, #0
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	f7ff fc72 	bl	800e290 <disk_ioctl>
 800e9ac:	4603      	mov	r3, r0
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d001      	beq.n	800e9b6 <sync_fs+0xca>
 800e9b2:	2301      	movs	r3, #1
 800e9b4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800e9b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9b8:	4618      	mov	r0, r3
 800e9ba:	3710      	adds	r7, #16
 800e9bc:	46bd      	mov	sp, r7
 800e9be:	bd80      	pop	{r7, pc}
 800e9c0:	41615252 	.word	0x41615252
 800e9c4:	61417272 	.word	0x61417272

0800e9c8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800e9c8:	b480      	push	{r7}
 800e9ca:	b083      	sub	sp, #12
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	6078      	str	r0, [r7, #4]
 800e9d0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800e9d2:	683b      	ldr	r3, [r7, #0]
 800e9d4:	3b02      	subs	r3, #2
 800e9d6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	699b      	ldr	r3, [r3, #24]
 800e9dc:	3b02      	subs	r3, #2
 800e9de:	683a      	ldr	r2, [r7, #0]
 800e9e0:	429a      	cmp	r2, r3
 800e9e2:	d301      	bcc.n	800e9e8 <clust2sect+0x20>
 800e9e4:	2300      	movs	r3, #0
 800e9e6:	e008      	b.n	800e9fa <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	895b      	ldrh	r3, [r3, #10]
 800e9ec:	461a      	mov	r2, r3
 800e9ee:	683b      	ldr	r3, [r7, #0]
 800e9f0:	fb03 f202 	mul.w	r2, r3, r2
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9f8:	4413      	add	r3, r2
}
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	370c      	adds	r7, #12
 800e9fe:	46bd      	mov	sp, r7
 800ea00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea04:	4770      	bx	lr

0800ea06 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800ea06:	b580      	push	{r7, lr}
 800ea08:	b086      	sub	sp, #24
 800ea0a:	af00      	add	r7, sp, #0
 800ea0c:	6078      	str	r0, [r7, #4]
 800ea0e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ea16:	683b      	ldr	r3, [r7, #0]
 800ea18:	2b01      	cmp	r3, #1
 800ea1a:	d904      	bls.n	800ea26 <get_fat+0x20>
 800ea1c:	693b      	ldr	r3, [r7, #16]
 800ea1e:	699b      	ldr	r3, [r3, #24]
 800ea20:	683a      	ldr	r2, [r7, #0]
 800ea22:	429a      	cmp	r2, r3
 800ea24:	d302      	bcc.n	800ea2c <get_fat+0x26>
		val = 1;	/* Internal error */
 800ea26:	2301      	movs	r3, #1
 800ea28:	617b      	str	r3, [r7, #20]
 800ea2a:	e08f      	b.n	800eb4c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ea2c:	f04f 33ff 	mov.w	r3, #4294967295
 800ea30:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800ea32:	693b      	ldr	r3, [r7, #16]
 800ea34:	781b      	ldrb	r3, [r3, #0]
 800ea36:	2b03      	cmp	r3, #3
 800ea38:	d062      	beq.n	800eb00 <get_fat+0xfa>
 800ea3a:	2b03      	cmp	r3, #3
 800ea3c:	dc7c      	bgt.n	800eb38 <get_fat+0x132>
 800ea3e:	2b01      	cmp	r3, #1
 800ea40:	d002      	beq.n	800ea48 <get_fat+0x42>
 800ea42:	2b02      	cmp	r3, #2
 800ea44:	d042      	beq.n	800eacc <get_fat+0xc6>
 800ea46:	e077      	b.n	800eb38 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ea48:	683b      	ldr	r3, [r7, #0]
 800ea4a:	60fb      	str	r3, [r7, #12]
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	085b      	lsrs	r3, r3, #1
 800ea50:	68fa      	ldr	r2, [r7, #12]
 800ea52:	4413      	add	r3, r2
 800ea54:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ea56:	693b      	ldr	r3, [r7, #16]
 800ea58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	0a5b      	lsrs	r3, r3, #9
 800ea5e:	4413      	add	r3, r2
 800ea60:	4619      	mov	r1, r3
 800ea62:	6938      	ldr	r0, [r7, #16]
 800ea64:	f7ff ff14 	bl	800e890 <move_window>
 800ea68:	4603      	mov	r3, r0
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d167      	bne.n	800eb3e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	1c5a      	adds	r2, r3, #1
 800ea72:	60fa      	str	r2, [r7, #12]
 800ea74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea78:	693a      	ldr	r2, [r7, #16]
 800ea7a:	4413      	add	r3, r2
 800ea7c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ea80:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ea82:	693b      	ldr	r3, [r7, #16]
 800ea84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	0a5b      	lsrs	r3, r3, #9
 800ea8a:	4413      	add	r3, r2
 800ea8c:	4619      	mov	r1, r3
 800ea8e:	6938      	ldr	r0, [r7, #16]
 800ea90:	f7ff fefe 	bl	800e890 <move_window>
 800ea94:	4603      	mov	r3, r0
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d153      	bne.n	800eb42 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eaa0:	693a      	ldr	r2, [r7, #16]
 800eaa2:	4413      	add	r3, r2
 800eaa4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800eaa8:	021b      	lsls	r3, r3, #8
 800eaaa:	461a      	mov	r2, r3
 800eaac:	68bb      	ldr	r3, [r7, #8]
 800eaae:	4313      	orrs	r3, r2
 800eab0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800eab2:	683b      	ldr	r3, [r7, #0]
 800eab4:	f003 0301 	and.w	r3, r3, #1
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d002      	beq.n	800eac2 <get_fat+0xbc>
 800eabc:	68bb      	ldr	r3, [r7, #8]
 800eabe:	091b      	lsrs	r3, r3, #4
 800eac0:	e002      	b.n	800eac8 <get_fat+0xc2>
 800eac2:	68bb      	ldr	r3, [r7, #8]
 800eac4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800eac8:	617b      	str	r3, [r7, #20]
			break;
 800eaca:	e03f      	b.n	800eb4c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800eacc:	693b      	ldr	r3, [r7, #16]
 800eace:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ead0:	683b      	ldr	r3, [r7, #0]
 800ead2:	0a1b      	lsrs	r3, r3, #8
 800ead4:	4413      	add	r3, r2
 800ead6:	4619      	mov	r1, r3
 800ead8:	6938      	ldr	r0, [r7, #16]
 800eada:	f7ff fed9 	bl	800e890 <move_window>
 800eade:	4603      	mov	r3, r0
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d130      	bne.n	800eb46 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800eae4:	693b      	ldr	r3, [r7, #16]
 800eae6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800eaea:	683b      	ldr	r3, [r7, #0]
 800eaec:	005b      	lsls	r3, r3, #1
 800eaee:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800eaf2:	4413      	add	r3, r2
 800eaf4:	4618      	mov	r0, r3
 800eaf6:	f7ff fbe9 	bl	800e2cc <ld_word>
 800eafa:	4603      	mov	r3, r0
 800eafc:	617b      	str	r3, [r7, #20]
			break;
 800eafe:	e025      	b.n	800eb4c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800eb00:	693b      	ldr	r3, [r7, #16]
 800eb02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eb04:	683b      	ldr	r3, [r7, #0]
 800eb06:	09db      	lsrs	r3, r3, #7
 800eb08:	4413      	add	r3, r2
 800eb0a:	4619      	mov	r1, r3
 800eb0c:	6938      	ldr	r0, [r7, #16]
 800eb0e:	f7ff febf 	bl	800e890 <move_window>
 800eb12:	4603      	mov	r3, r0
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d118      	bne.n	800eb4a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800eb18:	693b      	ldr	r3, [r7, #16]
 800eb1a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800eb1e:	683b      	ldr	r3, [r7, #0]
 800eb20:	009b      	lsls	r3, r3, #2
 800eb22:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800eb26:	4413      	add	r3, r2
 800eb28:	4618      	mov	r0, r3
 800eb2a:	f7ff fbe7 	bl	800e2fc <ld_dword>
 800eb2e:	4603      	mov	r3, r0
 800eb30:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800eb34:	617b      	str	r3, [r7, #20]
			break;
 800eb36:	e009      	b.n	800eb4c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800eb38:	2301      	movs	r3, #1
 800eb3a:	617b      	str	r3, [r7, #20]
 800eb3c:	e006      	b.n	800eb4c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800eb3e:	bf00      	nop
 800eb40:	e004      	b.n	800eb4c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800eb42:	bf00      	nop
 800eb44:	e002      	b.n	800eb4c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800eb46:	bf00      	nop
 800eb48:	e000      	b.n	800eb4c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800eb4a:	bf00      	nop
		}
	}

	return val;
 800eb4c:	697b      	ldr	r3, [r7, #20]
}
 800eb4e:	4618      	mov	r0, r3
 800eb50:	3718      	adds	r7, #24
 800eb52:	46bd      	mov	sp, r7
 800eb54:	bd80      	pop	{r7, pc}

0800eb56 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800eb56:	b590      	push	{r4, r7, lr}
 800eb58:	b089      	sub	sp, #36	; 0x24
 800eb5a:	af00      	add	r7, sp, #0
 800eb5c:	60f8      	str	r0, [r7, #12]
 800eb5e:	60b9      	str	r1, [r7, #8]
 800eb60:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800eb62:	2302      	movs	r3, #2
 800eb64:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800eb66:	68bb      	ldr	r3, [r7, #8]
 800eb68:	2b01      	cmp	r3, #1
 800eb6a:	f240 80d2 	bls.w	800ed12 <put_fat+0x1bc>
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	699b      	ldr	r3, [r3, #24]
 800eb72:	68ba      	ldr	r2, [r7, #8]
 800eb74:	429a      	cmp	r2, r3
 800eb76:	f080 80cc 	bcs.w	800ed12 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	781b      	ldrb	r3, [r3, #0]
 800eb7e:	2b03      	cmp	r3, #3
 800eb80:	f000 8096 	beq.w	800ecb0 <put_fat+0x15a>
 800eb84:	2b03      	cmp	r3, #3
 800eb86:	f300 80cd 	bgt.w	800ed24 <put_fat+0x1ce>
 800eb8a:	2b01      	cmp	r3, #1
 800eb8c:	d002      	beq.n	800eb94 <put_fat+0x3e>
 800eb8e:	2b02      	cmp	r3, #2
 800eb90:	d06e      	beq.n	800ec70 <put_fat+0x11a>
 800eb92:	e0c7      	b.n	800ed24 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800eb94:	68bb      	ldr	r3, [r7, #8]
 800eb96:	61bb      	str	r3, [r7, #24]
 800eb98:	69bb      	ldr	r3, [r7, #24]
 800eb9a:	085b      	lsrs	r3, r3, #1
 800eb9c:	69ba      	ldr	r2, [r7, #24]
 800eb9e:	4413      	add	r3, r2
 800eba0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eba6:	69bb      	ldr	r3, [r7, #24]
 800eba8:	0a5b      	lsrs	r3, r3, #9
 800ebaa:	4413      	add	r3, r2
 800ebac:	4619      	mov	r1, r3
 800ebae:	68f8      	ldr	r0, [r7, #12]
 800ebb0:	f7ff fe6e 	bl	800e890 <move_window>
 800ebb4:	4603      	mov	r3, r0
 800ebb6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ebb8:	7ffb      	ldrb	r3, [r7, #31]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	f040 80ab 	bne.w	800ed16 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ebc6:	69bb      	ldr	r3, [r7, #24]
 800ebc8:	1c59      	adds	r1, r3, #1
 800ebca:	61b9      	str	r1, [r7, #24]
 800ebcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ebd0:	4413      	add	r3, r2
 800ebd2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ebd4:	68bb      	ldr	r3, [r7, #8]
 800ebd6:	f003 0301 	and.w	r3, r3, #1
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d00d      	beq.n	800ebfa <put_fat+0xa4>
 800ebde:	697b      	ldr	r3, [r7, #20]
 800ebe0:	781b      	ldrb	r3, [r3, #0]
 800ebe2:	b25b      	sxtb	r3, r3
 800ebe4:	f003 030f 	and.w	r3, r3, #15
 800ebe8:	b25a      	sxtb	r2, r3
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	b2db      	uxtb	r3, r3
 800ebee:	011b      	lsls	r3, r3, #4
 800ebf0:	b25b      	sxtb	r3, r3
 800ebf2:	4313      	orrs	r3, r2
 800ebf4:	b25b      	sxtb	r3, r3
 800ebf6:	b2db      	uxtb	r3, r3
 800ebf8:	e001      	b.n	800ebfe <put_fat+0xa8>
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	b2db      	uxtb	r3, r3
 800ebfe:	697a      	ldr	r2, [r7, #20]
 800ec00:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	2201      	movs	r2, #1
 800ec06:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ec0c:	69bb      	ldr	r3, [r7, #24]
 800ec0e:	0a5b      	lsrs	r3, r3, #9
 800ec10:	4413      	add	r3, r2
 800ec12:	4619      	mov	r1, r3
 800ec14:	68f8      	ldr	r0, [r7, #12]
 800ec16:	f7ff fe3b 	bl	800e890 <move_window>
 800ec1a:	4603      	mov	r3, r0
 800ec1c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ec1e:	7ffb      	ldrb	r3, [r7, #31]
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d17a      	bne.n	800ed1a <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ec2a:	69bb      	ldr	r3, [r7, #24]
 800ec2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec30:	4413      	add	r3, r2
 800ec32:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ec34:	68bb      	ldr	r3, [r7, #8]
 800ec36:	f003 0301 	and.w	r3, r3, #1
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d003      	beq.n	800ec46 <put_fat+0xf0>
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	091b      	lsrs	r3, r3, #4
 800ec42:	b2db      	uxtb	r3, r3
 800ec44:	e00e      	b.n	800ec64 <put_fat+0x10e>
 800ec46:	697b      	ldr	r3, [r7, #20]
 800ec48:	781b      	ldrb	r3, [r3, #0]
 800ec4a:	b25b      	sxtb	r3, r3
 800ec4c:	f023 030f 	bic.w	r3, r3, #15
 800ec50:	b25a      	sxtb	r2, r3
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	0a1b      	lsrs	r3, r3, #8
 800ec56:	b25b      	sxtb	r3, r3
 800ec58:	f003 030f 	and.w	r3, r3, #15
 800ec5c:	b25b      	sxtb	r3, r3
 800ec5e:	4313      	orrs	r3, r2
 800ec60:	b25b      	sxtb	r3, r3
 800ec62:	b2db      	uxtb	r3, r3
 800ec64:	697a      	ldr	r2, [r7, #20]
 800ec66:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	2201      	movs	r2, #1
 800ec6c:	70da      	strb	r2, [r3, #3]
			break;
 800ec6e:	e059      	b.n	800ed24 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ec74:	68bb      	ldr	r3, [r7, #8]
 800ec76:	0a1b      	lsrs	r3, r3, #8
 800ec78:	4413      	add	r3, r2
 800ec7a:	4619      	mov	r1, r3
 800ec7c:	68f8      	ldr	r0, [r7, #12]
 800ec7e:	f7ff fe07 	bl	800e890 <move_window>
 800ec82:	4603      	mov	r3, r0
 800ec84:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ec86:	7ffb      	ldrb	r3, [r7, #31]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d148      	bne.n	800ed1e <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ec92:	68bb      	ldr	r3, [r7, #8]
 800ec94:	005b      	lsls	r3, r3, #1
 800ec96:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800ec9a:	4413      	add	r3, r2
 800ec9c:	687a      	ldr	r2, [r7, #4]
 800ec9e:	b292      	uxth	r2, r2
 800eca0:	4611      	mov	r1, r2
 800eca2:	4618      	mov	r0, r3
 800eca4:	f7ff fb4d 	bl	800e342 <st_word>
			fs->wflag = 1;
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	2201      	movs	r2, #1
 800ecac:	70da      	strb	r2, [r3, #3]
			break;
 800ecae:	e039      	b.n	800ed24 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ecb4:	68bb      	ldr	r3, [r7, #8]
 800ecb6:	09db      	lsrs	r3, r3, #7
 800ecb8:	4413      	add	r3, r2
 800ecba:	4619      	mov	r1, r3
 800ecbc:	68f8      	ldr	r0, [r7, #12]
 800ecbe:	f7ff fde7 	bl	800e890 <move_window>
 800ecc2:	4603      	mov	r3, r0
 800ecc4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ecc6:	7ffb      	ldrb	r3, [r7, #31]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d12a      	bne.n	800ed22 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ecd8:	68bb      	ldr	r3, [r7, #8]
 800ecda:	009b      	lsls	r3, r3, #2
 800ecdc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ece0:	4413      	add	r3, r2
 800ece2:	4618      	mov	r0, r3
 800ece4:	f7ff fb0a 	bl	800e2fc <ld_dword>
 800ece8:	4603      	mov	r3, r0
 800ecea:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ecee:	4323      	orrs	r3, r4
 800ecf0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ecf8:	68bb      	ldr	r3, [r7, #8]
 800ecfa:	009b      	lsls	r3, r3, #2
 800ecfc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ed00:	4413      	add	r3, r2
 800ed02:	6879      	ldr	r1, [r7, #4]
 800ed04:	4618      	mov	r0, r3
 800ed06:	f7ff fb37 	bl	800e378 <st_dword>
			fs->wflag = 1;
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	2201      	movs	r2, #1
 800ed0e:	70da      	strb	r2, [r3, #3]
			break;
 800ed10:	e008      	b.n	800ed24 <put_fat+0x1ce>
		}
	}
 800ed12:	bf00      	nop
 800ed14:	e006      	b.n	800ed24 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800ed16:	bf00      	nop
 800ed18:	e004      	b.n	800ed24 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800ed1a:	bf00      	nop
 800ed1c:	e002      	b.n	800ed24 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800ed1e:	bf00      	nop
 800ed20:	e000      	b.n	800ed24 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800ed22:	bf00      	nop
	return res;
 800ed24:	7ffb      	ldrb	r3, [r7, #31]
}
 800ed26:	4618      	mov	r0, r3
 800ed28:	3724      	adds	r7, #36	; 0x24
 800ed2a:	46bd      	mov	sp, r7
 800ed2c:	bd90      	pop	{r4, r7, pc}

0800ed2e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ed2e:	b580      	push	{r7, lr}
 800ed30:	b088      	sub	sp, #32
 800ed32:	af00      	add	r7, sp, #0
 800ed34:	60f8      	str	r0, [r7, #12]
 800ed36:	60b9      	str	r1, [r7, #8]
 800ed38:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ed3a:	2300      	movs	r3, #0
 800ed3c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ed44:	68bb      	ldr	r3, [r7, #8]
 800ed46:	2b01      	cmp	r3, #1
 800ed48:	d904      	bls.n	800ed54 <remove_chain+0x26>
 800ed4a:	69bb      	ldr	r3, [r7, #24]
 800ed4c:	699b      	ldr	r3, [r3, #24]
 800ed4e:	68ba      	ldr	r2, [r7, #8]
 800ed50:	429a      	cmp	r2, r3
 800ed52:	d301      	bcc.n	800ed58 <remove_chain+0x2a>
 800ed54:	2302      	movs	r3, #2
 800ed56:	e04b      	b.n	800edf0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d00c      	beq.n	800ed78 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ed5e:	f04f 32ff 	mov.w	r2, #4294967295
 800ed62:	6879      	ldr	r1, [r7, #4]
 800ed64:	69b8      	ldr	r0, [r7, #24]
 800ed66:	f7ff fef6 	bl	800eb56 <put_fat>
 800ed6a:	4603      	mov	r3, r0
 800ed6c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800ed6e:	7ffb      	ldrb	r3, [r7, #31]
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d001      	beq.n	800ed78 <remove_chain+0x4a>
 800ed74:	7ffb      	ldrb	r3, [r7, #31]
 800ed76:	e03b      	b.n	800edf0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ed78:	68b9      	ldr	r1, [r7, #8]
 800ed7a:	68f8      	ldr	r0, [r7, #12]
 800ed7c:	f7ff fe43 	bl	800ea06 <get_fat>
 800ed80:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800ed82:	697b      	ldr	r3, [r7, #20]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d031      	beq.n	800edec <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800ed88:	697b      	ldr	r3, [r7, #20]
 800ed8a:	2b01      	cmp	r3, #1
 800ed8c:	d101      	bne.n	800ed92 <remove_chain+0x64>
 800ed8e:	2302      	movs	r3, #2
 800ed90:	e02e      	b.n	800edf0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ed92:	697b      	ldr	r3, [r7, #20]
 800ed94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed98:	d101      	bne.n	800ed9e <remove_chain+0x70>
 800ed9a:	2301      	movs	r3, #1
 800ed9c:	e028      	b.n	800edf0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800ed9e:	2200      	movs	r2, #0
 800eda0:	68b9      	ldr	r1, [r7, #8]
 800eda2:	69b8      	ldr	r0, [r7, #24]
 800eda4:	f7ff fed7 	bl	800eb56 <put_fat>
 800eda8:	4603      	mov	r3, r0
 800edaa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800edac:	7ffb      	ldrb	r3, [r7, #31]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d001      	beq.n	800edb6 <remove_chain+0x88>
 800edb2:	7ffb      	ldrb	r3, [r7, #31]
 800edb4:	e01c      	b.n	800edf0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800edb6:	69bb      	ldr	r3, [r7, #24]
 800edb8:	695a      	ldr	r2, [r3, #20]
 800edba:	69bb      	ldr	r3, [r7, #24]
 800edbc:	699b      	ldr	r3, [r3, #24]
 800edbe:	3b02      	subs	r3, #2
 800edc0:	429a      	cmp	r2, r3
 800edc2:	d20b      	bcs.n	800eddc <remove_chain+0xae>
			fs->free_clst++;
 800edc4:	69bb      	ldr	r3, [r7, #24]
 800edc6:	695b      	ldr	r3, [r3, #20]
 800edc8:	1c5a      	adds	r2, r3, #1
 800edca:	69bb      	ldr	r3, [r7, #24]
 800edcc:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800edce:	69bb      	ldr	r3, [r7, #24]
 800edd0:	791b      	ldrb	r3, [r3, #4]
 800edd2:	f043 0301 	orr.w	r3, r3, #1
 800edd6:	b2da      	uxtb	r2, r3
 800edd8:	69bb      	ldr	r3, [r7, #24]
 800edda:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800eddc:	697b      	ldr	r3, [r7, #20]
 800edde:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ede0:	69bb      	ldr	r3, [r7, #24]
 800ede2:	699b      	ldr	r3, [r3, #24]
 800ede4:	68ba      	ldr	r2, [r7, #8]
 800ede6:	429a      	cmp	r2, r3
 800ede8:	d3c6      	bcc.n	800ed78 <remove_chain+0x4a>
 800edea:	e000      	b.n	800edee <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800edec:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800edee:	2300      	movs	r3, #0
}
 800edf0:	4618      	mov	r0, r3
 800edf2:	3720      	adds	r7, #32
 800edf4:	46bd      	mov	sp, r7
 800edf6:	bd80      	pop	{r7, pc}

0800edf8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800edf8:	b580      	push	{r7, lr}
 800edfa:	b088      	sub	sp, #32
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	6078      	str	r0, [r7, #4]
 800ee00:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ee08:	683b      	ldr	r3, [r7, #0]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d10d      	bne.n	800ee2a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ee0e:	693b      	ldr	r3, [r7, #16]
 800ee10:	691b      	ldr	r3, [r3, #16]
 800ee12:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ee14:	69bb      	ldr	r3, [r7, #24]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d004      	beq.n	800ee24 <create_chain+0x2c>
 800ee1a:	693b      	ldr	r3, [r7, #16]
 800ee1c:	699b      	ldr	r3, [r3, #24]
 800ee1e:	69ba      	ldr	r2, [r7, #24]
 800ee20:	429a      	cmp	r2, r3
 800ee22:	d31b      	bcc.n	800ee5c <create_chain+0x64>
 800ee24:	2301      	movs	r3, #1
 800ee26:	61bb      	str	r3, [r7, #24]
 800ee28:	e018      	b.n	800ee5c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ee2a:	6839      	ldr	r1, [r7, #0]
 800ee2c:	6878      	ldr	r0, [r7, #4]
 800ee2e:	f7ff fdea 	bl	800ea06 <get_fat>
 800ee32:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	2b01      	cmp	r3, #1
 800ee38:	d801      	bhi.n	800ee3e <create_chain+0x46>
 800ee3a:	2301      	movs	r3, #1
 800ee3c:	e070      	b.n	800ef20 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee44:	d101      	bne.n	800ee4a <create_chain+0x52>
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	e06a      	b.n	800ef20 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ee4a:	693b      	ldr	r3, [r7, #16]
 800ee4c:	699b      	ldr	r3, [r3, #24]
 800ee4e:	68fa      	ldr	r2, [r7, #12]
 800ee50:	429a      	cmp	r2, r3
 800ee52:	d201      	bcs.n	800ee58 <create_chain+0x60>
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	e063      	b.n	800ef20 <create_chain+0x128>
		scl = clst;
 800ee58:	683b      	ldr	r3, [r7, #0]
 800ee5a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800ee5c:	69bb      	ldr	r3, [r7, #24]
 800ee5e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800ee60:	69fb      	ldr	r3, [r7, #28]
 800ee62:	3301      	adds	r3, #1
 800ee64:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ee66:	693b      	ldr	r3, [r7, #16]
 800ee68:	699b      	ldr	r3, [r3, #24]
 800ee6a:	69fa      	ldr	r2, [r7, #28]
 800ee6c:	429a      	cmp	r2, r3
 800ee6e:	d307      	bcc.n	800ee80 <create_chain+0x88>
				ncl = 2;
 800ee70:	2302      	movs	r3, #2
 800ee72:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800ee74:	69fa      	ldr	r2, [r7, #28]
 800ee76:	69bb      	ldr	r3, [r7, #24]
 800ee78:	429a      	cmp	r2, r3
 800ee7a:	d901      	bls.n	800ee80 <create_chain+0x88>
 800ee7c:	2300      	movs	r3, #0
 800ee7e:	e04f      	b.n	800ef20 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800ee80:	69f9      	ldr	r1, [r7, #28]
 800ee82:	6878      	ldr	r0, [r7, #4]
 800ee84:	f7ff fdbf 	bl	800ea06 <get_fat>
 800ee88:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d00e      	beq.n	800eeae <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	2b01      	cmp	r3, #1
 800ee94:	d003      	beq.n	800ee9e <create_chain+0xa6>
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee9c:	d101      	bne.n	800eea2 <create_chain+0xaa>
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	e03e      	b.n	800ef20 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800eea2:	69fa      	ldr	r2, [r7, #28]
 800eea4:	69bb      	ldr	r3, [r7, #24]
 800eea6:	429a      	cmp	r2, r3
 800eea8:	d1da      	bne.n	800ee60 <create_chain+0x68>
 800eeaa:	2300      	movs	r3, #0
 800eeac:	e038      	b.n	800ef20 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800eeae:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800eeb0:	f04f 32ff 	mov.w	r2, #4294967295
 800eeb4:	69f9      	ldr	r1, [r7, #28]
 800eeb6:	6938      	ldr	r0, [r7, #16]
 800eeb8:	f7ff fe4d 	bl	800eb56 <put_fat>
 800eebc:	4603      	mov	r3, r0
 800eebe:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800eec0:	7dfb      	ldrb	r3, [r7, #23]
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d109      	bne.n	800eeda <create_chain+0xe2>
 800eec6:	683b      	ldr	r3, [r7, #0]
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d006      	beq.n	800eeda <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800eecc:	69fa      	ldr	r2, [r7, #28]
 800eece:	6839      	ldr	r1, [r7, #0]
 800eed0:	6938      	ldr	r0, [r7, #16]
 800eed2:	f7ff fe40 	bl	800eb56 <put_fat>
 800eed6:	4603      	mov	r3, r0
 800eed8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800eeda:	7dfb      	ldrb	r3, [r7, #23]
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d116      	bne.n	800ef0e <create_chain+0x116>
		fs->last_clst = ncl;
 800eee0:	693b      	ldr	r3, [r7, #16]
 800eee2:	69fa      	ldr	r2, [r7, #28]
 800eee4:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800eee6:	693b      	ldr	r3, [r7, #16]
 800eee8:	695a      	ldr	r2, [r3, #20]
 800eeea:	693b      	ldr	r3, [r7, #16]
 800eeec:	699b      	ldr	r3, [r3, #24]
 800eeee:	3b02      	subs	r3, #2
 800eef0:	429a      	cmp	r2, r3
 800eef2:	d804      	bhi.n	800eefe <create_chain+0x106>
 800eef4:	693b      	ldr	r3, [r7, #16]
 800eef6:	695b      	ldr	r3, [r3, #20]
 800eef8:	1e5a      	subs	r2, r3, #1
 800eefa:	693b      	ldr	r3, [r7, #16]
 800eefc:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800eefe:	693b      	ldr	r3, [r7, #16]
 800ef00:	791b      	ldrb	r3, [r3, #4]
 800ef02:	f043 0301 	orr.w	r3, r3, #1
 800ef06:	b2da      	uxtb	r2, r3
 800ef08:	693b      	ldr	r3, [r7, #16]
 800ef0a:	711a      	strb	r2, [r3, #4]
 800ef0c:	e007      	b.n	800ef1e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ef0e:	7dfb      	ldrb	r3, [r7, #23]
 800ef10:	2b01      	cmp	r3, #1
 800ef12:	d102      	bne.n	800ef1a <create_chain+0x122>
 800ef14:	f04f 33ff 	mov.w	r3, #4294967295
 800ef18:	e000      	b.n	800ef1c <create_chain+0x124>
 800ef1a:	2301      	movs	r3, #1
 800ef1c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ef1e:	69fb      	ldr	r3, [r7, #28]
}
 800ef20:	4618      	mov	r0, r3
 800ef22:	3720      	adds	r7, #32
 800ef24:	46bd      	mov	sp, r7
 800ef26:	bd80      	pop	{r7, pc}

0800ef28 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ef28:	b480      	push	{r7}
 800ef2a:	b087      	sub	sp, #28
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	6078      	str	r0, [r7, #4]
 800ef30:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef3c:	3304      	adds	r3, #4
 800ef3e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ef40:	683b      	ldr	r3, [r7, #0]
 800ef42:	0a5b      	lsrs	r3, r3, #9
 800ef44:	68fa      	ldr	r2, [r7, #12]
 800ef46:	8952      	ldrh	r2, [r2, #10]
 800ef48:	fbb3 f3f2 	udiv	r3, r3, r2
 800ef4c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ef4e:	693b      	ldr	r3, [r7, #16]
 800ef50:	1d1a      	adds	r2, r3, #4
 800ef52:	613a      	str	r2, [r7, #16]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ef58:	68bb      	ldr	r3, [r7, #8]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d101      	bne.n	800ef62 <clmt_clust+0x3a>
 800ef5e:	2300      	movs	r3, #0
 800ef60:	e010      	b.n	800ef84 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800ef62:	697a      	ldr	r2, [r7, #20]
 800ef64:	68bb      	ldr	r3, [r7, #8]
 800ef66:	429a      	cmp	r2, r3
 800ef68:	d307      	bcc.n	800ef7a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800ef6a:	697a      	ldr	r2, [r7, #20]
 800ef6c:	68bb      	ldr	r3, [r7, #8]
 800ef6e:	1ad3      	subs	r3, r2, r3
 800ef70:	617b      	str	r3, [r7, #20]
 800ef72:	693b      	ldr	r3, [r7, #16]
 800ef74:	3304      	adds	r3, #4
 800ef76:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ef78:	e7e9      	b.n	800ef4e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800ef7a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ef7c:	693b      	ldr	r3, [r7, #16]
 800ef7e:	681a      	ldr	r2, [r3, #0]
 800ef80:	697b      	ldr	r3, [r7, #20]
 800ef82:	4413      	add	r3, r2
}
 800ef84:	4618      	mov	r0, r3
 800ef86:	371c      	adds	r7, #28
 800ef88:	46bd      	mov	sp, r7
 800ef8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef8e:	4770      	bx	lr

0800ef90 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ef90:	b580      	push	{r7, lr}
 800ef92:	b086      	sub	sp, #24
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	6078      	str	r0, [r7, #4]
 800ef98:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800efa0:	683b      	ldr	r3, [r7, #0]
 800efa2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800efa6:	d204      	bcs.n	800efb2 <dir_sdi+0x22>
 800efa8:	683b      	ldr	r3, [r7, #0]
 800efaa:	f003 031f 	and.w	r3, r3, #31
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d001      	beq.n	800efb6 <dir_sdi+0x26>
		return FR_INT_ERR;
 800efb2:	2302      	movs	r3, #2
 800efb4:	e063      	b.n	800f07e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	683a      	ldr	r2, [r7, #0]
 800efba:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	689b      	ldr	r3, [r3, #8]
 800efc0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800efc2:	697b      	ldr	r3, [r7, #20]
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d106      	bne.n	800efd6 <dir_sdi+0x46>
 800efc8:	693b      	ldr	r3, [r7, #16]
 800efca:	781b      	ldrb	r3, [r3, #0]
 800efcc:	2b02      	cmp	r3, #2
 800efce:	d902      	bls.n	800efd6 <dir_sdi+0x46>
		clst = fs->dirbase;
 800efd0:	693b      	ldr	r3, [r7, #16]
 800efd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800efd4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800efd6:	697b      	ldr	r3, [r7, #20]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d10c      	bne.n	800eff6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800efdc:	683b      	ldr	r3, [r7, #0]
 800efde:	095b      	lsrs	r3, r3, #5
 800efe0:	693a      	ldr	r2, [r7, #16]
 800efe2:	8912      	ldrh	r2, [r2, #8]
 800efe4:	4293      	cmp	r3, r2
 800efe6:	d301      	bcc.n	800efec <dir_sdi+0x5c>
 800efe8:	2302      	movs	r3, #2
 800efea:	e048      	b.n	800f07e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800efec:	693b      	ldr	r3, [r7, #16]
 800efee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	61da      	str	r2, [r3, #28]
 800eff4:	e029      	b.n	800f04a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800eff6:	693b      	ldr	r3, [r7, #16]
 800eff8:	895b      	ldrh	r3, [r3, #10]
 800effa:	025b      	lsls	r3, r3, #9
 800effc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800effe:	e019      	b.n	800f034 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	6979      	ldr	r1, [r7, #20]
 800f004:	4618      	mov	r0, r3
 800f006:	f7ff fcfe 	bl	800ea06 <get_fat>
 800f00a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f00c:	697b      	ldr	r3, [r7, #20]
 800f00e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f012:	d101      	bne.n	800f018 <dir_sdi+0x88>
 800f014:	2301      	movs	r3, #1
 800f016:	e032      	b.n	800f07e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800f018:	697b      	ldr	r3, [r7, #20]
 800f01a:	2b01      	cmp	r3, #1
 800f01c:	d904      	bls.n	800f028 <dir_sdi+0x98>
 800f01e:	693b      	ldr	r3, [r7, #16]
 800f020:	699b      	ldr	r3, [r3, #24]
 800f022:	697a      	ldr	r2, [r7, #20]
 800f024:	429a      	cmp	r2, r3
 800f026:	d301      	bcc.n	800f02c <dir_sdi+0x9c>
 800f028:	2302      	movs	r3, #2
 800f02a:	e028      	b.n	800f07e <dir_sdi+0xee>
			ofs -= csz;
 800f02c:	683a      	ldr	r2, [r7, #0]
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	1ad3      	subs	r3, r2, r3
 800f032:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f034:	683a      	ldr	r2, [r7, #0]
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	429a      	cmp	r2, r3
 800f03a:	d2e1      	bcs.n	800f000 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800f03c:	6979      	ldr	r1, [r7, #20]
 800f03e:	6938      	ldr	r0, [r7, #16]
 800f040:	f7ff fcc2 	bl	800e9c8 <clust2sect>
 800f044:	4602      	mov	r2, r0
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	697a      	ldr	r2, [r7, #20]
 800f04e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	69db      	ldr	r3, [r3, #28]
 800f054:	2b00      	cmp	r3, #0
 800f056:	d101      	bne.n	800f05c <dir_sdi+0xcc>
 800f058:	2302      	movs	r3, #2
 800f05a:	e010      	b.n	800f07e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	69da      	ldr	r2, [r3, #28]
 800f060:	683b      	ldr	r3, [r7, #0]
 800f062:	0a5b      	lsrs	r3, r3, #9
 800f064:	441a      	add	r2, r3
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800f06a:	693b      	ldr	r3, [r7, #16]
 800f06c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800f070:	683b      	ldr	r3, [r7, #0]
 800f072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f076:	441a      	add	r2, r3
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f07c:	2300      	movs	r3, #0
}
 800f07e:	4618      	mov	r0, r3
 800f080:	3718      	adds	r7, #24
 800f082:	46bd      	mov	sp, r7
 800f084:	bd80      	pop	{r7, pc}

0800f086 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800f086:	b580      	push	{r7, lr}
 800f088:	b086      	sub	sp, #24
 800f08a:	af00      	add	r7, sp, #0
 800f08c:	6078      	str	r0, [r7, #4]
 800f08e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	695b      	ldr	r3, [r3, #20]
 800f09a:	3320      	adds	r3, #32
 800f09c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	69db      	ldr	r3, [r3, #28]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d003      	beq.n	800f0ae <dir_next+0x28>
 800f0a6:	68bb      	ldr	r3, [r7, #8]
 800f0a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f0ac:	d301      	bcc.n	800f0b2 <dir_next+0x2c>
 800f0ae:	2304      	movs	r3, #4
 800f0b0:	e0aa      	b.n	800f208 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f0b2:	68bb      	ldr	r3, [r7, #8]
 800f0b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	f040 8098 	bne.w	800f1ee <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	69db      	ldr	r3, [r3, #28]
 800f0c2:	1c5a      	adds	r2, r3, #1
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	699b      	ldr	r3, [r3, #24]
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d10b      	bne.n	800f0e8 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800f0d0:	68bb      	ldr	r3, [r7, #8]
 800f0d2:	095b      	lsrs	r3, r3, #5
 800f0d4:	68fa      	ldr	r2, [r7, #12]
 800f0d6:	8912      	ldrh	r2, [r2, #8]
 800f0d8:	4293      	cmp	r3, r2
 800f0da:	f0c0 8088 	bcc.w	800f1ee <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	2200      	movs	r2, #0
 800f0e2:	61da      	str	r2, [r3, #28]
 800f0e4:	2304      	movs	r3, #4
 800f0e6:	e08f      	b.n	800f208 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800f0e8:	68bb      	ldr	r3, [r7, #8]
 800f0ea:	0a5b      	lsrs	r3, r3, #9
 800f0ec:	68fa      	ldr	r2, [r7, #12]
 800f0ee:	8952      	ldrh	r2, [r2, #10]
 800f0f0:	3a01      	subs	r2, #1
 800f0f2:	4013      	ands	r3, r2
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d17a      	bne.n	800f1ee <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800f0f8:	687a      	ldr	r2, [r7, #4]
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	699b      	ldr	r3, [r3, #24]
 800f0fe:	4619      	mov	r1, r3
 800f100:	4610      	mov	r0, r2
 800f102:	f7ff fc80 	bl	800ea06 <get_fat>
 800f106:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f108:	697b      	ldr	r3, [r7, #20]
 800f10a:	2b01      	cmp	r3, #1
 800f10c:	d801      	bhi.n	800f112 <dir_next+0x8c>
 800f10e:	2302      	movs	r3, #2
 800f110:	e07a      	b.n	800f208 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800f112:	697b      	ldr	r3, [r7, #20]
 800f114:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f118:	d101      	bne.n	800f11e <dir_next+0x98>
 800f11a:	2301      	movs	r3, #1
 800f11c:	e074      	b.n	800f208 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	699b      	ldr	r3, [r3, #24]
 800f122:	697a      	ldr	r2, [r7, #20]
 800f124:	429a      	cmp	r2, r3
 800f126:	d358      	bcc.n	800f1da <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800f128:	683b      	ldr	r3, [r7, #0]
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d104      	bne.n	800f138 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	2200      	movs	r2, #0
 800f132:	61da      	str	r2, [r3, #28]
 800f134:	2304      	movs	r3, #4
 800f136:	e067      	b.n	800f208 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800f138:	687a      	ldr	r2, [r7, #4]
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	699b      	ldr	r3, [r3, #24]
 800f13e:	4619      	mov	r1, r3
 800f140:	4610      	mov	r0, r2
 800f142:	f7ff fe59 	bl	800edf8 <create_chain>
 800f146:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800f148:	697b      	ldr	r3, [r7, #20]
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d101      	bne.n	800f152 <dir_next+0xcc>
 800f14e:	2307      	movs	r3, #7
 800f150:	e05a      	b.n	800f208 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800f152:	697b      	ldr	r3, [r7, #20]
 800f154:	2b01      	cmp	r3, #1
 800f156:	d101      	bne.n	800f15c <dir_next+0xd6>
 800f158:	2302      	movs	r3, #2
 800f15a:	e055      	b.n	800f208 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f15c:	697b      	ldr	r3, [r7, #20]
 800f15e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f162:	d101      	bne.n	800f168 <dir_next+0xe2>
 800f164:	2301      	movs	r3, #1
 800f166:	e04f      	b.n	800f208 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800f168:	68f8      	ldr	r0, [r7, #12]
 800f16a:	f7ff fb4d 	bl	800e808 <sync_window>
 800f16e:	4603      	mov	r3, r0
 800f170:	2b00      	cmp	r3, #0
 800f172:	d001      	beq.n	800f178 <dir_next+0xf2>
 800f174:	2301      	movs	r3, #1
 800f176:	e047      	b.n	800f208 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	3334      	adds	r3, #52	; 0x34
 800f17c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f180:	2100      	movs	r1, #0
 800f182:	4618      	mov	r0, r3
 800f184:	f7ff f945 	bl	800e412 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f188:	2300      	movs	r3, #0
 800f18a:	613b      	str	r3, [r7, #16]
 800f18c:	6979      	ldr	r1, [r7, #20]
 800f18e:	68f8      	ldr	r0, [r7, #12]
 800f190:	f7ff fc1a 	bl	800e9c8 <clust2sect>
 800f194:	4602      	mov	r2, r0
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	631a      	str	r2, [r3, #48]	; 0x30
 800f19a:	e012      	b.n	800f1c2 <dir_next+0x13c>
						fs->wflag = 1;
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	2201      	movs	r2, #1
 800f1a0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800f1a2:	68f8      	ldr	r0, [r7, #12]
 800f1a4:	f7ff fb30 	bl	800e808 <sync_window>
 800f1a8:	4603      	mov	r3, r0
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d001      	beq.n	800f1b2 <dir_next+0x12c>
 800f1ae:	2301      	movs	r3, #1
 800f1b0:	e02a      	b.n	800f208 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f1b2:	693b      	ldr	r3, [r7, #16]
 800f1b4:	3301      	adds	r3, #1
 800f1b6:	613b      	str	r3, [r7, #16]
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f1bc:	1c5a      	adds	r2, r3, #1
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	631a      	str	r2, [r3, #48]	; 0x30
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	895b      	ldrh	r3, [r3, #10]
 800f1c6:	461a      	mov	r2, r3
 800f1c8:	693b      	ldr	r3, [r7, #16]
 800f1ca:	4293      	cmp	r3, r2
 800f1cc:	d3e6      	bcc.n	800f19c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f1d2:	693b      	ldr	r3, [r7, #16]
 800f1d4:	1ad2      	subs	r2, r2, r3
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	697a      	ldr	r2, [r7, #20]
 800f1de:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800f1e0:	6979      	ldr	r1, [r7, #20]
 800f1e2:	68f8      	ldr	r0, [r7, #12]
 800f1e4:	f7ff fbf0 	bl	800e9c8 <clust2sect>
 800f1e8:	4602      	mov	r2, r0
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	68ba      	ldr	r2, [r7, #8]
 800f1f2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800f1fa:	68bb      	ldr	r3, [r7, #8]
 800f1fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f200:	441a      	add	r2, r3
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f206:	2300      	movs	r3, #0
}
 800f208:	4618      	mov	r0, r3
 800f20a:	3718      	adds	r7, #24
 800f20c:	46bd      	mov	sp, r7
 800f20e:	bd80      	pop	{r7, pc}

0800f210 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800f210:	b580      	push	{r7, lr}
 800f212:	b086      	sub	sp, #24
 800f214:	af00      	add	r7, sp, #0
 800f216:	6078      	str	r0, [r7, #4]
 800f218:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800f220:	2100      	movs	r1, #0
 800f222:	6878      	ldr	r0, [r7, #4]
 800f224:	f7ff feb4 	bl	800ef90 <dir_sdi>
 800f228:	4603      	mov	r3, r0
 800f22a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f22c:	7dfb      	ldrb	r3, [r7, #23]
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d12b      	bne.n	800f28a <dir_alloc+0x7a>
		n = 0;
 800f232:	2300      	movs	r3, #0
 800f234:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	69db      	ldr	r3, [r3, #28]
 800f23a:	4619      	mov	r1, r3
 800f23c:	68f8      	ldr	r0, [r7, #12]
 800f23e:	f7ff fb27 	bl	800e890 <move_window>
 800f242:	4603      	mov	r3, r0
 800f244:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f246:	7dfb      	ldrb	r3, [r7, #23]
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d11d      	bne.n	800f288 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	6a1b      	ldr	r3, [r3, #32]
 800f250:	781b      	ldrb	r3, [r3, #0]
 800f252:	2be5      	cmp	r3, #229	; 0xe5
 800f254:	d004      	beq.n	800f260 <dir_alloc+0x50>
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	6a1b      	ldr	r3, [r3, #32]
 800f25a:	781b      	ldrb	r3, [r3, #0]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d107      	bne.n	800f270 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800f260:	693b      	ldr	r3, [r7, #16]
 800f262:	3301      	adds	r3, #1
 800f264:	613b      	str	r3, [r7, #16]
 800f266:	693a      	ldr	r2, [r7, #16]
 800f268:	683b      	ldr	r3, [r7, #0]
 800f26a:	429a      	cmp	r2, r3
 800f26c:	d102      	bne.n	800f274 <dir_alloc+0x64>
 800f26e:	e00c      	b.n	800f28a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800f270:	2300      	movs	r3, #0
 800f272:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800f274:	2101      	movs	r1, #1
 800f276:	6878      	ldr	r0, [r7, #4]
 800f278:	f7ff ff05 	bl	800f086 <dir_next>
 800f27c:	4603      	mov	r3, r0
 800f27e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800f280:	7dfb      	ldrb	r3, [r7, #23]
 800f282:	2b00      	cmp	r3, #0
 800f284:	d0d7      	beq.n	800f236 <dir_alloc+0x26>
 800f286:	e000      	b.n	800f28a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800f288:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f28a:	7dfb      	ldrb	r3, [r7, #23]
 800f28c:	2b04      	cmp	r3, #4
 800f28e:	d101      	bne.n	800f294 <dir_alloc+0x84>
 800f290:	2307      	movs	r3, #7
 800f292:	75fb      	strb	r3, [r7, #23]
	return res;
 800f294:	7dfb      	ldrb	r3, [r7, #23]
}
 800f296:	4618      	mov	r0, r3
 800f298:	3718      	adds	r7, #24
 800f29a:	46bd      	mov	sp, r7
 800f29c:	bd80      	pop	{r7, pc}

0800f29e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800f29e:	b580      	push	{r7, lr}
 800f2a0:	b084      	sub	sp, #16
 800f2a2:	af00      	add	r7, sp, #0
 800f2a4:	6078      	str	r0, [r7, #4]
 800f2a6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800f2a8:	683b      	ldr	r3, [r7, #0]
 800f2aa:	331a      	adds	r3, #26
 800f2ac:	4618      	mov	r0, r3
 800f2ae:	f7ff f80d 	bl	800e2cc <ld_word>
 800f2b2:	4603      	mov	r3, r0
 800f2b4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	781b      	ldrb	r3, [r3, #0]
 800f2ba:	2b03      	cmp	r3, #3
 800f2bc:	d109      	bne.n	800f2d2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f2be:	683b      	ldr	r3, [r7, #0]
 800f2c0:	3314      	adds	r3, #20
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	f7ff f802 	bl	800e2cc <ld_word>
 800f2c8:	4603      	mov	r3, r0
 800f2ca:	041b      	lsls	r3, r3, #16
 800f2cc:	68fa      	ldr	r2, [r7, #12]
 800f2ce:	4313      	orrs	r3, r2
 800f2d0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800f2d2:	68fb      	ldr	r3, [r7, #12]
}
 800f2d4:	4618      	mov	r0, r3
 800f2d6:	3710      	adds	r7, #16
 800f2d8:	46bd      	mov	sp, r7
 800f2da:	bd80      	pop	{r7, pc}

0800f2dc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800f2dc:	b580      	push	{r7, lr}
 800f2de:	b084      	sub	sp, #16
 800f2e0:	af00      	add	r7, sp, #0
 800f2e2:	60f8      	str	r0, [r7, #12]
 800f2e4:	60b9      	str	r1, [r7, #8]
 800f2e6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800f2e8:	68bb      	ldr	r3, [r7, #8]
 800f2ea:	331a      	adds	r3, #26
 800f2ec:	687a      	ldr	r2, [r7, #4]
 800f2ee:	b292      	uxth	r2, r2
 800f2f0:	4611      	mov	r1, r2
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	f7ff f825 	bl	800e342 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	781b      	ldrb	r3, [r3, #0]
 800f2fc:	2b03      	cmp	r3, #3
 800f2fe:	d109      	bne.n	800f314 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800f300:	68bb      	ldr	r3, [r7, #8]
 800f302:	f103 0214 	add.w	r2, r3, #20
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	0c1b      	lsrs	r3, r3, #16
 800f30a:	b29b      	uxth	r3, r3
 800f30c:	4619      	mov	r1, r3
 800f30e:	4610      	mov	r0, r2
 800f310:	f7ff f817 	bl	800e342 <st_word>
	}
}
 800f314:	bf00      	nop
 800f316:	3710      	adds	r7, #16
 800f318:	46bd      	mov	sp, r7
 800f31a:	bd80      	pop	{r7, pc}

0800f31c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f31c:	b580      	push	{r7, lr}
 800f31e:	b086      	sub	sp, #24
 800f320:	af00      	add	r7, sp, #0
 800f322:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f32a:	2100      	movs	r1, #0
 800f32c:	6878      	ldr	r0, [r7, #4]
 800f32e:	f7ff fe2f 	bl	800ef90 <dir_sdi>
 800f332:	4603      	mov	r3, r0
 800f334:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f336:	7dfb      	ldrb	r3, [r7, #23]
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d001      	beq.n	800f340 <dir_find+0x24>
 800f33c:	7dfb      	ldrb	r3, [r7, #23]
 800f33e:	e03e      	b.n	800f3be <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	69db      	ldr	r3, [r3, #28]
 800f344:	4619      	mov	r1, r3
 800f346:	6938      	ldr	r0, [r7, #16]
 800f348:	f7ff faa2 	bl	800e890 <move_window>
 800f34c:	4603      	mov	r3, r0
 800f34e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f350:	7dfb      	ldrb	r3, [r7, #23]
 800f352:	2b00      	cmp	r3, #0
 800f354:	d12f      	bne.n	800f3b6 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	6a1b      	ldr	r3, [r3, #32]
 800f35a:	781b      	ldrb	r3, [r3, #0]
 800f35c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f35e:	7bfb      	ldrb	r3, [r7, #15]
 800f360:	2b00      	cmp	r3, #0
 800f362:	d102      	bne.n	800f36a <dir_find+0x4e>
 800f364:	2304      	movs	r3, #4
 800f366:	75fb      	strb	r3, [r7, #23]
 800f368:	e028      	b.n	800f3bc <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	6a1b      	ldr	r3, [r3, #32]
 800f36e:	330b      	adds	r3, #11
 800f370:	781b      	ldrb	r3, [r3, #0]
 800f372:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f376:	b2da      	uxtb	r2, r3
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	6a1b      	ldr	r3, [r3, #32]
 800f380:	330b      	adds	r3, #11
 800f382:	781b      	ldrb	r3, [r3, #0]
 800f384:	f003 0308 	and.w	r3, r3, #8
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d10a      	bne.n	800f3a2 <dir_find+0x86>
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	6a18      	ldr	r0, [r3, #32]
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	3324      	adds	r3, #36	; 0x24
 800f394:	220b      	movs	r2, #11
 800f396:	4619      	mov	r1, r3
 800f398:	f7ff f856 	bl	800e448 <mem_cmp>
 800f39c:	4603      	mov	r3, r0
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d00b      	beq.n	800f3ba <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f3a2:	2100      	movs	r1, #0
 800f3a4:	6878      	ldr	r0, [r7, #4]
 800f3a6:	f7ff fe6e 	bl	800f086 <dir_next>
 800f3aa:	4603      	mov	r3, r0
 800f3ac:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800f3ae:	7dfb      	ldrb	r3, [r7, #23]
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d0c5      	beq.n	800f340 <dir_find+0x24>
 800f3b4:	e002      	b.n	800f3bc <dir_find+0xa0>
		if (res != FR_OK) break;
 800f3b6:	bf00      	nop
 800f3b8:	e000      	b.n	800f3bc <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f3ba:	bf00      	nop

	return res;
 800f3bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800f3be:	4618      	mov	r0, r3
 800f3c0:	3718      	adds	r7, #24
 800f3c2:	46bd      	mov	sp, r7
 800f3c4:	bd80      	pop	{r7, pc}

0800f3c6 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f3c6:	b580      	push	{r7, lr}
 800f3c8:	b084      	sub	sp, #16
 800f3ca:	af00      	add	r7, sp, #0
 800f3cc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800f3d4:	2101      	movs	r1, #1
 800f3d6:	6878      	ldr	r0, [r7, #4]
 800f3d8:	f7ff ff1a 	bl	800f210 <dir_alloc>
 800f3dc:	4603      	mov	r3, r0
 800f3de:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800f3e0:	7bfb      	ldrb	r3, [r7, #15]
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d11c      	bne.n	800f420 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	69db      	ldr	r3, [r3, #28]
 800f3ea:	4619      	mov	r1, r3
 800f3ec:	68b8      	ldr	r0, [r7, #8]
 800f3ee:	f7ff fa4f 	bl	800e890 <move_window>
 800f3f2:	4603      	mov	r3, r0
 800f3f4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f3f6:	7bfb      	ldrb	r3, [r7, #15]
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d111      	bne.n	800f420 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	6a1b      	ldr	r3, [r3, #32]
 800f400:	2220      	movs	r2, #32
 800f402:	2100      	movs	r1, #0
 800f404:	4618      	mov	r0, r3
 800f406:	f7ff f804 	bl	800e412 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	6a18      	ldr	r0, [r3, #32]
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	3324      	adds	r3, #36	; 0x24
 800f412:	220b      	movs	r2, #11
 800f414:	4619      	mov	r1, r3
 800f416:	f7fe ffdb 	bl	800e3d0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800f41a:	68bb      	ldr	r3, [r7, #8]
 800f41c:	2201      	movs	r2, #1
 800f41e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f420:	7bfb      	ldrb	r3, [r7, #15]
}
 800f422:	4618      	mov	r0, r3
 800f424:	3710      	adds	r7, #16
 800f426:	46bd      	mov	sp, r7
 800f428:	bd80      	pop	{r7, pc}
	...

0800f42c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f42c:	b580      	push	{r7, lr}
 800f42e:	b088      	sub	sp, #32
 800f430:	af00      	add	r7, sp, #0
 800f432:	6078      	str	r0, [r7, #4]
 800f434:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800f436:	683b      	ldr	r3, [r7, #0]
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	60fb      	str	r3, [r7, #12]
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	3324      	adds	r3, #36	; 0x24
 800f440:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800f442:	220b      	movs	r2, #11
 800f444:	2120      	movs	r1, #32
 800f446:	68b8      	ldr	r0, [r7, #8]
 800f448:	f7fe ffe3 	bl	800e412 <mem_set>
	si = i = 0; ni = 8;
 800f44c:	2300      	movs	r3, #0
 800f44e:	613b      	str	r3, [r7, #16]
 800f450:	693b      	ldr	r3, [r7, #16]
 800f452:	61fb      	str	r3, [r7, #28]
 800f454:	2308      	movs	r3, #8
 800f456:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800f458:	69fb      	ldr	r3, [r7, #28]
 800f45a:	1c5a      	adds	r2, r3, #1
 800f45c:	61fa      	str	r2, [r7, #28]
 800f45e:	68fa      	ldr	r2, [r7, #12]
 800f460:	4413      	add	r3, r2
 800f462:	781b      	ldrb	r3, [r3, #0]
 800f464:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f466:	7efb      	ldrb	r3, [r7, #27]
 800f468:	2b20      	cmp	r3, #32
 800f46a:	d94e      	bls.n	800f50a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800f46c:	7efb      	ldrb	r3, [r7, #27]
 800f46e:	2b2f      	cmp	r3, #47	; 0x2f
 800f470:	d006      	beq.n	800f480 <create_name+0x54>
 800f472:	7efb      	ldrb	r3, [r7, #27]
 800f474:	2b5c      	cmp	r3, #92	; 0x5c
 800f476:	d110      	bne.n	800f49a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800f478:	e002      	b.n	800f480 <create_name+0x54>
 800f47a:	69fb      	ldr	r3, [r7, #28]
 800f47c:	3301      	adds	r3, #1
 800f47e:	61fb      	str	r3, [r7, #28]
 800f480:	68fa      	ldr	r2, [r7, #12]
 800f482:	69fb      	ldr	r3, [r7, #28]
 800f484:	4413      	add	r3, r2
 800f486:	781b      	ldrb	r3, [r3, #0]
 800f488:	2b2f      	cmp	r3, #47	; 0x2f
 800f48a:	d0f6      	beq.n	800f47a <create_name+0x4e>
 800f48c:	68fa      	ldr	r2, [r7, #12]
 800f48e:	69fb      	ldr	r3, [r7, #28]
 800f490:	4413      	add	r3, r2
 800f492:	781b      	ldrb	r3, [r3, #0]
 800f494:	2b5c      	cmp	r3, #92	; 0x5c
 800f496:	d0f0      	beq.n	800f47a <create_name+0x4e>
			break;
 800f498:	e038      	b.n	800f50c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800f49a:	7efb      	ldrb	r3, [r7, #27]
 800f49c:	2b2e      	cmp	r3, #46	; 0x2e
 800f49e:	d003      	beq.n	800f4a8 <create_name+0x7c>
 800f4a0:	693a      	ldr	r2, [r7, #16]
 800f4a2:	697b      	ldr	r3, [r7, #20]
 800f4a4:	429a      	cmp	r2, r3
 800f4a6:	d30c      	bcc.n	800f4c2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800f4a8:	697b      	ldr	r3, [r7, #20]
 800f4aa:	2b0b      	cmp	r3, #11
 800f4ac:	d002      	beq.n	800f4b4 <create_name+0x88>
 800f4ae:	7efb      	ldrb	r3, [r7, #27]
 800f4b0:	2b2e      	cmp	r3, #46	; 0x2e
 800f4b2:	d001      	beq.n	800f4b8 <create_name+0x8c>
 800f4b4:	2306      	movs	r3, #6
 800f4b6:	e044      	b.n	800f542 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800f4b8:	2308      	movs	r3, #8
 800f4ba:	613b      	str	r3, [r7, #16]
 800f4bc:	230b      	movs	r3, #11
 800f4be:	617b      	str	r3, [r7, #20]
			continue;
 800f4c0:	e022      	b.n	800f508 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800f4c2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	da04      	bge.n	800f4d4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800f4ca:	7efb      	ldrb	r3, [r7, #27]
 800f4cc:	3b80      	subs	r3, #128	; 0x80
 800f4ce:	4a1f      	ldr	r2, [pc, #124]	; (800f54c <create_name+0x120>)
 800f4d0:	5cd3      	ldrb	r3, [r2, r3]
 800f4d2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800f4d4:	7efb      	ldrb	r3, [r7, #27]
 800f4d6:	4619      	mov	r1, r3
 800f4d8:	481d      	ldr	r0, [pc, #116]	; (800f550 <create_name+0x124>)
 800f4da:	f7fe ffdc 	bl	800e496 <chk_chr>
 800f4de:	4603      	mov	r3, r0
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d001      	beq.n	800f4e8 <create_name+0xbc>
 800f4e4:	2306      	movs	r3, #6
 800f4e6:	e02c      	b.n	800f542 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800f4e8:	7efb      	ldrb	r3, [r7, #27]
 800f4ea:	2b60      	cmp	r3, #96	; 0x60
 800f4ec:	d905      	bls.n	800f4fa <create_name+0xce>
 800f4ee:	7efb      	ldrb	r3, [r7, #27]
 800f4f0:	2b7a      	cmp	r3, #122	; 0x7a
 800f4f2:	d802      	bhi.n	800f4fa <create_name+0xce>
 800f4f4:	7efb      	ldrb	r3, [r7, #27]
 800f4f6:	3b20      	subs	r3, #32
 800f4f8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800f4fa:	693b      	ldr	r3, [r7, #16]
 800f4fc:	1c5a      	adds	r2, r3, #1
 800f4fe:	613a      	str	r2, [r7, #16]
 800f500:	68ba      	ldr	r2, [r7, #8]
 800f502:	4413      	add	r3, r2
 800f504:	7efa      	ldrb	r2, [r7, #27]
 800f506:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800f508:	e7a6      	b.n	800f458 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f50a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800f50c:	68fa      	ldr	r2, [r7, #12]
 800f50e:	69fb      	ldr	r3, [r7, #28]
 800f510:	441a      	add	r2, r3
 800f512:	683b      	ldr	r3, [r7, #0]
 800f514:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800f516:	693b      	ldr	r3, [r7, #16]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d101      	bne.n	800f520 <create_name+0xf4>
 800f51c:	2306      	movs	r3, #6
 800f51e:	e010      	b.n	800f542 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f520:	68bb      	ldr	r3, [r7, #8]
 800f522:	781b      	ldrb	r3, [r3, #0]
 800f524:	2be5      	cmp	r3, #229	; 0xe5
 800f526:	d102      	bne.n	800f52e <create_name+0x102>
 800f528:	68bb      	ldr	r3, [r7, #8]
 800f52a:	2205      	movs	r2, #5
 800f52c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800f52e:	7efb      	ldrb	r3, [r7, #27]
 800f530:	2b20      	cmp	r3, #32
 800f532:	d801      	bhi.n	800f538 <create_name+0x10c>
 800f534:	2204      	movs	r2, #4
 800f536:	e000      	b.n	800f53a <create_name+0x10e>
 800f538:	2200      	movs	r2, #0
 800f53a:	68bb      	ldr	r3, [r7, #8]
 800f53c:	330b      	adds	r3, #11
 800f53e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800f540:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800f542:	4618      	mov	r0, r3
 800f544:	3720      	adds	r7, #32
 800f546:	46bd      	mov	sp, r7
 800f548:	bd80      	pop	{r7, pc}
 800f54a:	bf00      	nop
 800f54c:	080167b4 	.word	0x080167b4
 800f550:	08013c28 	.word	0x08013c28

0800f554 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f554:	b580      	push	{r7, lr}
 800f556:	b086      	sub	sp, #24
 800f558:	af00      	add	r7, sp, #0
 800f55a:	6078      	str	r0, [r7, #4]
 800f55c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800f562:	693b      	ldr	r3, [r7, #16]
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800f568:	e002      	b.n	800f570 <follow_path+0x1c>
 800f56a:	683b      	ldr	r3, [r7, #0]
 800f56c:	3301      	adds	r3, #1
 800f56e:	603b      	str	r3, [r7, #0]
 800f570:	683b      	ldr	r3, [r7, #0]
 800f572:	781b      	ldrb	r3, [r3, #0]
 800f574:	2b2f      	cmp	r3, #47	; 0x2f
 800f576:	d0f8      	beq.n	800f56a <follow_path+0x16>
 800f578:	683b      	ldr	r3, [r7, #0]
 800f57a:	781b      	ldrb	r3, [r3, #0]
 800f57c:	2b5c      	cmp	r3, #92	; 0x5c
 800f57e:	d0f4      	beq.n	800f56a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800f580:	693b      	ldr	r3, [r7, #16]
 800f582:	2200      	movs	r2, #0
 800f584:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f586:	683b      	ldr	r3, [r7, #0]
 800f588:	781b      	ldrb	r3, [r3, #0]
 800f58a:	2b1f      	cmp	r3, #31
 800f58c:	d80a      	bhi.n	800f5a4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	2280      	movs	r2, #128	; 0x80
 800f592:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800f596:	2100      	movs	r1, #0
 800f598:	6878      	ldr	r0, [r7, #4]
 800f59a:	f7ff fcf9 	bl	800ef90 <dir_sdi>
 800f59e:	4603      	mov	r3, r0
 800f5a0:	75fb      	strb	r3, [r7, #23]
 800f5a2:	e043      	b.n	800f62c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f5a4:	463b      	mov	r3, r7
 800f5a6:	4619      	mov	r1, r3
 800f5a8:	6878      	ldr	r0, [r7, #4]
 800f5aa:	f7ff ff3f 	bl	800f42c <create_name>
 800f5ae:	4603      	mov	r3, r0
 800f5b0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f5b2:	7dfb      	ldrb	r3, [r7, #23]
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d134      	bne.n	800f622 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800f5b8:	6878      	ldr	r0, [r7, #4]
 800f5ba:	f7ff feaf 	bl	800f31c <dir_find>
 800f5be:	4603      	mov	r3, r0
 800f5c0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f5c8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800f5ca:	7dfb      	ldrb	r3, [r7, #23]
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d00a      	beq.n	800f5e6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f5d0:	7dfb      	ldrb	r3, [r7, #23]
 800f5d2:	2b04      	cmp	r3, #4
 800f5d4:	d127      	bne.n	800f626 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f5d6:	7afb      	ldrb	r3, [r7, #11]
 800f5d8:	f003 0304 	and.w	r3, r3, #4
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d122      	bne.n	800f626 <follow_path+0xd2>
 800f5e0:	2305      	movs	r3, #5
 800f5e2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800f5e4:	e01f      	b.n	800f626 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f5e6:	7afb      	ldrb	r3, [r7, #11]
 800f5e8:	f003 0304 	and.w	r3, r3, #4
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d11c      	bne.n	800f62a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f5f0:	693b      	ldr	r3, [r7, #16]
 800f5f2:	799b      	ldrb	r3, [r3, #6]
 800f5f4:	f003 0310 	and.w	r3, r3, #16
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d102      	bne.n	800f602 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800f5fc:	2305      	movs	r3, #5
 800f5fe:	75fb      	strb	r3, [r7, #23]
 800f600:	e014      	b.n	800f62c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	695b      	ldr	r3, [r3, #20]
 800f60c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f610:	4413      	add	r3, r2
 800f612:	4619      	mov	r1, r3
 800f614:	68f8      	ldr	r0, [r7, #12]
 800f616:	f7ff fe42 	bl	800f29e <ld_clust>
 800f61a:	4602      	mov	r2, r0
 800f61c:	693b      	ldr	r3, [r7, #16]
 800f61e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f620:	e7c0      	b.n	800f5a4 <follow_path+0x50>
			if (res != FR_OK) break;
 800f622:	bf00      	nop
 800f624:	e002      	b.n	800f62c <follow_path+0xd8>
				break;
 800f626:	bf00      	nop
 800f628:	e000      	b.n	800f62c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f62a:	bf00      	nop
			}
		}
	}

	return res;
 800f62c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f62e:	4618      	mov	r0, r3
 800f630:	3718      	adds	r7, #24
 800f632:	46bd      	mov	sp, r7
 800f634:	bd80      	pop	{r7, pc}

0800f636 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f636:	b480      	push	{r7}
 800f638:	b087      	sub	sp, #28
 800f63a:	af00      	add	r7, sp, #0
 800f63c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f63e:	f04f 33ff 	mov.w	r3, #4294967295
 800f642:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d031      	beq.n	800f6b0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	617b      	str	r3, [r7, #20]
 800f652:	e002      	b.n	800f65a <get_ldnumber+0x24>
 800f654:	697b      	ldr	r3, [r7, #20]
 800f656:	3301      	adds	r3, #1
 800f658:	617b      	str	r3, [r7, #20]
 800f65a:	697b      	ldr	r3, [r7, #20]
 800f65c:	781b      	ldrb	r3, [r3, #0]
 800f65e:	2b20      	cmp	r3, #32
 800f660:	d903      	bls.n	800f66a <get_ldnumber+0x34>
 800f662:	697b      	ldr	r3, [r7, #20]
 800f664:	781b      	ldrb	r3, [r3, #0]
 800f666:	2b3a      	cmp	r3, #58	; 0x3a
 800f668:	d1f4      	bne.n	800f654 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f66a:	697b      	ldr	r3, [r7, #20]
 800f66c:	781b      	ldrb	r3, [r3, #0]
 800f66e:	2b3a      	cmp	r3, #58	; 0x3a
 800f670:	d11c      	bne.n	800f6ac <get_ldnumber+0x76>
			tp = *path;
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	1c5a      	adds	r2, r3, #1
 800f67c:	60fa      	str	r2, [r7, #12]
 800f67e:	781b      	ldrb	r3, [r3, #0]
 800f680:	3b30      	subs	r3, #48	; 0x30
 800f682:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800f684:	68bb      	ldr	r3, [r7, #8]
 800f686:	2b09      	cmp	r3, #9
 800f688:	d80e      	bhi.n	800f6a8 <get_ldnumber+0x72>
 800f68a:	68fa      	ldr	r2, [r7, #12]
 800f68c:	697b      	ldr	r3, [r7, #20]
 800f68e:	429a      	cmp	r2, r3
 800f690:	d10a      	bne.n	800f6a8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f692:	68bb      	ldr	r3, [r7, #8]
 800f694:	2b00      	cmp	r3, #0
 800f696:	d107      	bne.n	800f6a8 <get_ldnumber+0x72>
					vol = (int)i;
 800f698:	68bb      	ldr	r3, [r7, #8]
 800f69a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800f69c:	697b      	ldr	r3, [r7, #20]
 800f69e:	3301      	adds	r3, #1
 800f6a0:	617b      	str	r3, [r7, #20]
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	697a      	ldr	r2, [r7, #20]
 800f6a6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800f6a8:	693b      	ldr	r3, [r7, #16]
 800f6aa:	e002      	b.n	800f6b2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800f6ac:	2300      	movs	r3, #0
 800f6ae:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800f6b0:	693b      	ldr	r3, [r7, #16]
}
 800f6b2:	4618      	mov	r0, r3
 800f6b4:	371c      	adds	r7, #28
 800f6b6:	46bd      	mov	sp, r7
 800f6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6bc:	4770      	bx	lr
	...

0800f6c0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800f6c0:	b580      	push	{r7, lr}
 800f6c2:	b082      	sub	sp, #8
 800f6c4:	af00      	add	r7, sp, #0
 800f6c6:	6078      	str	r0, [r7, #4]
 800f6c8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	2200      	movs	r2, #0
 800f6ce:	70da      	strb	r2, [r3, #3]
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	f04f 32ff 	mov.w	r2, #4294967295
 800f6d6:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800f6d8:	6839      	ldr	r1, [r7, #0]
 800f6da:	6878      	ldr	r0, [r7, #4]
 800f6dc:	f7ff f8d8 	bl	800e890 <move_window>
 800f6e0:	4603      	mov	r3, r0
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d001      	beq.n	800f6ea <check_fs+0x2a>
 800f6e6:	2304      	movs	r3, #4
 800f6e8:	e038      	b.n	800f75c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	3334      	adds	r3, #52	; 0x34
 800f6ee:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f6f2:	4618      	mov	r0, r3
 800f6f4:	f7fe fdea 	bl	800e2cc <ld_word>
 800f6f8:	4603      	mov	r3, r0
 800f6fa:	461a      	mov	r2, r3
 800f6fc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f700:	429a      	cmp	r2, r3
 800f702:	d001      	beq.n	800f708 <check_fs+0x48>
 800f704:	2303      	movs	r3, #3
 800f706:	e029      	b.n	800f75c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f70e:	2be9      	cmp	r3, #233	; 0xe9
 800f710:	d009      	beq.n	800f726 <check_fs+0x66>
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f718:	2beb      	cmp	r3, #235	; 0xeb
 800f71a:	d11e      	bne.n	800f75a <check_fs+0x9a>
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800f722:	2b90      	cmp	r3, #144	; 0x90
 800f724:	d119      	bne.n	800f75a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	3334      	adds	r3, #52	; 0x34
 800f72a:	3336      	adds	r3, #54	; 0x36
 800f72c:	4618      	mov	r0, r3
 800f72e:	f7fe fde5 	bl	800e2fc <ld_dword>
 800f732:	4603      	mov	r3, r0
 800f734:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f738:	4a0a      	ldr	r2, [pc, #40]	; (800f764 <check_fs+0xa4>)
 800f73a:	4293      	cmp	r3, r2
 800f73c:	d101      	bne.n	800f742 <check_fs+0x82>
 800f73e:	2300      	movs	r3, #0
 800f740:	e00c      	b.n	800f75c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	3334      	adds	r3, #52	; 0x34
 800f746:	3352      	adds	r3, #82	; 0x52
 800f748:	4618      	mov	r0, r3
 800f74a:	f7fe fdd7 	bl	800e2fc <ld_dword>
 800f74e:	4603      	mov	r3, r0
 800f750:	4a05      	ldr	r2, [pc, #20]	; (800f768 <check_fs+0xa8>)
 800f752:	4293      	cmp	r3, r2
 800f754:	d101      	bne.n	800f75a <check_fs+0x9a>
 800f756:	2300      	movs	r3, #0
 800f758:	e000      	b.n	800f75c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800f75a:	2302      	movs	r3, #2
}
 800f75c:	4618      	mov	r0, r3
 800f75e:	3708      	adds	r7, #8
 800f760:	46bd      	mov	sp, r7
 800f762:	bd80      	pop	{r7, pc}
 800f764:	00544146 	.word	0x00544146
 800f768:	33544146 	.word	0x33544146

0800f76c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800f76c:	b580      	push	{r7, lr}
 800f76e:	b096      	sub	sp, #88	; 0x58
 800f770:	af00      	add	r7, sp, #0
 800f772:	60f8      	str	r0, [r7, #12]
 800f774:	60b9      	str	r1, [r7, #8]
 800f776:	4613      	mov	r3, r2
 800f778:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800f77a:	68bb      	ldr	r3, [r7, #8]
 800f77c:	2200      	movs	r2, #0
 800f77e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800f780:	68f8      	ldr	r0, [r7, #12]
 800f782:	f7ff ff58 	bl	800f636 <get_ldnumber>
 800f786:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	da01      	bge.n	800f792 <find_volume+0x26>
 800f78e:	230b      	movs	r3, #11
 800f790:	e235      	b.n	800fbfe <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800f792:	4aa5      	ldr	r2, [pc, #660]	; (800fa28 <find_volume+0x2bc>)
 800f794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f79a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f79c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d101      	bne.n	800f7a6 <find_volume+0x3a>
 800f7a2:	230c      	movs	r3, #12
 800f7a4:	e22b      	b.n	800fbfe <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 800f7a6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f7a8:	f7fe fe90 	bl	800e4cc <lock_fs>
 800f7ac:	4603      	mov	r3, r0
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d101      	bne.n	800f7b6 <find_volume+0x4a>
 800f7b2:	230f      	movs	r3, #15
 800f7b4:	e223      	b.n	800fbfe <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 800f7b6:	68bb      	ldr	r3, [r7, #8]
 800f7b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f7ba:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800f7bc:	79fb      	ldrb	r3, [r7, #7]
 800f7be:	f023 0301 	bic.w	r3, r3, #1
 800f7c2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800f7c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7c6:	781b      	ldrb	r3, [r3, #0]
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d01a      	beq.n	800f802 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800f7cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7ce:	785b      	ldrb	r3, [r3, #1]
 800f7d0:	4618      	mov	r0, r3
 800f7d2:	f7fe fcdd 	bl	800e190 <disk_status>
 800f7d6:	4603      	mov	r3, r0
 800f7d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f7dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f7e0:	f003 0301 	and.w	r3, r3, #1
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d10c      	bne.n	800f802 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800f7e8:	79fb      	ldrb	r3, [r7, #7]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d007      	beq.n	800f7fe <find_volume+0x92>
 800f7ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f7f2:	f003 0304 	and.w	r3, r3, #4
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d001      	beq.n	800f7fe <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800f7fa:	230a      	movs	r3, #10
 800f7fc:	e1ff      	b.n	800fbfe <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 800f7fe:	2300      	movs	r3, #0
 800f800:	e1fd      	b.n	800fbfe <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800f802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f804:	2200      	movs	r2, #0
 800f806:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800f808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f80a:	b2da      	uxtb	r2, r3
 800f80c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f80e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800f810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f812:	785b      	ldrb	r3, [r3, #1]
 800f814:	4618      	mov	r0, r3
 800f816:	f7fe fcd5 	bl	800e1c4 <disk_initialize>
 800f81a:	4603      	mov	r3, r0
 800f81c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800f820:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f824:	f003 0301 	and.w	r3, r3, #1
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d001      	beq.n	800f830 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800f82c:	2303      	movs	r3, #3
 800f82e:	e1e6      	b.n	800fbfe <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800f830:	79fb      	ldrb	r3, [r7, #7]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d007      	beq.n	800f846 <find_volume+0xda>
 800f836:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f83a:	f003 0304 	and.w	r3, r3, #4
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d001      	beq.n	800f846 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800f842:	230a      	movs	r3, #10
 800f844:	e1db      	b.n	800fbfe <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800f846:	2300      	movs	r3, #0
 800f848:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800f84a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f84c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f84e:	f7ff ff37 	bl	800f6c0 <check_fs>
 800f852:	4603      	mov	r3, r0
 800f854:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800f858:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f85c:	2b02      	cmp	r3, #2
 800f85e:	d149      	bne.n	800f8f4 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f860:	2300      	movs	r3, #0
 800f862:	643b      	str	r3, [r7, #64]	; 0x40
 800f864:	e01e      	b.n	800f8a4 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800f866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f868:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800f86c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f86e:	011b      	lsls	r3, r3, #4
 800f870:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800f874:	4413      	add	r3, r2
 800f876:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f87a:	3304      	adds	r3, #4
 800f87c:	781b      	ldrb	r3, [r3, #0]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d006      	beq.n	800f890 <find_volume+0x124>
 800f882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f884:	3308      	adds	r3, #8
 800f886:	4618      	mov	r0, r3
 800f888:	f7fe fd38 	bl	800e2fc <ld_dword>
 800f88c:	4602      	mov	r2, r0
 800f88e:	e000      	b.n	800f892 <find_volume+0x126>
 800f890:	2200      	movs	r2, #0
 800f892:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f894:	009b      	lsls	r3, r3, #2
 800f896:	3358      	adds	r3, #88	; 0x58
 800f898:	443b      	add	r3, r7
 800f89a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f89e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f8a0:	3301      	adds	r3, #1
 800f8a2:	643b      	str	r3, [r7, #64]	; 0x40
 800f8a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f8a6:	2b03      	cmp	r3, #3
 800f8a8:	d9dd      	bls.n	800f866 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800f8aa:	2300      	movs	r3, #0
 800f8ac:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800f8ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d002      	beq.n	800f8ba <find_volume+0x14e>
 800f8b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f8b6:	3b01      	subs	r3, #1
 800f8b8:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800f8ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f8bc:	009b      	lsls	r3, r3, #2
 800f8be:	3358      	adds	r3, #88	; 0x58
 800f8c0:	443b      	add	r3, r7
 800f8c2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f8c6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f8c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d005      	beq.n	800f8da <find_volume+0x16e>
 800f8ce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f8d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f8d2:	f7ff fef5 	bl	800f6c0 <check_fs>
 800f8d6:	4603      	mov	r3, r0
 800f8d8:	e000      	b.n	800f8dc <find_volume+0x170>
 800f8da:	2303      	movs	r3, #3
 800f8dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800f8e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f8e4:	2b01      	cmp	r3, #1
 800f8e6:	d905      	bls.n	800f8f4 <find_volume+0x188>
 800f8e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f8ea:	3301      	adds	r3, #1
 800f8ec:	643b      	str	r3, [r7, #64]	; 0x40
 800f8ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f8f0:	2b03      	cmp	r3, #3
 800f8f2:	d9e2      	bls.n	800f8ba <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800f8f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f8f8:	2b04      	cmp	r3, #4
 800f8fa:	d101      	bne.n	800f900 <find_volume+0x194>
 800f8fc:	2301      	movs	r3, #1
 800f8fe:	e17e      	b.n	800fbfe <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800f900:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f904:	2b01      	cmp	r3, #1
 800f906:	d901      	bls.n	800f90c <find_volume+0x1a0>
 800f908:	230d      	movs	r3, #13
 800f90a:	e178      	b.n	800fbfe <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f90c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f90e:	3334      	adds	r3, #52	; 0x34
 800f910:	330b      	adds	r3, #11
 800f912:	4618      	mov	r0, r3
 800f914:	f7fe fcda 	bl	800e2cc <ld_word>
 800f918:	4603      	mov	r3, r0
 800f91a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f91e:	d001      	beq.n	800f924 <find_volume+0x1b8>
 800f920:	230d      	movs	r3, #13
 800f922:	e16c      	b.n	800fbfe <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800f924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f926:	3334      	adds	r3, #52	; 0x34
 800f928:	3316      	adds	r3, #22
 800f92a:	4618      	mov	r0, r3
 800f92c:	f7fe fcce 	bl	800e2cc <ld_word>
 800f930:	4603      	mov	r3, r0
 800f932:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800f934:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f936:	2b00      	cmp	r3, #0
 800f938:	d106      	bne.n	800f948 <find_volume+0x1dc>
 800f93a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f93c:	3334      	adds	r3, #52	; 0x34
 800f93e:	3324      	adds	r3, #36	; 0x24
 800f940:	4618      	mov	r0, r3
 800f942:	f7fe fcdb 	bl	800e2fc <ld_dword>
 800f946:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800f948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f94a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f94c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800f94e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f950:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800f954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f956:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800f958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f95a:	789b      	ldrb	r3, [r3, #2]
 800f95c:	2b01      	cmp	r3, #1
 800f95e:	d005      	beq.n	800f96c <find_volume+0x200>
 800f960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f962:	789b      	ldrb	r3, [r3, #2]
 800f964:	2b02      	cmp	r3, #2
 800f966:	d001      	beq.n	800f96c <find_volume+0x200>
 800f968:	230d      	movs	r3, #13
 800f96a:	e148      	b.n	800fbfe <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800f96c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f96e:	789b      	ldrb	r3, [r3, #2]
 800f970:	461a      	mov	r2, r3
 800f972:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f974:	fb02 f303 	mul.w	r3, r2, r3
 800f978:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800f97a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f97c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f980:	b29a      	uxth	r2, r3
 800f982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f984:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800f986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f988:	895b      	ldrh	r3, [r3, #10]
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d008      	beq.n	800f9a0 <find_volume+0x234>
 800f98e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f990:	895b      	ldrh	r3, [r3, #10]
 800f992:	461a      	mov	r2, r3
 800f994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f996:	895b      	ldrh	r3, [r3, #10]
 800f998:	3b01      	subs	r3, #1
 800f99a:	4013      	ands	r3, r2
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d001      	beq.n	800f9a4 <find_volume+0x238>
 800f9a0:	230d      	movs	r3, #13
 800f9a2:	e12c      	b.n	800fbfe <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800f9a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9a6:	3334      	adds	r3, #52	; 0x34
 800f9a8:	3311      	adds	r3, #17
 800f9aa:	4618      	mov	r0, r3
 800f9ac:	f7fe fc8e 	bl	800e2cc <ld_word>
 800f9b0:	4603      	mov	r3, r0
 800f9b2:	461a      	mov	r2, r3
 800f9b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9b6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f9b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9ba:	891b      	ldrh	r3, [r3, #8]
 800f9bc:	f003 030f 	and.w	r3, r3, #15
 800f9c0:	b29b      	uxth	r3, r3
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d001      	beq.n	800f9ca <find_volume+0x25e>
 800f9c6:	230d      	movs	r3, #13
 800f9c8:	e119      	b.n	800fbfe <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800f9ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9cc:	3334      	adds	r3, #52	; 0x34
 800f9ce:	3313      	adds	r3, #19
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	f7fe fc7b 	bl	800e2cc <ld_word>
 800f9d6:	4603      	mov	r3, r0
 800f9d8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800f9da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d106      	bne.n	800f9ee <find_volume+0x282>
 800f9e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9e2:	3334      	adds	r3, #52	; 0x34
 800f9e4:	3320      	adds	r3, #32
 800f9e6:	4618      	mov	r0, r3
 800f9e8:	f7fe fc88 	bl	800e2fc <ld_dword>
 800f9ec:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800f9ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9f0:	3334      	adds	r3, #52	; 0x34
 800f9f2:	330e      	adds	r3, #14
 800f9f4:	4618      	mov	r0, r3
 800f9f6:	f7fe fc69 	bl	800e2cc <ld_word>
 800f9fa:	4603      	mov	r3, r0
 800f9fc:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800f9fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d101      	bne.n	800fa08 <find_volume+0x29c>
 800fa04:	230d      	movs	r3, #13
 800fa06:	e0fa      	b.n	800fbfe <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800fa08:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fa0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fa0c:	4413      	add	r3, r2
 800fa0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fa10:	8912      	ldrh	r2, [r2, #8]
 800fa12:	0912      	lsrs	r2, r2, #4
 800fa14:	b292      	uxth	r2, r2
 800fa16:	4413      	add	r3, r2
 800fa18:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800fa1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fa1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa1e:	429a      	cmp	r2, r3
 800fa20:	d204      	bcs.n	800fa2c <find_volume+0x2c0>
 800fa22:	230d      	movs	r3, #13
 800fa24:	e0eb      	b.n	800fbfe <find_volume+0x492>
 800fa26:	bf00      	nop
 800fa28:	200011a0 	.word	0x200011a0
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800fa2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fa2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa30:	1ad3      	subs	r3, r2, r3
 800fa32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fa34:	8952      	ldrh	r2, [r2, #10]
 800fa36:	fbb3 f3f2 	udiv	r3, r3, r2
 800fa3a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800fa3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d101      	bne.n	800fa46 <find_volume+0x2da>
 800fa42:	230d      	movs	r3, #13
 800fa44:	e0db      	b.n	800fbfe <find_volume+0x492>
		fmt = FS_FAT32;
 800fa46:	2303      	movs	r3, #3
 800fa48:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800fa4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa4e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800fa52:	4293      	cmp	r3, r2
 800fa54:	d802      	bhi.n	800fa5c <find_volume+0x2f0>
 800fa56:	2302      	movs	r3, #2
 800fa58:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800fa5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa5e:	f640 72f5 	movw	r2, #4085	; 0xff5
 800fa62:	4293      	cmp	r3, r2
 800fa64:	d802      	bhi.n	800fa6c <find_volume+0x300>
 800fa66:	2301      	movs	r3, #1
 800fa68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800fa6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa6e:	1c9a      	adds	r2, r3, #2
 800fa70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa72:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800fa74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa76:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fa78:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800fa7a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fa7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa7e:	441a      	add	r2, r3
 800fa80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa82:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800fa84:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fa86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa88:	441a      	add	r2, r3
 800fa8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa8c:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800fa8e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fa92:	2b03      	cmp	r3, #3
 800fa94:	d11e      	bne.n	800fad4 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800fa96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa98:	3334      	adds	r3, #52	; 0x34
 800fa9a:	332a      	adds	r3, #42	; 0x2a
 800fa9c:	4618      	mov	r0, r3
 800fa9e:	f7fe fc15 	bl	800e2cc <ld_word>
 800faa2:	4603      	mov	r3, r0
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d001      	beq.n	800faac <find_volume+0x340>
 800faa8:	230d      	movs	r3, #13
 800faaa:	e0a8      	b.n	800fbfe <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800faac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faae:	891b      	ldrh	r3, [r3, #8]
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d001      	beq.n	800fab8 <find_volume+0x34c>
 800fab4:	230d      	movs	r3, #13
 800fab6:	e0a2      	b.n	800fbfe <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800fab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faba:	3334      	adds	r3, #52	; 0x34
 800fabc:	332c      	adds	r3, #44	; 0x2c
 800fabe:	4618      	mov	r0, r3
 800fac0:	f7fe fc1c 	bl	800e2fc <ld_dword>
 800fac4:	4602      	mov	r2, r0
 800fac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fac8:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800faca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800facc:	699b      	ldr	r3, [r3, #24]
 800face:	009b      	lsls	r3, r3, #2
 800fad0:	647b      	str	r3, [r7, #68]	; 0x44
 800fad2:	e01f      	b.n	800fb14 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800fad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fad6:	891b      	ldrh	r3, [r3, #8]
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d101      	bne.n	800fae0 <find_volume+0x374>
 800fadc:	230d      	movs	r3, #13
 800fade:	e08e      	b.n	800fbfe <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800fae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fae2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fae4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fae6:	441a      	add	r2, r3
 800fae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faea:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800faec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800faf0:	2b02      	cmp	r3, #2
 800faf2:	d103      	bne.n	800fafc <find_volume+0x390>
 800faf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faf6:	699b      	ldr	r3, [r3, #24]
 800faf8:	005b      	lsls	r3, r3, #1
 800fafa:	e00a      	b.n	800fb12 <find_volume+0x3a6>
 800fafc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fafe:	699a      	ldr	r2, [r3, #24]
 800fb00:	4613      	mov	r3, r2
 800fb02:	005b      	lsls	r3, r3, #1
 800fb04:	4413      	add	r3, r2
 800fb06:	085a      	lsrs	r2, r3, #1
 800fb08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb0a:	699b      	ldr	r3, [r3, #24]
 800fb0c:	f003 0301 	and.w	r3, r3, #1
 800fb10:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800fb12:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800fb14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb16:	69da      	ldr	r2, [r3, #28]
 800fb18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fb1a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800fb1e:	0a5b      	lsrs	r3, r3, #9
 800fb20:	429a      	cmp	r2, r3
 800fb22:	d201      	bcs.n	800fb28 <find_volume+0x3bc>
 800fb24:	230d      	movs	r3, #13
 800fb26:	e06a      	b.n	800fbfe <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800fb28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb2a:	f04f 32ff 	mov.w	r2, #4294967295
 800fb2e:	615a      	str	r2, [r3, #20]
 800fb30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb32:	695a      	ldr	r2, [r3, #20]
 800fb34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb36:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800fb38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb3a:	2280      	movs	r2, #128	; 0x80
 800fb3c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800fb3e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fb42:	2b03      	cmp	r3, #3
 800fb44:	d149      	bne.n	800fbda <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800fb46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb48:	3334      	adds	r3, #52	; 0x34
 800fb4a:	3330      	adds	r3, #48	; 0x30
 800fb4c:	4618      	mov	r0, r3
 800fb4e:	f7fe fbbd 	bl	800e2cc <ld_word>
 800fb52:	4603      	mov	r3, r0
 800fb54:	2b01      	cmp	r3, #1
 800fb56:	d140      	bne.n	800fbda <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800fb58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb5a:	3301      	adds	r3, #1
 800fb5c:	4619      	mov	r1, r3
 800fb5e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fb60:	f7fe fe96 	bl	800e890 <move_window>
 800fb64:	4603      	mov	r3, r0
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d137      	bne.n	800fbda <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 800fb6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb6c:	2200      	movs	r2, #0
 800fb6e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800fb70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb72:	3334      	adds	r3, #52	; 0x34
 800fb74:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fb78:	4618      	mov	r0, r3
 800fb7a:	f7fe fba7 	bl	800e2cc <ld_word>
 800fb7e:	4603      	mov	r3, r0
 800fb80:	461a      	mov	r2, r3
 800fb82:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800fb86:	429a      	cmp	r2, r3
 800fb88:	d127      	bne.n	800fbda <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800fb8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb8c:	3334      	adds	r3, #52	; 0x34
 800fb8e:	4618      	mov	r0, r3
 800fb90:	f7fe fbb4 	bl	800e2fc <ld_dword>
 800fb94:	4603      	mov	r3, r0
 800fb96:	4a1c      	ldr	r2, [pc, #112]	; (800fc08 <find_volume+0x49c>)
 800fb98:	4293      	cmp	r3, r2
 800fb9a:	d11e      	bne.n	800fbda <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800fb9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb9e:	3334      	adds	r3, #52	; 0x34
 800fba0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800fba4:	4618      	mov	r0, r3
 800fba6:	f7fe fba9 	bl	800e2fc <ld_dword>
 800fbaa:	4603      	mov	r3, r0
 800fbac:	4a17      	ldr	r2, [pc, #92]	; (800fc0c <find_volume+0x4a0>)
 800fbae:	4293      	cmp	r3, r2
 800fbb0:	d113      	bne.n	800fbda <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800fbb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbb4:	3334      	adds	r3, #52	; 0x34
 800fbb6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800fbba:	4618      	mov	r0, r3
 800fbbc:	f7fe fb9e 	bl	800e2fc <ld_dword>
 800fbc0:	4602      	mov	r2, r0
 800fbc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbc4:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800fbc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbc8:	3334      	adds	r3, #52	; 0x34
 800fbca:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800fbce:	4618      	mov	r0, r3
 800fbd0:	f7fe fb94 	bl	800e2fc <ld_dword>
 800fbd4:	4602      	mov	r2, r0
 800fbd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbd8:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800fbda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbdc:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800fbe0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800fbe2:	4b0b      	ldr	r3, [pc, #44]	; (800fc10 <find_volume+0x4a4>)
 800fbe4:	881b      	ldrh	r3, [r3, #0]
 800fbe6:	3301      	adds	r3, #1
 800fbe8:	b29a      	uxth	r2, r3
 800fbea:	4b09      	ldr	r3, [pc, #36]	; (800fc10 <find_volume+0x4a4>)
 800fbec:	801a      	strh	r2, [r3, #0]
 800fbee:	4b08      	ldr	r3, [pc, #32]	; (800fc10 <find_volume+0x4a4>)
 800fbf0:	881a      	ldrh	r2, [r3, #0]
 800fbf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbf4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800fbf6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fbf8:	f7fe fde2 	bl	800e7c0 <clear_lock>
#endif
	return FR_OK;
 800fbfc:	2300      	movs	r3, #0
}
 800fbfe:	4618      	mov	r0, r3
 800fc00:	3758      	adds	r7, #88	; 0x58
 800fc02:	46bd      	mov	sp, r7
 800fc04:	bd80      	pop	{r7, pc}
 800fc06:	bf00      	nop
 800fc08:	41615252 	.word	0x41615252
 800fc0c:	61417272 	.word	0x61417272
 800fc10:	200011a4 	.word	0x200011a4

0800fc14 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800fc14:	b580      	push	{r7, lr}
 800fc16:	b084      	sub	sp, #16
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	6078      	str	r0, [r7, #4]
 800fc1c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800fc1e:	2309      	movs	r3, #9
 800fc20:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d02e      	beq.n	800fc86 <validate+0x72>
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d02a      	beq.n	800fc86 <validate+0x72>
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	781b      	ldrb	r3, [r3, #0]
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d025      	beq.n	800fc86 <validate+0x72>
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	889a      	ldrh	r2, [r3, #4]
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	88db      	ldrh	r3, [r3, #6]
 800fc44:	429a      	cmp	r2, r3
 800fc46:	d11e      	bne.n	800fc86 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	4618      	mov	r0, r3
 800fc4e:	f7fe fc3d 	bl	800e4cc <lock_fs>
 800fc52:	4603      	mov	r3, r0
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d014      	beq.n	800fc82 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	785b      	ldrb	r3, [r3, #1]
 800fc5e:	4618      	mov	r0, r3
 800fc60:	f7fe fa96 	bl	800e190 <disk_status>
 800fc64:	4603      	mov	r3, r0
 800fc66:	f003 0301 	and.w	r3, r3, #1
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d102      	bne.n	800fc74 <validate+0x60>
				res = FR_OK;
 800fc6e:	2300      	movs	r3, #0
 800fc70:	73fb      	strb	r3, [r7, #15]
 800fc72:	e008      	b.n	800fc86 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	2100      	movs	r1, #0
 800fc7a:	4618      	mov	r0, r3
 800fc7c:	f7fe fc3c 	bl	800e4f8 <unlock_fs>
 800fc80:	e001      	b.n	800fc86 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800fc82:	230f      	movs	r3, #15
 800fc84:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800fc86:	7bfb      	ldrb	r3, [r7, #15]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d102      	bne.n	800fc92 <validate+0x7e>
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	e000      	b.n	800fc94 <validate+0x80>
 800fc92:	2300      	movs	r3, #0
 800fc94:	683a      	ldr	r2, [r7, #0]
 800fc96:	6013      	str	r3, [r2, #0]
	return res;
 800fc98:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc9a:	4618      	mov	r0, r3
 800fc9c:	3710      	adds	r7, #16
 800fc9e:	46bd      	mov	sp, r7
 800fca0:	bd80      	pop	{r7, pc}
	...

0800fca4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800fca4:	b580      	push	{r7, lr}
 800fca6:	b088      	sub	sp, #32
 800fca8:	af00      	add	r7, sp, #0
 800fcaa:	60f8      	str	r0, [r7, #12]
 800fcac:	60b9      	str	r1, [r7, #8]
 800fcae:	4613      	mov	r3, r2
 800fcb0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800fcb2:	68bb      	ldr	r3, [r7, #8]
 800fcb4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800fcb6:	f107 0310 	add.w	r3, r7, #16
 800fcba:	4618      	mov	r0, r3
 800fcbc:	f7ff fcbb 	bl	800f636 <get_ldnumber>
 800fcc0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800fcc2:	69fb      	ldr	r3, [r7, #28]
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	da01      	bge.n	800fccc <f_mount+0x28>
 800fcc8:	230b      	movs	r3, #11
 800fcca:	e048      	b.n	800fd5e <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800fccc:	4a26      	ldr	r2, [pc, #152]	; (800fd68 <f_mount+0xc4>)
 800fcce:	69fb      	ldr	r3, [r7, #28]
 800fcd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fcd4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800fcd6:	69bb      	ldr	r3, [r7, #24]
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d00f      	beq.n	800fcfc <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800fcdc:	69b8      	ldr	r0, [r7, #24]
 800fcde:	f7fe fd6f 	bl	800e7c0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800fce2:	69bb      	ldr	r3, [r7, #24]
 800fce4:	68db      	ldr	r3, [r3, #12]
 800fce6:	4618      	mov	r0, r3
 800fce8:	f000 fef9 	bl	8010ade <ff_del_syncobj>
 800fcec:	4603      	mov	r3, r0
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d101      	bne.n	800fcf6 <f_mount+0x52>
 800fcf2:	2302      	movs	r3, #2
 800fcf4:	e033      	b.n	800fd5e <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800fcf6:	69bb      	ldr	r3, [r7, #24]
 800fcf8:	2200      	movs	r2, #0
 800fcfa:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d00f      	beq.n	800fd22 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	2200      	movs	r2, #0
 800fd06:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800fd08:	69fb      	ldr	r3, [r7, #28]
 800fd0a:	b2da      	uxtb	r2, r3
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	330c      	adds	r3, #12
 800fd10:	4619      	mov	r1, r3
 800fd12:	4610      	mov	r0, r2
 800fd14:	f000 fec3 	bl	8010a9e <ff_cre_syncobj>
 800fd18:	4603      	mov	r3, r0
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d101      	bne.n	800fd22 <f_mount+0x7e>
 800fd1e:	2302      	movs	r3, #2
 800fd20:	e01d      	b.n	800fd5e <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800fd22:	68fa      	ldr	r2, [r7, #12]
 800fd24:	4910      	ldr	r1, [pc, #64]	; (800fd68 <f_mount+0xc4>)
 800fd26:	69fb      	ldr	r3, [r7, #28]
 800fd28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d002      	beq.n	800fd38 <f_mount+0x94>
 800fd32:	79fb      	ldrb	r3, [r7, #7]
 800fd34:	2b01      	cmp	r3, #1
 800fd36:	d001      	beq.n	800fd3c <f_mount+0x98>
 800fd38:	2300      	movs	r3, #0
 800fd3a:	e010      	b.n	800fd5e <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800fd3c:	f107 010c 	add.w	r1, r7, #12
 800fd40:	f107 0308 	add.w	r3, r7, #8
 800fd44:	2200      	movs	r2, #0
 800fd46:	4618      	mov	r0, r3
 800fd48:	f7ff fd10 	bl	800f76c <find_volume>
 800fd4c:	4603      	mov	r3, r0
 800fd4e:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	7dfa      	ldrb	r2, [r7, #23]
 800fd54:	4611      	mov	r1, r2
 800fd56:	4618      	mov	r0, r3
 800fd58:	f7fe fbce 	bl	800e4f8 <unlock_fs>
 800fd5c:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd5e:	4618      	mov	r0, r3
 800fd60:	3720      	adds	r7, #32
 800fd62:	46bd      	mov	sp, r7
 800fd64:	bd80      	pop	{r7, pc}
 800fd66:	bf00      	nop
 800fd68:	200011a0 	.word	0x200011a0

0800fd6c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800fd6c:	b580      	push	{r7, lr}
 800fd6e:	b098      	sub	sp, #96	; 0x60
 800fd70:	af00      	add	r7, sp, #0
 800fd72:	60f8      	str	r0, [r7, #12]
 800fd74:	60b9      	str	r1, [r7, #8]
 800fd76:	4613      	mov	r3, r2
 800fd78:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d101      	bne.n	800fd84 <f_open+0x18>
 800fd80:	2309      	movs	r3, #9
 800fd82:	e1b4      	b.n	80100ee <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800fd84:	79fb      	ldrb	r3, [r7, #7]
 800fd86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fd8a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800fd8c:	79fa      	ldrb	r2, [r7, #7]
 800fd8e:	f107 0110 	add.w	r1, r7, #16
 800fd92:	f107 0308 	add.w	r3, r7, #8
 800fd96:	4618      	mov	r0, r3
 800fd98:	f7ff fce8 	bl	800f76c <find_volume>
 800fd9c:	4603      	mov	r3, r0
 800fd9e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800fda2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	f040 8191 	bne.w	80100ce <f_open+0x362>
		dj.obj.fs = fs;
 800fdac:	693b      	ldr	r3, [r7, #16]
 800fdae:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800fdb0:	68ba      	ldr	r2, [r7, #8]
 800fdb2:	f107 0314 	add.w	r3, r7, #20
 800fdb6:	4611      	mov	r1, r2
 800fdb8:	4618      	mov	r0, r3
 800fdba:	f7ff fbcb 	bl	800f554 <follow_path>
 800fdbe:	4603      	mov	r3, r0
 800fdc0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800fdc4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d11a      	bne.n	800fe02 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800fdcc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fdd0:	b25b      	sxtb	r3, r3
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	da03      	bge.n	800fdde <f_open+0x72>
				res = FR_INVALID_NAME;
 800fdd6:	2306      	movs	r3, #6
 800fdd8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800fddc:	e011      	b.n	800fe02 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fdde:	79fb      	ldrb	r3, [r7, #7]
 800fde0:	f023 0301 	bic.w	r3, r3, #1
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	bf14      	ite	ne
 800fde8:	2301      	movne	r3, #1
 800fdea:	2300      	moveq	r3, #0
 800fdec:	b2db      	uxtb	r3, r3
 800fdee:	461a      	mov	r2, r3
 800fdf0:	f107 0314 	add.w	r3, r7, #20
 800fdf4:	4611      	mov	r1, r2
 800fdf6:	4618      	mov	r0, r3
 800fdf8:	f7fe fb9a 	bl	800e530 <chk_lock>
 800fdfc:	4603      	mov	r3, r0
 800fdfe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800fe02:	79fb      	ldrb	r3, [r7, #7]
 800fe04:	f003 031c 	and.w	r3, r3, #28
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d07f      	beq.n	800ff0c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800fe0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d017      	beq.n	800fe44 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800fe14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fe18:	2b04      	cmp	r3, #4
 800fe1a:	d10e      	bne.n	800fe3a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800fe1c:	f7fe fbe4 	bl	800e5e8 <enq_lock>
 800fe20:	4603      	mov	r3, r0
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d006      	beq.n	800fe34 <f_open+0xc8>
 800fe26:	f107 0314 	add.w	r3, r7, #20
 800fe2a:	4618      	mov	r0, r3
 800fe2c:	f7ff facb 	bl	800f3c6 <dir_register>
 800fe30:	4603      	mov	r3, r0
 800fe32:	e000      	b.n	800fe36 <f_open+0xca>
 800fe34:	2312      	movs	r3, #18
 800fe36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800fe3a:	79fb      	ldrb	r3, [r7, #7]
 800fe3c:	f043 0308 	orr.w	r3, r3, #8
 800fe40:	71fb      	strb	r3, [r7, #7]
 800fe42:	e010      	b.n	800fe66 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800fe44:	7ebb      	ldrb	r3, [r7, #26]
 800fe46:	f003 0311 	and.w	r3, r3, #17
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d003      	beq.n	800fe56 <f_open+0xea>
					res = FR_DENIED;
 800fe4e:	2307      	movs	r3, #7
 800fe50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800fe54:	e007      	b.n	800fe66 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800fe56:	79fb      	ldrb	r3, [r7, #7]
 800fe58:	f003 0304 	and.w	r3, r3, #4
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d002      	beq.n	800fe66 <f_open+0xfa>
 800fe60:	2308      	movs	r3, #8
 800fe62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800fe66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d168      	bne.n	800ff40 <f_open+0x1d4>
 800fe6e:	79fb      	ldrb	r3, [r7, #7]
 800fe70:	f003 0308 	and.w	r3, r3, #8
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d063      	beq.n	800ff40 <f_open+0x1d4>
				dw = GET_FATTIME();
 800fe78:	f7fd ff28 	bl	800dccc <get_fattime>
 800fe7c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800fe7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe80:	330e      	adds	r3, #14
 800fe82:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fe84:	4618      	mov	r0, r3
 800fe86:	f7fe fa77 	bl	800e378 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800fe8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe8c:	3316      	adds	r3, #22
 800fe8e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fe90:	4618      	mov	r0, r3
 800fe92:	f7fe fa71 	bl	800e378 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800fe96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe98:	330b      	adds	r3, #11
 800fe9a:	2220      	movs	r2, #32
 800fe9c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800fe9e:	693b      	ldr	r3, [r7, #16]
 800fea0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fea2:	4611      	mov	r1, r2
 800fea4:	4618      	mov	r0, r3
 800fea6:	f7ff f9fa 	bl	800f29e <ld_clust>
 800feaa:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800feac:	693b      	ldr	r3, [r7, #16]
 800feae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800feb0:	2200      	movs	r2, #0
 800feb2:	4618      	mov	r0, r3
 800feb4:	f7ff fa12 	bl	800f2dc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800feb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800feba:	331c      	adds	r3, #28
 800febc:	2100      	movs	r1, #0
 800febe:	4618      	mov	r0, r3
 800fec0:	f7fe fa5a 	bl	800e378 <st_dword>
					fs->wflag = 1;
 800fec4:	693b      	ldr	r3, [r7, #16]
 800fec6:	2201      	movs	r2, #1
 800fec8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800feca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d037      	beq.n	800ff40 <f_open+0x1d4>
						dw = fs->winsect;
 800fed0:	693b      	ldr	r3, [r7, #16]
 800fed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fed4:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800fed6:	f107 0314 	add.w	r3, r7, #20
 800feda:	2200      	movs	r2, #0
 800fedc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800fede:	4618      	mov	r0, r3
 800fee0:	f7fe ff25 	bl	800ed2e <remove_chain>
 800fee4:	4603      	mov	r3, r0
 800fee6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800feea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d126      	bne.n	800ff40 <f_open+0x1d4>
							res = move_window(fs, dw);
 800fef2:	693b      	ldr	r3, [r7, #16]
 800fef4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fef6:	4618      	mov	r0, r3
 800fef8:	f7fe fcca 	bl	800e890 <move_window>
 800fefc:	4603      	mov	r3, r0
 800fefe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ff02:	693b      	ldr	r3, [r7, #16]
 800ff04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ff06:	3a01      	subs	r2, #1
 800ff08:	611a      	str	r2, [r3, #16]
 800ff0a:	e019      	b.n	800ff40 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ff0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d115      	bne.n	800ff40 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ff14:	7ebb      	ldrb	r3, [r7, #26]
 800ff16:	f003 0310 	and.w	r3, r3, #16
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d003      	beq.n	800ff26 <f_open+0x1ba>
					res = FR_NO_FILE;
 800ff1e:	2304      	movs	r3, #4
 800ff20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ff24:	e00c      	b.n	800ff40 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800ff26:	79fb      	ldrb	r3, [r7, #7]
 800ff28:	f003 0302 	and.w	r3, r3, #2
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d007      	beq.n	800ff40 <f_open+0x1d4>
 800ff30:	7ebb      	ldrb	r3, [r7, #26]
 800ff32:	f003 0301 	and.w	r3, r3, #1
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d002      	beq.n	800ff40 <f_open+0x1d4>
						res = FR_DENIED;
 800ff3a:	2307      	movs	r3, #7
 800ff3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800ff40:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d128      	bne.n	800ff9a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ff48:	79fb      	ldrb	r3, [r7, #7]
 800ff4a:	f003 0308 	and.w	r3, r3, #8
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d003      	beq.n	800ff5a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800ff52:	79fb      	ldrb	r3, [r7, #7]
 800ff54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ff58:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ff5a:	693b      	ldr	r3, [r7, #16]
 800ff5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800ff62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ff68:	79fb      	ldrb	r3, [r7, #7]
 800ff6a:	f023 0301 	bic.w	r3, r3, #1
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	bf14      	ite	ne
 800ff72:	2301      	movne	r3, #1
 800ff74:	2300      	moveq	r3, #0
 800ff76:	b2db      	uxtb	r3, r3
 800ff78:	461a      	mov	r2, r3
 800ff7a:	f107 0314 	add.w	r3, r7, #20
 800ff7e:	4611      	mov	r1, r2
 800ff80:	4618      	mov	r0, r3
 800ff82:	f7fe fb53 	bl	800e62c <inc_lock>
 800ff86:	4602      	mov	r2, r0
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	691b      	ldr	r3, [r3, #16]
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d102      	bne.n	800ff9a <f_open+0x22e>
 800ff94:	2302      	movs	r3, #2
 800ff96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800ff9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	f040 8095 	bne.w	80100ce <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ffa4:	693b      	ldr	r3, [r7, #16]
 800ffa6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ffa8:	4611      	mov	r1, r2
 800ffaa:	4618      	mov	r0, r3
 800ffac:	f7ff f977 	bl	800f29e <ld_clust>
 800ffb0:	4602      	mov	r2, r0
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ffb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffb8:	331c      	adds	r3, #28
 800ffba:	4618      	mov	r0, r3
 800ffbc:	f7fe f99e 	bl	800e2fc <ld_dword>
 800ffc0:	4602      	mov	r2, r0
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	2200      	movs	r2, #0
 800ffca:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ffcc:	693a      	ldr	r2, [r7, #16]
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ffd2:	693b      	ldr	r3, [r7, #16]
 800ffd4:	88da      	ldrh	r2, [r3, #6]
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	79fa      	ldrb	r2, [r7, #7]
 800ffde:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	2200      	movs	r2, #0
 800ffe4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	2200      	movs	r2, #0
 800ffea:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	2200      	movs	r2, #0
 800fff0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	3330      	adds	r3, #48	; 0x30
 800fff6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fffa:	2100      	movs	r1, #0
 800fffc:	4618      	mov	r0, r3
 800fffe:	f7fe fa08 	bl	800e412 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8010002:	79fb      	ldrb	r3, [r7, #7]
 8010004:	f003 0320 	and.w	r3, r3, #32
 8010008:	2b00      	cmp	r3, #0
 801000a:	d060      	beq.n	80100ce <f_open+0x362>
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	68db      	ldr	r3, [r3, #12]
 8010010:	2b00      	cmp	r3, #0
 8010012:	d05c      	beq.n	80100ce <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	68da      	ldr	r2, [r3, #12]
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801001c:	693b      	ldr	r3, [r7, #16]
 801001e:	895b      	ldrh	r3, [r3, #10]
 8010020:	025b      	lsls	r3, r3, #9
 8010022:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	689b      	ldr	r3, [r3, #8]
 8010028:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	68db      	ldr	r3, [r3, #12]
 801002e:	657b      	str	r3, [r7, #84]	; 0x54
 8010030:	e016      	b.n	8010060 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010036:	4618      	mov	r0, r3
 8010038:	f7fe fce5 	bl	800ea06 <get_fat>
 801003c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 801003e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010040:	2b01      	cmp	r3, #1
 8010042:	d802      	bhi.n	801004a <f_open+0x2de>
 8010044:	2302      	movs	r3, #2
 8010046:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801004a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801004c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010050:	d102      	bne.n	8010058 <f_open+0x2ec>
 8010052:	2301      	movs	r3, #1
 8010054:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010058:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801005a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801005c:	1ad3      	subs	r3, r2, r3
 801005e:	657b      	str	r3, [r7, #84]	; 0x54
 8010060:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010064:	2b00      	cmp	r3, #0
 8010066:	d103      	bne.n	8010070 <f_open+0x304>
 8010068:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801006a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801006c:	429a      	cmp	r2, r3
 801006e:	d8e0      	bhi.n	8010032 <f_open+0x2c6>
				}
				fp->clust = clst;
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010074:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8010076:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801007a:	2b00      	cmp	r3, #0
 801007c:	d127      	bne.n	80100ce <f_open+0x362>
 801007e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010080:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010084:	2b00      	cmp	r3, #0
 8010086:	d022      	beq.n	80100ce <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8010088:	693b      	ldr	r3, [r7, #16]
 801008a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801008c:	4618      	mov	r0, r3
 801008e:	f7fe fc9b 	bl	800e9c8 <clust2sect>
 8010092:	6478      	str	r0, [r7, #68]	; 0x44
 8010094:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010096:	2b00      	cmp	r3, #0
 8010098:	d103      	bne.n	80100a2 <f_open+0x336>
						res = FR_INT_ERR;
 801009a:	2302      	movs	r3, #2
 801009c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80100a0:	e015      	b.n	80100ce <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80100a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80100a4:	0a5a      	lsrs	r2, r3, #9
 80100a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80100a8:	441a      	add	r2, r3
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80100ae:	693b      	ldr	r3, [r7, #16]
 80100b0:	7858      	ldrb	r0, [r3, #1]
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	6a1a      	ldr	r2, [r3, #32]
 80100bc:	2301      	movs	r3, #1
 80100be:	f7fe f8a7 	bl	800e210 <disk_read>
 80100c2:	4603      	mov	r3, r0
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d002      	beq.n	80100ce <f_open+0x362>
 80100c8:	2301      	movs	r3, #1
 80100ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80100ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d002      	beq.n	80100dc <f_open+0x370>
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	2200      	movs	r2, #0
 80100da:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80100dc:	693b      	ldr	r3, [r7, #16]
 80100de:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80100e2:	4611      	mov	r1, r2
 80100e4:	4618      	mov	r0, r3
 80100e6:	f7fe fa07 	bl	800e4f8 <unlock_fs>
 80100ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80100ee:	4618      	mov	r0, r3
 80100f0:	3760      	adds	r7, #96	; 0x60
 80100f2:	46bd      	mov	sp, r7
 80100f4:	bd80      	pop	{r7, pc}

080100f6 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80100f6:	b580      	push	{r7, lr}
 80100f8:	b08e      	sub	sp, #56	; 0x38
 80100fa:	af00      	add	r7, sp, #0
 80100fc:	60f8      	str	r0, [r7, #12]
 80100fe:	60b9      	str	r1, [r7, #8]
 8010100:	607a      	str	r2, [r7, #4]
 8010102:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8010104:	68bb      	ldr	r3, [r7, #8]
 8010106:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8010108:	683b      	ldr	r3, [r7, #0]
 801010a:	2200      	movs	r2, #0
 801010c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	f107 0214 	add.w	r2, r7, #20
 8010114:	4611      	mov	r1, r2
 8010116:	4618      	mov	r0, r3
 8010118:	f7ff fd7c 	bl	800fc14 <validate>
 801011c:	4603      	mov	r3, r0
 801011e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010122:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010126:	2b00      	cmp	r3, #0
 8010128:	d107      	bne.n	801013a <f_read+0x44>
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	7d5b      	ldrb	r3, [r3, #21]
 801012e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010132:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010136:	2b00      	cmp	r3, #0
 8010138:	d009      	beq.n	801014e <f_read+0x58>
 801013a:	697b      	ldr	r3, [r7, #20]
 801013c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8010140:	4611      	mov	r1, r2
 8010142:	4618      	mov	r0, r3
 8010144:	f7fe f9d8 	bl	800e4f8 <unlock_fs>
 8010148:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801014c:	e13d      	b.n	80103ca <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	7d1b      	ldrb	r3, [r3, #20]
 8010152:	f003 0301 	and.w	r3, r3, #1
 8010156:	2b00      	cmp	r3, #0
 8010158:	d106      	bne.n	8010168 <f_read+0x72>
 801015a:	697b      	ldr	r3, [r7, #20]
 801015c:	2107      	movs	r1, #7
 801015e:	4618      	mov	r0, r3
 8010160:	f7fe f9ca 	bl	800e4f8 <unlock_fs>
 8010164:	2307      	movs	r3, #7
 8010166:	e130      	b.n	80103ca <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	68da      	ldr	r2, [r3, #12]
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	699b      	ldr	r3, [r3, #24]
 8010170:	1ad3      	subs	r3, r2, r3
 8010172:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8010174:	687a      	ldr	r2, [r7, #4]
 8010176:	6a3b      	ldr	r3, [r7, #32]
 8010178:	429a      	cmp	r2, r3
 801017a:	f240 811c 	bls.w	80103b6 <f_read+0x2c0>
 801017e:	6a3b      	ldr	r3, [r7, #32]
 8010180:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8010182:	e118      	b.n	80103b6 <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	699b      	ldr	r3, [r3, #24]
 8010188:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801018c:	2b00      	cmp	r3, #0
 801018e:	f040 80e4 	bne.w	801035a <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	699b      	ldr	r3, [r3, #24]
 8010196:	0a5b      	lsrs	r3, r3, #9
 8010198:	697a      	ldr	r2, [r7, #20]
 801019a:	8952      	ldrh	r2, [r2, #10]
 801019c:	3a01      	subs	r2, #1
 801019e:	4013      	ands	r3, r2
 80101a0:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80101a2:	69fb      	ldr	r3, [r7, #28]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d139      	bne.n	801021c <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	699b      	ldr	r3, [r3, #24]
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d103      	bne.n	80101b8 <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	689b      	ldr	r3, [r3, #8]
 80101b4:	633b      	str	r3, [r7, #48]	; 0x30
 80101b6:	e013      	b.n	80101e0 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d007      	beq.n	80101d0 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	699b      	ldr	r3, [r3, #24]
 80101c4:	4619      	mov	r1, r3
 80101c6:	68f8      	ldr	r0, [r7, #12]
 80101c8:	f7fe feae 	bl	800ef28 <clmt_clust>
 80101cc:	6338      	str	r0, [r7, #48]	; 0x30
 80101ce:	e007      	b.n	80101e0 <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80101d0:	68fa      	ldr	r2, [r7, #12]
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	69db      	ldr	r3, [r3, #28]
 80101d6:	4619      	mov	r1, r3
 80101d8:	4610      	mov	r0, r2
 80101da:	f7fe fc14 	bl	800ea06 <get_fat>
 80101de:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80101e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101e2:	2b01      	cmp	r3, #1
 80101e4:	d809      	bhi.n	80101fa <f_read+0x104>
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	2202      	movs	r2, #2
 80101ea:	755a      	strb	r2, [r3, #21]
 80101ec:	697b      	ldr	r3, [r7, #20]
 80101ee:	2102      	movs	r1, #2
 80101f0:	4618      	mov	r0, r3
 80101f2:	f7fe f981 	bl	800e4f8 <unlock_fs>
 80101f6:	2302      	movs	r3, #2
 80101f8:	e0e7      	b.n	80103ca <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80101fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010200:	d109      	bne.n	8010216 <f_read+0x120>
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	2201      	movs	r2, #1
 8010206:	755a      	strb	r2, [r3, #21]
 8010208:	697b      	ldr	r3, [r7, #20]
 801020a:	2101      	movs	r1, #1
 801020c:	4618      	mov	r0, r3
 801020e:	f7fe f973 	bl	800e4f8 <unlock_fs>
 8010212:	2301      	movs	r3, #1
 8010214:	e0d9      	b.n	80103ca <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801021a:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801021c:	697a      	ldr	r2, [r7, #20]
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	69db      	ldr	r3, [r3, #28]
 8010222:	4619      	mov	r1, r3
 8010224:	4610      	mov	r0, r2
 8010226:	f7fe fbcf 	bl	800e9c8 <clust2sect>
 801022a:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801022c:	69bb      	ldr	r3, [r7, #24]
 801022e:	2b00      	cmp	r3, #0
 8010230:	d109      	bne.n	8010246 <f_read+0x150>
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	2202      	movs	r2, #2
 8010236:	755a      	strb	r2, [r3, #21]
 8010238:	697b      	ldr	r3, [r7, #20]
 801023a:	2102      	movs	r1, #2
 801023c:	4618      	mov	r0, r3
 801023e:	f7fe f95b 	bl	800e4f8 <unlock_fs>
 8010242:	2302      	movs	r3, #2
 8010244:	e0c1      	b.n	80103ca <f_read+0x2d4>
			sect += csect;
 8010246:	69ba      	ldr	r2, [r7, #24]
 8010248:	69fb      	ldr	r3, [r7, #28]
 801024a:	4413      	add	r3, r2
 801024c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	0a5b      	lsrs	r3, r3, #9
 8010252:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8010254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010256:	2b00      	cmp	r3, #0
 8010258:	d03e      	beq.n	80102d8 <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801025a:	69fa      	ldr	r2, [r7, #28]
 801025c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801025e:	4413      	add	r3, r2
 8010260:	697a      	ldr	r2, [r7, #20]
 8010262:	8952      	ldrh	r2, [r2, #10]
 8010264:	4293      	cmp	r3, r2
 8010266:	d905      	bls.n	8010274 <f_read+0x17e>
					cc = fs->csize - csect;
 8010268:	697b      	ldr	r3, [r7, #20]
 801026a:	895b      	ldrh	r3, [r3, #10]
 801026c:	461a      	mov	r2, r3
 801026e:	69fb      	ldr	r3, [r7, #28]
 8010270:	1ad3      	subs	r3, r2, r3
 8010272:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010274:	697b      	ldr	r3, [r7, #20]
 8010276:	7858      	ldrb	r0, [r3, #1]
 8010278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801027a:	69ba      	ldr	r2, [r7, #24]
 801027c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801027e:	f7fd ffc7 	bl	800e210 <disk_read>
 8010282:	4603      	mov	r3, r0
 8010284:	2b00      	cmp	r3, #0
 8010286:	d009      	beq.n	801029c <f_read+0x1a6>
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	2201      	movs	r2, #1
 801028c:	755a      	strb	r2, [r3, #21]
 801028e:	697b      	ldr	r3, [r7, #20]
 8010290:	2101      	movs	r1, #1
 8010292:	4618      	mov	r0, r3
 8010294:	f7fe f930 	bl	800e4f8 <unlock_fs>
 8010298:	2301      	movs	r3, #1
 801029a:	e096      	b.n	80103ca <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	7d1b      	ldrb	r3, [r3, #20]
 80102a0:	b25b      	sxtb	r3, r3
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	da14      	bge.n	80102d0 <f_read+0x1da>
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	6a1a      	ldr	r2, [r3, #32]
 80102aa:	69bb      	ldr	r3, [r7, #24]
 80102ac:	1ad3      	subs	r3, r2, r3
 80102ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80102b0:	429a      	cmp	r2, r3
 80102b2:	d90d      	bls.n	80102d0 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	6a1a      	ldr	r2, [r3, #32]
 80102b8:	69bb      	ldr	r3, [r7, #24]
 80102ba:	1ad3      	subs	r3, r2, r3
 80102bc:	025b      	lsls	r3, r3, #9
 80102be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80102c0:	18d0      	adds	r0, r2, r3
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	3330      	adds	r3, #48	; 0x30
 80102c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80102ca:	4619      	mov	r1, r3
 80102cc:	f7fe f880 	bl	800e3d0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80102d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102d2:	025b      	lsls	r3, r3, #9
 80102d4:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80102d6:	e05a      	b.n	801038e <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80102d8:	68fb      	ldr	r3, [r7, #12]
 80102da:	6a1b      	ldr	r3, [r3, #32]
 80102dc:	69ba      	ldr	r2, [r7, #24]
 80102de:	429a      	cmp	r2, r3
 80102e0:	d038      	beq.n	8010354 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	7d1b      	ldrb	r3, [r3, #20]
 80102e6:	b25b      	sxtb	r3, r3
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	da1d      	bge.n	8010328 <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80102ec:	697b      	ldr	r3, [r7, #20]
 80102ee:	7858      	ldrb	r0, [r3, #1]
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	6a1a      	ldr	r2, [r3, #32]
 80102fa:	2301      	movs	r3, #1
 80102fc:	f7fd ffa8 	bl	800e250 <disk_write>
 8010300:	4603      	mov	r3, r0
 8010302:	2b00      	cmp	r3, #0
 8010304:	d009      	beq.n	801031a <f_read+0x224>
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	2201      	movs	r2, #1
 801030a:	755a      	strb	r2, [r3, #21]
 801030c:	697b      	ldr	r3, [r7, #20]
 801030e:	2101      	movs	r1, #1
 8010310:	4618      	mov	r0, r3
 8010312:	f7fe f8f1 	bl	800e4f8 <unlock_fs>
 8010316:	2301      	movs	r3, #1
 8010318:	e057      	b.n	80103ca <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	7d1b      	ldrb	r3, [r3, #20]
 801031e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010322:	b2da      	uxtb	r2, r3
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8010328:	697b      	ldr	r3, [r7, #20]
 801032a:	7858      	ldrb	r0, [r3, #1]
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010332:	2301      	movs	r3, #1
 8010334:	69ba      	ldr	r2, [r7, #24]
 8010336:	f7fd ff6b 	bl	800e210 <disk_read>
 801033a:	4603      	mov	r3, r0
 801033c:	2b00      	cmp	r3, #0
 801033e:	d009      	beq.n	8010354 <f_read+0x25e>
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	2201      	movs	r2, #1
 8010344:	755a      	strb	r2, [r3, #21]
 8010346:	697b      	ldr	r3, [r7, #20]
 8010348:	2101      	movs	r1, #1
 801034a:	4618      	mov	r0, r3
 801034c:	f7fe f8d4 	bl	800e4f8 <unlock_fs>
 8010350:	2301      	movs	r3, #1
 8010352:	e03a      	b.n	80103ca <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	69ba      	ldr	r2, [r7, #24]
 8010358:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	699b      	ldr	r3, [r3, #24]
 801035e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010362:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8010366:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8010368:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	429a      	cmp	r2, r3
 801036e:	d901      	bls.n	8010374 <f_read+0x27e>
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	699b      	ldr	r3, [r3, #24]
 801037e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010382:	4413      	add	r3, r2
 8010384:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010386:	4619      	mov	r1, r3
 8010388:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801038a:	f7fe f821 	bl	800e3d0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 801038e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010392:	4413      	add	r3, r2
 8010394:	627b      	str	r3, [r7, #36]	; 0x24
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	699a      	ldr	r2, [r3, #24]
 801039a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801039c:	441a      	add	r2, r3
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	619a      	str	r2, [r3, #24]
 80103a2:	683b      	ldr	r3, [r7, #0]
 80103a4:	681a      	ldr	r2, [r3, #0]
 80103a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103a8:	441a      	add	r2, r3
 80103aa:	683b      	ldr	r3, [r7, #0]
 80103ac:	601a      	str	r2, [r3, #0]
 80103ae:	687a      	ldr	r2, [r7, #4]
 80103b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103b2:	1ad3      	subs	r3, r2, r3
 80103b4:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	f47f aee3 	bne.w	8010184 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80103be:	697b      	ldr	r3, [r7, #20]
 80103c0:	2100      	movs	r1, #0
 80103c2:	4618      	mov	r0, r3
 80103c4:	f7fe f898 	bl	800e4f8 <unlock_fs>
 80103c8:	2300      	movs	r3, #0
}
 80103ca:	4618      	mov	r0, r3
 80103cc:	3738      	adds	r7, #56	; 0x38
 80103ce:	46bd      	mov	sp, r7
 80103d0:	bd80      	pop	{r7, pc}

080103d2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80103d2:	b580      	push	{r7, lr}
 80103d4:	b086      	sub	sp, #24
 80103d6:	af00      	add	r7, sp, #0
 80103d8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	f107 0208 	add.w	r2, r7, #8
 80103e0:	4611      	mov	r1, r2
 80103e2:	4618      	mov	r0, r3
 80103e4:	f7ff fc16 	bl	800fc14 <validate>
 80103e8:	4603      	mov	r3, r0
 80103ea:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80103ec:	7dfb      	ldrb	r3, [r7, #23]
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d16d      	bne.n	80104ce <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	7d1b      	ldrb	r3, [r3, #20]
 80103f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d067      	beq.n	80104ce <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	7d1b      	ldrb	r3, [r3, #20]
 8010402:	b25b      	sxtb	r3, r3
 8010404:	2b00      	cmp	r3, #0
 8010406:	da1a      	bge.n	801043e <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8010408:	68bb      	ldr	r3, [r7, #8]
 801040a:	7858      	ldrb	r0, [r3, #1]
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	6a1a      	ldr	r2, [r3, #32]
 8010416:	2301      	movs	r3, #1
 8010418:	f7fd ff1a 	bl	800e250 <disk_write>
 801041c:	4603      	mov	r3, r0
 801041e:	2b00      	cmp	r3, #0
 8010420:	d006      	beq.n	8010430 <f_sync+0x5e>
 8010422:	68bb      	ldr	r3, [r7, #8]
 8010424:	2101      	movs	r1, #1
 8010426:	4618      	mov	r0, r3
 8010428:	f7fe f866 	bl	800e4f8 <unlock_fs>
 801042c:	2301      	movs	r3, #1
 801042e:	e055      	b.n	80104dc <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	7d1b      	ldrb	r3, [r3, #20]
 8010434:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010438:	b2da      	uxtb	r2, r3
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801043e:	f7fd fc45 	bl	800dccc <get_fattime>
 8010442:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8010444:	68ba      	ldr	r2, [r7, #8]
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801044a:	4619      	mov	r1, r3
 801044c:	4610      	mov	r0, r2
 801044e:	f7fe fa1f 	bl	800e890 <move_window>
 8010452:	4603      	mov	r3, r0
 8010454:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8010456:	7dfb      	ldrb	r3, [r7, #23]
 8010458:	2b00      	cmp	r3, #0
 801045a:	d138      	bne.n	80104ce <f_sync+0xfc>
					dir = fp->dir_ptr;
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010460:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	330b      	adds	r3, #11
 8010466:	781a      	ldrb	r2, [r3, #0]
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	330b      	adds	r3, #11
 801046c:	f042 0220 	orr.w	r2, r2, #32
 8010470:	b2d2      	uxtb	r2, r2
 8010472:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	6818      	ldr	r0, [r3, #0]
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	689b      	ldr	r3, [r3, #8]
 801047c:	461a      	mov	r2, r3
 801047e:	68f9      	ldr	r1, [r7, #12]
 8010480:	f7fe ff2c 	bl	800f2dc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	f103 021c 	add.w	r2, r3, #28
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	68db      	ldr	r3, [r3, #12]
 801048e:	4619      	mov	r1, r3
 8010490:	4610      	mov	r0, r2
 8010492:	f7fd ff71 	bl	800e378 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	3316      	adds	r3, #22
 801049a:	6939      	ldr	r1, [r7, #16]
 801049c:	4618      	mov	r0, r3
 801049e:	f7fd ff6b 	bl	800e378 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	3312      	adds	r3, #18
 80104a6:	2100      	movs	r1, #0
 80104a8:	4618      	mov	r0, r3
 80104aa:	f7fd ff4a 	bl	800e342 <st_word>
					fs->wflag = 1;
 80104ae:	68bb      	ldr	r3, [r7, #8]
 80104b0:	2201      	movs	r2, #1
 80104b2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80104b4:	68bb      	ldr	r3, [r7, #8]
 80104b6:	4618      	mov	r0, r3
 80104b8:	f7fe fa18 	bl	800e8ec <sync_fs>
 80104bc:	4603      	mov	r3, r0
 80104be:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	7d1b      	ldrb	r3, [r3, #20]
 80104c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80104c8:	b2da      	uxtb	r2, r3
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80104ce:	68bb      	ldr	r3, [r7, #8]
 80104d0:	7dfa      	ldrb	r2, [r7, #23]
 80104d2:	4611      	mov	r1, r2
 80104d4:	4618      	mov	r0, r3
 80104d6:	f7fe f80f 	bl	800e4f8 <unlock_fs>
 80104da:	7dfb      	ldrb	r3, [r7, #23]
}
 80104dc:	4618      	mov	r0, r3
 80104de:	3718      	adds	r7, #24
 80104e0:	46bd      	mov	sp, r7
 80104e2:	bd80      	pop	{r7, pc}

080104e4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80104e4:	b580      	push	{r7, lr}
 80104e6:	b084      	sub	sp, #16
 80104e8:	af00      	add	r7, sp, #0
 80104ea:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80104ec:	6878      	ldr	r0, [r7, #4]
 80104ee:	f7ff ff70 	bl	80103d2 <f_sync>
 80104f2:	4603      	mov	r3, r0
 80104f4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80104f6:	7bfb      	ldrb	r3, [r7, #15]
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d11d      	bne.n	8010538 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	f107 0208 	add.w	r2, r7, #8
 8010502:	4611      	mov	r1, r2
 8010504:	4618      	mov	r0, r3
 8010506:	f7ff fb85 	bl	800fc14 <validate>
 801050a:	4603      	mov	r3, r0
 801050c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801050e:	7bfb      	ldrb	r3, [r7, #15]
 8010510:	2b00      	cmp	r3, #0
 8010512:	d111      	bne.n	8010538 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	691b      	ldr	r3, [r3, #16]
 8010518:	4618      	mov	r0, r3
 801051a:	f7fe f915 	bl	800e748 <dec_lock>
 801051e:	4603      	mov	r3, r0
 8010520:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010522:	7bfb      	ldrb	r3, [r7, #15]
 8010524:	2b00      	cmp	r3, #0
 8010526:	d102      	bne.n	801052e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	2200      	movs	r2, #0
 801052c:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 801052e:	68bb      	ldr	r3, [r7, #8]
 8010530:	2100      	movs	r1, #0
 8010532:	4618      	mov	r0, r3
 8010534:	f7fd ffe0 	bl	800e4f8 <unlock_fs>
#endif
		}
	}
	return res;
 8010538:	7bfb      	ldrb	r3, [r7, #15]
}
 801053a:	4618      	mov	r0, r3
 801053c:	3710      	adds	r7, #16
 801053e:	46bd      	mov	sp, r7
 8010540:	bd80      	pop	{r7, pc}

08010542 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8010542:	b580      	push	{r7, lr}
 8010544:	b090      	sub	sp, #64	; 0x40
 8010546:	af00      	add	r7, sp, #0
 8010548:	6078      	str	r0, [r7, #4]
 801054a:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	f107 0208 	add.w	r2, r7, #8
 8010552:	4611      	mov	r1, r2
 8010554:	4618      	mov	r0, r3
 8010556:	f7ff fb5d 	bl	800fc14 <validate>
 801055a:	4603      	mov	r3, r0
 801055c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8010560:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010564:	2b00      	cmp	r3, #0
 8010566:	d103      	bne.n	8010570 <f_lseek+0x2e>
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	7d5b      	ldrb	r3, [r3, #21]
 801056c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8010570:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010574:	2b00      	cmp	r3, #0
 8010576:	d009      	beq.n	801058c <f_lseek+0x4a>
 8010578:	68bb      	ldr	r3, [r7, #8]
 801057a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 801057e:	4611      	mov	r1, r2
 8010580:	4618      	mov	r0, r3
 8010582:	f7fd ffb9 	bl	800e4f8 <unlock_fs>
 8010586:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801058a:	e229      	b.n	80109e0 <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010590:	2b00      	cmp	r3, #0
 8010592:	f000 80ea 	beq.w	801076a <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8010596:	683b      	ldr	r3, [r7, #0]
 8010598:	f1b3 3fff 	cmp.w	r3, #4294967295
 801059c:	d164      	bne.n	8010668 <f_lseek+0x126>
			tbl = fp->cltbl;
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105a2:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80105a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105a6:	1d1a      	adds	r2, r3, #4
 80105a8:	627a      	str	r2, [r7, #36]	; 0x24
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	617b      	str	r3, [r7, #20]
 80105ae:	2302      	movs	r3, #2
 80105b0:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	689b      	ldr	r3, [r3, #8]
 80105b6:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 80105b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d044      	beq.n	8010648 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80105be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105c0:	613b      	str	r3, [r7, #16]
 80105c2:	2300      	movs	r3, #0
 80105c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80105c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105c8:	3302      	adds	r3, #2
 80105ca:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 80105cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105ce:	60fb      	str	r3, [r7, #12]
 80105d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105d2:	3301      	adds	r3, #1
 80105d4:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80105da:	4618      	mov	r0, r3
 80105dc:	f7fe fa13 	bl	800ea06 <get_fat>
 80105e0:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80105e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105e4:	2b01      	cmp	r3, #1
 80105e6:	d809      	bhi.n	80105fc <f_lseek+0xba>
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	2202      	movs	r2, #2
 80105ec:	755a      	strb	r2, [r3, #21]
 80105ee:	68bb      	ldr	r3, [r7, #8]
 80105f0:	2102      	movs	r1, #2
 80105f2:	4618      	mov	r0, r3
 80105f4:	f7fd ff80 	bl	800e4f8 <unlock_fs>
 80105f8:	2302      	movs	r3, #2
 80105fa:	e1f1      	b.n	80109e0 <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80105fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010602:	d109      	bne.n	8010618 <f_lseek+0xd6>
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	2201      	movs	r2, #1
 8010608:	755a      	strb	r2, [r3, #21]
 801060a:	68bb      	ldr	r3, [r7, #8]
 801060c:	2101      	movs	r1, #1
 801060e:	4618      	mov	r0, r3
 8010610:	f7fd ff72 	bl	800e4f8 <unlock_fs>
 8010614:	2301      	movs	r3, #1
 8010616:	e1e3      	b.n	80109e0 <f_lseek+0x49e>
					} while (cl == pcl + 1);
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	3301      	adds	r3, #1
 801061c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801061e:	429a      	cmp	r2, r3
 8010620:	d0d4      	beq.n	80105cc <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8010622:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010624:	697b      	ldr	r3, [r7, #20]
 8010626:	429a      	cmp	r2, r3
 8010628:	d809      	bhi.n	801063e <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 801062a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801062c:	1d1a      	adds	r2, r3, #4
 801062e:	627a      	str	r2, [r7, #36]	; 0x24
 8010630:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010632:	601a      	str	r2, [r3, #0]
 8010634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010636:	1d1a      	adds	r2, r3, #4
 8010638:	627a      	str	r2, [r7, #36]	; 0x24
 801063a:	693a      	ldr	r2, [r7, #16]
 801063c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 801063e:	68bb      	ldr	r3, [r7, #8]
 8010640:	699b      	ldr	r3, [r3, #24]
 8010642:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010644:	429a      	cmp	r2, r3
 8010646:	d3ba      	bcc.n	80105be <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801064c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801064e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8010650:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010652:	697b      	ldr	r3, [r7, #20]
 8010654:	429a      	cmp	r2, r3
 8010656:	d803      	bhi.n	8010660 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 8010658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801065a:	2200      	movs	r2, #0
 801065c:	601a      	str	r2, [r3, #0]
 801065e:	e1b6      	b.n	80109ce <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8010660:	2311      	movs	r3, #17
 8010662:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8010666:	e1b2      	b.n	80109ce <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	68db      	ldr	r3, [r3, #12]
 801066c:	683a      	ldr	r2, [r7, #0]
 801066e:	429a      	cmp	r2, r3
 8010670:	d902      	bls.n	8010678 <f_lseek+0x136>
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	68db      	ldr	r3, [r3, #12]
 8010676:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	683a      	ldr	r2, [r7, #0]
 801067c:	619a      	str	r2, [r3, #24]
			if (ofs) {
 801067e:	683b      	ldr	r3, [r7, #0]
 8010680:	2b00      	cmp	r3, #0
 8010682:	f000 81a4 	beq.w	80109ce <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8010686:	683b      	ldr	r3, [r7, #0]
 8010688:	3b01      	subs	r3, #1
 801068a:	4619      	mov	r1, r3
 801068c:	6878      	ldr	r0, [r7, #4]
 801068e:	f7fe fc4b 	bl	800ef28 <clmt_clust>
 8010692:	4602      	mov	r2, r0
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8010698:	68ba      	ldr	r2, [r7, #8]
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	69db      	ldr	r3, [r3, #28]
 801069e:	4619      	mov	r1, r3
 80106a0:	4610      	mov	r0, r2
 80106a2:	f7fe f991 	bl	800e9c8 <clust2sect>
 80106a6:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80106a8:	69bb      	ldr	r3, [r7, #24]
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d109      	bne.n	80106c2 <f_lseek+0x180>
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	2202      	movs	r2, #2
 80106b2:	755a      	strb	r2, [r3, #21]
 80106b4:	68bb      	ldr	r3, [r7, #8]
 80106b6:	2102      	movs	r1, #2
 80106b8:	4618      	mov	r0, r3
 80106ba:	f7fd ff1d 	bl	800e4f8 <unlock_fs>
 80106be:	2302      	movs	r3, #2
 80106c0:	e18e      	b.n	80109e0 <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80106c2:	683b      	ldr	r3, [r7, #0]
 80106c4:	3b01      	subs	r3, #1
 80106c6:	0a5b      	lsrs	r3, r3, #9
 80106c8:	68ba      	ldr	r2, [r7, #8]
 80106ca:	8952      	ldrh	r2, [r2, #10]
 80106cc:	3a01      	subs	r2, #1
 80106ce:	4013      	ands	r3, r2
 80106d0:	69ba      	ldr	r2, [r7, #24]
 80106d2:	4413      	add	r3, r2
 80106d4:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	699b      	ldr	r3, [r3, #24]
 80106da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80106de:	2b00      	cmp	r3, #0
 80106e0:	f000 8175 	beq.w	80109ce <f_lseek+0x48c>
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	6a1b      	ldr	r3, [r3, #32]
 80106e8:	69ba      	ldr	r2, [r7, #24]
 80106ea:	429a      	cmp	r2, r3
 80106ec:	f000 816f 	beq.w	80109ce <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	7d1b      	ldrb	r3, [r3, #20]
 80106f4:	b25b      	sxtb	r3, r3
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	da1d      	bge.n	8010736 <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80106fa:	68bb      	ldr	r3, [r7, #8]
 80106fc:	7858      	ldrb	r0, [r3, #1]
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	6a1a      	ldr	r2, [r3, #32]
 8010708:	2301      	movs	r3, #1
 801070a:	f7fd fda1 	bl	800e250 <disk_write>
 801070e:	4603      	mov	r3, r0
 8010710:	2b00      	cmp	r3, #0
 8010712:	d009      	beq.n	8010728 <f_lseek+0x1e6>
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	2201      	movs	r2, #1
 8010718:	755a      	strb	r2, [r3, #21]
 801071a:	68bb      	ldr	r3, [r7, #8]
 801071c:	2101      	movs	r1, #1
 801071e:	4618      	mov	r0, r3
 8010720:	f7fd feea 	bl	800e4f8 <unlock_fs>
 8010724:	2301      	movs	r3, #1
 8010726:	e15b      	b.n	80109e0 <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	7d1b      	ldrb	r3, [r3, #20]
 801072c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010730:	b2da      	uxtb	r2, r3
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8010736:	68bb      	ldr	r3, [r7, #8]
 8010738:	7858      	ldrb	r0, [r3, #1]
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010740:	2301      	movs	r3, #1
 8010742:	69ba      	ldr	r2, [r7, #24]
 8010744:	f7fd fd64 	bl	800e210 <disk_read>
 8010748:	4603      	mov	r3, r0
 801074a:	2b00      	cmp	r3, #0
 801074c:	d009      	beq.n	8010762 <f_lseek+0x220>
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	2201      	movs	r2, #1
 8010752:	755a      	strb	r2, [r3, #21]
 8010754:	68bb      	ldr	r3, [r7, #8]
 8010756:	2101      	movs	r1, #1
 8010758:	4618      	mov	r0, r3
 801075a:	f7fd fecd 	bl	800e4f8 <unlock_fs>
 801075e:	2301      	movs	r3, #1
 8010760:	e13e      	b.n	80109e0 <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	69ba      	ldr	r2, [r7, #24]
 8010766:	621a      	str	r2, [r3, #32]
 8010768:	e131      	b.n	80109ce <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	68db      	ldr	r3, [r3, #12]
 801076e:	683a      	ldr	r2, [r7, #0]
 8010770:	429a      	cmp	r2, r3
 8010772:	d908      	bls.n	8010786 <f_lseek+0x244>
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	7d1b      	ldrb	r3, [r3, #20]
 8010778:	f003 0302 	and.w	r3, r3, #2
 801077c:	2b00      	cmp	r3, #0
 801077e:	d102      	bne.n	8010786 <f_lseek+0x244>
			ofs = fp->obj.objsize;
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	68db      	ldr	r3, [r3, #12]
 8010784:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	699b      	ldr	r3, [r3, #24]
 801078a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 801078c:	2300      	movs	r3, #0
 801078e:	637b      	str	r3, [r7, #52]	; 0x34
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010794:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8010796:	683b      	ldr	r3, [r7, #0]
 8010798:	2b00      	cmp	r3, #0
 801079a:	f000 80c0 	beq.w	801091e <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 801079e:	68bb      	ldr	r3, [r7, #8]
 80107a0:	895b      	ldrh	r3, [r3, #10]
 80107a2:	025b      	lsls	r3, r3, #9
 80107a4:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80107a6:	6a3b      	ldr	r3, [r7, #32]
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d01b      	beq.n	80107e4 <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80107ac:	683b      	ldr	r3, [r7, #0]
 80107ae:	1e5a      	subs	r2, r3, #1
 80107b0:	69fb      	ldr	r3, [r7, #28]
 80107b2:	fbb2 f2f3 	udiv	r2, r2, r3
 80107b6:	6a3b      	ldr	r3, [r7, #32]
 80107b8:	1e59      	subs	r1, r3, #1
 80107ba:	69fb      	ldr	r3, [r7, #28]
 80107bc:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80107c0:	429a      	cmp	r2, r3
 80107c2:	d30f      	bcc.n	80107e4 <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80107c4:	6a3b      	ldr	r3, [r7, #32]
 80107c6:	1e5a      	subs	r2, r3, #1
 80107c8:	69fb      	ldr	r3, [r7, #28]
 80107ca:	425b      	negs	r3, r3
 80107cc:	401a      	ands	r2, r3
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	699b      	ldr	r3, [r3, #24]
 80107d6:	683a      	ldr	r2, [r7, #0]
 80107d8:	1ad3      	subs	r3, r2, r3
 80107da:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	69db      	ldr	r3, [r3, #28]
 80107e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80107e2:	e02c      	b.n	801083e <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	689b      	ldr	r3, [r3, #8]
 80107e8:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80107ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d123      	bne.n	8010838 <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	2100      	movs	r1, #0
 80107f4:	4618      	mov	r0, r3
 80107f6:	f7fe faff 	bl	800edf8 <create_chain>
 80107fa:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80107fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107fe:	2b01      	cmp	r3, #1
 8010800:	d109      	bne.n	8010816 <f_lseek+0x2d4>
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	2202      	movs	r2, #2
 8010806:	755a      	strb	r2, [r3, #21]
 8010808:	68bb      	ldr	r3, [r7, #8]
 801080a:	2102      	movs	r1, #2
 801080c:	4618      	mov	r0, r3
 801080e:	f7fd fe73 	bl	800e4f8 <unlock_fs>
 8010812:	2302      	movs	r3, #2
 8010814:	e0e4      	b.n	80109e0 <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010818:	f1b3 3fff 	cmp.w	r3, #4294967295
 801081c:	d109      	bne.n	8010832 <f_lseek+0x2f0>
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	2201      	movs	r2, #1
 8010822:	755a      	strb	r2, [r3, #21]
 8010824:	68bb      	ldr	r3, [r7, #8]
 8010826:	2101      	movs	r1, #1
 8010828:	4618      	mov	r0, r3
 801082a:	f7fd fe65 	bl	800e4f8 <unlock_fs>
 801082e:	2301      	movs	r3, #1
 8010830:	e0d6      	b.n	80109e0 <f_lseek+0x49e>
					fp->obj.sclust = clst;
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010836:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801083c:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 801083e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010840:	2b00      	cmp	r3, #0
 8010842:	d06c      	beq.n	801091e <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 8010844:	e044      	b.n	80108d0 <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 8010846:	683a      	ldr	r2, [r7, #0]
 8010848:	69fb      	ldr	r3, [r7, #28]
 801084a:	1ad3      	subs	r3, r2, r3
 801084c:	603b      	str	r3, [r7, #0]
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	699a      	ldr	r2, [r3, #24]
 8010852:	69fb      	ldr	r3, [r7, #28]
 8010854:	441a      	add	r2, r3
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	7d1b      	ldrb	r3, [r3, #20]
 801085e:	f003 0302 	and.w	r3, r3, #2
 8010862:	2b00      	cmp	r3, #0
 8010864:	d00b      	beq.n	801087e <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801086a:	4618      	mov	r0, r3
 801086c:	f7fe fac4 	bl	800edf8 <create_chain>
 8010870:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8010872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010874:	2b00      	cmp	r3, #0
 8010876:	d108      	bne.n	801088a <f_lseek+0x348>
							ofs = 0; break;
 8010878:	2300      	movs	r3, #0
 801087a:	603b      	str	r3, [r7, #0]
 801087c:	e02c      	b.n	80108d8 <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010882:	4618      	mov	r0, r3
 8010884:	f7fe f8bf 	bl	800ea06 <get_fat>
 8010888:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801088a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801088c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010890:	d109      	bne.n	80108a6 <f_lseek+0x364>
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	2201      	movs	r2, #1
 8010896:	755a      	strb	r2, [r3, #21]
 8010898:	68bb      	ldr	r3, [r7, #8]
 801089a:	2101      	movs	r1, #1
 801089c:	4618      	mov	r0, r3
 801089e:	f7fd fe2b 	bl	800e4f8 <unlock_fs>
 80108a2:	2301      	movs	r3, #1
 80108a4:	e09c      	b.n	80109e0 <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80108a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108a8:	2b01      	cmp	r3, #1
 80108aa:	d904      	bls.n	80108b6 <f_lseek+0x374>
 80108ac:	68bb      	ldr	r3, [r7, #8]
 80108ae:	699b      	ldr	r3, [r3, #24]
 80108b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80108b2:	429a      	cmp	r2, r3
 80108b4:	d309      	bcc.n	80108ca <f_lseek+0x388>
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	2202      	movs	r2, #2
 80108ba:	755a      	strb	r2, [r3, #21]
 80108bc:	68bb      	ldr	r3, [r7, #8]
 80108be:	2102      	movs	r1, #2
 80108c0:	4618      	mov	r0, r3
 80108c2:	f7fd fe19 	bl	800e4f8 <unlock_fs>
 80108c6:	2302      	movs	r3, #2
 80108c8:	e08a      	b.n	80109e0 <f_lseek+0x49e>
					fp->clust = clst;
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80108ce:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80108d0:	683a      	ldr	r2, [r7, #0]
 80108d2:	69fb      	ldr	r3, [r7, #28]
 80108d4:	429a      	cmp	r2, r3
 80108d6:	d8b6      	bhi.n	8010846 <f_lseek+0x304>
				}
				fp->fptr += ofs;
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	699a      	ldr	r2, [r3, #24]
 80108dc:	683b      	ldr	r3, [r7, #0]
 80108de:	441a      	add	r2, r3
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80108e4:	683b      	ldr	r3, [r7, #0]
 80108e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d017      	beq.n	801091e <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80108ee:	68bb      	ldr	r3, [r7, #8]
 80108f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80108f2:	4618      	mov	r0, r3
 80108f4:	f7fe f868 	bl	800e9c8 <clust2sect>
 80108f8:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80108fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d109      	bne.n	8010914 <f_lseek+0x3d2>
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	2202      	movs	r2, #2
 8010904:	755a      	strb	r2, [r3, #21]
 8010906:	68bb      	ldr	r3, [r7, #8]
 8010908:	2102      	movs	r1, #2
 801090a:	4618      	mov	r0, r3
 801090c:	f7fd fdf4 	bl	800e4f8 <unlock_fs>
 8010910:	2302      	movs	r3, #2
 8010912:	e065      	b.n	80109e0 <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 8010914:	683b      	ldr	r3, [r7, #0]
 8010916:	0a5b      	lsrs	r3, r3, #9
 8010918:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801091a:	4413      	add	r3, r2
 801091c:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	699a      	ldr	r2, [r3, #24]
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	68db      	ldr	r3, [r3, #12]
 8010926:	429a      	cmp	r2, r3
 8010928:	d90a      	bls.n	8010940 <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	699a      	ldr	r2, [r3, #24]
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	7d1b      	ldrb	r3, [r3, #20]
 8010936:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801093a:	b2da      	uxtb	r2, r3
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	699b      	ldr	r3, [r3, #24]
 8010944:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010948:	2b00      	cmp	r3, #0
 801094a:	d040      	beq.n	80109ce <f_lseek+0x48c>
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	6a1b      	ldr	r3, [r3, #32]
 8010950:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010952:	429a      	cmp	r2, r3
 8010954:	d03b      	beq.n	80109ce <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	7d1b      	ldrb	r3, [r3, #20]
 801095a:	b25b      	sxtb	r3, r3
 801095c:	2b00      	cmp	r3, #0
 801095e:	da1d      	bge.n	801099c <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010960:	68bb      	ldr	r3, [r7, #8]
 8010962:	7858      	ldrb	r0, [r3, #1]
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	6a1a      	ldr	r2, [r3, #32]
 801096e:	2301      	movs	r3, #1
 8010970:	f7fd fc6e 	bl	800e250 <disk_write>
 8010974:	4603      	mov	r3, r0
 8010976:	2b00      	cmp	r3, #0
 8010978:	d009      	beq.n	801098e <f_lseek+0x44c>
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	2201      	movs	r2, #1
 801097e:	755a      	strb	r2, [r3, #21]
 8010980:	68bb      	ldr	r3, [r7, #8]
 8010982:	2101      	movs	r1, #1
 8010984:	4618      	mov	r0, r3
 8010986:	f7fd fdb7 	bl	800e4f8 <unlock_fs>
 801098a:	2301      	movs	r3, #1
 801098c:	e028      	b.n	80109e0 <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	7d1b      	ldrb	r3, [r3, #20]
 8010992:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010996:	b2da      	uxtb	r2, r3
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801099c:	68bb      	ldr	r3, [r7, #8]
 801099e:	7858      	ldrb	r0, [r3, #1]
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80109a6:	2301      	movs	r3, #1
 80109a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80109aa:	f7fd fc31 	bl	800e210 <disk_read>
 80109ae:	4603      	mov	r3, r0
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d009      	beq.n	80109c8 <f_lseek+0x486>
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	2201      	movs	r2, #1
 80109b8:	755a      	strb	r2, [r3, #21]
 80109ba:	68bb      	ldr	r3, [r7, #8]
 80109bc:	2101      	movs	r1, #1
 80109be:	4618      	mov	r0, r3
 80109c0:	f7fd fd9a 	bl	800e4f8 <unlock_fs>
 80109c4:	2301      	movs	r3, #1
 80109c6:	e00b      	b.n	80109e0 <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80109cc:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80109ce:	68bb      	ldr	r3, [r7, #8]
 80109d0:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80109d4:	4611      	mov	r1, r2
 80109d6:	4618      	mov	r0, r3
 80109d8:	f7fd fd8e 	bl	800e4f8 <unlock_fs>
 80109dc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80109e0:	4618      	mov	r0, r3
 80109e2:	3740      	adds	r7, #64	; 0x40
 80109e4:	46bd      	mov	sp, r7
 80109e6:	bd80      	pop	{r7, pc}

080109e8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80109e8:	b480      	push	{r7}
 80109ea:	b087      	sub	sp, #28
 80109ec:	af00      	add	r7, sp, #0
 80109ee:	60f8      	str	r0, [r7, #12]
 80109f0:	60b9      	str	r1, [r7, #8]
 80109f2:	4613      	mov	r3, r2
 80109f4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80109f6:	2301      	movs	r3, #1
 80109f8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80109fa:	2300      	movs	r3, #0
 80109fc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80109fe:	4b1f      	ldr	r3, [pc, #124]	; (8010a7c <FATFS_LinkDriverEx+0x94>)
 8010a00:	7a5b      	ldrb	r3, [r3, #9]
 8010a02:	b2db      	uxtb	r3, r3
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d131      	bne.n	8010a6c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010a08:	4b1c      	ldr	r3, [pc, #112]	; (8010a7c <FATFS_LinkDriverEx+0x94>)
 8010a0a:	7a5b      	ldrb	r3, [r3, #9]
 8010a0c:	b2db      	uxtb	r3, r3
 8010a0e:	461a      	mov	r2, r3
 8010a10:	4b1a      	ldr	r3, [pc, #104]	; (8010a7c <FATFS_LinkDriverEx+0x94>)
 8010a12:	2100      	movs	r1, #0
 8010a14:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010a16:	4b19      	ldr	r3, [pc, #100]	; (8010a7c <FATFS_LinkDriverEx+0x94>)
 8010a18:	7a5b      	ldrb	r3, [r3, #9]
 8010a1a:	b2db      	uxtb	r3, r3
 8010a1c:	4a17      	ldr	r2, [pc, #92]	; (8010a7c <FATFS_LinkDriverEx+0x94>)
 8010a1e:	009b      	lsls	r3, r3, #2
 8010a20:	4413      	add	r3, r2
 8010a22:	68fa      	ldr	r2, [r7, #12]
 8010a24:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010a26:	4b15      	ldr	r3, [pc, #84]	; (8010a7c <FATFS_LinkDriverEx+0x94>)
 8010a28:	7a5b      	ldrb	r3, [r3, #9]
 8010a2a:	b2db      	uxtb	r3, r3
 8010a2c:	461a      	mov	r2, r3
 8010a2e:	4b13      	ldr	r3, [pc, #76]	; (8010a7c <FATFS_LinkDriverEx+0x94>)
 8010a30:	4413      	add	r3, r2
 8010a32:	79fa      	ldrb	r2, [r7, #7]
 8010a34:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010a36:	4b11      	ldr	r3, [pc, #68]	; (8010a7c <FATFS_LinkDriverEx+0x94>)
 8010a38:	7a5b      	ldrb	r3, [r3, #9]
 8010a3a:	b2db      	uxtb	r3, r3
 8010a3c:	1c5a      	adds	r2, r3, #1
 8010a3e:	b2d1      	uxtb	r1, r2
 8010a40:	4a0e      	ldr	r2, [pc, #56]	; (8010a7c <FATFS_LinkDriverEx+0x94>)
 8010a42:	7251      	strb	r1, [r2, #9]
 8010a44:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010a46:	7dbb      	ldrb	r3, [r7, #22]
 8010a48:	3330      	adds	r3, #48	; 0x30
 8010a4a:	b2da      	uxtb	r2, r3
 8010a4c:	68bb      	ldr	r3, [r7, #8]
 8010a4e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010a50:	68bb      	ldr	r3, [r7, #8]
 8010a52:	3301      	adds	r3, #1
 8010a54:	223a      	movs	r2, #58	; 0x3a
 8010a56:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010a58:	68bb      	ldr	r3, [r7, #8]
 8010a5a:	3302      	adds	r3, #2
 8010a5c:	222f      	movs	r2, #47	; 0x2f
 8010a5e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010a60:	68bb      	ldr	r3, [r7, #8]
 8010a62:	3303      	adds	r3, #3
 8010a64:	2200      	movs	r2, #0
 8010a66:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010a68:	2300      	movs	r3, #0
 8010a6a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010a6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a6e:	4618      	mov	r0, r3
 8010a70:	371c      	adds	r7, #28
 8010a72:	46bd      	mov	sp, r7
 8010a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a78:	4770      	bx	lr
 8010a7a:	bf00      	nop
 8010a7c:	200011c8 	.word	0x200011c8

08010a80 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010a80:	b580      	push	{r7, lr}
 8010a82:	b082      	sub	sp, #8
 8010a84:	af00      	add	r7, sp, #0
 8010a86:	6078      	str	r0, [r7, #4]
 8010a88:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010a8a:	2200      	movs	r2, #0
 8010a8c:	6839      	ldr	r1, [r7, #0]
 8010a8e:	6878      	ldr	r0, [r7, #4]
 8010a90:	f7ff ffaa 	bl	80109e8 <FATFS_LinkDriverEx>
 8010a94:	4603      	mov	r3, r0
}
 8010a96:	4618      	mov	r0, r3
 8010a98:	3708      	adds	r7, #8
 8010a9a:	46bd      	mov	sp, r7
 8010a9c:	bd80      	pop	{r7, pc}

08010a9e <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8010a9e:	b580      	push	{r7, lr}
 8010aa0:	b086      	sub	sp, #24
 8010aa2:	af00      	add	r7, sp, #0
 8010aa4:	4603      	mov	r3, r0
 8010aa6:	6039      	str	r1, [r7, #0]
 8010aa8:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 8010aaa:	2300      	movs	r3, #0
 8010aac:	60fb      	str	r3, [r7, #12]
 8010aae:	2300      	movs	r3, #0
 8010ab0:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 8010ab2:	f107 030c 	add.w	r3, r7, #12
 8010ab6:	2101      	movs	r1, #1
 8010ab8:	4618      	mov	r0, r3
 8010aba:	f000 f8e9 	bl	8010c90 <osSemaphoreCreate>
 8010abe:	4602      	mov	r2, r0
 8010ac0:	683b      	ldr	r3, [r7, #0]
 8010ac2:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 8010ac4:	683b      	ldr	r3, [r7, #0]
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	bf14      	ite	ne
 8010acc:	2301      	movne	r3, #1
 8010ace:	2300      	moveq	r3, #0
 8010ad0:	b2db      	uxtb	r3, r3
 8010ad2:	617b      	str	r3, [r7, #20]

    return ret;
 8010ad4:	697b      	ldr	r3, [r7, #20]
}
 8010ad6:	4618      	mov	r0, r3
 8010ad8:	3718      	adds	r7, #24
 8010ada:	46bd      	mov	sp, r7
 8010adc:	bd80      	pop	{r7, pc}

08010ade <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8010ade:	b580      	push	{r7, lr}
 8010ae0:	b082      	sub	sp, #8
 8010ae2:	af00      	add	r7, sp, #0
 8010ae4:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8010ae6:	6878      	ldr	r0, [r7, #4]
 8010ae8:	f000 f988 	bl	8010dfc <osSemaphoreDelete>
#endif
    return 1;
 8010aec:	2301      	movs	r3, #1
}
 8010aee:	4618      	mov	r0, r3
 8010af0:	3708      	adds	r7, #8
 8010af2:	46bd      	mov	sp, r7
 8010af4:	bd80      	pop	{r7, pc}

08010af6 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8010af6:	b580      	push	{r7, lr}
 8010af8:	b084      	sub	sp, #16
 8010afa:	af00      	add	r7, sp, #0
 8010afc:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8010afe:	2300      	movs	r3, #0
 8010b00:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8010b02:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8010b06:	6878      	ldr	r0, [r7, #4]
 8010b08:	f000 f8f4 	bl	8010cf4 <osSemaphoreWait>
 8010b0c:	4603      	mov	r3, r0
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d101      	bne.n	8010b16 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 8010b12:	2301      	movs	r3, #1
 8010b14:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8010b16:	68fb      	ldr	r3, [r7, #12]
}
 8010b18:	4618      	mov	r0, r3
 8010b1a:	3710      	adds	r7, #16
 8010b1c:	46bd      	mov	sp, r7
 8010b1e:	bd80      	pop	{r7, pc}

08010b20 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8010b20:	b580      	push	{r7, lr}
 8010b22:	b082      	sub	sp, #8
 8010b24:	af00      	add	r7, sp, #0
 8010b26:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8010b28:	6878      	ldr	r0, [r7, #4]
 8010b2a:	f000 f931 	bl	8010d90 <osSemaphoreRelease>
#endif
}
 8010b2e:	bf00      	nop
 8010b30:	3708      	adds	r7, #8
 8010b32:	46bd      	mov	sp, r7
 8010b34:	bd80      	pop	{r7, pc}

08010b36 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8010b36:	b480      	push	{r7}
 8010b38:	b085      	sub	sp, #20
 8010b3a:	af00      	add	r7, sp, #0
 8010b3c:	4603      	mov	r3, r0
 8010b3e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8010b40:	2300      	movs	r3, #0
 8010b42:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8010b44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010b48:	2b84      	cmp	r3, #132	; 0x84
 8010b4a:	d005      	beq.n	8010b58 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8010b4c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010b50:	68fb      	ldr	r3, [r7, #12]
 8010b52:	4413      	add	r3, r2
 8010b54:	3303      	adds	r3, #3
 8010b56:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8010b58:	68fb      	ldr	r3, [r7, #12]
}
 8010b5a:	4618      	mov	r0, r3
 8010b5c:	3714      	adds	r7, #20
 8010b5e:	46bd      	mov	sp, r7
 8010b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b64:	4770      	bx	lr

08010b66 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8010b66:	b480      	push	{r7}
 8010b68:	b083      	sub	sp, #12
 8010b6a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010b6c:	f3ef 8305 	mrs	r3, IPSR
 8010b70:	607b      	str	r3, [r7, #4]
  return(result);
 8010b72:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	bf14      	ite	ne
 8010b78:	2301      	movne	r3, #1
 8010b7a:	2300      	moveq	r3, #0
 8010b7c:	b2db      	uxtb	r3, r3
}
 8010b7e:	4618      	mov	r0, r3
 8010b80:	370c      	adds	r7, #12
 8010b82:	46bd      	mov	sp, r7
 8010b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b88:	4770      	bx	lr

08010b8a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8010b8a:	b580      	push	{r7, lr}
 8010b8c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8010b8e:	f001 fcc7 	bl	8012520 <vTaskStartScheduler>
  
  return osOK;
 8010b92:	2300      	movs	r3, #0
}
 8010b94:	4618      	mov	r0, r3
 8010b96:	bd80      	pop	{r7, pc}

08010b98 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8010b98:	b580      	push	{r7, lr}
 8010b9a:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8010b9c:	f002 f91a 	bl	8012dd4 <xTaskGetSchedulerState>
 8010ba0:	4603      	mov	r3, r0
 8010ba2:	2b01      	cmp	r3, #1
 8010ba4:	d101      	bne.n	8010baa <osKernelRunning+0x12>
    return 0;
 8010ba6:	2300      	movs	r3, #0
 8010ba8:	e000      	b.n	8010bac <osKernelRunning+0x14>
  else
    return 1;
 8010baa:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8010bac:	4618      	mov	r0, r3
 8010bae:	bd80      	pop	{r7, pc}

08010bb0 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8010bb0:	b580      	push	{r7, lr}
 8010bb2:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8010bb4:	f7ff ffd7 	bl	8010b66 <inHandlerMode>
 8010bb8:	4603      	mov	r3, r0
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d003      	beq.n	8010bc6 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8010bbe:	f001 fdcf 	bl	8012760 <xTaskGetTickCountFromISR>
 8010bc2:	4603      	mov	r3, r0
 8010bc4:	e002      	b.n	8010bcc <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8010bc6:	f001 fdbb 	bl	8012740 <xTaskGetTickCount>
 8010bca:	4603      	mov	r3, r0
  }
}
 8010bcc:	4618      	mov	r0, r3
 8010bce:	bd80      	pop	{r7, pc}

08010bd0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8010bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010bd2:	b089      	sub	sp, #36	; 0x24
 8010bd4:	af04      	add	r7, sp, #16
 8010bd6:	6078      	str	r0, [r7, #4]
 8010bd8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	695b      	ldr	r3, [r3, #20]
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d020      	beq.n	8010c24 <osThreadCreate+0x54>
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	699b      	ldr	r3, [r3, #24]
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d01c      	beq.n	8010c24 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	685c      	ldr	r4, [r3, #4]
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	681d      	ldr	r5, [r3, #0]
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	691e      	ldr	r6, [r3, #16]
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8010bfc:	4618      	mov	r0, r3
 8010bfe:	f7ff ff9a 	bl	8010b36 <makeFreeRtosPriority>
 8010c02:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	695b      	ldr	r3, [r3, #20]
 8010c08:	687a      	ldr	r2, [r7, #4]
 8010c0a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010c0c:	9202      	str	r2, [sp, #8]
 8010c0e:	9301      	str	r3, [sp, #4]
 8010c10:	9100      	str	r1, [sp, #0]
 8010c12:	683b      	ldr	r3, [r7, #0]
 8010c14:	4632      	mov	r2, r6
 8010c16:	4629      	mov	r1, r5
 8010c18:	4620      	mov	r0, r4
 8010c1a:	f001 fa15 	bl	8012048 <xTaskCreateStatic>
 8010c1e:	4603      	mov	r3, r0
 8010c20:	60fb      	str	r3, [r7, #12]
 8010c22:	e01c      	b.n	8010c5e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	685c      	ldr	r4, [r3, #4]
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010c30:	b29e      	uxth	r6, r3
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8010c38:	4618      	mov	r0, r3
 8010c3a:	f7ff ff7c 	bl	8010b36 <makeFreeRtosPriority>
 8010c3e:	4602      	mov	r2, r0
 8010c40:	f107 030c 	add.w	r3, r7, #12
 8010c44:	9301      	str	r3, [sp, #4]
 8010c46:	9200      	str	r2, [sp, #0]
 8010c48:	683b      	ldr	r3, [r7, #0]
 8010c4a:	4632      	mov	r2, r6
 8010c4c:	4629      	mov	r1, r5
 8010c4e:	4620      	mov	r0, r4
 8010c50:	f001 fa5d 	bl	801210e <xTaskCreate>
 8010c54:	4603      	mov	r3, r0
 8010c56:	2b01      	cmp	r3, #1
 8010c58:	d001      	beq.n	8010c5e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8010c5a:	2300      	movs	r3, #0
 8010c5c:	e000      	b.n	8010c60 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8010c5e:	68fb      	ldr	r3, [r7, #12]
}
 8010c60:	4618      	mov	r0, r3
 8010c62:	3714      	adds	r7, #20
 8010c64:	46bd      	mov	sp, r7
 8010c66:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010c68 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8010c68:	b580      	push	{r7, lr}
 8010c6a:	b084      	sub	sp, #16
 8010c6c:	af00      	add	r7, sp, #0
 8010c6e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d001      	beq.n	8010c7e <osDelay+0x16>
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	e000      	b.n	8010c80 <osDelay+0x18>
 8010c7e:	2301      	movs	r3, #1
 8010c80:	4618      	mov	r0, r3
 8010c82:	f001 fc17 	bl	80124b4 <vTaskDelay>
  
  return osOK;
 8010c86:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8010c88:	4618      	mov	r0, r3
 8010c8a:	3710      	adds	r7, #16
 8010c8c:	46bd      	mov	sp, r7
 8010c8e:	bd80      	pop	{r7, pc}

08010c90 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8010c90:	b580      	push	{r7, lr}
 8010c92:	b086      	sub	sp, #24
 8010c94:	af02      	add	r7, sp, #8
 8010c96:	6078      	str	r0, [r7, #4]
 8010c98:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	685b      	ldr	r3, [r3, #4]
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d00f      	beq.n	8010cc2 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8010ca2:	683b      	ldr	r3, [r7, #0]
 8010ca4:	2b01      	cmp	r3, #1
 8010ca6:	d10a      	bne.n	8010cbe <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	685b      	ldr	r3, [r3, #4]
 8010cac:	2203      	movs	r2, #3
 8010cae:	9200      	str	r2, [sp, #0]
 8010cb0:	2200      	movs	r2, #0
 8010cb2:	2100      	movs	r1, #0
 8010cb4:	2001      	movs	r0, #1
 8010cb6:	f000 faaf 	bl	8011218 <xQueueGenericCreateStatic>
 8010cba:	4603      	mov	r3, r0
 8010cbc:	e016      	b.n	8010cec <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8010cbe:	2300      	movs	r3, #0
 8010cc0:	e014      	b.n	8010cec <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8010cc2:	683b      	ldr	r3, [r7, #0]
 8010cc4:	2b01      	cmp	r3, #1
 8010cc6:	d110      	bne.n	8010cea <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8010cc8:	2203      	movs	r2, #3
 8010cca:	2100      	movs	r1, #0
 8010ccc:	2001      	movs	r0, #1
 8010cce:	f000 fb25 	bl	801131c <xQueueGenericCreate>
 8010cd2:	60f8      	str	r0, [r7, #12]
 8010cd4:	68fb      	ldr	r3, [r7, #12]
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d005      	beq.n	8010ce6 <osSemaphoreCreate+0x56>
 8010cda:	2300      	movs	r3, #0
 8010cdc:	2200      	movs	r2, #0
 8010cde:	2100      	movs	r1, #0
 8010ce0:	68f8      	ldr	r0, [r7, #12]
 8010ce2:	f000 fb7d 	bl	80113e0 <xQueueGenericSend>
      return sema;
 8010ce6:	68fb      	ldr	r3, [r7, #12]
 8010ce8:	e000      	b.n	8010cec <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8010cea:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8010cec:	4618      	mov	r0, r3
 8010cee:	3710      	adds	r7, #16
 8010cf0:	46bd      	mov	sp, r7
 8010cf2:	bd80      	pop	{r7, pc}

08010cf4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8010cf4:	b580      	push	{r7, lr}
 8010cf6:	b084      	sub	sp, #16
 8010cf8:	af00      	add	r7, sp, #0
 8010cfa:	6078      	str	r0, [r7, #4]
 8010cfc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8010cfe:	2300      	movs	r3, #0
 8010d00:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d101      	bne.n	8010d0c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8010d08:	2380      	movs	r3, #128	; 0x80
 8010d0a:	e03a      	b.n	8010d82 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8010d0c:	2300      	movs	r3, #0
 8010d0e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8010d10:	683b      	ldr	r3, [r7, #0]
 8010d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d16:	d103      	bne.n	8010d20 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8010d18:	f04f 33ff 	mov.w	r3, #4294967295
 8010d1c:	60fb      	str	r3, [r7, #12]
 8010d1e:	e009      	b.n	8010d34 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8010d20:	683b      	ldr	r3, [r7, #0]
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d006      	beq.n	8010d34 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8010d26:	683b      	ldr	r3, [r7, #0]
 8010d28:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8010d2a:	68fb      	ldr	r3, [r7, #12]
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d101      	bne.n	8010d34 <osSemaphoreWait+0x40>
      ticks = 1;
 8010d30:	2301      	movs	r3, #1
 8010d32:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8010d34:	f7ff ff17 	bl	8010b66 <inHandlerMode>
 8010d38:	4603      	mov	r3, r0
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d017      	beq.n	8010d6e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8010d3e:	f107 0308 	add.w	r3, r7, #8
 8010d42:	461a      	mov	r2, r3
 8010d44:	2100      	movs	r1, #0
 8010d46:	6878      	ldr	r0, [r7, #4]
 8010d48:	f000 ff80 	bl	8011c4c <xQueueReceiveFromISR>
 8010d4c:	4603      	mov	r3, r0
 8010d4e:	2b01      	cmp	r3, #1
 8010d50:	d001      	beq.n	8010d56 <osSemaphoreWait+0x62>
      return osErrorOS;
 8010d52:	23ff      	movs	r3, #255	; 0xff
 8010d54:	e015      	b.n	8010d82 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8010d56:	68bb      	ldr	r3, [r7, #8]
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d011      	beq.n	8010d80 <osSemaphoreWait+0x8c>
 8010d5c:	4b0b      	ldr	r3, [pc, #44]	; (8010d8c <osSemaphoreWait+0x98>)
 8010d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d62:	601a      	str	r2, [r3, #0]
 8010d64:	f3bf 8f4f 	dsb	sy
 8010d68:	f3bf 8f6f 	isb	sy
 8010d6c:	e008      	b.n	8010d80 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8010d6e:	68f9      	ldr	r1, [r7, #12]
 8010d70:	6878      	ldr	r0, [r7, #4]
 8010d72:	f000 fe57 	bl	8011a24 <xQueueSemaphoreTake>
 8010d76:	4603      	mov	r3, r0
 8010d78:	2b01      	cmp	r3, #1
 8010d7a:	d001      	beq.n	8010d80 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8010d7c:	23ff      	movs	r3, #255	; 0xff
 8010d7e:	e000      	b.n	8010d82 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8010d80:	2300      	movs	r3, #0
}
 8010d82:	4618      	mov	r0, r3
 8010d84:	3710      	adds	r7, #16
 8010d86:	46bd      	mov	sp, r7
 8010d88:	bd80      	pop	{r7, pc}
 8010d8a:	bf00      	nop
 8010d8c:	e000ed04 	.word	0xe000ed04

08010d90 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8010d90:	b580      	push	{r7, lr}
 8010d92:	b084      	sub	sp, #16
 8010d94:	af00      	add	r7, sp, #0
 8010d96:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8010d98:	2300      	movs	r3, #0
 8010d9a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8010d9c:	2300      	movs	r3, #0
 8010d9e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8010da0:	f7ff fee1 	bl	8010b66 <inHandlerMode>
 8010da4:	4603      	mov	r3, r0
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d016      	beq.n	8010dd8 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8010daa:	f107 0308 	add.w	r3, r7, #8
 8010dae:	4619      	mov	r1, r3
 8010db0:	6878      	ldr	r0, [r7, #4]
 8010db2:	f000 fcbb 	bl	801172c <xQueueGiveFromISR>
 8010db6:	4603      	mov	r3, r0
 8010db8:	2b01      	cmp	r3, #1
 8010dba:	d001      	beq.n	8010dc0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8010dbc:	23ff      	movs	r3, #255	; 0xff
 8010dbe:	e017      	b.n	8010df0 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8010dc0:	68bb      	ldr	r3, [r7, #8]
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d013      	beq.n	8010dee <osSemaphoreRelease+0x5e>
 8010dc6:	4b0c      	ldr	r3, [pc, #48]	; (8010df8 <osSemaphoreRelease+0x68>)
 8010dc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010dcc:	601a      	str	r2, [r3, #0]
 8010dce:	f3bf 8f4f 	dsb	sy
 8010dd2:	f3bf 8f6f 	isb	sy
 8010dd6:	e00a      	b.n	8010dee <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8010dd8:	2300      	movs	r3, #0
 8010dda:	2200      	movs	r2, #0
 8010ddc:	2100      	movs	r1, #0
 8010dde:	6878      	ldr	r0, [r7, #4]
 8010de0:	f000 fafe 	bl	80113e0 <xQueueGenericSend>
 8010de4:	4603      	mov	r3, r0
 8010de6:	2b01      	cmp	r3, #1
 8010de8:	d001      	beq.n	8010dee <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8010dea:	23ff      	movs	r3, #255	; 0xff
 8010dec:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8010dee:	68fb      	ldr	r3, [r7, #12]
}
 8010df0:	4618      	mov	r0, r3
 8010df2:	3710      	adds	r7, #16
 8010df4:	46bd      	mov	sp, r7
 8010df6:	bd80      	pop	{r7, pc}
 8010df8:	e000ed04 	.word	0xe000ed04

08010dfc <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8010dfc:	b580      	push	{r7, lr}
 8010dfe:	b082      	sub	sp, #8
 8010e00:	af00      	add	r7, sp, #0
 8010e02:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8010e04:	f7ff feaf 	bl	8010b66 <inHandlerMode>
 8010e08:	4603      	mov	r3, r0
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d001      	beq.n	8010e12 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8010e0e:	2382      	movs	r3, #130	; 0x82
 8010e10:	e003      	b.n	8010e1a <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8010e12:	6878      	ldr	r0, [r7, #4]
 8010e14:	f000 ffa0 	bl	8011d58 <vQueueDelete>

  return osOK; 
 8010e18:	2300      	movs	r3, #0
}
 8010e1a:	4618      	mov	r0, r3
 8010e1c:	3708      	adds	r7, #8
 8010e1e:	46bd      	mov	sp, r7
 8010e20:	bd80      	pop	{r7, pc}

08010e22 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8010e22:	b590      	push	{r4, r7, lr}
 8010e24:	b085      	sub	sp, #20
 8010e26:	af02      	add	r7, sp, #8
 8010e28:	6078      	str	r0, [r7, #4]
 8010e2a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	689b      	ldr	r3, [r3, #8]
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d011      	beq.n	8010e58 <osMessageCreate+0x36>
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	68db      	ldr	r3, [r3, #12]
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d00d      	beq.n	8010e58 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	6818      	ldr	r0, [r3, #0]
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	6859      	ldr	r1, [r3, #4]
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	689a      	ldr	r2, [r3, #8]
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	68db      	ldr	r3, [r3, #12]
 8010e4c:	2400      	movs	r4, #0
 8010e4e:	9400      	str	r4, [sp, #0]
 8010e50:	f000 f9e2 	bl	8011218 <xQueueGenericCreateStatic>
 8010e54:	4603      	mov	r3, r0
 8010e56:	e008      	b.n	8010e6a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	6818      	ldr	r0, [r3, #0]
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	685b      	ldr	r3, [r3, #4]
 8010e60:	2200      	movs	r2, #0
 8010e62:	4619      	mov	r1, r3
 8010e64:	f000 fa5a 	bl	801131c <xQueueGenericCreate>
 8010e68:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8010e6a:	4618      	mov	r0, r3
 8010e6c:	370c      	adds	r7, #12
 8010e6e:	46bd      	mov	sp, r7
 8010e70:	bd90      	pop	{r4, r7, pc}
	...

08010e74 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8010e74:	b580      	push	{r7, lr}
 8010e76:	b086      	sub	sp, #24
 8010e78:	af00      	add	r7, sp, #0
 8010e7a:	60f8      	str	r0, [r7, #12]
 8010e7c:	60b9      	str	r1, [r7, #8]
 8010e7e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8010e80:	2300      	movs	r3, #0
 8010e82:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8010e88:	697b      	ldr	r3, [r7, #20]
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d101      	bne.n	8010e92 <osMessagePut+0x1e>
    ticks = 1;
 8010e8e:	2301      	movs	r3, #1
 8010e90:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8010e92:	f7ff fe68 	bl	8010b66 <inHandlerMode>
 8010e96:	4603      	mov	r3, r0
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d018      	beq.n	8010ece <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8010e9c:	f107 0210 	add.w	r2, r7, #16
 8010ea0:	f107 0108 	add.w	r1, r7, #8
 8010ea4:	2300      	movs	r3, #0
 8010ea6:	68f8      	ldr	r0, [r7, #12]
 8010ea8:	f000 fba0 	bl	80115ec <xQueueGenericSendFromISR>
 8010eac:	4603      	mov	r3, r0
 8010eae:	2b01      	cmp	r3, #1
 8010eb0:	d001      	beq.n	8010eb6 <osMessagePut+0x42>
      return osErrorOS;
 8010eb2:	23ff      	movs	r3, #255	; 0xff
 8010eb4:	e018      	b.n	8010ee8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8010eb6:	693b      	ldr	r3, [r7, #16]
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d014      	beq.n	8010ee6 <osMessagePut+0x72>
 8010ebc:	4b0c      	ldr	r3, [pc, #48]	; (8010ef0 <osMessagePut+0x7c>)
 8010ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010ec2:	601a      	str	r2, [r3, #0]
 8010ec4:	f3bf 8f4f 	dsb	sy
 8010ec8:	f3bf 8f6f 	isb	sy
 8010ecc:	e00b      	b.n	8010ee6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8010ece:	f107 0108 	add.w	r1, r7, #8
 8010ed2:	2300      	movs	r3, #0
 8010ed4:	697a      	ldr	r2, [r7, #20]
 8010ed6:	68f8      	ldr	r0, [r7, #12]
 8010ed8:	f000 fa82 	bl	80113e0 <xQueueGenericSend>
 8010edc:	4603      	mov	r3, r0
 8010ede:	2b01      	cmp	r3, #1
 8010ee0:	d001      	beq.n	8010ee6 <osMessagePut+0x72>
      return osErrorOS;
 8010ee2:	23ff      	movs	r3, #255	; 0xff
 8010ee4:	e000      	b.n	8010ee8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8010ee6:	2300      	movs	r3, #0
}
 8010ee8:	4618      	mov	r0, r3
 8010eea:	3718      	adds	r7, #24
 8010eec:	46bd      	mov	sp, r7
 8010eee:	bd80      	pop	{r7, pc}
 8010ef0:	e000ed04 	.word	0xe000ed04

08010ef4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8010ef4:	b590      	push	{r4, r7, lr}
 8010ef6:	b08b      	sub	sp, #44	; 0x2c
 8010ef8:	af00      	add	r7, sp, #0
 8010efa:	60f8      	str	r0, [r7, #12]
 8010efc:	60b9      	str	r1, [r7, #8]
 8010efe:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8010f00:	68bb      	ldr	r3, [r7, #8]
 8010f02:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8010f04:	2300      	movs	r3, #0
 8010f06:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8010f08:	68bb      	ldr	r3, [r7, #8]
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d10a      	bne.n	8010f24 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8010f0e:	2380      	movs	r3, #128	; 0x80
 8010f10:	617b      	str	r3, [r7, #20]
    return event;
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	461c      	mov	r4, r3
 8010f16:	f107 0314 	add.w	r3, r7, #20
 8010f1a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010f1e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8010f22:	e054      	b.n	8010fce <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8010f24:	2300      	movs	r3, #0
 8010f26:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8010f28:	2300      	movs	r3, #0
 8010f2a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f32:	d103      	bne.n	8010f3c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8010f34:	f04f 33ff 	mov.w	r3, #4294967295
 8010f38:	627b      	str	r3, [r7, #36]	; 0x24
 8010f3a:	e009      	b.n	8010f50 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d006      	beq.n	8010f50 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8010f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d101      	bne.n	8010f50 <osMessageGet+0x5c>
      ticks = 1;
 8010f4c:	2301      	movs	r3, #1
 8010f4e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8010f50:	f7ff fe09 	bl	8010b66 <inHandlerMode>
 8010f54:	4603      	mov	r3, r0
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d01c      	beq.n	8010f94 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8010f5a:	f107 0220 	add.w	r2, r7, #32
 8010f5e:	f107 0314 	add.w	r3, r7, #20
 8010f62:	3304      	adds	r3, #4
 8010f64:	4619      	mov	r1, r3
 8010f66:	68b8      	ldr	r0, [r7, #8]
 8010f68:	f000 fe70 	bl	8011c4c <xQueueReceiveFromISR>
 8010f6c:	4603      	mov	r3, r0
 8010f6e:	2b01      	cmp	r3, #1
 8010f70:	d102      	bne.n	8010f78 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8010f72:	2310      	movs	r3, #16
 8010f74:	617b      	str	r3, [r7, #20]
 8010f76:	e001      	b.n	8010f7c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8010f78:	2300      	movs	r3, #0
 8010f7a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8010f7c:	6a3b      	ldr	r3, [r7, #32]
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d01d      	beq.n	8010fbe <osMessageGet+0xca>
 8010f82:	4b15      	ldr	r3, [pc, #84]	; (8010fd8 <osMessageGet+0xe4>)
 8010f84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010f88:	601a      	str	r2, [r3, #0]
 8010f8a:	f3bf 8f4f 	dsb	sy
 8010f8e:	f3bf 8f6f 	isb	sy
 8010f92:	e014      	b.n	8010fbe <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8010f94:	f107 0314 	add.w	r3, r7, #20
 8010f98:	3304      	adds	r3, #4
 8010f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010f9c:	4619      	mov	r1, r3
 8010f9e:	68b8      	ldr	r0, [r7, #8]
 8010fa0:	f000 fc5a 	bl	8011858 <xQueueReceive>
 8010fa4:	4603      	mov	r3, r0
 8010fa6:	2b01      	cmp	r3, #1
 8010fa8:	d102      	bne.n	8010fb0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8010faa:	2310      	movs	r3, #16
 8010fac:	617b      	str	r3, [r7, #20]
 8010fae:	e006      	b.n	8010fbe <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8010fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d101      	bne.n	8010fba <osMessageGet+0xc6>
 8010fb6:	2300      	movs	r3, #0
 8010fb8:	e000      	b.n	8010fbc <osMessageGet+0xc8>
 8010fba:	2340      	movs	r3, #64	; 0x40
 8010fbc:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8010fbe:	68fb      	ldr	r3, [r7, #12]
 8010fc0:	461c      	mov	r4, r3
 8010fc2:	f107 0314 	add.w	r3, r7, #20
 8010fc6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010fca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8010fce:	68f8      	ldr	r0, [r7, #12]
 8010fd0:	372c      	adds	r7, #44	; 0x2c
 8010fd2:	46bd      	mov	sp, r7
 8010fd4:	bd90      	pop	{r4, r7, pc}
 8010fd6:	bf00      	nop
 8010fd8:	e000ed04 	.word	0xe000ed04

08010fdc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010fdc:	b480      	push	{r7}
 8010fde:	b083      	sub	sp, #12
 8010fe0:	af00      	add	r7, sp, #0
 8010fe2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	f103 0208 	add.w	r2, r3, #8
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8010ff4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	f103 0208 	add.w	r2, r3, #8
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	f103 0208 	add.w	r2, r3, #8
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	2200      	movs	r2, #0
 801100e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011010:	bf00      	nop
 8011012:	370c      	adds	r7, #12
 8011014:	46bd      	mov	sp, r7
 8011016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801101a:	4770      	bx	lr

0801101c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801101c:	b480      	push	{r7}
 801101e:	b083      	sub	sp, #12
 8011020:	af00      	add	r7, sp, #0
 8011022:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	2200      	movs	r2, #0
 8011028:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801102a:	bf00      	nop
 801102c:	370c      	adds	r7, #12
 801102e:	46bd      	mov	sp, r7
 8011030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011034:	4770      	bx	lr

08011036 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011036:	b480      	push	{r7}
 8011038:	b085      	sub	sp, #20
 801103a:	af00      	add	r7, sp, #0
 801103c:	6078      	str	r0, [r7, #4]
 801103e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	685b      	ldr	r3, [r3, #4]
 8011044:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8011046:	683b      	ldr	r3, [r7, #0]
 8011048:	68fa      	ldr	r2, [r7, #12]
 801104a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801104c:	68fb      	ldr	r3, [r7, #12]
 801104e:	689a      	ldr	r2, [r3, #8]
 8011050:	683b      	ldr	r3, [r7, #0]
 8011052:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	689b      	ldr	r3, [r3, #8]
 8011058:	683a      	ldr	r2, [r7, #0]
 801105a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801105c:	68fb      	ldr	r3, [r7, #12]
 801105e:	683a      	ldr	r2, [r7, #0]
 8011060:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8011062:	683b      	ldr	r3, [r7, #0]
 8011064:	687a      	ldr	r2, [r7, #4]
 8011066:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	1c5a      	adds	r2, r3, #1
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	601a      	str	r2, [r3, #0]
}
 8011072:	bf00      	nop
 8011074:	3714      	adds	r7, #20
 8011076:	46bd      	mov	sp, r7
 8011078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801107c:	4770      	bx	lr

0801107e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801107e:	b480      	push	{r7}
 8011080:	b085      	sub	sp, #20
 8011082:	af00      	add	r7, sp, #0
 8011084:	6078      	str	r0, [r7, #4]
 8011086:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8011088:	683b      	ldr	r3, [r7, #0]
 801108a:	681b      	ldr	r3, [r3, #0]
 801108c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801108e:	68bb      	ldr	r3, [r7, #8]
 8011090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011094:	d103      	bne.n	801109e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	691b      	ldr	r3, [r3, #16]
 801109a:	60fb      	str	r3, [r7, #12]
 801109c:	e00c      	b.n	80110b8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	3308      	adds	r3, #8
 80110a2:	60fb      	str	r3, [r7, #12]
 80110a4:	e002      	b.n	80110ac <vListInsert+0x2e>
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	685b      	ldr	r3, [r3, #4]
 80110aa:	60fb      	str	r3, [r7, #12]
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	685b      	ldr	r3, [r3, #4]
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	68ba      	ldr	r2, [r7, #8]
 80110b4:	429a      	cmp	r2, r3
 80110b6:	d2f6      	bcs.n	80110a6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	685a      	ldr	r2, [r3, #4]
 80110bc:	683b      	ldr	r3, [r7, #0]
 80110be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80110c0:	683b      	ldr	r3, [r7, #0]
 80110c2:	685b      	ldr	r3, [r3, #4]
 80110c4:	683a      	ldr	r2, [r7, #0]
 80110c6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80110c8:	683b      	ldr	r3, [r7, #0]
 80110ca:	68fa      	ldr	r2, [r7, #12]
 80110cc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80110ce:	68fb      	ldr	r3, [r7, #12]
 80110d0:	683a      	ldr	r2, [r7, #0]
 80110d2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80110d4:	683b      	ldr	r3, [r7, #0]
 80110d6:	687a      	ldr	r2, [r7, #4]
 80110d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	681b      	ldr	r3, [r3, #0]
 80110de:	1c5a      	adds	r2, r3, #1
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	601a      	str	r2, [r3, #0]
}
 80110e4:	bf00      	nop
 80110e6:	3714      	adds	r7, #20
 80110e8:	46bd      	mov	sp, r7
 80110ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ee:	4770      	bx	lr

080110f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80110f0:	b480      	push	{r7}
 80110f2:	b085      	sub	sp, #20
 80110f4:	af00      	add	r7, sp, #0
 80110f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	691b      	ldr	r3, [r3, #16]
 80110fc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	685b      	ldr	r3, [r3, #4]
 8011102:	687a      	ldr	r2, [r7, #4]
 8011104:	6892      	ldr	r2, [r2, #8]
 8011106:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	689b      	ldr	r3, [r3, #8]
 801110c:	687a      	ldr	r2, [r7, #4]
 801110e:	6852      	ldr	r2, [r2, #4]
 8011110:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	685b      	ldr	r3, [r3, #4]
 8011116:	687a      	ldr	r2, [r7, #4]
 8011118:	429a      	cmp	r2, r3
 801111a:	d103      	bne.n	8011124 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	689a      	ldr	r2, [r3, #8]
 8011120:	68fb      	ldr	r3, [r7, #12]
 8011122:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	2200      	movs	r2, #0
 8011128:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801112a:	68fb      	ldr	r3, [r7, #12]
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	1e5a      	subs	r2, r3, #1
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8011134:	68fb      	ldr	r3, [r7, #12]
 8011136:	681b      	ldr	r3, [r3, #0]
}
 8011138:	4618      	mov	r0, r3
 801113a:	3714      	adds	r7, #20
 801113c:	46bd      	mov	sp, r7
 801113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011142:	4770      	bx	lr

08011144 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011144:	b580      	push	{r7, lr}
 8011146:	b084      	sub	sp, #16
 8011148:	af00      	add	r7, sp, #0
 801114a:	6078      	str	r0, [r7, #4]
 801114c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	2b00      	cmp	r3, #0
 8011156:	d10c      	bne.n	8011172 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8011158:	f04f 0350 	mov.w	r3, #80	; 0x50
 801115c:	b672      	cpsid	i
 801115e:	f383 8811 	msr	BASEPRI, r3
 8011162:	f3bf 8f6f 	isb	sy
 8011166:	f3bf 8f4f 	dsb	sy
 801116a:	b662      	cpsie	i
 801116c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801116e:	bf00      	nop
 8011170:	e7fe      	b.n	8011170 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8011172:	f002 f97b 	bl	801346c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	681a      	ldr	r2, [r3, #0]
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801117e:	68f9      	ldr	r1, [r7, #12]
 8011180:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011182:	fb01 f303 	mul.w	r3, r1, r3
 8011186:	441a      	add	r2, r3
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	2200      	movs	r2, #0
 8011190:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8011192:	68fb      	ldr	r3, [r7, #12]
 8011194:	681a      	ldr	r2, [r3, #0]
 8011196:	68fb      	ldr	r3, [r7, #12]
 8011198:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801119a:	68fb      	ldr	r3, [r7, #12]
 801119c:	681a      	ldr	r2, [r3, #0]
 801119e:	68fb      	ldr	r3, [r7, #12]
 80111a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80111a2:	3b01      	subs	r3, #1
 80111a4:	68f9      	ldr	r1, [r7, #12]
 80111a6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80111a8:	fb01 f303 	mul.w	r3, r1, r3
 80111ac:	441a      	add	r2, r3
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	22ff      	movs	r2, #255	; 0xff
 80111b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	22ff      	movs	r2, #255	; 0xff
 80111be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80111c2:	683b      	ldr	r3, [r7, #0]
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d114      	bne.n	80111f2 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	691b      	ldr	r3, [r3, #16]
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d01a      	beq.n	8011206 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80111d0:	68fb      	ldr	r3, [r7, #12]
 80111d2:	3310      	adds	r3, #16
 80111d4:	4618      	mov	r0, r3
 80111d6:	f001 fc37 	bl	8012a48 <xTaskRemoveFromEventList>
 80111da:	4603      	mov	r3, r0
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d012      	beq.n	8011206 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80111e0:	4b0c      	ldr	r3, [pc, #48]	; (8011214 <xQueueGenericReset+0xd0>)
 80111e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80111e6:	601a      	str	r2, [r3, #0]
 80111e8:	f3bf 8f4f 	dsb	sy
 80111ec:	f3bf 8f6f 	isb	sy
 80111f0:	e009      	b.n	8011206 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	3310      	adds	r3, #16
 80111f6:	4618      	mov	r0, r3
 80111f8:	f7ff fef0 	bl	8010fdc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80111fc:	68fb      	ldr	r3, [r7, #12]
 80111fe:	3324      	adds	r3, #36	; 0x24
 8011200:	4618      	mov	r0, r3
 8011202:	f7ff feeb 	bl	8010fdc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8011206:	f002 f965 	bl	80134d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801120a:	2301      	movs	r3, #1
}
 801120c:	4618      	mov	r0, r3
 801120e:	3710      	adds	r7, #16
 8011210:	46bd      	mov	sp, r7
 8011212:	bd80      	pop	{r7, pc}
 8011214:	e000ed04 	.word	0xe000ed04

08011218 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8011218:	b580      	push	{r7, lr}
 801121a:	b08e      	sub	sp, #56	; 0x38
 801121c:	af02      	add	r7, sp, #8
 801121e:	60f8      	str	r0, [r7, #12]
 8011220:	60b9      	str	r1, [r7, #8]
 8011222:	607a      	str	r2, [r7, #4]
 8011224:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011226:	68fb      	ldr	r3, [r7, #12]
 8011228:	2b00      	cmp	r3, #0
 801122a:	d10c      	bne.n	8011246 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 801122c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011230:	b672      	cpsid	i
 8011232:	f383 8811 	msr	BASEPRI, r3
 8011236:	f3bf 8f6f 	isb	sy
 801123a:	f3bf 8f4f 	dsb	sy
 801123e:	b662      	cpsie	i
 8011240:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011242:	bf00      	nop
 8011244:	e7fe      	b.n	8011244 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8011246:	683b      	ldr	r3, [r7, #0]
 8011248:	2b00      	cmp	r3, #0
 801124a:	d10c      	bne.n	8011266 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 801124c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011250:	b672      	cpsid	i
 8011252:	f383 8811 	msr	BASEPRI, r3
 8011256:	f3bf 8f6f 	isb	sy
 801125a:	f3bf 8f4f 	dsb	sy
 801125e:	b662      	cpsie	i
 8011260:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011262:	bf00      	nop
 8011264:	e7fe      	b.n	8011264 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	2b00      	cmp	r3, #0
 801126a:	d002      	beq.n	8011272 <xQueueGenericCreateStatic+0x5a>
 801126c:	68bb      	ldr	r3, [r7, #8]
 801126e:	2b00      	cmp	r3, #0
 8011270:	d001      	beq.n	8011276 <xQueueGenericCreateStatic+0x5e>
 8011272:	2301      	movs	r3, #1
 8011274:	e000      	b.n	8011278 <xQueueGenericCreateStatic+0x60>
 8011276:	2300      	movs	r3, #0
 8011278:	2b00      	cmp	r3, #0
 801127a:	d10c      	bne.n	8011296 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 801127c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011280:	b672      	cpsid	i
 8011282:	f383 8811 	msr	BASEPRI, r3
 8011286:	f3bf 8f6f 	isb	sy
 801128a:	f3bf 8f4f 	dsb	sy
 801128e:	b662      	cpsie	i
 8011290:	623b      	str	r3, [r7, #32]
}
 8011292:	bf00      	nop
 8011294:	e7fe      	b.n	8011294 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	2b00      	cmp	r3, #0
 801129a:	d102      	bne.n	80112a2 <xQueueGenericCreateStatic+0x8a>
 801129c:	68bb      	ldr	r3, [r7, #8]
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d101      	bne.n	80112a6 <xQueueGenericCreateStatic+0x8e>
 80112a2:	2301      	movs	r3, #1
 80112a4:	e000      	b.n	80112a8 <xQueueGenericCreateStatic+0x90>
 80112a6:	2300      	movs	r3, #0
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d10c      	bne.n	80112c6 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80112ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112b0:	b672      	cpsid	i
 80112b2:	f383 8811 	msr	BASEPRI, r3
 80112b6:	f3bf 8f6f 	isb	sy
 80112ba:	f3bf 8f4f 	dsb	sy
 80112be:	b662      	cpsie	i
 80112c0:	61fb      	str	r3, [r7, #28]
}
 80112c2:	bf00      	nop
 80112c4:	e7fe      	b.n	80112c4 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80112c6:	2348      	movs	r3, #72	; 0x48
 80112c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80112ca:	697b      	ldr	r3, [r7, #20]
 80112cc:	2b48      	cmp	r3, #72	; 0x48
 80112ce:	d00c      	beq.n	80112ea <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 80112d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112d4:	b672      	cpsid	i
 80112d6:	f383 8811 	msr	BASEPRI, r3
 80112da:	f3bf 8f6f 	isb	sy
 80112de:	f3bf 8f4f 	dsb	sy
 80112e2:	b662      	cpsie	i
 80112e4:	61bb      	str	r3, [r7, #24]
}
 80112e6:	bf00      	nop
 80112e8:	e7fe      	b.n	80112e8 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80112ea:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80112ec:	683b      	ldr	r3, [r7, #0]
 80112ee:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80112f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d00d      	beq.n	8011312 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80112f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112f8:	2201      	movs	r2, #1
 80112fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80112fe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8011302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011304:	9300      	str	r3, [sp, #0]
 8011306:	4613      	mov	r3, r2
 8011308:	687a      	ldr	r2, [r7, #4]
 801130a:	68b9      	ldr	r1, [r7, #8]
 801130c:	68f8      	ldr	r0, [r7, #12]
 801130e:	f000 f847 	bl	80113a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8011314:	4618      	mov	r0, r3
 8011316:	3730      	adds	r7, #48	; 0x30
 8011318:	46bd      	mov	sp, r7
 801131a:	bd80      	pop	{r7, pc}

0801131c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801131c:	b580      	push	{r7, lr}
 801131e:	b08a      	sub	sp, #40	; 0x28
 8011320:	af02      	add	r7, sp, #8
 8011322:	60f8      	str	r0, [r7, #12]
 8011324:	60b9      	str	r1, [r7, #8]
 8011326:	4613      	mov	r3, r2
 8011328:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801132a:	68fb      	ldr	r3, [r7, #12]
 801132c:	2b00      	cmp	r3, #0
 801132e:	d10c      	bne.n	801134a <xQueueGenericCreate+0x2e>
	__asm volatile
 8011330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011334:	b672      	cpsid	i
 8011336:	f383 8811 	msr	BASEPRI, r3
 801133a:	f3bf 8f6f 	isb	sy
 801133e:	f3bf 8f4f 	dsb	sy
 8011342:	b662      	cpsie	i
 8011344:	613b      	str	r3, [r7, #16]
}
 8011346:	bf00      	nop
 8011348:	e7fe      	b.n	8011348 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 801134a:	68bb      	ldr	r3, [r7, #8]
 801134c:	2b00      	cmp	r3, #0
 801134e:	d102      	bne.n	8011356 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8011350:	2300      	movs	r3, #0
 8011352:	61fb      	str	r3, [r7, #28]
 8011354:	e004      	b.n	8011360 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011356:	68fb      	ldr	r3, [r7, #12]
 8011358:	68ba      	ldr	r2, [r7, #8]
 801135a:	fb02 f303 	mul.w	r3, r2, r3
 801135e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8011360:	69fb      	ldr	r3, [r7, #28]
 8011362:	3348      	adds	r3, #72	; 0x48
 8011364:	4618      	mov	r0, r3
 8011366:	f002 f9ad 	bl	80136c4 <pvPortMalloc>
 801136a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801136c:	69bb      	ldr	r3, [r7, #24]
 801136e:	2b00      	cmp	r3, #0
 8011370:	d011      	beq.n	8011396 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8011372:	69bb      	ldr	r3, [r7, #24]
 8011374:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011376:	697b      	ldr	r3, [r7, #20]
 8011378:	3348      	adds	r3, #72	; 0x48
 801137a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801137c:	69bb      	ldr	r3, [r7, #24]
 801137e:	2200      	movs	r2, #0
 8011380:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011384:	79fa      	ldrb	r2, [r7, #7]
 8011386:	69bb      	ldr	r3, [r7, #24]
 8011388:	9300      	str	r3, [sp, #0]
 801138a:	4613      	mov	r3, r2
 801138c:	697a      	ldr	r2, [r7, #20]
 801138e:	68b9      	ldr	r1, [r7, #8]
 8011390:	68f8      	ldr	r0, [r7, #12]
 8011392:	f000 f805 	bl	80113a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011396:	69bb      	ldr	r3, [r7, #24]
	}
 8011398:	4618      	mov	r0, r3
 801139a:	3720      	adds	r7, #32
 801139c:	46bd      	mov	sp, r7
 801139e:	bd80      	pop	{r7, pc}

080113a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80113a0:	b580      	push	{r7, lr}
 80113a2:	b084      	sub	sp, #16
 80113a4:	af00      	add	r7, sp, #0
 80113a6:	60f8      	str	r0, [r7, #12]
 80113a8:	60b9      	str	r1, [r7, #8]
 80113aa:	607a      	str	r2, [r7, #4]
 80113ac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80113ae:	68bb      	ldr	r3, [r7, #8]
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d103      	bne.n	80113bc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80113b4:	69bb      	ldr	r3, [r7, #24]
 80113b6:	69ba      	ldr	r2, [r7, #24]
 80113b8:	601a      	str	r2, [r3, #0]
 80113ba:	e002      	b.n	80113c2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80113bc:	69bb      	ldr	r3, [r7, #24]
 80113be:	687a      	ldr	r2, [r7, #4]
 80113c0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80113c2:	69bb      	ldr	r3, [r7, #24]
 80113c4:	68fa      	ldr	r2, [r7, #12]
 80113c6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80113c8:	69bb      	ldr	r3, [r7, #24]
 80113ca:	68ba      	ldr	r2, [r7, #8]
 80113cc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80113ce:	2101      	movs	r1, #1
 80113d0:	69b8      	ldr	r0, [r7, #24]
 80113d2:	f7ff feb7 	bl	8011144 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80113d6:	bf00      	nop
 80113d8:	3710      	adds	r7, #16
 80113da:	46bd      	mov	sp, r7
 80113dc:	bd80      	pop	{r7, pc}
	...

080113e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80113e0:	b580      	push	{r7, lr}
 80113e2:	b08e      	sub	sp, #56	; 0x38
 80113e4:	af00      	add	r7, sp, #0
 80113e6:	60f8      	str	r0, [r7, #12]
 80113e8:	60b9      	str	r1, [r7, #8]
 80113ea:	607a      	str	r2, [r7, #4]
 80113ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80113ee:	2300      	movs	r3, #0
 80113f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80113f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d10c      	bne.n	8011416 <xQueueGenericSend+0x36>
	__asm volatile
 80113fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011400:	b672      	cpsid	i
 8011402:	f383 8811 	msr	BASEPRI, r3
 8011406:	f3bf 8f6f 	isb	sy
 801140a:	f3bf 8f4f 	dsb	sy
 801140e:	b662      	cpsie	i
 8011410:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011412:	bf00      	nop
 8011414:	e7fe      	b.n	8011414 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011416:	68bb      	ldr	r3, [r7, #8]
 8011418:	2b00      	cmp	r3, #0
 801141a:	d103      	bne.n	8011424 <xQueueGenericSend+0x44>
 801141c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801141e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011420:	2b00      	cmp	r3, #0
 8011422:	d101      	bne.n	8011428 <xQueueGenericSend+0x48>
 8011424:	2301      	movs	r3, #1
 8011426:	e000      	b.n	801142a <xQueueGenericSend+0x4a>
 8011428:	2300      	movs	r3, #0
 801142a:	2b00      	cmp	r3, #0
 801142c:	d10c      	bne.n	8011448 <xQueueGenericSend+0x68>
	__asm volatile
 801142e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011432:	b672      	cpsid	i
 8011434:	f383 8811 	msr	BASEPRI, r3
 8011438:	f3bf 8f6f 	isb	sy
 801143c:	f3bf 8f4f 	dsb	sy
 8011440:	b662      	cpsie	i
 8011442:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011444:	bf00      	nop
 8011446:	e7fe      	b.n	8011446 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011448:	683b      	ldr	r3, [r7, #0]
 801144a:	2b02      	cmp	r3, #2
 801144c:	d103      	bne.n	8011456 <xQueueGenericSend+0x76>
 801144e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011452:	2b01      	cmp	r3, #1
 8011454:	d101      	bne.n	801145a <xQueueGenericSend+0x7a>
 8011456:	2301      	movs	r3, #1
 8011458:	e000      	b.n	801145c <xQueueGenericSend+0x7c>
 801145a:	2300      	movs	r3, #0
 801145c:	2b00      	cmp	r3, #0
 801145e:	d10c      	bne.n	801147a <xQueueGenericSend+0x9a>
	__asm volatile
 8011460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011464:	b672      	cpsid	i
 8011466:	f383 8811 	msr	BASEPRI, r3
 801146a:	f3bf 8f6f 	isb	sy
 801146e:	f3bf 8f4f 	dsb	sy
 8011472:	b662      	cpsie	i
 8011474:	623b      	str	r3, [r7, #32]
}
 8011476:	bf00      	nop
 8011478:	e7fe      	b.n	8011478 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801147a:	f001 fcab 	bl	8012dd4 <xTaskGetSchedulerState>
 801147e:	4603      	mov	r3, r0
 8011480:	2b00      	cmp	r3, #0
 8011482:	d102      	bne.n	801148a <xQueueGenericSend+0xaa>
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	2b00      	cmp	r3, #0
 8011488:	d101      	bne.n	801148e <xQueueGenericSend+0xae>
 801148a:	2301      	movs	r3, #1
 801148c:	e000      	b.n	8011490 <xQueueGenericSend+0xb0>
 801148e:	2300      	movs	r3, #0
 8011490:	2b00      	cmp	r3, #0
 8011492:	d10c      	bne.n	80114ae <xQueueGenericSend+0xce>
	__asm volatile
 8011494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011498:	b672      	cpsid	i
 801149a:	f383 8811 	msr	BASEPRI, r3
 801149e:	f3bf 8f6f 	isb	sy
 80114a2:	f3bf 8f4f 	dsb	sy
 80114a6:	b662      	cpsie	i
 80114a8:	61fb      	str	r3, [r7, #28]
}
 80114aa:	bf00      	nop
 80114ac:	e7fe      	b.n	80114ac <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80114ae:	f001 ffdd 	bl	801346c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80114b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80114b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80114ba:	429a      	cmp	r2, r3
 80114bc:	d302      	bcc.n	80114c4 <xQueueGenericSend+0xe4>
 80114be:	683b      	ldr	r3, [r7, #0]
 80114c0:	2b02      	cmp	r3, #2
 80114c2:	d129      	bne.n	8011518 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80114c4:	683a      	ldr	r2, [r7, #0]
 80114c6:	68b9      	ldr	r1, [r7, #8]
 80114c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80114ca:	f000 fc82 	bl	8011dd2 <prvCopyDataToQueue>
 80114ce:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80114d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d010      	beq.n	80114fa <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80114d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114da:	3324      	adds	r3, #36	; 0x24
 80114dc:	4618      	mov	r0, r3
 80114de:	f001 fab3 	bl	8012a48 <xTaskRemoveFromEventList>
 80114e2:	4603      	mov	r3, r0
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d013      	beq.n	8011510 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80114e8:	4b3f      	ldr	r3, [pc, #252]	; (80115e8 <xQueueGenericSend+0x208>)
 80114ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80114ee:	601a      	str	r2, [r3, #0]
 80114f0:	f3bf 8f4f 	dsb	sy
 80114f4:	f3bf 8f6f 	isb	sy
 80114f8:	e00a      	b.n	8011510 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80114fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d007      	beq.n	8011510 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011500:	4b39      	ldr	r3, [pc, #228]	; (80115e8 <xQueueGenericSend+0x208>)
 8011502:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011506:	601a      	str	r2, [r3, #0]
 8011508:	f3bf 8f4f 	dsb	sy
 801150c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011510:	f001 ffe0 	bl	80134d4 <vPortExitCritical>
				return pdPASS;
 8011514:	2301      	movs	r3, #1
 8011516:	e063      	b.n	80115e0 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	2b00      	cmp	r3, #0
 801151c:	d103      	bne.n	8011526 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801151e:	f001 ffd9 	bl	80134d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8011522:	2300      	movs	r3, #0
 8011524:	e05c      	b.n	80115e0 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011528:	2b00      	cmp	r3, #0
 801152a:	d106      	bne.n	801153a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801152c:	f107 0314 	add.w	r3, r7, #20
 8011530:	4618      	mov	r0, r3
 8011532:	f001 faed 	bl	8012b10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011536:	2301      	movs	r3, #1
 8011538:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801153a:	f001 ffcb 	bl	80134d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801153e:	f001 f853 	bl	80125e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011542:	f001 ff93 	bl	801346c <vPortEnterCritical>
 8011546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011548:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801154c:	b25b      	sxtb	r3, r3
 801154e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011552:	d103      	bne.n	801155c <xQueueGenericSend+0x17c>
 8011554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011556:	2200      	movs	r2, #0
 8011558:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801155c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801155e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011562:	b25b      	sxtb	r3, r3
 8011564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011568:	d103      	bne.n	8011572 <xQueueGenericSend+0x192>
 801156a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801156c:	2200      	movs	r2, #0
 801156e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011572:	f001 ffaf 	bl	80134d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011576:	1d3a      	adds	r2, r7, #4
 8011578:	f107 0314 	add.w	r3, r7, #20
 801157c:	4611      	mov	r1, r2
 801157e:	4618      	mov	r0, r3
 8011580:	f001 fadc 	bl	8012b3c <xTaskCheckForTimeOut>
 8011584:	4603      	mov	r3, r0
 8011586:	2b00      	cmp	r3, #0
 8011588:	d124      	bne.n	80115d4 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801158a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801158c:	f000 fd19 	bl	8011fc2 <prvIsQueueFull>
 8011590:	4603      	mov	r3, r0
 8011592:	2b00      	cmp	r3, #0
 8011594:	d018      	beq.n	80115c8 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011598:	3310      	adds	r3, #16
 801159a:	687a      	ldr	r2, [r7, #4]
 801159c:	4611      	mov	r1, r2
 801159e:	4618      	mov	r0, r3
 80115a0:	f001 fa2c 	bl	80129fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80115a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80115a6:	f000 fca4 	bl	8011ef2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80115aa:	f001 f82b 	bl	8012604 <xTaskResumeAll>
 80115ae:	4603      	mov	r3, r0
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	f47f af7c 	bne.w	80114ae <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80115b6:	4b0c      	ldr	r3, [pc, #48]	; (80115e8 <xQueueGenericSend+0x208>)
 80115b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80115bc:	601a      	str	r2, [r3, #0]
 80115be:	f3bf 8f4f 	dsb	sy
 80115c2:	f3bf 8f6f 	isb	sy
 80115c6:	e772      	b.n	80114ae <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80115c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80115ca:	f000 fc92 	bl	8011ef2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80115ce:	f001 f819 	bl	8012604 <xTaskResumeAll>
 80115d2:	e76c      	b.n	80114ae <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80115d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80115d6:	f000 fc8c 	bl	8011ef2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80115da:	f001 f813 	bl	8012604 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80115de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80115e0:	4618      	mov	r0, r3
 80115e2:	3738      	adds	r7, #56	; 0x38
 80115e4:	46bd      	mov	sp, r7
 80115e6:	bd80      	pop	{r7, pc}
 80115e8:	e000ed04 	.word	0xe000ed04

080115ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80115ec:	b580      	push	{r7, lr}
 80115ee:	b08e      	sub	sp, #56	; 0x38
 80115f0:	af00      	add	r7, sp, #0
 80115f2:	60f8      	str	r0, [r7, #12]
 80115f4:	60b9      	str	r1, [r7, #8]
 80115f6:	607a      	str	r2, [r7, #4]
 80115f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80115fa:	68fb      	ldr	r3, [r7, #12]
 80115fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80115fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011600:	2b00      	cmp	r3, #0
 8011602:	d10c      	bne.n	801161e <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8011604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011608:	b672      	cpsid	i
 801160a:	f383 8811 	msr	BASEPRI, r3
 801160e:	f3bf 8f6f 	isb	sy
 8011612:	f3bf 8f4f 	dsb	sy
 8011616:	b662      	cpsie	i
 8011618:	627b      	str	r3, [r7, #36]	; 0x24
}
 801161a:	bf00      	nop
 801161c:	e7fe      	b.n	801161c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801161e:	68bb      	ldr	r3, [r7, #8]
 8011620:	2b00      	cmp	r3, #0
 8011622:	d103      	bne.n	801162c <xQueueGenericSendFromISR+0x40>
 8011624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011628:	2b00      	cmp	r3, #0
 801162a:	d101      	bne.n	8011630 <xQueueGenericSendFromISR+0x44>
 801162c:	2301      	movs	r3, #1
 801162e:	e000      	b.n	8011632 <xQueueGenericSendFromISR+0x46>
 8011630:	2300      	movs	r3, #0
 8011632:	2b00      	cmp	r3, #0
 8011634:	d10c      	bne.n	8011650 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8011636:	f04f 0350 	mov.w	r3, #80	; 0x50
 801163a:	b672      	cpsid	i
 801163c:	f383 8811 	msr	BASEPRI, r3
 8011640:	f3bf 8f6f 	isb	sy
 8011644:	f3bf 8f4f 	dsb	sy
 8011648:	b662      	cpsie	i
 801164a:	623b      	str	r3, [r7, #32]
}
 801164c:	bf00      	nop
 801164e:	e7fe      	b.n	801164e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011650:	683b      	ldr	r3, [r7, #0]
 8011652:	2b02      	cmp	r3, #2
 8011654:	d103      	bne.n	801165e <xQueueGenericSendFromISR+0x72>
 8011656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801165a:	2b01      	cmp	r3, #1
 801165c:	d101      	bne.n	8011662 <xQueueGenericSendFromISR+0x76>
 801165e:	2301      	movs	r3, #1
 8011660:	e000      	b.n	8011664 <xQueueGenericSendFromISR+0x78>
 8011662:	2300      	movs	r3, #0
 8011664:	2b00      	cmp	r3, #0
 8011666:	d10c      	bne.n	8011682 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8011668:	f04f 0350 	mov.w	r3, #80	; 0x50
 801166c:	b672      	cpsid	i
 801166e:	f383 8811 	msr	BASEPRI, r3
 8011672:	f3bf 8f6f 	isb	sy
 8011676:	f3bf 8f4f 	dsb	sy
 801167a:	b662      	cpsie	i
 801167c:	61fb      	str	r3, [r7, #28]
}
 801167e:	bf00      	nop
 8011680:	e7fe      	b.n	8011680 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011682:	f001 ffdb 	bl	801363c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011686:	f3ef 8211 	mrs	r2, BASEPRI
 801168a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801168e:	b672      	cpsid	i
 8011690:	f383 8811 	msr	BASEPRI, r3
 8011694:	f3bf 8f6f 	isb	sy
 8011698:	f3bf 8f4f 	dsb	sy
 801169c:	b662      	cpsie	i
 801169e:	61ba      	str	r2, [r7, #24]
 80116a0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80116a2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80116a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80116a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80116aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80116ae:	429a      	cmp	r2, r3
 80116b0:	d302      	bcc.n	80116b8 <xQueueGenericSendFromISR+0xcc>
 80116b2:	683b      	ldr	r3, [r7, #0]
 80116b4:	2b02      	cmp	r3, #2
 80116b6:	d12c      	bne.n	8011712 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80116b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80116be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80116c2:	683a      	ldr	r2, [r7, #0]
 80116c4:	68b9      	ldr	r1, [r7, #8]
 80116c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80116c8:	f000 fb83 	bl	8011dd2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80116cc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80116d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116d4:	d112      	bne.n	80116fc <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80116d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d016      	beq.n	801170c <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80116de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116e0:	3324      	adds	r3, #36	; 0x24
 80116e2:	4618      	mov	r0, r3
 80116e4:	f001 f9b0 	bl	8012a48 <xTaskRemoveFromEventList>
 80116e8:	4603      	mov	r3, r0
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d00e      	beq.n	801170c <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d00b      	beq.n	801170c <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	2201      	movs	r2, #1
 80116f8:	601a      	str	r2, [r3, #0]
 80116fa:	e007      	b.n	801170c <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80116fc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011700:	3301      	adds	r3, #1
 8011702:	b2db      	uxtb	r3, r3
 8011704:	b25a      	sxtb	r2, r3
 8011706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011708:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801170c:	2301      	movs	r3, #1
 801170e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8011710:	e001      	b.n	8011716 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011712:	2300      	movs	r3, #0
 8011714:	637b      	str	r3, [r7, #52]	; 0x34
 8011716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011718:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801171a:	693b      	ldr	r3, [r7, #16]
 801171c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8011720:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011724:	4618      	mov	r0, r3
 8011726:	3738      	adds	r7, #56	; 0x38
 8011728:	46bd      	mov	sp, r7
 801172a:	bd80      	pop	{r7, pc}

0801172c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801172c:	b580      	push	{r7, lr}
 801172e:	b08e      	sub	sp, #56	; 0x38
 8011730:	af00      	add	r7, sp, #0
 8011732:	6078      	str	r0, [r7, #4]
 8011734:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801173a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801173c:	2b00      	cmp	r3, #0
 801173e:	d10c      	bne.n	801175a <xQueueGiveFromISR+0x2e>
	__asm volatile
 8011740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011744:	b672      	cpsid	i
 8011746:	f383 8811 	msr	BASEPRI, r3
 801174a:	f3bf 8f6f 	isb	sy
 801174e:	f3bf 8f4f 	dsb	sy
 8011752:	b662      	cpsie	i
 8011754:	623b      	str	r3, [r7, #32]
}
 8011756:	bf00      	nop
 8011758:	e7fe      	b.n	8011758 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801175a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801175c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801175e:	2b00      	cmp	r3, #0
 8011760:	d00c      	beq.n	801177c <xQueueGiveFromISR+0x50>
	__asm volatile
 8011762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011766:	b672      	cpsid	i
 8011768:	f383 8811 	msr	BASEPRI, r3
 801176c:	f3bf 8f6f 	isb	sy
 8011770:	f3bf 8f4f 	dsb	sy
 8011774:	b662      	cpsie	i
 8011776:	61fb      	str	r3, [r7, #28]
}
 8011778:	bf00      	nop
 801177a:	e7fe      	b.n	801177a <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 801177c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	2b00      	cmp	r3, #0
 8011782:	d103      	bne.n	801178c <xQueueGiveFromISR+0x60>
 8011784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011786:	689b      	ldr	r3, [r3, #8]
 8011788:	2b00      	cmp	r3, #0
 801178a:	d101      	bne.n	8011790 <xQueueGiveFromISR+0x64>
 801178c:	2301      	movs	r3, #1
 801178e:	e000      	b.n	8011792 <xQueueGiveFromISR+0x66>
 8011790:	2300      	movs	r3, #0
 8011792:	2b00      	cmp	r3, #0
 8011794:	d10c      	bne.n	80117b0 <xQueueGiveFromISR+0x84>
	__asm volatile
 8011796:	f04f 0350 	mov.w	r3, #80	; 0x50
 801179a:	b672      	cpsid	i
 801179c:	f383 8811 	msr	BASEPRI, r3
 80117a0:	f3bf 8f6f 	isb	sy
 80117a4:	f3bf 8f4f 	dsb	sy
 80117a8:	b662      	cpsie	i
 80117aa:	61bb      	str	r3, [r7, #24]
}
 80117ac:	bf00      	nop
 80117ae:	e7fe      	b.n	80117ae <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80117b0:	f001 ff44 	bl	801363c <vPortValidateInterruptPriority>
	__asm volatile
 80117b4:	f3ef 8211 	mrs	r2, BASEPRI
 80117b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117bc:	b672      	cpsid	i
 80117be:	f383 8811 	msr	BASEPRI, r3
 80117c2:	f3bf 8f6f 	isb	sy
 80117c6:	f3bf 8f4f 	dsb	sy
 80117ca:	b662      	cpsie	i
 80117cc:	617a      	str	r2, [r7, #20]
 80117ce:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80117d0:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80117d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80117d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80117d8:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80117da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80117de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80117e0:	429a      	cmp	r2, r3
 80117e2:	d22b      	bcs.n	801183c <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80117e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80117ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80117ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117f0:	1c5a      	adds	r2, r3, #1
 80117f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117f4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80117f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80117fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117fe:	d112      	bne.n	8011826 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011804:	2b00      	cmp	r3, #0
 8011806:	d016      	beq.n	8011836 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801180a:	3324      	adds	r3, #36	; 0x24
 801180c:	4618      	mov	r0, r3
 801180e:	f001 f91b 	bl	8012a48 <xTaskRemoveFromEventList>
 8011812:	4603      	mov	r3, r0
 8011814:	2b00      	cmp	r3, #0
 8011816:	d00e      	beq.n	8011836 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011818:	683b      	ldr	r3, [r7, #0]
 801181a:	2b00      	cmp	r3, #0
 801181c:	d00b      	beq.n	8011836 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801181e:	683b      	ldr	r3, [r7, #0]
 8011820:	2201      	movs	r2, #1
 8011822:	601a      	str	r2, [r3, #0]
 8011824:	e007      	b.n	8011836 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011826:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801182a:	3301      	adds	r3, #1
 801182c:	b2db      	uxtb	r3, r3
 801182e:	b25a      	sxtb	r2, r3
 8011830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011832:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011836:	2301      	movs	r3, #1
 8011838:	637b      	str	r3, [r7, #52]	; 0x34
 801183a:	e001      	b.n	8011840 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801183c:	2300      	movs	r3, #0
 801183e:	637b      	str	r3, [r7, #52]	; 0x34
 8011840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011842:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8011844:	68fb      	ldr	r3, [r7, #12]
 8011846:	f383 8811 	msr	BASEPRI, r3
}
 801184a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801184c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801184e:	4618      	mov	r0, r3
 8011850:	3738      	adds	r7, #56	; 0x38
 8011852:	46bd      	mov	sp, r7
 8011854:	bd80      	pop	{r7, pc}
	...

08011858 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8011858:	b580      	push	{r7, lr}
 801185a:	b08c      	sub	sp, #48	; 0x30
 801185c:	af00      	add	r7, sp, #0
 801185e:	60f8      	str	r0, [r7, #12]
 8011860:	60b9      	str	r1, [r7, #8]
 8011862:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8011864:	2300      	movs	r3, #0
 8011866:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011868:	68fb      	ldr	r3, [r7, #12]
 801186a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801186c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801186e:	2b00      	cmp	r3, #0
 8011870:	d10c      	bne.n	801188c <xQueueReceive+0x34>
	__asm volatile
 8011872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011876:	b672      	cpsid	i
 8011878:	f383 8811 	msr	BASEPRI, r3
 801187c:	f3bf 8f6f 	isb	sy
 8011880:	f3bf 8f4f 	dsb	sy
 8011884:	b662      	cpsie	i
 8011886:	623b      	str	r3, [r7, #32]
}
 8011888:	bf00      	nop
 801188a:	e7fe      	b.n	801188a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801188c:	68bb      	ldr	r3, [r7, #8]
 801188e:	2b00      	cmp	r3, #0
 8011890:	d103      	bne.n	801189a <xQueueReceive+0x42>
 8011892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011896:	2b00      	cmp	r3, #0
 8011898:	d101      	bne.n	801189e <xQueueReceive+0x46>
 801189a:	2301      	movs	r3, #1
 801189c:	e000      	b.n	80118a0 <xQueueReceive+0x48>
 801189e:	2300      	movs	r3, #0
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d10c      	bne.n	80118be <xQueueReceive+0x66>
	__asm volatile
 80118a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118a8:	b672      	cpsid	i
 80118aa:	f383 8811 	msr	BASEPRI, r3
 80118ae:	f3bf 8f6f 	isb	sy
 80118b2:	f3bf 8f4f 	dsb	sy
 80118b6:	b662      	cpsie	i
 80118b8:	61fb      	str	r3, [r7, #28]
}
 80118ba:	bf00      	nop
 80118bc:	e7fe      	b.n	80118bc <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80118be:	f001 fa89 	bl	8012dd4 <xTaskGetSchedulerState>
 80118c2:	4603      	mov	r3, r0
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d102      	bne.n	80118ce <xQueueReceive+0x76>
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d101      	bne.n	80118d2 <xQueueReceive+0x7a>
 80118ce:	2301      	movs	r3, #1
 80118d0:	e000      	b.n	80118d4 <xQueueReceive+0x7c>
 80118d2:	2300      	movs	r3, #0
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d10c      	bne.n	80118f2 <xQueueReceive+0x9a>
	__asm volatile
 80118d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118dc:	b672      	cpsid	i
 80118de:	f383 8811 	msr	BASEPRI, r3
 80118e2:	f3bf 8f6f 	isb	sy
 80118e6:	f3bf 8f4f 	dsb	sy
 80118ea:	b662      	cpsie	i
 80118ec:	61bb      	str	r3, [r7, #24]
}
 80118ee:	bf00      	nop
 80118f0:	e7fe      	b.n	80118f0 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80118f2:	f001 fdbb 	bl	801346c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80118f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80118fa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80118fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d01f      	beq.n	8011942 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011902:	68b9      	ldr	r1, [r7, #8]
 8011904:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011906:	f000 face 	bl	8011ea6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801190a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801190c:	1e5a      	subs	r2, r3, #1
 801190e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011910:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011914:	691b      	ldr	r3, [r3, #16]
 8011916:	2b00      	cmp	r3, #0
 8011918:	d00f      	beq.n	801193a <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801191a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801191c:	3310      	adds	r3, #16
 801191e:	4618      	mov	r0, r3
 8011920:	f001 f892 	bl	8012a48 <xTaskRemoveFromEventList>
 8011924:	4603      	mov	r3, r0
 8011926:	2b00      	cmp	r3, #0
 8011928:	d007      	beq.n	801193a <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801192a:	4b3d      	ldr	r3, [pc, #244]	; (8011a20 <xQueueReceive+0x1c8>)
 801192c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011930:	601a      	str	r2, [r3, #0]
 8011932:	f3bf 8f4f 	dsb	sy
 8011936:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801193a:	f001 fdcb 	bl	80134d4 <vPortExitCritical>
				return pdPASS;
 801193e:	2301      	movs	r3, #1
 8011940:	e069      	b.n	8011a16 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	2b00      	cmp	r3, #0
 8011946:	d103      	bne.n	8011950 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011948:	f001 fdc4 	bl	80134d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801194c:	2300      	movs	r3, #0
 801194e:	e062      	b.n	8011a16 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011952:	2b00      	cmp	r3, #0
 8011954:	d106      	bne.n	8011964 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011956:	f107 0310 	add.w	r3, r7, #16
 801195a:	4618      	mov	r0, r3
 801195c:	f001 f8d8 	bl	8012b10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011960:	2301      	movs	r3, #1
 8011962:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011964:	f001 fdb6 	bl	80134d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011968:	f000 fe3e 	bl	80125e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801196c:	f001 fd7e 	bl	801346c <vPortEnterCritical>
 8011970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011972:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011976:	b25b      	sxtb	r3, r3
 8011978:	f1b3 3fff 	cmp.w	r3, #4294967295
 801197c:	d103      	bne.n	8011986 <xQueueReceive+0x12e>
 801197e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011980:	2200      	movs	r2, #0
 8011982:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011988:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801198c:	b25b      	sxtb	r3, r3
 801198e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011992:	d103      	bne.n	801199c <xQueueReceive+0x144>
 8011994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011996:	2200      	movs	r2, #0
 8011998:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801199c:	f001 fd9a 	bl	80134d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80119a0:	1d3a      	adds	r2, r7, #4
 80119a2:	f107 0310 	add.w	r3, r7, #16
 80119a6:	4611      	mov	r1, r2
 80119a8:	4618      	mov	r0, r3
 80119aa:	f001 f8c7 	bl	8012b3c <xTaskCheckForTimeOut>
 80119ae:	4603      	mov	r3, r0
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d123      	bne.n	80119fc <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80119b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80119b6:	f000 faee 	bl	8011f96 <prvIsQueueEmpty>
 80119ba:	4603      	mov	r3, r0
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d017      	beq.n	80119f0 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80119c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119c2:	3324      	adds	r3, #36	; 0x24
 80119c4:	687a      	ldr	r2, [r7, #4]
 80119c6:	4611      	mov	r1, r2
 80119c8:	4618      	mov	r0, r3
 80119ca:	f001 f817 	bl	80129fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80119ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80119d0:	f000 fa8f 	bl	8011ef2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80119d4:	f000 fe16 	bl	8012604 <xTaskResumeAll>
 80119d8:	4603      	mov	r3, r0
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d189      	bne.n	80118f2 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 80119de:	4b10      	ldr	r3, [pc, #64]	; (8011a20 <xQueueReceive+0x1c8>)
 80119e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80119e4:	601a      	str	r2, [r3, #0]
 80119e6:	f3bf 8f4f 	dsb	sy
 80119ea:	f3bf 8f6f 	isb	sy
 80119ee:	e780      	b.n	80118f2 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80119f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80119f2:	f000 fa7e 	bl	8011ef2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80119f6:	f000 fe05 	bl	8012604 <xTaskResumeAll>
 80119fa:	e77a      	b.n	80118f2 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80119fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80119fe:	f000 fa78 	bl	8011ef2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011a02:	f000 fdff 	bl	8012604 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011a06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011a08:	f000 fac5 	bl	8011f96 <prvIsQueueEmpty>
 8011a0c:	4603      	mov	r3, r0
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	f43f af6f 	beq.w	80118f2 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011a14:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011a16:	4618      	mov	r0, r3
 8011a18:	3730      	adds	r7, #48	; 0x30
 8011a1a:	46bd      	mov	sp, r7
 8011a1c:	bd80      	pop	{r7, pc}
 8011a1e:	bf00      	nop
 8011a20:	e000ed04 	.word	0xe000ed04

08011a24 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8011a24:	b580      	push	{r7, lr}
 8011a26:	b08e      	sub	sp, #56	; 0x38
 8011a28:	af00      	add	r7, sp, #0
 8011a2a:	6078      	str	r0, [r7, #4]
 8011a2c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8011a2e:	2300      	movs	r3, #0
 8011a30:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8011a36:	2300      	movs	r3, #0
 8011a38:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d10c      	bne.n	8011a5a <xQueueSemaphoreTake+0x36>
	__asm volatile
 8011a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a44:	b672      	cpsid	i
 8011a46:	f383 8811 	msr	BASEPRI, r3
 8011a4a:	f3bf 8f6f 	isb	sy
 8011a4e:	f3bf 8f4f 	dsb	sy
 8011a52:	b662      	cpsie	i
 8011a54:	623b      	str	r3, [r7, #32]
}
 8011a56:	bf00      	nop
 8011a58:	e7fe      	b.n	8011a58 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d00c      	beq.n	8011a7c <xQueueSemaphoreTake+0x58>
	__asm volatile
 8011a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a66:	b672      	cpsid	i
 8011a68:	f383 8811 	msr	BASEPRI, r3
 8011a6c:	f3bf 8f6f 	isb	sy
 8011a70:	f3bf 8f4f 	dsb	sy
 8011a74:	b662      	cpsie	i
 8011a76:	61fb      	str	r3, [r7, #28]
}
 8011a78:	bf00      	nop
 8011a7a:	e7fe      	b.n	8011a7a <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011a7c:	f001 f9aa 	bl	8012dd4 <xTaskGetSchedulerState>
 8011a80:	4603      	mov	r3, r0
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d102      	bne.n	8011a8c <xQueueSemaphoreTake+0x68>
 8011a86:	683b      	ldr	r3, [r7, #0]
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d101      	bne.n	8011a90 <xQueueSemaphoreTake+0x6c>
 8011a8c:	2301      	movs	r3, #1
 8011a8e:	e000      	b.n	8011a92 <xQueueSemaphoreTake+0x6e>
 8011a90:	2300      	movs	r3, #0
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d10c      	bne.n	8011ab0 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8011a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a9a:	b672      	cpsid	i
 8011a9c:	f383 8811 	msr	BASEPRI, r3
 8011aa0:	f3bf 8f6f 	isb	sy
 8011aa4:	f3bf 8f4f 	dsb	sy
 8011aa8:	b662      	cpsie	i
 8011aaa:	61bb      	str	r3, [r7, #24]
}
 8011aac:	bf00      	nop
 8011aae:	e7fe      	b.n	8011aae <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011ab0:	f001 fcdc 	bl	801346c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8011ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ab8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8011aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d024      	beq.n	8011b0a <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8011ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ac2:	1e5a      	subs	r2, r3, #1
 8011ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ac6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d104      	bne.n	8011ada <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8011ad0:	f001 fb46 	bl	8013160 <pvTaskIncrementMutexHeldCount>
 8011ad4:	4602      	mov	r2, r0
 8011ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ad8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011adc:	691b      	ldr	r3, [r3, #16]
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d00f      	beq.n	8011b02 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ae4:	3310      	adds	r3, #16
 8011ae6:	4618      	mov	r0, r3
 8011ae8:	f000 ffae 	bl	8012a48 <xTaskRemoveFromEventList>
 8011aec:	4603      	mov	r3, r0
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d007      	beq.n	8011b02 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011af2:	4b55      	ldr	r3, [pc, #340]	; (8011c48 <xQueueSemaphoreTake+0x224>)
 8011af4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011af8:	601a      	str	r2, [r3, #0]
 8011afa:	f3bf 8f4f 	dsb	sy
 8011afe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011b02:	f001 fce7 	bl	80134d4 <vPortExitCritical>
				return pdPASS;
 8011b06:	2301      	movs	r3, #1
 8011b08:	e099      	b.n	8011c3e <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011b0a:	683b      	ldr	r3, [r7, #0]
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d113      	bne.n	8011b38 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8011b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d00c      	beq.n	8011b30 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8011b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b1a:	b672      	cpsid	i
 8011b1c:	f383 8811 	msr	BASEPRI, r3
 8011b20:	f3bf 8f6f 	isb	sy
 8011b24:	f3bf 8f4f 	dsb	sy
 8011b28:	b662      	cpsie	i
 8011b2a:	617b      	str	r3, [r7, #20]
}
 8011b2c:	bf00      	nop
 8011b2e:	e7fe      	b.n	8011b2e <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8011b30:	f001 fcd0 	bl	80134d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011b34:	2300      	movs	r3, #0
 8011b36:	e082      	b.n	8011c3e <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d106      	bne.n	8011b4c <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011b3e:	f107 030c 	add.w	r3, r7, #12
 8011b42:	4618      	mov	r0, r3
 8011b44:	f000 ffe4 	bl	8012b10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011b48:	2301      	movs	r3, #1
 8011b4a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011b4c:	f001 fcc2 	bl	80134d4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011b50:	f000 fd4a 	bl	80125e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011b54:	f001 fc8a 	bl	801346c <vPortEnterCritical>
 8011b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011b5e:	b25b      	sxtb	r3, r3
 8011b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b64:	d103      	bne.n	8011b6e <xQueueSemaphoreTake+0x14a>
 8011b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b68:	2200      	movs	r2, #0
 8011b6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011b74:	b25b      	sxtb	r3, r3
 8011b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b7a:	d103      	bne.n	8011b84 <xQueueSemaphoreTake+0x160>
 8011b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b7e:	2200      	movs	r2, #0
 8011b80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011b84:	f001 fca6 	bl	80134d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011b88:	463a      	mov	r2, r7
 8011b8a:	f107 030c 	add.w	r3, r7, #12
 8011b8e:	4611      	mov	r1, r2
 8011b90:	4618      	mov	r0, r3
 8011b92:	f000 ffd3 	bl	8012b3c <xTaskCheckForTimeOut>
 8011b96:	4603      	mov	r3, r0
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d132      	bne.n	8011c02 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011b9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011b9e:	f000 f9fa 	bl	8011f96 <prvIsQueueEmpty>
 8011ba2:	4603      	mov	r3, r0
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d026      	beq.n	8011bf6 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d109      	bne.n	8011bc4 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8011bb0:	f001 fc5c 	bl	801346c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bb6:	689b      	ldr	r3, [r3, #8]
 8011bb8:	4618      	mov	r0, r3
 8011bba:	f001 f929 	bl	8012e10 <xTaskPriorityInherit>
 8011bbe:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8011bc0:	f001 fc88 	bl	80134d4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bc6:	3324      	adds	r3, #36	; 0x24
 8011bc8:	683a      	ldr	r2, [r7, #0]
 8011bca:	4611      	mov	r1, r2
 8011bcc:	4618      	mov	r0, r3
 8011bce:	f000 ff15 	bl	80129fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011bd2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011bd4:	f000 f98d 	bl	8011ef2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011bd8:	f000 fd14 	bl	8012604 <xTaskResumeAll>
 8011bdc:	4603      	mov	r3, r0
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	f47f af66 	bne.w	8011ab0 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8011be4:	4b18      	ldr	r3, [pc, #96]	; (8011c48 <xQueueSemaphoreTake+0x224>)
 8011be6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011bea:	601a      	str	r2, [r3, #0]
 8011bec:	f3bf 8f4f 	dsb	sy
 8011bf0:	f3bf 8f6f 	isb	sy
 8011bf4:	e75c      	b.n	8011ab0 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8011bf6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011bf8:	f000 f97b 	bl	8011ef2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011bfc:	f000 fd02 	bl	8012604 <xTaskResumeAll>
 8011c00:	e756      	b.n	8011ab0 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8011c02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011c04:	f000 f975 	bl	8011ef2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011c08:	f000 fcfc 	bl	8012604 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011c0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011c0e:	f000 f9c2 	bl	8011f96 <prvIsQueueEmpty>
 8011c12:	4603      	mov	r3, r0
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	f43f af4b 	beq.w	8011ab0 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8011c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d00d      	beq.n	8011c3c <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8011c20:	f001 fc24 	bl	801346c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8011c24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011c26:	f000 f8bc 	bl	8011da2 <prvGetDisinheritPriorityAfterTimeout>
 8011c2a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8011c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c2e:	689b      	ldr	r3, [r3, #8]
 8011c30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011c32:	4618      	mov	r0, r3
 8011c34:	f001 f9f6 	bl	8013024 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8011c38:	f001 fc4c 	bl	80134d4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011c3c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011c3e:	4618      	mov	r0, r3
 8011c40:	3738      	adds	r7, #56	; 0x38
 8011c42:	46bd      	mov	sp, r7
 8011c44:	bd80      	pop	{r7, pc}
 8011c46:	bf00      	nop
 8011c48:	e000ed04 	.word	0xe000ed04

08011c4c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011c4c:	b580      	push	{r7, lr}
 8011c4e:	b08e      	sub	sp, #56	; 0x38
 8011c50:	af00      	add	r7, sp, #0
 8011c52:	60f8      	str	r0, [r7, #12]
 8011c54:	60b9      	str	r1, [r7, #8]
 8011c56:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011c58:	68fb      	ldr	r3, [r7, #12]
 8011c5a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d10c      	bne.n	8011c7c <xQueueReceiveFromISR+0x30>
	__asm volatile
 8011c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c66:	b672      	cpsid	i
 8011c68:	f383 8811 	msr	BASEPRI, r3
 8011c6c:	f3bf 8f6f 	isb	sy
 8011c70:	f3bf 8f4f 	dsb	sy
 8011c74:	b662      	cpsie	i
 8011c76:	623b      	str	r3, [r7, #32]
}
 8011c78:	bf00      	nop
 8011c7a:	e7fe      	b.n	8011c7a <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011c7c:	68bb      	ldr	r3, [r7, #8]
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d103      	bne.n	8011c8a <xQueueReceiveFromISR+0x3e>
 8011c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d101      	bne.n	8011c8e <xQueueReceiveFromISR+0x42>
 8011c8a:	2301      	movs	r3, #1
 8011c8c:	e000      	b.n	8011c90 <xQueueReceiveFromISR+0x44>
 8011c8e:	2300      	movs	r3, #0
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	d10c      	bne.n	8011cae <xQueueReceiveFromISR+0x62>
	__asm volatile
 8011c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c98:	b672      	cpsid	i
 8011c9a:	f383 8811 	msr	BASEPRI, r3
 8011c9e:	f3bf 8f6f 	isb	sy
 8011ca2:	f3bf 8f4f 	dsb	sy
 8011ca6:	b662      	cpsie	i
 8011ca8:	61fb      	str	r3, [r7, #28]
}
 8011caa:	bf00      	nop
 8011cac:	e7fe      	b.n	8011cac <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011cae:	f001 fcc5 	bl	801363c <vPortValidateInterruptPriority>
	__asm volatile
 8011cb2:	f3ef 8211 	mrs	r2, BASEPRI
 8011cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cba:	b672      	cpsid	i
 8011cbc:	f383 8811 	msr	BASEPRI, r3
 8011cc0:	f3bf 8f6f 	isb	sy
 8011cc4:	f3bf 8f4f 	dsb	sy
 8011cc8:	b662      	cpsie	i
 8011cca:	61ba      	str	r2, [r7, #24]
 8011ccc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8011cce:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011cd6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d02f      	beq.n	8011d3e <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8011cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ce0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011ce4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011ce8:	68b9      	ldr	r1, [r7, #8]
 8011cea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011cec:	f000 f8db 	bl	8011ea6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cf2:	1e5a      	subs	r2, r3, #1
 8011cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cf6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8011cf8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d00:	d112      	bne.n	8011d28 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d04:	691b      	ldr	r3, [r3, #16]
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d016      	beq.n	8011d38 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d0c:	3310      	adds	r3, #16
 8011d0e:	4618      	mov	r0, r3
 8011d10:	f000 fe9a 	bl	8012a48 <xTaskRemoveFromEventList>
 8011d14:	4603      	mov	r3, r0
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d00e      	beq.n	8011d38 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d00b      	beq.n	8011d38 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	2201      	movs	r2, #1
 8011d24:	601a      	str	r2, [r3, #0]
 8011d26:	e007      	b.n	8011d38 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8011d28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011d2c:	3301      	adds	r3, #1
 8011d2e:	b2db      	uxtb	r3, r3
 8011d30:	b25a      	sxtb	r2, r3
 8011d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8011d38:	2301      	movs	r3, #1
 8011d3a:	637b      	str	r3, [r7, #52]	; 0x34
 8011d3c:	e001      	b.n	8011d42 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8011d3e:	2300      	movs	r3, #0
 8011d40:	637b      	str	r3, [r7, #52]	; 0x34
 8011d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d44:	613b      	str	r3, [r7, #16]
	__asm volatile
 8011d46:	693b      	ldr	r3, [r7, #16]
 8011d48:	f383 8811 	msr	BASEPRI, r3
}
 8011d4c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011d50:	4618      	mov	r0, r3
 8011d52:	3738      	adds	r7, #56	; 0x38
 8011d54:	46bd      	mov	sp, r7
 8011d56:	bd80      	pop	{r7, pc}

08011d58 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8011d58:	b580      	push	{r7, lr}
 8011d5a:	b084      	sub	sp, #16
 8011d5c:	af00      	add	r7, sp, #0
 8011d5e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011d64:	68fb      	ldr	r3, [r7, #12]
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d10c      	bne.n	8011d84 <vQueueDelete+0x2c>
	__asm volatile
 8011d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d6e:	b672      	cpsid	i
 8011d70:	f383 8811 	msr	BASEPRI, r3
 8011d74:	f3bf 8f6f 	isb	sy
 8011d78:	f3bf 8f4f 	dsb	sy
 8011d7c:	b662      	cpsie	i
 8011d7e:	60bb      	str	r3, [r7, #8]
}
 8011d80:	bf00      	nop
 8011d82:	e7fe      	b.n	8011d82 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8011d84:	68f8      	ldr	r0, [r7, #12]
 8011d86:	f000 f935 	bl	8011ff4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8011d8a:	68fb      	ldr	r3, [r7, #12]
 8011d8c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d102      	bne.n	8011d9a <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 8011d94:	68f8      	ldr	r0, [r7, #12]
 8011d96:	f001 fd65 	bl	8013864 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8011d9a:	bf00      	nop
 8011d9c:	3710      	adds	r7, #16
 8011d9e:	46bd      	mov	sp, r7
 8011da0:	bd80      	pop	{r7, pc}

08011da2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8011da2:	b480      	push	{r7}
 8011da4:	b085      	sub	sp, #20
 8011da6:	af00      	add	r7, sp, #0
 8011da8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d006      	beq.n	8011dc0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011db6:	681b      	ldr	r3, [r3, #0]
 8011db8:	f1c3 0307 	rsb	r3, r3, #7
 8011dbc:	60fb      	str	r3, [r7, #12]
 8011dbe:	e001      	b.n	8011dc4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8011dc0:	2300      	movs	r3, #0
 8011dc2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8011dc4:	68fb      	ldr	r3, [r7, #12]
	}
 8011dc6:	4618      	mov	r0, r3
 8011dc8:	3714      	adds	r7, #20
 8011dca:	46bd      	mov	sp, r7
 8011dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dd0:	4770      	bx	lr

08011dd2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8011dd2:	b580      	push	{r7, lr}
 8011dd4:	b086      	sub	sp, #24
 8011dd6:	af00      	add	r7, sp, #0
 8011dd8:	60f8      	str	r0, [r7, #12]
 8011dda:	60b9      	str	r1, [r7, #8]
 8011ddc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8011dde:	2300      	movs	r3, #0
 8011de0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011de2:	68fb      	ldr	r3, [r7, #12]
 8011de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011de6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8011de8:	68fb      	ldr	r3, [r7, #12]
 8011dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d10d      	bne.n	8011e0c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011df0:	68fb      	ldr	r3, [r7, #12]
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d14d      	bne.n	8011e94 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011df8:	68fb      	ldr	r3, [r7, #12]
 8011dfa:	689b      	ldr	r3, [r3, #8]
 8011dfc:	4618      	mov	r0, r3
 8011dfe:	f001 f887 	bl	8012f10 <xTaskPriorityDisinherit>
 8011e02:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	2200      	movs	r2, #0
 8011e08:	609a      	str	r2, [r3, #8]
 8011e0a:	e043      	b.n	8011e94 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d119      	bne.n	8011e46 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011e12:	68fb      	ldr	r3, [r7, #12]
 8011e14:	6858      	ldr	r0, [r3, #4]
 8011e16:	68fb      	ldr	r3, [r7, #12]
 8011e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e1a:	461a      	mov	r2, r3
 8011e1c:	68b9      	ldr	r1, [r7, #8]
 8011e1e:	f001 fe5f 	bl	8013ae0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011e22:	68fb      	ldr	r3, [r7, #12]
 8011e24:	685a      	ldr	r2, [r3, #4]
 8011e26:	68fb      	ldr	r3, [r7, #12]
 8011e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e2a:	441a      	add	r2, r3
 8011e2c:	68fb      	ldr	r3, [r7, #12]
 8011e2e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011e30:	68fb      	ldr	r3, [r7, #12]
 8011e32:	685a      	ldr	r2, [r3, #4]
 8011e34:	68fb      	ldr	r3, [r7, #12]
 8011e36:	689b      	ldr	r3, [r3, #8]
 8011e38:	429a      	cmp	r2, r3
 8011e3a:	d32b      	bcc.n	8011e94 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8011e3c:	68fb      	ldr	r3, [r7, #12]
 8011e3e:	681a      	ldr	r2, [r3, #0]
 8011e40:	68fb      	ldr	r3, [r7, #12]
 8011e42:	605a      	str	r2, [r3, #4]
 8011e44:	e026      	b.n	8011e94 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8011e46:	68fb      	ldr	r3, [r7, #12]
 8011e48:	68d8      	ldr	r0, [r3, #12]
 8011e4a:	68fb      	ldr	r3, [r7, #12]
 8011e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e4e:	461a      	mov	r2, r3
 8011e50:	68b9      	ldr	r1, [r7, #8]
 8011e52:	f001 fe45 	bl	8013ae0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8011e56:	68fb      	ldr	r3, [r7, #12]
 8011e58:	68da      	ldr	r2, [r3, #12]
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e5e:	425b      	negs	r3, r3
 8011e60:	441a      	add	r2, r3
 8011e62:	68fb      	ldr	r3, [r7, #12]
 8011e64:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011e66:	68fb      	ldr	r3, [r7, #12]
 8011e68:	68da      	ldr	r2, [r3, #12]
 8011e6a:	68fb      	ldr	r3, [r7, #12]
 8011e6c:	681b      	ldr	r3, [r3, #0]
 8011e6e:	429a      	cmp	r2, r3
 8011e70:	d207      	bcs.n	8011e82 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8011e72:	68fb      	ldr	r3, [r7, #12]
 8011e74:	689a      	ldr	r2, [r3, #8]
 8011e76:	68fb      	ldr	r3, [r7, #12]
 8011e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e7a:	425b      	negs	r3, r3
 8011e7c:	441a      	add	r2, r3
 8011e7e:	68fb      	ldr	r3, [r7, #12]
 8011e80:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	2b02      	cmp	r3, #2
 8011e86:	d105      	bne.n	8011e94 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011e88:	693b      	ldr	r3, [r7, #16]
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d002      	beq.n	8011e94 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8011e8e:	693b      	ldr	r3, [r7, #16]
 8011e90:	3b01      	subs	r3, #1
 8011e92:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011e94:	693b      	ldr	r3, [r7, #16]
 8011e96:	1c5a      	adds	r2, r3, #1
 8011e98:	68fb      	ldr	r3, [r7, #12]
 8011e9a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8011e9c:	697b      	ldr	r3, [r7, #20]
}
 8011e9e:	4618      	mov	r0, r3
 8011ea0:	3718      	adds	r7, #24
 8011ea2:	46bd      	mov	sp, r7
 8011ea4:	bd80      	pop	{r7, pc}

08011ea6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8011ea6:	b580      	push	{r7, lr}
 8011ea8:	b082      	sub	sp, #8
 8011eaa:	af00      	add	r7, sp, #0
 8011eac:	6078      	str	r0, [r7, #4]
 8011eae:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d018      	beq.n	8011eea <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	68da      	ldr	r2, [r3, #12]
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ec0:	441a      	add	r2, r3
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	68da      	ldr	r2, [r3, #12]
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	689b      	ldr	r3, [r3, #8]
 8011ece:	429a      	cmp	r2, r3
 8011ed0:	d303      	bcc.n	8011eda <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	681a      	ldr	r2, [r3, #0]
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	68d9      	ldr	r1, [r3, #12]
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ee2:	461a      	mov	r2, r3
 8011ee4:	6838      	ldr	r0, [r7, #0]
 8011ee6:	f001 fdfb 	bl	8013ae0 <memcpy>
	}
}
 8011eea:	bf00      	nop
 8011eec:	3708      	adds	r7, #8
 8011eee:	46bd      	mov	sp, r7
 8011ef0:	bd80      	pop	{r7, pc}

08011ef2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8011ef2:	b580      	push	{r7, lr}
 8011ef4:	b084      	sub	sp, #16
 8011ef6:	af00      	add	r7, sp, #0
 8011ef8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011efa:	f001 fab7 	bl	801346c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011f04:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011f06:	e011      	b.n	8011f2c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d012      	beq.n	8011f36 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	3324      	adds	r3, #36	; 0x24
 8011f14:	4618      	mov	r0, r3
 8011f16:	f000 fd97 	bl	8012a48 <xTaskRemoveFromEventList>
 8011f1a:	4603      	mov	r3, r0
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d001      	beq.n	8011f24 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8011f20:	f000 fe72 	bl	8012c08 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8011f24:	7bfb      	ldrb	r3, [r7, #15]
 8011f26:	3b01      	subs	r3, #1
 8011f28:	b2db      	uxtb	r3, r3
 8011f2a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011f2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	dce9      	bgt.n	8011f08 <prvUnlockQueue+0x16>
 8011f34:	e000      	b.n	8011f38 <prvUnlockQueue+0x46>
					break;
 8011f36:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	22ff      	movs	r2, #255	; 0xff
 8011f3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8011f40:	f001 fac8 	bl	80134d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8011f44:	f001 fa92 	bl	801346c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011f4e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011f50:	e011      	b.n	8011f76 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	691b      	ldr	r3, [r3, #16]
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d012      	beq.n	8011f80 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	3310      	adds	r3, #16
 8011f5e:	4618      	mov	r0, r3
 8011f60:	f000 fd72 	bl	8012a48 <xTaskRemoveFromEventList>
 8011f64:	4603      	mov	r3, r0
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d001      	beq.n	8011f6e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011f6a:	f000 fe4d 	bl	8012c08 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011f6e:	7bbb      	ldrb	r3, [r7, #14]
 8011f70:	3b01      	subs	r3, #1
 8011f72:	b2db      	uxtb	r3, r3
 8011f74:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011f76:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	dce9      	bgt.n	8011f52 <prvUnlockQueue+0x60>
 8011f7e:	e000      	b.n	8011f82 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8011f80:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	22ff      	movs	r2, #255	; 0xff
 8011f86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8011f8a:	f001 faa3 	bl	80134d4 <vPortExitCritical>
}
 8011f8e:	bf00      	nop
 8011f90:	3710      	adds	r7, #16
 8011f92:	46bd      	mov	sp, r7
 8011f94:	bd80      	pop	{r7, pc}

08011f96 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011f96:	b580      	push	{r7, lr}
 8011f98:	b084      	sub	sp, #16
 8011f9a:	af00      	add	r7, sp, #0
 8011f9c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011f9e:	f001 fa65 	bl	801346c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d102      	bne.n	8011fb0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011faa:	2301      	movs	r3, #1
 8011fac:	60fb      	str	r3, [r7, #12]
 8011fae:	e001      	b.n	8011fb4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8011fb0:	2300      	movs	r3, #0
 8011fb2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011fb4:	f001 fa8e 	bl	80134d4 <vPortExitCritical>

	return xReturn;
 8011fb8:	68fb      	ldr	r3, [r7, #12]
}
 8011fba:	4618      	mov	r0, r3
 8011fbc:	3710      	adds	r7, #16
 8011fbe:	46bd      	mov	sp, r7
 8011fc0:	bd80      	pop	{r7, pc}

08011fc2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8011fc2:	b580      	push	{r7, lr}
 8011fc4:	b084      	sub	sp, #16
 8011fc6:	af00      	add	r7, sp, #0
 8011fc8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011fca:	f001 fa4f 	bl	801346c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011fd6:	429a      	cmp	r2, r3
 8011fd8:	d102      	bne.n	8011fe0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011fda:	2301      	movs	r3, #1
 8011fdc:	60fb      	str	r3, [r7, #12]
 8011fde:	e001      	b.n	8011fe4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8011fe0:	2300      	movs	r3, #0
 8011fe2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011fe4:	f001 fa76 	bl	80134d4 <vPortExitCritical>

	return xReturn;
 8011fe8:	68fb      	ldr	r3, [r7, #12]
}
 8011fea:	4618      	mov	r0, r3
 8011fec:	3710      	adds	r7, #16
 8011fee:	46bd      	mov	sp, r7
 8011ff0:	bd80      	pop	{r7, pc}
	...

08011ff4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8011ff4:	b480      	push	{r7}
 8011ff6:	b085      	sub	sp, #20
 8011ff8:	af00      	add	r7, sp, #0
 8011ffa:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011ffc:	2300      	movs	r3, #0
 8011ffe:	60fb      	str	r3, [r7, #12]
 8012000:	e016      	b.n	8012030 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8012002:	4a10      	ldr	r2, [pc, #64]	; (8012044 <vQueueUnregisterQueue+0x50>)
 8012004:	68fb      	ldr	r3, [r7, #12]
 8012006:	00db      	lsls	r3, r3, #3
 8012008:	4413      	add	r3, r2
 801200a:	685b      	ldr	r3, [r3, #4]
 801200c:	687a      	ldr	r2, [r7, #4]
 801200e:	429a      	cmp	r2, r3
 8012010:	d10b      	bne.n	801202a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8012012:	4a0c      	ldr	r2, [pc, #48]	; (8012044 <vQueueUnregisterQueue+0x50>)
 8012014:	68fb      	ldr	r3, [r7, #12]
 8012016:	2100      	movs	r1, #0
 8012018:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 801201c:	4a09      	ldr	r2, [pc, #36]	; (8012044 <vQueueUnregisterQueue+0x50>)
 801201e:	68fb      	ldr	r3, [r7, #12]
 8012020:	00db      	lsls	r3, r3, #3
 8012022:	4413      	add	r3, r2
 8012024:	2200      	movs	r2, #0
 8012026:	605a      	str	r2, [r3, #4]
				break;
 8012028:	e006      	b.n	8012038 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801202a:	68fb      	ldr	r3, [r7, #12]
 801202c:	3301      	adds	r3, #1
 801202e:	60fb      	str	r3, [r7, #12]
 8012030:	68fb      	ldr	r3, [r7, #12]
 8012032:	2b07      	cmp	r3, #7
 8012034:	d9e5      	bls.n	8012002 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8012036:	bf00      	nop
 8012038:	bf00      	nop
 801203a:	3714      	adds	r7, #20
 801203c:	46bd      	mov	sp, r7
 801203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012042:	4770      	bx	lr
 8012044:	200011d4 	.word	0x200011d4

08012048 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8012048:	b580      	push	{r7, lr}
 801204a:	b08e      	sub	sp, #56	; 0x38
 801204c:	af04      	add	r7, sp, #16
 801204e:	60f8      	str	r0, [r7, #12]
 8012050:	60b9      	str	r1, [r7, #8]
 8012052:	607a      	str	r2, [r7, #4]
 8012054:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8012056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012058:	2b00      	cmp	r3, #0
 801205a:	d10c      	bne.n	8012076 <xTaskCreateStatic+0x2e>
	__asm volatile
 801205c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012060:	b672      	cpsid	i
 8012062:	f383 8811 	msr	BASEPRI, r3
 8012066:	f3bf 8f6f 	isb	sy
 801206a:	f3bf 8f4f 	dsb	sy
 801206e:	b662      	cpsie	i
 8012070:	623b      	str	r3, [r7, #32]
}
 8012072:	bf00      	nop
 8012074:	e7fe      	b.n	8012074 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8012076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012078:	2b00      	cmp	r3, #0
 801207a:	d10c      	bne.n	8012096 <xTaskCreateStatic+0x4e>
	__asm volatile
 801207c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012080:	b672      	cpsid	i
 8012082:	f383 8811 	msr	BASEPRI, r3
 8012086:	f3bf 8f6f 	isb	sy
 801208a:	f3bf 8f4f 	dsb	sy
 801208e:	b662      	cpsie	i
 8012090:	61fb      	str	r3, [r7, #28]
}
 8012092:	bf00      	nop
 8012094:	e7fe      	b.n	8012094 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8012096:	2354      	movs	r3, #84	; 0x54
 8012098:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801209a:	693b      	ldr	r3, [r7, #16]
 801209c:	2b54      	cmp	r3, #84	; 0x54
 801209e:	d00c      	beq.n	80120ba <xTaskCreateStatic+0x72>
	__asm volatile
 80120a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120a4:	b672      	cpsid	i
 80120a6:	f383 8811 	msr	BASEPRI, r3
 80120aa:	f3bf 8f6f 	isb	sy
 80120ae:	f3bf 8f4f 	dsb	sy
 80120b2:	b662      	cpsie	i
 80120b4:	61bb      	str	r3, [r7, #24]
}
 80120b6:	bf00      	nop
 80120b8:	e7fe      	b.n	80120b8 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80120ba:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80120bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d01e      	beq.n	8012100 <xTaskCreateStatic+0xb8>
 80120c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d01b      	beq.n	8012100 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80120c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120ca:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80120cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80120d0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80120d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120d4:	2202      	movs	r2, #2
 80120d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80120da:	2300      	movs	r3, #0
 80120dc:	9303      	str	r3, [sp, #12]
 80120de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120e0:	9302      	str	r3, [sp, #8]
 80120e2:	f107 0314 	add.w	r3, r7, #20
 80120e6:	9301      	str	r3, [sp, #4]
 80120e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120ea:	9300      	str	r3, [sp, #0]
 80120ec:	683b      	ldr	r3, [r7, #0]
 80120ee:	687a      	ldr	r2, [r7, #4]
 80120f0:	68b9      	ldr	r1, [r7, #8]
 80120f2:	68f8      	ldr	r0, [r7, #12]
 80120f4:	f000 f850 	bl	8012198 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80120f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80120fa:	f000 f8df 	bl	80122bc <prvAddNewTaskToReadyList>
 80120fe:	e001      	b.n	8012104 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8012100:	2300      	movs	r3, #0
 8012102:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8012104:	697b      	ldr	r3, [r7, #20]
	}
 8012106:	4618      	mov	r0, r3
 8012108:	3728      	adds	r7, #40	; 0x28
 801210a:	46bd      	mov	sp, r7
 801210c:	bd80      	pop	{r7, pc}

0801210e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801210e:	b580      	push	{r7, lr}
 8012110:	b08c      	sub	sp, #48	; 0x30
 8012112:	af04      	add	r7, sp, #16
 8012114:	60f8      	str	r0, [r7, #12]
 8012116:	60b9      	str	r1, [r7, #8]
 8012118:	603b      	str	r3, [r7, #0]
 801211a:	4613      	mov	r3, r2
 801211c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801211e:	88fb      	ldrh	r3, [r7, #6]
 8012120:	009b      	lsls	r3, r3, #2
 8012122:	4618      	mov	r0, r3
 8012124:	f001 face 	bl	80136c4 <pvPortMalloc>
 8012128:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801212a:	697b      	ldr	r3, [r7, #20]
 801212c:	2b00      	cmp	r3, #0
 801212e:	d00e      	beq.n	801214e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8012130:	2054      	movs	r0, #84	; 0x54
 8012132:	f001 fac7 	bl	80136c4 <pvPortMalloc>
 8012136:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8012138:	69fb      	ldr	r3, [r7, #28]
 801213a:	2b00      	cmp	r3, #0
 801213c:	d003      	beq.n	8012146 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801213e:	69fb      	ldr	r3, [r7, #28]
 8012140:	697a      	ldr	r2, [r7, #20]
 8012142:	631a      	str	r2, [r3, #48]	; 0x30
 8012144:	e005      	b.n	8012152 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8012146:	6978      	ldr	r0, [r7, #20]
 8012148:	f001 fb8c 	bl	8013864 <vPortFree>
 801214c:	e001      	b.n	8012152 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801214e:	2300      	movs	r3, #0
 8012150:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8012152:	69fb      	ldr	r3, [r7, #28]
 8012154:	2b00      	cmp	r3, #0
 8012156:	d017      	beq.n	8012188 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8012158:	69fb      	ldr	r3, [r7, #28]
 801215a:	2200      	movs	r2, #0
 801215c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8012160:	88fa      	ldrh	r2, [r7, #6]
 8012162:	2300      	movs	r3, #0
 8012164:	9303      	str	r3, [sp, #12]
 8012166:	69fb      	ldr	r3, [r7, #28]
 8012168:	9302      	str	r3, [sp, #8]
 801216a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801216c:	9301      	str	r3, [sp, #4]
 801216e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012170:	9300      	str	r3, [sp, #0]
 8012172:	683b      	ldr	r3, [r7, #0]
 8012174:	68b9      	ldr	r1, [r7, #8]
 8012176:	68f8      	ldr	r0, [r7, #12]
 8012178:	f000 f80e 	bl	8012198 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801217c:	69f8      	ldr	r0, [r7, #28]
 801217e:	f000 f89d 	bl	80122bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8012182:	2301      	movs	r3, #1
 8012184:	61bb      	str	r3, [r7, #24]
 8012186:	e002      	b.n	801218e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012188:	f04f 33ff 	mov.w	r3, #4294967295
 801218c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801218e:	69bb      	ldr	r3, [r7, #24]
	}
 8012190:	4618      	mov	r0, r3
 8012192:	3720      	adds	r7, #32
 8012194:	46bd      	mov	sp, r7
 8012196:	bd80      	pop	{r7, pc}

08012198 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8012198:	b580      	push	{r7, lr}
 801219a:	b088      	sub	sp, #32
 801219c:	af00      	add	r7, sp, #0
 801219e:	60f8      	str	r0, [r7, #12]
 80121a0:	60b9      	str	r1, [r7, #8]
 80121a2:	607a      	str	r2, [r7, #4]
 80121a4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80121a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121a8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	009b      	lsls	r3, r3, #2
 80121ae:	461a      	mov	r2, r3
 80121b0:	21a5      	movs	r1, #165	; 0xa5
 80121b2:	f001 fca3 	bl	8013afc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80121b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80121ba:	6879      	ldr	r1, [r7, #4]
 80121bc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80121c0:	440b      	add	r3, r1
 80121c2:	009b      	lsls	r3, r3, #2
 80121c4:	4413      	add	r3, r2
 80121c6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80121c8:	69bb      	ldr	r3, [r7, #24]
 80121ca:	f023 0307 	bic.w	r3, r3, #7
 80121ce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80121d0:	69bb      	ldr	r3, [r7, #24]
 80121d2:	f003 0307 	and.w	r3, r3, #7
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	d00c      	beq.n	80121f4 <prvInitialiseNewTask+0x5c>
	__asm volatile
 80121da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121de:	b672      	cpsid	i
 80121e0:	f383 8811 	msr	BASEPRI, r3
 80121e4:	f3bf 8f6f 	isb	sy
 80121e8:	f3bf 8f4f 	dsb	sy
 80121ec:	b662      	cpsie	i
 80121ee:	617b      	str	r3, [r7, #20]
}
 80121f0:	bf00      	nop
 80121f2:	e7fe      	b.n	80121f2 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80121f4:	68bb      	ldr	r3, [r7, #8]
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d01f      	beq.n	801223a <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80121fa:	2300      	movs	r3, #0
 80121fc:	61fb      	str	r3, [r7, #28]
 80121fe:	e012      	b.n	8012226 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8012200:	68ba      	ldr	r2, [r7, #8]
 8012202:	69fb      	ldr	r3, [r7, #28]
 8012204:	4413      	add	r3, r2
 8012206:	7819      	ldrb	r1, [r3, #0]
 8012208:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801220a:	69fb      	ldr	r3, [r7, #28]
 801220c:	4413      	add	r3, r2
 801220e:	3334      	adds	r3, #52	; 0x34
 8012210:	460a      	mov	r2, r1
 8012212:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8012214:	68ba      	ldr	r2, [r7, #8]
 8012216:	69fb      	ldr	r3, [r7, #28]
 8012218:	4413      	add	r3, r2
 801221a:	781b      	ldrb	r3, [r3, #0]
 801221c:	2b00      	cmp	r3, #0
 801221e:	d006      	beq.n	801222e <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012220:	69fb      	ldr	r3, [r7, #28]
 8012222:	3301      	adds	r3, #1
 8012224:	61fb      	str	r3, [r7, #28]
 8012226:	69fb      	ldr	r3, [r7, #28]
 8012228:	2b0f      	cmp	r3, #15
 801222a:	d9e9      	bls.n	8012200 <prvInitialiseNewTask+0x68>
 801222c:	e000      	b.n	8012230 <prvInitialiseNewTask+0x98>
			{
				break;
 801222e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8012230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012232:	2200      	movs	r2, #0
 8012234:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012238:	e003      	b.n	8012242 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801223a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801223c:	2200      	movs	r2, #0
 801223e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8012242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012244:	2b06      	cmp	r3, #6
 8012246:	d901      	bls.n	801224c <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8012248:	2306      	movs	r3, #6
 801224a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801224c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801224e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012250:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8012252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012254:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012256:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8012258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801225a:	2200      	movs	r2, #0
 801225c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801225e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012260:	3304      	adds	r3, #4
 8012262:	4618      	mov	r0, r3
 8012264:	f7fe feda 	bl	801101c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801226a:	3318      	adds	r3, #24
 801226c:	4618      	mov	r0, r3
 801226e:	f7fe fed5 	bl	801101c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8012272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012274:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012276:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801227a:	f1c3 0207 	rsb	r2, r3, #7
 801227e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012280:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8012282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012284:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012286:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8012288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801228a:	2200      	movs	r2, #0
 801228c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801228e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012290:	2200      	movs	r2, #0
 8012292:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8012296:	683a      	ldr	r2, [r7, #0]
 8012298:	68f9      	ldr	r1, [r7, #12]
 801229a:	69b8      	ldr	r0, [r7, #24]
 801229c:	f000 ffda 	bl	8013254 <pxPortInitialiseStack>
 80122a0:	4602      	mov	r2, r0
 80122a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122a4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80122a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d002      	beq.n	80122b2 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80122ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80122b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80122b2:	bf00      	nop
 80122b4:	3720      	adds	r7, #32
 80122b6:	46bd      	mov	sp, r7
 80122b8:	bd80      	pop	{r7, pc}
	...

080122bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80122bc:	b580      	push	{r7, lr}
 80122be:	b082      	sub	sp, #8
 80122c0:	af00      	add	r7, sp, #0
 80122c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80122c4:	f001 f8d2 	bl	801346c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80122c8:	4b2a      	ldr	r3, [pc, #168]	; (8012374 <prvAddNewTaskToReadyList+0xb8>)
 80122ca:	681b      	ldr	r3, [r3, #0]
 80122cc:	3301      	adds	r3, #1
 80122ce:	4a29      	ldr	r2, [pc, #164]	; (8012374 <prvAddNewTaskToReadyList+0xb8>)
 80122d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80122d2:	4b29      	ldr	r3, [pc, #164]	; (8012378 <prvAddNewTaskToReadyList+0xbc>)
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d109      	bne.n	80122ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80122da:	4a27      	ldr	r2, [pc, #156]	; (8012378 <prvAddNewTaskToReadyList+0xbc>)
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80122e0:	4b24      	ldr	r3, [pc, #144]	; (8012374 <prvAddNewTaskToReadyList+0xb8>)
 80122e2:	681b      	ldr	r3, [r3, #0]
 80122e4:	2b01      	cmp	r3, #1
 80122e6:	d110      	bne.n	801230a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80122e8:	f000 fcb4 	bl	8012c54 <prvInitialiseTaskLists>
 80122ec:	e00d      	b.n	801230a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80122ee:	4b23      	ldr	r3, [pc, #140]	; (801237c <prvAddNewTaskToReadyList+0xc0>)
 80122f0:	681b      	ldr	r3, [r3, #0]
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d109      	bne.n	801230a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80122f6:	4b20      	ldr	r3, [pc, #128]	; (8012378 <prvAddNewTaskToReadyList+0xbc>)
 80122f8:	681b      	ldr	r3, [r3, #0]
 80122fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012300:	429a      	cmp	r2, r3
 8012302:	d802      	bhi.n	801230a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8012304:	4a1c      	ldr	r2, [pc, #112]	; (8012378 <prvAddNewTaskToReadyList+0xbc>)
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801230a:	4b1d      	ldr	r3, [pc, #116]	; (8012380 <prvAddNewTaskToReadyList+0xc4>)
 801230c:	681b      	ldr	r3, [r3, #0]
 801230e:	3301      	adds	r3, #1
 8012310:	4a1b      	ldr	r2, [pc, #108]	; (8012380 <prvAddNewTaskToReadyList+0xc4>)
 8012312:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012318:	2201      	movs	r2, #1
 801231a:	409a      	lsls	r2, r3
 801231c:	4b19      	ldr	r3, [pc, #100]	; (8012384 <prvAddNewTaskToReadyList+0xc8>)
 801231e:	681b      	ldr	r3, [r3, #0]
 8012320:	4313      	orrs	r3, r2
 8012322:	4a18      	ldr	r2, [pc, #96]	; (8012384 <prvAddNewTaskToReadyList+0xc8>)
 8012324:	6013      	str	r3, [r2, #0]
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801232a:	4613      	mov	r3, r2
 801232c:	009b      	lsls	r3, r3, #2
 801232e:	4413      	add	r3, r2
 8012330:	009b      	lsls	r3, r3, #2
 8012332:	4a15      	ldr	r2, [pc, #84]	; (8012388 <prvAddNewTaskToReadyList+0xcc>)
 8012334:	441a      	add	r2, r3
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	3304      	adds	r3, #4
 801233a:	4619      	mov	r1, r3
 801233c:	4610      	mov	r0, r2
 801233e:	f7fe fe7a 	bl	8011036 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8012342:	f001 f8c7 	bl	80134d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8012346:	4b0d      	ldr	r3, [pc, #52]	; (801237c <prvAddNewTaskToReadyList+0xc0>)
 8012348:	681b      	ldr	r3, [r3, #0]
 801234a:	2b00      	cmp	r3, #0
 801234c:	d00e      	beq.n	801236c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801234e:	4b0a      	ldr	r3, [pc, #40]	; (8012378 <prvAddNewTaskToReadyList+0xbc>)
 8012350:	681b      	ldr	r3, [r3, #0]
 8012352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012358:	429a      	cmp	r2, r3
 801235a:	d207      	bcs.n	801236c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801235c:	4b0b      	ldr	r3, [pc, #44]	; (801238c <prvAddNewTaskToReadyList+0xd0>)
 801235e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012362:	601a      	str	r2, [r3, #0]
 8012364:	f3bf 8f4f 	dsb	sy
 8012368:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801236c:	bf00      	nop
 801236e:	3708      	adds	r7, #8
 8012370:	46bd      	mov	sp, r7
 8012372:	bd80      	pop	{r7, pc}
 8012374:	20001314 	.word	0x20001314
 8012378:	20001214 	.word	0x20001214
 801237c:	20001320 	.word	0x20001320
 8012380:	20001330 	.word	0x20001330
 8012384:	2000131c 	.word	0x2000131c
 8012388:	20001218 	.word	0x20001218
 801238c:	e000ed04 	.word	0xe000ed04

08012390 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8012390:	b580      	push	{r7, lr}
 8012392:	b084      	sub	sp, #16
 8012394:	af00      	add	r7, sp, #0
 8012396:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8012398:	f001 f868 	bl	801346c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	2b00      	cmp	r3, #0
 80123a0:	d102      	bne.n	80123a8 <vTaskDelete+0x18>
 80123a2:	4b3a      	ldr	r3, [pc, #232]	; (801248c <vTaskDelete+0xfc>)
 80123a4:	681b      	ldr	r3, [r3, #0]
 80123a6:	e000      	b.n	80123aa <vTaskDelete+0x1a>
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80123ac:	68fb      	ldr	r3, [r7, #12]
 80123ae:	3304      	adds	r3, #4
 80123b0:	4618      	mov	r0, r3
 80123b2:	f7fe fe9d 	bl	80110f0 <uxListRemove>
 80123b6:	4603      	mov	r3, r0
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d115      	bne.n	80123e8 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80123bc:	68fb      	ldr	r3, [r7, #12]
 80123be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80123c0:	4933      	ldr	r1, [pc, #204]	; (8012490 <vTaskDelete+0x100>)
 80123c2:	4613      	mov	r3, r2
 80123c4:	009b      	lsls	r3, r3, #2
 80123c6:	4413      	add	r3, r2
 80123c8:	009b      	lsls	r3, r3, #2
 80123ca:	440b      	add	r3, r1
 80123cc:	681b      	ldr	r3, [r3, #0]
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	d10a      	bne.n	80123e8 <vTaskDelete+0x58>
 80123d2:	68fb      	ldr	r3, [r7, #12]
 80123d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123d6:	2201      	movs	r2, #1
 80123d8:	fa02 f303 	lsl.w	r3, r2, r3
 80123dc:	43da      	mvns	r2, r3
 80123de:	4b2d      	ldr	r3, [pc, #180]	; (8012494 <vTaskDelete+0x104>)
 80123e0:	681b      	ldr	r3, [r3, #0]
 80123e2:	4013      	ands	r3, r2
 80123e4:	4a2b      	ldr	r2, [pc, #172]	; (8012494 <vTaskDelete+0x104>)
 80123e6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80123e8:	68fb      	ldr	r3, [r7, #12]
 80123ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d004      	beq.n	80123fa <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80123f0:	68fb      	ldr	r3, [r7, #12]
 80123f2:	3318      	adds	r3, #24
 80123f4:	4618      	mov	r0, r3
 80123f6:	f7fe fe7b 	bl	80110f0 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80123fa:	4b27      	ldr	r3, [pc, #156]	; (8012498 <vTaskDelete+0x108>)
 80123fc:	681b      	ldr	r3, [r3, #0]
 80123fe:	3301      	adds	r3, #1
 8012400:	4a25      	ldr	r2, [pc, #148]	; (8012498 <vTaskDelete+0x108>)
 8012402:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8012404:	4b21      	ldr	r3, [pc, #132]	; (801248c <vTaskDelete+0xfc>)
 8012406:	681b      	ldr	r3, [r3, #0]
 8012408:	68fa      	ldr	r2, [r7, #12]
 801240a:	429a      	cmp	r2, r3
 801240c:	d10b      	bne.n	8012426 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 801240e:	68fb      	ldr	r3, [r7, #12]
 8012410:	3304      	adds	r3, #4
 8012412:	4619      	mov	r1, r3
 8012414:	4821      	ldr	r0, [pc, #132]	; (801249c <vTaskDelete+0x10c>)
 8012416:	f7fe fe0e 	bl	8011036 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 801241a:	4b21      	ldr	r3, [pc, #132]	; (80124a0 <vTaskDelete+0x110>)
 801241c:	681b      	ldr	r3, [r3, #0]
 801241e:	3301      	adds	r3, #1
 8012420:	4a1f      	ldr	r2, [pc, #124]	; (80124a0 <vTaskDelete+0x110>)
 8012422:	6013      	str	r3, [r2, #0]
 8012424:	e009      	b.n	801243a <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8012426:	4b1f      	ldr	r3, [pc, #124]	; (80124a4 <vTaskDelete+0x114>)
 8012428:	681b      	ldr	r3, [r3, #0]
 801242a:	3b01      	subs	r3, #1
 801242c:	4a1d      	ldr	r2, [pc, #116]	; (80124a4 <vTaskDelete+0x114>)
 801242e:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8012430:	68f8      	ldr	r0, [r7, #12]
 8012432:	f000 fc7d 	bl	8012d30 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8012436:	f000 fcad 	bl	8012d94 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 801243a:	f001 f84b 	bl	80134d4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 801243e:	4b1a      	ldr	r3, [pc, #104]	; (80124a8 <vTaskDelete+0x118>)
 8012440:	681b      	ldr	r3, [r3, #0]
 8012442:	2b00      	cmp	r3, #0
 8012444:	d01d      	beq.n	8012482 <vTaskDelete+0xf2>
		{
			if( pxTCB == pxCurrentTCB )
 8012446:	4b11      	ldr	r3, [pc, #68]	; (801248c <vTaskDelete+0xfc>)
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	68fa      	ldr	r2, [r7, #12]
 801244c:	429a      	cmp	r2, r3
 801244e:	d118      	bne.n	8012482 <vTaskDelete+0xf2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8012450:	4b16      	ldr	r3, [pc, #88]	; (80124ac <vTaskDelete+0x11c>)
 8012452:	681b      	ldr	r3, [r3, #0]
 8012454:	2b00      	cmp	r3, #0
 8012456:	d00c      	beq.n	8012472 <vTaskDelete+0xe2>
	__asm volatile
 8012458:	f04f 0350 	mov.w	r3, #80	; 0x50
 801245c:	b672      	cpsid	i
 801245e:	f383 8811 	msr	BASEPRI, r3
 8012462:	f3bf 8f6f 	isb	sy
 8012466:	f3bf 8f4f 	dsb	sy
 801246a:	b662      	cpsie	i
 801246c:	60bb      	str	r3, [r7, #8]
}
 801246e:	bf00      	nop
 8012470:	e7fe      	b.n	8012470 <vTaskDelete+0xe0>
				portYIELD_WITHIN_API();
 8012472:	4b0f      	ldr	r3, [pc, #60]	; (80124b0 <vTaskDelete+0x120>)
 8012474:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012478:	601a      	str	r2, [r3, #0]
 801247a:	f3bf 8f4f 	dsb	sy
 801247e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8012482:	bf00      	nop
 8012484:	3710      	adds	r7, #16
 8012486:	46bd      	mov	sp, r7
 8012488:	bd80      	pop	{r7, pc}
 801248a:	bf00      	nop
 801248c:	20001214 	.word	0x20001214
 8012490:	20001218 	.word	0x20001218
 8012494:	2000131c 	.word	0x2000131c
 8012498:	20001330 	.word	0x20001330
 801249c:	200012e8 	.word	0x200012e8
 80124a0:	200012fc 	.word	0x200012fc
 80124a4:	20001314 	.word	0x20001314
 80124a8:	20001320 	.word	0x20001320
 80124ac:	2000133c 	.word	0x2000133c
 80124b0:	e000ed04 	.word	0xe000ed04

080124b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80124b4:	b580      	push	{r7, lr}
 80124b6:	b084      	sub	sp, #16
 80124b8:	af00      	add	r7, sp, #0
 80124ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80124bc:	2300      	movs	r3, #0
 80124be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d019      	beq.n	80124fa <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80124c6:	4b14      	ldr	r3, [pc, #80]	; (8012518 <vTaskDelay+0x64>)
 80124c8:	681b      	ldr	r3, [r3, #0]
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d00c      	beq.n	80124e8 <vTaskDelay+0x34>
	__asm volatile
 80124ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124d2:	b672      	cpsid	i
 80124d4:	f383 8811 	msr	BASEPRI, r3
 80124d8:	f3bf 8f6f 	isb	sy
 80124dc:	f3bf 8f4f 	dsb	sy
 80124e0:	b662      	cpsie	i
 80124e2:	60bb      	str	r3, [r7, #8]
}
 80124e4:	bf00      	nop
 80124e6:	e7fe      	b.n	80124e6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80124e8:	f000 f87e 	bl	80125e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80124ec:	2100      	movs	r1, #0
 80124ee:	6878      	ldr	r0, [r7, #4]
 80124f0:	f000 fe4a 	bl	8013188 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80124f4:	f000 f886 	bl	8012604 <xTaskResumeAll>
 80124f8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80124fa:	68fb      	ldr	r3, [r7, #12]
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d107      	bne.n	8012510 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8012500:	4b06      	ldr	r3, [pc, #24]	; (801251c <vTaskDelay+0x68>)
 8012502:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012506:	601a      	str	r2, [r3, #0]
 8012508:	f3bf 8f4f 	dsb	sy
 801250c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012510:	bf00      	nop
 8012512:	3710      	adds	r7, #16
 8012514:	46bd      	mov	sp, r7
 8012516:	bd80      	pop	{r7, pc}
 8012518:	2000133c 	.word	0x2000133c
 801251c:	e000ed04 	.word	0xe000ed04

08012520 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012520:	b580      	push	{r7, lr}
 8012522:	b08a      	sub	sp, #40	; 0x28
 8012524:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8012526:	2300      	movs	r3, #0
 8012528:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801252a:	2300      	movs	r3, #0
 801252c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801252e:	463a      	mov	r2, r7
 8012530:	1d39      	adds	r1, r7, #4
 8012532:	f107 0308 	add.w	r3, r7, #8
 8012536:	4618      	mov	r0, r3
 8012538:	f7ee f806 	bl	8000548 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801253c:	6839      	ldr	r1, [r7, #0]
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	68ba      	ldr	r2, [r7, #8]
 8012542:	9202      	str	r2, [sp, #8]
 8012544:	9301      	str	r3, [sp, #4]
 8012546:	2300      	movs	r3, #0
 8012548:	9300      	str	r3, [sp, #0]
 801254a:	2300      	movs	r3, #0
 801254c:	460a      	mov	r2, r1
 801254e:	4920      	ldr	r1, [pc, #128]	; (80125d0 <vTaskStartScheduler+0xb0>)
 8012550:	4820      	ldr	r0, [pc, #128]	; (80125d4 <vTaskStartScheduler+0xb4>)
 8012552:	f7ff fd79 	bl	8012048 <xTaskCreateStatic>
 8012556:	4603      	mov	r3, r0
 8012558:	4a1f      	ldr	r2, [pc, #124]	; (80125d8 <vTaskStartScheduler+0xb8>)
 801255a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801255c:	4b1e      	ldr	r3, [pc, #120]	; (80125d8 <vTaskStartScheduler+0xb8>)
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	2b00      	cmp	r3, #0
 8012562:	d002      	beq.n	801256a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8012564:	2301      	movs	r3, #1
 8012566:	617b      	str	r3, [r7, #20]
 8012568:	e001      	b.n	801256e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801256a:	2300      	movs	r3, #0
 801256c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801256e:	697b      	ldr	r3, [r7, #20]
 8012570:	2b01      	cmp	r3, #1
 8012572:	d118      	bne.n	80125a6 <vTaskStartScheduler+0x86>
	__asm volatile
 8012574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012578:	b672      	cpsid	i
 801257a:	f383 8811 	msr	BASEPRI, r3
 801257e:	f3bf 8f6f 	isb	sy
 8012582:	f3bf 8f4f 	dsb	sy
 8012586:	b662      	cpsie	i
 8012588:	613b      	str	r3, [r7, #16]
}
 801258a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801258c:	4b13      	ldr	r3, [pc, #76]	; (80125dc <vTaskStartScheduler+0xbc>)
 801258e:	f04f 32ff 	mov.w	r2, #4294967295
 8012592:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8012594:	4b12      	ldr	r3, [pc, #72]	; (80125e0 <vTaskStartScheduler+0xc0>)
 8012596:	2201      	movs	r2, #1
 8012598:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801259a:	4b12      	ldr	r3, [pc, #72]	; (80125e4 <vTaskStartScheduler+0xc4>)
 801259c:	2200      	movs	r2, #0
 801259e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80125a0:	f000 fee6 	bl	8013370 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80125a4:	e010      	b.n	80125c8 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80125a6:	697b      	ldr	r3, [r7, #20]
 80125a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125ac:	d10c      	bne.n	80125c8 <vTaskStartScheduler+0xa8>
	__asm volatile
 80125ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125b2:	b672      	cpsid	i
 80125b4:	f383 8811 	msr	BASEPRI, r3
 80125b8:	f3bf 8f6f 	isb	sy
 80125bc:	f3bf 8f4f 	dsb	sy
 80125c0:	b662      	cpsie	i
 80125c2:	60fb      	str	r3, [r7, #12]
}
 80125c4:	bf00      	nop
 80125c6:	e7fe      	b.n	80125c6 <vTaskStartScheduler+0xa6>
}
 80125c8:	bf00      	nop
 80125ca:	3718      	adds	r7, #24
 80125cc:	46bd      	mov	sp, r7
 80125ce:	bd80      	pop	{r7, pc}
 80125d0:	08013c6c 	.word	0x08013c6c
 80125d4:	08012c21 	.word	0x08012c21
 80125d8:	20001338 	.word	0x20001338
 80125dc:	20001334 	.word	0x20001334
 80125e0:	20001320 	.word	0x20001320
 80125e4:	20001318 	.word	0x20001318

080125e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80125e8:	b480      	push	{r7}
 80125ea:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80125ec:	4b04      	ldr	r3, [pc, #16]	; (8012600 <vTaskSuspendAll+0x18>)
 80125ee:	681b      	ldr	r3, [r3, #0]
 80125f0:	3301      	adds	r3, #1
 80125f2:	4a03      	ldr	r2, [pc, #12]	; (8012600 <vTaskSuspendAll+0x18>)
 80125f4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80125f6:	bf00      	nop
 80125f8:	46bd      	mov	sp, r7
 80125fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125fe:	4770      	bx	lr
 8012600:	2000133c 	.word	0x2000133c

08012604 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012604:	b580      	push	{r7, lr}
 8012606:	b084      	sub	sp, #16
 8012608:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801260a:	2300      	movs	r3, #0
 801260c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801260e:	2300      	movs	r3, #0
 8012610:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8012612:	4b42      	ldr	r3, [pc, #264]	; (801271c <xTaskResumeAll+0x118>)
 8012614:	681b      	ldr	r3, [r3, #0]
 8012616:	2b00      	cmp	r3, #0
 8012618:	d10c      	bne.n	8012634 <xTaskResumeAll+0x30>
	__asm volatile
 801261a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801261e:	b672      	cpsid	i
 8012620:	f383 8811 	msr	BASEPRI, r3
 8012624:	f3bf 8f6f 	isb	sy
 8012628:	f3bf 8f4f 	dsb	sy
 801262c:	b662      	cpsie	i
 801262e:	603b      	str	r3, [r7, #0]
}
 8012630:	bf00      	nop
 8012632:	e7fe      	b.n	8012632 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8012634:	f000 ff1a 	bl	801346c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8012638:	4b38      	ldr	r3, [pc, #224]	; (801271c <xTaskResumeAll+0x118>)
 801263a:	681b      	ldr	r3, [r3, #0]
 801263c:	3b01      	subs	r3, #1
 801263e:	4a37      	ldr	r2, [pc, #220]	; (801271c <xTaskResumeAll+0x118>)
 8012640:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012642:	4b36      	ldr	r3, [pc, #216]	; (801271c <xTaskResumeAll+0x118>)
 8012644:	681b      	ldr	r3, [r3, #0]
 8012646:	2b00      	cmp	r3, #0
 8012648:	d161      	bne.n	801270e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801264a:	4b35      	ldr	r3, [pc, #212]	; (8012720 <xTaskResumeAll+0x11c>)
 801264c:	681b      	ldr	r3, [r3, #0]
 801264e:	2b00      	cmp	r3, #0
 8012650:	d05d      	beq.n	801270e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012652:	e02e      	b.n	80126b2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012654:	4b33      	ldr	r3, [pc, #204]	; (8012724 <xTaskResumeAll+0x120>)
 8012656:	68db      	ldr	r3, [r3, #12]
 8012658:	68db      	ldr	r3, [r3, #12]
 801265a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801265c:	68fb      	ldr	r3, [r7, #12]
 801265e:	3318      	adds	r3, #24
 8012660:	4618      	mov	r0, r3
 8012662:	f7fe fd45 	bl	80110f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012666:	68fb      	ldr	r3, [r7, #12]
 8012668:	3304      	adds	r3, #4
 801266a:	4618      	mov	r0, r3
 801266c:	f7fe fd40 	bl	80110f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012670:	68fb      	ldr	r3, [r7, #12]
 8012672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012674:	2201      	movs	r2, #1
 8012676:	409a      	lsls	r2, r3
 8012678:	4b2b      	ldr	r3, [pc, #172]	; (8012728 <xTaskResumeAll+0x124>)
 801267a:	681b      	ldr	r3, [r3, #0]
 801267c:	4313      	orrs	r3, r2
 801267e:	4a2a      	ldr	r2, [pc, #168]	; (8012728 <xTaskResumeAll+0x124>)
 8012680:	6013      	str	r3, [r2, #0]
 8012682:	68fb      	ldr	r3, [r7, #12]
 8012684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012686:	4613      	mov	r3, r2
 8012688:	009b      	lsls	r3, r3, #2
 801268a:	4413      	add	r3, r2
 801268c:	009b      	lsls	r3, r3, #2
 801268e:	4a27      	ldr	r2, [pc, #156]	; (801272c <xTaskResumeAll+0x128>)
 8012690:	441a      	add	r2, r3
 8012692:	68fb      	ldr	r3, [r7, #12]
 8012694:	3304      	adds	r3, #4
 8012696:	4619      	mov	r1, r3
 8012698:	4610      	mov	r0, r2
 801269a:	f7fe fccc 	bl	8011036 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801269e:	68fb      	ldr	r3, [r7, #12]
 80126a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80126a2:	4b23      	ldr	r3, [pc, #140]	; (8012730 <xTaskResumeAll+0x12c>)
 80126a4:	681b      	ldr	r3, [r3, #0]
 80126a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80126a8:	429a      	cmp	r2, r3
 80126aa:	d302      	bcc.n	80126b2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80126ac:	4b21      	ldr	r3, [pc, #132]	; (8012734 <xTaskResumeAll+0x130>)
 80126ae:	2201      	movs	r2, #1
 80126b0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80126b2:	4b1c      	ldr	r3, [pc, #112]	; (8012724 <xTaskResumeAll+0x120>)
 80126b4:	681b      	ldr	r3, [r3, #0]
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d1cc      	bne.n	8012654 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80126ba:	68fb      	ldr	r3, [r7, #12]
 80126bc:	2b00      	cmp	r3, #0
 80126be:	d001      	beq.n	80126c4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80126c0:	f000 fb68 	bl	8012d94 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80126c4:	4b1c      	ldr	r3, [pc, #112]	; (8012738 <xTaskResumeAll+0x134>)
 80126c6:	681b      	ldr	r3, [r3, #0]
 80126c8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d010      	beq.n	80126f2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80126d0:	f000 f858 	bl	8012784 <xTaskIncrementTick>
 80126d4:	4603      	mov	r3, r0
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d002      	beq.n	80126e0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80126da:	4b16      	ldr	r3, [pc, #88]	; (8012734 <xTaskResumeAll+0x130>)
 80126dc:	2201      	movs	r2, #1
 80126de:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	3b01      	subs	r3, #1
 80126e4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d1f1      	bne.n	80126d0 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80126ec:	4b12      	ldr	r3, [pc, #72]	; (8012738 <xTaskResumeAll+0x134>)
 80126ee:	2200      	movs	r2, #0
 80126f0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80126f2:	4b10      	ldr	r3, [pc, #64]	; (8012734 <xTaskResumeAll+0x130>)
 80126f4:	681b      	ldr	r3, [r3, #0]
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d009      	beq.n	801270e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80126fa:	2301      	movs	r3, #1
 80126fc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80126fe:	4b0f      	ldr	r3, [pc, #60]	; (801273c <xTaskResumeAll+0x138>)
 8012700:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012704:	601a      	str	r2, [r3, #0]
 8012706:	f3bf 8f4f 	dsb	sy
 801270a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801270e:	f000 fee1 	bl	80134d4 <vPortExitCritical>

	return xAlreadyYielded;
 8012712:	68bb      	ldr	r3, [r7, #8]
}
 8012714:	4618      	mov	r0, r3
 8012716:	3710      	adds	r7, #16
 8012718:	46bd      	mov	sp, r7
 801271a:	bd80      	pop	{r7, pc}
 801271c:	2000133c 	.word	0x2000133c
 8012720:	20001314 	.word	0x20001314
 8012724:	200012d4 	.word	0x200012d4
 8012728:	2000131c 	.word	0x2000131c
 801272c:	20001218 	.word	0x20001218
 8012730:	20001214 	.word	0x20001214
 8012734:	20001328 	.word	0x20001328
 8012738:	20001324 	.word	0x20001324
 801273c:	e000ed04 	.word	0xe000ed04

08012740 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8012740:	b480      	push	{r7}
 8012742:	b083      	sub	sp, #12
 8012744:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8012746:	4b05      	ldr	r3, [pc, #20]	; (801275c <xTaskGetTickCount+0x1c>)
 8012748:	681b      	ldr	r3, [r3, #0]
 801274a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801274c:	687b      	ldr	r3, [r7, #4]
}
 801274e:	4618      	mov	r0, r3
 8012750:	370c      	adds	r7, #12
 8012752:	46bd      	mov	sp, r7
 8012754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012758:	4770      	bx	lr
 801275a:	bf00      	nop
 801275c:	20001318 	.word	0x20001318

08012760 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8012760:	b580      	push	{r7, lr}
 8012762:	b082      	sub	sp, #8
 8012764:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012766:	f000 ff69 	bl	801363c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 801276a:	2300      	movs	r3, #0
 801276c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 801276e:	4b04      	ldr	r3, [pc, #16]	; (8012780 <xTaskGetTickCountFromISR+0x20>)
 8012770:	681b      	ldr	r3, [r3, #0]
 8012772:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012774:	683b      	ldr	r3, [r7, #0]
}
 8012776:	4618      	mov	r0, r3
 8012778:	3708      	adds	r7, #8
 801277a:	46bd      	mov	sp, r7
 801277c:	bd80      	pop	{r7, pc}
 801277e:	bf00      	nop
 8012780:	20001318 	.word	0x20001318

08012784 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012784:	b580      	push	{r7, lr}
 8012786:	b086      	sub	sp, #24
 8012788:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801278a:	2300      	movs	r3, #0
 801278c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801278e:	4b4f      	ldr	r3, [pc, #316]	; (80128cc <xTaskIncrementTick+0x148>)
 8012790:	681b      	ldr	r3, [r3, #0]
 8012792:	2b00      	cmp	r3, #0
 8012794:	f040 808a 	bne.w	80128ac <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012798:	4b4d      	ldr	r3, [pc, #308]	; (80128d0 <xTaskIncrementTick+0x14c>)
 801279a:	681b      	ldr	r3, [r3, #0]
 801279c:	3301      	adds	r3, #1
 801279e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80127a0:	4a4b      	ldr	r2, [pc, #300]	; (80128d0 <xTaskIncrementTick+0x14c>)
 80127a2:	693b      	ldr	r3, [r7, #16]
 80127a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80127a6:	693b      	ldr	r3, [r7, #16]
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d122      	bne.n	80127f2 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80127ac:	4b49      	ldr	r3, [pc, #292]	; (80128d4 <xTaskIncrementTick+0x150>)
 80127ae:	681b      	ldr	r3, [r3, #0]
 80127b0:	681b      	ldr	r3, [r3, #0]
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	d00c      	beq.n	80127d0 <xTaskIncrementTick+0x4c>
	__asm volatile
 80127b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127ba:	b672      	cpsid	i
 80127bc:	f383 8811 	msr	BASEPRI, r3
 80127c0:	f3bf 8f6f 	isb	sy
 80127c4:	f3bf 8f4f 	dsb	sy
 80127c8:	b662      	cpsie	i
 80127ca:	603b      	str	r3, [r7, #0]
}
 80127cc:	bf00      	nop
 80127ce:	e7fe      	b.n	80127ce <xTaskIncrementTick+0x4a>
 80127d0:	4b40      	ldr	r3, [pc, #256]	; (80128d4 <xTaskIncrementTick+0x150>)
 80127d2:	681b      	ldr	r3, [r3, #0]
 80127d4:	60fb      	str	r3, [r7, #12]
 80127d6:	4b40      	ldr	r3, [pc, #256]	; (80128d8 <xTaskIncrementTick+0x154>)
 80127d8:	681b      	ldr	r3, [r3, #0]
 80127da:	4a3e      	ldr	r2, [pc, #248]	; (80128d4 <xTaskIncrementTick+0x150>)
 80127dc:	6013      	str	r3, [r2, #0]
 80127de:	4a3e      	ldr	r2, [pc, #248]	; (80128d8 <xTaskIncrementTick+0x154>)
 80127e0:	68fb      	ldr	r3, [r7, #12]
 80127e2:	6013      	str	r3, [r2, #0]
 80127e4:	4b3d      	ldr	r3, [pc, #244]	; (80128dc <xTaskIncrementTick+0x158>)
 80127e6:	681b      	ldr	r3, [r3, #0]
 80127e8:	3301      	adds	r3, #1
 80127ea:	4a3c      	ldr	r2, [pc, #240]	; (80128dc <xTaskIncrementTick+0x158>)
 80127ec:	6013      	str	r3, [r2, #0]
 80127ee:	f000 fad1 	bl	8012d94 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80127f2:	4b3b      	ldr	r3, [pc, #236]	; (80128e0 <xTaskIncrementTick+0x15c>)
 80127f4:	681b      	ldr	r3, [r3, #0]
 80127f6:	693a      	ldr	r2, [r7, #16]
 80127f8:	429a      	cmp	r2, r3
 80127fa:	d348      	bcc.n	801288e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80127fc:	4b35      	ldr	r3, [pc, #212]	; (80128d4 <xTaskIncrementTick+0x150>)
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	681b      	ldr	r3, [r3, #0]
 8012802:	2b00      	cmp	r3, #0
 8012804:	d104      	bne.n	8012810 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012806:	4b36      	ldr	r3, [pc, #216]	; (80128e0 <xTaskIncrementTick+0x15c>)
 8012808:	f04f 32ff 	mov.w	r2, #4294967295
 801280c:	601a      	str	r2, [r3, #0]
					break;
 801280e:	e03e      	b.n	801288e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012810:	4b30      	ldr	r3, [pc, #192]	; (80128d4 <xTaskIncrementTick+0x150>)
 8012812:	681b      	ldr	r3, [r3, #0]
 8012814:	68db      	ldr	r3, [r3, #12]
 8012816:	68db      	ldr	r3, [r3, #12]
 8012818:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801281a:	68bb      	ldr	r3, [r7, #8]
 801281c:	685b      	ldr	r3, [r3, #4]
 801281e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8012820:	693a      	ldr	r2, [r7, #16]
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	429a      	cmp	r2, r3
 8012826:	d203      	bcs.n	8012830 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8012828:	4a2d      	ldr	r2, [pc, #180]	; (80128e0 <xTaskIncrementTick+0x15c>)
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801282e:	e02e      	b.n	801288e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012830:	68bb      	ldr	r3, [r7, #8]
 8012832:	3304      	adds	r3, #4
 8012834:	4618      	mov	r0, r3
 8012836:	f7fe fc5b 	bl	80110f0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801283a:	68bb      	ldr	r3, [r7, #8]
 801283c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801283e:	2b00      	cmp	r3, #0
 8012840:	d004      	beq.n	801284c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012842:	68bb      	ldr	r3, [r7, #8]
 8012844:	3318      	adds	r3, #24
 8012846:	4618      	mov	r0, r3
 8012848:	f7fe fc52 	bl	80110f0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801284c:	68bb      	ldr	r3, [r7, #8]
 801284e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012850:	2201      	movs	r2, #1
 8012852:	409a      	lsls	r2, r3
 8012854:	4b23      	ldr	r3, [pc, #140]	; (80128e4 <xTaskIncrementTick+0x160>)
 8012856:	681b      	ldr	r3, [r3, #0]
 8012858:	4313      	orrs	r3, r2
 801285a:	4a22      	ldr	r2, [pc, #136]	; (80128e4 <xTaskIncrementTick+0x160>)
 801285c:	6013      	str	r3, [r2, #0]
 801285e:	68bb      	ldr	r3, [r7, #8]
 8012860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012862:	4613      	mov	r3, r2
 8012864:	009b      	lsls	r3, r3, #2
 8012866:	4413      	add	r3, r2
 8012868:	009b      	lsls	r3, r3, #2
 801286a:	4a1f      	ldr	r2, [pc, #124]	; (80128e8 <xTaskIncrementTick+0x164>)
 801286c:	441a      	add	r2, r3
 801286e:	68bb      	ldr	r3, [r7, #8]
 8012870:	3304      	adds	r3, #4
 8012872:	4619      	mov	r1, r3
 8012874:	4610      	mov	r0, r2
 8012876:	f7fe fbde 	bl	8011036 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801287a:	68bb      	ldr	r3, [r7, #8]
 801287c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801287e:	4b1b      	ldr	r3, [pc, #108]	; (80128ec <xTaskIncrementTick+0x168>)
 8012880:	681b      	ldr	r3, [r3, #0]
 8012882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012884:	429a      	cmp	r2, r3
 8012886:	d3b9      	bcc.n	80127fc <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8012888:	2301      	movs	r3, #1
 801288a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801288c:	e7b6      	b.n	80127fc <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801288e:	4b17      	ldr	r3, [pc, #92]	; (80128ec <xTaskIncrementTick+0x168>)
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012894:	4914      	ldr	r1, [pc, #80]	; (80128e8 <xTaskIncrementTick+0x164>)
 8012896:	4613      	mov	r3, r2
 8012898:	009b      	lsls	r3, r3, #2
 801289a:	4413      	add	r3, r2
 801289c:	009b      	lsls	r3, r3, #2
 801289e:	440b      	add	r3, r1
 80128a0:	681b      	ldr	r3, [r3, #0]
 80128a2:	2b01      	cmp	r3, #1
 80128a4:	d907      	bls.n	80128b6 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 80128a6:	2301      	movs	r3, #1
 80128a8:	617b      	str	r3, [r7, #20]
 80128aa:	e004      	b.n	80128b6 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80128ac:	4b10      	ldr	r3, [pc, #64]	; (80128f0 <xTaskIncrementTick+0x16c>)
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	3301      	adds	r3, #1
 80128b2:	4a0f      	ldr	r2, [pc, #60]	; (80128f0 <xTaskIncrementTick+0x16c>)
 80128b4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80128b6:	4b0f      	ldr	r3, [pc, #60]	; (80128f4 <xTaskIncrementTick+0x170>)
 80128b8:	681b      	ldr	r3, [r3, #0]
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d001      	beq.n	80128c2 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 80128be:	2301      	movs	r3, #1
 80128c0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80128c2:	697b      	ldr	r3, [r7, #20]
}
 80128c4:	4618      	mov	r0, r3
 80128c6:	3718      	adds	r7, #24
 80128c8:	46bd      	mov	sp, r7
 80128ca:	bd80      	pop	{r7, pc}
 80128cc:	2000133c 	.word	0x2000133c
 80128d0:	20001318 	.word	0x20001318
 80128d4:	200012cc 	.word	0x200012cc
 80128d8:	200012d0 	.word	0x200012d0
 80128dc:	2000132c 	.word	0x2000132c
 80128e0:	20001334 	.word	0x20001334
 80128e4:	2000131c 	.word	0x2000131c
 80128e8:	20001218 	.word	0x20001218
 80128ec:	20001214 	.word	0x20001214
 80128f0:	20001324 	.word	0x20001324
 80128f4:	20001328 	.word	0x20001328

080128f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80128f8:	b580      	push	{r7, lr}
 80128fa:	b088      	sub	sp, #32
 80128fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80128fe:	4b3a      	ldr	r3, [pc, #232]	; (80129e8 <vTaskSwitchContext+0xf0>)
 8012900:	681b      	ldr	r3, [r3, #0]
 8012902:	2b00      	cmp	r3, #0
 8012904:	d003      	beq.n	801290e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8012906:	4b39      	ldr	r3, [pc, #228]	; (80129ec <vTaskSwitchContext+0xf4>)
 8012908:	2201      	movs	r2, #1
 801290a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801290c:	e068      	b.n	80129e0 <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 801290e:	4b37      	ldr	r3, [pc, #220]	; (80129ec <vTaskSwitchContext+0xf4>)
 8012910:	2200      	movs	r2, #0
 8012912:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8012914:	4b36      	ldr	r3, [pc, #216]	; (80129f0 <vTaskSwitchContext+0xf8>)
 8012916:	681b      	ldr	r3, [r3, #0]
 8012918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801291a:	61fb      	str	r3, [r7, #28]
 801291c:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8012920:	61bb      	str	r3, [r7, #24]
 8012922:	69fb      	ldr	r3, [r7, #28]
 8012924:	681b      	ldr	r3, [r3, #0]
 8012926:	69ba      	ldr	r2, [r7, #24]
 8012928:	429a      	cmp	r2, r3
 801292a:	d111      	bne.n	8012950 <vTaskSwitchContext+0x58>
 801292c:	69fb      	ldr	r3, [r7, #28]
 801292e:	3304      	adds	r3, #4
 8012930:	681b      	ldr	r3, [r3, #0]
 8012932:	69ba      	ldr	r2, [r7, #24]
 8012934:	429a      	cmp	r2, r3
 8012936:	d10b      	bne.n	8012950 <vTaskSwitchContext+0x58>
 8012938:	69fb      	ldr	r3, [r7, #28]
 801293a:	3308      	adds	r3, #8
 801293c:	681b      	ldr	r3, [r3, #0]
 801293e:	69ba      	ldr	r2, [r7, #24]
 8012940:	429a      	cmp	r2, r3
 8012942:	d105      	bne.n	8012950 <vTaskSwitchContext+0x58>
 8012944:	69fb      	ldr	r3, [r7, #28]
 8012946:	330c      	adds	r3, #12
 8012948:	681b      	ldr	r3, [r3, #0]
 801294a:	69ba      	ldr	r2, [r7, #24]
 801294c:	429a      	cmp	r2, r3
 801294e:	d008      	beq.n	8012962 <vTaskSwitchContext+0x6a>
 8012950:	4b27      	ldr	r3, [pc, #156]	; (80129f0 <vTaskSwitchContext+0xf8>)
 8012952:	681a      	ldr	r2, [r3, #0]
 8012954:	4b26      	ldr	r3, [pc, #152]	; (80129f0 <vTaskSwitchContext+0xf8>)
 8012956:	681b      	ldr	r3, [r3, #0]
 8012958:	3334      	adds	r3, #52	; 0x34
 801295a:	4619      	mov	r1, r3
 801295c:	4610      	mov	r0, r2
 801295e:	f7ed fde0 	bl	8000522 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012962:	4b24      	ldr	r3, [pc, #144]	; (80129f4 <vTaskSwitchContext+0xfc>)
 8012964:	681b      	ldr	r3, [r3, #0]
 8012966:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8012968:	68fb      	ldr	r3, [r7, #12]
 801296a:	fab3 f383 	clz	r3, r3
 801296e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8012970:	7afb      	ldrb	r3, [r7, #11]
 8012972:	f1c3 031f 	rsb	r3, r3, #31
 8012976:	617b      	str	r3, [r7, #20]
 8012978:	491f      	ldr	r1, [pc, #124]	; (80129f8 <vTaskSwitchContext+0x100>)
 801297a:	697a      	ldr	r2, [r7, #20]
 801297c:	4613      	mov	r3, r2
 801297e:	009b      	lsls	r3, r3, #2
 8012980:	4413      	add	r3, r2
 8012982:	009b      	lsls	r3, r3, #2
 8012984:	440b      	add	r3, r1
 8012986:	681b      	ldr	r3, [r3, #0]
 8012988:	2b00      	cmp	r3, #0
 801298a:	d10c      	bne.n	80129a6 <vTaskSwitchContext+0xae>
	__asm volatile
 801298c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012990:	b672      	cpsid	i
 8012992:	f383 8811 	msr	BASEPRI, r3
 8012996:	f3bf 8f6f 	isb	sy
 801299a:	f3bf 8f4f 	dsb	sy
 801299e:	b662      	cpsie	i
 80129a0:	607b      	str	r3, [r7, #4]
}
 80129a2:	bf00      	nop
 80129a4:	e7fe      	b.n	80129a4 <vTaskSwitchContext+0xac>
 80129a6:	697a      	ldr	r2, [r7, #20]
 80129a8:	4613      	mov	r3, r2
 80129aa:	009b      	lsls	r3, r3, #2
 80129ac:	4413      	add	r3, r2
 80129ae:	009b      	lsls	r3, r3, #2
 80129b0:	4a11      	ldr	r2, [pc, #68]	; (80129f8 <vTaskSwitchContext+0x100>)
 80129b2:	4413      	add	r3, r2
 80129b4:	613b      	str	r3, [r7, #16]
 80129b6:	693b      	ldr	r3, [r7, #16]
 80129b8:	685b      	ldr	r3, [r3, #4]
 80129ba:	685a      	ldr	r2, [r3, #4]
 80129bc:	693b      	ldr	r3, [r7, #16]
 80129be:	605a      	str	r2, [r3, #4]
 80129c0:	693b      	ldr	r3, [r7, #16]
 80129c2:	685a      	ldr	r2, [r3, #4]
 80129c4:	693b      	ldr	r3, [r7, #16]
 80129c6:	3308      	adds	r3, #8
 80129c8:	429a      	cmp	r2, r3
 80129ca:	d104      	bne.n	80129d6 <vTaskSwitchContext+0xde>
 80129cc:	693b      	ldr	r3, [r7, #16]
 80129ce:	685b      	ldr	r3, [r3, #4]
 80129d0:	685a      	ldr	r2, [r3, #4]
 80129d2:	693b      	ldr	r3, [r7, #16]
 80129d4:	605a      	str	r2, [r3, #4]
 80129d6:	693b      	ldr	r3, [r7, #16]
 80129d8:	685b      	ldr	r3, [r3, #4]
 80129da:	68db      	ldr	r3, [r3, #12]
 80129dc:	4a04      	ldr	r2, [pc, #16]	; (80129f0 <vTaskSwitchContext+0xf8>)
 80129de:	6013      	str	r3, [r2, #0]
}
 80129e0:	bf00      	nop
 80129e2:	3720      	adds	r7, #32
 80129e4:	46bd      	mov	sp, r7
 80129e6:	bd80      	pop	{r7, pc}
 80129e8:	2000133c 	.word	0x2000133c
 80129ec:	20001328 	.word	0x20001328
 80129f0:	20001214 	.word	0x20001214
 80129f4:	2000131c 	.word	0x2000131c
 80129f8:	20001218 	.word	0x20001218

080129fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80129fc:	b580      	push	{r7, lr}
 80129fe:	b084      	sub	sp, #16
 8012a00:	af00      	add	r7, sp, #0
 8012a02:	6078      	str	r0, [r7, #4]
 8012a04:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d10c      	bne.n	8012a26 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8012a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a10:	b672      	cpsid	i
 8012a12:	f383 8811 	msr	BASEPRI, r3
 8012a16:	f3bf 8f6f 	isb	sy
 8012a1a:	f3bf 8f4f 	dsb	sy
 8012a1e:	b662      	cpsie	i
 8012a20:	60fb      	str	r3, [r7, #12]
}
 8012a22:	bf00      	nop
 8012a24:	e7fe      	b.n	8012a24 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012a26:	4b07      	ldr	r3, [pc, #28]	; (8012a44 <vTaskPlaceOnEventList+0x48>)
 8012a28:	681b      	ldr	r3, [r3, #0]
 8012a2a:	3318      	adds	r3, #24
 8012a2c:	4619      	mov	r1, r3
 8012a2e:	6878      	ldr	r0, [r7, #4]
 8012a30:	f7fe fb25 	bl	801107e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012a34:	2101      	movs	r1, #1
 8012a36:	6838      	ldr	r0, [r7, #0]
 8012a38:	f000 fba6 	bl	8013188 <prvAddCurrentTaskToDelayedList>
}
 8012a3c:	bf00      	nop
 8012a3e:	3710      	adds	r7, #16
 8012a40:	46bd      	mov	sp, r7
 8012a42:	bd80      	pop	{r7, pc}
 8012a44:	20001214 	.word	0x20001214

08012a48 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8012a48:	b580      	push	{r7, lr}
 8012a4a:	b086      	sub	sp, #24
 8012a4c:	af00      	add	r7, sp, #0
 8012a4e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	68db      	ldr	r3, [r3, #12]
 8012a54:	68db      	ldr	r3, [r3, #12]
 8012a56:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8012a58:	693b      	ldr	r3, [r7, #16]
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d10c      	bne.n	8012a78 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8012a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a62:	b672      	cpsid	i
 8012a64:	f383 8811 	msr	BASEPRI, r3
 8012a68:	f3bf 8f6f 	isb	sy
 8012a6c:	f3bf 8f4f 	dsb	sy
 8012a70:	b662      	cpsie	i
 8012a72:	60fb      	str	r3, [r7, #12]
}
 8012a74:	bf00      	nop
 8012a76:	e7fe      	b.n	8012a76 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8012a78:	693b      	ldr	r3, [r7, #16]
 8012a7a:	3318      	adds	r3, #24
 8012a7c:	4618      	mov	r0, r3
 8012a7e:	f7fe fb37 	bl	80110f0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012a82:	4b1d      	ldr	r3, [pc, #116]	; (8012af8 <xTaskRemoveFromEventList+0xb0>)
 8012a84:	681b      	ldr	r3, [r3, #0]
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d11c      	bne.n	8012ac4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012a8a:	693b      	ldr	r3, [r7, #16]
 8012a8c:	3304      	adds	r3, #4
 8012a8e:	4618      	mov	r0, r3
 8012a90:	f7fe fb2e 	bl	80110f0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8012a94:	693b      	ldr	r3, [r7, #16]
 8012a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a98:	2201      	movs	r2, #1
 8012a9a:	409a      	lsls	r2, r3
 8012a9c:	4b17      	ldr	r3, [pc, #92]	; (8012afc <xTaskRemoveFromEventList+0xb4>)
 8012a9e:	681b      	ldr	r3, [r3, #0]
 8012aa0:	4313      	orrs	r3, r2
 8012aa2:	4a16      	ldr	r2, [pc, #88]	; (8012afc <xTaskRemoveFromEventList+0xb4>)
 8012aa4:	6013      	str	r3, [r2, #0]
 8012aa6:	693b      	ldr	r3, [r7, #16]
 8012aa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012aaa:	4613      	mov	r3, r2
 8012aac:	009b      	lsls	r3, r3, #2
 8012aae:	4413      	add	r3, r2
 8012ab0:	009b      	lsls	r3, r3, #2
 8012ab2:	4a13      	ldr	r2, [pc, #76]	; (8012b00 <xTaskRemoveFromEventList+0xb8>)
 8012ab4:	441a      	add	r2, r3
 8012ab6:	693b      	ldr	r3, [r7, #16]
 8012ab8:	3304      	adds	r3, #4
 8012aba:	4619      	mov	r1, r3
 8012abc:	4610      	mov	r0, r2
 8012abe:	f7fe faba 	bl	8011036 <vListInsertEnd>
 8012ac2:	e005      	b.n	8012ad0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8012ac4:	693b      	ldr	r3, [r7, #16]
 8012ac6:	3318      	adds	r3, #24
 8012ac8:	4619      	mov	r1, r3
 8012aca:	480e      	ldr	r0, [pc, #56]	; (8012b04 <xTaskRemoveFromEventList+0xbc>)
 8012acc:	f7fe fab3 	bl	8011036 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012ad0:	693b      	ldr	r3, [r7, #16]
 8012ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ad4:	4b0c      	ldr	r3, [pc, #48]	; (8012b08 <xTaskRemoveFromEventList+0xc0>)
 8012ad6:	681b      	ldr	r3, [r3, #0]
 8012ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ada:	429a      	cmp	r2, r3
 8012adc:	d905      	bls.n	8012aea <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8012ade:	2301      	movs	r3, #1
 8012ae0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8012ae2:	4b0a      	ldr	r3, [pc, #40]	; (8012b0c <xTaskRemoveFromEventList+0xc4>)
 8012ae4:	2201      	movs	r2, #1
 8012ae6:	601a      	str	r2, [r3, #0]
 8012ae8:	e001      	b.n	8012aee <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8012aea:	2300      	movs	r3, #0
 8012aec:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8012aee:	697b      	ldr	r3, [r7, #20]
}
 8012af0:	4618      	mov	r0, r3
 8012af2:	3718      	adds	r7, #24
 8012af4:	46bd      	mov	sp, r7
 8012af6:	bd80      	pop	{r7, pc}
 8012af8:	2000133c 	.word	0x2000133c
 8012afc:	2000131c 	.word	0x2000131c
 8012b00:	20001218 	.word	0x20001218
 8012b04:	200012d4 	.word	0x200012d4
 8012b08:	20001214 	.word	0x20001214
 8012b0c:	20001328 	.word	0x20001328

08012b10 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8012b10:	b480      	push	{r7}
 8012b12:	b083      	sub	sp, #12
 8012b14:	af00      	add	r7, sp, #0
 8012b16:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012b18:	4b06      	ldr	r3, [pc, #24]	; (8012b34 <vTaskInternalSetTimeOutState+0x24>)
 8012b1a:	681a      	ldr	r2, [r3, #0]
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8012b20:	4b05      	ldr	r3, [pc, #20]	; (8012b38 <vTaskInternalSetTimeOutState+0x28>)
 8012b22:	681a      	ldr	r2, [r3, #0]
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	605a      	str	r2, [r3, #4]
}
 8012b28:	bf00      	nop
 8012b2a:	370c      	adds	r7, #12
 8012b2c:	46bd      	mov	sp, r7
 8012b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b32:	4770      	bx	lr
 8012b34:	2000132c 	.word	0x2000132c
 8012b38:	20001318 	.word	0x20001318

08012b3c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8012b3c:	b580      	push	{r7, lr}
 8012b3e:	b088      	sub	sp, #32
 8012b40:	af00      	add	r7, sp, #0
 8012b42:	6078      	str	r0, [r7, #4]
 8012b44:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	d10c      	bne.n	8012b66 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8012b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b50:	b672      	cpsid	i
 8012b52:	f383 8811 	msr	BASEPRI, r3
 8012b56:	f3bf 8f6f 	isb	sy
 8012b5a:	f3bf 8f4f 	dsb	sy
 8012b5e:	b662      	cpsie	i
 8012b60:	613b      	str	r3, [r7, #16]
}
 8012b62:	bf00      	nop
 8012b64:	e7fe      	b.n	8012b64 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8012b66:	683b      	ldr	r3, [r7, #0]
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	d10c      	bne.n	8012b86 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8012b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b70:	b672      	cpsid	i
 8012b72:	f383 8811 	msr	BASEPRI, r3
 8012b76:	f3bf 8f6f 	isb	sy
 8012b7a:	f3bf 8f4f 	dsb	sy
 8012b7e:	b662      	cpsie	i
 8012b80:	60fb      	str	r3, [r7, #12]
}
 8012b82:	bf00      	nop
 8012b84:	e7fe      	b.n	8012b84 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8012b86:	f000 fc71 	bl	801346c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8012b8a:	4b1d      	ldr	r3, [pc, #116]	; (8012c00 <xTaskCheckForTimeOut+0xc4>)
 8012b8c:	681b      	ldr	r3, [r3, #0]
 8012b8e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	685b      	ldr	r3, [r3, #4]
 8012b94:	69ba      	ldr	r2, [r7, #24]
 8012b96:	1ad3      	subs	r3, r2, r3
 8012b98:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8012b9a:	683b      	ldr	r3, [r7, #0]
 8012b9c:	681b      	ldr	r3, [r3, #0]
 8012b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ba2:	d102      	bne.n	8012baa <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8012ba4:	2300      	movs	r3, #0
 8012ba6:	61fb      	str	r3, [r7, #28]
 8012ba8:	e023      	b.n	8012bf2 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	681a      	ldr	r2, [r3, #0]
 8012bae:	4b15      	ldr	r3, [pc, #84]	; (8012c04 <xTaskCheckForTimeOut+0xc8>)
 8012bb0:	681b      	ldr	r3, [r3, #0]
 8012bb2:	429a      	cmp	r2, r3
 8012bb4:	d007      	beq.n	8012bc6 <xTaskCheckForTimeOut+0x8a>
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	685b      	ldr	r3, [r3, #4]
 8012bba:	69ba      	ldr	r2, [r7, #24]
 8012bbc:	429a      	cmp	r2, r3
 8012bbe:	d302      	bcc.n	8012bc6 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012bc0:	2301      	movs	r3, #1
 8012bc2:	61fb      	str	r3, [r7, #28]
 8012bc4:	e015      	b.n	8012bf2 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8012bc6:	683b      	ldr	r3, [r7, #0]
 8012bc8:	681b      	ldr	r3, [r3, #0]
 8012bca:	697a      	ldr	r2, [r7, #20]
 8012bcc:	429a      	cmp	r2, r3
 8012bce:	d20b      	bcs.n	8012be8 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012bd0:	683b      	ldr	r3, [r7, #0]
 8012bd2:	681a      	ldr	r2, [r3, #0]
 8012bd4:	697b      	ldr	r3, [r7, #20]
 8012bd6:	1ad2      	subs	r2, r2, r3
 8012bd8:	683b      	ldr	r3, [r7, #0]
 8012bda:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012bdc:	6878      	ldr	r0, [r7, #4]
 8012bde:	f7ff ff97 	bl	8012b10 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8012be2:	2300      	movs	r3, #0
 8012be4:	61fb      	str	r3, [r7, #28]
 8012be6:	e004      	b.n	8012bf2 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8012be8:	683b      	ldr	r3, [r7, #0]
 8012bea:	2200      	movs	r2, #0
 8012bec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8012bee:	2301      	movs	r3, #1
 8012bf0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8012bf2:	f000 fc6f 	bl	80134d4 <vPortExitCritical>

	return xReturn;
 8012bf6:	69fb      	ldr	r3, [r7, #28]
}
 8012bf8:	4618      	mov	r0, r3
 8012bfa:	3720      	adds	r7, #32
 8012bfc:	46bd      	mov	sp, r7
 8012bfe:	bd80      	pop	{r7, pc}
 8012c00:	20001318 	.word	0x20001318
 8012c04:	2000132c 	.word	0x2000132c

08012c08 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8012c08:	b480      	push	{r7}
 8012c0a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8012c0c:	4b03      	ldr	r3, [pc, #12]	; (8012c1c <vTaskMissedYield+0x14>)
 8012c0e:	2201      	movs	r2, #1
 8012c10:	601a      	str	r2, [r3, #0]
}
 8012c12:	bf00      	nop
 8012c14:	46bd      	mov	sp, r7
 8012c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c1a:	4770      	bx	lr
 8012c1c:	20001328 	.word	0x20001328

08012c20 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012c20:	b580      	push	{r7, lr}
 8012c22:	b082      	sub	sp, #8
 8012c24:	af00      	add	r7, sp, #0
 8012c26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8012c28:	f000 f854 	bl	8012cd4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8012c2c:	4b07      	ldr	r3, [pc, #28]	; (8012c4c <prvIdleTask+0x2c>)
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	2b01      	cmp	r3, #1
 8012c32:	d907      	bls.n	8012c44 <prvIdleTask+0x24>
			{
				taskYIELD();
 8012c34:	4b06      	ldr	r3, [pc, #24]	; (8012c50 <prvIdleTask+0x30>)
 8012c36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012c3a:	601a      	str	r2, [r3, #0]
 8012c3c:	f3bf 8f4f 	dsb	sy
 8012c40:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8012c44:	f7ed fc66 	bl	8000514 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8012c48:	e7ee      	b.n	8012c28 <prvIdleTask+0x8>
 8012c4a:	bf00      	nop
 8012c4c:	20001218 	.word	0x20001218
 8012c50:	e000ed04 	.word	0xe000ed04

08012c54 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012c54:	b580      	push	{r7, lr}
 8012c56:	b082      	sub	sp, #8
 8012c58:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012c5a:	2300      	movs	r3, #0
 8012c5c:	607b      	str	r3, [r7, #4]
 8012c5e:	e00c      	b.n	8012c7a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8012c60:	687a      	ldr	r2, [r7, #4]
 8012c62:	4613      	mov	r3, r2
 8012c64:	009b      	lsls	r3, r3, #2
 8012c66:	4413      	add	r3, r2
 8012c68:	009b      	lsls	r3, r3, #2
 8012c6a:	4a12      	ldr	r2, [pc, #72]	; (8012cb4 <prvInitialiseTaskLists+0x60>)
 8012c6c:	4413      	add	r3, r2
 8012c6e:	4618      	mov	r0, r3
 8012c70:	f7fe f9b4 	bl	8010fdc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	3301      	adds	r3, #1
 8012c78:	607b      	str	r3, [r7, #4]
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	2b06      	cmp	r3, #6
 8012c7e:	d9ef      	bls.n	8012c60 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8012c80:	480d      	ldr	r0, [pc, #52]	; (8012cb8 <prvInitialiseTaskLists+0x64>)
 8012c82:	f7fe f9ab 	bl	8010fdc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8012c86:	480d      	ldr	r0, [pc, #52]	; (8012cbc <prvInitialiseTaskLists+0x68>)
 8012c88:	f7fe f9a8 	bl	8010fdc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8012c8c:	480c      	ldr	r0, [pc, #48]	; (8012cc0 <prvInitialiseTaskLists+0x6c>)
 8012c8e:	f7fe f9a5 	bl	8010fdc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8012c92:	480c      	ldr	r0, [pc, #48]	; (8012cc4 <prvInitialiseTaskLists+0x70>)
 8012c94:	f7fe f9a2 	bl	8010fdc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8012c98:	480b      	ldr	r0, [pc, #44]	; (8012cc8 <prvInitialiseTaskLists+0x74>)
 8012c9a:	f7fe f99f 	bl	8010fdc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8012c9e:	4b0b      	ldr	r3, [pc, #44]	; (8012ccc <prvInitialiseTaskLists+0x78>)
 8012ca0:	4a05      	ldr	r2, [pc, #20]	; (8012cb8 <prvInitialiseTaskLists+0x64>)
 8012ca2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8012ca4:	4b0a      	ldr	r3, [pc, #40]	; (8012cd0 <prvInitialiseTaskLists+0x7c>)
 8012ca6:	4a05      	ldr	r2, [pc, #20]	; (8012cbc <prvInitialiseTaskLists+0x68>)
 8012ca8:	601a      	str	r2, [r3, #0]
}
 8012caa:	bf00      	nop
 8012cac:	3708      	adds	r7, #8
 8012cae:	46bd      	mov	sp, r7
 8012cb0:	bd80      	pop	{r7, pc}
 8012cb2:	bf00      	nop
 8012cb4:	20001218 	.word	0x20001218
 8012cb8:	200012a4 	.word	0x200012a4
 8012cbc:	200012b8 	.word	0x200012b8
 8012cc0:	200012d4 	.word	0x200012d4
 8012cc4:	200012e8 	.word	0x200012e8
 8012cc8:	20001300 	.word	0x20001300
 8012ccc:	200012cc 	.word	0x200012cc
 8012cd0:	200012d0 	.word	0x200012d0

08012cd4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012cd4:	b580      	push	{r7, lr}
 8012cd6:	b082      	sub	sp, #8
 8012cd8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012cda:	e019      	b.n	8012d10 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8012cdc:	f000 fbc6 	bl	801346c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012ce0:	4b10      	ldr	r3, [pc, #64]	; (8012d24 <prvCheckTasksWaitingTermination+0x50>)
 8012ce2:	68db      	ldr	r3, [r3, #12]
 8012ce4:	68db      	ldr	r3, [r3, #12]
 8012ce6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	3304      	adds	r3, #4
 8012cec:	4618      	mov	r0, r3
 8012cee:	f7fe f9ff 	bl	80110f0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8012cf2:	4b0d      	ldr	r3, [pc, #52]	; (8012d28 <prvCheckTasksWaitingTermination+0x54>)
 8012cf4:	681b      	ldr	r3, [r3, #0]
 8012cf6:	3b01      	subs	r3, #1
 8012cf8:	4a0b      	ldr	r2, [pc, #44]	; (8012d28 <prvCheckTasksWaitingTermination+0x54>)
 8012cfa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8012cfc:	4b0b      	ldr	r3, [pc, #44]	; (8012d2c <prvCheckTasksWaitingTermination+0x58>)
 8012cfe:	681b      	ldr	r3, [r3, #0]
 8012d00:	3b01      	subs	r3, #1
 8012d02:	4a0a      	ldr	r2, [pc, #40]	; (8012d2c <prvCheckTasksWaitingTermination+0x58>)
 8012d04:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8012d06:	f000 fbe5 	bl	80134d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8012d0a:	6878      	ldr	r0, [r7, #4]
 8012d0c:	f000 f810 	bl	8012d30 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012d10:	4b06      	ldr	r3, [pc, #24]	; (8012d2c <prvCheckTasksWaitingTermination+0x58>)
 8012d12:	681b      	ldr	r3, [r3, #0]
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	d1e1      	bne.n	8012cdc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012d18:	bf00      	nop
 8012d1a:	bf00      	nop
 8012d1c:	3708      	adds	r7, #8
 8012d1e:	46bd      	mov	sp, r7
 8012d20:	bd80      	pop	{r7, pc}
 8012d22:	bf00      	nop
 8012d24:	200012e8 	.word	0x200012e8
 8012d28:	20001314 	.word	0x20001314
 8012d2c:	200012fc 	.word	0x200012fc

08012d30 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8012d30:	b580      	push	{r7, lr}
 8012d32:	b084      	sub	sp, #16
 8012d34:	af00      	add	r7, sp, #0
 8012d36:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d108      	bne.n	8012d54 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d46:	4618      	mov	r0, r3
 8012d48:	f000 fd8c 	bl	8013864 <vPortFree>
				vPortFree( pxTCB );
 8012d4c:	6878      	ldr	r0, [r7, #4]
 8012d4e:	f000 fd89 	bl	8013864 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8012d52:	e01a      	b.n	8012d8a <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012d5a:	2b01      	cmp	r3, #1
 8012d5c:	d103      	bne.n	8012d66 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8012d5e:	6878      	ldr	r0, [r7, #4]
 8012d60:	f000 fd80 	bl	8013864 <vPortFree>
	}
 8012d64:	e011      	b.n	8012d8a <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012d6c:	2b02      	cmp	r3, #2
 8012d6e:	d00c      	beq.n	8012d8a <prvDeleteTCB+0x5a>
	__asm volatile
 8012d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d74:	b672      	cpsid	i
 8012d76:	f383 8811 	msr	BASEPRI, r3
 8012d7a:	f3bf 8f6f 	isb	sy
 8012d7e:	f3bf 8f4f 	dsb	sy
 8012d82:	b662      	cpsie	i
 8012d84:	60fb      	str	r3, [r7, #12]
}
 8012d86:	bf00      	nop
 8012d88:	e7fe      	b.n	8012d88 <prvDeleteTCB+0x58>
	}
 8012d8a:	bf00      	nop
 8012d8c:	3710      	adds	r7, #16
 8012d8e:	46bd      	mov	sp, r7
 8012d90:	bd80      	pop	{r7, pc}
	...

08012d94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8012d94:	b480      	push	{r7}
 8012d96:	b083      	sub	sp, #12
 8012d98:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012d9a:	4b0c      	ldr	r3, [pc, #48]	; (8012dcc <prvResetNextTaskUnblockTime+0x38>)
 8012d9c:	681b      	ldr	r3, [r3, #0]
 8012d9e:	681b      	ldr	r3, [r3, #0]
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	d104      	bne.n	8012dae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8012da4:	4b0a      	ldr	r3, [pc, #40]	; (8012dd0 <prvResetNextTaskUnblockTime+0x3c>)
 8012da6:	f04f 32ff 	mov.w	r2, #4294967295
 8012daa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8012dac:	e008      	b.n	8012dc0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012dae:	4b07      	ldr	r3, [pc, #28]	; (8012dcc <prvResetNextTaskUnblockTime+0x38>)
 8012db0:	681b      	ldr	r3, [r3, #0]
 8012db2:	68db      	ldr	r3, [r3, #12]
 8012db4:	68db      	ldr	r3, [r3, #12]
 8012db6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	685b      	ldr	r3, [r3, #4]
 8012dbc:	4a04      	ldr	r2, [pc, #16]	; (8012dd0 <prvResetNextTaskUnblockTime+0x3c>)
 8012dbe:	6013      	str	r3, [r2, #0]
}
 8012dc0:	bf00      	nop
 8012dc2:	370c      	adds	r7, #12
 8012dc4:	46bd      	mov	sp, r7
 8012dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dca:	4770      	bx	lr
 8012dcc:	200012cc 	.word	0x200012cc
 8012dd0:	20001334 	.word	0x20001334

08012dd4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012dd4:	b480      	push	{r7}
 8012dd6:	b083      	sub	sp, #12
 8012dd8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8012dda:	4b0b      	ldr	r3, [pc, #44]	; (8012e08 <xTaskGetSchedulerState+0x34>)
 8012ddc:	681b      	ldr	r3, [r3, #0]
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d102      	bne.n	8012de8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8012de2:	2301      	movs	r3, #1
 8012de4:	607b      	str	r3, [r7, #4]
 8012de6:	e008      	b.n	8012dfa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012de8:	4b08      	ldr	r3, [pc, #32]	; (8012e0c <xTaskGetSchedulerState+0x38>)
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d102      	bne.n	8012df6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8012df0:	2302      	movs	r3, #2
 8012df2:	607b      	str	r3, [r7, #4]
 8012df4:	e001      	b.n	8012dfa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8012df6:	2300      	movs	r3, #0
 8012df8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8012dfa:	687b      	ldr	r3, [r7, #4]
	}
 8012dfc:	4618      	mov	r0, r3
 8012dfe:	370c      	adds	r7, #12
 8012e00:	46bd      	mov	sp, r7
 8012e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e06:	4770      	bx	lr
 8012e08:	20001320 	.word	0x20001320
 8012e0c:	2000133c 	.word	0x2000133c

08012e10 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8012e10:	b580      	push	{r7, lr}
 8012e12:	b084      	sub	sp, #16
 8012e14:	af00      	add	r7, sp, #0
 8012e16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8012e1c:	2300      	movs	r3, #0
 8012e1e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d069      	beq.n	8012efa <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8012e26:	68bb      	ldr	r3, [r7, #8]
 8012e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e2a:	4b36      	ldr	r3, [pc, #216]	; (8012f04 <xTaskPriorityInherit+0xf4>)
 8012e2c:	681b      	ldr	r3, [r3, #0]
 8012e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e30:	429a      	cmp	r2, r3
 8012e32:	d259      	bcs.n	8012ee8 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012e34:	68bb      	ldr	r3, [r7, #8]
 8012e36:	699b      	ldr	r3, [r3, #24]
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	db06      	blt.n	8012e4a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012e3c:	4b31      	ldr	r3, [pc, #196]	; (8012f04 <xTaskPriorityInherit+0xf4>)
 8012e3e:	681b      	ldr	r3, [r3, #0]
 8012e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e42:	f1c3 0207 	rsb	r2, r3, #7
 8012e46:	68bb      	ldr	r3, [r7, #8]
 8012e48:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8012e4a:	68bb      	ldr	r3, [r7, #8]
 8012e4c:	6959      	ldr	r1, [r3, #20]
 8012e4e:	68bb      	ldr	r3, [r7, #8]
 8012e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e52:	4613      	mov	r3, r2
 8012e54:	009b      	lsls	r3, r3, #2
 8012e56:	4413      	add	r3, r2
 8012e58:	009b      	lsls	r3, r3, #2
 8012e5a:	4a2b      	ldr	r2, [pc, #172]	; (8012f08 <xTaskPriorityInherit+0xf8>)
 8012e5c:	4413      	add	r3, r2
 8012e5e:	4299      	cmp	r1, r3
 8012e60:	d13a      	bne.n	8012ed8 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012e62:	68bb      	ldr	r3, [r7, #8]
 8012e64:	3304      	adds	r3, #4
 8012e66:	4618      	mov	r0, r3
 8012e68:	f7fe f942 	bl	80110f0 <uxListRemove>
 8012e6c:	4603      	mov	r3, r0
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d115      	bne.n	8012e9e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8012e72:	68bb      	ldr	r3, [r7, #8]
 8012e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e76:	4924      	ldr	r1, [pc, #144]	; (8012f08 <xTaskPriorityInherit+0xf8>)
 8012e78:	4613      	mov	r3, r2
 8012e7a:	009b      	lsls	r3, r3, #2
 8012e7c:	4413      	add	r3, r2
 8012e7e:	009b      	lsls	r3, r3, #2
 8012e80:	440b      	add	r3, r1
 8012e82:	681b      	ldr	r3, [r3, #0]
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	d10a      	bne.n	8012e9e <xTaskPriorityInherit+0x8e>
 8012e88:	68bb      	ldr	r3, [r7, #8]
 8012e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e8c:	2201      	movs	r2, #1
 8012e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8012e92:	43da      	mvns	r2, r3
 8012e94:	4b1d      	ldr	r3, [pc, #116]	; (8012f0c <xTaskPriorityInherit+0xfc>)
 8012e96:	681b      	ldr	r3, [r3, #0]
 8012e98:	4013      	ands	r3, r2
 8012e9a:	4a1c      	ldr	r2, [pc, #112]	; (8012f0c <xTaskPriorityInherit+0xfc>)
 8012e9c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012e9e:	4b19      	ldr	r3, [pc, #100]	; (8012f04 <xTaskPriorityInherit+0xf4>)
 8012ea0:	681b      	ldr	r3, [r3, #0]
 8012ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ea4:	68bb      	ldr	r3, [r7, #8]
 8012ea6:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8012ea8:	68bb      	ldr	r3, [r7, #8]
 8012eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012eac:	2201      	movs	r2, #1
 8012eae:	409a      	lsls	r2, r3
 8012eb0:	4b16      	ldr	r3, [pc, #88]	; (8012f0c <xTaskPriorityInherit+0xfc>)
 8012eb2:	681b      	ldr	r3, [r3, #0]
 8012eb4:	4313      	orrs	r3, r2
 8012eb6:	4a15      	ldr	r2, [pc, #84]	; (8012f0c <xTaskPriorityInherit+0xfc>)
 8012eb8:	6013      	str	r3, [r2, #0]
 8012eba:	68bb      	ldr	r3, [r7, #8]
 8012ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ebe:	4613      	mov	r3, r2
 8012ec0:	009b      	lsls	r3, r3, #2
 8012ec2:	4413      	add	r3, r2
 8012ec4:	009b      	lsls	r3, r3, #2
 8012ec6:	4a10      	ldr	r2, [pc, #64]	; (8012f08 <xTaskPriorityInherit+0xf8>)
 8012ec8:	441a      	add	r2, r3
 8012eca:	68bb      	ldr	r3, [r7, #8]
 8012ecc:	3304      	adds	r3, #4
 8012ece:	4619      	mov	r1, r3
 8012ed0:	4610      	mov	r0, r2
 8012ed2:	f7fe f8b0 	bl	8011036 <vListInsertEnd>
 8012ed6:	e004      	b.n	8012ee2 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012ed8:	4b0a      	ldr	r3, [pc, #40]	; (8012f04 <xTaskPriorityInherit+0xf4>)
 8012eda:	681b      	ldr	r3, [r3, #0]
 8012edc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ede:	68bb      	ldr	r3, [r7, #8]
 8012ee0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8012ee2:	2301      	movs	r3, #1
 8012ee4:	60fb      	str	r3, [r7, #12]
 8012ee6:	e008      	b.n	8012efa <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8012ee8:	68bb      	ldr	r3, [r7, #8]
 8012eea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012eec:	4b05      	ldr	r3, [pc, #20]	; (8012f04 <xTaskPriorityInherit+0xf4>)
 8012eee:	681b      	ldr	r3, [r3, #0]
 8012ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ef2:	429a      	cmp	r2, r3
 8012ef4:	d201      	bcs.n	8012efa <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8012ef6:	2301      	movs	r3, #1
 8012ef8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012efa:	68fb      	ldr	r3, [r7, #12]
	}
 8012efc:	4618      	mov	r0, r3
 8012efe:	3710      	adds	r7, #16
 8012f00:	46bd      	mov	sp, r7
 8012f02:	bd80      	pop	{r7, pc}
 8012f04:	20001214 	.word	0x20001214
 8012f08:	20001218 	.word	0x20001218
 8012f0c:	2000131c 	.word	0x2000131c

08012f10 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8012f10:	b580      	push	{r7, lr}
 8012f12:	b086      	sub	sp, #24
 8012f14:	af00      	add	r7, sp, #0
 8012f16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8012f1c:	2300      	movs	r3, #0
 8012f1e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d072      	beq.n	801300c <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8012f26:	4b3c      	ldr	r3, [pc, #240]	; (8013018 <xTaskPriorityDisinherit+0x108>)
 8012f28:	681b      	ldr	r3, [r3, #0]
 8012f2a:	693a      	ldr	r2, [r7, #16]
 8012f2c:	429a      	cmp	r2, r3
 8012f2e:	d00c      	beq.n	8012f4a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8012f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f34:	b672      	cpsid	i
 8012f36:	f383 8811 	msr	BASEPRI, r3
 8012f3a:	f3bf 8f6f 	isb	sy
 8012f3e:	f3bf 8f4f 	dsb	sy
 8012f42:	b662      	cpsie	i
 8012f44:	60fb      	str	r3, [r7, #12]
}
 8012f46:	bf00      	nop
 8012f48:	e7fe      	b.n	8012f48 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8012f4a:	693b      	ldr	r3, [r7, #16]
 8012f4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d10c      	bne.n	8012f6c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8012f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f56:	b672      	cpsid	i
 8012f58:	f383 8811 	msr	BASEPRI, r3
 8012f5c:	f3bf 8f6f 	isb	sy
 8012f60:	f3bf 8f4f 	dsb	sy
 8012f64:	b662      	cpsie	i
 8012f66:	60bb      	str	r3, [r7, #8]
}
 8012f68:	bf00      	nop
 8012f6a:	e7fe      	b.n	8012f6a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8012f6c:	693b      	ldr	r3, [r7, #16]
 8012f6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012f70:	1e5a      	subs	r2, r3, #1
 8012f72:	693b      	ldr	r3, [r7, #16]
 8012f74:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012f76:	693b      	ldr	r3, [r7, #16]
 8012f78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f7a:	693b      	ldr	r3, [r7, #16]
 8012f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012f7e:	429a      	cmp	r2, r3
 8012f80:	d044      	beq.n	801300c <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8012f82:	693b      	ldr	r3, [r7, #16]
 8012f84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d140      	bne.n	801300c <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012f8a:	693b      	ldr	r3, [r7, #16]
 8012f8c:	3304      	adds	r3, #4
 8012f8e:	4618      	mov	r0, r3
 8012f90:	f7fe f8ae 	bl	80110f0 <uxListRemove>
 8012f94:	4603      	mov	r3, r0
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d115      	bne.n	8012fc6 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8012f9a:	693b      	ldr	r3, [r7, #16]
 8012f9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f9e:	491f      	ldr	r1, [pc, #124]	; (801301c <xTaskPriorityDisinherit+0x10c>)
 8012fa0:	4613      	mov	r3, r2
 8012fa2:	009b      	lsls	r3, r3, #2
 8012fa4:	4413      	add	r3, r2
 8012fa6:	009b      	lsls	r3, r3, #2
 8012fa8:	440b      	add	r3, r1
 8012faa:	681b      	ldr	r3, [r3, #0]
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d10a      	bne.n	8012fc6 <xTaskPriorityDisinherit+0xb6>
 8012fb0:	693b      	ldr	r3, [r7, #16]
 8012fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012fb4:	2201      	movs	r2, #1
 8012fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8012fba:	43da      	mvns	r2, r3
 8012fbc:	4b18      	ldr	r3, [pc, #96]	; (8013020 <xTaskPriorityDisinherit+0x110>)
 8012fbe:	681b      	ldr	r3, [r3, #0]
 8012fc0:	4013      	ands	r3, r2
 8012fc2:	4a17      	ldr	r2, [pc, #92]	; (8013020 <xTaskPriorityDisinherit+0x110>)
 8012fc4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012fc6:	693b      	ldr	r3, [r7, #16]
 8012fc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012fca:	693b      	ldr	r3, [r7, #16]
 8012fcc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012fce:	693b      	ldr	r3, [r7, #16]
 8012fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012fd2:	f1c3 0207 	rsb	r2, r3, #7
 8012fd6:	693b      	ldr	r3, [r7, #16]
 8012fd8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012fda:	693b      	ldr	r3, [r7, #16]
 8012fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012fde:	2201      	movs	r2, #1
 8012fe0:	409a      	lsls	r2, r3
 8012fe2:	4b0f      	ldr	r3, [pc, #60]	; (8013020 <xTaskPriorityDisinherit+0x110>)
 8012fe4:	681b      	ldr	r3, [r3, #0]
 8012fe6:	4313      	orrs	r3, r2
 8012fe8:	4a0d      	ldr	r2, [pc, #52]	; (8013020 <xTaskPriorityDisinherit+0x110>)
 8012fea:	6013      	str	r3, [r2, #0]
 8012fec:	693b      	ldr	r3, [r7, #16]
 8012fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ff0:	4613      	mov	r3, r2
 8012ff2:	009b      	lsls	r3, r3, #2
 8012ff4:	4413      	add	r3, r2
 8012ff6:	009b      	lsls	r3, r3, #2
 8012ff8:	4a08      	ldr	r2, [pc, #32]	; (801301c <xTaskPriorityDisinherit+0x10c>)
 8012ffa:	441a      	add	r2, r3
 8012ffc:	693b      	ldr	r3, [r7, #16]
 8012ffe:	3304      	adds	r3, #4
 8013000:	4619      	mov	r1, r3
 8013002:	4610      	mov	r0, r2
 8013004:	f7fe f817 	bl	8011036 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8013008:	2301      	movs	r3, #1
 801300a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801300c:	697b      	ldr	r3, [r7, #20]
	}
 801300e:	4618      	mov	r0, r3
 8013010:	3718      	adds	r7, #24
 8013012:	46bd      	mov	sp, r7
 8013014:	bd80      	pop	{r7, pc}
 8013016:	bf00      	nop
 8013018:	20001214 	.word	0x20001214
 801301c:	20001218 	.word	0x20001218
 8013020:	2000131c 	.word	0x2000131c

08013024 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8013024:	b580      	push	{r7, lr}
 8013026:	b088      	sub	sp, #32
 8013028:	af00      	add	r7, sp, #0
 801302a:	6078      	str	r0, [r7, #4]
 801302c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8013032:	2301      	movs	r3, #1
 8013034:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	2b00      	cmp	r3, #0
 801303a:	f000 8087 	beq.w	801314c <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801303e:	69bb      	ldr	r3, [r7, #24]
 8013040:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013042:	2b00      	cmp	r3, #0
 8013044:	d10c      	bne.n	8013060 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8013046:	f04f 0350 	mov.w	r3, #80	; 0x50
 801304a:	b672      	cpsid	i
 801304c:	f383 8811 	msr	BASEPRI, r3
 8013050:	f3bf 8f6f 	isb	sy
 8013054:	f3bf 8f4f 	dsb	sy
 8013058:	b662      	cpsie	i
 801305a:	60fb      	str	r3, [r7, #12]
}
 801305c:	bf00      	nop
 801305e:	e7fe      	b.n	801305e <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8013060:	69bb      	ldr	r3, [r7, #24]
 8013062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013064:	683a      	ldr	r2, [r7, #0]
 8013066:	429a      	cmp	r2, r3
 8013068:	d902      	bls.n	8013070 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801306a:	683b      	ldr	r3, [r7, #0]
 801306c:	61fb      	str	r3, [r7, #28]
 801306e:	e002      	b.n	8013076 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8013070:	69bb      	ldr	r3, [r7, #24]
 8013072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013074:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8013076:	69bb      	ldr	r3, [r7, #24]
 8013078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801307a:	69fa      	ldr	r2, [r7, #28]
 801307c:	429a      	cmp	r2, r3
 801307e:	d065      	beq.n	801314c <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8013080:	69bb      	ldr	r3, [r7, #24]
 8013082:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013084:	697a      	ldr	r2, [r7, #20]
 8013086:	429a      	cmp	r2, r3
 8013088:	d160      	bne.n	801314c <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801308a:	4b32      	ldr	r3, [pc, #200]	; (8013154 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 801308c:	681b      	ldr	r3, [r3, #0]
 801308e:	69ba      	ldr	r2, [r7, #24]
 8013090:	429a      	cmp	r2, r3
 8013092:	d10c      	bne.n	80130ae <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 8013094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013098:	b672      	cpsid	i
 801309a:	f383 8811 	msr	BASEPRI, r3
 801309e:	f3bf 8f6f 	isb	sy
 80130a2:	f3bf 8f4f 	dsb	sy
 80130a6:	b662      	cpsie	i
 80130a8:	60bb      	str	r3, [r7, #8]
}
 80130aa:	bf00      	nop
 80130ac:	e7fe      	b.n	80130ac <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80130ae:	69bb      	ldr	r3, [r7, #24]
 80130b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130b2:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80130b4:	69bb      	ldr	r3, [r7, #24]
 80130b6:	69fa      	ldr	r2, [r7, #28]
 80130b8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80130ba:	69bb      	ldr	r3, [r7, #24]
 80130bc:	699b      	ldr	r3, [r3, #24]
 80130be:	2b00      	cmp	r3, #0
 80130c0:	db04      	blt.n	80130cc <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80130c2:	69fb      	ldr	r3, [r7, #28]
 80130c4:	f1c3 0207 	rsb	r2, r3, #7
 80130c8:	69bb      	ldr	r3, [r7, #24]
 80130ca:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80130cc:	69bb      	ldr	r3, [r7, #24]
 80130ce:	6959      	ldr	r1, [r3, #20]
 80130d0:	693a      	ldr	r2, [r7, #16]
 80130d2:	4613      	mov	r3, r2
 80130d4:	009b      	lsls	r3, r3, #2
 80130d6:	4413      	add	r3, r2
 80130d8:	009b      	lsls	r3, r3, #2
 80130da:	4a1f      	ldr	r2, [pc, #124]	; (8013158 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80130dc:	4413      	add	r3, r2
 80130de:	4299      	cmp	r1, r3
 80130e0:	d134      	bne.n	801314c <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80130e2:	69bb      	ldr	r3, [r7, #24]
 80130e4:	3304      	adds	r3, #4
 80130e6:	4618      	mov	r0, r3
 80130e8:	f7fe f802 	bl	80110f0 <uxListRemove>
 80130ec:	4603      	mov	r3, r0
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d115      	bne.n	801311e <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80130f2:	69bb      	ldr	r3, [r7, #24]
 80130f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80130f6:	4918      	ldr	r1, [pc, #96]	; (8013158 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80130f8:	4613      	mov	r3, r2
 80130fa:	009b      	lsls	r3, r3, #2
 80130fc:	4413      	add	r3, r2
 80130fe:	009b      	lsls	r3, r3, #2
 8013100:	440b      	add	r3, r1
 8013102:	681b      	ldr	r3, [r3, #0]
 8013104:	2b00      	cmp	r3, #0
 8013106:	d10a      	bne.n	801311e <vTaskPriorityDisinheritAfterTimeout+0xfa>
 8013108:	69bb      	ldr	r3, [r7, #24]
 801310a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801310c:	2201      	movs	r2, #1
 801310e:	fa02 f303 	lsl.w	r3, r2, r3
 8013112:	43da      	mvns	r2, r3
 8013114:	4b11      	ldr	r3, [pc, #68]	; (801315c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8013116:	681b      	ldr	r3, [r3, #0]
 8013118:	4013      	ands	r3, r2
 801311a:	4a10      	ldr	r2, [pc, #64]	; (801315c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801311c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801311e:	69bb      	ldr	r3, [r7, #24]
 8013120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013122:	2201      	movs	r2, #1
 8013124:	409a      	lsls	r2, r3
 8013126:	4b0d      	ldr	r3, [pc, #52]	; (801315c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8013128:	681b      	ldr	r3, [r3, #0]
 801312a:	4313      	orrs	r3, r2
 801312c:	4a0b      	ldr	r2, [pc, #44]	; (801315c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801312e:	6013      	str	r3, [r2, #0]
 8013130:	69bb      	ldr	r3, [r7, #24]
 8013132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013134:	4613      	mov	r3, r2
 8013136:	009b      	lsls	r3, r3, #2
 8013138:	4413      	add	r3, r2
 801313a:	009b      	lsls	r3, r3, #2
 801313c:	4a06      	ldr	r2, [pc, #24]	; (8013158 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 801313e:	441a      	add	r2, r3
 8013140:	69bb      	ldr	r3, [r7, #24]
 8013142:	3304      	adds	r3, #4
 8013144:	4619      	mov	r1, r3
 8013146:	4610      	mov	r0, r2
 8013148:	f7fd ff75 	bl	8011036 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801314c:	bf00      	nop
 801314e:	3720      	adds	r7, #32
 8013150:	46bd      	mov	sp, r7
 8013152:	bd80      	pop	{r7, pc}
 8013154:	20001214 	.word	0x20001214
 8013158:	20001218 	.word	0x20001218
 801315c:	2000131c 	.word	0x2000131c

08013160 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8013160:	b480      	push	{r7}
 8013162:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8013164:	4b07      	ldr	r3, [pc, #28]	; (8013184 <pvTaskIncrementMutexHeldCount+0x24>)
 8013166:	681b      	ldr	r3, [r3, #0]
 8013168:	2b00      	cmp	r3, #0
 801316a:	d004      	beq.n	8013176 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801316c:	4b05      	ldr	r3, [pc, #20]	; (8013184 <pvTaskIncrementMutexHeldCount+0x24>)
 801316e:	681b      	ldr	r3, [r3, #0]
 8013170:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8013172:	3201      	adds	r2, #1
 8013174:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8013176:	4b03      	ldr	r3, [pc, #12]	; (8013184 <pvTaskIncrementMutexHeldCount+0x24>)
 8013178:	681b      	ldr	r3, [r3, #0]
	}
 801317a:	4618      	mov	r0, r3
 801317c:	46bd      	mov	sp, r7
 801317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013182:	4770      	bx	lr
 8013184:	20001214 	.word	0x20001214

08013188 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8013188:	b580      	push	{r7, lr}
 801318a:	b084      	sub	sp, #16
 801318c:	af00      	add	r7, sp, #0
 801318e:	6078      	str	r0, [r7, #4]
 8013190:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8013192:	4b29      	ldr	r3, [pc, #164]	; (8013238 <prvAddCurrentTaskToDelayedList+0xb0>)
 8013194:	681b      	ldr	r3, [r3, #0]
 8013196:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013198:	4b28      	ldr	r3, [pc, #160]	; (801323c <prvAddCurrentTaskToDelayedList+0xb4>)
 801319a:	681b      	ldr	r3, [r3, #0]
 801319c:	3304      	adds	r3, #4
 801319e:	4618      	mov	r0, r3
 80131a0:	f7fd ffa6 	bl	80110f0 <uxListRemove>
 80131a4:	4603      	mov	r3, r0
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	d10b      	bne.n	80131c2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80131aa:	4b24      	ldr	r3, [pc, #144]	; (801323c <prvAddCurrentTaskToDelayedList+0xb4>)
 80131ac:	681b      	ldr	r3, [r3, #0]
 80131ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80131b0:	2201      	movs	r2, #1
 80131b2:	fa02 f303 	lsl.w	r3, r2, r3
 80131b6:	43da      	mvns	r2, r3
 80131b8:	4b21      	ldr	r3, [pc, #132]	; (8013240 <prvAddCurrentTaskToDelayedList+0xb8>)
 80131ba:	681b      	ldr	r3, [r3, #0]
 80131bc:	4013      	ands	r3, r2
 80131be:	4a20      	ldr	r2, [pc, #128]	; (8013240 <prvAddCurrentTaskToDelayedList+0xb8>)
 80131c0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80131c8:	d10a      	bne.n	80131e0 <prvAddCurrentTaskToDelayedList+0x58>
 80131ca:	683b      	ldr	r3, [r7, #0]
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	d007      	beq.n	80131e0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80131d0:	4b1a      	ldr	r3, [pc, #104]	; (801323c <prvAddCurrentTaskToDelayedList+0xb4>)
 80131d2:	681b      	ldr	r3, [r3, #0]
 80131d4:	3304      	adds	r3, #4
 80131d6:	4619      	mov	r1, r3
 80131d8:	481a      	ldr	r0, [pc, #104]	; (8013244 <prvAddCurrentTaskToDelayedList+0xbc>)
 80131da:	f7fd ff2c 	bl	8011036 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80131de:	e026      	b.n	801322e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80131e0:	68fa      	ldr	r2, [r7, #12]
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	4413      	add	r3, r2
 80131e6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80131e8:	4b14      	ldr	r3, [pc, #80]	; (801323c <prvAddCurrentTaskToDelayedList+0xb4>)
 80131ea:	681b      	ldr	r3, [r3, #0]
 80131ec:	68ba      	ldr	r2, [r7, #8]
 80131ee:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80131f0:	68ba      	ldr	r2, [r7, #8]
 80131f2:	68fb      	ldr	r3, [r7, #12]
 80131f4:	429a      	cmp	r2, r3
 80131f6:	d209      	bcs.n	801320c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80131f8:	4b13      	ldr	r3, [pc, #76]	; (8013248 <prvAddCurrentTaskToDelayedList+0xc0>)
 80131fa:	681a      	ldr	r2, [r3, #0]
 80131fc:	4b0f      	ldr	r3, [pc, #60]	; (801323c <prvAddCurrentTaskToDelayedList+0xb4>)
 80131fe:	681b      	ldr	r3, [r3, #0]
 8013200:	3304      	adds	r3, #4
 8013202:	4619      	mov	r1, r3
 8013204:	4610      	mov	r0, r2
 8013206:	f7fd ff3a 	bl	801107e <vListInsert>
}
 801320a:	e010      	b.n	801322e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801320c:	4b0f      	ldr	r3, [pc, #60]	; (801324c <prvAddCurrentTaskToDelayedList+0xc4>)
 801320e:	681a      	ldr	r2, [r3, #0]
 8013210:	4b0a      	ldr	r3, [pc, #40]	; (801323c <prvAddCurrentTaskToDelayedList+0xb4>)
 8013212:	681b      	ldr	r3, [r3, #0]
 8013214:	3304      	adds	r3, #4
 8013216:	4619      	mov	r1, r3
 8013218:	4610      	mov	r0, r2
 801321a:	f7fd ff30 	bl	801107e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801321e:	4b0c      	ldr	r3, [pc, #48]	; (8013250 <prvAddCurrentTaskToDelayedList+0xc8>)
 8013220:	681b      	ldr	r3, [r3, #0]
 8013222:	68ba      	ldr	r2, [r7, #8]
 8013224:	429a      	cmp	r2, r3
 8013226:	d202      	bcs.n	801322e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8013228:	4a09      	ldr	r2, [pc, #36]	; (8013250 <prvAddCurrentTaskToDelayedList+0xc8>)
 801322a:	68bb      	ldr	r3, [r7, #8]
 801322c:	6013      	str	r3, [r2, #0]
}
 801322e:	bf00      	nop
 8013230:	3710      	adds	r7, #16
 8013232:	46bd      	mov	sp, r7
 8013234:	bd80      	pop	{r7, pc}
 8013236:	bf00      	nop
 8013238:	20001318 	.word	0x20001318
 801323c:	20001214 	.word	0x20001214
 8013240:	2000131c 	.word	0x2000131c
 8013244:	20001300 	.word	0x20001300
 8013248:	200012d0 	.word	0x200012d0
 801324c:	200012cc 	.word	0x200012cc
 8013250:	20001334 	.word	0x20001334

08013254 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8013254:	b480      	push	{r7}
 8013256:	b085      	sub	sp, #20
 8013258:	af00      	add	r7, sp, #0
 801325a:	60f8      	str	r0, [r7, #12]
 801325c:	60b9      	str	r1, [r7, #8]
 801325e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8013260:	68fb      	ldr	r3, [r7, #12]
 8013262:	3b04      	subs	r3, #4
 8013264:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8013266:	68fb      	ldr	r3, [r7, #12]
 8013268:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801326c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801326e:	68fb      	ldr	r3, [r7, #12]
 8013270:	3b04      	subs	r3, #4
 8013272:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8013274:	68bb      	ldr	r3, [r7, #8]
 8013276:	f023 0201 	bic.w	r2, r3, #1
 801327a:	68fb      	ldr	r3, [r7, #12]
 801327c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801327e:	68fb      	ldr	r3, [r7, #12]
 8013280:	3b04      	subs	r3, #4
 8013282:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8013284:	4a0c      	ldr	r2, [pc, #48]	; (80132b8 <pxPortInitialiseStack+0x64>)
 8013286:	68fb      	ldr	r3, [r7, #12]
 8013288:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801328a:	68fb      	ldr	r3, [r7, #12]
 801328c:	3b14      	subs	r3, #20
 801328e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8013290:	687a      	ldr	r2, [r7, #4]
 8013292:	68fb      	ldr	r3, [r7, #12]
 8013294:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8013296:	68fb      	ldr	r3, [r7, #12]
 8013298:	3b04      	subs	r3, #4
 801329a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801329c:	68fb      	ldr	r3, [r7, #12]
 801329e:	f06f 0202 	mvn.w	r2, #2
 80132a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80132a4:	68fb      	ldr	r3, [r7, #12]
 80132a6:	3b20      	subs	r3, #32
 80132a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80132aa:	68fb      	ldr	r3, [r7, #12]
}
 80132ac:	4618      	mov	r0, r3
 80132ae:	3714      	adds	r7, #20
 80132b0:	46bd      	mov	sp, r7
 80132b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132b6:	4770      	bx	lr
 80132b8:	080132bd 	.word	0x080132bd

080132bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80132bc:	b480      	push	{r7}
 80132be:	b085      	sub	sp, #20
 80132c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80132c2:	2300      	movs	r3, #0
 80132c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80132c6:	4b14      	ldr	r3, [pc, #80]	; (8013318 <prvTaskExitError+0x5c>)
 80132c8:	681b      	ldr	r3, [r3, #0]
 80132ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80132ce:	d00c      	beq.n	80132ea <prvTaskExitError+0x2e>
	__asm volatile
 80132d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132d4:	b672      	cpsid	i
 80132d6:	f383 8811 	msr	BASEPRI, r3
 80132da:	f3bf 8f6f 	isb	sy
 80132de:	f3bf 8f4f 	dsb	sy
 80132e2:	b662      	cpsie	i
 80132e4:	60fb      	str	r3, [r7, #12]
}
 80132e6:	bf00      	nop
 80132e8:	e7fe      	b.n	80132e8 <prvTaskExitError+0x2c>
	__asm volatile
 80132ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132ee:	b672      	cpsid	i
 80132f0:	f383 8811 	msr	BASEPRI, r3
 80132f4:	f3bf 8f6f 	isb	sy
 80132f8:	f3bf 8f4f 	dsb	sy
 80132fc:	b662      	cpsie	i
 80132fe:	60bb      	str	r3, [r7, #8]
}
 8013300:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8013302:	bf00      	nop
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	2b00      	cmp	r3, #0
 8013308:	d0fc      	beq.n	8013304 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801330a:	bf00      	nop
 801330c:	bf00      	nop
 801330e:	3714      	adds	r7, #20
 8013310:	46bd      	mov	sp, r7
 8013312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013316:	4770      	bx	lr
 8013318:	2000008c 	.word	0x2000008c
 801331c:	00000000 	.word	0x00000000

08013320 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8013320:	4b07      	ldr	r3, [pc, #28]	; (8013340 <pxCurrentTCBConst2>)
 8013322:	6819      	ldr	r1, [r3, #0]
 8013324:	6808      	ldr	r0, [r1, #0]
 8013326:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801332a:	f380 8809 	msr	PSP, r0
 801332e:	f3bf 8f6f 	isb	sy
 8013332:	f04f 0000 	mov.w	r0, #0
 8013336:	f380 8811 	msr	BASEPRI, r0
 801333a:	4770      	bx	lr
 801333c:	f3af 8000 	nop.w

08013340 <pxCurrentTCBConst2>:
 8013340:	20001214 	.word	0x20001214
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8013344:	bf00      	nop
 8013346:	bf00      	nop

08013348 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8013348:	4808      	ldr	r0, [pc, #32]	; (801336c <prvPortStartFirstTask+0x24>)
 801334a:	6800      	ldr	r0, [r0, #0]
 801334c:	6800      	ldr	r0, [r0, #0]
 801334e:	f380 8808 	msr	MSP, r0
 8013352:	f04f 0000 	mov.w	r0, #0
 8013356:	f380 8814 	msr	CONTROL, r0
 801335a:	b662      	cpsie	i
 801335c:	b661      	cpsie	f
 801335e:	f3bf 8f4f 	dsb	sy
 8013362:	f3bf 8f6f 	isb	sy
 8013366:	df00      	svc	0
 8013368:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801336a:	bf00      	nop
 801336c:	e000ed08 	.word	0xe000ed08

08013370 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013370:	b580      	push	{r7, lr}
 8013372:	b084      	sub	sp, #16
 8013374:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8013376:	4b37      	ldr	r3, [pc, #220]	; (8013454 <xPortStartScheduler+0xe4>)
 8013378:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801337a:	68fb      	ldr	r3, [r7, #12]
 801337c:	781b      	ldrb	r3, [r3, #0]
 801337e:	b2db      	uxtb	r3, r3
 8013380:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8013382:	68fb      	ldr	r3, [r7, #12]
 8013384:	22ff      	movs	r2, #255	; 0xff
 8013386:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8013388:	68fb      	ldr	r3, [r7, #12]
 801338a:	781b      	ldrb	r3, [r3, #0]
 801338c:	b2db      	uxtb	r3, r3
 801338e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8013390:	78fb      	ldrb	r3, [r7, #3]
 8013392:	b2db      	uxtb	r3, r3
 8013394:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8013398:	b2da      	uxtb	r2, r3
 801339a:	4b2f      	ldr	r3, [pc, #188]	; (8013458 <xPortStartScheduler+0xe8>)
 801339c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801339e:	4b2f      	ldr	r3, [pc, #188]	; (801345c <xPortStartScheduler+0xec>)
 80133a0:	2207      	movs	r2, #7
 80133a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80133a4:	e009      	b.n	80133ba <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80133a6:	4b2d      	ldr	r3, [pc, #180]	; (801345c <xPortStartScheduler+0xec>)
 80133a8:	681b      	ldr	r3, [r3, #0]
 80133aa:	3b01      	subs	r3, #1
 80133ac:	4a2b      	ldr	r2, [pc, #172]	; (801345c <xPortStartScheduler+0xec>)
 80133ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80133b0:	78fb      	ldrb	r3, [r7, #3]
 80133b2:	b2db      	uxtb	r3, r3
 80133b4:	005b      	lsls	r3, r3, #1
 80133b6:	b2db      	uxtb	r3, r3
 80133b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80133ba:	78fb      	ldrb	r3, [r7, #3]
 80133bc:	b2db      	uxtb	r3, r3
 80133be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80133c2:	2b80      	cmp	r3, #128	; 0x80
 80133c4:	d0ef      	beq.n	80133a6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80133c6:	4b25      	ldr	r3, [pc, #148]	; (801345c <xPortStartScheduler+0xec>)
 80133c8:	681b      	ldr	r3, [r3, #0]
 80133ca:	f1c3 0307 	rsb	r3, r3, #7
 80133ce:	2b04      	cmp	r3, #4
 80133d0:	d00c      	beq.n	80133ec <xPortStartScheduler+0x7c>
	__asm volatile
 80133d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133d6:	b672      	cpsid	i
 80133d8:	f383 8811 	msr	BASEPRI, r3
 80133dc:	f3bf 8f6f 	isb	sy
 80133e0:	f3bf 8f4f 	dsb	sy
 80133e4:	b662      	cpsie	i
 80133e6:	60bb      	str	r3, [r7, #8]
}
 80133e8:	bf00      	nop
 80133ea:	e7fe      	b.n	80133ea <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80133ec:	4b1b      	ldr	r3, [pc, #108]	; (801345c <xPortStartScheduler+0xec>)
 80133ee:	681b      	ldr	r3, [r3, #0]
 80133f0:	021b      	lsls	r3, r3, #8
 80133f2:	4a1a      	ldr	r2, [pc, #104]	; (801345c <xPortStartScheduler+0xec>)
 80133f4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80133f6:	4b19      	ldr	r3, [pc, #100]	; (801345c <xPortStartScheduler+0xec>)
 80133f8:	681b      	ldr	r3, [r3, #0]
 80133fa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80133fe:	4a17      	ldr	r2, [pc, #92]	; (801345c <xPortStartScheduler+0xec>)
 8013400:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	b2da      	uxtb	r2, r3
 8013406:	68fb      	ldr	r3, [r7, #12]
 8013408:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801340a:	4b15      	ldr	r3, [pc, #84]	; (8013460 <xPortStartScheduler+0xf0>)
 801340c:	681b      	ldr	r3, [r3, #0]
 801340e:	4a14      	ldr	r2, [pc, #80]	; (8013460 <xPortStartScheduler+0xf0>)
 8013410:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8013414:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8013416:	4b12      	ldr	r3, [pc, #72]	; (8013460 <xPortStartScheduler+0xf0>)
 8013418:	681b      	ldr	r3, [r3, #0]
 801341a:	4a11      	ldr	r2, [pc, #68]	; (8013460 <xPortStartScheduler+0xf0>)
 801341c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8013420:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8013422:	f000 f8dd 	bl	80135e0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8013426:	4b0f      	ldr	r3, [pc, #60]	; (8013464 <xPortStartScheduler+0xf4>)
 8013428:	2200      	movs	r2, #0
 801342a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801342c:	f000 f8fc 	bl	8013628 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8013430:	4b0d      	ldr	r3, [pc, #52]	; (8013468 <xPortStartScheduler+0xf8>)
 8013432:	681b      	ldr	r3, [r3, #0]
 8013434:	4a0c      	ldr	r2, [pc, #48]	; (8013468 <xPortStartScheduler+0xf8>)
 8013436:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801343a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801343c:	f7ff ff84 	bl	8013348 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8013440:	f7ff fa5a 	bl	80128f8 <vTaskSwitchContext>
	prvTaskExitError();
 8013444:	f7ff ff3a 	bl	80132bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8013448:	2300      	movs	r3, #0
}
 801344a:	4618      	mov	r0, r3
 801344c:	3710      	adds	r7, #16
 801344e:	46bd      	mov	sp, r7
 8013450:	bd80      	pop	{r7, pc}
 8013452:	bf00      	nop
 8013454:	e000e400 	.word	0xe000e400
 8013458:	20001340 	.word	0x20001340
 801345c:	20001344 	.word	0x20001344
 8013460:	e000ed20 	.word	0xe000ed20
 8013464:	2000008c 	.word	0x2000008c
 8013468:	e000ef34 	.word	0xe000ef34

0801346c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801346c:	b480      	push	{r7}
 801346e:	b083      	sub	sp, #12
 8013470:	af00      	add	r7, sp, #0
	__asm volatile
 8013472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013476:	b672      	cpsid	i
 8013478:	f383 8811 	msr	BASEPRI, r3
 801347c:	f3bf 8f6f 	isb	sy
 8013480:	f3bf 8f4f 	dsb	sy
 8013484:	b662      	cpsie	i
 8013486:	607b      	str	r3, [r7, #4]
}
 8013488:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801348a:	4b10      	ldr	r3, [pc, #64]	; (80134cc <vPortEnterCritical+0x60>)
 801348c:	681b      	ldr	r3, [r3, #0]
 801348e:	3301      	adds	r3, #1
 8013490:	4a0e      	ldr	r2, [pc, #56]	; (80134cc <vPortEnterCritical+0x60>)
 8013492:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8013494:	4b0d      	ldr	r3, [pc, #52]	; (80134cc <vPortEnterCritical+0x60>)
 8013496:	681b      	ldr	r3, [r3, #0]
 8013498:	2b01      	cmp	r3, #1
 801349a:	d111      	bne.n	80134c0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801349c:	4b0c      	ldr	r3, [pc, #48]	; (80134d0 <vPortEnterCritical+0x64>)
 801349e:	681b      	ldr	r3, [r3, #0]
 80134a0:	b2db      	uxtb	r3, r3
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	d00c      	beq.n	80134c0 <vPortEnterCritical+0x54>
	__asm volatile
 80134a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134aa:	b672      	cpsid	i
 80134ac:	f383 8811 	msr	BASEPRI, r3
 80134b0:	f3bf 8f6f 	isb	sy
 80134b4:	f3bf 8f4f 	dsb	sy
 80134b8:	b662      	cpsie	i
 80134ba:	603b      	str	r3, [r7, #0]
}
 80134bc:	bf00      	nop
 80134be:	e7fe      	b.n	80134be <vPortEnterCritical+0x52>
	}
}
 80134c0:	bf00      	nop
 80134c2:	370c      	adds	r7, #12
 80134c4:	46bd      	mov	sp, r7
 80134c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134ca:	4770      	bx	lr
 80134cc:	2000008c 	.word	0x2000008c
 80134d0:	e000ed04 	.word	0xe000ed04

080134d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80134d4:	b480      	push	{r7}
 80134d6:	b083      	sub	sp, #12
 80134d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80134da:	4b13      	ldr	r3, [pc, #76]	; (8013528 <vPortExitCritical+0x54>)
 80134dc:	681b      	ldr	r3, [r3, #0]
 80134de:	2b00      	cmp	r3, #0
 80134e0:	d10c      	bne.n	80134fc <vPortExitCritical+0x28>
	__asm volatile
 80134e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134e6:	b672      	cpsid	i
 80134e8:	f383 8811 	msr	BASEPRI, r3
 80134ec:	f3bf 8f6f 	isb	sy
 80134f0:	f3bf 8f4f 	dsb	sy
 80134f4:	b662      	cpsie	i
 80134f6:	607b      	str	r3, [r7, #4]
}
 80134f8:	bf00      	nop
 80134fa:	e7fe      	b.n	80134fa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80134fc:	4b0a      	ldr	r3, [pc, #40]	; (8013528 <vPortExitCritical+0x54>)
 80134fe:	681b      	ldr	r3, [r3, #0]
 8013500:	3b01      	subs	r3, #1
 8013502:	4a09      	ldr	r2, [pc, #36]	; (8013528 <vPortExitCritical+0x54>)
 8013504:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8013506:	4b08      	ldr	r3, [pc, #32]	; (8013528 <vPortExitCritical+0x54>)
 8013508:	681b      	ldr	r3, [r3, #0]
 801350a:	2b00      	cmp	r3, #0
 801350c:	d105      	bne.n	801351a <vPortExitCritical+0x46>
 801350e:	2300      	movs	r3, #0
 8013510:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013512:	683b      	ldr	r3, [r7, #0]
 8013514:	f383 8811 	msr	BASEPRI, r3
}
 8013518:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801351a:	bf00      	nop
 801351c:	370c      	adds	r7, #12
 801351e:	46bd      	mov	sp, r7
 8013520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013524:	4770      	bx	lr
 8013526:	bf00      	nop
 8013528:	2000008c 	.word	0x2000008c
 801352c:	00000000 	.word	0x00000000

08013530 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8013530:	f3ef 8009 	mrs	r0, PSP
 8013534:	f3bf 8f6f 	isb	sy
 8013538:	4b15      	ldr	r3, [pc, #84]	; (8013590 <pxCurrentTCBConst>)
 801353a:	681a      	ldr	r2, [r3, #0]
 801353c:	f01e 0f10 	tst.w	lr, #16
 8013540:	bf08      	it	eq
 8013542:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8013546:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801354a:	6010      	str	r0, [r2, #0]
 801354c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8013550:	f04f 0050 	mov.w	r0, #80	; 0x50
 8013554:	b672      	cpsid	i
 8013556:	f380 8811 	msr	BASEPRI, r0
 801355a:	f3bf 8f4f 	dsb	sy
 801355e:	f3bf 8f6f 	isb	sy
 8013562:	b662      	cpsie	i
 8013564:	f7ff f9c8 	bl	80128f8 <vTaskSwitchContext>
 8013568:	f04f 0000 	mov.w	r0, #0
 801356c:	f380 8811 	msr	BASEPRI, r0
 8013570:	bc09      	pop	{r0, r3}
 8013572:	6819      	ldr	r1, [r3, #0]
 8013574:	6808      	ldr	r0, [r1, #0]
 8013576:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801357a:	f01e 0f10 	tst.w	lr, #16
 801357e:	bf08      	it	eq
 8013580:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8013584:	f380 8809 	msr	PSP, r0
 8013588:	f3bf 8f6f 	isb	sy
 801358c:	4770      	bx	lr
 801358e:	bf00      	nop

08013590 <pxCurrentTCBConst>:
 8013590:	20001214 	.word	0x20001214
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8013594:	bf00      	nop
 8013596:	bf00      	nop

08013598 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8013598:	b580      	push	{r7, lr}
 801359a:	b082      	sub	sp, #8
 801359c:	af00      	add	r7, sp, #0
	__asm volatile
 801359e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135a2:	b672      	cpsid	i
 80135a4:	f383 8811 	msr	BASEPRI, r3
 80135a8:	f3bf 8f6f 	isb	sy
 80135ac:	f3bf 8f4f 	dsb	sy
 80135b0:	b662      	cpsie	i
 80135b2:	607b      	str	r3, [r7, #4]
}
 80135b4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80135b6:	f7ff f8e5 	bl	8012784 <xTaskIncrementTick>
 80135ba:	4603      	mov	r3, r0
 80135bc:	2b00      	cmp	r3, #0
 80135be:	d003      	beq.n	80135c8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80135c0:	4b06      	ldr	r3, [pc, #24]	; (80135dc <SysTick_Handler+0x44>)
 80135c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80135c6:	601a      	str	r2, [r3, #0]
 80135c8:	2300      	movs	r3, #0
 80135ca:	603b      	str	r3, [r7, #0]
	__asm volatile
 80135cc:	683b      	ldr	r3, [r7, #0]
 80135ce:	f383 8811 	msr	BASEPRI, r3
}
 80135d2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80135d4:	bf00      	nop
 80135d6:	3708      	adds	r7, #8
 80135d8:	46bd      	mov	sp, r7
 80135da:	bd80      	pop	{r7, pc}
 80135dc:	e000ed04 	.word	0xe000ed04

080135e0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80135e0:	b480      	push	{r7}
 80135e2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80135e4:	4b0b      	ldr	r3, [pc, #44]	; (8013614 <vPortSetupTimerInterrupt+0x34>)
 80135e6:	2200      	movs	r2, #0
 80135e8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80135ea:	4b0b      	ldr	r3, [pc, #44]	; (8013618 <vPortSetupTimerInterrupt+0x38>)
 80135ec:	2200      	movs	r2, #0
 80135ee:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80135f0:	4b0a      	ldr	r3, [pc, #40]	; (801361c <vPortSetupTimerInterrupt+0x3c>)
 80135f2:	681b      	ldr	r3, [r3, #0]
 80135f4:	4a0a      	ldr	r2, [pc, #40]	; (8013620 <vPortSetupTimerInterrupt+0x40>)
 80135f6:	fba2 2303 	umull	r2, r3, r2, r3
 80135fa:	099b      	lsrs	r3, r3, #6
 80135fc:	4a09      	ldr	r2, [pc, #36]	; (8013624 <vPortSetupTimerInterrupt+0x44>)
 80135fe:	3b01      	subs	r3, #1
 8013600:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8013602:	4b04      	ldr	r3, [pc, #16]	; (8013614 <vPortSetupTimerInterrupt+0x34>)
 8013604:	2207      	movs	r2, #7
 8013606:	601a      	str	r2, [r3, #0]
}
 8013608:	bf00      	nop
 801360a:	46bd      	mov	sp, r7
 801360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013610:	4770      	bx	lr
 8013612:	bf00      	nop
 8013614:	e000e010 	.word	0xe000e010
 8013618:	e000e018 	.word	0xe000e018
 801361c:	20000044 	.word	0x20000044
 8013620:	10624dd3 	.word	0x10624dd3
 8013624:	e000e014 	.word	0xe000e014

08013628 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8013628:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8013638 <vPortEnableVFP+0x10>
 801362c:	6801      	ldr	r1, [r0, #0]
 801362e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8013632:	6001      	str	r1, [r0, #0]
 8013634:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8013636:	bf00      	nop
 8013638:	e000ed88 	.word	0xe000ed88

0801363c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801363c:	b480      	push	{r7}
 801363e:	b085      	sub	sp, #20
 8013640:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8013642:	f3ef 8305 	mrs	r3, IPSR
 8013646:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8013648:	68fb      	ldr	r3, [r7, #12]
 801364a:	2b0f      	cmp	r3, #15
 801364c:	d916      	bls.n	801367c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801364e:	4a19      	ldr	r2, [pc, #100]	; (80136b4 <vPortValidateInterruptPriority+0x78>)
 8013650:	68fb      	ldr	r3, [r7, #12]
 8013652:	4413      	add	r3, r2
 8013654:	781b      	ldrb	r3, [r3, #0]
 8013656:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8013658:	4b17      	ldr	r3, [pc, #92]	; (80136b8 <vPortValidateInterruptPriority+0x7c>)
 801365a:	781b      	ldrb	r3, [r3, #0]
 801365c:	7afa      	ldrb	r2, [r7, #11]
 801365e:	429a      	cmp	r2, r3
 8013660:	d20c      	bcs.n	801367c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8013662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013666:	b672      	cpsid	i
 8013668:	f383 8811 	msr	BASEPRI, r3
 801366c:	f3bf 8f6f 	isb	sy
 8013670:	f3bf 8f4f 	dsb	sy
 8013674:	b662      	cpsie	i
 8013676:	607b      	str	r3, [r7, #4]
}
 8013678:	bf00      	nop
 801367a:	e7fe      	b.n	801367a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801367c:	4b0f      	ldr	r3, [pc, #60]	; (80136bc <vPortValidateInterruptPriority+0x80>)
 801367e:	681b      	ldr	r3, [r3, #0]
 8013680:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8013684:	4b0e      	ldr	r3, [pc, #56]	; (80136c0 <vPortValidateInterruptPriority+0x84>)
 8013686:	681b      	ldr	r3, [r3, #0]
 8013688:	429a      	cmp	r2, r3
 801368a:	d90c      	bls.n	80136a6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 801368c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013690:	b672      	cpsid	i
 8013692:	f383 8811 	msr	BASEPRI, r3
 8013696:	f3bf 8f6f 	isb	sy
 801369a:	f3bf 8f4f 	dsb	sy
 801369e:	b662      	cpsie	i
 80136a0:	603b      	str	r3, [r7, #0]
}
 80136a2:	bf00      	nop
 80136a4:	e7fe      	b.n	80136a4 <vPortValidateInterruptPriority+0x68>
	}
 80136a6:	bf00      	nop
 80136a8:	3714      	adds	r7, #20
 80136aa:	46bd      	mov	sp, r7
 80136ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136b0:	4770      	bx	lr
 80136b2:	bf00      	nop
 80136b4:	e000e3f0 	.word	0xe000e3f0
 80136b8:	20001340 	.word	0x20001340
 80136bc:	e000ed0c 	.word	0xe000ed0c
 80136c0:	20001344 	.word	0x20001344

080136c4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80136c4:	b580      	push	{r7, lr}
 80136c6:	b08a      	sub	sp, #40	; 0x28
 80136c8:	af00      	add	r7, sp, #0
 80136ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80136cc:	2300      	movs	r3, #0
 80136ce:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80136d0:	f7fe ff8a 	bl	80125e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80136d4:	4b5e      	ldr	r3, [pc, #376]	; (8013850 <pvPortMalloc+0x18c>)
 80136d6:	681b      	ldr	r3, [r3, #0]
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d101      	bne.n	80136e0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80136dc:	f000 f920 	bl	8013920 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80136e0:	4b5c      	ldr	r3, [pc, #368]	; (8013854 <pvPortMalloc+0x190>)
 80136e2:	681a      	ldr	r2, [r3, #0]
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	4013      	ands	r3, r2
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	f040 8092 	bne.w	8013812 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d01f      	beq.n	8013734 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80136f4:	2208      	movs	r2, #8
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	4413      	add	r3, r2
 80136fa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	f003 0307 	and.w	r3, r3, #7
 8013702:	2b00      	cmp	r3, #0
 8013704:	d016      	beq.n	8013734 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	f023 0307 	bic.w	r3, r3, #7
 801370c:	3308      	adds	r3, #8
 801370e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	f003 0307 	and.w	r3, r3, #7
 8013716:	2b00      	cmp	r3, #0
 8013718:	d00c      	beq.n	8013734 <pvPortMalloc+0x70>
	__asm volatile
 801371a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801371e:	b672      	cpsid	i
 8013720:	f383 8811 	msr	BASEPRI, r3
 8013724:	f3bf 8f6f 	isb	sy
 8013728:	f3bf 8f4f 	dsb	sy
 801372c:	b662      	cpsie	i
 801372e:	617b      	str	r3, [r7, #20]
}
 8013730:	bf00      	nop
 8013732:	e7fe      	b.n	8013732 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	2b00      	cmp	r3, #0
 8013738:	d06b      	beq.n	8013812 <pvPortMalloc+0x14e>
 801373a:	4b47      	ldr	r3, [pc, #284]	; (8013858 <pvPortMalloc+0x194>)
 801373c:	681b      	ldr	r3, [r3, #0]
 801373e:	687a      	ldr	r2, [r7, #4]
 8013740:	429a      	cmp	r2, r3
 8013742:	d866      	bhi.n	8013812 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8013744:	4b45      	ldr	r3, [pc, #276]	; (801385c <pvPortMalloc+0x198>)
 8013746:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8013748:	4b44      	ldr	r3, [pc, #272]	; (801385c <pvPortMalloc+0x198>)
 801374a:	681b      	ldr	r3, [r3, #0]
 801374c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801374e:	e004      	b.n	801375a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8013750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013752:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8013754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013756:	681b      	ldr	r3, [r3, #0]
 8013758:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801375a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801375c:	685b      	ldr	r3, [r3, #4]
 801375e:	687a      	ldr	r2, [r7, #4]
 8013760:	429a      	cmp	r2, r3
 8013762:	d903      	bls.n	801376c <pvPortMalloc+0xa8>
 8013764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013766:	681b      	ldr	r3, [r3, #0]
 8013768:	2b00      	cmp	r3, #0
 801376a:	d1f1      	bne.n	8013750 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801376c:	4b38      	ldr	r3, [pc, #224]	; (8013850 <pvPortMalloc+0x18c>)
 801376e:	681b      	ldr	r3, [r3, #0]
 8013770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013772:	429a      	cmp	r2, r3
 8013774:	d04d      	beq.n	8013812 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8013776:	6a3b      	ldr	r3, [r7, #32]
 8013778:	681b      	ldr	r3, [r3, #0]
 801377a:	2208      	movs	r2, #8
 801377c:	4413      	add	r3, r2
 801377e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013782:	681a      	ldr	r2, [r3, #0]
 8013784:	6a3b      	ldr	r3, [r7, #32]
 8013786:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8013788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801378a:	685a      	ldr	r2, [r3, #4]
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	1ad2      	subs	r2, r2, r3
 8013790:	2308      	movs	r3, #8
 8013792:	005b      	lsls	r3, r3, #1
 8013794:	429a      	cmp	r2, r3
 8013796:	d921      	bls.n	80137dc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8013798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	4413      	add	r3, r2
 801379e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80137a0:	69bb      	ldr	r3, [r7, #24]
 80137a2:	f003 0307 	and.w	r3, r3, #7
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	d00c      	beq.n	80137c4 <pvPortMalloc+0x100>
	__asm volatile
 80137aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137ae:	b672      	cpsid	i
 80137b0:	f383 8811 	msr	BASEPRI, r3
 80137b4:	f3bf 8f6f 	isb	sy
 80137b8:	f3bf 8f4f 	dsb	sy
 80137bc:	b662      	cpsie	i
 80137be:	613b      	str	r3, [r7, #16]
}
 80137c0:	bf00      	nop
 80137c2:	e7fe      	b.n	80137c2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80137c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137c6:	685a      	ldr	r2, [r3, #4]
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	1ad2      	subs	r2, r2, r3
 80137cc:	69bb      	ldr	r3, [r7, #24]
 80137ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80137d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137d2:	687a      	ldr	r2, [r7, #4]
 80137d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80137d6:	69b8      	ldr	r0, [r7, #24]
 80137d8:	f000 f904 	bl	80139e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80137dc:	4b1e      	ldr	r3, [pc, #120]	; (8013858 <pvPortMalloc+0x194>)
 80137de:	681a      	ldr	r2, [r3, #0]
 80137e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137e2:	685b      	ldr	r3, [r3, #4]
 80137e4:	1ad3      	subs	r3, r2, r3
 80137e6:	4a1c      	ldr	r2, [pc, #112]	; (8013858 <pvPortMalloc+0x194>)
 80137e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80137ea:	4b1b      	ldr	r3, [pc, #108]	; (8013858 <pvPortMalloc+0x194>)
 80137ec:	681a      	ldr	r2, [r3, #0]
 80137ee:	4b1c      	ldr	r3, [pc, #112]	; (8013860 <pvPortMalloc+0x19c>)
 80137f0:	681b      	ldr	r3, [r3, #0]
 80137f2:	429a      	cmp	r2, r3
 80137f4:	d203      	bcs.n	80137fe <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80137f6:	4b18      	ldr	r3, [pc, #96]	; (8013858 <pvPortMalloc+0x194>)
 80137f8:	681b      	ldr	r3, [r3, #0]
 80137fa:	4a19      	ldr	r2, [pc, #100]	; (8013860 <pvPortMalloc+0x19c>)
 80137fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80137fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013800:	685a      	ldr	r2, [r3, #4]
 8013802:	4b14      	ldr	r3, [pc, #80]	; (8013854 <pvPortMalloc+0x190>)
 8013804:	681b      	ldr	r3, [r3, #0]
 8013806:	431a      	orrs	r2, r3
 8013808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801380a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801380c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801380e:	2200      	movs	r2, #0
 8013810:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8013812:	f7fe fef7 	bl	8012604 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8013816:	69fb      	ldr	r3, [r7, #28]
 8013818:	2b00      	cmp	r3, #0
 801381a:	d101      	bne.n	8013820 <pvPortMalloc+0x15c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 801381c:	f7ec fe8c 	bl	8000538 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8013820:	69fb      	ldr	r3, [r7, #28]
 8013822:	f003 0307 	and.w	r3, r3, #7
 8013826:	2b00      	cmp	r3, #0
 8013828:	d00c      	beq.n	8013844 <pvPortMalloc+0x180>
	__asm volatile
 801382a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801382e:	b672      	cpsid	i
 8013830:	f383 8811 	msr	BASEPRI, r3
 8013834:	f3bf 8f6f 	isb	sy
 8013838:	f3bf 8f4f 	dsb	sy
 801383c:	b662      	cpsie	i
 801383e:	60fb      	str	r3, [r7, #12]
}
 8013840:	bf00      	nop
 8013842:	e7fe      	b.n	8013842 <pvPortMalloc+0x17e>
	return pvReturn;
 8013844:	69fb      	ldr	r3, [r7, #28]
}
 8013846:	4618      	mov	r0, r3
 8013848:	3728      	adds	r7, #40	; 0x28
 801384a:	46bd      	mov	sp, r7
 801384c:	bd80      	pop	{r7, pc}
 801384e:	bf00      	nop
 8013850:	20009350 	.word	0x20009350
 8013854:	2000935c 	.word	0x2000935c
 8013858:	20009354 	.word	0x20009354
 801385c:	20009348 	.word	0x20009348
 8013860:	20009358 	.word	0x20009358

08013864 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8013864:	b580      	push	{r7, lr}
 8013866:	b086      	sub	sp, #24
 8013868:	af00      	add	r7, sp, #0
 801386a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	2b00      	cmp	r3, #0
 8013874:	d04c      	beq.n	8013910 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8013876:	2308      	movs	r3, #8
 8013878:	425b      	negs	r3, r3
 801387a:	697a      	ldr	r2, [r7, #20]
 801387c:	4413      	add	r3, r2
 801387e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8013880:	697b      	ldr	r3, [r7, #20]
 8013882:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8013884:	693b      	ldr	r3, [r7, #16]
 8013886:	685a      	ldr	r2, [r3, #4]
 8013888:	4b23      	ldr	r3, [pc, #140]	; (8013918 <vPortFree+0xb4>)
 801388a:	681b      	ldr	r3, [r3, #0]
 801388c:	4013      	ands	r3, r2
 801388e:	2b00      	cmp	r3, #0
 8013890:	d10c      	bne.n	80138ac <vPortFree+0x48>
	__asm volatile
 8013892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013896:	b672      	cpsid	i
 8013898:	f383 8811 	msr	BASEPRI, r3
 801389c:	f3bf 8f6f 	isb	sy
 80138a0:	f3bf 8f4f 	dsb	sy
 80138a4:	b662      	cpsie	i
 80138a6:	60fb      	str	r3, [r7, #12]
}
 80138a8:	bf00      	nop
 80138aa:	e7fe      	b.n	80138aa <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80138ac:	693b      	ldr	r3, [r7, #16]
 80138ae:	681b      	ldr	r3, [r3, #0]
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	d00c      	beq.n	80138ce <vPortFree+0x6a>
	__asm volatile
 80138b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138b8:	b672      	cpsid	i
 80138ba:	f383 8811 	msr	BASEPRI, r3
 80138be:	f3bf 8f6f 	isb	sy
 80138c2:	f3bf 8f4f 	dsb	sy
 80138c6:	b662      	cpsie	i
 80138c8:	60bb      	str	r3, [r7, #8]
}
 80138ca:	bf00      	nop
 80138cc:	e7fe      	b.n	80138cc <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80138ce:	693b      	ldr	r3, [r7, #16]
 80138d0:	685a      	ldr	r2, [r3, #4]
 80138d2:	4b11      	ldr	r3, [pc, #68]	; (8013918 <vPortFree+0xb4>)
 80138d4:	681b      	ldr	r3, [r3, #0]
 80138d6:	4013      	ands	r3, r2
 80138d8:	2b00      	cmp	r3, #0
 80138da:	d019      	beq.n	8013910 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80138dc:	693b      	ldr	r3, [r7, #16]
 80138de:	681b      	ldr	r3, [r3, #0]
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d115      	bne.n	8013910 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80138e4:	693b      	ldr	r3, [r7, #16]
 80138e6:	685a      	ldr	r2, [r3, #4]
 80138e8:	4b0b      	ldr	r3, [pc, #44]	; (8013918 <vPortFree+0xb4>)
 80138ea:	681b      	ldr	r3, [r3, #0]
 80138ec:	43db      	mvns	r3, r3
 80138ee:	401a      	ands	r2, r3
 80138f0:	693b      	ldr	r3, [r7, #16]
 80138f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80138f4:	f7fe fe78 	bl	80125e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80138f8:	693b      	ldr	r3, [r7, #16]
 80138fa:	685a      	ldr	r2, [r3, #4]
 80138fc:	4b07      	ldr	r3, [pc, #28]	; (801391c <vPortFree+0xb8>)
 80138fe:	681b      	ldr	r3, [r3, #0]
 8013900:	4413      	add	r3, r2
 8013902:	4a06      	ldr	r2, [pc, #24]	; (801391c <vPortFree+0xb8>)
 8013904:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8013906:	6938      	ldr	r0, [r7, #16]
 8013908:	f000 f86c 	bl	80139e4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 801390c:	f7fe fe7a 	bl	8012604 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8013910:	bf00      	nop
 8013912:	3718      	adds	r7, #24
 8013914:	46bd      	mov	sp, r7
 8013916:	bd80      	pop	{r7, pc}
 8013918:	2000935c 	.word	0x2000935c
 801391c:	20009354 	.word	0x20009354

08013920 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8013920:	b480      	push	{r7}
 8013922:	b085      	sub	sp, #20
 8013924:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8013926:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801392a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801392c:	4b27      	ldr	r3, [pc, #156]	; (80139cc <prvHeapInit+0xac>)
 801392e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013930:	68fb      	ldr	r3, [r7, #12]
 8013932:	f003 0307 	and.w	r3, r3, #7
 8013936:	2b00      	cmp	r3, #0
 8013938:	d00c      	beq.n	8013954 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801393a:	68fb      	ldr	r3, [r7, #12]
 801393c:	3307      	adds	r3, #7
 801393e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013940:	68fb      	ldr	r3, [r7, #12]
 8013942:	f023 0307 	bic.w	r3, r3, #7
 8013946:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8013948:	68ba      	ldr	r2, [r7, #8]
 801394a:	68fb      	ldr	r3, [r7, #12]
 801394c:	1ad3      	subs	r3, r2, r3
 801394e:	4a1f      	ldr	r2, [pc, #124]	; (80139cc <prvHeapInit+0xac>)
 8013950:	4413      	add	r3, r2
 8013952:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013954:	68fb      	ldr	r3, [r7, #12]
 8013956:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8013958:	4a1d      	ldr	r2, [pc, #116]	; (80139d0 <prvHeapInit+0xb0>)
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801395e:	4b1c      	ldr	r3, [pc, #112]	; (80139d0 <prvHeapInit+0xb0>)
 8013960:	2200      	movs	r2, #0
 8013962:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	68ba      	ldr	r2, [r7, #8]
 8013968:	4413      	add	r3, r2
 801396a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801396c:	2208      	movs	r2, #8
 801396e:	68fb      	ldr	r3, [r7, #12]
 8013970:	1a9b      	subs	r3, r3, r2
 8013972:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013974:	68fb      	ldr	r3, [r7, #12]
 8013976:	f023 0307 	bic.w	r3, r3, #7
 801397a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801397c:	68fb      	ldr	r3, [r7, #12]
 801397e:	4a15      	ldr	r2, [pc, #84]	; (80139d4 <prvHeapInit+0xb4>)
 8013980:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8013982:	4b14      	ldr	r3, [pc, #80]	; (80139d4 <prvHeapInit+0xb4>)
 8013984:	681b      	ldr	r3, [r3, #0]
 8013986:	2200      	movs	r2, #0
 8013988:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801398a:	4b12      	ldr	r3, [pc, #72]	; (80139d4 <prvHeapInit+0xb4>)
 801398c:	681b      	ldr	r3, [r3, #0]
 801398e:	2200      	movs	r2, #0
 8013990:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8013996:	683b      	ldr	r3, [r7, #0]
 8013998:	68fa      	ldr	r2, [r7, #12]
 801399a:	1ad2      	subs	r2, r2, r3
 801399c:	683b      	ldr	r3, [r7, #0]
 801399e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80139a0:	4b0c      	ldr	r3, [pc, #48]	; (80139d4 <prvHeapInit+0xb4>)
 80139a2:	681a      	ldr	r2, [r3, #0]
 80139a4:	683b      	ldr	r3, [r7, #0]
 80139a6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80139a8:	683b      	ldr	r3, [r7, #0]
 80139aa:	685b      	ldr	r3, [r3, #4]
 80139ac:	4a0a      	ldr	r2, [pc, #40]	; (80139d8 <prvHeapInit+0xb8>)
 80139ae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80139b0:	683b      	ldr	r3, [r7, #0]
 80139b2:	685b      	ldr	r3, [r3, #4]
 80139b4:	4a09      	ldr	r2, [pc, #36]	; (80139dc <prvHeapInit+0xbc>)
 80139b6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80139b8:	4b09      	ldr	r3, [pc, #36]	; (80139e0 <prvHeapInit+0xc0>)
 80139ba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80139be:	601a      	str	r2, [r3, #0]
}
 80139c0:	bf00      	nop
 80139c2:	3714      	adds	r7, #20
 80139c4:	46bd      	mov	sp, r7
 80139c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ca:	4770      	bx	lr
 80139cc:	20001348 	.word	0x20001348
 80139d0:	20009348 	.word	0x20009348
 80139d4:	20009350 	.word	0x20009350
 80139d8:	20009358 	.word	0x20009358
 80139dc:	20009354 	.word	0x20009354
 80139e0:	2000935c 	.word	0x2000935c

080139e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80139e4:	b480      	push	{r7}
 80139e6:	b085      	sub	sp, #20
 80139e8:	af00      	add	r7, sp, #0
 80139ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80139ec:	4b28      	ldr	r3, [pc, #160]	; (8013a90 <prvInsertBlockIntoFreeList+0xac>)
 80139ee:	60fb      	str	r3, [r7, #12]
 80139f0:	e002      	b.n	80139f8 <prvInsertBlockIntoFreeList+0x14>
 80139f2:	68fb      	ldr	r3, [r7, #12]
 80139f4:	681b      	ldr	r3, [r3, #0]
 80139f6:	60fb      	str	r3, [r7, #12]
 80139f8:	68fb      	ldr	r3, [r7, #12]
 80139fa:	681b      	ldr	r3, [r3, #0]
 80139fc:	687a      	ldr	r2, [r7, #4]
 80139fe:	429a      	cmp	r2, r3
 8013a00:	d8f7      	bhi.n	80139f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8013a02:	68fb      	ldr	r3, [r7, #12]
 8013a04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8013a06:	68fb      	ldr	r3, [r7, #12]
 8013a08:	685b      	ldr	r3, [r3, #4]
 8013a0a:	68ba      	ldr	r2, [r7, #8]
 8013a0c:	4413      	add	r3, r2
 8013a0e:	687a      	ldr	r2, [r7, #4]
 8013a10:	429a      	cmp	r2, r3
 8013a12:	d108      	bne.n	8013a26 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8013a14:	68fb      	ldr	r3, [r7, #12]
 8013a16:	685a      	ldr	r2, [r3, #4]
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	685b      	ldr	r3, [r3, #4]
 8013a1c:	441a      	add	r2, r3
 8013a1e:	68fb      	ldr	r3, [r7, #12]
 8013a20:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8013a22:	68fb      	ldr	r3, [r7, #12]
 8013a24:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	685b      	ldr	r3, [r3, #4]
 8013a2e:	68ba      	ldr	r2, [r7, #8]
 8013a30:	441a      	add	r2, r3
 8013a32:	68fb      	ldr	r3, [r7, #12]
 8013a34:	681b      	ldr	r3, [r3, #0]
 8013a36:	429a      	cmp	r2, r3
 8013a38:	d118      	bne.n	8013a6c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8013a3a:	68fb      	ldr	r3, [r7, #12]
 8013a3c:	681a      	ldr	r2, [r3, #0]
 8013a3e:	4b15      	ldr	r3, [pc, #84]	; (8013a94 <prvInsertBlockIntoFreeList+0xb0>)
 8013a40:	681b      	ldr	r3, [r3, #0]
 8013a42:	429a      	cmp	r2, r3
 8013a44:	d00d      	beq.n	8013a62 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	685a      	ldr	r2, [r3, #4]
 8013a4a:	68fb      	ldr	r3, [r7, #12]
 8013a4c:	681b      	ldr	r3, [r3, #0]
 8013a4e:	685b      	ldr	r3, [r3, #4]
 8013a50:	441a      	add	r2, r3
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8013a56:	68fb      	ldr	r3, [r7, #12]
 8013a58:	681b      	ldr	r3, [r3, #0]
 8013a5a:	681a      	ldr	r2, [r3, #0]
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	601a      	str	r2, [r3, #0]
 8013a60:	e008      	b.n	8013a74 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8013a62:	4b0c      	ldr	r3, [pc, #48]	; (8013a94 <prvInsertBlockIntoFreeList+0xb0>)
 8013a64:	681a      	ldr	r2, [r3, #0]
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	601a      	str	r2, [r3, #0]
 8013a6a:	e003      	b.n	8013a74 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013a6c:	68fb      	ldr	r3, [r7, #12]
 8013a6e:	681a      	ldr	r2, [r3, #0]
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013a74:	68fa      	ldr	r2, [r7, #12]
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	429a      	cmp	r2, r3
 8013a7a:	d002      	beq.n	8013a82 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013a7c:	68fb      	ldr	r3, [r7, #12]
 8013a7e:	687a      	ldr	r2, [r7, #4]
 8013a80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013a82:	bf00      	nop
 8013a84:	3714      	adds	r7, #20
 8013a86:	46bd      	mov	sp, r7
 8013a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a8c:	4770      	bx	lr
 8013a8e:	bf00      	nop
 8013a90:	20009348 	.word	0x20009348
 8013a94:	20009350 	.word	0x20009350

08013a98 <__libc_init_array>:
 8013a98:	b570      	push	{r4, r5, r6, lr}
 8013a9a:	4d0d      	ldr	r5, [pc, #52]	; (8013ad0 <__libc_init_array+0x38>)
 8013a9c:	4c0d      	ldr	r4, [pc, #52]	; (8013ad4 <__libc_init_array+0x3c>)
 8013a9e:	1b64      	subs	r4, r4, r5
 8013aa0:	10a4      	asrs	r4, r4, #2
 8013aa2:	2600      	movs	r6, #0
 8013aa4:	42a6      	cmp	r6, r4
 8013aa6:	d109      	bne.n	8013abc <__libc_init_array+0x24>
 8013aa8:	4d0b      	ldr	r5, [pc, #44]	; (8013ad8 <__libc_init_array+0x40>)
 8013aaa:	4c0c      	ldr	r4, [pc, #48]	; (8013adc <__libc_init_array+0x44>)
 8013aac:	f000 f82e 	bl	8013b0c <_init>
 8013ab0:	1b64      	subs	r4, r4, r5
 8013ab2:	10a4      	asrs	r4, r4, #2
 8013ab4:	2600      	movs	r6, #0
 8013ab6:	42a6      	cmp	r6, r4
 8013ab8:	d105      	bne.n	8013ac6 <__libc_init_array+0x2e>
 8013aba:	bd70      	pop	{r4, r5, r6, pc}
 8013abc:	f855 3b04 	ldr.w	r3, [r5], #4
 8013ac0:	4798      	blx	r3
 8013ac2:	3601      	adds	r6, #1
 8013ac4:	e7ee      	b.n	8013aa4 <__libc_init_array+0xc>
 8013ac6:	f855 3b04 	ldr.w	r3, [r5], #4
 8013aca:	4798      	blx	r3
 8013acc:	3601      	adds	r6, #1
 8013ace:	e7f2      	b.n	8013ab6 <__libc_init_array+0x1e>
 8013ad0:	0801683c 	.word	0x0801683c
 8013ad4:	0801683c 	.word	0x0801683c
 8013ad8:	0801683c 	.word	0x0801683c
 8013adc:	08016840 	.word	0x08016840

08013ae0 <memcpy>:
 8013ae0:	440a      	add	r2, r1
 8013ae2:	4291      	cmp	r1, r2
 8013ae4:	f100 33ff 	add.w	r3, r0, #4294967295
 8013ae8:	d100      	bne.n	8013aec <memcpy+0xc>
 8013aea:	4770      	bx	lr
 8013aec:	b510      	push	{r4, lr}
 8013aee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013af2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013af6:	4291      	cmp	r1, r2
 8013af8:	d1f9      	bne.n	8013aee <memcpy+0xe>
 8013afa:	bd10      	pop	{r4, pc}

08013afc <memset>:
 8013afc:	4402      	add	r2, r0
 8013afe:	4603      	mov	r3, r0
 8013b00:	4293      	cmp	r3, r2
 8013b02:	d100      	bne.n	8013b06 <memset+0xa>
 8013b04:	4770      	bx	lr
 8013b06:	f803 1b01 	strb.w	r1, [r3], #1
 8013b0a:	e7f9      	b.n	8013b00 <memset+0x4>

08013b0c <_init>:
 8013b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b0e:	bf00      	nop
 8013b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013b12:	bc08      	pop	{r3}
 8013b14:	469e      	mov	lr, r3
 8013b16:	4770      	bx	lr

08013b18 <_fini>:
 8013b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b1a:	bf00      	nop
 8013b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013b1e:	bc08      	pop	{r3}
 8013b20:	469e      	mov	lr, r3
 8013b22:	4770      	bx	lr
